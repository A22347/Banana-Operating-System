
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f9 9d 00 00       	call   c0009e19 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 3d 32 02 00       	call   c0023262 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e6 3e 02 c0       	mov    ebx,0xc0023ee6
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f4 3e 02 c0    	cmp    ebx,0xc0023ef4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 86 02 c0       	mov    eax,0xc00286d8
c0000049:	3d d8 86 02 c0       	cmp    eax,0xc00286d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 86 02 c0       	push   0xc00286d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 86 02 c0       	mov    eax,0xc00286d8
c0000075:	2d d8 86 02 c0       	sub    eax,0xc00286d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 86 02 c0       	push   0xc00286d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 88 02 c0 00 	cmp    BYTE PTR ds:0xc0028860,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb fc 3e 02 c0       	mov    ebx,0xc0023efc
c00000bb:	81 eb f8 3e 02 c0    	sub    ebx,0xc0023ef8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f8 3e 02 c0       	mov    esi,0xc0023ef8
c00000ca:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 88 02 c0       	mov    ds:0xc0028864,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 88 02 c0       	mov    eax,ds:0xc0028864
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 86 02 c0       	push   0xc00286d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 88 02 c0 01 	mov    BYTE PTR ds:0xc0028860,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 88 02 c0       	push   0xc0028868
c000012c:	68 d8 86 02 c0       	push   0xc00286d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 e8 81 01 00       	call   c00184b8 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 c4 ca 00 00       	call   c000cdac <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 c6 81 01 00       	call   c00184b8 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 e3 87 01 00       	call   c0018af4 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 26 8e 01 00       	call   c0019140 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 8c 02 c0 	lgdtd  ds:0xc0028cb0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 32 e9 00 00       	call   c000ee41 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 80 88 02 c0       	mov    ds:0xc0028880,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 80 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028880
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 00 3f 02 c0 02 	test   BYTE PTR [edx-0x3ffdc100],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 00 3f 02 c0 01 	test   BYTE PTR [edx-0x3ffdc100],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 00 3f 02 c0 08 	test   BYTE PTR [edx-0x3ffdc100],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 00 3f 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc100],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 00 3f 02 c0 01 	test   BYTE PTR [edx-0x3ffdc100],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d a0 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288a0
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d a0 88 02 c0    	mov    DWORD PTR ds:0xc00288a0,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 a4 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd775c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 a4 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd775c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d a0 88 02 c0    	mov    DWORD PTR ds:0xc00288a0,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 cc 88 02 c0    	cmp    DWORD PTR ds:0xc00288cc,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d dc 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288dc
c0000d64:	c7 42 0c d4 88 02 c0 	mov    DWORD PTR [edx+0xc],0xc00288d4
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 dc 88 02 c0    	mov    DWORD PTR ds:0xc00288dc,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 cc 88 02 c0    	mov    DWORD PTR ds:0xc00288cc,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 a0 88 02 c0 02 	test   BYTE PTR ds:0xc00288a0,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 d7 8d 00 00       	call   c0009c1c <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 19 8d 00 00       	call   c0009c1c <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 03 8d 00 00       	call   c0009c1c <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 df 8c 00 00       	call   c0009c1c <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d a0 88 02 c0    	mov    edi,DWORD PTR ds:0xc00288a0
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 a4 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd775c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 a4 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd775c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 d4 88 02 c0 	lea    edx,[eax*8-0x3ffd772c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d e0 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288e0
c00010e6:	81 fb d4 88 02 c0    	cmp    ebx,0xc00288d4
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d d4 88 02 c0       	cmp    eax,0xc00288d4
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d d0 88 02 c0    	cmp    DWORD PTR ds:0xc00288d0,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 dc 88 02 c0       	mov    ds:0xc00288dc,eax
c0001122:	a3 e0 88 02 c0       	mov    ds:0xc00288e0,eax
c0001127:	a3 d0 88 02 c0       	mov    ds:0xc00288d0,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 d4 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc00288d4
c0001135:	c7 40 0c d4 88 02 c0 	mov    DWORD PTR [eax+0xc],0xc00288d4
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 e0 88 02 c0       	mov    ds:0xc00288e0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 d4 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc00288d4
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 98 88 02 c0 	lea    ebp,[edx*4-0x3ffd7768]
c0001186:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 a0 88 02 c0 	lea    ecx,[edx*4-0x3ffd7760]
c00011a1:	8b 14 95 a0 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7760]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd d4 8b 02 c0 	or     DWORD PTR [edi*4-0x3ffd742c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 d4 88 02 c0 	lea    eax,[eax*8-0x3ffd772c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d dc 88 02 c0    	mov    DWORD PTR ds:0xc00288dc,ecx
c000125b:	89 0d e0 88 02 c0    	mov    DWORD PTR ds:0xc00288e0,ecx
c0001261:	c7 41 08 d4 88 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00288d4
c0001268:	c7 41 0c d4 88 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00288d4
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd cc 88 02 c0 	lea    edx,[ecx*8-0x3ffd7734]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d d4 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd742c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d d4 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd742c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 cc 88 02 c0 	lea    edx,[eax*4-0x3ffd7734]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d d4 8b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd742c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d dc 88 02 c0    	mov    DWORD PTR ds:0xc00288dc,edi
c000132e:	89 3d e0 88 02 c0    	mov    DWORD PTR ds:0xc00288e0,edi
c0001334:	c7 47 08 d4 88 02 c0 	mov    DWORD PTR [edi+0x8],0xc00288d4
c000133b:	c7 47 0c d4 88 02 c0 	mov    DWORD PTR [edi+0xc],0xc00288d4
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d d0 88 02 c0    	mov    DWORD PTR ds:0xc00288d0,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d cc 88 02 c0    	mov    DWORD PTR ds:0xc00288cc,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba a0 88 02 c0       	mov    edx,0xc00288a0
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d a0 88 02 c0 00 	cmp    DWORD PTR ds:0xc00288a0,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d f4 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bf4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 f4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bf4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d f4 8b 02 c0    	mov    DWORD PTR ds:0xc0028bf4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 cc 88 02 c0    	cmp    DWORD PTR ds:0xc00288cc,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d cc 88 02 c0    	mov    DWORD PTR ds:0xc00288cc,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d a0 88 02 c0 00 	cmp    DWORD PTR ds:0xc00288a0,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 fc 8b 02 c0    	push   DWORD PTR ds:0xc0028bfc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d a0 88 02 c0 00 	cmp    DWORD PTR ds:0xc00288a0,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 fc 8b 02 c0       	mov    eax,ds:0xc0028bfc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d cc 88 02 c0 00 	cmp    DWORD PTR ds:0xc00288cc,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 a4 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd775c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 d4 88 02 c0       	mov    eax,0xc00288d4
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d cc 8b 02 c0       	cmp    eax,0xc0028bcc
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 08 8c 02 c0       	mov    eax,ds:0xc0028c08
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 f0 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bf0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 04 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c04
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 14 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c14
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 04 40 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbffc]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 a0 88 02 c0       	mov    eax,ds:0xc00288a0
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 a0 88 02 c0       	mov    ds:0xc00288a0,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d e4 8b 02 c0    	mov    DWORD PTR ds:0xc0028be4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d e8 8b 02 c0    	mov    DWORD PTR ds:0xc0028be8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d ec 8b 02 c0    	mov    DWORD PTR ds:0xc0028bec,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 f4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bf4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 60 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ca0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 de a3 01 00       	jmp    c001befc <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 60 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ca0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 10 a4 01 00       	jmp    c001bf44 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 60 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ca0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 39 a4 01 00       	jmp    c001bf8c <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 12 12 02 00       	call   c0023048 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 20 41 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbee0]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 20 41 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbee0]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 20 40 02 c0       	mov    edx,0xc0024020
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 40 41 02 c0       	mov    edx,0xc0024140
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba 68 70 02 c0       	mov    edx,0xc0027068
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 4c 41 02 c0       	mov    edx,0xc002414c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 30 41 02 c0       	mov    edx,0xc0024130
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 40 8c 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd73c0]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 20 8c 02 c0    	mov    ax,ds:0xc0028c20
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 20 8c 02 c0    	mov    ds:0xc0028c20,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 0f 00 02 00       	call   c0023048 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 52 41 02 c0       	mov    eax,0xc0024152
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad a0 40 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdbf60]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 5b 41 02 c0       	mov    eax,0xc002415b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 20 41 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbee0]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 da e9 01 00       	call   c0023048 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 30 41 02 c0       	mov    edx,0xc0024130
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 20 40 02 c0       	mov    edx,0xc0024020
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 30 40 02 c0       	mov    edx,0xc0024030
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 40 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73c0]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 40 8c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd73c0],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 a1 d3 01 00       	call   c0023048 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 87 d3 01 00       	call   c0023048 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 77 40 02 c0       	mov    eax,0xc0024077
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 20 bf 01 00       	call   c0023048 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 40 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73c0]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 60 40 02 c0       	mov    esi,0xc0024060
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 94 b8 01 00       	call   c0023048 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 40 41 02 c0       	mov    edx,0xc0024140
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 40 40 02 c0       	mov    edx,0xc0024040
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 50 40 02 c0       	mov    edx,0xc0024050
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 62 41 02 c0       	mov    edx,0xc0024162
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 6e 41 02 c0       	mov    edx,0xc002416e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 82 41 02 c0       	mov    edx,0xc0024182
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 88 17 00 00       	call   c0009d53 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 80 17 00 00       	call   c0009d63 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c a0 44 02 c0 	mov    DWORD PTR [esp+0xc],0xc00244a0
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 a0 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc00244a0
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 a0 42 02 c0       	mov    eax,0xc00242a0
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 e0 41 02 c0       	mov    eax,0xc00241e0
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 a0 41 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe60]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 e2 14 00 00       	jmp    c0009d53 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 fd 14 00 00       	jmp    c0009d73 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0008883:	48                   	dec    eax
c0008884:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000889a:	48                   	dec    eax
c000889b:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00088ab:	ff 05 c4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c4
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c00088ba:	48                   	dec    eax
c00088bb:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c00088d5:	e8 86 04 01 00       	call   c0018d60 <schedule()>
c00088da:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00088df:	48                   	dec    eax
c00088e0:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 d0 8d 02 c0       	mov    eax,ds:0xc0028dd0
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 a0 45 02 c0       	push   0xc00245a0
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 a8 8c 02 c0       	mov    eax,0xc0028ca8
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 a9 45 02 c0       	push   0xc00245a9
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 48 30 02 c0       	mov    eax,0xc0023048
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 b3 45 02 c0       	push   0xc00245b3
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 7c 2d 02 c0       	mov    eax,0xc0022d7c
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 bc 45 02 c0       	push   0xc00245bc
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 48 31 02 c0       	mov    eax,0xc0023148
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 c6 45 02 c0       	push   0xc00245c6
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 c8 2e 02 c0       	mov    eax,0xc0022ec8
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 cf 45 02 c0       	push   0xc00245cf
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 ac 8c 02 c0       	mov    eax,0xc0028cac
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 dc 45 02 c0       	push   0xc00245dc
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 ad 8c 02 c0       	mov    eax,0xc0028cad
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 ff 5c 00 00       	call   c000e73c <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 e9 45 02 c0       	push   0xc00245e9
c0008a6d:	e8 3b 13 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 00 46 02 c0 	mov    DWORD PTR [esp],0xc0024600
c0008a7a:	e8 2e 13 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 c8 12 00 00       	call   c0009d53 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0008a9a:	68 19 46 02 c0       	push   0xc0024619
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 95 fe 00 00       	call   c001893c <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 4b 97 00 c0       	push   0xc000974b
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 88 00 01 00       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 88 95 01 c0       	push   0xc0019588
c0008ac5:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0008acb:	e8 74 00 01 00       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0008ad8:	68 0c 49 02 c0       	push   0xc002490c
c0008add:	c6 05 ad 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028cad,0x1
c0008ae4:	e8 c4 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 75 0e 01 00       	call   c0019963 <Vm::initialise8086()>
c0008aee:	e8 e3 48 00 00       	call   c000d3d6 <Fs::initVFS()>
c0008af3:	c7 04 24 26 46 02 c0 	mov    DWORD PTR [esp],0xc0024626
c0008afa:	e8 ae 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008aff:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 0c 49 02 c0       	push   0xc002490c
c0008b1e:	e8 8a 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b23:	e8 2e e5 00 00       	call   c0017056 <Sys::loadSyscalls()>
c0008b28:	e8 cb c3 00 00       	call   c0014ef8 <Krnl::loadSystemEnv()>
c0008b2d:	e8 1d c8 00 00       	call   c001534f <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 40 46 02 c0       	push   0xc0024640
c0008b3c:	68 49 46 02 c0       	push   0xc0024649
c0008b41:	e8 d3 d2 00 00       	call   c0015e19 <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 a6 54 00 00       	call   c000dff4 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 30 49 02 c0 	mov    DWORD PTR [esp],0xc0024930
c0008b55:	e8 53 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 91 5b 00 00       	call   c000e6fc <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 51 46 02 c0 	mov    DWORD PTR [esp],0xc0024651
c0008b72:	e8 36 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b77:	e8 e4 be 00 00       	call   c0014a60 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 6b 46 02 c0 	mov    DWORD PTR [esp],0xc002466b
c0008b83:	e8 25 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 7c 46 02 c0       	push   0xc002467c
c0008b97:	e8 8a f6 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 b2 f8 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 a6 03 01 00       	call   c0018f58 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 98 46 02 c0       	push   0xc0024698
c0008bc7:	50                   	push   eax
c0008bc8:	e8 e9 5b 00 00       	call   c000e7b6 <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba e0 49 02 c0       	mov    edx,0xc00249e0
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 c1 8c 02 c0 04 	test   BYTE PTR ds:0xc0028cc1,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 a5 9d 01 00       	call   c0022b06 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 8a a8 00 00       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 63 a8 00 00       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 41 a8 00 00       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 1f a8 00 00       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 c0 8c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028cc0,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 2d a7 00 00       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 08 a7 00 00       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 0f 9c 01 00       	call   c0022ac0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 cc 9b 01 00       	call   c0022aa0 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 24 a7 00 00       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 a8 46 02 c0       	push   0xc00246a8
c0008f2d:	e8 0d 41 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 bb 46 02 c0       	push   0xc00246bb
c0008f50:	e8 ea 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 cc 46 02 c0       	push   0xc00246cc
c0008f73:	e8 c7 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 dd 46 02 c0       	push   0xc00246dd
c0008f96:	e8 a4 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 ee 46 02 c0       	push   0xc00246ee
c0008fb9:	e8 81 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 ff 46 02 c0       	push   0xc00246ff
c0008fdc:	e8 5e 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 10 47 02 c0       	push   0xc0024710
c0008fff:	e8 3b 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 21 47 02 c0       	push   0xc0024721
c0009022:	e8 18 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 32 47 02 c0       	push   0xc0024732
c0009045:	e8 f5 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 43 47 02 c0       	push   0xc0024743
c0009068:	e8 d2 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 54 47 02 c0       	push   0xc0024754
c000908b:	e8 af 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 65 47 02 c0       	push   0xc0024765
c00090ae:	e8 8c 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 76 47 02 c0       	push   0xc0024776
c00090d1:	e8 69 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 87 47 02 c0       	push   0xc0024787
c00090f4:	e8 46 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 98 47 02 c0       	push   0xc0024798
c0009117:	e8 23 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 a9 47 02 c0       	push   0xc00247a9
c000913a:	e8 00 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 ba 47 02 c0       	push   0xc00247ba
c000915d:	e8 dd 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 cb 47 02 c0       	push   0xc00247cb
c0009180:	e8 ba 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 dc 47 02 c0       	push   0xc00247dc
c000919f:	e8 9b 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 83 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026783
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 8a 3e 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 ed 47 02 c0       	push   0xc00247ed
c0009288:	e8 74 bd 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 f3 47 02 c0       	push   0xc00247f3
c00092c0:	e8 3c bd 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 e7 98 00 00       	jmp    c0012bf4 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 50 49 02 c0       	push   0xc0024950
c000935a:	e8 4e 0a 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000935f:	58                   	pop    eax
c0009360:	f6 05 c0 8c 02 c0 04 	test   BYTE PTR ds:0xc0028cc0,0x4
c0009367:	5a                   	pop    edx
c0009368:	0f 94 05 80 80 02 c0 	sete   BYTE PTR ds:0xc0028080
c000936f:	68 58 01 00 00       	push   0x158
c0009374:	68 f9 47 02 c0       	push   0xc00247f9
c0009379:	e8 c1 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000937e:	59                   	pop    ecx
c000937f:	5e                   	pop    esi
c0009380:	68 14 01 00 00       	push   0x114
c0009385:	68 0f 48 02 c0       	push   0xc002480f
c000938a:	e8 b0 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000938f:	58                   	pop    eax
c0009390:	5a                   	pop    edx
c0009391:	6a 14                	push   0x14
c0009393:	68 23 48 02 c0       	push   0xc0024823
c0009398:	e8 a2 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000939d:	59                   	pop    ecx
c000939e:	5e                   	pop    esi
c000939f:	68 1f 07 00 00       	push   0x71f
c00093a4:	68 36 48 02 c0       	push   0xc0024836
c00093a9:	e8 91 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093ae:	58                   	pop    eax
c00093af:	5a                   	pop    edx
c00093b0:	6a 5f                	push   0x5f
c00093b2:	68 4d 48 02 c0       	push   0xc002484d
c00093b7:	e8 83 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093bc:	c7 04 24 63 48 02 c0 	mov    DWORD PTR [esp],0xc0024863
c00093c3:	e8 77 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093c8:	c7 04 24 75 48 02 c0 	mov    DWORD PTR [esp],0xc0024875
c00093cf:	e8 d9 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00093d4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093db:	e8 73 09 00 00       	call   c0009d53 <malloc>
c00093e0:	89 c6                	mov    esi,eax
c00093e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093e5:	e8 c2 90 00 00       	call   c00124ac <ACPI::ACPI()>
c00093ea:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00093f0:	c7 04 24 8f 48 02 c0 	mov    DWORD PTR [esp],0xc002488f
c00093f7:	e8 b1 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00093fc:	59                   	pop    ecx
c00093fd:	5e                   	pop    esi
c00093fe:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0009404:	53                   	push   ebx
c0009405:	e8 a8 51 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c000940a:	c7 04 24 74 49 02 c0 	mov    DWORD PTR [esp],0xc0024974
c0009411:	e8 97 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009419:	e8 f8 f8 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c000941e:	c7 04 24 94 49 02 c0 	mov    DWORD PTR [esp],0xc0024994
c0009425:	e8 83 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000942a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000942d:	e8 ee fa ff ff       	call   c0008f20 <Computer::displayFeatures()>
c0009432:	c7 04 24 a9 48 02 c0 	mov    DWORD PTR [esp],0xc00248a9
c0009439:	e8 6f 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000943e:	58                   	pop    eax
c000943f:	5a                   	pop    edx
c0009440:	6a 01                	push   0x1
c0009442:	53                   	push   ebx
c0009443:	e8 ec fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c0009448:	c7 04 24 51 46 02 c0 	mov    DWORD PTR [esp],0xc0024651
c000944f:	e8 59 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009454:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000945b:	e8 f3 08 00 00       	call   c0009d53 <malloc>
c0009460:	89 04 24             	mov    DWORD PTR [esp],eax
c0009463:	89 c6                	mov    esi,eax
c0009465:	e8 74 a2 00 00       	call   c00136de <CPU::CPU()>
c000946a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009470:	59                   	pop    ecx
c0009471:	58                   	pop    eax
c0009472:	56                   	push   esi
c0009473:	53                   	push   ebx
c0009474:	e8 39 51 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c0009479:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000947f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009485:	6a 00                	push   0x0
c0009487:	6a 00                	push   0x0
c0009489:	50                   	push   eax
c000948a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000948d:	83 c4 14             	add    esp,0x14
c0009490:	68 b4 49 02 c0       	push   0xc00249b4
c0009495:	e8 13 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000949a:	e8 af 56 00 00       	call   c000eb4e <setupFPU()>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094a8:	85 c0                	test   eax,eax
c00094aa:	74 1f                	je     c00094cb <Computer::open(int, int, void*)+0x17f>
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	50                   	push   eax
c00094b0:	53                   	push   ebx
c00094b1:	e8 fc 50 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c00094b6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094be:	6a 00                	push   0x0
c00094c0:	6a 00                	push   0x0
c00094c2:	6a 00                	push   0x0
c00094c4:	50                   	push   eax
c00094c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094c8:	83 c4 20             	add    esp,0x20
c00094cb:	83 ec 0c             	sub    esp,0xc
c00094ce:	68 ba 48 02 c0       	push   0xc00248ba
c00094d3:	e8 d5 08 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00094d8:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c00094df:	e8 74 f7 00 00       	call   c0018c58 <setupMultitasking(void (*)())>
c00094e4:	83 c4 14             	add    esp,0x14
c00094e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <Computer::disableNMI()>:
c00094f0:	6a 00                	push   0x0
c00094f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00094f6:	e8 39 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00094fb:	58                   	pop    eax
c00094fc:	5a                   	pop    edx
c00094fd:	c3                   	ret    

c00094fe <Computer::writeCMOS(unsigned char, unsigned char)>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009509:	19 c0                	sbb    eax,eax
c000950b:	83 e0 80             	and    eax,0xffffff80
c000950e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009512:	e6 70                	out    0x70,al
c0009514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009518:	e6 71                	out    0x71,al
c000951a:	c3                   	ret    
c000951b:	90                   	nop

c000951c <Computer::handleNMI()>:
c000951c:	56                   	push   esi
c000951d:	53                   	push   ebx
c000951e:	83 ec 10             	sub    esp,0x10
c0009521:	e4 92                	in     al,0x92
c0009523:	89 c6                	mov    esi,eax
c0009525:	e4 61                	in     al,0x61
c0009527:	68 d5 48 02 c0       	push   0xc00248d5
c000952c:	88 c3                	mov    bl,al
c000952e:	e8 0c 3b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009533:	83 c4 10             	add    esp,0x10
c0009536:	83 e6 10             	and    esi,0x10
c0009539:	75 0d                	jne    c0009548 <Computer::handleNMI()+0x2c>
c000953b:	f6 c3 40             	test   bl,0x40
c000953e:	75 1d                	jne    c000955d <Computer::handleNMI()+0x41>
c0009540:	84 db                	test   bl,bl
c0009542:	78 2d                	js     c0009571 <Computer::handleNMI()+0x55>
c0009544:	58                   	pop    eax
c0009545:	5b                   	pop    ebx
c0009546:	5e                   	pop    esi
c0009547:	c3                   	ret    
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	68 e6 48 02 c0       	push   0xc00248e6
c0009550:	e8 ac ba 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0009555:	83 c4 10             	add    esp,0x10
c0009558:	f6 c3 40             	test   bl,0x40
c000955b:	74 e3                	je     c0009540 <Computer::handleNMI()+0x24>
c000955d:	83 ec 0c             	sub    esp,0xc
c0009560:	68 f3 48 02 c0       	push   0xc00248f3
c0009565:	e8 97 ba 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	84 db                	test   bl,bl
c000956f:	79 d3                	jns    c0009544 <Computer::handleNMI()+0x28>
c0009571:	c7 44 24 10 fd 48 02 c0 	mov    DWORD PTR [esp+0x10],0xc00248fd
c0009579:	5a                   	pop    edx
c000957a:	5b                   	pop    ebx
c000957b:	5e                   	pop    esi
c000957c:	e9 80 ba 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c0009581:	90                   	nop

c0009582 <Computer::setDiskActivityLight(int, bool)>:
c0009582:	56                   	push   esi
c0009583:	53                   	push   ebx
c0009584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009588:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000958d:	77 1b                	ja     c00095aa <Computer::setDiskActivityLight(int, bool)+0x28>
c000958f:	e4 92                	in     al,0x92
c0009591:	bb 40 00 00 00       	mov    ebx,0x40
c0009596:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000959a:	89 da                	mov    edx,ebx
c000959c:	d3 e2                	shl    edx,cl
c000959e:	89 f1                	mov    ecx,esi
c00095a0:	f7 d2                	not    edx
c00095a2:	d3 e3                	shl    ebx,cl
c00095a4:	21 d0                	and    eax,edx
c00095a6:	09 d8                	or     eax,ebx
c00095a8:	e6 92                	out    0x92,al
c00095aa:	5b                   	pop    ebx
c00095ab:	5e                   	pop    esi
c00095ac:	c3                   	ret    
c00095ad:	90                   	nop

c00095ae <GDTEntry::setBase(unsigned int)>:
c00095ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095b6:	89 c1                	mov    ecx,eax
c00095b8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095bc:	c1 e9 10             	shr    ecx,0x10
c00095bf:	c1 e8 18             	shr    eax,0x18
c00095c2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095c5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095c8:	c3                   	ret    
c00095c9:	90                   	nop

c00095ca <GDTEntry::setLimit(unsigned int)>:
c00095ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095d5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095d8:	83 e2 f0             	and    edx,0xfffffff0
c00095db:	c1 e8 10             	shr    eax,0x10
c00095de:	83 e0 0f             	and    eax,0xf
c00095e1:	09 d0                	or     eax,edx
c00095e3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <GDT::GDT()>:
c00095e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095fc:	90                   	nop
c00095fd:	c3                   	ret    

c00095fe <GDT::addEntry(GDTEntry)>:
c00095fe:	53                   	push   ebx
c00095ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009607:	8b 02                	mov    eax,DWORD PTR [edx]
c0009609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000960d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009611:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009615:	8d 48 01             	lea    ecx,[eax+0x1]
c0009618:	c1 e0 03             	shl    eax,0x3
c000961b:	89 0a                	mov    DWORD PTR [edx],ecx
c000961d:	5b                   	pop    ebx
c000961e:	c3                   	ret    
c000961f:	90                   	nop

c0009620 <GDT::getNumberOfEntries()>:
c0009620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009624:	8b 00                	mov    eax,DWORD PTR [eax]
c0009626:	c3                   	ret    
c0009627:	90                   	nop

c0009628 <GDT::flush()>:
c0009628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000962c:	8b 10                	mov    edx,DWORD PTR [eax]
c000962e:	83 c0 04             	add    eax,0x4
c0009631:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009638:	a3 b2 8c 02 c0       	mov    ds:0xc0028cb2,eax
c000963d:	66 89 15 b0 8c 02 c0 	mov    WORD PTR ds:0xc0028cb0,dx
c0009644:	e9 34 6d ff ff       	jmp    c000037d <loadGDT>
c0009649:	90                   	nop

c000964a <GDT::setup()>:
c000964a:	55                   	push   ebp
c000964b:	57                   	push   edi
c000964c:	56                   	push   esi
c000964d:	53                   	push   ebx
c000964e:	83 ec 3c             	sub    esp,0x3c
c0009651:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009655:	6a 00                	push   0x0
c0009657:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000965b:	53                   	push   ebx
c000965c:	e8 4d ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c0009661:	6a 00                	push   0x0
c0009663:	53                   	push   ebx
c0009664:	e8 61 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c0009669:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009671:	6a 00                	push   0x0
c0009673:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009677:	53                   	push   ebx
c0009678:	e8 31 ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c000967d:	68 ff ff ff 00       	push   0xffffff
c0009682:	53                   	push   ebx
c0009683:	e8 42 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c0009688:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000968c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009691:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009696:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000969a:	83 c4 20             	add    esp,0x20
c000969d:	6a 00                	push   0x0
c000969f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096a3:	53                   	push   ebx
c00096a4:	e8 05 ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c00096a9:	68 ff ff ff 00       	push   0xffffff
c00096ae:	53                   	push   ebx
c00096af:	e8 16 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c00096b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096bc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096c0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096c4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096c8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096cd:	0d 00 92 c0 00       	or     eax,0xc09200
c00096d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096d6:	89 d8                	mov    eax,ebx
c00096d8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096dc:	80 cc 60             	or     ah,0x60
c00096df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096e3:	83 c4 0c             	add    esp,0xc
c00096e6:	89 f8                	mov    eax,edi
c00096e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096ec:	80 cc 60             	or     ah,0x60
c00096ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096f3:	89 c7                	mov    edi,eax
c00096f5:	55                   	push   ebp
c00096f6:	e8 03 ff ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c00096fb:	83 c4 0c             	add    esp,0xc
c00096fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009702:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009706:	55                   	push   ebp
c0009707:	e8 f2 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000970c:	83 c4 0c             	add    esp,0xc
c000970f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009713:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009717:	55                   	push   ebp
c0009718:	e8 e1 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000971d:	83 c4 0c             	add    esp,0xc
c0009720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009724:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009728:	53                   	push   ebx
c0009729:	51                   	push   ecx
c000972a:	55                   	push   ebp
c000972b:	e8 ce fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c0009730:	83 c4 0c             	add    esp,0xc
c0009733:	57                   	push   edi
c0009734:	56                   	push   esi
c0009735:	55                   	push   ebp
c0009736:	e8 c3 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000973b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000973e:	e8 e5 fe ff ff       	call   c0009628 <GDT::flush()>
c0009743:	83 c4 4c             	add    esp,0x4c
c0009746:	5b                   	pop    ebx
c0009747:	5e                   	pop    esi
c0009748:	5f                   	pop    edi
c0009749:	5d                   	pop    ebp
c000974a:	c3                   	ret    

c000974b <idleFunction(void*)>:
c000974b:	53                   	push   ebx
c000974c:	83 ec 08             	sub    esp,0x8
c000974f:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0009754:	48                   	dec    eax
c0009755:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000975a:	75 01                	jne    c000975d <idleFunction(void*)+0x12>
c000975c:	fb                   	sti    
c000975d:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0009762:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009768:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000976f:	74 3c                	je     c00097ad <idleFunction(void*)+0x62>
c0009771:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009778:	74 33                	je     c00097ad <idleFunction(void*)+0x62>
c000977a:	31 db                	xor    ebx,ebx
c000977c:	52                   	push   edx
c000977d:	52                   	push   edx
c000977e:	68 e1 00 00 00       	push   0xe1
c0009783:	50                   	push   eax
c0009784:	e8 dd fa ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0009789:	53                   	push   ebx
c000978a:	83 e0 02             	and    eax,0x2
c000978d:	50                   	push   eax
c000978e:	68 e1 00 00 00       	push   0xe1
c0009793:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c0009799:	e8 f4 fa ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c000979e:	83 c4 20             	add    esp,0x20
c00097a1:	e8 0e 6a ff ff       	call   c00001b4 <doTPAUSE>
c00097a6:	e8 1f 9b 01 00       	call   c00232ca <idleCommon()>
c00097ab:	eb f4                	jmp    c00097a1 <idleFunction(void*)+0x56>
c00097ad:	fb                   	sti    
c00097ae:	f4                   	hlt    
c00097af:	e8 16 9b 01 00       	call   c00232ca <idleCommon()>
c00097b4:	eb f7                	jmp    c00097ad <idleFunction(void*)+0x62>
c00097b6:	66 90                	xchg   ax,ax

c00097b8 <IDTEntry::IDTEntry(bool)>:
c00097b8:	83 ec 04             	sub    esp,0x4
c00097bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097bf:	88 04 24             	mov    BYTE PTR [esp],al
c00097c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097c6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097db:	83 e2 f0             	and    edx,0xfffffff0
c00097de:	83 ca 0e             	or     edx,0xe
c00097e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097eb:	83 e2 ef             	and    edx,0xffffffef
c00097ee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097f1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097f5:	74 05                	je     c00097fc <IDTEntry::IDTEntry(bool)+0x44>
c00097f7:	b2 03                	mov    dl,0x3
c00097f9:	eb 05                	jmp    c0009800 <IDTEntry::IDTEntry(bool)+0x48>
c00097fb:	90                   	nop
c00097fc:	b2 00                	mov    dl,0x0
c00097fe:	66 90                	xchg   ax,ax
c0009800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009804:	83 e2 03             	and    edx,0x3
c0009807:	88 d1                	mov    cl,dl
c0009809:	c1 e1 05             	shl    ecx,0x5
c000980c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000980f:	83 e2 9f             	and    edx,0xffffff9f
c0009812:	09 ca                	or     edx,ecx
c0009814:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000981b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000981e:	83 ca 80             	or     edx,0xffffff80
c0009821:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009824:	90                   	nop
c0009825:	83 c4 04             	add    esp,0x4
c0009828:	c3                   	ret    
c0009829:	90                   	nop

c000982a <IDTEntry::setOffset(unsigned int)>:
c000982a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000982e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009832:	66 89 02             	mov    WORD PTR [edx],ax
c0009835:	c1 e8 10             	shr    eax,0x10
c0009838:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000983c:	c3                   	ret    
c000983d:	90                   	nop
c000983e:	66 90                	xchg   ax,ax

c0009840 <IDT::IDT()>:
c0009840:	90                   	nop
c0009841:	c3                   	ret    

c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009846:	83 c0 30             	add    eax,0x30
c0009849:	c3                   	ret    

c000984a <IDT::addEntry(IDTEntry, int)>:
c000984a:	53                   	push   ebx
c000984b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000984f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009853:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000985b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000985e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0009862:	5b                   	pop    ebx
c0009863:	c3                   	ret    

c0009864 <IDT::addEntry(int, void (*)(), bool)>:
c0009864:	53                   	push   ebx
c0009865:	83 ec 10             	sub    esp,0x10
c0009868:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000986d:	50                   	push   eax
c000986e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009872:	53                   	push   ebx
c0009873:	e8 40 ff ff ff       	call   c00097b8 <IDTEntry::IDTEntry(bool)>
c0009878:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000987c:	53                   	push   ebx
c000987d:	e8 a8 ff ff ff       	call   c000982a <IDTEntry::setOffset(unsigned int)>
c0009882:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009886:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000988a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000988e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009892:	e8 b3 ff ff ff       	call   c000984a <IDT::addEntry(IDTEntry, int)>
c0009897:	83 c4 30             	add    esp,0x30
c000989a:	5b                   	pop    ebx
c000989b:	c3                   	ret    

c000989c <IDT::flush()>:
c000989c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a0:	66 c7 05 b8 8c 02 c0 ff 07 	mov    WORD PTR ds:0xc0028cb8,0x7ff
c00098a9:	a3 ba 8c 02 c0       	mov    ds:0xc0028cba,eax
c00098ae:	0f 01 1d b8 8c 02 c0 	lidtd  ds:0xc0028cb8
c00098b5:	c3                   	ret    

c00098b6 <IDT::setup()>:
c00098b6:	57                   	push   edi
c00098b7:	56                   	push   esi
c00098b8:	53                   	push   ebx
c00098b9:	83 ec 10             	sub    esp,0x10
c00098bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098c0:	6a 00                	push   0x0
c00098c2:	68 9d 03 00 c0       	push   0xc000039d
c00098c7:	6a 00                	push   0x0
c00098c9:	53                   	push   ebx
c00098ca:	e8 95 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098cf:	6a 00                	push   0x0
c00098d1:	68 ad 03 00 c0       	push   0xc00003ad
c00098d6:	6a 01                	push   0x1
c00098d8:	53                   	push   ebx
c00098d9:	e8 86 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098de:	83 c4 20             	add    esp,0x20
c00098e1:	6a 00                	push   0x0
c00098e3:	68 b7 03 00 c0       	push   0xc00003b7
c00098e8:	6a 02                	push   0x2
c00098ea:	53                   	push   ebx
c00098eb:	e8 74 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098f0:	6a 00                	push   0x0
c00098f2:	68 c1 03 00 c0       	push   0xc00003c1
c00098f7:	6a 03                	push   0x3
c00098f9:	53                   	push   ebx
c00098fa:	e8 65 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098ff:	83 c4 20             	add    esp,0x20
c0009902:	6a 00                	push   0x0
c0009904:	68 cb 03 00 c0       	push   0xc00003cb
c0009909:	6a 04                	push   0x4
c000990b:	53                   	push   ebx
c000990c:	e8 53 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009911:	6a 00                	push   0x0
c0009913:	68 d5 03 00 c0       	push   0xc00003d5
c0009918:	6a 05                	push   0x5
c000991a:	53                   	push   ebx
c000991b:	e8 44 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009920:	83 c4 20             	add    esp,0x20
c0009923:	6a 00                	push   0x0
c0009925:	68 df 03 00 c0       	push   0xc00003df
c000992a:	6a 06                	push   0x6
c000992c:	53                   	push   ebx
c000992d:	e8 32 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009932:	6a 00                	push   0x0
c0009934:	68 e9 03 00 c0       	push   0xc00003e9
c0009939:	6a 07                	push   0x7
c000993b:	53                   	push   ebx
c000993c:	e8 23 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009941:	83 c4 20             	add    esp,0x20
c0009944:	6a 00                	push   0x0
c0009946:	68 f3 03 00 c0       	push   0xc00003f3
c000994b:	6a 08                	push   0x8
c000994d:	53                   	push   ebx
c000994e:	e8 11 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009953:	6a 00                	push   0x0
c0009955:	68 fb 03 00 c0       	push   0xc00003fb
c000995a:	6a 09                	push   0x9
c000995c:	53                   	push   ebx
c000995d:	e8 02 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009962:	83 c4 20             	add    esp,0x20
c0009965:	6a 00                	push   0x0
c0009967:	68 05 04 00 c0       	push   0xc0000405
c000996c:	6a 0a                	push   0xa
c000996e:	53                   	push   ebx
c000996f:	e8 f0 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009974:	6a 00                	push   0x0
c0009976:	68 0d 04 00 c0       	push   0xc000040d
c000997b:	6a 0b                	push   0xb
c000997d:	53                   	push   ebx
c000997e:	e8 e1 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009983:	83 c4 20             	add    esp,0x20
c0009986:	6a 00                	push   0x0
c0009988:	68 15 04 00 c0       	push   0xc0000415
c000998d:	6a 0c                	push   0xc
c000998f:	53                   	push   ebx
c0009990:	e8 cf fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009995:	6a 00                	push   0x0
c0009997:	68 1d 04 00 c0       	push   0xc000041d
c000999c:	6a 0d                	push   0xd
c000999e:	53                   	push   ebx
c000999f:	e8 c0 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099a4:	83 c4 20             	add    esp,0x20
c00099a7:	6a 00                	push   0x0
c00099a9:	68 25 04 00 c0       	push   0xc0000425
c00099ae:	6a 0e                	push   0xe
c00099b0:	53                   	push   ebx
c00099b1:	e8 ae fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099b6:	6a 00                	push   0x0
c00099b8:	68 2d 04 00 c0       	push   0xc000042d
c00099bd:	6a 0f                	push   0xf
c00099bf:	53                   	push   ebx
c00099c0:	e8 9f fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099c5:	83 c4 20             	add    esp,0x20
c00099c8:	6a 00                	push   0x0
c00099ca:	68 37 04 00 c0       	push   0xc0000437
c00099cf:	6a 10                	push   0x10
c00099d1:	53                   	push   ebx
c00099d2:	e8 8d fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099d7:	6a 00                	push   0x0
c00099d9:	68 41 04 00 c0       	push   0xc0000441
c00099de:	6a 11                	push   0x11
c00099e0:	53                   	push   ebx
c00099e1:	e8 7e fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099e6:	83 c4 20             	add    esp,0x20
c00099e9:	6a 00                	push   0x0
c00099eb:	68 4b 04 00 c0       	push   0xc000044b
c00099f0:	6a 12                	push   0x12
c00099f2:	53                   	push   ebx
c00099f3:	e8 6c fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099f8:	6a 01                	push   0x1
c00099fa:	68 e5 04 00 c0       	push   0xc00004e5
c00099ff:	6a 60                	push   0x60
c0009a01:	53                   	push   ebx
c0009a02:	e8 5d fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a07:	83 c4 20             	add    esp,0x20
c0009a0a:	6a 00                	push   0x0
c0009a0c:	68 ec 04 00 c0       	push   0xc00004ec
c0009a11:	6a 20                	push   0x20
c0009a13:	53                   	push   ebx
c0009a14:	e8 4b fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a19:	6a 00                	push   0x0
c0009a1b:	68 d7 04 00 c0       	push   0xc00004d7
c0009a20:	6a 21                	push   0x21
c0009a22:	53                   	push   ebx
c0009a23:	e8 3c fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a28:	83 c4 20             	add    esp,0x20
c0009a2b:	6a 00                	push   0x0
c0009a2d:	68 de 04 00 c0       	push   0xc00004de
c0009a32:	6a 22                	push   0x22
c0009a34:	53                   	push   ebx
c0009a35:	e8 2a fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a3a:	6a 00                	push   0x0
c0009a3c:	68 55 04 00 c0       	push   0xc0000455
c0009a41:	6a 23                	push   0x23
c0009a43:	53                   	push   ebx
c0009a44:	e8 1b fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a49:	83 c4 20             	add    esp,0x20
c0009a4c:	6a 00                	push   0x0
c0009a4e:	68 5f 04 00 c0       	push   0xc000045f
c0009a53:	6a 24                	push   0x24
c0009a55:	53                   	push   ebx
c0009a56:	e8 09 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a5b:	6a 00                	push   0x0
c0009a5d:	68 69 04 00 c0       	push   0xc0000469
c0009a62:	6a 25                	push   0x25
c0009a64:	53                   	push   ebx
c0009a65:	e8 fa fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a6a:	83 c4 20             	add    esp,0x20
c0009a6d:	6a 00                	push   0x0
c0009a6f:	68 73 04 00 c0       	push   0xc0000473
c0009a74:	6a 26                	push   0x26
c0009a76:	53                   	push   ebx
c0009a77:	e8 e8 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a7c:	6a 00                	push   0x0
c0009a7e:	68 7d 04 00 c0       	push   0xc000047d
c0009a83:	6a 27                	push   0x27
c0009a85:	53                   	push   ebx
c0009a86:	e8 d9 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a8b:	83 c4 20             	add    esp,0x20
c0009a8e:	6a 00                	push   0x0
c0009a90:	68 87 04 00 c0       	push   0xc0000487
c0009a95:	6a 28                	push   0x28
c0009a97:	53                   	push   ebx
c0009a98:	e8 c7 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a9d:	6a 00                	push   0x0
c0009a9f:	68 91 04 00 c0       	push   0xc0000491
c0009aa4:	6a 29                	push   0x29
c0009aa6:	53                   	push   ebx
c0009aa7:	e8 b8 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009aac:	83 c4 20             	add    esp,0x20
c0009aaf:	6a 00                	push   0x0
c0009ab1:	68 9b 04 00 c0       	push   0xc000049b
c0009ab6:	6a 2a                	push   0x2a
c0009ab8:	53                   	push   ebx
c0009ab9:	e8 a6 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009abe:	6a 00                	push   0x0
c0009ac0:	68 a5 04 00 c0       	push   0xc00004a5
c0009ac5:	6a 2b                	push   0x2b
c0009ac7:	53                   	push   ebx
c0009ac8:	e8 97 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009acd:	83 c4 20             	add    esp,0x20
c0009ad0:	6a 00                	push   0x0
c0009ad2:	68 af 04 00 c0       	push   0xc00004af
c0009ad7:	6a 2c                	push   0x2c
c0009ad9:	53                   	push   ebx
c0009ada:	e8 85 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009adf:	6a 00                	push   0x0
c0009ae1:	68 b9 04 00 c0       	push   0xc00004b9
c0009ae6:	6a 2d                	push   0x2d
c0009ae8:	53                   	push   ebx
c0009ae9:	e8 76 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009aee:	83 c4 20             	add    esp,0x20
c0009af1:	6a 00                	push   0x0
c0009af3:	68 c3 04 00 c0       	push   0xc00004c3
c0009af8:	6a 2e                	push   0x2e
c0009afa:	53                   	push   ebx
c0009afb:	e8 64 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b00:	6a 00                	push   0x0
c0009b02:	68 cd 04 00 c0       	push   0xc00004cd
c0009b07:	6a 2f                	push   0x2f
c0009b09:	53                   	push   ebx
c0009b0a:	e8 55 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b0f:	83 c4 20             	add    esp,0x20
c0009b12:	6a 00                	push   0x0
c0009b14:	68 23 05 00 c0       	push   0xc0000523
c0009b19:	6a 30                	push   0x30
c0009b1b:	53                   	push   ebx
c0009b1c:	e8 43 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b21:	6a 00                	push   0x0
c0009b23:	68 2d 05 00 c0       	push   0xc000052d
c0009b28:	6a 31                	push   0x31
c0009b2a:	53                   	push   ebx
c0009b2b:	e8 34 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b30:	83 c4 20             	add    esp,0x20
c0009b33:	6a 00                	push   0x0
c0009b35:	68 37 05 00 c0       	push   0xc0000537
c0009b3a:	6a 32                	push   0x32
c0009b3c:	53                   	push   ebx
c0009b3d:	e8 22 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b42:	6a 00                	push   0x0
c0009b44:	68 41 05 00 c0       	push   0xc0000541
c0009b49:	6a 33                	push   0x33
c0009b4b:	53                   	push   ebx
c0009b4c:	e8 13 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b51:	83 c4 20             	add    esp,0x20
c0009b54:	6a 00                	push   0x0
c0009b56:	68 4b 05 00 c0       	push   0xc000054b
c0009b5b:	6a 34                	push   0x34
c0009b5d:	53                   	push   ebx
c0009b5e:	e8 01 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b63:	6a 00                	push   0x0
c0009b65:	68 55 05 00 c0       	push   0xc0000555
c0009b6a:	6a 35                	push   0x35
c0009b6c:	53                   	push   ebx
c0009b6d:	e8 f2 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b72:	83 c4 20             	add    esp,0x20
c0009b75:	6a 00                	push   0x0
c0009b77:	68 5f 05 00 c0       	push   0xc000055f
c0009b7c:	6a 36                	push   0x36
c0009b7e:	53                   	push   ebx
c0009b7f:	e8 e0 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b84:	6a 00                	push   0x0
c0009b86:	68 69 05 00 c0       	push   0xc0000569
c0009b8b:	6a 37                	push   0x37
c0009b8d:	53                   	push   ebx
c0009b8e:	e8 d1 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b93:	83 c4 1c             	add    esp,0x1c
c0009b96:	6a 03                	push   0x3
c0009b98:	6a 02                	push   0x2
c0009b9a:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c0009ba0:	e8 1d 29 00 00       	call   c000c4c2 <VAS::allocatePages(int, int)>
c0009ba5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bac:	89 c6                	mov    esi,eax
c0009bae:	e8 a0 01 00 00       	call   c0009d53 <malloc>
c0009bb3:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bbc:	89 c7                	mov    edi,eax
c0009bbe:	e8 99 1a 00 00       	call   c000b65c <TSS::TSS()>
c0009bc3:	83 c4 0c             	add    esp,0xc
c0009bc6:	68 f3 03 00 c0       	push   0xc00003f3
c0009bcb:	56                   	push   esi
c0009bcc:	57                   	push   edi
c0009bcd:	e8 ce 1a 00 00       	call   c000b6a0 <TSS::setup(unsigned long, unsigned long)>
c0009bd2:	89 c6                	mov    esi,eax
c0009bd4:	58                   	pop    eax
c0009bd5:	5a                   	pop    edx
c0009bd6:	6a 00                	push   0x0
c0009bd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009bdc:	50                   	push   eax
c0009bdd:	e8 d6 fb ff ff       	call   c00097b8 <IDTEntry::IDTEntry(bool)>
c0009be2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009beb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bf2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009bf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfc:	80 ce 05             	or     dh,0x5
c0009bff:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c0a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c10:	e8 87 fc ff ff       	call   c000989c <IDT::flush()>
c0009c15:	83 c4 20             	add    esp,0x20
c0009c18:	5b                   	pop    ebx
c0009c19:	5e                   	pop    esi
c0009c1a:	5f                   	pop    edi
c0009c1b:	c3                   	ret    

c0009c1c <sbrk>:
c0009c1c:	55                   	push   ebp
c0009c1d:	57                   	push   edi
c0009c1e:	56                   	push   esi
c0009c1f:	53                   	push   ebx
c0009c20:	83 ec 24             	sub    esp,0x24
c0009c23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c27:	53                   	push   ebx
c0009c28:	68 04 4a 02 c0       	push   0xc0024a04
c0009c2d:	e8 0d 34 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009c32:	83 c4 10             	add    esp,0x10
c0009c35:	85 db                	test   ebx,ebx
c0009c37:	74 5f                	je     c0009c98 <sbrk+0x7c>
c0009c39:	78 64                	js     c0009c9f <sbrk+0x83>
c0009c3b:	a1 10 7f 02 c0       	mov    eax,ds:0xc0027f10
c0009c40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c44:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c4a:	89 dd                	mov    ebp,ebx
c0009c4c:	78 69                	js     c0009cb7 <sbrk+0x9b>
c0009c4e:	c1 fd 0c             	sar    ebp,0xc
c0009c51:	bb 00 00 00 00       	mov    ebx,0x0
c0009c56:	8b 35 d0 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028dd0
c0009c5c:	8b 3d 10 7f 02 c0    	mov    edi,DWORD PTR ds:0xc0027f10
c0009c62:	e8 a3 07 00 00       	call   c000a40a <Phys::allocatePage()>
c0009c67:	68 01 04 00 00       	push   0x401
c0009c6c:	57                   	push   edi
c0009c6d:	50                   	push   eax
c0009c6e:	56                   	push   esi
c0009c6f:	e8 4c 27 00 00       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c74:	81 05 10 7f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027f10,0x1000
c0009c7e:	43                   	inc    ebx
c0009c7f:	83 c4 10             	add    esp,0x10
c0009c82:	39 dd                	cmp    ebp,ebx
c0009c84:	75 d0                	jne    c0009c56 <sbrk+0x3a>
c0009c86:	0f 20 d8             	mov    eax,cr3
c0009c89:	0f 22 d8             	mov    cr3,eax
c0009c8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c90:	83 c4 1c             	add    esp,0x1c
c0009c93:	5b                   	pop    ebx
c0009c94:	5e                   	pop    esi
c0009c95:	5f                   	pop    edi
c0009c96:	5d                   	pop    ebp
c0009c97:	c3                   	ret    
c0009c98:	a1 10 7f 02 c0       	mov    eax,ds:0xc0027f10
c0009c9d:	eb f1                	jmp    c0009c90 <sbrk+0x74>
c0009c9f:	83 ec 08             	sub    esp,0x8
c0009ca2:	53                   	push   ebx
c0009ca3:	68 30 4a 02 c0       	push   0xc0024a30
c0009ca8:	e8 92 33 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009cad:	83 c4 10             	add    esp,0x10
c0009cb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cb5:	eb d9                	jmp    c0009c90 <sbrk+0x74>
c0009cb7:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cbd:	eb 8f                	jmp    c0009c4e <sbrk+0x32>

c0009cbf <mmap>:
c0009cbf:	83 ec 18             	sub    esp,0x18
c0009cc2:	68 22 4a 02 c0       	push   0xc0024a22
c0009cc7:	e8 35 b3 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0009ccc:	b8 00 00 00 00       	mov    eax,0x0
c0009cd1:	83 c4 1c             	add    esp,0x1c
c0009cd4:	c3                   	ret    

c0009cd5 <munmap>:
c0009cd5:	83 ec 18             	sub    esp,0x18
c0009cd8:	68 27 4a 02 c0       	push   0xc0024a27
c0009cdd:	e8 1f b3 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0009ce2:	b8 00 00 00 00       	mov    eax,0x0
c0009ce7:	83 c4 1c             	add    esp,0x1c
c0009cea:	c3                   	ret    

c0009ceb <liballoc_lock()>:
c0009ceb:	fa                   	cli    
c0009cec:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0009cf2:	b8 00 00 00 00       	mov    eax,0x0
c0009cf7:	c3                   	ret    

c0009cf8 <liballoc_unlock()>:
c0009cf8:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0009cfd:	48                   	dec    eax
c0009cfe:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0009d03:	75 01                	jne    c0009d06 <liballoc_unlock()+0xe>
c0009d05:	fb                   	sti    
c0009d06:	b8 00 00 00 00       	mov    eax,0x0
c0009d0b:	c3                   	ret    

c0009d0c <liballoc_alloc(int)>:
c0009d0c:	83 ec 10             	sub    esp,0x10
c0009d0f:	6a 01                	push   0x1
c0009d11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d15:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c0009d1b:	e8 a2 27 00 00       	call   c000c4c2 <VAS::allocatePages(int, int)>
c0009d20:	83 c4 1c             	add    esp,0x1c
c0009d23:	c3                   	ret    

c0009d24 <liballoc_free(void*, int)>:
c0009d24:	83 ec 14             	sub    esp,0x14
c0009d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d2b:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c0009d31:	e8 36 24 00 00       	call   c000c16c <VAS::freeAllocatedPages(unsigned long)>
c0009d36:	b8 00 00 00 00       	mov    eax,0x0
c0009d3b:	83 c4 1c             	add    esp,0x1c
c0009d3e:	c3                   	ret    

c0009d3f <realloc>:
c0009d3f:	83 ec 14             	sub    esp,0x14
c0009d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4a:	e8 09 78 ff ff       	call   c0001558 <dlrealloc>
c0009d4f:	83 c4 1c             	add    esp,0x1c
c0009d52:	c3                   	ret    

c0009d53 <malloc>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5a:	e8 bc 72 ff ff       	call   c000101b <dlmalloc>
c0009d5f:	83 c4 1c             	add    esp,0x1c
c0009d62:	c3                   	ret    

c0009d63 <free>:
c0009d63:	83 ec 18             	sub    esp,0x18
c0009d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6a:	e8 51 6f ff ff       	call   c0000cc0 <dlfree>
c0009d6f:	83 c4 1c             	add    esp,0x1c
c0009d72:	c3                   	ret    

c0009d73 <rfree>:
c0009d73:	83 ec 18             	sub    esp,0x18
c0009d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d7a:	e8 41 6f ff ff       	call   c0000cc0 <dlfree>
c0009d7f:	83 c4 1c             	add    esp,0x1c
c0009d82:	c3                   	ret    

c0009d83 <calloc>:
c0009d83:	56                   	push   esi
c0009d84:	53                   	push   ebx
c0009d85:	83 ec 10             	sub    esp,0x10
c0009d88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d8c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d91:	53                   	push   ebx
c0009d92:	e8 bc ff ff ff       	call   c0009d53 <malloc>
c0009d97:	89 c6                	mov    esi,eax
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	53                   	push   ebx
c0009d9d:	6a 00                	push   0x0
c0009d9f:	50                   	push   eax
c0009da0:	e8 d7 68 ff ff       	call   c000067c <memset>
c0009da5:	89 f0                	mov    eax,esi
c0009da7:	83 c4 14             	add    esp,0x14
c0009daa:	5b                   	pop    ebx
c0009dab:	5e                   	pop    esi
c0009dac:	c3                   	ret    

c0009dad <Krnl::setBootMessage(char const*)>:
c0009dad:	57                   	push   edi
c0009dae:	56                   	push   esi
c0009daf:	53                   	push   ebx
c0009db0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009db6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009dbd:	68 9e 00 00 00       	push   0x9e
c0009dc2:	6a 00                	push   0x0
c0009dc4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009dc8:	56                   	push   esi
c0009dc9:	e8 ae 68 ff ff       	call   c000067c <memset>
c0009dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dd1:	e8 c2 68 ff ff       	call   c0000698 <strlen>
c0009dd6:	ba 50 00 00 00       	mov    edx,0x50
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	29 c2                	sub    edx,eax
c0009de0:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009de4:	d1 ea                	shr    edx,1
c0009de6:	84 c0                	test   al,al
c0009de8:	74 19                	je     c0009e03 <Krnl::setBootMessage(char const*)+0x56>
c0009dea:	01 d2                	add    edx,edx
c0009dec:	43                   	inc    ebx
c0009ded:	01 f2                	add    edx,esi
c0009def:	80 cc 0f             	or     ah,0xf
c0009df2:	83 c2 02             	add    edx,0x2
c0009df5:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009df9:	43                   	inc    ebx
c0009dfa:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009dff:	84 c0                	test   al,al
c0009e01:	75 ec                	jne    c0009def <Krnl::setBootMessage(char const*)+0x42>
c0009e03:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e08:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e0f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e15:	5b                   	pop    ebx
c0009e16:	5e                   	pop    esi
c0009e17:	5f                   	pop    edi
c0009e18:	c3                   	ret    

c0009e19 <kernel_main>:
c0009e19:	57                   	push   edi
c0009e1a:	56                   	push   esi
c0009e1b:	53                   	push   ebx
c0009e1c:	83 ec 20             	sub    esp,0x20
c0009e1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e24:	a3 c0 8c 02 c0       	mov    ds:0xc0028cc0,eax
c0009e29:	f6 c4 08             	test   ah,0x8
c0009e2c:	0f 85 7a 03 00 00    	jne    c000a1ac <kernel_main+0x393>
c0009e32:	31 f6                	xor    esi,esi
c0009e34:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	89 fa                	mov    edx,edi
c0009e3d:	ee                   	out    dx,al
c0009e3e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e43:	b0 80                	mov    al,0x80
c0009e45:	89 da                	mov    edx,ebx
c0009e47:	ee                   	out    dx,al
c0009e48:	b1 03                	mov    cl,0x3
c0009e4a:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e4f:	88 c8                	mov    al,cl
c0009e51:	ee                   	out    dx,al
c0009e52:	89 f0                	mov    eax,esi
c0009e54:	89 fa                	mov    edx,edi
c0009e56:	ee                   	out    dx,al
c0009e57:	88 c8                	mov    al,cl
c0009e59:	89 da                	mov    edx,ebx
c0009e5b:	ee                   	out    dx,al
c0009e5c:	b0 c7                	mov    al,0xc7
c0009e5e:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e63:	ee                   	out    dx,al
c0009e64:	b0 0b                	mov    al,0xb
c0009e66:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e6b:	ee                   	out    dx,al
c0009e6c:	83 ec 0c             	sub    esp,0xc
c0009e6f:	68 60 4a 02 c0       	push   0xc0024a60
c0009e74:	e8 c6 31 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009e83:	0f 85 eb 02 00 00    	jne    c000a174 <kernel_main+0x35b>
c0009e89:	e8 d2 0c 00 00       	call   c000ab60 <installVgaTextImplementation()>
c0009e8e:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009e95:	0f 85 94 02 00 00    	jne    c000a12f <kernel_main+0x316>
c0009e9b:	0f b6 05 20 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f20
c0009ea2:	84 c0                	test   al,al
c0009ea4:	74 7b                	je     c0009f21 <kernel_main+0x108>
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	bf 0a 00 00 00       	mov    edi,0xa
c0009ead:	be 05 00 00 00       	mov    esi,0x5
c0009eb2:	31 c9                	xor    ecx,ecx
c0009eb4:	eb 2a                	jmp    c0009ee0 <kernel_main+0xc7>
c0009eb6:	3c 0d                	cmp    al,0xd
c0009eb8:	74 1a                	je     c0009ed4 <kernel_main+0xbb>
c0009eba:	3c 0a                	cmp    al,0xa
c0009ebc:	74 40                	je     c0009efe <kernel_main+0xe5>
c0009ebe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ec1:	80 cc 0e             	or     ah,0xe
c0009ec4:	c1 e2 04             	shl    edx,0x4
c0009ec7:	01 ca                	add    edx,ecx
c0009ec9:	41                   	inc    ecx
c0009eca:	01 fa                	add    edx,edi
c0009ecc:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009ed4:	43                   	inc    ebx
c0009ed5:	0f b6 83 20 7f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd80e0]
c0009edc:	84 c0                	test   al,al
c0009ede:	74 32                	je     c0009f12 <kernel_main+0xf9>
c0009ee0:	80 b9 56 7f 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd80aa],0xdb
c0009ee7:	75 cd                	jne    c0009eb6 <kernel_main+0x9d>
c0009ee9:	0f b6 91 55 7f 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd80ab]
c0009ef0:	83 e2 fe             	and    edx,0xfffffffe
c0009ef3:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009ef9:	75 bb                	jne    c0009eb6 <kernel_main+0x9d>
c0009efb:	47                   	inc    edi
c0009efc:	eb b8                	jmp    c0009eb6 <kernel_main+0x9d>
c0009efe:	43                   	inc    ebx
c0009eff:	46                   	inc    esi
c0009f00:	31 c9                	xor    ecx,ecx
c0009f02:	0f b6 83 20 7f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd80e0]
c0009f09:	bf 0a 00 00 00       	mov    edi,0xa
c0009f0e:	84 c0                	test   al,al
c0009f10:	75 ce                	jne    c0009ee0 <kernel_main+0xc7>
c0009f12:	8b 15 c0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc0
c0009f18:	80 e6 08             	and    dh,0x8
c0009f1b:	0f 85 bf 00 00 00    	jne    c0009fe0 <kernel_main+0x1c7>
c0009f21:	83 ec 0c             	sub    esp,0xc
c0009f24:	68 fc 4a 02 c0       	push   0xc0024afc
c0009f29:	e8 7f fe ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009f2e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f33:	05 ff 0f 00 00       	add    eax,0xfff
c0009f38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f40:	e8 44 06 00 00       	call   c000a589 <Phys::physicalMemorySetup(unsigned int)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009f4f:	0f 85 a2 01 00 00    	jne    c000a0f7 <kernel_main+0x2de>
c0009f55:	e8 7e 1f 00 00       	call   c000bed8 <Virt::virtualMemorySetup()>
c0009f5a:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009f61:	0f 85 58 01 00 00    	jne    c000a0bf <kernel_main+0x2a6>
c0009f67:	83 ec 0c             	sub    esp,0xc
c0009f6a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f6e:	56                   	push   esi
c0009f6f:	e8 20 20 00 00       	call   c000bf94 <VAS::VAS()>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	89 35 d0 8d 02 c0    	mov    DWORD PTR ds:0xc0028dd0,esi
c0009f7d:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009f84:	0f 85 fd 00 00 00    	jne    c000a087 <kernel_main+0x26e>
c0009f8a:	e8 91 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f8f:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009f96:	0f 85 b3 00 00 00    	jne    c000a04f <kernel_main+0x236>
c0009f9c:	83 ec 0c             	sub    esp,0xc
c0009f9f:	68 ec 01 00 00       	push   0x1ec
c0009fa4:	e8 aa fd ff ff       	call   c0009d53 <malloc>
c0009fa9:	89 c3                	mov    ebx,eax
c0009fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fae:	e8 05 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009fb3:	83 c4 10             	add    esp,0x10
c0009fb6:	89 1d a8 8c 02 c0    	mov    DWORD PTR ds:0xc0028ca8,ebx
c0009fbc:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0009fc3:	75 53                	jne    c000a018 <kernel_main+0x1ff>
c0009fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fc7:	6a 00                	push   0x0
c0009fc9:	6a 00                	push   0x0
c0009fcb:	6a 00                	push   0x0
c0009fcd:	53                   	push   ebx
c0009fce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fd4:	e8 6b 22 00 00       	call   c000c244 <VAS::~VAS()>
c0009fd9:	83 c4 30             	add    esp,0x30
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	c3                   	ret    
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	68 ab 4a 02 c0       	push   0xc0024aab
c0009fe8:	e8 c0 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009fed:	83 c4 10             	add    esp,0x10
c0009ff0:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0009ff7:	0f 85 24 ff ff ff    	jne    c0009f21 <kernel_main+0x108>
c0009ffd:	eb 04                	jmp    c000a003 <kernel_main+0x1ea>
c0009fff:	3c 1c                	cmp    al,0x1c
c000a001:	74 06                	je     c000a009 <kernel_main+0x1f0>
c000a003:	e4 60                	in     al,0x60
c000a005:	3c 5a                	cmp    al,0x5a
c000a007:	75 f6                	jne    c0009fff <kernel_main+0x1e6>
c000a009:	e4 60                	in     al,0x60
c000a00b:	3c 5a                	cmp    al,0x5a
c000a00d:	74 fa                	je     c000a009 <kernel_main+0x1f0>
c000a00f:	3c 1c                	cmp    al,0x1c
c000a011:	74 f6                	je     c000a009 <kernel_main+0x1f0>
c000a013:	e9 09 ff ff ff       	jmp    c0009f21 <kernel_main+0x108>
c000a018:	83 ec 0c             	sub    esp,0xc
c000a01b:	68 ea 4a 02 c0       	push   0xc0024aea
c000a020:	e8 88 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a025:	83 c4 10             	add    esp,0x10
c000a028:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a02f:	74 0c                	je     c000a03d <kernel_main+0x224>
c000a031:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000a037:	eb 8c                	jmp    c0009fc5 <kernel_main+0x1ac>
c000a039:	3c 1c                	cmp    al,0x1c
c000a03b:	74 06                	je     c000a043 <kernel_main+0x22a>
c000a03d:	e4 60                	in     al,0x60
c000a03f:	3c 5a                	cmp    al,0x5a
c000a041:	75 f6                	jne    c000a039 <kernel_main+0x220>
c000a043:	e4 60                	in     al,0x60
c000a045:	3c 5a                	cmp    al,0x5a
c000a047:	74 fa                	je     c000a043 <kernel_main+0x22a>
c000a049:	3c 1c                	cmp    al,0x1c
c000a04b:	74 f6                	je     c000a043 <kernel_main+0x22a>
c000a04d:	eb e2                	jmp    c000a031 <kernel_main+0x218>
c000a04f:	83 ec 0c             	sub    esp,0xc
c000a052:	68 d7 4a 02 c0       	push   0xc0024ad7
c000a057:	e8 51 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a066:	0f 85 30 ff ff ff    	jne    c0009f9c <kernel_main+0x183>
c000a06c:	eb 04                	jmp    c000a072 <kernel_main+0x259>
c000a06e:	3c 1c                	cmp    al,0x1c
c000a070:	74 06                	je     c000a078 <kernel_main+0x25f>
c000a072:	e4 60                	in     al,0x60
c000a074:	3c 5a                	cmp    al,0x5a
c000a076:	75 f6                	jne    c000a06e <kernel_main+0x255>
c000a078:	e4 60                	in     al,0x60
c000a07a:	3c 5a                	cmp    al,0x5a
c000a07c:	74 fa                	je     c000a078 <kernel_main+0x25f>
c000a07e:	3c 1c                	cmp    al,0x1c
c000a080:	74 f6                	je     c000a078 <kernel_main+0x25f>
c000a082:	e9 15 ff ff ff       	jmp    c0009f9c <kernel_main+0x183>
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	68 cd 4a 02 c0       	push   0xc0024acd
c000a08f:	e8 19 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a09e:	0f 85 e6 fe ff ff    	jne    c0009f8a <kernel_main+0x171>
c000a0a4:	eb 04                	jmp    c000a0aa <kernel_main+0x291>
c000a0a6:	3c 1c                	cmp    al,0x1c
c000a0a8:	74 06                	je     c000a0b0 <kernel_main+0x297>
c000a0aa:	e4 60                	in     al,0x60
c000a0ac:	3c 5a                	cmp    al,0x5a
c000a0ae:	75 f6                	jne    c000a0a6 <kernel_main+0x28d>
c000a0b0:	e4 60                	in     al,0x60
c000a0b2:	3c 5a                	cmp    al,0x5a
c000a0b4:	74 fa                	je     c000a0b0 <kernel_main+0x297>
c000a0b6:	3c 1c                	cmp    al,0x1c
c000a0b8:	74 f6                	je     c000a0b0 <kernel_main+0x297>
c000a0ba:	e9 cb fe ff ff       	jmp    c0009f8a <kernel_main+0x171>
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	68 c2 4a 02 c0       	push   0xc0024ac2
c000a0c7:	e8 e1 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a0cc:	83 c4 10             	add    esp,0x10
c000a0cf:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a0d6:	0f 85 8b fe ff ff    	jne    c0009f67 <kernel_main+0x14e>
c000a0dc:	eb 04                	jmp    c000a0e2 <kernel_main+0x2c9>
c000a0de:	3c 1c                	cmp    al,0x1c
c000a0e0:	74 06                	je     c000a0e8 <kernel_main+0x2cf>
c000a0e2:	e4 60                	in     al,0x60
c000a0e4:	3c 5a                	cmp    al,0x5a
c000a0e6:	75 f6                	jne    c000a0de <kernel_main+0x2c5>
c000a0e8:	e4 60                	in     al,0x60
c000a0ea:	3c 5a                	cmp    al,0x5a
c000a0ec:	74 fa                	je     c000a0e8 <kernel_main+0x2cf>
c000a0ee:	3c 1c                	cmp    al,0x1c
c000a0f0:	74 f6                	je     c000a0e8 <kernel_main+0x2cf>
c000a0f2:	e9 70 fe ff ff       	jmp    c0009f67 <kernel_main+0x14e>
c000a0f7:	83 ec 0c             	sub    esp,0xc
c000a0fa:	68 b7 4a 02 c0       	push   0xc0024ab7
c000a0ff:	e8 a9 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a10e:	0f 85 41 fe ff ff    	jne    c0009f55 <kernel_main+0x13c>
c000a114:	eb 04                	jmp    c000a11a <kernel_main+0x301>
c000a116:	3c 1c                	cmp    al,0x1c
c000a118:	74 06                	je     c000a120 <kernel_main+0x307>
c000a11a:	e4 60                	in     al,0x60
c000a11c:	3c 5a                	cmp    al,0x5a
c000a11e:	75 f6                	jne    c000a116 <kernel_main+0x2fd>
c000a120:	e4 60                	in     al,0x60
c000a122:	3c 5a                	cmp    al,0x5a
c000a124:	74 fa                	je     c000a120 <kernel_main+0x307>
c000a126:	3c 1c                	cmp    al,0x1c
c000a128:	74 f6                	je     c000a120 <kernel_main+0x307>
c000a12a:	e9 26 fe ff ff       	jmp    c0009f55 <kernel_main+0x13c>
c000a12f:	83 ec 0c             	sub    esp,0xc
c000a132:	68 99 4a 02 c0       	push   0xc0024a99
c000a137:	e8 71 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a13c:	8b 15 c0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc0
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	f6 c2 80             	test   dl,0x80
c000a148:	74 18                	je     c000a162 <kernel_main+0x349>
c000a14a:	0f b6 05 20 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f20
c000a151:	84 c0                	test   al,al
c000a153:	0f 85 4d fd ff ff    	jne    c0009ea6 <kernel_main+0x8d>
c000a159:	e9 ba fd ff ff       	jmp    c0009f18 <kernel_main+0xff>
c000a15e:	3c 1c                	cmp    al,0x1c
c000a160:	74 06                	je     c000a168 <kernel_main+0x34f>
c000a162:	e4 60                	in     al,0x60
c000a164:	3c 5a                	cmp    al,0x5a
c000a166:	75 f6                	jne    c000a15e <kernel_main+0x345>
c000a168:	e4 60                	in     al,0x60
c000a16a:	3c 5a                	cmp    al,0x5a
c000a16c:	74 fa                	je     c000a168 <kernel_main+0x34f>
c000a16e:	3c 1c                	cmp    al,0x1c
c000a170:	74 f6                	je     c000a168 <kernel_main+0x34f>
c000a172:	eb d6                	jmp    c000a14a <kernel_main+0x331>
c000a174:	83 ec 0c             	sub    esp,0xc
c000a177:	68 8a 4a 02 c0       	push   0xc0024a8a
c000a17c:	e8 2c fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a181:	83 c4 10             	add    esp,0x10
c000a184:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a18b:	0f 85 f8 fc ff ff    	jne    c0009e89 <kernel_main+0x70>
c000a191:	eb 04                	jmp    c000a197 <kernel_main+0x37e>
c000a193:	3c 1c                	cmp    al,0x1c
c000a195:	74 06                	je     c000a19d <kernel_main+0x384>
c000a197:	e4 60                	in     al,0x60
c000a199:	3c 5a                	cmp    al,0x5a
c000a19b:	75 f6                	jne    c000a193 <kernel_main+0x37a>
c000a19d:	e4 60                	in     al,0x60
c000a19f:	3c 5a                	cmp    al,0x5a
c000a1a1:	74 fa                	je     c000a19d <kernel_main+0x384>
c000a1a3:	3c 1c                	cmp    al,0x1c
c000a1a5:	74 f6                	je     c000a19d <kernel_main+0x384>
c000a1a7:	e9 dd fc ff ff       	jmp    c0009e89 <kernel_main+0x70>
c000a1ac:	83 ec 0c             	sub    esp,0xc
c000a1af:	68 77 4a 02 c0       	push   0xc0024a77
c000a1b4:	e8 f4 fb ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a1b9:	83 c4 10             	add    esp,0x10
c000a1bc:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c000a1c3:	0f 85 69 fc ff ff    	jne    c0009e32 <kernel_main+0x19>
c000a1c9:	eb 04                	jmp    c000a1cf <kernel_main+0x3b6>
c000a1cb:	3c 1c                	cmp    al,0x1c
c000a1cd:	74 06                	je     c000a1d5 <kernel_main+0x3bc>
c000a1cf:	e4 60                	in     al,0x60
c000a1d1:	3c 5a                	cmp    al,0x5a
c000a1d3:	75 f6                	jne    c000a1cb <kernel_main+0x3b2>
c000a1d5:	e4 60                	in     al,0x60
c000a1d7:	3c 5a                	cmp    al,0x5a
c000a1d9:	74 fa                	je     c000a1d5 <kernel_main+0x3bc>
c000a1db:	3c 1c                	cmp    al,0x1c
c000a1dd:	74 f6                	je     c000a1d5 <kernel_main+0x3bc>
c000a1df:	e9 4e fc ff ff       	jmp    c0009e32 <kernel_main+0x19>

c000a1e4 <Phys::allocateDMA(unsigned long)>:
c000a1e4:	55                   	push   ebp
c000a1e5:	31 ed                	xor    ebp,ebp
c000a1e7:	57                   	push   edi
c000a1e8:	56                   	push   esi
c000a1e9:	53                   	push   ebx
c000a1ea:	31 db                	xor    ebx,ebx
c000a1ec:	83 ec 28             	sub    esp,0x28
c000a1ef:	68 1b 4b 02 c0       	push   0xc0024b1b
c000a1f4:	e8 46 2e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a1f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a1fd:	83 c4 10             	add    esp,0x10
c000a200:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a206:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a20e:	c1 ef 0c             	shr    edi,0xc
c000a211:	31 c0                	xor    eax,eax
c000a213:	eb 19                	jmp    c000a22e <Phys::allocateDMA(unsigned long)+0x4a>
c000a215:	85 c0                	test   eax,eax
c000a217:	75 06                	jne    c000a21f <Phys::allocateDMA(unsigned long)+0x3b>
c000a219:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a21d:	89 dd                	mov    ebp,ebx
c000a21f:	8d 70 01             	lea    esi,[eax+0x1]
c000a222:	39 f7                	cmp    edi,esi
c000a224:	74 3f                	je     c000a265 <Phys::allocateDMA(unsigned long)+0x81>
c000a226:	89 f0                	mov    eax,esi
c000a228:	43                   	inc    ebx
c000a229:	83 fb 0f             	cmp    ebx,0xf
c000a22c:	7f 11                	jg     c000a23f <Phys::allocateDMA(unsigned long)+0x5b>
c000a22e:	80 bb dc 8c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7324],0x0
c000a235:	74 de                	je     c000a215 <Phys::allocateDMA(unsigned long)+0x31>
c000a237:	31 c0                	xor    eax,eax
c000a239:	43                   	inc    ebx
c000a23a:	83 fb 0f             	cmp    ebx,0xf
c000a23d:	7e ef                	jle    c000a22e <Phys::allocateDMA(unsigned long)+0x4a>
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	68 35 6d 02 c0       	push   0xc0026d35
c000a247:	e8 f3 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a24c:	c7 04 24 04 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c04
c000a253:	e8 a9 ad 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000a258:	83 c4 10             	add    esp,0x10
c000a25b:	31 c0                	xor    eax,eax
c000a25d:	83 c4 1c             	add    esp,0x1c
c000a260:	5b                   	pop    ebx
c000a261:	5e                   	pop    esi
c000a262:	5f                   	pop    edi
c000a263:	5d                   	pop    ebp
c000a264:	c3                   	ret    
c000a265:	89 e9                	mov    ecx,ebp
c000a267:	c1 f9 04             	sar    ecx,0x4
c000a26a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a26e:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a272:	89 ca                	mov    edx,ecx
c000a274:	4a                   	dec    edx
c000a275:	79 03                	jns    c000a27a <Phys::allocateDMA(unsigned long)+0x96>
c000a277:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a27a:	c1 fa 04             	sar    edx,0x4
c000a27d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a281:	74 08                	je     c000a28b <Phys::allocateDMA(unsigned long)+0xa7>
c000a283:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a287:	31 c0                	xor    eax,eax
c000a289:	eb ae                	jmp    c000a239 <Phys::allocateDMA(unsigned long)+0x55>
c000a28b:	85 f6                	test   esi,esi
c000a28d:	74 15                	je     c000a2a4 <Phys::allocateDMA(unsigned long)+0xc0>
c000a28f:	8d 95 dc 8c 02 c0    	lea    edx,[ebp-0x3ffd7324]
c000a295:	8d 84 05 dd 8c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7323]
c000a29c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a29f:	42                   	inc    edx
c000a2a0:	39 d0                	cmp    eax,edx
c000a2a2:	75 f8                	jne    c000a29c <Phys::allocateDMA(unsigned long)+0xb8>
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	01 3d d4 8c 02 c0    	add    DWORD PTR ds:0xc0028cd4,edi
c000a2ad:	68 34 4b 02 c0       	push   0xc0024b34
c000a2b2:	e8 88 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2be:	85 c0                	test   eax,eax
c000a2c0:	74 23                	je     c000a2e5 <Phys::allocateDMA(unsigned long)+0x101>
c000a2c2:	83 ec 0c             	sub    esp,0xc
c000a2c5:	68 02 7b 02 c0       	push   0xc0027b02
c000a2ca:	e8 70 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a2cf:	c7 04 24 04 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c04
c000a2d6:	e8 26 ad 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000a2db:	83 c4 10             	add    esp,0x10
c000a2de:	89 f0                	mov    eax,esi
c000a2e0:	e9 43 ff ff ff       	jmp    c000a228 <Phys::allocateDMA(unsigned long)+0x44>
c000a2e5:	c1 e5 0c             	shl    ebp,0xc
c000a2e8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2ee:	e9 6a ff ff ff       	jmp    c000a25d <Phys::allocateDMA(unsigned long)+0x79>

c000a2f3 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2f3:	83 ec 18             	sub    esp,0x18
c000a2f6:	68 4b 4b 02 c0       	push   0xc0024b4b
c000a2fb:	e8 3f 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a300:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a304:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a30e:	c1 ea 0c             	shr    edx,0xc
c000a311:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a316:	29 15 d4 8c 02 c0    	sub    DWORD PTR ds:0xc0028cd4,edx
c000a31c:	c1 e8 0c             	shr    eax,0xc
c000a31f:	83 c4 10             	add    esp,0x10
c000a322:	85 d2                	test   edx,edx
c000a324:	74 0f                	je     c000a335 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a326:	05 dc 8c 02 c0       	add    eax,0xc0028cdc
c000a32b:	01 c2                	add    edx,eax
c000a32d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a330:	40                   	inc    eax
c000a331:	39 d0                	cmp    eax,edx
c000a333:	75 f8                	jne    c000a32d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a335:	83 c4 0c             	add    esp,0xc
c000a338:	c3                   	ret    

c000a339 <Phys::setPageState(unsigned long, bool)>:
c000a339:	56                   	push   esi
c000a33a:	ba 01 00 00 00       	mov    edx,0x1
c000a33f:	53                   	push   ebx
c000a340:	8b 35 64 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028064
c000a346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a34a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a34e:	89 c8                	mov    eax,ecx
c000a350:	83 e1 07             	and    ecx,0x7
c000a353:	c1 e8 03             	shr    eax,0x3
c000a356:	d3 e3                	shl    ebx,cl
c000a358:	01 c6                	add    esi,eax
c000a35a:	d3 e2                	shl    edx,cl
c000a35c:	f7 d2                	not    edx
c000a35e:	20 16                	and    BYTE PTR [esi],dl
c000a360:	03 05 64 80 02 c0    	add    eax,DWORD PTR ds:0xc0028064
c000a366:	08 18                	or     BYTE PTR [eax],bl
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	c3                   	ret    

c000a36b <Phys::getPageState(unsigned long)>:
c000a36b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a36f:	8b 15 64 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028064
c000a375:	89 c8                	mov    eax,ecx
c000a377:	83 e1 07             	and    ecx,0x7
c000a37a:	c1 e8 03             	shr    eax,0x3
c000a37d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a381:	d3 f8                	sar    eax,cl
c000a383:	83 e0 01             	and    eax,0x1
c000a386:	c3                   	ret    

c000a387 <Phys::freePage(unsigned long)>:
c000a387:	53                   	push   ebx
c000a388:	83 ec 10             	sub    esp,0x10
c000a38b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a38f:	53                   	push   ebx
c000a390:	68 61 4b 02 c0       	push   0xc0024b61
c000a395:	e8 a5 2c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a39a:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3a8:	76 3d                	jbe    c000a3e7 <Phys::freePage(unsigned long)+0x60>
c000a3aa:	83 ec 0c             	sub    esp,0xc
c000a3ad:	c1 eb 0c             	shr    ebx,0xc
c000a3b0:	53                   	push   ebx
c000a3b1:	e8 b5 ff ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a3b6:	83 c4 10             	add    esp,0x10
c000a3b9:	84 c0                	test   al,al
c000a3bb:	74 19                	je     c000a3d6 <Phys::freePage(unsigned long)+0x4f>
c000a3bd:	83 ec 08             	sub    esp,0x8
c000a3c0:	ff 0d d4 8c 02 c0    	dec    DWORD PTR ds:0xc0028cd4
c000a3c6:	6a 00                	push   0x0
c000a3c8:	53                   	push   ebx
c000a3c9:	e8 6b ff ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a3ce:	83 c4 10             	add    esp,0x10
c000a3d1:	83 c4 08             	add    esp,0x8
c000a3d4:	5b                   	pop    ebx
c000a3d5:	c3                   	ret    
c000a3d6:	c7 44 24 10 8b 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b8b
c000a3de:	83 c4 08             	add    esp,0x8
c000a3e1:	5b                   	pop    ebx
c000a3e2:	e9 1a ac 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c000a3e7:	83 ec 08             	sub    esp,0x8
c000a3ea:	53                   	push   ebx
c000a3eb:	68 74 4b 02 c0       	push   0xc0024b74
c000a3f0:	e8 4a 2c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a3f5:	58                   	pop    eax
c000a3f6:	5a                   	pop    edx
c000a3f7:	68 00 10 00 00       	push   0x1000
c000a3fc:	53                   	push   ebx
c000a3fd:	e8 f1 fe ff ff       	call   c000a2f3 <Phys::freeDMA(unsigned long, unsigned long)>
c000a402:	83 c4 10             	add    esp,0x10
c000a405:	83 c4 08             	add    esp,0x8
c000a408:	5b                   	pop    ebx
c000a409:	c3                   	ret    

c000a40a <Phys::allocatePage()>:
c000a40a:	56                   	push   esi
c000a40b:	53                   	push   ebx
c000a40c:	83 ec 14             	sub    esp,0x14
c000a40f:	8b 35 c8 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028cc8
c000a415:	89 f3                	mov    ebx,esi
c000a417:	eb 0a                	jmp    c000a423 <Phys::allocatePage()+0x19>
c000a419:	89 1d c8 8c 02 c0    	mov    DWORD PTR ds:0xc0028cc8,ebx
c000a41f:	39 de                	cmp    esi,ebx
c000a421:	74 24                	je     c000a447 <Phys::allocatePage()+0x3d>
c000a423:	53                   	push   ebx
c000a424:	e8 42 ff ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a429:	5a                   	pop    edx
c000a42a:	84 c0                	test   al,al
c000a42c:	74 69                	je     c000a497 <Phys::allocatePage()+0x8d>
c000a42e:	43                   	inc    ebx
c000a42f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a435:	75 e2                	jne    c000a419 <Phys::allocatePage()+0xf>
c000a437:	31 db                	xor    ebx,ebx
c000a439:	c7 05 c8 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028cc8,0x0
c000a443:	39 de                	cmp    esi,ebx
c000a445:	75 dc                	jne    c000a423 <Phys::allocatePage()+0x19>
c000a447:	83 ec 0c             	sub    esp,0xc
c000a44a:	80 35 ec 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028cec,0x1
c000a451:	68 2c 4c 02 c0       	push   0xc0024c2c
c000a456:	e8 e4 2b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a45b:	58                   	pop    eax
c000a45c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a461:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a464:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a46a:	e8 5f 28 00 00       	call   c000ccce <VAS::scanForEviction()>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	85 c0                	test   eax,eax
c000a474:	75 62                	jne    c000a4d8 <Phys::allocatePage()+0xce>
c000a476:	83 ec 0c             	sub    esp,0xc
c000a479:	68 50 4c 02 c0       	push   0xc0024c50
c000a47e:	e8 7e ab 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	8b 1d c8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cc8
c000a48c:	53                   	push   ebx
c000a48d:	e8 d9 fe ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 97                	jne    c000a42e <Phys::allocatePage()+0x24>
c000a497:	6a 01                	push   0x1
c000a499:	53                   	push   ebx
c000a49a:	e8 9a fe ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a49f:	5a                   	pop    edx
c000a4a0:	a1 d4 8c 02 c0       	mov    eax,ds:0xc0028cd4
c000a4a5:	59                   	pop    ecx
c000a4a6:	40                   	inc    eax
c000a4a7:	8b 15 c8 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc8
c000a4ad:	a3 d4 8c 02 c0       	mov    ds:0xc0028cd4,eax
c000a4b2:	c1 e2 0c             	shl    edx,0xc
c000a4b5:	52                   	push   edx
c000a4b6:	ff 35 d8 8c 02 c0    	push   DWORD PTR ds:0xc0028cd8
c000a4bc:	50                   	push   eax
c000a4bd:	68 a1 4b 02 c0       	push   0xc0024ba1
c000a4c2:	e8 78 2b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a4c7:	a1 c8 8c 02 c0       	mov    eax,ds:0xc0028cc8
c000a4cc:	83 c4 10             	add    esp,0x10
c000a4cf:	c1 e0 0c             	shl    eax,0xc
c000a4d2:	83 c4 14             	add    esp,0x14
c000a4d5:	5b                   	pop    ebx
c000a4d6:	5e                   	pop    esi
c000a4d7:	c3                   	ret    
c000a4d8:	83 ec 08             	sub    esp,0x8
c000a4db:	89 c2                	mov    edx,eax
c000a4dd:	6a 01                	push   0x1
c000a4df:	c1 ea 0c             	shr    edx,0xc
c000a4e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4e6:	52                   	push   edx
c000a4e7:	e8 4d fe ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a4ec:	83 c4 10             	add    esp,0x10
c000a4ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4f3:	eb dd                	jmp    c000a4d2 <Phys::allocatePage()+0xc8>

c000a4f5 <Phys::allocateContiguousPages(int)>:
c000a4f5:	57                   	push   edi
c000a4f6:	56                   	push   esi
c000a4f7:	53                   	push   ebx
c000a4f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a4fc:	fa                   	cli    
c000a4fd:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c000a503:	31 db                	xor    ebx,ebx
c000a505:	85 db                	test   ebx,ebx
c000a507:	75 11                	jne    c000a51a <Phys::allocateContiguousPages(int)+0x25>
c000a509:	e8 fc fe ff ff       	call   c000a40a <Phys::allocatePage()>
c000a50e:	83 fe 01             	cmp    esi,0x1
c000a511:	89 c7                	mov    edi,eax
c000a513:	74 21                	je     c000a536 <Phys::allocateContiguousPages(int)+0x41>
c000a515:	bb 01 00 00 00       	mov    ebx,0x1
c000a51a:	e8 eb fe ff ff       	call   c000a40a <Phys::allocatePage()>
c000a51f:	89 da                	mov    edx,ebx
c000a521:	c1 e2 0c             	shl    edx,0xc
c000a524:	01 fa                	add    edx,edi
c000a526:	39 c2                	cmp    edx,eax
c000a528:	74 20                	je     c000a54a <Phys::allocateContiguousPages(int)+0x55>
c000a52a:	bb 01 00 00 00       	mov    ebx,0x1
c000a52f:	89 c7                	mov    edi,eax
c000a531:	83 fe 01             	cmp    esi,0x1
c000a534:	75 e4                	jne    c000a51a <Phys::allocateContiguousPages(int)+0x25>
c000a536:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000a53b:	48                   	dec    eax
c000a53c:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000a541:	75 01                	jne    c000a544 <Phys::allocateContiguousPages(int)+0x4f>
c000a543:	fb                   	sti    
c000a544:	89 f8                	mov    eax,edi
c000a546:	5b                   	pop    ebx
c000a547:	5e                   	pop    esi
c000a548:	5f                   	pop    edi
c000a549:	c3                   	ret    
c000a54a:	43                   	inc    ebx
c000a54b:	39 f3                	cmp    ebx,esi
c000a54d:	75 b6                	jne    c000a505 <Phys::allocateContiguousPages(int)+0x10>
c000a54f:	eb e5                	jmp    c000a536 <Phys::allocateContiguousPages(int)+0x41>

c000a551 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a551:	56                   	push   esi
c000a552:	53                   	push   ebx
c000a553:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a557:	39 1d cc 8c 02 c0    	cmp    DWORD PTR ds:0xc0028ccc,ebx
c000a55d:	73 06                	jae    c000a565 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a55f:	89 1d cc 8c 02 c0    	mov    DWORD PTR ds:0xc0028ccc,ebx
c000a565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a569:	c1 eb 0c             	shr    ebx,0xc
c000a56c:	c1 e8 0c             	shr    eax,0xc
c000a56f:	39 d8                	cmp    eax,ebx
c000a571:	73 13                	jae    c000a586 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a573:	6a 00                	push   0x0
c000a575:	8d 70 01             	lea    esi,[eax+0x1]
c000a578:	50                   	push   eax
c000a579:	e8 bb fd ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a57e:	5a                   	pop    edx
c000a57f:	89 f0                	mov    eax,esi
c000a581:	59                   	pop    ecx
c000a582:	39 f3                	cmp    ebx,esi
c000a584:	75 ed                	jne    c000a573 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a586:	5b                   	pop    ebx
c000a587:	5e                   	pop    esi
c000a588:	c3                   	ret    

c000a589 <Phys::physicalMemorySetup(unsigned int)>:
c000a589:	55                   	push   ebp
c000a58a:	57                   	push   edi
c000a58b:	56                   	push   esi
c000a58c:	53                   	push   ebx
c000a58d:	31 db                	xor    ebx,ebx
c000a58f:	83 ec 40             	sub    esp,0x40
c000a592:	6a 10                	push   0x10
c000a594:	6a 00                	push   0x0
c000a596:	68 dc 8c 02 c0       	push   0xc0028cdc
c000a59b:	e8 dc 60 ff ff       	call   c000067c <memset>
c000a5a0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5a9:	05 00 10 00 00       	add    eax,0x1000
c000a5ae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5b2:	5a                   	pop    edx
c000a5b3:	59                   	pop    ecx
c000a5b4:	50                   	push   eax
c000a5b5:	68 bf 4b 02 c0       	push   0xc0024bbf
c000a5ba:	e8 80 2a 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a5bf:	83 c4 10             	add    esp,0x10
c000a5c2:	83 ec 08             	sub    esp,0x8
c000a5c5:	6a 01                	push   0x1
c000a5c7:	53                   	push   ebx
c000a5c8:	43                   	inc    ebx
c000a5c9:	e8 6b fd ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a5ce:	83 c4 10             	add    esp,0x10
c000a5d1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5d7:	75 e9                	jne    c000a5c2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5d9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5e0:	66 85 c0             	test   ax,ax
c000a5e3:	0f 84 8e 01 00 00    	je     c000a777 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5f9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a5fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a602:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a60a:	eb 15                	jmp    c000a621 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a60c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a610:	83 c3 18             	add    ebx,0x18
c000a613:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a617:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a61b:	0f 84 66 01 00 00    	je     c000a787 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a621:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a624:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a627:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a62a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a62e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a632:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a634:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a637:	01 f0                	add    eax,esi
c000a639:	55                   	push   ebp
c000a63a:	11 fa                	adc    edx,edi
c000a63c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a640:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a644:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a648:	56                   	push   esi
c000a649:	68 80 4c 02 c0       	push   0xc0024c80
c000a64e:	e8 ec 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a657:	83 c4 10             	add    esp,0x10
c000a65a:	09 f8                	or     eax,edi
c000a65c:	0f 85 25 01 00 00    	jne    c000a787 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a662:	4d                   	dec    ebp
c000a663:	75 a7                	jne    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a665:	ba 00 00 08 00       	mov    edx,0x80000
c000a66a:	89 c1                	mov    ecx,eax
c000a66c:	39 f2                	cmp    edx,esi
c000a66e:	19 f9                	sbb    ecx,edi
c000a670:	0f 82 a7 00 00 00    	jb     c000a71d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a676:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a67a:	89 c1                	mov    ecx,eax
c000a67c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a680:	0f 83 97 00 00 00    	jae    c000a71d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a686:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a68b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a68f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a693:	39 fa                	cmp    edx,edi
c000a695:	19 e8                	sbb    eax,ebp
c000a697:	0f 82 a5 01 00 00    	jb     c000a842 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a69d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6a1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6a5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6ab:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6b0:	83 d5 ff             	adc    ebp,0xffffffff
c000a6b3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6b7:	31 c0                	xor    eax,eax
c000a6b9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6bd:	39 fa                	cmp    edx,edi
c000a6bf:	89 c1                	mov    ecx,eax
c000a6c1:	19 e9                	sbb    ecx,ebp
c000a6c3:	0f 83 43 ff ff ff    	jae    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6c9:	be 00 00 08 00       	mov    esi,0x80000
c000a6ce:	57                   	push   edi
c000a6cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6d3:	57                   	push   edi
c000a6d4:	56                   	push   esi
c000a6d5:	68 a4 4c 02 c0       	push   0xc0024ca4
c000a6da:	e8 60 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a6df:	5d                   	pop    ebp
c000a6e0:	58                   	pop    eax
c000a6e1:	57                   	push   edi
c000a6e2:	56                   	push   esi
c000a6e3:	e8 69 fe ff ff       	call   c000a551 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6f0:	83 c4 0c             	add    esp,0xc
c000a6f3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6f7:	03 05 d8 8c 02 c0    	add    eax,DWORD PTR ds:0xc0028cd8
c000a6fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a704:	a3 d8 8c 02 c0       	mov    ds:0xc0028cd8,eax
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	68 e5 4b 02 c0       	push   0xc0024be5
c000a710:	e8 2a 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	e9 ef fe ff ff       	jmp    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a71d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a721:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a725:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a729:	39 ea                	cmp    edx,ebp
c000a72b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a72f:	0f 82 d7 fe ff ff    	jb     c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a735:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a73a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a73e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a742:	0f 83 c4 fe ff ff    	jae    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a748:	39 ee                	cmp    esi,ebp
c000a74a:	89 f8                	mov    eax,edi
c000a74c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a750:	0f 83 78 ff ff ff    	jae    c000a6ce <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a75a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a75e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a762:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a766:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a76a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a76e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a772:	e9 57 ff ff ff       	jmp    c000a6ce <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a777:	83 ec 0c             	sub    esp,0xc
c000a77a:	68 d7 4b 02 c0       	push   0xc0024bd7
c000a77f:	e8 7d a8 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	83 ec 08             	sub    esp,0x8
c000a78a:	6a 00                	push   0x0
c000a78c:	6a 05                	push   0x5
c000a78e:	e8 a6 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a793:	58                   	pop    eax
c000a794:	5a                   	pop    edx
c000a795:	6a 00                	push   0x0
c000a797:	6a 06                	push   0x6
c000a799:	e8 9b fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a79e:	59                   	pop    ecx
c000a79f:	5b                   	pop    ebx
c000a7a0:	bb 60 00 00 00       	mov    ebx,0x60
c000a7a5:	6a 00                	push   0x0
c000a7a7:	6a 07                	push   0x7
c000a7a9:	e8 8b fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7ae:	83 05 d8 8c 02 c0 03 	add    DWORD PTR ds:0xc0028cd8,0x3
c000a7b5:	83 c4 10             	add    esp,0x10
c000a7b8:	83 ec 08             	sub    esp,0x8
c000a7bb:	6a 00                	push   0x0
c000a7bd:	53                   	push   ebx
c000a7be:	43                   	inc    ebx
c000a7bf:	e8 75 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7c4:	83 c4 10             	add    esp,0x10
c000a7c7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7cd:	75 e9                	jne    c000a7b8 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7cf:	a1 d8 8c 02 c0       	mov    eax,ds:0xc0028cd8
c000a7d4:	bb 40 01 00 00       	mov    ebx,0x140
c000a7d9:	83 c0 20             	add    eax,0x20
c000a7dc:	a3 d8 8c 02 c0       	mov    ds:0xc0028cd8,eax
c000a7e1:	eb 22                	jmp    c000a805 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a7e3:	83 ec 08             	sub    esp,0x8
c000a7e6:	6a 00                	push   0x0
c000a7e8:	53                   	push   ebx
c000a7e9:	43                   	inc    ebx
c000a7ea:	e8 4a fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7ef:	a1 d8 8c 02 c0       	mov    eax,ds:0xc0028cd8
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	40                   	inc    eax
c000a7f8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a7fe:	a3 d8 8c 02 c0       	mov    ds:0xc0028cd8,eax
c000a803:	74 07                	je     c000a80c <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a805:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a80a:	7e d7                	jle    c000a7e3 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a80c:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a811:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a816:	7f 22                	jg     c000a83a <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a818:	83 ec 08             	sub    esp,0x8
c000a81b:	6a 00                	push   0x0
c000a81d:	53                   	push   ebx
c000a81e:	43                   	inc    ebx
c000a81f:	e8 15 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a824:	a1 d8 8c 02 c0       	mov    eax,ds:0xc0028cd8
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	40                   	inc    eax
c000a82d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a833:	a3 d8 8c 02 c0       	mov    ds:0xc0028cd8,eax
c000a838:	75 d7                	jne    c000a811 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a83a:	83 c4 3c             	add    esp,0x3c
c000a83d:	5b                   	pop    ebx
c000a83e:	5e                   	pop    esi
c000a83f:	5f                   	pop    edi
c000a840:	5d                   	pop    ebp
c000a841:	c3                   	ret    
c000a842:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a84a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a852:	e9 46 fe ff ff       	jmp    c000a69d <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a857:	90                   	nop

c000a858 <Pipe::isAtty()>:
c000a858:	31 c0                	xor    eax,eax
c000a85a:	c3                   	ret    
c000a85b:	90                   	nop

c000a85c <Pipe::~Pipe()>:
c000a85c:	83 ec 0c             	sub    esp,0xc
c000a85f:	ba 10 4d 02 c0       	mov    edx,0xc0024d10
c000a864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a868:	89 10                	mov    DWORD PTR [eax],edx
c000a86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a86e:	83 ec 0c             	sub    esp,0xc
c000a871:	50                   	push   eax
c000a872:	e8 41 12 00 00       	call   c000bab8 <UnixFile::~UnixFile()>
c000a877:	83 c4 10             	add    esp,0x10
c000a87a:	90                   	nop
c000a87b:	83 c4 0c             	add    esp,0xc
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <Pipe::~Pipe()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	83 ec 0c             	sub    esp,0xc
c000a886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88a:	e8 cd ff ff ff       	call   c000a85c <Pipe::~Pipe()>
c000a88f:	83 c4 10             	add    esp,0x10
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	6a 20                	push   0x20
c000a897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89b:	e8 be 26 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	83 c4 0c             	add    esp,0xc
c000a8a6:	c3                   	ret    
c000a8a7:	90                   	nop

c000a8a8 <Pipe::read(unsigned long long, void*, int*)>:
c000a8a8:	55                   	push   ebp
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	53                   	push   ebx
c000a8ac:	83 ec 1c             	sub    esp,0x1c
c000a8af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8b7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8be:	89 c8                	mov    eax,ecx
c000a8c0:	99                   	cdq    
c000a8c1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8c5:	74 24                	je     c000a8eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8c7:	39 f9                	cmp    ecx,edi
c000a8c9:	89 d1                	mov    ecx,edx
c000a8cb:	19 f1                	sbb    ecx,esi
c000a8cd:	73 1c                	jae    c000a8eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8cf:	fa                   	cli    
c000a8d0:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c000a8d6:	e8 85 e4 00 00       	call   c0018d60 <schedule()>
c000a8db:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000a8e0:	48                   	dec    eax
c000a8e1:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000a8e6:	75 d3                	jne    c000a8bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8e8:	fb                   	sti    
c000a8e9:	eb d0                	jmp    c000a8bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8eb:	39 f8                	cmp    eax,edi
c000a8ed:	89 d1                	mov    ecx,edx
c000a8ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8f2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8f6:	19 f1                	sbb    ecx,esi
c000a8f8:	73 07                	jae    c000a901 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a901:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a904:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a907:	29 f7                	sub    edi,esi
c000a909:	89 f8                	mov    eax,edi
c000a90b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a90f:	99                   	cdq    
c000a910:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a917:	19 d0                	sbb    eax,edx
c000a919:	73 07                	jae    c000a922 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a91b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a91e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a922:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a925:	89 ea                	mov    edx,ebp
c000a927:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a92b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a930:	74 0d                	je     c000a93f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a932:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a935:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a939:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a93d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a93f:	85 d2                	test   edx,edx
c000a941:	74 11                	je     c000a954 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a947:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a94a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a94e:	89 d1                	mov    ecx,edx
c000a950:	89 c7                	mov    edi,eax
c000a952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a954:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a957:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a95a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a95d:	99                   	cdq    
c000a95e:	89 f7                	mov    edi,esi
c000a960:	03 04 24             	add    eax,DWORD PTR [esp]
c000a963:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a967:	c1 ff 1f             	sar    edi,0x1f
c000a96a:	57                   	push   edi
c000a96b:	56                   	push   esi
c000a96c:	52                   	push   edx
c000a96d:	50                   	push   eax
c000a96e:	e8 d5 87 01 00       	call   c0023148 <__umoddi3>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a979:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a97e:	75 10                	jne    c000a990 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a980:	83 ec 0c             	sub    esp,0xc
c000a983:	68 cd 4c 02 c0       	push   0xc0024ccd
c000a988:	e8 74 a6 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000a98d:	83 c4 10             	add    esp,0x10
c000a990:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a994:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a997:	89 10                	mov    DWORD PTR [eax],edx
c000a999:	83 c4 1c             	add    esp,0x1c
c000a99c:	31 c0                	xor    eax,eax
c000a99e:	5b                   	pop    ebx
c000a99f:	5e                   	pop    esi
c000a9a0:	5f                   	pop    edi
c000a9a1:	5d                   	pop    ebp
c000a9a2:	c3                   	ret    
c000a9a3:	90                   	nop

c000a9a4 <Pipe::write(unsigned long long, void*, int*)>:
c000a9a4:	55                   	push   ebp
c000a9a5:	57                   	push   edi
c000a9a6:	56                   	push   esi
c000a9a7:	53                   	push   ebx
c000a9a8:	83 ec 1c             	sub    esp,0x1c
c000a9ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9b3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c1:	89 d8                	mov    eax,ebx
c000a9c3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9c6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9ca:	89 d6                	mov    esi,edx
c000a9cc:	89 d7                	mov    edi,edx
c000a9ce:	c1 ff 1f             	sar    edi,0x1f
c000a9d1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9d4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9d8:	c1 f8 1f             	sar    eax,0x1f
c000a9db:	39 f3                	cmp    ebx,esi
c000a9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e5:	19 f8                	sbb    eax,edi
c000a9e7:	b8 01 00 00 00       	mov    eax,0x1
c000a9ec:	72 6e                	jb     c000aa5c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9f1:	01 d0                	add    eax,edx
c000a9f3:	99                   	cdq    
c000a9f4:	f7 fb                	idiv   ebx
c000a9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9fa:	29 d3                	sub    ebx,edx
c000a9fc:	89 d7                	mov    edi,edx
c000a9fe:	89 de                	mov    esi,ebx
c000aa00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa03:	c1 fb 1f             	sar    ebx,0x1f
c000aa06:	39 f2                	cmp    edx,esi
c000aa08:	19 d8                	sbb    eax,ebx
c000aa0a:	b8 00 00 00 00       	mov    eax,0x0
c000aa0f:	72 04                	jb     c000aa15 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa11:	89 d0                	mov    eax,edx
c000aa13:	29 f0                	sub    eax,esi
c000aa15:	89 d3                	mov    ebx,edx
c000aa17:	29 c3                	sub    ebx,eax
c000aa19:	74 0b                	je     c000aa26 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa1b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa1e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa22:	89 d9                	mov    ecx,ebx
c000aa24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa26:	85 c0                	test   eax,eax
c000aa28:	74 0d                	je     c000aa37 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa2a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa2e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa31:	89 de                	mov    esi,ebx
c000aa33:	89 c1                	mov    ecx,eax
c000aa35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa37:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa3a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa3f:	75 10                	jne    c000aa51 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa41:	83 ec 0c             	sub    esp,0xc
c000aa44:	68 e9 4c 02 c0       	push   0xc0024ce9
c000aa49:	e8 b3 a5 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000aa4e:	83 c4 10             	add    esp,0x10
c000aa51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa55:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa58:	89 08                	mov    DWORD PTR [eax],ecx
c000aa5a:	31 c0                	xor    eax,eax
c000aa5c:	83 c4 1c             	add    esp,0x1c
c000aa5f:	5b                   	pop    ebx
c000aa60:	5e                   	pop    esi
c000aa61:	5f                   	pop    edi
c000aa62:	5d                   	pop    ebp
c000aa63:	c3                   	ret    

c000aa64 <Pipe::Pipe(int)>:
c000aa64:	83 ec 0c             	sub    esp,0xc
c000aa67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6b:	83 ec 08             	sub    esp,0x8
c000aa6e:	6a 00                	push   0x0
c000aa70:	50                   	push   eax
c000aa71:	e8 60 0e 00 00       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000aa76:	83 c4 10             	add    esp,0x10
c000aa79:	ba 10 4d 02 c0       	mov    edx,0xc0024d10
c000aa7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa82:	89 10                	mov    DWORD PTR [eax],edx
c000aa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa93:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aaa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa9:	83 ec 0c             	sub    esp,0xc
c000aaac:	50                   	push   eax
c000aaad:	e8 a1 f2 ff ff       	call   c0009d53 <malloc>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 c2                	mov    edx,eax
c000aab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aac6:	90                   	nop
c000aac7:	83 c4 0c             	add    esp,0xc
c000aaca:	c3                   	ret    
c000aacb:	90                   	nop

c000aacc <VgaText::isAtty()>:
c000aacc:	b0 01                	mov    al,0x1
c000aace:	c3                   	ret    
c000aacf:	90                   	nop

c000aad0 <VgaText::~VgaText()>:
c000aad0:	83 ec 0c             	sub    esp,0xc
c000aad3:	ba 98 4d 02 c0       	mov    edx,0xc0024d98
c000aad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aadc:	89 10                	mov    DWORD PTR [eax],edx
c000aade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae2:	83 ec 0c             	sub    esp,0xc
c000aae5:	50                   	push   eax
c000aae6:	e8 cd 0f 00 00       	call   c000bab8 <UnixFile::~UnixFile()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	90                   	nop
c000aaef:	83 c4 0c             	add    esp,0xc
c000aaf2:	c3                   	ret    
c000aaf3:	90                   	nop

c000aaf4 <VgaText::~VgaText()>:
c000aaf4:	83 ec 0c             	sub    esp,0xc
c000aaf7:	83 ec 0c             	sub    esp,0xc
c000aafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafe:	e8 cd ff ff ff       	call   c000aad0 <VgaText::~VgaText()>
c000ab03:	83 c4 10             	add    esp,0x10
c000ab06:	83 ec 08             	sub    esp,0x8
c000ab09:	68 b4 01 00 00       	push   0x1b4
c000ab0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab12:	e8 47 24 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	83 c4 0c             	add    esp,0xc
c000ab1d:	c3                   	ret    

c000ab1e <VgaText::read(unsigned long long, void*, int*)>:
c000ab1e:	83 ec 10             	sub    esp,0x10
c000ab21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2d:	e8 a5 58 00 00       	call   c00103d7 <readKeyboard(VgaText*, char*, unsigned long)>
c000ab32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab36:	89 02                	mov    DWORD PTR [edx],eax
c000ab38:	31 c0                	xor    eax,eax
c000ab3a:	83 c4 1c             	add    esp,0x1c
c000ab3d:	c3                   	ret    

c000ab3e <setTerminalScrollLock(bool)>:
c000ab3e:	c3                   	ret    

c000ab3f <addToTerminalCycle(VgaText*)>:
c000ab3f:	8b 15 20 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d20
c000ab45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab49:	85 d2                	test   edx,edx
c000ab4b:	75 09                	jne    c000ab56 <addToTerminalCycle(VgaText*)+0x17>
c000ab4d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab50:	a3 20 8d 02 c0       	mov    ds:0xc0028d20,eax
c000ab55:	c3                   	ret    
c000ab56:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab59:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab5c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab5f:	c3                   	ret    

c000ab60 <installVgaTextImplementation()>:
c000ab60:	83 ec 10             	sub    esp,0x10
c000ab63:	6a 20                	push   0x20
c000ab65:	6a 00                	push   0x0
c000ab67:	68 00 8d 02 c0       	push   0xc0028d00
c000ab6c:	e8 0b 5b ff ff       	call   c000067c <memset>
c000ab71:	83 c4 1c             	add    esp,0x1c
c000ab74:	c3                   	ret    

c000ab75 <scrollTerminalScrollLock(int)>:
c000ab75:	c3                   	ret    

c000ab76 <VgaText::updateTitle()>:
c000ab76:	53                   	push   ebx
c000ab77:	31 c0                	xor    eax,eax
c000ab79:	83 ec 58             	sub    esp,0x58
c000ab7c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab80:	89 e1                	mov    ecx,esp
c000ab82:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab86:	40                   	inc    eax
c000ab87:	83 f8 50             	cmp    eax,0x50
c000ab8a:	75 f6                	jne    c000ab82 <VgaText::updateTitle()+0xc>
c000ab8c:	31 c0                	xor    eax,eax
c000ab8e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab95:	84 db                	test   bl,bl
c000ab97:	74 06                	je     c000ab9f <VgaText::updateTitle()+0x29>
c000ab99:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ab9c:	40                   	inc    eax
c000ab9d:	eb ef                	jmp    c000ab8e <VgaText::updateTitle()+0x18>
c000ab9f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aba2:	85 c0                	test   eax,eax
c000aba4:	74 09                	je     c000abaf <VgaText::updateTitle()+0x39>
c000aba6:	53                   	push   ebx
c000aba7:	53                   	push   ebx
c000aba8:	51                   	push   ecx
c000aba9:	52                   	push   edx
c000abaa:	ff d0                	call   eax
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	83 c4 58             	add    esp,0x58
c000abb2:	5b                   	pop    ebx
c000abb3:	c3                   	ret    

c000abb4 <VgaText::load()>:
c000abb4:	53                   	push   ebx
c000abb5:	31 c0                	xor    eax,eax
c000abb7:	83 ec 58             	sub    esp,0x58
c000abba:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abbe:	89 e2                	mov    edx,esp
c000abc0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	75 f6                	jne    c000abc0 <VgaText::load()+0xc>
c000abca:	31 c0                	xor    eax,eax
c000abcc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abd3:	84 c9                	test   cl,cl
c000abd5:	74 06                	je     c000abdd <VgaText::load()+0x29>
c000abd7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abda:	40                   	inc    eax
c000abdb:	eb ef                	jmp    c000abcc <VgaText::load()+0x18>
c000abdd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abe0:	85 c0                	test   eax,eax
c000abe2:	74 09                	je     c000abed <VgaText::load()+0x39>
c000abe4:	51                   	push   ecx
c000abe5:	51                   	push   ecx
c000abe6:	52                   	push   edx
c000abe7:	53                   	push   ebx
c000abe8:	ff d0                	call   eax
c000abea:	83 c4 10             	add    esp,0x10
c000abed:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abf0:	85 c0                	test   eax,eax
c000abf2:	74 09                	je     c000abfd <VgaText::load()+0x49>
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	53                   	push   ebx
c000abf8:	ff d0                	call   eax
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	83 c4 58             	add    esp,0x58
c000ac00:	5b                   	pop    ebx
c000ac01:	c3                   	ret    

c000ac02 <VgaText::updateCursor()>:
c000ac02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac06:	39 05 24 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d24,eax
c000ac0c:	75 09                	jne    c000ac17 <VgaText::updateCursor()+0x15>
c000ac0e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac11:	85 c0                	test   eax,eax
c000ac13:	74 02                	je     c000ac17 <VgaText::updateCursor()+0x15>
c000ac15:	ff e0                	jmp    eax
c000ac17:	c3                   	ret    

c000ac18 <VgaText::doANSI_SGR(int)>:
c000ac18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac20:	85 d2                	test   edx,edx
c000ac22:	75 0b                	jne    c000ac2f <VgaText::doANSI_SGR(int)+0x17>
c000ac24:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac27:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac2a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac2d:	eb 59                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac2f:	83 fa 07             	cmp    edx,0x7
c000ac32:	75 0b                	jne    c000ac3f <VgaText::doANSI_SGR(int)+0x27>
c000ac34:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac37:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac3a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac3d:	eb 49                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac3f:	83 fa 1b             	cmp    edx,0x1b
c000ac42:	74 e0                	je     c000ac24 <VgaText::doANSI_SGR(int)+0xc>
c000ac44:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac47:	83 f9 07             	cmp    ecx,0x7
c000ac4a:	77 09                	ja     c000ac55 <VgaText::doANSI_SGR(int)+0x3d>
c000ac4c:	8b 14 8d a0 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7f60]
c000ac53:	eb 20                	jmp    c000ac75 <VgaText::doANSI_SGR(int)+0x5d>
c000ac55:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac58:	83 f9 07             	cmp    ecx,0x7
c000ac5b:	77 09                	ja     c000ac66 <VgaText::doANSI_SGR(int)+0x4e>
c000ac5d:	8b 14 8d a0 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7f60]
c000ac64:	eb 22                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac66:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac69:	83 f9 07             	cmp    ecx,0x7
c000ac6c:	77 0b                	ja     c000ac79 <VgaText::doANSI_SGR(int)+0x61>
c000ac6e:	8b 14 95 58 7f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd80a8]
c000ac75:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac78:	c3                   	ret    
c000ac79:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac7c:	83 f9 07             	cmp    ecx,0x7
c000ac7f:	77 0a                	ja     c000ac8b <VgaText::doANSI_SGR(int)+0x73>
c000ac81:	8b 14 95 30 7f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd80d0]
c000ac88:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac8b:	c3                   	ret    

c000ac8c <VgaText::setDefaultBgColour(VgaColour)>:
c000ac8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac94:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac97:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <VgaText::setDefaultFgColour(VgaColour)>:
c000ac9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000aca7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acaa:	c3                   	ret    
c000acab:	90                   	nop

c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000acac:	53                   	push   ebx
c000acad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acb5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acb9:	51                   	push   ecx
c000acba:	e8 cd ff ff ff       	call   c000ac8c <VgaText::setDefaultBgColour(VgaColour)>
c000acbf:	58                   	pop    eax
c000acc0:	5a                   	pop    edx
c000acc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000acc5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000acc9:	5b                   	pop    ebx
c000acca:	eb d0                	jmp    c000ac9c <VgaText::setDefaultFgColour(VgaColour)>

c000accc <VgaText::setTitleTextColour(VgaColour)>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acd4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acd7:	e9 9a fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>

c000acdc <VgaText::setTitleColour(VgaColour)>:
c000acdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ace4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ace7:	e9 8a fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>

c000acec <VgaText::setTitle(char*)>:
c000acec:	53                   	push   ebx
c000aced:	83 ec 10             	sub    esp,0x10
c000acf0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf8:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000acfe:	50                   	push   eax
c000acff:	e8 34 5a ff ff       	call   c0000738 <strcpy>
c000ad04:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad08:	83 c4 18             	add    esp,0x18
c000ad0b:	5b                   	pop    ebx
c000ad0c:	e9 65 fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>
c000ad11:	90                   	nop

c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad12:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad16:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad1b:	83 e0 0f             	and    eax,0xf
c000ad1e:	c1 e2 04             	shl    edx,0x4
c000ad21:	09 d0                	or     eax,edx
c000ad23:	c3                   	ret    

c000ad24 <VgaText::scrollScreen()>:
c000ad24:	55                   	push   ebp
c000ad25:	b9 01 00 00 00       	mov    ecx,0x1
c000ad2a:	57                   	push   edi
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad34:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad3a:	31 ff                	xor    edi,edi
c000ad3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad3f:	83 f9 17             	cmp    ecx,0x17
c000ad42:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad45:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad4c:	75 27                	jne    c000ad75 <VgaText::scrollScreen()+0x51>
c000ad4e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad51:	01 f5                	add    ebp,esi
c000ad53:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad59:	74 16                	je     c000ad71 <VgaText::scrollScreen()+0x4d>
c000ad5b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad5f:	50                   	push   eax
c000ad60:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad64:	50                   	push   eax
c000ad65:	e8 a8 ff ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad6a:	5a                   	pop    edx
c000ad6b:	5a                   	pop    edx
c000ad6c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad6f:	eb 04                	jmp    c000ad75 <VgaText::scrollScreen()+0x51>
c000ad71:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad75:	47                   	inc    edi
c000ad76:	46                   	inc    esi
c000ad77:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad7d:	75 bd                	jne    c000ad3c <VgaText::scrollScreen()+0x18>
c000ad7f:	41                   	inc    ecx
c000ad80:	83 f9 18             	cmp    ecx,0x18
c000ad83:	75 af                	jne    c000ad34 <VgaText::scrollScreen()+0x10>
c000ad85:	39 1d 24 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d24,ebx
c000ad8b:	75 1b                	jne    c000ada8 <VgaText::scrollScreen()+0x84>
c000ad8d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad91:	74 05                	je     c000ad98 <VgaText::scrollScreen()+0x74>
c000ad93:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad96:	eb 10                	jmp    c000ada8 <VgaText::scrollScreen()+0x84>
c000ad98:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ad9b:	85 c0                	test   eax,eax
c000ad9d:	74 09                	je     c000ada8 <VgaText::scrollScreen()+0x84>
c000ad9f:	83 ec 0c             	sub    esp,0xc
c000ada2:	53                   	push   ebx
c000ada3:	ff d0                	call   eax
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adac:	83 c4 0c             	add    esp,0xc
c000adaf:	5b                   	pop    ebx
c000adb0:	5e                   	pop    esi
c000adb1:	5f                   	pop    edi
c000adb2:	5d                   	pop    ebp
c000adb3:	e9 4a fe ff ff       	jmp    c000ac02 <VgaText::updateCursor()>

c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000adb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000adbd:	c1 e0 08             	shl    eax,0x8
c000adc0:	89 c2                	mov    edx,eax
c000adc2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000adc7:	09 d0                	or     eax,edx
c000adc9:	c3                   	ret    

c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	51                   	push   ecx
c000adcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000add1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000add6:	50                   	push   eax
c000add7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000addc:	50                   	push   eax
c000addd:	e8 30 ff ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000ade2:	5b                   	pop    ebx
c000ade3:	0f b6 c0             	movzx  eax,al
c000ade6:	5e                   	pop    esi
c000ade7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adec:	50                   	push   eax
c000aded:	53                   	push   ebx
c000adee:	e8 c5 ff ff ff       	call   c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>
c000adf3:	5a                   	pop    edx
c000adf4:	5e                   	pop    esi
c000adf5:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000adf8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000adfe:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae02:	0f b7 d2             	movzx  edx,dx
c000ae05:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae09:	39 0d 24 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d24,ecx
c000ae0f:	75 10                	jne    c000ae21 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae11:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae14:	85 c0                	test   eax,eax
c000ae16:	74 09                	je     c000ae21 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae18:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae1c:	5a                   	pop    edx
c000ae1d:	5b                   	pop    ebx
c000ae1e:	5e                   	pop    esi
c000ae1f:	ff e0                	jmp    eax
c000ae21:	58                   	pop    eax
c000ae22:	5b                   	pop    ebx
c000ae23:	5e                   	pop    esi
c000ae24:	c3                   	ret    
c000ae25:	90                   	nop

c000ae26 <VgaText::getCursorX()>:
c000ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae2d:	c3                   	ret    

c000ae2e <VgaText::getCursorY()>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae35:	c3                   	ret    

c000ae36 <VgaText::setCursor(int, int)>:
c000ae36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae3e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae48:	e9 b5 fd ff ff       	jmp    c000ac02 <VgaText::updateCursor()>

c000ae4d <setActiveTerminal(VgaText*)>:
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 08             	sub    esp,0x8
c000ae51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae55:	85 db                	test   ebx,ebx
c000ae57:	75 11                	jne    c000ae6a <setActiveTerminal(VgaText*)+0x1d>
c000ae59:	c7 44 24 10 24 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d24
c000ae61:	83 c4 08             	add    esp,0x8
c000ae64:	5b                   	pop    ebx
c000ae65:	e9 97 a1 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c000ae6a:	a1 24 8d 02 c0       	mov    eax,ds:0xc0028d24
c000ae6f:	85 c0                	test   eax,eax
c000ae71:	74 0c                	je     c000ae7f <setActiveTerminal(VgaText*)+0x32>
c000ae73:	83 ec 0c             	sub    esp,0xc
c000ae76:	50                   	push   eax
c000ae77:	e8 86 fd ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 1d 24 8d 02 c0    	mov    DWORD PTR ds:0xc0028d24,ebx
c000ae85:	51                   	push   ecx
c000ae86:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae8c:	53                   	push   ebx
c000ae8d:	e8 a4 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae99:	75 07                	jne    c000aea2 <setActiveTerminal(VgaText*)+0x55>
c000ae9b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aea2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aea6:	83 c4 08             	add    esp,0x8
c000aea9:	5b                   	pop    ebx
c000aeaa:	e9 05 fd ff ff       	jmp    c000abb4 <VgaText::load()>

c000aeaf <doTerminalCycle()>:
c000aeaf:	83 ec 18             	sub    esp,0x18
c000aeb2:	a1 20 8d 02 c0       	mov    eax,ds:0xc0028d20
c000aeb7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aeba:	50                   	push   eax
c000aebb:	a3 20 8d 02 c0       	mov    ds:0xc0028d20,eax
c000aec0:	e8 88 ff ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c000aec5:	83 c4 1c             	add    esp,0x1c
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <VgaText::setCursorX(int)>:
c000aeca:	83 ec 10             	sub    esp,0x10
c000aecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed8:	50                   	push   eax
c000aed9:	e8 58 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000aede:	83 c4 1c             	add    esp,0x1c
c000aee1:	c3                   	ret    

c000aee2 <VgaText::setCursorY(int)>:
c000aee2:	83 ec 10             	sub    esp,0x10
c000aee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aeed:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aef0:	50                   	push   eax
c000aef1:	e8 40 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000aef6:	83 c4 1c             	add    esp,0x1c
c000aef9:	c3                   	ret    

c000aefa <VgaText::incrementCursor(bool)>:
c000aefa:	56                   	push   esi
c000aefb:	53                   	push   ebx
c000aefc:	51                   	push   ecx
c000aefd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af08:	40                   	inc    eax
c000af09:	83 f8 50             	cmp    eax,0x50
c000af0c:	74 05                	je     c000af13 <VgaText::incrementCursor(bool)+0x19>
c000af0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af11:	eb 24                	jmp    c000af37 <VgaText::incrementCursor(bool)+0x3d>
c000af13:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af16:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1d:	8d 50 01             	lea    edx,[eax+0x1]
c000af20:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af23:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af26:	75 0f                	jne    c000af37 <VgaText::incrementCursor(bool)+0x3d>
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2e:	53                   	push   ebx
c000af2f:	e8 f0 fd ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000af34:	83 c4 10             	add    esp,0x10
c000af37:	89 f0                	mov    eax,esi
c000af39:	84 c0                	test   al,al
c000af3b:	74 0c                	je     c000af49 <VgaText::incrementCursor(bool)+0x4f>
c000af3d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af41:	5a                   	pop    edx
c000af42:	5b                   	pop    ebx
c000af43:	5e                   	pop    esi
c000af44:	e9 b9 fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000af49:	58                   	pop    eax
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	c3                   	ret    
c000af4d:	90                   	nop

c000af4e <VgaText::decrementCursor(bool)>:
c000af4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af56:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af59:	85 c0                	test   eax,eax
c000af5b:	74 04                	je     c000af61 <VgaText::decrementCursor(bool)+0x13>
c000af5d:	48                   	dec    eax
c000af5e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af61:	84 c9                	test   cl,cl
c000af63:	74 09                	je     c000af6e <VgaText::decrementCursor(bool)+0x20>
c000af65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af69:	e9 94 fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000af6e:	c3                   	ret    
c000af6f:	90                   	nop

c000af70 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af70:	53                   	push   ebx
c000af71:	83 ec 08             	sub    esp,0x8
c000af74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af84:	3c 07                	cmp    al,0x7
c000af86:	75 2a                	jne    c000afb2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000af88:	a1 d8 8d 02 c0       	mov    eax,ds:0xc0028dd8
c000af8d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af95:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000af9d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afa9:	83 c4 08             	add    esp,0x8
c000afac:	5b                   	pop    ebx
c000afad:	e9 d4 2f 00 00       	jmp    c000df86 <Buzzer::beep(int, int, bool)>
c000afb2:	3c 0d                	cmp    al,0xd
c000afb4:	75 09                	jne    c000afbf <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afb6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afbd:	eb 2c                	jmp    c000afeb <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afbf:	3c 0a                	cmp    al,0xa
c000afc1:	75 31                	jne    c000aff4 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afc3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afcd:	8d 50 01             	lea    edx,[eax+0x1]
c000afd0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afd3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afd6:	75 0f                	jne    c000afe7 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afde:	53                   	push   ebx
c000afdf:	e8 40 fd ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	e9 0e fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000aff4:	3c 08                	cmp    al,0x8
c000aff6:	75 25                	jne    c000b01d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000aff8:	50                   	push   eax
c000aff9:	50                   	push   eax
c000affa:	6a 01                	push   0x1
c000affc:	53                   	push   ebx
c000affd:	e8 4c ff ff ff       	call   c000af4e <VgaText::decrementCursor(bool)>
c000b002:	5a                   	pop    edx
c000b003:	59                   	pop    ecx
c000b004:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b007:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b00a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b00d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b010:	6a 20                	push   0x20
c000b012:	53                   	push   ebx
c000b013:	e8 b2 fd ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b018:	83 c4 28             	add    esp,0x28
c000b01b:	5b                   	pop    ebx
c000b01c:	c3                   	ret    
c000b01d:	83 ec 08             	sub    esp,0x8
c000b020:	0f be c0             	movsx  eax,al
c000b023:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b026:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b029:	51                   	push   ecx
c000b02a:	52                   	push   edx
c000b02b:	50                   	push   eax
c000b02c:	53                   	push   ebx
c000b02d:	e8 98 fd ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b032:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b036:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b03e:	83 c4 28             	add    esp,0x28
c000b041:	5b                   	pop    ebx
c000b042:	e9 b3 fe ff ff       	jmp    c000aefa <VgaText::incrementCursor(bool)>
c000b047:	90                   	nop

c000b048 <VgaText::doUpdate()>:
c000b048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b04c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b04f:	85 c0                	test   eax,eax
c000b051:	74 02                	je     c000b055 <VgaText::doUpdate()+0xd>
c000b053:	ff e0                	jmp    eax
c000b055:	c3                   	ret    

c000b056 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b056:	55                   	push   ebp
c000b057:	31 ed                	xor    ebp,ebp
c000b059:	57                   	push   edi
c000b05a:	56                   	push   esi
c000b05b:	53                   	push   ebx
c000b05c:	83 ec 1c             	sub    esp,0x1c
c000b05f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b063:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b068:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b06f:	50                   	push   eax
c000b070:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b075:	50                   	push   eax
c000b076:	e8 97 fc ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000b07b:	59                   	pop    ecx
c000b07c:	0f b6 c0             	movzx  eax,al
c000b07f:	5e                   	pop    esi
c000b080:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b085:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b089:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b08c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b090:	0f b7 f6             	movzx  esi,si
c000b093:	01 f6                	add    esi,esi
c000b095:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b098:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b09b:	84 c0                	test   al,al
c000b09d:	0f 84 fd 00 00 00    	je     c000b1a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0a3:	3c 0d                	cmp    al,0xd
c000b0a5:	75 0c                	jne    c000b0b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0a7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0ae:	e9 e7 00 00 00       	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0b3:	3c 0a                	cmp    al,0xa
c000b0b5:	75 47                	jne    c000b0fe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0c1:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0c4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0c7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0ca:	75 0f                	jne    c000b0db <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0cc:	83 ec 0c             	sub    esp,0xc
c000b0cf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0d2:	53                   	push   ebx
c000b0d3:	e8 4c fc ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	83 ec 0c             	sub    esp,0xc
c000b0de:	31 ed                	xor    ebp,ebp
c000b0e0:	53                   	push   ebx
c000b0e1:	e8 1c fb ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000b0e6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0f1:	0f b7 f6             	movzx  esi,si
c000b0f4:	01 f6                	add    esi,esi
c000b0f6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0f9:	e9 9c 00 00 00       	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0fe:	3c 08                	cmp    al,0x8
c000b100:	75 35                	jne    c000b137 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b102:	56                   	push   esi
c000b103:	56                   	push   esi
c000b104:	6a 01                	push   0x1
c000b106:	53                   	push   ebx
c000b107:	e8 42 fe ff ff       	call   c000af4e <VgaText::decrementCursor(bool)>
c000b10c:	58                   	pop    eax
c000b10d:	5a                   	pop    edx
c000b10e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b111:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b114:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b117:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b11a:	6a 20                	push   0x20
c000b11c:	53                   	push   ebx
c000b11d:	e8 a8 fc ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b122:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b127:	83 c4 20             	add    esp,0x20
c000b12a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b12d:	0f b7 f6             	movzx  esi,si
c000b130:	01 f6                	add    esi,esi
c000b132:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b135:	eb 63                	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b137:	51                   	push   ecx
c000b138:	51                   	push   ecx
c000b139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13d:	50                   	push   eax
c000b13e:	e8 75 fc ff ff       	call   c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	66 89 06             	mov    WORD PTR [esi],ax
c000b149:	39 1d 24 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d24,ebx
c000b14f:	75 21                	jne    c000b172 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b151:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b154:	85 c0                	test   eax,eax
c000b156:	74 1a                	je     c000b172 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b158:	52                   	push   edx
c000b159:	52                   	push   edx
c000b15a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b15d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b160:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b164:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b168:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b16b:	51                   	push   ecx
c000b16c:	53                   	push   ebx
c000b16d:	ff d0                	call   eax
c000b16f:	83 c4 20             	add    esp,0x20
c000b172:	83 c6 02             	add    esi,0x2
c000b175:	50                   	push   eax
c000b176:	50                   	push   eax
c000b177:	6a 00                	push   0x0
c000b179:	53                   	push   ebx
c000b17a:	e8 7b fd ff ff       	call   c000aefa <VgaText::incrementCursor(bool)>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b186:	75 0d                	jne    c000b195 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b188:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b18d:	0f b7 f6             	movzx  esi,si
c000b190:	01 f6                	add    esi,esi
c000b192:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b195:	bd 01 00 00 00       	mov    ebp,0x1
c000b19a:	47                   	inc    edi
c000b19b:	e9 f8 fe ff ff       	jmp    c000b098 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	53                   	push   ebx
c000b1a4:	e8 59 fa ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	89 e8                	mov    eax,ebp
c000b1ae:	84 c0                	test   al,al
c000b1b0:	74 0c                	je     c000b1be <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	53                   	push   ebx
c000b1b6:	e8 8d fe ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b1bb:	83 c4 10             	add    esp,0x10
c000b1be:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1c5:	83 c4 1c             	add    esp,0x1c
c000b1c8:	5b                   	pop    ebx
c000b1c9:	5e                   	pop    esi
c000b1ca:	5f                   	pop    edi
c000b1cb:	5d                   	pop    ebp
c000b1cc:	c3                   	ret    
c000b1cd:	90                   	nop

c000b1ce <VgaText::clearScreen()>:
c000b1ce:	57                   	push   edi
c000b1cf:	56                   	push   esi
c000b1d0:	31 f6                	xor    esi,esi
c000b1d2:	53                   	push   ebx
c000b1d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1d7:	52                   	push   edx
c000b1d8:	6a 00                	push   0x0
c000b1da:	6a 00                	push   0x0
c000b1dc:	53                   	push   ebx
c000b1dd:	e8 54 fc ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b1e2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1ef:	7e 20                	jle    c000b211 <VgaText::clearScreen()+0x43>
c000b1f1:	31 ff                	xor    edi,edi
c000b1f3:	50                   	push   eax
c000b1f4:	50                   	push   eax
c000b1f5:	56                   	push   esi
c000b1f6:	57                   	push   edi
c000b1f7:	47                   	inc    edi
c000b1f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b1fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1fe:	6a 20                	push   0x20
c000b200:	53                   	push   ebx
c000b201:	e8 c4 fb ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b206:	83 c4 20             	add    esp,0x20
c000b209:	83 ff 50             	cmp    edi,0x50
c000b20c:	75 e5                	jne    c000b1f3 <VgaText::clearScreen()+0x25>
c000b20e:	46                   	inc    esi
c000b20f:	eb db                	jmp    c000b1ec <VgaText::clearScreen()+0x1e>
c000b211:	83 ec 0c             	sub    esp,0xc
c000b214:	53                   	push   ebx
c000b215:	e8 2e fe ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b21a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	5b                   	pop    ebx
c000b225:	5e                   	pop    esi
c000b226:	5f                   	pop    edi
c000b227:	c3                   	ret    

c000b228 <VgaText::putchar(char)>:
c000b228:	56                   	push   esi
c000b229:	53                   	push   ebx
c000b22a:	83 ec 14             	sub    esp,0x14
c000b22d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b231:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b235:	3c 5b                	cmp    al,0x5b
c000b237:	75 18                	jne    c000b251 <VgaText::putchar(char)+0x29>
c000b239:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b23d:	74 1f                	je     c000b25e <VgaText::putchar(char)+0x36>
c000b23f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b245:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b24c:	e9 bd 00 00 00       	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b251:	3c 1b                	cmp    al,0x1b
c000b253:	75 09                	jne    c000b25e <VgaText::putchar(char)+0x36>
c000b255:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b259:	e9 b0 00 00 00       	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b25e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b261:	84 c9                	test   cl,cl
c000b263:	0f 84 92 00 00 00    	je     c000b2fb <VgaText::putchar(char)+0xd3>
c000b269:	8d 50 c0             	lea    edx,[eax-0x40]
c000b26c:	80 fa 3e             	cmp    dl,0x3e
c000b26f:	77 76                	ja     c000b2e7 <VgaText::putchar(char)+0xbf>
c000b271:	3c 6d                	cmp    al,0x6d
c000b273:	75 47                	jne    c000b2bc <VgaText::putchar(char)+0x94>
c000b275:	31 f6                	xor    esi,esi
c000b277:	31 d2                	xor    edx,edx
c000b279:	31 c0                	xor    eax,eax
c000b27b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b27e:	7e 2d                	jle    c000b2ad <VgaText::putchar(char)+0x85>
c000b280:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b285:	80 fa 3b             	cmp    dl,0x3b
c000b288:	75 17                	jne    c000b2a1 <VgaText::putchar(char)+0x79>
c000b28a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b28e:	50                   	push   eax
c000b28f:	53                   	push   ebx
c000b290:	e8 83 f9 ff ff       	call   c000ac18 <VgaText::doANSI_SGR(int)>
c000b295:	59                   	pop    ecx
c000b296:	31 d2                	xor    edx,edx
c000b298:	58                   	pop    eax
c000b299:	31 c0                	xor    eax,eax
c000b29b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b29f:	eb 09                	jmp    c000b2aa <VgaText::putchar(char)+0x82>
c000b2a1:	6b c0 0a             	imul   eax,eax,0xa
c000b2a4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2a8:	88 ca                	mov    dl,cl
c000b2aa:	46                   	inc    esi
c000b2ab:	eb ce                	jmp    c000b27b <VgaText::putchar(char)+0x53>
c000b2ad:	84 d2                	test   dl,dl
c000b2af:	74 2e                	je     c000b2df <VgaText::putchar(char)+0xb7>
c000b2b1:	50                   	push   eax
c000b2b2:	53                   	push   ebx
c000b2b3:	e8 60 f9 ff ff       	call   c000ac18 <VgaText::doANSI_SGR(int)>
c000b2b8:	58                   	pop    eax
c000b2b9:	5a                   	pop    edx
c000b2ba:	eb 23                	jmp    c000b2df <VgaText::putchar(char)+0xb7>
c000b2bc:	3c 4a                	cmp    al,0x4a
c000b2be:	75 1f                	jne    c000b2df <VgaText::putchar(char)+0xb7>
c000b2c0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2c4:	75 19                	jne    c000b2df <VgaText::putchar(char)+0xb7>
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	53                   	push   ebx
c000b2ca:	e8 ff fe ff ff       	call   c000b1ce <VgaText::clearScreen()>
c000b2cf:	83 c4 0c             	add    esp,0xc
c000b2d2:	6a 00                	push   0x0
c000b2d4:	6a 00                	push   0x0
c000b2d6:	53                   	push   ebx
c000b2d7:	e8 5a fb ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b2dc:	83 c4 10             	add    esp,0x10
c000b2df:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2e5:	eb 27                	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b2e7:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2ea:	83 fa 0e             	cmp    edx,0xe
c000b2ed:	7f 1f                	jg     c000b30e <VgaText::putchar(char)+0xe6>
c000b2ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2f2:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2f5:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b2f9:	eb 13                	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b2fb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b2fe:	0f be c0             	movsx  eax,al
c000b301:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b304:	50                   	push   eax
c000b305:	53                   	push   ebx
c000b306:	e8 65 fc ff ff       	call   c000af70 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	83 c4 14             	add    esp,0x14
c000b311:	5b                   	pop    ebx
c000b312:	5e                   	pop    esi
c000b313:	c3                   	ret    

c000b314 <VgaText::putx(unsigned int)>:
c000b314:	57                   	push   edi
c000b315:	b9 11 00 00 00       	mov    ecx,0x11
c000b31a:	56                   	push   esi
c000b31b:	be 32 4d 02 c0       	mov    esi,0xc0024d32
c000b320:	53                   	push   ebx
c000b321:	83 ec 20             	sub    esp,0x20
c000b324:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b328:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b32c:	fc                   	cld    
c000b32d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b32f:	be 08 00 00 00       	mov    esi,0x8
c000b334:	50                   	push   eax
c000b335:	50                   	push   eax
c000b336:	89 d8                	mov    eax,ebx
c000b338:	c1 e3 04             	shl    ebx,0x4
c000b33b:	c1 e8 1c             	shr    eax,0x1c
c000b33e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b343:	50                   	push   eax
c000b344:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b348:	e8 db fe ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	4e                   	dec    esi
c000b351:	75 e1                	jne    c000b334 <VgaText::putx(unsigned int)+0x20>
c000b353:	83 c4 20             	add    esp,0x20
c000b356:	5b                   	pop    ebx
c000b357:	5e                   	pop    esi
c000b358:	5f                   	pop    edi
c000b359:	c3                   	ret    

c000b35a <VgaText::puts(char const*)>:
c000b35a:	53                   	push   ebx
c000b35b:	83 ec 08             	sub    esp,0x8
c000b35e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b362:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b365:	84 c0                	test   al,al
c000b367:	74 12                	je     c000b37b <VgaText::puts(char const*)+0x21>
c000b369:	43                   	inc    ebx
c000b36a:	51                   	push   ecx
c000b36b:	51                   	push   ecx
c000b36c:	50                   	push   eax
c000b36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b371:	e8 b2 fe ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	eb e7                	jmp    c000b362 <VgaText::puts(char const*)+0x8>
c000b37b:	83 c4 08             	add    esp,0x8
c000b37e:	5b                   	pop    ebx
c000b37f:	c3                   	ret    

c000b380 <VgaText::VgaText(char const*)>:
c000b380:	57                   	push   edi
c000b381:	56                   	push   esi
c000b382:	53                   	push   ebx
c000b383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b387:	83 ec 08             	sub    esp,0x8
c000b38a:	6a 00                	push   0x0
c000b38c:	50                   	push   eax
c000b38d:	e8 44 05 00 00       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	ba 98 4d 02 c0       	mov    edx,0xc0024d98
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	89 10                	mov    DWORD PTR [eax],edx
c000b3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3af:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ba:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ca:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3eb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f6:	8d 50 60             	lea    edx,[eax+0x60]
c000b3f9:	bb 00 8d 02 c0       	mov    ebx,0xc0028d00
c000b3fe:	b8 08 00 00 00       	mov    eax,0x8
c000b403:	fc                   	cld    
c000b404:	89 d7                	mov    edi,edx
c000b406:	89 de                	mov    esi,ebx
c000b408:	89 c1                	mov    ecx,eax
c000b40a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	05 82 00 00 00       	add    eax,0x82
c000b415:	83 ec 08             	sub    esp,0x8
c000b418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41c:	50                   	push   eax
c000b41d:	e8 16 53 ff ff       	call   c0000738 <strcpy>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b429:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	6a 01                	push   0x1
c000b435:	e8 df 08 00 00       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000b43a:	83 c4 10             	add    esp,0x10
c000b43d:	89 c2                	mov    edx,eax
c000b43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b443:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b446:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c000b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b450:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b453:	89 c6                	mov    esi,eax
c000b455:	e8 b0 ef ff ff       	call   c000a40a <Phys::allocatePage()>
c000b45a:	68 05 0c 00 00       	push   0xc05
c000b45f:	56                   	push   esi
c000b460:	50                   	push   eax
c000b461:	53                   	push   ebx
c000b462:	e8 59 0f 00 00       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b471:	83 ec 04             	sub    esp,0x4
c000b474:	68 00 0f 00 00       	push   0xf00
c000b479:	6a 00                	push   0x0
c000b47b:	50                   	push   eax
c000b47c:	e8 fb 51 ff ff       	call   c000067c <memset>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	83 ec 04             	sub    esp,0x4
c000b487:	6a 00                	push   0x0
c000b489:	6a 07                	push   0x7
c000b48b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48f:	e8 18 f8 ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	83 ec 04             	sub    esp,0x4
c000b49a:	6a 00                	push   0x0
c000b49c:	6a 00                	push   0x0
c000b49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a2:	e8 8f f9 ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b1:	e8 18 fd ff ff       	call   c000b1ce <VgaText::clearScreen()>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c5:	05 02 01 00 00       	add    eax,0x102
c000b4ca:	83 ec 04             	sub    esp,0x4
c000b4cd:	6a 30                	push   0x30
c000b4cf:	6a 00                	push   0x0
c000b4d1:	50                   	push   eax
c000b4d2:	e8 a5 51 ff ff       	call   c000067c <memset>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4de:	05 32 01 00 00       	add    eax,0x132
c000b4e3:	83 ec 04             	sub    esp,0x4
c000b4e6:	68 80 00 00 00       	push   0x80
c000b4eb:	6a 00                	push   0x0
c000b4ed:	50                   	push   eax
c000b4ee:	e8 89 51 ff ff       	call   c000067c <memset>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	90                   	nop
c000b4f7:	5b                   	pop    ebx
c000b4f8:	5e                   	pop    esi
c000b4f9:	5f                   	pop    edi
c000b4fa:	c3                   	ret    
c000b4fb:	90                   	nop

c000b4fc <VgaText::receiveKey(unsigned char)>:
c000b4fc:	55                   	push   ebp
c000b4fd:	57                   	push   edi
c000b4fe:	56                   	push   esi
c000b4ff:	53                   	push   ebx
c000b500:	83 ec 1c             	sub    esp,0x1c
c000b503:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b507:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b50b:	84 db                	test   bl,bl
c000b50d:	0f 84 c6 00 00 00    	je     c000b5d9 <VgaText::receiveKey(unsigned char)+0xdd>
c000b513:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b519:	80 fb 08             	cmp    bl,0x8
c000b51c:	75 2c                	jne    c000b54a <VgaText::receiveKey(unsigned char)+0x4e>
c000b51e:	83 ec 0c             	sub    esp,0xc
c000b521:	57                   	push   edi
c000b522:	e8 71 51 ff ff       	call   c0000698 <strlen>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	85 c0                	test   eax,eax
c000b52c:	74 41                	je     c000b56f <VgaText::receiveKey(unsigned char)+0x73>
c000b52e:	50                   	push   eax
c000b52f:	50                   	push   eax
c000b530:	6a 08                	push   0x8
c000b532:	56                   	push   esi
c000b533:	e8 f0 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b538:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b53b:	e8 58 51 ff ff       	call   c0000698 <strlen>
c000b540:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b548:	eb 22                	jmp    c000b56c <VgaText::receiveKey(unsigned char)+0x70>
c000b54a:	0f be c3             	movsx  eax,bl
c000b54d:	52                   	push   edx
c000b54e:	52                   	push   edx
c000b54f:	50                   	push   eax
c000b550:	56                   	push   esi
c000b551:	e8 d2 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b556:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b55a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b55f:	59                   	pop    ecx
c000b560:	5d                   	pop    ebp
c000b561:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b565:	50                   	push   eax
c000b566:	57                   	push   edi
c000b567:	e8 0c 53 ff ff       	call   c0000878 <strcat>
c000b56c:	83 c4 10             	add    esp,0x10
c000b56f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b576:	75 05                	jne    c000b57d <VgaText::receiveKey(unsigned char)+0x81>
c000b578:	80 fb 0a             	cmp    bl,0xa
c000b57b:	75 50                	jne    c000b5cd <VgaText::receiveKey(unsigned char)+0xd1>
c000b57d:	83 ec 0c             	sub    esp,0xc
c000b580:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b586:	53                   	push   ebx
c000b587:	e8 0c 51 ff ff       	call   c0000698 <strlen>
c000b58c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b58f:	89 c5                	mov    ebp,eax
c000b591:	e8 02 51 ff ff       	call   c0000698 <strlen>
c000b596:	83 c4 10             	add    esp,0x10
c000b599:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b59d:	3d 80 00 00 00       	cmp    eax,0x80
c000b5a2:	76 10                	jbe    c000b5b4 <VgaText::receiveKey(unsigned char)+0xb8>
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	68 43 4d 02 c0       	push   0xc0024d43
c000b5ac:	e8 50 9a 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000b5b1:	83 c4 10             	add    esp,0x10
c000b5b4:	50                   	push   eax
c000b5b5:	50                   	push   eax
c000b5b6:	57                   	push   edi
c000b5b7:	53                   	push   ebx
c000b5b8:	e8 bb 52 ff ff       	call   c0000878 <strcat>
c000b5bd:	83 c4 0c             	add    esp,0xc
c000b5c0:	6a 30                	push   0x30
c000b5c2:	6a 00                	push   0x0
c000b5c4:	57                   	push   edi
c000b5c5:	e8 b2 50 ff ff       	call   c000067c <memset>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	56                   	push   esi
c000b5d1:	e8 72 fa ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b5d6:	83 c4 10             	add    esp,0x10
c000b5d9:	83 c4 1c             	add    esp,0x1c
c000b5dc:	5b                   	pop    ebx
c000b5dd:	5e                   	pop    esi
c000b5de:	5f                   	pop    edi
c000b5df:	5d                   	pop    ebp
c000b5e0:	c3                   	ret    
c000b5e1:	90                   	nop

c000b5e2 <VgaText::write(unsigned long long, void*, int*)>:
c000b5e2:	55                   	push   ebp
c000b5e3:	57                   	push   edi
c000b5e4:	56                   	push   esi
c000b5e5:	53                   	push   ebx
c000b5e6:	83 ec 0c             	sub    esp,0xc
c000b5e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5f5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b5fc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b5ff:	39 eb                	cmp    ebx,ebp
c000b601:	74 13                	je     c000b616 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b603:	43                   	inc    ebx
c000b604:	50                   	push   eax
c000b605:	50                   	push   eax
c000b606:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b60a:	50                   	push   eax
c000b60b:	56                   	push   esi
c000b60c:	e8 17 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b611:	83 c4 10             	add    esp,0x10
c000b614:	eb e9                	jmp    c000b5ff <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b616:	83 ec 0c             	sub    esp,0xc
c000b619:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b620:	56                   	push   esi
c000b621:	e8 22 fa ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b626:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b62a:	89 38                	mov    DWORD PTR [eax],edi
c000b62c:	83 c4 1c             	add    esp,0x1c
c000b62f:	31 c0                	xor    eax,eax
c000b631:	5b                   	pop    ebx
c000b632:	5e                   	pop    esi
c000b633:	5f                   	pop    edi
c000b634:	5d                   	pop    ebp
c000b635:	c3                   	ret    

c000b636 <newTerminal(char*)>:
c000b636:	83 ec 28             	sub    esp,0x28
c000b639:	68 b4 01 00 00       	push   0x1b4
c000b63e:	e8 10 e7 ff ff       	call   c0009d53 <malloc>
c000b643:	5a                   	pop    edx
c000b644:	59                   	pop    ecx
c000b645:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b649:	50                   	push   eax
c000b64a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b64e:	e8 2d fd ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c000b653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b657:	83 c4 2c             	add    esp,0x2c
c000b65a:	c3                   	ret    
c000b65b:	90                   	nop

c000b65c <TSS::TSS()>:
c000b65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b660:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b667:	90                   	nop
c000b668:	c3                   	ret    
c000b669:	90                   	nop
c000b66a:	66 90                	xchg   ax,ax

c000b66c <TSS::setESP(unsigned long)>:
c000b66c:	55                   	push   ebp
c000b66d:	89 e5                	mov    ebp,esp
c000b66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b672:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b675:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b678:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b67b:	90                   	nop
c000b67c:	5d                   	pop    ebp
c000b67d:	c3                   	ret    
c000b67e:	66 90                	xchg   ax,ax

c000b680 <TSS::flush()>:
c000b680:	55                   	push   ebp
c000b681:	89 e5                	mov    ebp,esp
c000b683:	83 ec 10             	sub    esp,0x10
c000b686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b689:	8b 00                	mov    eax,DWORD PTR [eax]
c000b68b:	83 c8 03             	or     eax,0x3
c000b68e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b692:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b696:	66 89 d0             	mov    ax,dx
c000b699:	0f 00 d8             	ltr    ax
c000b69c:	90                   	nop
c000b69d:	c9                   	leave  
c000b69e:	c3                   	ret    
c000b69f:	90                   	nop

c000b6a0 <TSS::setup(unsigned long, unsigned long)>:
c000b6a0:	55                   	push   ebp
c000b6a1:	89 e5                	mov    ebp,esp
c000b6a3:	83 ec 18             	sub    esp,0x18
c000b6a6:	83 ec 0c             	sub    esp,0xc
c000b6a9:	6a 68                	push   0x68
c000b6ab:	e8 a3 e6 ff ff       	call   c0009d53 <malloc>
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	89 c2                	mov    edx,eax
c000b6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c1:	83 ec 04             	sub    esp,0x4
c000b6c4:	6a 68                	push   0x68
c000b6c6:	6a 00                	push   0x0
c000b6c8:	50                   	push   eax
c000b6c9:	e8 ae 4f ff ff       	call   c000067c <memset>
c000b6ce:	83 c4 10             	add    esp,0x10
c000b6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6e3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b707:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b710:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b713:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b72b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b737:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b743:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b746:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b74c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b752:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b768:	0f 20 da             	mov    edx,cr3
c000b76b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b76e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b771:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b777:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b77a:	83 ec 08             	sub    esp,0x8
c000b77d:	50                   	push   eax
c000b77e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b781:	50                   	push   eax
c000b782:	e8 27 de ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	83 ec 08             	sub    esp,0x8
c000b78d:	6a 68                	push   0x68
c000b78f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b792:	50                   	push   eax
c000b793:	e8 32 de ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b79f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7a2:	83 e0 0f             	and    eax,0xf
c000b7a5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7a8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7ab:	83 c8 40             	or     eax,0x40
c000b7ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b1:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000b7b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7bc:	05 78 01 00 00       	add    eax,0x178
c000b7c1:	83 ec 04             	sub    esp,0x4
c000b7c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7ca:	50                   	push   eax
c000b7cb:	e8 2e de ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000b7d0:	83 c4 10             	add    esp,0x10
c000b7d3:	89 c2                	mov    edx,eax
c000b7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d8:	89 10                	mov    DWORD PTR [eax],edx
c000b7da:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000b7df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7e5:	05 78 01 00 00       	add    eax,0x178
c000b7ea:	83 ec 0c             	sub    esp,0xc
c000b7ed:	50                   	push   eax
c000b7ee:	e8 35 de ff ff       	call   c0009628 <GDT::flush()>
c000b7f3:	83 c4 10             	add    esp,0x10
c000b7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7fb:	c9                   	leave  
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b802:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b809:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b80e:	75 08                	jne    c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b810:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b816:	eb 38                	jmp    c000b850 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b818:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b81d:	75 17                	jne    c000b836 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b81f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b824:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b827:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b82d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b82f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b833:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b836:	89 c1                	mov    ecx,eax
c000b838:	83 e1 fd             	and    ecx,0xfffffffd
c000b83b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b841:	74 cd                	je     c000b810 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b843:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b848:	83 e0 ef             	and    eax,0xffffffef
c000b84b:	83 f8 08             	cmp    eax,0x8
c000b84e:	76 c0                	jbe    c000b810 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b850:	31 c0                	xor    eax,eax
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <ReservedFilename::isAtty()>:
c000b854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b858:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b85b:	31 c0                	xor    eax,eax
c000b85d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b863:	74 09                	je     c000b86e <ReservedFilename::isAtty()+0x1a>
c000b865:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b86b:	0f 94 c0             	sete   al
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b874:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b87b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b87f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b884:	75 08                	jne    c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b886:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b88c:	eb 3d                	jmp    c000b8cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b88e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b893:	75 17                	jne    c000b8ac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b895:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b89a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b89d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8a9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8b1:	75 04                	jne    c000b8b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8b3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8b5:	eb 14                	jmp    c000b8cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8b7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8bc:	74 c8                	je     c000b886 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8be:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8c3:	83 e0 ef             	and    eax,0xffffffef
c000b8c6:	83 f8 08             	cmp    eax,0x8
c000b8c9:	76 bb                	jbe    c000b886 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8cb:	31 c0                	xor    eax,eax
c000b8cd:	c3                   	ret    

c000b8ce <UnixFile::getFileDescriptor()>:
c000b8ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8d5:	c3                   	ret    

c000b8d6 <UnixFile::UnixFile(int)>:
c000b8d6:	53                   	push   ebx
c000b8d7:	83 ec 28             	sub    esp,0x28
c000b8da:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c000b8df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e3:	89 10                	mov    DWORD PTR [eax],edx
c000b8e5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8ed:	0f 8f 8c 01 00 00    	jg     c000ba7f <UnixFile::UnixFile(int)+0x1a9>
c000b8f3:	a1 e0 80 02 c0       	mov    eax,ds:0xc00280e0
c000b8f8:	8d 50 01             	lea    edx,[eax+0x1]
c000b8fb:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000b901:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b905:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b908:	83 ec 08             	sub    esp,0x8
c000b90b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b90f:	68 b8 8d 02 c0       	push   0xc0028db8
c000b914:	e8 17 7a 01 00       	call   c0023330 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b919:	83 c4 10             	add    esp,0x10
c000b91c:	a0 b4 8d 02 c0       	mov    al,ds:0xc0028db4
c000b921:	83 f0 01             	xor    eax,0x1
c000b924:	84 c0                	test   al,al
c000b926:	0f 84 54 01 00 00    	je     c000ba80 <UnixFile::UnixFile(int)+0x1aa>
c000b92c:	c6 05 b4 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028db4,0x1
c000b933:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b93b:	83 ec 0c             	sub    esp,0xc
c000b93e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b942:	e8 0c e4 ff ff       	call   c0009d53 <malloc>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	89 c3                	mov    ebx,eax
c000b94c:	83 ec 08             	sub    esp,0x8
c000b94f:	68 03 ff ff 0f       	push   0xfffff03
c000b954:	53                   	push   ebx
c000b955:	e8 2c 01 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	89 1d ac 8d 02 c0    	mov    DWORD PTR ds:0xc0028dac,ebx
c000b963:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b96b:	83 ec 0c             	sub    esp,0xc
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	e8 dc e3 ff ff       	call   c0009d53 <malloc>
c000b977:	83 c4 10             	add    esp,0x10
c000b97a:	89 c3                	mov    ebx,eax
c000b97c:	83 ec 08             	sub    esp,0x8
c000b97f:	68 01 ff ff 0f       	push   0xfffff01
c000b984:	53                   	push   ebx
c000b985:	e8 fc 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b98a:	83 c4 10             	add    esp,0x10
c000b98d:	89 1d b0 8d 02 c0    	mov    DWORD PTR ds:0xc0028db0,ebx
c000b993:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b99b:	83 ec 0c             	sub    esp,0xc
c000b99e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9a2:	e8 ac e3 ff ff       	call   c0009d53 <malloc>
c000b9a7:	83 c4 10             	add    esp,0x10
c000b9aa:	89 c3                	mov    ebx,eax
c000b9ac:	83 ec 08             	sub    esp,0x8
c000b9af:	68 00 ff ff 0f       	push   0xfffff00
c000b9b4:	53                   	push   ebx
c000b9b5:	e8 cc 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b9ba:	83 c4 10             	add    esp,0x10
c000b9bd:	89 1d a4 8d 02 c0    	mov    DWORD PTR ds:0xc0028da4,ebx
c000b9c3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9cb:	83 ec 0c             	sub    esp,0xc
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 7c e3 ff ff       	call   c0009d53 <malloc>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 c3                	mov    ebx,eax
c000b9dc:	83 ec 08             	sub    esp,0x8
c000b9df:	68 02 ff ff 0f       	push   0xfffff02
c000b9e4:	53                   	push   ebx
c000b9e5:	e8 9c 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	89 1d a8 8d 02 c0    	mov    DWORD PTR ds:0xc0028da8,ebx
c000b9f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b9fb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba00:	7f 7e                	jg     c000ba80 <UnixFile::UnixFile(int)+0x1aa>
c000ba02:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba11:	e8 3d e3 ff ff       	call   c0009d53 <malloc>
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	89 c3                	mov    ebx,eax
c000ba1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba1f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba24:	83 ec 08             	sub    esp,0x8
c000ba27:	50                   	push   eax
c000ba28:	53                   	push   ebx
c000ba29:	e8 58 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba35:	89 1c 85 80 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7280],ebx
c000ba3c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba44:	83 ec 0c             	sub    esp,0xc
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	e8 03 e3 ff ff       	call   c0009d53 <malloc>
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	89 c3                	mov    ebx,eax
c000ba55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba59:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba5e:	83 ec 08             	sub    esp,0x8
c000ba61:	50                   	push   eax
c000ba62:	53                   	push   ebx
c000ba63:	e8 1e 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000ba68:	83 c4 10             	add    esp,0x10
c000ba6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba6f:	89 1c 85 40 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd72c0],ebx
c000ba76:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba7a:	e9 7c ff ff ff       	jmp    c000b9fb <UnixFile::UnixFile(int)+0x125>
c000ba7f:	90                   	nop
c000ba80:	83 c4 28             	add    esp,0x28
c000ba83:	5b                   	pop    ebx
c000ba84:	c3                   	ret    
c000ba85:	90                   	nop

c000ba86 <ReservedFilename::ReservedFilename(int)>:
c000ba86:	83 ec 0c             	sub    esp,0xc
c000ba89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8d:	83 ec 08             	sub    esp,0x8
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	50                   	push   eax
c000ba95:	e8 3c fe ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	ba 7c 4e 02 c0       	mov    edx,0xc0024e7c
c000baa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baa6:	89 10                	mov    DWORD PTR [eax],edx
c000baa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bab3:	90                   	nop
c000bab4:	83 c4 0c             	add    esp,0xc
c000bab7:	c3                   	ret    

c000bab8 <UnixFile::~UnixFile()>:
c000bab8:	83 ec 1c             	sub    esp,0x1c
c000babb:	ba 60 4e 02 c0       	mov    edx,0xc0024e60
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bacd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bad2:	7f 73                	jg     c000bb47 <UnixFile::~UnixFile()+0x8f>
c000bad4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000badc:	83 ec 0c             	sub    esp,0xc
c000badf:	68 b8 8d 02 c0       	push   0xc0028db8
c000bae4:	e8 1b 79 01 00       	call   c0023404 <LinkedList<UnixFile>::getFirstElement()>
c000bae9:	83 c4 10             	add    esp,0x10
c000baec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf0:	83 ec 0c             	sub    esp,0xc
c000baf3:	68 b8 8d 02 c0       	push   0xc0028db8
c000baf8:	e8 0f 79 01 00       	call   c002340c <LinkedList<UnixFile>::removeFirst()>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb04:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb08:	74 40                	je     c000bb4a <UnixFile::~UnixFile()+0x92>
c000bb0a:	83 ec 08             	sub    esp,0x8
c000bb0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb11:	68 b8 8d 02 c0       	push   0xc0028db8
c000bb16:	e8 15 78 01 00       	call   c0023330 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb1b:	83 c4 10             	add    esp,0x10
c000bb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb22:	8d 50 01             	lea    edx,[eax+0x1]
c000bb25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb29:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb2e:	0f 94 c0             	sete   al
c000bb31:	84 c0                	test   al,al
c000bb33:	74 a7                	je     c000badc <UnixFile::~UnixFile()+0x24>
c000bb35:	83 ec 0c             	sub    esp,0xc
c000bb38:	68 38 4e 02 c0       	push   0xc0024e38
c000bb3d:	e8 bf 94 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	eb 95                	jmp    c000badc <UnixFile::~UnixFile()+0x24>
c000bb47:	90                   	nop
c000bb48:	eb 01                	jmp    c000bb4b <UnixFile::~UnixFile()+0x93>
c000bb4a:	90                   	nop
c000bb4b:	90                   	nop
c000bb4c:	83 c4 1c             	add    esp,0x1c
c000bb4f:	c3                   	ret    

c000bb50 <UnixFile::~UnixFile()>:
c000bb50:	83 ec 0c             	sub    esp,0xc
c000bb53:	83 ec 0c             	sub    esp,0xc
c000bb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5a:	e8 59 ff ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	83 ec 08             	sub    esp,0x8
c000bb65:	6a 0c                	push   0xc
c000bb67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb6b:	e8 ee 13 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	83 c4 0c             	add    esp,0xc
c000bb76:	c3                   	ret    
c000bb77:	90                   	nop

c000bb78 <ReservedFilename::~ReservedFilename()>:
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	ba 7c 4e 02 c0       	mov    edx,0xc0024e7c
c000bb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb84:	89 10                	mov    DWORD PTR [eax],edx
c000bb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8a:	83 ec 0c             	sub    esp,0xc
c000bb8d:	50                   	push   eax
c000bb8e:	e8 25 ff ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	90                   	nop
c000bb97:	83 c4 0c             	add    esp,0xc
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <ReservedFilename::~ReservedFilename()>:
c000bb9c:	83 ec 0c             	sub    esp,0xc
c000bb9f:	83 ec 0c             	sub    esp,0xc
c000bba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba6:	e8 cd ff ff ff       	call   c000bb78 <ReservedFilename::~ReservedFilename()>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	83 ec 08             	sub    esp,0x8
c000bbb1:	6a 0c                	push   0xc
c000bbb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb7:	e8 a2 13 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000bbbc:	83 c4 10             	add    esp,0x10
c000bbbf:	83 c4 0c             	add    esp,0xc
c000bbc2:	c3                   	ret    

c000bbc3 <getFromFileDescriptor(int)>:
c000bbc3:	53                   	push   ebx
c000bbc4:	83 ec 08             	sub    esp,0x8
c000bbc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbcb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbd1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbd7:	7f 2c                	jg     c000bc05 <getFromFileDescriptor(int)+0x42>
c000bbd9:	83 ec 0c             	sub    esp,0xc
c000bbdc:	68 b8 8d 02 c0       	push   0xc0028db8
c000bbe1:	e8 1e 78 01 00       	call   c0023404 <LinkedList<UnixFile>::getFirstElement()>
c000bbe6:	83 c4 10             	add    esp,0x10
c000bbe9:	85 c0                	test   eax,eax
c000bbeb:	75 04                	jne    c000bbf1 <getFromFileDescriptor(int)+0x2e>
c000bbed:	31 c0                	xor    eax,eax
c000bbef:	eb 6e                	jmp    c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bbf1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbf4:	74 69                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bbf6:	52                   	push   edx
c000bbf7:	52                   	push   edx
c000bbf8:	50                   	push   eax
c000bbf9:	68 b8 8d 02 c0       	push   0xc0028db8
c000bbfe:	e8 ab 78 01 00       	call   c00234ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc03:	eb e1                	jmp    c000bbe6 <getFromFileDescriptor(int)+0x23>
c000bc05:	a1 ac 8d 02 c0       	mov    eax,ds:0xc0028dac
c000bc0a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc10:	74 4d                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc12:	a1 b0 8d 02 c0       	mov    eax,ds:0xc0028db0
c000bc17:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc1d:	74 40                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc1f:	a1 a8 8d 02 c0       	mov    eax,ds:0xc0028da8
c000bc24:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc2a:	74 33                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc2c:	a1 a4 8d 02 c0       	mov    eax,ds:0xc0028da4
c000bc31:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc37:	74 26                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc39:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc3f:	83 f8 08             	cmp    eax,0x8
c000bc42:	77 09                	ja     c000bc4d <getFromFileDescriptor(int)+0x8a>
c000bc44:	8b 04 85 80 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7280]
c000bc4b:	eb 12                	jmp    c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc4d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc53:	83 fb 08             	cmp    ebx,0x8
c000bc56:	77 95                	ja     c000bbed <getFromFileDescriptor(int)+0x2a>
c000bc58:	8b 04 9d 40 8d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd72c0]
c000bc5f:	83 c4 08             	add    esp,0x8
c000bc62:	5b                   	pop    ebx
c000bc63:	c3                   	ret    

c000bc64 <__static_initialization_and_destruction_0(int, int)>:
c000bc64:	83 ec 0c             	sub    esp,0xc
c000bc67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc6c:	75 34                	jne    c000bca2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc76:	75 2a                	jne    c000bca2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	68 b8 8d 02 c0       	push   0xc0028db8
c000bc80:	e8 69 76 01 00       	call   c00232ee <LinkedList<UnixFile>::LinkedList()>
c000bc85:	83 c4 10             	add    esp,0x10
c000bc88:	83 ec 04             	sub    esp,0x4
c000bc8b:	68 0c 7f 02 c0       	push   0xc0027f0c
c000bc90:	68 b8 8d 02 c0       	push   0xc0028db8
c000bc95:	68 ec 32 02 c0       	push   0xc00232ec
c000bc9a:	e8 39 12 00 00       	call   c000ced8 <__cxa_atexit>
c000bc9f:	83 c4 10             	add    esp,0x10
c000bca2:	90                   	nop
c000bca3:	83 c4 0c             	add    esp,0xc
c000bca6:	c3                   	ret    

c000bca7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bca7:	83 ec 0c             	sub    esp,0xc
c000bcaa:	83 ec 08             	sub    esp,0x8
c000bcad:	68 ff ff 00 00       	push   0xffff
c000bcb2:	6a 01                	push   0x1
c000bcb4:	e8 ab ff ff ff       	call   c000bc64 <__static_initialization_and_destruction_0(int, int)>
c000bcb9:	83 c4 10             	add    esp,0x10
c000bcbc:	83 c4 0c             	add    esp,0xc
c000bcbf:	c3                   	ret    

c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bcc0:	53                   	push   ebx
c000bcc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcc5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bccf:	89 c8                	mov    eax,ecx
c000bcd1:	d1 e8                	shr    eax,1
c000bcd3:	03 05 e8 80 02 c0    	add    eax,DWORD PTR ds:0xc00280e8
c000bcd9:	83 e1 01             	and    ecx,0x1
c000bcdc:	8a 10                	mov    dl,BYTE PTR [eax]
c000bcde:	75 09                	jne    c000bce9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bce0:	83 e2 f0             	and    edx,0xfffffff0
c000bce3:	09 da                	or     edx,ebx
c000bce5:	88 10                	mov    BYTE PTR [eax],dl
c000bce7:	5b                   	pop    ebx
c000bce8:	c3                   	ret    
c000bce9:	c1 e3 04             	shl    ebx,0x4
c000bcec:	83 e2 0f             	and    edx,0xf
c000bcef:	09 da                	or     edx,ebx
c000bcf1:	88 10                	mov    BYTE PTR [eax],dl
c000bcf3:	5b                   	pop    ebx
c000bcf4:	c3                   	ret    

c000bcf5 <Virt::getPageState(unsigned long)>:
c000bcf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcf9:	8b 0d e8 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280e8
c000bcff:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd05:	89 d0                	mov    eax,edx
c000bd07:	d1 e8                	shr    eax,1
c000bd09:	83 e2 01             	and    edx,0x1
c000bd0c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd0f:	75 04                	jne    c000bd15 <Virt::getPageState(unsigned long)+0x20>
c000bd11:	83 e0 0f             	and    eax,0xf
c000bd14:	c3                   	ret    
c000bd15:	c0 e8 04             	shr    al,0x4
c000bd18:	c3                   	ret    

c000bd19 <Virt::allocateKernelVirtualPages(int)>:
c000bd19:	55                   	push   ebp
c000bd1a:	31 ed                	xor    ebp,ebp
c000bd1c:	57                   	push   edi
c000bd1d:	56                   	push   esi
c000bd1e:	53                   	push   ebx
c000bd1f:	31 db                	xor    ebx,ebx
c000bd21:	83 ec 1c             	sub    esp,0x1c
c000bd24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd28:	8b 3d e4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280e4
c000bd2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd33:	57                   	push   edi
c000bd34:	e8 bc ff ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000bd39:	5a                   	pop    edx
c000bd3a:	84 c0                	test   al,al
c000bd3c:	75 3a                	jne    c000bd78 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd3e:	85 db                	test   ebx,ebx
c000bd40:	75 02                	jne    c000bd44 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd42:	89 fd                	mov    ebp,edi
c000bd44:	43                   	inc    ebx
c000bd45:	39 f3                	cmp    ebx,esi
c000bd47:	74 5a                	je     c000bda3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd49:	47                   	inc    edi
c000bd4a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd50:	76 31                	jbe    c000bd83 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd52:	c7 05 e4 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00280e4,0xc8000
c000bd5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd61:	75 28                	jne    c000bd8b <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd63:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd68:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd6d:	57                   	push   edi
c000bd6e:	e8 82 ff ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000bd73:	5a                   	pop    edx
c000bd74:	84 c0                	test   al,al
c000bd76:	74 c6                	je     c000bd3e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd78:	31 db                	xor    ebx,ebx
c000bd7a:	47                   	inc    edi
c000bd7b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd81:	77 cf                	ja     c000bd52 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd83:	89 3d e4 80 02 c0    	mov    DWORD PTR ds:0xc00280e4,edi
c000bd89:	eb a8                	jmp    c000bd33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd8b:	83 ec 0c             	sub    esp,0xc
c000bd8e:	68 90 4e 02 c0       	push   0xc0024e90
c000bd93:	e8 69 92 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000bd98:	8b 3d e4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280e4
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	eb 90                	jmp    c000bd33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bda3:	89 2d e4 80 02 c0    	mov    DWORD PTR ds:0xc00280e4,ebp
c000bda9:	4b                   	dec    ebx
c000bdaa:	74 5f                	je     c000be0b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdac:	85 f6                	test   esi,esi
c000bdae:	74 3d                	je     c000bded <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdb0:	89 e8                	mov    eax,ebp
c000bdb2:	31 db                	xor    ebx,ebx
c000bdb4:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdb7:	eb 14                	jmp    c000bdcd <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdb9:	6a 01                	push   0x1
c000bdbb:	43                   	inc    ebx
c000bdbc:	50                   	push   eax
c000bdbd:	e8 fe fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdc2:	58                   	pop    eax
c000bdc3:	39 f3                	cmp    ebx,esi
c000bdc5:	5a                   	pop    edx
c000bdc6:	74 25                	je     c000bded <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdc8:	a1 e4 80 02 c0       	mov    eax,ds:0xc00280e4
c000bdcd:	8d 50 01             	lea    edx,[eax+0x1]
c000bdd0:	85 db                	test   ebx,ebx
c000bdd2:	89 15 e4 80 02 c0    	mov    DWORD PTR ds:0xc00280e4,edx
c000bdd8:	74 20                	je     c000bdfa <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bdda:	39 df                	cmp    edi,ebx
c000bddc:	75 db                	jne    c000bdb9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bdde:	6a 03                	push   0x3
c000bde0:	43                   	inc    ebx
c000bde1:	50                   	push   eax
c000bde2:	e8 d9 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bde7:	59                   	pop    ecx
c000bde8:	39 f3                	cmp    ebx,esi
c000bdea:	58                   	pop    eax
c000bdeb:	75 db                	jne    c000bdc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bded:	83 c4 1c             	add    esp,0x1c
c000bdf0:	89 e8                	mov    eax,ebp
c000bdf2:	5b                   	pop    ebx
c000bdf3:	c1 e0 0c             	shl    eax,0xc
c000bdf6:	5e                   	pop    esi
c000bdf7:	5f                   	pop    edi
c000bdf8:	5d                   	pop    ebp
c000bdf9:	c3                   	ret    
c000bdfa:	6a 02                	push   0x2
c000bdfc:	bb 01 00 00 00       	mov    ebx,0x1
c000be01:	50                   	push   eax
c000be02:	e8 b9 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be07:	58                   	pop    eax
c000be08:	5a                   	pop    edx
c000be09:	eb bd                	jmp    c000bdc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be0b:	6a 04                	push   0x4
c000be0d:	8d 45 01             	lea    eax,[ebp+0x1]
c000be10:	55                   	push   ebp
c000be11:	a3 e4 80 02 c0       	mov    ds:0xc00280e4,eax
c000be16:	e8 a5 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be1b:	59                   	pop    ecx
c000be1c:	89 e8                	mov    eax,ebp
c000be1e:	5b                   	pop    ebx
c000be1f:	c1 e0 0c             	shl    eax,0xc
c000be22:	83 c4 1c             	add    esp,0x1c
c000be25:	5b                   	pop    ebx
c000be26:	5e                   	pop    esi
c000be27:	5f                   	pop    edi
c000be28:	5d                   	pop    ebp
c000be29:	c3                   	ret    

c000be2a <Virt::freeSwapfilePage(unsigned long)>:
c000be2a:	53                   	push   ebx
c000be2b:	8b 15 cc 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028dcc
c000be31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be35:	b8 01 00 00 00       	mov    eax,0x1
c000be3a:	89 cb                	mov    ebx,ecx
c000be3c:	d3 e0                	shl    eax,cl
c000be3e:	c1 eb 05             	shr    ebx,0x5
c000be41:	f7 d0                	not    eax
c000be43:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be46:	5b                   	pop    ebx
c000be47:	c3                   	ret    

c000be48 <Virt::swapIDToSector(unsigned long)>:
c000be48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be4c:	0f af 05 ec 80 02 c0 	imul   eax,DWORD PTR ds:0xc00280ec
c000be53:	03 05 f4 80 02 c0    	add    eax,DWORD PTR ds:0xc00280f4
c000be59:	c3                   	ret    

c000be5a <Virt::allocateSwapfilePage()>:
c000be5a:	55                   	push   ebp
c000be5b:	31 d2                	xor    edx,edx
c000be5d:	57                   	push   edi
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 0d ec 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280ec
c000be69:	a1 f0 80 02 c0       	mov    eax,ds:0xc00280f0
c000be6e:	f7 f1                	div    ecx
c000be70:	39 0d f0 80 02 c0    	cmp    DWORD PTR ds:0xc00280f0,ecx
c000be76:	72 2d                	jb     c000bea5 <Virt::allocateSwapfilePage()+0x4b>
c000be78:	8b 35 cc 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028dcc
c000be7e:	8b 16                	mov    edx,DWORD PTR [esi]
c000be80:	f6 c2 01             	test   dl,0x1
c000be83:	74 3c                	je     c000bec1 <Virt::allocateSwapfilePage()+0x67>
c000be85:	31 c9                	xor    ecx,ecx
c000be87:	bf 01 00 00 00       	mov    edi,0x1
c000be8c:	eb 12                	jmp    c000bea0 <Virt::allocateSwapfilePage()+0x46>
c000be8e:	89 fd                	mov    ebp,edi
c000be90:	89 ca                	mov    edx,ecx
c000be92:	d3 e5                	shl    ebp,cl
c000be94:	c1 ea 05             	shr    edx,0x5
c000be97:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000be9a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be9c:	85 ea                	test   edx,ebp
c000be9e:	74 2a                	je     c000beca <Virt::allocateSwapfilePage()+0x70>
c000bea0:	41                   	inc    ecx
c000bea1:	39 c8                	cmp    eax,ecx
c000bea3:	77 e9                	ja     c000be8e <Virt::allocateSwapfilePage()+0x34>
c000bea5:	83 ec 0c             	sub    esp,0xc
c000bea8:	68 48 50 02 c0       	push   0xc0025048
c000bead:	e8 4f 91 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	31 c9                	xor    ecx,ecx
c000beb7:	83 c4 0c             	add    esp,0xc
c000beba:	89 c8                	mov    eax,ecx
c000bebc:	5b                   	pop    ebx
c000bebd:	5e                   	pop    esi
c000bebe:	5f                   	pop    edi
c000bebf:	5d                   	pop    ebp
c000bec0:	c3                   	ret    
c000bec1:	89 f3                	mov    ebx,esi
c000bec3:	bd 01 00 00 00       	mov    ebp,0x1
c000bec8:	31 c9                	xor    ecx,ecx
c000beca:	09 ea                	or     edx,ebp
c000becc:	89 c8                	mov    eax,ecx
c000bece:	89 13                	mov    DWORD PTR [ebx],edx
c000bed0:	83 c4 0c             	add    esp,0xc
c000bed3:	5b                   	pop    ebx
c000bed4:	5e                   	pop    esi
c000bed5:	5f                   	pop    edi
c000bed6:	5d                   	pop    ebp
c000bed7:	c3                   	ret    

c000bed8 <Virt::virtualMemorySetup()>:
c000bed8:	53                   	push   ebx
c000bed9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bede:	6a 0f                	push   0xf
c000bee0:	53                   	push   ebx
c000bee1:	43                   	inc    ebx
c000bee2:	e8 d9 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bee7:	58                   	pop    eax
c000bee8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000beee:	5a                   	pop    edx
c000beef:	75 ed                	jne    c000bede <Virt::virtualMemorySetup()+0x6>
c000bef1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bef6:	6a 00                	push   0x0
c000bef8:	53                   	push   ebx
c000bef9:	43                   	inc    ebx
c000befa:	e8 c1 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beff:	59                   	pop    ecx
c000bf00:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf06:	58                   	pop    eax
c000bf07:	75 ed                	jne    c000bef6 <Virt::virtualMemorySetup()+0x1e>
c000bf09:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf0e:	6a 0f                	push   0xf
c000bf10:	53                   	push   ebx
c000bf11:	43                   	inc    ebx
c000bf12:	e8 a9 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf17:	58                   	pop    eax
c000bf18:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf1e:	5a                   	pop    edx
c000bf1f:	75 ed                	jne    c000bf0e <Virt::virtualMemorySetup()+0x36>
c000bf21:	5b                   	pop    ebx
c000bf22:	c3                   	ret    

c000bf23 <Virt::setupPageSwapping(int)>:
c000bf23:	53                   	push   ebx
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf2b:	a1 68 92 02 c0       	mov    eax,ds:0xc0029268
c000bf30:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf36:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf38:	53                   	push   ebx
c000bf39:	c1 e3 0b             	shl    ebx,0xb
c000bf3c:	68 5f 50 02 c0       	push   0xc002505f
c000bf41:	50                   	push   eax
c000bf42:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf45:	89 1d f0 80 02 c0    	mov    DWORD PTR ds:0xc00280f0,ebx
c000bf4b:	c6 05 f8 80 02 c0 43 	mov    BYTE PTR ds:0xc00280f8,0x43
c000bf52:	c1 eb 08             	shr    ebx,0x8
c000bf55:	a3 f4 80 02 c0       	mov    ds:0xc00280f4,eax
c000bf5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf5d:	c7 05 ec 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00280ec,0x8
c000bf67:	e8 e7 dd ff ff       	call   c0009d53 <malloc>
c000bf6c:	83 c4 0c             	add    esp,0xc
c000bf6f:	89 c1                	mov    ecx,eax
c000bf71:	a3 cc 8d 02 c0       	mov    ds:0xc0028dcc,eax
c000bf76:	31 d2                	xor    edx,edx
c000bf78:	a1 f0 80 02 c0       	mov    eax,ds:0xc00280f0
c000bf7d:	f7 35 ec 80 02 c0    	div    DWORD PTR ds:0xc00280ec
c000bf83:	c1 e8 05             	shr    eax,0x5
c000bf86:	50                   	push   eax
c000bf87:	6a 00                	push   0x0
c000bf89:	51                   	push   ecx
c000bf8a:	e8 ed 46 ff ff       	call   c000067c <memset>
c000bf8f:	83 c4 18             	add    esp,0x18
c000bf92:	5b                   	pop    ebx
c000bf93:	c3                   	ret    

c000bf94 <VAS::VAS()>:
c000bf94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfae:	a3 d0 8d 02 c0       	mov    ds:0xc0028dd0,eax
c000bfb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfbf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfcd:	90                   	nop
c000bfce:	c3                   	ret    
c000bfcf:	90                   	nop

c000bfd0 <VAS::VAS(VAS*)>:
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	68 b0 4e 02 c0       	push   0xc0024eb0
c000bff1:	e8 0b 90 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000bff6:	83 c4 10             	add    esp,0x10
c000bff9:	90                   	nop
c000bffa:	83 c4 0c             	add    esp,0xc
c000bffd:	c3                   	ret    

c000bffe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c002:	89 c2                	mov    edx,eax
c000c004:	c1 e8 0a             	shr    eax,0xa
c000c007:	c1 ea 16             	shr    edx,0x16
c000c00a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c00f:	19 c9                	sbb    ecx,ecx
c000c011:	c1 e2 0c             	shl    edx,0xc
c000c014:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c01a:	25 fc 0f 00 00       	and    eax,0xffc
c000c01f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c026:	01 d0                	add    eax,edx
c000c028:	c3                   	ret    
c000c029:	90                   	nop

c000c02a <VAS::getPageTableEntry(unsigned long)>:
c000c02a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c02e:	89 ca                	mov    edx,ecx
c000c030:	c1 e9 0a             	shr    ecx,0xa
c000c033:	c1 ea 16             	shr    edx,0x16
c000c036:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c03c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c042:	c1 e0 0c             	shl    eax,0xc
c000c045:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c048:	c3                   	ret    

c000c049 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c049:	57                   	push   edi
c000c04a:	56                   	push   esi
c000c04b:	be 01 00 00 00       	mov    esi,0x1
c000c050:	53                   	push   ebx
c000c051:	83 ec 10             	sub    esp,0x10
c000c054:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c058:	c1 eb 0c             	shr    ebx,0xc
c000c05b:	eb 3f                	jmp    c000c09c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c05d:	83 ec 08             	sub    esp,0x8
c000c060:	57                   	push   edi
c000c061:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c000c067:	e8 be ff ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c06c:	83 c4 10             	add    esp,0x10
c000c06f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c071:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c075:	f6 c4 04             	test   ah,0x4
c000c078:	75 5f                	jne    c000c0d9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c07a:	80 fa 04             	cmp    dl,0x4
c000c07d:	74 78                	je     c000c0f7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c07f:	80 fa 02             	cmp    dl,0x2
c000c082:	0f 84 88 00 00 00    	je     c000c110 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c088:	80 fa 03             	cmp    dl,0x3
c000c08b:	0f 84 ad 00 00 00    	je     c000c13e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c091:	fe ca                	dec    dl
c000c093:	0f 84 92 00 00 00    	je     c000c12b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c099:	43                   	inc    ebx
c000c09a:	31 f6                	xor    esi,esi
c000c09c:	53                   	push   ebx
c000c09d:	89 df                	mov    edi,ebx
c000c09f:	e8 51 fc ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000c0a4:	c1 e7 0c             	shl    edi,0xc
c000c0a7:	59                   	pop    ecx
c000c0a8:	84 c0                	test   al,al
c000c0aa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0ae:	75 ad                	jne    c000c05d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	68 76 50 02 c0       	push   0xc0025076
c000c0b8:	e8 44 8f 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000c0bd:	58                   	pop    eax
c000c0be:	5a                   	pop    edx
c000c0bf:	57                   	push   edi
c000c0c0:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c000c0c6:	e8 5f ff ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0d0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0d4:	f6 c4 04             	test   ah,0x4
c000c0d7:	74 c0                	je     c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0d9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	50                   	push   eax
c000c0e6:	e8 9c e2 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0f2:	80 fa 04             	cmp    dl,0x4
c000c0f5:	75 88                	jne    c000c07f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c0f7:	89 f0                	mov    eax,esi
c000c0f9:	84 c0                	test   al,al
c000c0fb:	75 47                	jne    c000c144 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c0fd:	c7 44 24 20 d4 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024ed4
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	5b                   	pop    ebx
c000c109:	5e                   	pop    esi
c000c10a:	5f                   	pop    edi
c000c10b:	e9 f1 8e 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c000c110:	89 f0                	mov    eax,esi
c000c112:	84 c0                	test   al,al
c000c114:	75 15                	jne    c000c12b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c116:	83 ec 0c             	sub    esp,0xc
c000c119:	68 92 50 02 c0       	push   0xc0025092
c000c11e:	e8 de 8e 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000c123:	83 c4 10             	add    esp,0x10
c000c126:	e9 6e ff ff ff       	jmp    c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c12b:	83 ec 08             	sub    esp,0x8
c000c12e:	6a 00                	push   0x0
c000c130:	53                   	push   ebx
c000c131:	e8 8a fb ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	e9 5b ff ff ff       	jmp    c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c13e:	89 f0                	mov    eax,esi
c000c140:	84 c0                	test   al,al
c000c142:	75 15                	jne    c000c159 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 00                	push   0x0
c000c149:	53                   	push   ebx
c000c14a:	e8 71 fb ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	83 c4 10             	add    esp,0x10
c000c155:	5b                   	pop    ebx
c000c156:	5e                   	pop    esi
c000c157:	5f                   	pop    edi
c000c158:	c3                   	ret    
c000c159:	c7 44 24 20 ae 50 02 c0 	mov    DWORD PTR [esp+0x20],0xc00250ae
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	5b                   	pop    ebx
c000c165:	5e                   	pop    esi
c000c166:	5f                   	pop    edi
c000c167:	e9 95 8e 00 00       	jmp    c0015001 <Krnl::panic(char const*)>

c000c16c <VAS::freeAllocatedPages(unsigned long)>:
c000c16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c170:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c174:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c178:	74 09                	je     c000c183 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c17a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c17e:	e9 c6 fe ff ff       	jmp    c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c183:	c7 44 24 04 f8 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024ef8
c000c18b:	e9 af 0e 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>

c000c190 <VAS::virtualToPhysical(unsigned long)>:
c000c190:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c194:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c198:	e8 8d fe ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c19d:	5a                   	pop    edx
c000c19e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1a0:	59                   	pop    ecx
c000c1a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1a8:	55                   	push   ebp
c000c1a9:	57                   	push   edi
c000c1aa:	56                   	push   esi
c000c1ab:	53                   	push   ebx
c000c1ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1bc:	85 db                	test   ebx,ebx
c000c1be:	7e 22                	jle    c000c1e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1c0:	c1 e3 0c             	shl    ebx,0xc
c000c1c3:	01 f3                	add    ebx,esi
c000c1c5:	56                   	push   esi
c000c1c6:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1cc:	55                   	push   ebp
c000c1cd:	e8 58 fe ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c1d2:	5a                   	pop    edx
c000c1d3:	59                   	pop    ecx
c000c1d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1d6:	21 f9                	and    ecx,edi
c000c1d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1dc:	39 f3                	cmp    ebx,esi
c000c1de:	89 08                	mov    DWORD PTR [eax],ecx
c000c1e0:	75 e3                	jne    c000c1c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c1e2:	5b                   	pop    ebx
c000c1e3:	5e                   	pop    esi
c000c1e4:	5f                   	pop    edi
c000c1e5:	5d                   	pop    ebp
c000c1e6:	c3                   	ret    
c000c1e7:	90                   	nop

c000c1e8 <VAS::setToWriteCombining(unsigned long, int)>:
c000c1e8:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c1ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c1f3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c1fa:	75 01                	jne    c000c1fd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c1fc:	c3                   	ret    
c000c1fd:	68 80 00 00 00       	push   0x80
c000c202:	6a ff                	push   0xffffffff
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 93 ff ff ff       	call   c000c1a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000c215:	83 c4 14             	add    esp,0x14
c000c218:	c3                   	ret    
c000c219:	90                   	nop

c000c21a <VAS::mapOtherVASIn(bool, VAS*)>:
c000c21a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c223:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c22a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c22d:	19 c0                	sbb    eax,eax
c000c22f:	83 ca 03             	or     edx,0x3
c000c232:	83 e0 fc             	and    eax,0xfffffffc
c000c235:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c23c:	0f 20 d8             	mov    eax,cr3
c000c23f:	0f 22 d8             	mov    cr3,eax
c000c242:	c3                   	ret    
c000c243:	90                   	nop

c000c244 <VAS::~VAS()>:
c000c244:	83 ec 2c             	sub    esp,0x2c
c000c247:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c24f:	fa                   	cli    
c000c250:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000c255:	40                   	inc    eax
c000c256:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000c25b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c260:	8b 00                	mov    eax,DWORD PTR [eax]
c000c262:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c265:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c26b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c26f:	6a 01                	push   0x1
c000c271:	50                   	push   eax
c000c272:	e8 a3 ff ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c000c277:	83 c4 0c             	add    esp,0xc
c000c27a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c282:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c28a:	0f 8f d4 00 00 00    	jg     c000c364 <VAS::~VAS()+0x120>
c000c290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c294:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c29b:	c1 e2 02             	shl    edx,0x2
c000c29e:	01 d0                	add    eax,edx
c000c2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2aa:	83 e0 01             	and    eax,0x1
c000c2ad:	0f 84 a8 00 00 00    	je     c000c35b <VAS::~VAS()+0x117>
c000c2b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2bb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2c3:	7f 72                	jg     c000c337 <VAS::~VAS()+0xf3>
c000c2c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2c9:	c1 e0 0a             	shl    eax,0xa
c000c2cc:	89 c2                	mov    edx,eax
c000c2ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2d2:	01 d0                	add    eax,edx
c000c2d4:	c1 e0 0c             	shl    eax,0xc
c000c2d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2db:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2e5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ef:	6a 01                	push   0x1
c000c2f1:	50                   	push   eax
c000c2f2:	e8 07 fd ff ff       	call   c000bffe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c302:	8b 00                	mov    eax,DWORD PTR [eax]
c000c304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c30c:	25 01 04 00 00       	and    eax,0x401
c000c311:	3d 01 04 00 00       	cmp    eax,0x401
c000c316:	75 19                	jne    c000c331 <VAS::~VAS()+0xed>
c000c318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c31c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	50                   	push   eax
c000c325:	e8 5d e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c331:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c335:	eb 84                	jmp    c000c2bb <VAS::~VAS()+0x77>
c000c337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33b:	25 00 04 00 00       	and    eax,0x400
c000c340:	74 19                	je     c000c35b <VAS::~VAS()+0x117>
c000c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c346:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c34b:	83 ec 0c             	sub    esp,0xc
c000c34e:	50                   	push   eax
c000c34f:	e8 33 e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c35b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c35f:	e9 1e ff ff ff       	jmp    c000c282 <VAS::~VAS()+0x3e>
c000c364:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c368:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c36b:	83 ec 0c             	sub    esp,0xc
c000c36e:	50                   	push   eax
c000c36f:	e8 d5 fc ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c37b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c37e:	83 ec 0c             	sub    esp,0xc
c000c381:	50                   	push   eax
c000c382:	e8 00 e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c38e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c392:	c1 e0 02             	shl    eax,0x2
c000c395:	83 ec 08             	sub    esp,0x8
c000c398:	50                   	push   eax
c000c399:	68 1c 4f 02 c0       	push   0xc0024f1c
c000c39e:	e8 9c 0c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000c3a3:	83 c4 10             	add    esp,0x10
c000c3a6:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000c3ab:	48                   	dec    eax
c000c3ac:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000c3b1:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000c3b6:	85 c0                	test   eax,eax
c000c3b8:	75 01                	jne    c000c3bb <VAS::~VAS()+0x177>
c000c3ba:	fb                   	sti    
c000c3bb:	90                   	nop
c000c3bc:	83 c4 2c             	add    esp,0x2c
c000c3bf:	c3                   	ret    

c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3c0:	55                   	push   ebp
c000c3c1:	57                   	push   edi
c000c3c2:	56                   	push   esi
c000c3c3:	53                   	push   ebx
c000c3c4:	83 ec 1c             	sub    esp,0x1c
c000c3c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3cf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3d5:	77 08                	ja     c000c3df <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3d7:	0f 20 d8             	mov    eax,cr3
c000c3da:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3dd:	75 47                	jne    c000c426 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3e3:	09 d8                	or     eax,ebx
c000c3e5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3ea:	75 57                	jne    c000c443 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c3ec:	89 de                	mov    esi,ebx
c000c3ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3f1:	c1 ee 16             	shr    esi,0x16
c000c3f4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c3fb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c3ff:	74 54                	je     c000c455 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c401:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c405:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c40b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c40f:	c1 e6 0c             	shl    esi,0xc
c000c412:	c1 eb 0a             	shr    ebx,0xa
c000c415:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c41b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c41e:	83 c4 1c             	add    esp,0x1c
c000c421:	5b                   	pop    ebx
c000c422:	5e                   	pop    esi
c000c423:	5f                   	pop    edi
c000c424:	5d                   	pop    ebp
c000c425:	c3                   	ret    
c000c426:	83 ec 0c             	sub    esp,0xc
c000c429:	68 3c 4f 02 c0       	push   0xc0024f3c
c000c42e:	e8 0c 0c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000c433:	83 c4 10             	add    esp,0x10
c000c436:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c43a:	09 d8                	or     eax,ebx
c000c43c:	a9 ff 0f 00 00       	test   eax,0xfff
c000c441:	74 a9                	je     c000c3ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c443:	83 ec 0c             	sub    esp,0xc
c000c446:	68 a4 4f 02 c0       	push   0xc0024fa4
c000c44b:	e8 b1 8b 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000c450:	83 c4 10             	add    esp,0x10
c000c453:	eb 97                	jmp    c000c3ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c459:	e8 ac df ff ff       	call   c000a40a <Phys::allocatePage()>
c000c45e:	83 ec 0c             	sub    esp,0xc
c000c461:	89 c5                	mov    ebp,eax
c000c463:	8b 0d d0 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028dd0
c000c469:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c46d:	6a 01                	push   0x1
c000c46f:	e8 a5 f8 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c474:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c47b:	6a 01                	push   0x1
c000c47d:	50                   	push   eax
c000c47e:	55                   	push   ebp
c000c47f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c485:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c489:	51                   	push   ecx
c000c48a:	e8 27 02 00 00       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c48f:	83 c4 1c             	add    esp,0x1c
c000c492:	68 00 10 00 00       	push   0x1000
c000c497:	6a 00                	push   0x0
c000c499:	50                   	push   eax
c000c49a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c49e:	e8 d9 41 ff ff       	call   c000067c <memset>
c000c4a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4aa:	e8 9a fb ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4b3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4bc:	e9 40 ff ff ff       	jmp    c000c401 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4c1:	90                   	nop

c000c4c2 <VAS::allocatePages(int, int)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4cd:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c4d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4de:	83 e0 01             	and    eax,0x1
c000c4e1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c4e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c4e9:	0f 85 cc 00 00 00    	jne    c000c5bb <VAS::allocatePages(int, int)+0xf9>
c000c4ef:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4f6:	85 c0                	test   eax,eax
c000c4f8:	0f 84 a1 00 00 00    	je     c000c59f <VAS::allocatePages(int, int)+0xdd>
c000c4fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c502:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c506:	c1 e6 0c             	shl    esi,0xc
c000c509:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c50d:	85 c0                	test   eax,eax
c000c50f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c512:	7e 33                	jle    c000c547 <VAS::allocatePages(int, int)+0x85>
c000c514:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c518:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c51c:	81 cd 00 04 00 00    	or     ebp,0x400
c000c522:	e8 e3 de ff ff       	call   c000a40a <Phys::allocatePage()>
c000c527:	55                   	push   ebp
c000c528:	53                   	push   ebx
c000c529:	50                   	push   eax
c000c52a:	57                   	push   edi
c000c52b:	e8 90 fe ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c530:	83 c4 10             	add    esp,0x10
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	74 03                	je     c000c53d <VAS::allocatePages(int, int)+0x7b>
c000c53a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c53d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c543:	39 de                	cmp    esi,ebx
c000c545:	75 db                	jne    c000c522 <VAS::allocatePages(int, int)+0x60>
c000c547:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c54c:	75 12                	jne    c000c560 <VAS::allocatePages(int, int)+0x9e>
c000c54e:	0f 20 d8             	mov    eax,cr3
c000c551:	0f 22 d8             	mov    cr3,eax
c000c554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c558:	83 c4 1c             	add    esp,0x1c
c000c55b:	5b                   	pop    ebx
c000c55c:	5e                   	pop    esi
c000c55d:	5f                   	pop    edi
c000c55e:	5d                   	pop    ebp
c000c55f:	c3                   	ret    
c000c560:	c1 ee 0a             	shr    esi,0xa
c000c563:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c567:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c56d:	c1 eb 0a             	shr    ebx,0xa
c000c570:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c576:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c57c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c582:	39 c3                	cmp    ebx,eax
c000c584:	77 ce                	ja     c000c554 <VAS::allocatePages(int, int)+0x92>
c000c586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c589:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c58f:	39 d8                	cmp    eax,ebx
c000c591:	73 f3                	jae    c000c586 <VAS::allocatePages(int, int)+0xc4>
c000c593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c597:	83 c4 1c             	add    esp,0x1c
c000c59a:	5b                   	pop    ebx
c000c59b:	5e                   	pop    esi
c000c59c:	5f                   	pop    edi
c000c59d:	5d                   	pop    ebp
c000c59e:	c3                   	ret    
c000c59f:	83 ec 0c             	sub    esp,0xc
c000c5a2:	68 c8 4f 02 c0       	push   0xc0024fc8
c000c5a7:	e8 55 8a 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000c5ac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5b3:	83 c4 10             	add    esp,0x10
c000c5b6:	e9 43 ff ff ff       	jmp    c000c4fe <VAS::allocatePages(int, int)+0x3c>
c000c5bb:	83 ec 0c             	sub    esp,0xc
c000c5be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5c2:	e8 52 f7 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c5c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5d3:	0f 87 9b 00 00 00    	ja     c000c674 <VAS::allocatePages(int, int)+0x1b2>
c000c5d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5dd:	85 d2                	test   edx,edx
c000c5df:	7e 3c                	jle    c000c61d <VAS::allocatePages(int, int)+0x15b>
c000c5e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5ed:	c1 e5 0c             	shl    ebp,0xc
c000c5f0:	81 ce 00 04 00 00    	or     esi,0x400
c000c5f6:	01 dd                	add    ebp,ebx
c000c5f8:	e8 0d de ff ff       	call   c000a40a <Phys::allocatePage()>
c000c5fd:	56                   	push   esi
c000c5fe:	53                   	push   ebx
c000c5ff:	50                   	push   eax
c000c600:	57                   	push   edi
c000c601:	e8 ba fd ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c60e:	74 03                	je     c000c613 <VAS::allocatePages(int, int)+0x151>
c000c610:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c613:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c619:	39 dd                	cmp    ebp,ebx
c000c61b:	75 db                	jne    c000c5f8 <VAS::allocatePages(int, int)+0x136>
c000c61d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c622:	0f 84 26 ff ff ff    	je     c000c54e <VAS::allocatePages(int, int)+0x8c>
c000c628:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c62c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c630:	89 d3                	mov    ebx,edx
c000c632:	c1 e0 0c             	shl    eax,0xc
c000c635:	c1 eb 0a             	shr    ebx,0xa
c000c638:	01 d0                	add    eax,edx
c000c63a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c640:	c1 e8 0a             	shr    eax,0xa
c000c643:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c649:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c64e:	2d 00 00 40 00       	sub    eax,0x400000
c000c653:	39 c3                	cmp    ebx,eax
c000c655:	0f 87 f9 fe ff ff    	ja     c000c554 <VAS::allocatePages(int, int)+0x92>
c000c65b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c65e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c664:	39 d8                	cmp    eax,ebx
c000c666:	73 f3                	jae    c000c65b <VAS::allocatePages(int, int)+0x199>
c000c668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c66c:	83 c4 1c             	add    esp,0x1c
c000c66f:	5b                   	pop    ebx
c000c670:	5e                   	pop    esi
c000c671:	5f                   	pop    edi
c000c672:	5d                   	pop    ebp
c000c673:	c3                   	ret    
c000c674:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c679:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c67f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c686:	0f 84 4d ff ff ff    	je     c000c5d9 <VAS::allocatePages(int, int)+0x117>
c000c68c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c694:	e9 40 ff ff ff       	jmp    c000c5d9 <VAS::allocatePages(int, int)+0x117>
c000c699:	90                   	nop

c000c69a <VAS::setCPUSpecific(unsigned long)>:
c000c69a:	83 ec 0c             	sub    esp,0xc
c000c69d:	6a 05                	push   0x5
c000c69f:	68 00 00 40 c2       	push   0xc2400000
c000c6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ac:	e8 0f fd ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6b1:	83 c4 1c             	add    esp,0x1c
c000c6b4:	c3                   	ret    
c000c6b5:	90                   	nop

c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6b6:	55                   	push   ebp
c000c6b7:	57                   	push   edi
c000c6b8:	56                   	push   esi
c000c6b9:	53                   	push   ebx
c000c6ba:	83 ec 1c             	sub    esp,0x1c
c000c6bd:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c6c2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6da:	83 e0 01             	and    eax,0x1
c000c6dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c6e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6e5:	85 c0                	test   eax,eax
c000c6e7:	7e 39                	jle    c000c722 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6ed:	89 f3                	mov    ebx,esi
c000c6ef:	c1 e0 0c             	shl    eax,0xc
c000c6f2:	01 f0                	add    eax,esi
c000c6f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6f8:	55                   	push   ebp
c000c6f9:	53                   	push   ebx
c000c6fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6fe:	29 f0                	sub    eax,esi
c000c700:	01 d8                	add    eax,ebx
c000c702:	50                   	push   eax
c000c703:	57                   	push   edi
c000c704:	e8 b7 fc ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c711:	74 03                	je     c000c716 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c713:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c716:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c71c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c720:	75 d6                	jne    c000c6f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c722:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c727:	75 10                	jne    c000c739 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c729:	0f 20 d8             	mov    eax,cr3
c000c72c:	0f 22 d8             	mov    cr3,eax
c000c72f:	83 c4 1c             	add    esp,0x1c
c000c732:	89 f0                	mov    eax,esi
c000c734:	5b                   	pop    ebx
c000c735:	5e                   	pop    esi
c000c736:	5f                   	pop    edi
c000c737:	5d                   	pop    ebp
c000c738:	c3                   	ret    
c000c739:	89 f3                	mov    ebx,esi
c000c73b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c73f:	c1 eb 0a             	shr    ebx,0xa
c000c742:	c1 e0 0c             	shl    eax,0xc
c000c745:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c74b:	01 f0                	add    eax,esi
c000c74d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c753:	c1 e8 0a             	shr    eax,0xa
c000c756:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c75b:	2d 00 00 40 00       	sub    eax,0x400000
c000c760:	39 c3                	cmp    ebx,eax
c000c762:	77 cb                	ja     c000c72f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c764:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c767:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c76d:	39 d8                	cmp    eax,ebx
c000c76f:	73 f3                	jae    c000c764 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c771:	83 c4 1c             	add    esp,0x1c
c000c774:	89 f0                	mov    eax,esi
c000c776:	5b                   	pop    ebx
c000c777:	5e                   	pop    esi
c000c778:	5f                   	pop    edi
c000c779:	5d                   	pop    ebp
c000c77a:	c3                   	ret    
c000c77b:	90                   	nop

c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c77c:	55                   	push   ebp
c000c77d:	57                   	push   edi
c000c77e:	56                   	push   esi
c000c77f:	53                   	push   ebx
c000c780:	83 ec 1c             	sub    esp,0x1c
c000c783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c787:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c78b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c78f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c793:	a9 ff 0f 00 00       	test   eax,0xfff
c000c798:	75 4a                	jne    c000c7e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c79a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c79e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7a1:	c1 eb 16             	shr    ebx,0x16
c000c7a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7ab:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7af:	74 4d                	je     c000c7fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7b5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7b9:	c1 e8 0a             	shr    eax,0xa
c000c7bc:	80 fa 01             	cmp    dl,0x1
c000c7bf:	19 d2                	sbb    edx,edx
c000c7c1:	c1 e3 0c             	shl    ebx,0xc
c000c7c4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7c8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7ce:	25 fc 0f 00 00       	and    eax,0xffc
c000c7d3:	01 d8                	add    eax,ebx
c000c7d5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7dc:	83 c4 1c             	add    esp,0x1c
c000c7df:	5b                   	pop    ebx
c000c7e0:	5e                   	pop    esi
c000c7e1:	5f                   	pop    edi
c000c7e2:	5d                   	pop    ebp
c000c7e3:	c3                   	ret    
c000c7e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7e8:	83 ec 0c             	sub    esp,0xc
c000c7eb:	68 f4 4f 02 c0       	push   0xc0024ff4
c000c7f0:	e8 0c 88 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000c7f5:	83 c4 10             	add    esp,0x10
c000c7f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7fc:	eb 9c                	jmp    c000c79a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c7fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c802:	e8 03 dc ff ff       	call   c000a40a <Phys::allocatePage()>
c000c807:	83 ec 0c             	sub    esp,0xc
c000c80a:	89 c5                	mov    ebp,eax
c000c80c:	8b 0d d0 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028dd0
c000c812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c816:	6a 01                	push   0x1
c000c818:	e8 fc f4 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c81d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c824:	6a 01                	push   0x1
c000c826:	50                   	push   eax
c000c827:	55                   	push   ebp
c000c828:	81 cd 07 04 00 00    	or     ebp,0x407
c000c82e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c832:	51                   	push   ecx
c000c833:	e8 7e fe ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c838:	83 c4 1c             	add    esp,0x1c
c000c83b:	68 00 10 00 00       	push   0x1000
c000c840:	6a 00                	push   0x0
c000c842:	50                   	push   eax
c000c843:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c847:	e8 30 3e ff ff       	call   c000067c <memset>
c000c84c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c850:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c853:	e8 f1 f7 ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c858:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c865:	e9 47 ff ff ff       	jmp    c000c7b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c86a <VAS::VAS(bool)>:
c000c86a:	53                   	push   ebx
c000c86b:	83 ec 28             	sub    esp,0x28
c000c86e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c872:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c87a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c885:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c88c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c890:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c894:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c897:	e8 6e db ff ff       	call   c000a40a <Phys::allocatePage()>
c000c89c:	89 c2                	mov    edx,eax
c000c89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8a5:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c000c8ab:	83 ec 0c             	sub    esp,0xc
c000c8ae:	6a 01                	push   0x1
c000c8b0:	e8 64 f4 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c8b5:	83 c4 10             	add    esp,0x10
c000c8b8:	89 c2                	mov    edx,eax
c000c8ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8c1:	83 ec 0c             	sub    esp,0xc
c000c8c4:	6a 03                	push   0x3
c000c8c6:	6a 01                	push   0x1
c000c8c8:	52                   	push   edx
c000c8c9:	50                   	push   eax
c000c8ca:	53                   	push   ebx
c000c8cb:	e8 e6 fd ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8d0:	83 c4 20             	add    esp,0x20
c000c8d3:	89 c2                	mov    edx,eax
c000c8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8dc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c8e4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c8ec:	7f 1c                	jg     c000c90a <VAS::VAS(bool)+0xa0>
c000c8ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c8f9:	c1 e2 02             	shl    edx,0x2
c000c8fc:	01 d0                	add    eax,edx
c000c8fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c904:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c908:	eb da                	jmp    c000c8e4 <VAS::VAS(bool)+0x7a>
c000c90a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c912:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c91a:	7f 7a                	jg     c000c996 <VAS::VAS(bool)+0x12c>
c000c91c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c920:	2d 00 02 00 00       	sub    eax,0x200
c000c925:	c1 e0 0c             	shl    eax,0xc
c000c928:	83 c8 03             	or     eax,0x3
c000c92b:	89 c2                	mov    edx,eax
c000c92d:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c938:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c93e:	83 e0 10             	and    eax,0x10
c000c941:	84 c0                	test   al,al
c000c943:	74 07                	je     c000c94c <VAS::VAS(bool)+0xe2>
c000c945:	b8 00 01 00 00       	mov    eax,0x100
c000c94a:	eb 05                	jmp    c000c951 <VAS::VAS(bool)+0xe7>
c000c94c:	b8 00 00 00 00       	mov    eax,0x0
c000c951:	09 d0                	or     eax,edx
c000c953:	89 c1                	mov    ecx,eax
c000c955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c959:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c95c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c960:	c1 e2 02             	shl    edx,0x2
c000c963:	01 d0                	add    eax,edx
c000c965:	89 ca                	mov    edx,ecx
c000c967:	89 10                	mov    DWORD PTR [eax],edx
c000c969:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c96d:	2d 40 03 00 00       	sub    eax,0x340
c000c972:	83 f8 7f             	cmp    eax,0x7f
c000c975:	77 16                	ja     c000c98d <VAS::VAS(bool)+0x123>
c000c977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c97b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c97e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c982:	c1 e2 02             	shl    edx,0x2
c000c985:	01 d0                	add    eax,edx
c000c987:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c98d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c991:	e9 7c ff ff ff       	jmp    c000c912 <VAS::VAS(bool)+0xa8>
c000c996:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c99b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9a1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9a7:	83 e0 10             	and    eax,0x10
c000c9aa:	84 c0                	test   al,al
c000c9ac:	74 07                	je     c000c9b5 <VAS::VAS(bool)+0x14b>
c000c9ae:	b8 03 41 00 00       	mov    eax,0x4103
c000c9b3:	eb 05                	jmp    c000c9ba <VAS::VAS(bool)+0x150>
c000c9b5:	b8 03 40 00 00       	mov    eax,0x4003
c000c9ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9be:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9c1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9c7:	89 02                	mov    DWORD PTR [edx],eax
c000c9c9:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c9ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9da:	83 ec 08             	sub    esp,0x8
c000c9dd:	50                   	push   eax
c000c9de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e2:	e8 b3 fc ff ff       	call   c000c69a <VAS::setCPUSpecific(unsigned long)>
c000c9e7:	83 c4 10             	add    esp,0x10
c000c9ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c9f1:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000c9f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca02:	83 e0 10             	and    eax,0x10
c000ca05:	84 c0                	test   al,al
c000ca07:	74 07                	je     c000ca10 <VAS::VAS(bool)+0x1a6>
c000ca09:	b8 00 01 00 00       	mov    eax,0x100
c000ca0e:	eb 05                	jmp    c000ca15 <VAS::VAS(bool)+0x1ab>
c000ca10:	b8 00 00 00 00       	mov    eax,0x0
c000ca15:	09 c2                	or     edx,eax
c000ca17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca1e:	05 fc 0f 00 00       	add    eax,0xffc
c000ca23:	83 ca 03             	or     edx,0x3
c000ca26:	89 10                	mov    DWORD PTR [eax],edx
c000ca28:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000ca2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca33:	83 ec 0c             	sub    esp,0xc
c000ca36:	50                   	push   eax
c000ca37:	e8 76 1e 00 00       	call   c000e8b2 <Device::getName()>
c000ca3c:	83 c4 10             	add    esp,0x10
c000ca3f:	83 ec 08             	sub    esp,0x8
c000ca42:	68 c8 50 02 c0       	push   0xc00250c8
c000ca47:	50                   	push   eax
c000ca48:	e8 77 3d ff ff       	call   c00007c4 <strcmp>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	85 c0                	test   eax,eax
c000ca52:	0f 94 c0             	sete   al
c000ca55:	84 c0                	test   al,al
c000ca57:	0f 84 87 00 00 00    	je     c000cae4 <VAS::VAS(bool)+0x27a>
c000ca5d:	fa                   	cli    
c000ca5e:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000ca63:	40                   	inc    eax
c000ca64:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000ca69:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000ca6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca74:	05 7c 09 00 00       	add    eax,0x97c
c000ca79:	83 ec 0c             	sub    esp,0xc
c000ca7c:	50                   	push   eax
c000ca7d:	e8 c0 cd ff ff       	call   c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca82:	83 c4 10             	add    esp,0x10
c000ca85:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca8a:	89 c3                	mov    ebx,eax
c000ca8c:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000ca91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca97:	05 7c 09 00 00       	add    eax,0x97c
c000ca9c:	83 ec 0c             	sub    esp,0xc
c000ca9f:	50                   	push   eax
c000caa0:	e8 9d cd ff ff       	call   c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	83 ec 08             	sub    esp,0x8
c000caab:	50                   	push   eax
c000caac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cab0:	e8 75 f5 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	8b 00                	mov    eax,DWORD PTR [eax]
c000caba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cabf:	6a 11                	push   0x11
c000cac1:	53                   	push   ebx
c000cac2:	50                   	push   eax
c000cac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac7:	e8 f4 f8 ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cacc:	83 c4 10             	add    esp,0x10
c000cacf:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000cad4:	48                   	dec    eax
c000cad5:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000cada:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000cadf:	85 c0                	test   eax,eax
c000cae1:	75 01                	jne    c000cae4 <VAS::VAS(bool)+0x27a>
c000cae3:	fb                   	sti    
c000cae4:	90                   	nop
c000cae5:	83 c4 28             	add    esp,0x28
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <VAS::evict(unsigned long)>:
c000caea:	55                   	push   ebp
c000caeb:	57                   	push   edi
c000caec:	56                   	push   esi
c000caed:	53                   	push   ebx
c000caee:	83 ec 1c             	sub    esp,0x1c
c000caf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000caf5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000caf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cafd:	e8 58 f3 ff ff       	call   c000be5a <Virt::allocateSwapfilePage()>
c000cb02:	89 c7                	mov    edi,eax
c000cb04:	a1 ec 80 02 c0       	mov    eax,ds:0xc00280ec
c000cb09:	85 c0                	test   eax,eax
c000cb0b:	7e 3d                	jle    c000cb4a <VAS::evict(unsigned long)+0x60>
c000cb0d:	89 ee                	mov    esi,ebp
c000cb0f:	31 db                	xor    ebx,ebx
c000cb11:	83 ec 0c             	sub    esp,0xc
c000cb14:	57                   	push   edi
c000cb15:	e8 2e f3 ff ff       	call   c000be48 <Virt::swapIDToSector(unsigned long)>
c000cb1a:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb1d:	01 d8                	add    eax,ebx
c000cb1f:	6a 01                	push   0x1
c000cb21:	31 d2                	xor    edx,edx
c000cb23:	43                   	inc    ebx
c000cb24:	52                   	push   edx
c000cb25:	81 c6 00 02 00 00    	add    esi,0x200
c000cb2b:	50                   	push   eax
c000cb2c:	0f be 05 f8 80 02 c0 	movsx  eax,BYTE PTR ds:0xc00280f8
c000cb33:	ff 34 85 5c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ea4]
c000cb3a:	e8 d1 3d 00 00       	call   c0010910 <LogicalDisk::write(unsigned long long, int, void*)>
c000cb3f:	83 c4 20             	add    esp,0x20
c000cb42:	39 1d ec 80 02 c0    	cmp    DWORD PTR ds:0xc00280ec,ebx
c000cb48:	7f c7                	jg     c000cb11 <VAS::evict(unsigned long)+0x27>
c000cb4a:	83 ec 08             	sub    esp,0x8
c000cb4d:	c1 e7 0b             	shl    edi,0xb
c000cb50:	55                   	push   ebp
c000cb51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb55:	e8 d0 f4 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cb5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb5c:	89 d3                	mov    ebx,edx
c000cb5e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb64:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb6a:	09 d7                	or     edi,edx
c000cb6c:	89 38                	mov    DWORD PTR [eax],edi
c000cb6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb71:	ff 05 c8 8d 02 c0    	inc    DWORD PTR ds:0xc0028dc8
c000cb77:	e8 0b d8 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000cb7c:	0f 20 d8             	mov    eax,cr3
c000cb7f:	0f 22 d8             	mov    cr3,eax
c000cb82:	ff 35 c8 8d 02 c0    	push   DWORD PTR ds:0xc0028dc8
c000cb88:	55                   	push   ebp
c000cb89:	53                   	push   ebx
c000cb8a:	68 18 50 02 c0       	push   0xc0025018
c000cb8f:	e8 ab 04 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cb94:	a1 c4 8d 02 c0       	mov    eax,ds:0xc0028dc4
c000cb99:	c7 44 24 50 d6 50 02 c0 	mov    DWORD PTR [esp+0x50],0xc00250d6
c000cba1:	8d 50 01             	lea    edx,[eax+0x1]
c000cba4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cba8:	89 15 c4 8d 02 c0    	mov    DWORD PTR ds:0xc0028dc4,edx
c000cbae:	83 c4 3c             	add    esp,0x3c
c000cbb1:	5b                   	pop    ebx
c000cbb2:	5e                   	pop    esi
c000cbb3:	5f                   	pop    edi
c000cbb4:	5d                   	pop    ebp
c000cbb5:	e9 85 04 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>

c000cbba <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbba:	55                   	push   ebp
c000cbbb:	57                   	push   edi
c000cbbc:	56                   	push   esi
c000cbbd:	53                   	push   ebx
c000cbbe:	83 ec 14             	sub    esp,0x14
c000cbc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbc5:	68 e7 50 02 c0       	push   0xc00250e7
c000cbca:	e8 70 04 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbd6:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbdc:	74 20                	je     c000cbfe <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbde:	83 ec 08             	sub    esp,0x8
c000cbe1:	55                   	push   ebp
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 3f f4 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	85 c0                	test   eax,eax
c000cbf2:	74 0a                	je     c000cbfe <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbf4:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbf6:	f7 c7 01 00 00 00    	test   edi,0x1
c000cbfc:	74 0a                	je     c000cc08 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cbfe:	31 c0                	xor    eax,eax
c000cc00:	83 c4 0c             	add    esp,0xc
c000cc03:	5b                   	pop    ebx
c000cc04:	5e                   	pop    esi
c000cc05:	5f                   	pop    edi
c000cc06:	5d                   	pop    ebp
c000cc07:	c3                   	ret    
c000cc08:	e8 fd d7 ff ff       	call   c000a40a <Phys::allocatePage()>
c000cc0d:	c1 ef 0b             	shr    edi,0xb
c000cc10:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc12:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc18:	09 c2                	or     edx,eax
c000cc1a:	81 ca 01 08 00 00    	or     edx,0x801
c000cc20:	89 13                	mov    DWORD PTR [ebx],edx
c000cc22:	8b 0d ec 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280ec
c000cc28:	85 c9                	test   ecx,ecx
c000cc2a:	7e 3d                	jle    c000cc69 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc2c:	89 ee                	mov    esi,ebp
c000cc2e:	31 db                	xor    ebx,ebx
c000cc30:	83 ec 0c             	sub    esp,0xc
c000cc33:	57                   	push   edi
c000cc34:	e8 0f f2 ff ff       	call   c000be48 <Virt::swapIDToSector(unsigned long)>
c000cc39:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc3c:	01 d8                	add    eax,ebx
c000cc3e:	6a 01                	push   0x1
c000cc40:	31 d2                	xor    edx,edx
c000cc42:	43                   	inc    ebx
c000cc43:	52                   	push   edx
c000cc44:	81 c6 00 02 00 00    	add    esi,0x200
c000cc4a:	50                   	push   eax
c000cc4b:	0f be 05 f8 80 02 c0 	movsx  eax,BYTE PTR ds:0xc00280f8
c000cc52:	ff 34 85 5c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ea4]
c000cc59:	e8 46 3c 00 00       	call   c00108a4 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc5e:	83 c4 20             	add    esp,0x20
c000cc61:	39 1d ec 80 02 c0    	cmp    DWORD PTR ds:0xc00280ec,ebx
c000cc67:	7f c7                	jg     c000cc30 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc69:	a1 c8 8d 02 c0       	mov    eax,ds:0xc0028dc8
c000cc6e:	48                   	dec    eax
c000cc6f:	52                   	push   edx
c000cc70:	a3 c8 8d 02 c0       	mov    ds:0xc0028dc8,eax
c000cc75:	50                   	push   eax
c000cc76:	55                   	push   ebp
c000cc77:	68 fa 50 02 c0       	push   0xc00250fa
c000cc7c:	e8 be 03 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cc81:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc84:	e8 a1 f1 ff ff       	call   c000be2a <Virt::freeSwapfilePage(unsigned long)>
c000cc89:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	48                   	dec    eax
c000cc92:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000cc97:	85 c0                	test   eax,eax
c000cc99:	74 1d                	je     c000ccb8 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc9f:	25 ff 0f 00 00       	and    eax,0xfff
c000cca4:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cca9:	77 10                	ja     c000ccbb <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccab:	0f 20 d8             	mov    eax,cr3
c000ccae:	0f 22 d8             	mov    cr3,eax
c000ccb1:	b0 01                	mov    al,0x1
c000ccb3:	e9 48 ff ff ff       	jmp    c000cc00 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccb8:	fb                   	sti    
c000ccb9:	eb e0                	jmp    c000cc9b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccbb:	83 ec 0c             	sub    esp,0xc
c000ccbe:	68 0f 51 02 c0       	push   0xc002510f
c000ccc3:	e8 77 03 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ccc8:	83 c4 10             	add    esp,0x10
c000cccb:	eb de                	jmp    c000ccab <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cccd:	90                   	nop

c000ccce <VAS::scanForEviction()>:
c000ccce:	57                   	push   edi
c000cccf:	31 ff                	xor    edi,edi
c000ccd1:	56                   	push   esi
c000ccd2:	53                   	push   ebx
c000ccd3:	83 ec 10             	sub    esp,0x10
c000ccd6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccda:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cce3:	75 0e                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cce5:	89 da                	mov    edx,ebx
c000cce7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccea:	c1 ea 16             	shr    edx,0x16
c000cced:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccf1:	74 4e                	je     c000cd41 <VAS::scanForEviction()+0x73>
c000ccf3:	53                   	push   ebx
c000ccf4:	56                   	push   esi
c000ccf5:	e8 30 f3 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000ccfa:	5a                   	pop    edx
c000ccfb:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccfd:	59                   	pop    ecx
c000ccfe:	89 d1                	mov    ecx,edx
c000cd00:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd06:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd0c:	74 3e                	je     c000cd4c <VAS::scanForEviction()+0x7e>
c000cd0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd14:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd1a:	76 2b                	jbe    c000cd47 <VAS::scanForEviction()+0x79>
c000cd1c:	47                   	inc    edi
c000cd1d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd24:	83 ff 03             	cmp    edi,0x3
c000cd27:	74 32                	je     c000cd5b <VAS::scanForEviction()+0x8d>
c000cd29:	31 db                	xor    ebx,ebx
c000cd2b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd31:	75 c0                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cd33:	89 da                	mov    edx,ebx
c000cd35:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd38:	c1 ea 16             	shr    edx,0x16
c000cd3b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd3f:	75 b2                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cd41:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd47:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd4a:	eb 91                	jmp    c000ccdd <VAS::scanForEviction()+0xf>
c000cd4c:	f6 c2 20             	test   dl,0x20
c000cd4f:	74 13                	je     c000cd64 <VAS::scanForEviction()+0x96>
c000cd51:	83 e2 df             	and    edx,0xffffffdf
c000cd54:	89 10                	mov    DWORD PTR [eax],edx
c000cd56:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd59:	eb b3                	jmp    c000cd0e <VAS::scanForEviction()+0x40>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	31 c0                	xor    eax,eax
c000cd60:	5b                   	pop    ebx
c000cd61:	5e                   	pop    esi
c000cd62:	5f                   	pop    edi
c000cd63:	c3                   	ret    
c000cd64:	83 ec 08             	sub    esp,0x8
c000cd67:	89 d0                	mov    eax,edx
c000cd69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd72:	53                   	push   ebx
c000cd73:	68 1f 51 02 c0       	push   0xc002511f
c000cd78:	e8 c2 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cd7d:	58                   	pop    eax
c000cd7e:	5a                   	pop    edx
c000cd7f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd82:	56                   	push   esi
c000cd83:	e8 62 fd ff ff       	call   c000caea <VAS::evict(unsigned long)>
c000cd88:	59                   	pop    ecx
c000cd89:	5b                   	pop    ebx
c000cd8a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8d:	68 33 51 02 c0       	push   0xc0025133
c000cd92:	e8 a8 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cd97:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd9e:	83 c4 10             	add    esp,0x10
c000cda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cda5:	83 c4 10             	add    esp,0x10
c000cda8:	5b                   	pop    ebx
c000cda9:	5e                   	pop    esi
c000cdaa:	5f                   	pop    edi
c000cdab:	c3                   	ret    

c000cdac <mapVASFirstTime>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	53                   	push   ebx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdb8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdbb:	4a                   	dec    edx
c000cdbc:	0f 84 fe 00 00 00    	je     c000cec0 <mapVASFirstTime+0x114>
c000cdc2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdc5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdc8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdcd:	c1 e5 15             	shl    ebp,0x15
c000cdd0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cdd5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cddb:	29 eb                	sub    ebx,ebp
c000cddd:	29 ef                	sub    edi,ebp
c000cddf:	83 ec 08             	sub    esp,0x8
c000cde2:	53                   	push   ebx
c000cde3:	68 5f 51 02 c0       	push   0xc002515f
c000cde8:	e8 52 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cded:	e8 18 d6 ff ff       	call   c000a40a <Phys::allocatePage()>
c000cdf2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cdf9:	6a 01                	push   0x1
c000cdfb:	53                   	push   ebx
c000cdfc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce02:	50                   	push   eax
c000ce03:	56                   	push   esi
c000ce04:	e8 ad f8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce09:	83 c4 20             	add    esp,0x20
c000ce0c:	39 fb                	cmp    ebx,edi
c000ce0e:	75 cf                	jne    c000cddf <mapVASFirstTime+0x33>
c000ce10:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce15:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce1a:	29 eb                	sub    ebx,ebp
c000ce1c:	29 ef                	sub    edi,ebp
c000ce1e:	83 ec 08             	sub    esp,0x8
c000ce21:	53                   	push   ebx
c000ce22:	68 7b 51 02 c0       	push   0xc002517b
c000ce27:	e8 13 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce2c:	58                   	pop    eax
c000ce2d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce31:	5a                   	pop    edx
c000ce32:	19 c0                	sbb    eax,eax
c000ce34:	83 e0 04             	and    eax,0x4
c000ce37:	05 03 04 00 00       	add    eax,0x403
c000ce3c:	50                   	push   eax
c000ce3d:	68 8f 51 02 c0       	push   0xc002518f
c000ce42:	e8 f8 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce47:	e8 be d5 ff ff       	call   c000a40a <Phys::allocatePage()>
c000ce4c:	59                   	pop    ecx
c000ce4d:	89 c5                	mov    ebp,eax
c000ce4f:	58                   	pop    eax
c000ce50:	55                   	push   ebp
c000ce51:	68 9d 51 02 c0       	push   0xc002519d
c000ce56:	e8 e4 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce5b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce5f:	19 d2                	sbb    edx,edx
c000ce61:	83 e2 04             	and    edx,0x4
c000ce64:	81 c2 03 04 00 00    	add    edx,0x403
c000ce6a:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce6d:	6a 01                	push   0x1
c000ce6f:	53                   	push   ebx
c000ce70:	55                   	push   ebp
c000ce71:	56                   	push   esi
c000ce72:	e8 3f f8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce77:	83 c4 18             	add    esp,0x18
c000ce7a:	53                   	push   ebx
c000ce7b:	56                   	push   esi
c000ce7c:	e8 a9 f1 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000ce81:	5a                   	pop    edx
c000ce82:	59                   	pop    ecx
c000ce83:	ff 30                	push   DWORD PTR [eax]
c000ce85:	68 b9 51 02 c0       	push   0xc00251b9
c000ce8a:	e8 b0 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce8f:	0f 20 d8             	mov    eax,cr3
c000ce92:	83 c4 0c             	add    esp,0xc
c000ce95:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce9b:	56                   	push   esi
c000ce9c:	50                   	push   eax
c000ce9d:	68 c4 51 02 c0       	push   0xc00251c4
c000cea2:	e8 98 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cea7:	83 c4 10             	add    esp,0x10
c000ceaa:	39 df                	cmp    edi,ebx
c000ceac:	0f 85 6c ff ff ff    	jne    c000ce1e <mapVASFirstTime+0x72>
c000ceb2:	0f 20 d8             	mov    eax,cr3
c000ceb5:	0f 22 d8             	mov    cr3,eax
c000ceb8:	83 c4 0c             	add    esp,0xc
c000cebb:	5b                   	pop    ebx
c000cebc:	5e                   	pop    esi
c000cebd:	5f                   	pop    edi
c000cebe:	5d                   	pop    ebp
c000cebf:	c3                   	ret    
c000cec0:	83 ec 0c             	sub    esp,0xc
c000cec3:	68 46 51 02 c0       	push   0xc0025146
c000cec8:	e8 72 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	83 c4 0c             	add    esp,0xc
c000ced3:	5b                   	pop    ebx
c000ced4:	5e                   	pop    esi
c000ced5:	5f                   	pop    edi
c000ced6:	5d                   	pop    ebp
c000ced7:	c3                   	ret    

c000ced8 <__cxa_atexit>:
c000ced8:	31 c0                	xor    eax,eax
c000ceda:	c3                   	ret    

c000cedb <__cxa_finalize>:
c000cedb:	c3                   	ret    

c000cedc <__stack_chk_fail>:
c000cedc:	55                   	push   ebp
c000cedd:	89 e5                	mov    ebp,esp
c000cedf:	83 ec 14             	sub    esp,0x14
c000cee2:	68 dc 51 02 c0       	push   0xc00251dc
c000cee7:	e8 53 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ceec:	58                   	pop    eax
c000ceed:	5a                   	pop    edx
c000ceee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cef1:	68 2c 52 02 c0       	push   0xc002522c
c000cef6:	e8 44 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cefb:	59                   	pop    ecx
c000cefc:	58                   	pop    eax
c000cefd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf00:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf03:	68 2c 52 02 c0       	push   0xc002522c
c000cf08:	e8 32 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf0d:	5a                   	pop    edx
c000cf0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf11:	59                   	pop    ecx
c000cf12:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf14:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf17:	68 2c 52 02 c0       	push   0xc002522c
c000cf1c:	e8 1e 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf21:	5a                   	pop    edx
c000cf22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf25:	59                   	pop    ecx
c000cf26:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf28:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf2a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf2d:	68 2c 52 02 c0       	push   0xc002522c
c000cf32:	e8 08 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf37:	c7 04 24 34 52 02 c0 	mov    DWORD PTR [esp],0xc0025234
c000cf3e:	e8 be 80 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	c9                   	leave  
c000cf47:	c3                   	ret    

c000cf48 <__cxa_pure_virtual>:
c000cf48:	83 ec 18             	sub    esp,0x18
c000cf4b:	68 4c 52 02 c0       	push   0xc002524c
c000cf50:	e8 ac 80 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000cf55:	83 c4 1c             	add    esp,0x1c
c000cf58:	c3                   	ret    

c000cf59 <operator new[](unsigned long)>:
c000cf59:	e9 f5 cd ff ff       	jmp    c0009d53 <malloc>

c000cf5e <operator delete(void*, unsigned long)>:
c000cf5e:	e9 10 ce ff ff       	jmp    c0009d73 <rfree>

c000cf63 <operator delete[](void*)>:
c000cf63:	e9 0b ce ff ff       	jmp    c0009d73 <rfree>

c000cf68 <operator delete[](void*, unsigned long)>:
c000cf68:	e9 06 ce ff ff       	jmp    c0009d73 <rfree>

c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf6d:	55                   	push   ebp
c000cf6e:	b9 11 00 00 00       	mov    ecx,0x11
c000cf73:	57                   	push   edi
c000cf74:	56                   	push   esi
c000cf75:	be 32 4d 02 c0       	mov    esi,0xc0024d32
c000cf7a:	53                   	push   ebx
c000cf7b:	83 ec 20             	sub    esp,0x20
c000cf7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf82:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf86:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf8a:	fc                   	cld    
c000cf8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf8d:	89 ee                	mov    esi,ebp
c000cf8f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf93:	eb 02                	jmp    c000cf97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf95:	89 c6                	mov    esi,eax
c000cf97:	31 d2                	xor    edx,edx
c000cf99:	41                   	inc    ecx
c000cf9a:	89 f0                	mov    eax,esi
c000cf9c:	f7 f3                	div    ebx
c000cf9e:	39 de                	cmp    esi,ebx
c000cfa0:	73 f3                	jae    c000cf95 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfa2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfa5:	eb 02                	jmp    c000cfa9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfa7:	89 c5                	mov    ebp,eax
c000cfa9:	31 d2                	xor    edx,edx
c000cfab:	49                   	dec    ecx
c000cfac:	89 e8                	mov    eax,ebp
c000cfae:	f7 f3                	div    ebx
c000cfb0:	39 dd                	cmp    ebp,ebx
c000cfb2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfb6:	88 11                	mov    BYTE PTR [ecx],dl
c000cfb8:	73 ed                	jae    c000cfa7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfbe:	83 c4 20             	add    esp,0x20
c000cfc1:	5b                   	pop    ebx
c000cfc2:	5e                   	pop    esi
c000cfc3:	5f                   	pop    edi
c000cfc4:	5d                   	pop    ebp
c000cfc5:	c3                   	ret    

c000cfc6 <Dbg::logc(char)>:
c000cfc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfca:	f6 05 c0 8c 02 c0 10 	test   BYTE PTR ds:0xc0028cc0,0x10
c000cfd1:	75 12                	jne    c000cfe5 <Dbg::logc(char)+0x1f>
c000cfd3:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfd8:	ec                   	in     al,dx
c000cfd9:	a8 20                	test   al,0x20
c000cfdb:	74 fb                	je     c000cfd8 <Dbg::logc(char)+0x12>
c000cfdd:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfe2:	88 c8                	mov    al,cl
c000cfe4:	ee                   	out    dx,al
c000cfe5:	c3                   	ret    

c000cfe6 <Dbg::logs(char*)>:
c000cfe6:	53                   	push   ebx
c000cfe7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cfeb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 0f                	je     c000d001 <Dbg::logs(char*)+0x1b>
c000cff2:	50                   	push   eax
c000cff3:	43                   	inc    ebx
c000cff4:	e8 cd ff ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000cff9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cffc:	5a                   	pop    edx
c000cffd:	84 c0                	test   al,al
c000cfff:	75 f1                	jne    c000cff2 <Dbg::logs(char*)+0xc>
c000d001:	5b                   	pop    ebx
c000d002:	c3                   	ret    

c000d003 <Dbg::logWriteInt(unsigned int)>:
c000d003:	83 ec 10             	sub    esp,0x10
c000d006:	6a 0a                	push   0xa
c000d008:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d00c:	50                   	push   eax
c000d00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d011:	e8 57 ff ff ff       	call   c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d016:	50                   	push   eax
c000d017:	e8 ca ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d01c:	83 c4 20             	add    esp,0x20
c000d01f:	c3                   	ret    

c000d020 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d020:	83 ec 10             	sub    esp,0x10
c000d023:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d027:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d030:	e8 38 ff ff ff       	call   c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d035:	50                   	push   eax
c000d036:	e8 ab ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d03b:	83 c4 20             	add    esp,0x20
c000d03e:	c3                   	ret    

c000d03f <Dbg::kprintf(char const*, ...)>:
c000d03f:	55                   	push   ebp
c000d040:	57                   	push   edi
c000d041:	56                   	push   esi
c000d042:	53                   	push   ebx
c000d043:	83 ec 0c             	sub    esp,0xc
c000d046:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d04a:	f6 05 c0 8c 02 c0 10 	test   BYTE PTR ds:0xc0028cc0,0x10
c000d051:	74 08                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x1c>
c000d053:	83 c4 0c             	add    esp,0xc
c000d056:	5b                   	pop    ebx
c000d057:	5e                   	pop    esi
c000d058:	5f                   	pop    edi
c000d059:	5d                   	pop    ebp
c000d05a:	c3                   	ret    
c000d05b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d05f:	31 db                	xor    ebx,ebx
c000d061:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d065:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d068:	84 c0                	test   al,al
c000d06a:	74 e7                	je     c000d053 <Dbg::kprintf(char const*, ...)+0x14>
c000d06c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d06f:	3c 25                	cmp    al,0x25
c000d071:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d074:	75 44                	jne    c000d0ba <Dbg::kprintf(char const*, ...)+0x7b>
c000d076:	83 c3 02             	add    ebx,0x2
c000d079:	8a 07                	mov    al,BYTE PTR [edi]
c000d07b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d07e:	83 e8 25             	sub    eax,0x25
c000d081:	3c 53                	cmp    al,0x53
c000d083:	0f 87 c9 00 00 00    	ja     c000d152 <Dbg::kprintf(char const*, ...)+0x113>
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	ff 24 85 60 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdada0]
c000d093:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d097:	89 c8                	mov    eax,ecx
c000d099:	83 c1 04             	add    ecx,0x4
c000d09c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a0:	ff 30                	push   DWORD PTR [eax]
c000d0a2:	e8 5c ff ff ff       	call   c000d003 <Dbg::logWriteInt(unsigned int)>
c000d0a7:	5f                   	pop    edi
c000d0a8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0ac:	84 c0                	test   al,al
c000d0ae:	74 a3                	je     c000d053 <Dbg::kprintf(char const*, ...)+0x14>
c000d0b0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0b3:	3c 25                	cmp    al,0x25
c000d0b5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0b8:	74 bc                	je     c000d076 <Dbg::kprintf(char const*, ...)+0x37>
c000d0ba:	50                   	push   eax
c000d0bb:	89 eb                	mov    ebx,ebp
c000d0bd:	e8 04 ff ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d0c2:	89 fd                	mov    ebp,edi
c000d0c4:	58                   	pop    eax
c000d0c5:	eb e1                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0cb:	89 c8                	mov    eax,ecx
c000d0cd:	83 c1 04             	add    ecx,0x4
c000d0d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0d4:	ff 30                	push   DWORD PTR [eax]
c000d0d6:	e8 0b ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d0db:	58                   	pop    eax
c000d0dc:	eb ca                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0e2:	89 d0                	mov    eax,edx
c000d0e4:	83 c2 04             	add    edx,0x4
c000d0e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0eb:	ff 30                	push   DWORD PTR [eax]
c000d0ed:	e8 11 ff ff ff       	call   c000d003 <Dbg::logWriteInt(unsigned int)>
c000d0f2:	58                   	pop    eax
c000d0f3:	eb b3                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0f9:	89 d0                	mov    eax,edx
c000d0fb:	83 c2 04             	add    edx,0x4
c000d0fe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d101:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d105:	50                   	push   eax
c000d106:	e8 bb fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d10b:	58                   	pop    eax
c000d10c:	eb 9a                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d10e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d112:	89 c8                	mov    eax,ecx
c000d114:	83 c1 04             	add    ecx,0x4
c000d117:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d11b:	6a 10                	push   0x10
c000d11d:	ff 30                	push   DWORD PTR [eax]
c000d11f:	e8 fc fe ff ff       	call   c000d020 <Dbg::logWriteIntBase(unsigned int, int)>
c000d124:	59                   	pop    ecx
c000d125:	5f                   	pop    edi
c000d126:	eb 80                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d128:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12c:	89 d0                	mov    eax,edx
c000d12e:	83 c2 08             	add    edx,0x8
c000d131:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d135:	6a 10                	push   0x10
c000d137:	ff 30                	push   DWORD PTR [eax]
c000d139:	e8 e2 fe ff ff       	call   c000d020 <Dbg::logWriteIntBase(unsigned int, int)>
c000d13e:	58                   	pop    eax
c000d13f:	5a                   	pop    edx
c000d140:	e9 63 ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d145:	6a 25                	push   0x25
c000d147:	e8 7a fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d14c:	58                   	pop    eax
c000d14d:	e9 56 ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d152:	6a 25                	push   0x25
c000d154:	e8 6d fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d159:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d15c:	50                   	push   eax
c000d15d:	e8 64 fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d162:	5a                   	pop    edx
c000d163:	59                   	pop    ecx
c000d164:	e9 3f ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d169:	90                   	nop

c000d16a <File::read(unsigned long long, void*, int*)>:
c000d16a:	53                   	push   ebx
c000d16b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d16f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d173:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d17a:	3c 19                	cmp    al,0x19
c000d17c:	77 35                	ja     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d17e:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d185:	85 c0                	test   eax,eax
c000d187:	74 2a                	je     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d189:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d18f:	85 c0                	test   eax,eax
c000d191:	74 20                	je     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d197:	74 21                	je     c000d1ba <File::read(unsigned long long, void*, int*)+0x50>
c000d199:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d19b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d19f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1ad:	5b                   	pop    ebx
c000d1ae:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1b1:	ff e0                	jmp    eax
c000d1b3:	b8 0b 00 00 00       	mov    eax,0xb
c000d1b8:	eb 05                	jmp    c000d1bf <File::read(unsigned long long, void*, int*)+0x55>
c000d1ba:	b8 05 00 00 00       	mov    eax,0x5
c000d1bf:	5b                   	pop    ebx
c000d1c0:	c3                   	ret    
c000d1c1:	90                   	nop

c000d1c2 <File::write(unsigned long long, void*, int*)>:
c000d1c2:	53                   	push   ebx
c000d1c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1d2:	3c 19                	cmp    al,0x19
c000d1d4:	77 35                	ja     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1d6:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d1dd:	85 c0                	test   eax,eax
c000d1df:	74 2a                	je     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1e7:	85 c0                	test   eax,eax
c000d1e9:	74 20                	je     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1ef:	74 21                	je     c000d212 <File::write(unsigned long long, void*, int*)+0x50>
c000d1f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1f7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d201:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d205:	5b                   	pop    ebx
c000d206:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d209:	ff e0                	jmp    eax
c000d20b:	b8 0b 00 00 00       	mov    eax,0xb
c000d210:	eb 05                	jmp    c000d217 <File::write(unsigned long long, void*, int*)+0x55>
c000d212:	b8 05 00 00 00       	mov    eax,0x5
c000d217:	5b                   	pop    ebx
c000d218:	c3                   	ret    
c000d219:	90                   	nop

c000d21a <Directory::read(unsigned long long, void*, int*)>:
c000d21a:	53                   	push   ebx
c000d21b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d21f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d223:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d22a:	3c 19                	cmp    al,0x19
c000d22c:	77 35                	ja     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d22e:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d235:	85 c0                	test   eax,eax
c000d237:	74 2a                	je     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d239:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d23f:	85 c0                	test   eax,eax
c000d241:	74 20                	je     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d243:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d247:	74 21                	je     c000d26a <Directory::read(unsigned long long, void*, int*)+0x50>
c000d249:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d24b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d24f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d255:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d259:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d25d:	5b                   	pop    ebx
c000d25e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d261:	ff e0                	jmp    eax
c000d263:	b8 0b 00 00 00       	mov    eax,0xb
c000d268:	eb 05                	jmp    c000d26f <Directory::read(unsigned long long, void*, int*)+0x55>
c000d26a:	b8 05 00 00 00       	mov    eax,0x5
c000d26f:	5b                   	pop    ebx
c000d270:	c3                   	ret    
c000d271:	90                   	nop

c000d272 <Directory::write(unsigned long long, void*, int*)>:
c000d272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d276:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d27d:	b8 0b 00 00 00       	mov    eax,0xb
c000d282:	80 fa 19             	cmp    dl,0x19
c000d285:	77 18                	ja     c000d29f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d287:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000d28e:	85 d2                	test   edx,edx
c000d290:	74 0d                	je     c000d29f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d292:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d299:	19 c0                	sbb    eax,eax
c000d29b:	83 e0 0a             	and    eax,0xa
c000d29e:	40                   	inc    eax
c000d29f:	c3                   	ret    

c000d2a0 <File::isAtty()>:
c000d2a0:	31 c0                	xor    eax,eax
c000d2a2:	c3                   	ret    
c000d2a3:	90                   	nop

c000d2a4 <Directory::isAtty()>:
c000d2a4:	31 c0                	xor    eax,eax
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2a8:	b8 0a 00 00 00       	mov    eax,0xa
c000d2ad:	c3                   	ret    

c000d2ae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2ae:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b3:	c3                   	ret    

c000d2b4 <Filesystem::allocateSwapfile(char const*, int)>:
c000d2b4:	31 c0                	xor    eax,eax
c000d2b6:	31 d2                	xor    edx,edx
c000d2b8:	c3                   	ret    
c000d2b9:	90                   	nop

c000d2ba <File::~File()>:
c000d2ba:	83 ec 0c             	sub    esp,0xc
c000d2bd:	ba 9c 54 02 c0       	mov    edx,0xc002549c
c000d2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c6:	89 10                	mov    DWORD PTR [eax],edx
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	83 ec 0c             	sub    esp,0xc
c000d2cf:	50                   	push   eax
c000d2d0:	e8 e3 e7 ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	90                   	nop
c000d2d9:	83 c4 0c             	add    esp,0xc
c000d2dc:	c3                   	ret    
c000d2dd:	90                   	nop

c000d2de <File::~File()>:
c000d2de:	83 ec 0c             	sub    esp,0xc
c000d2e1:	83 ec 0c             	sub    esp,0xc
c000d2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e8:	e8 cd ff ff ff       	call   c000d2ba <File::~File()>
c000d2ed:	83 c4 10             	add    esp,0x10
c000d2f0:	83 ec 08             	sub    esp,0x8
c000d2f3:	68 14 01 00 00       	push   0x114
c000d2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fc:	e8 5d fc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d301:	83 c4 10             	add    esp,0x10
c000d304:	83 c4 0c             	add    esp,0xc
c000d307:	c3                   	ret    

c000d308 <Directory::~Directory()>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	ba b8 54 02 c0       	mov    edx,0xc00254b8
c000d310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d314:	89 10                	mov    DWORD PTR [eax],edx
c000d316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31a:	83 ec 0c             	sub    esp,0xc
c000d31d:	50                   	push   eax
c000d31e:	e8 95 e7 ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <Directory::~Directory()>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d336:	e8 cd ff ff ff       	call   c000d308 <Directory::~Directory()>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	83 ec 08             	sub    esp,0x8
c000d341:	68 14 01 00 00       	push   0x114
c000d346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34a:	e8 0f fc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	83 c4 0c             	add    esp,0xc
c000d355:	c3                   	ret    

c000d356 <Filesystem::Filesystem()>:
c000d356:	ba 34 54 02 c0       	mov    edx,0xc0025434
c000d35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d35f:	89 10                	mov    DWORD PTR [eax],edx
c000d361:	8b 15 d4 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028dd4
c000d367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d36b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d372:	a3 d4 8d 02 c0       	mov    ds:0xc0028dd4,eax
c000d377:	90                   	nop
c000d378:	c3                   	ret    
c000d379:	90                   	nop

c000d37a <Filesystem::~Filesystem()>:
c000d37a:	ba 34 54 02 c0       	mov    edx,0xc0025434
c000d37f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d383:	89 10                	mov    DWORD PTR [eax],edx
c000d385:	90                   	nop
c000d386:	c3                   	ret    
c000d387:	90                   	nop

c000d388 <Filesystem::~Filesystem()>:
c000d388:	83 ec 0c             	sub    esp,0xc
c000d38b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d38f:	e8 e6 ff ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c000d394:	83 c4 04             	add    esp,0x4
c000d397:	83 ec 08             	sub    esp,0x8
c000d39a:	6a 08                	push   0x8
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	e8 b9 fb ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d3a5:	83 c4 10             	add    esp,0x10
c000d3a8:	83 c4 0c             	add    esp,0xc
c000d3ab:	c3                   	ret    

c000d3ac <Fs::getcwd(Process*, char*, int)>:
c000d3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3b0:	31 c0                	xor    eax,eax
c000d3b2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3b5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3b9:	7d 15                	jge    c000d3d0 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3bf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3c6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3c9:	84 c9                	test   cl,cl
c000d3cb:	74 06                	je     c000d3d3 <Fs::getcwd(Process*, char*, int)+0x27>
c000d3cd:	40                   	inc    eax
c000d3ce:	eb e2                	jmp    c000d3b2 <Fs::getcwd(Process*, char*, int)+0x6>
c000d3d0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3d3:	31 c0                	xor    eax,eax
c000d3d5:	c3                   	ret    

c000d3d6 <Fs::initVFS()>:
c000d3d6:	83 ec 18             	sub    esp,0x18
c000d3d9:	6a 08                	push   0x8
c000d3db:	e8 73 c9 ff ff       	call   c0009d53 <malloc>
c000d3e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3e3:	e8 b4 ec 00 00       	call   c001c09c <FAT::FAT()>
c000d3e8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3ef:	e8 5f c9 ff ff       	call   c0009d53 <malloc>
c000d3f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3f7:	e8 30 ff 00 00       	call   c001d32c <ISO9660::ISO9660()>
c000d3fc:	83 c4 1c             	add    esp,0x1c
c000d3ff:	c3                   	ret    

c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d400:	55                   	push   ebp
c000d401:	57                   	push   edi
c000d402:	56                   	push   esi
c000d403:	53                   	push   ebx
c000d404:	81 ec 10 04 00 00    	sub    esp,0x410
c000d40a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d411:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d418:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d41f:	68 00 04 00 00       	push   0x400
c000d424:	6a 00                	push   0x0
c000d426:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d42a:	56                   	push   esi
c000d42b:	e8 4c 32 ff ff       	call   c000067c <memset>
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d437:	75 0b                	jne    c000d444 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d439:	50                   	push   eax
c000d43a:	50                   	push   eax
c000d43b:	57                   	push   edi
c000d43c:	56                   	push   esi
c000d43d:	e8 f6 32 ff ff       	call   c0000738 <strcpy>
c000d442:	eb 41                	jmp    c000d485 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d444:	8a 07                	mov    al,BYTE PTR [edi]
c000d446:	3c 5c                	cmp    al,0x5c
c000d448:	74 04                	je     c000d44e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d44a:	3c 2f                	cmp    al,0x2f
c000d44c:	75 18                	jne    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d44e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d451:	3c 60                	cmp    al,0x60
c000d453:	7e 03                	jle    c000d458 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d455:	83 e8 20             	sub    eax,0x20
c000d458:	88 04 24             	mov    BYTE PTR [esp],al
c000d45b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d462:	50                   	push   eax
c000d463:	50                   	push   eax
c000d464:	eb 18                	jmp    c000d47e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d466:	50                   	push   eax
c000d467:	50                   	push   eax
c000d468:	55                   	push   ebp
c000d469:	56                   	push   esi
c000d46a:	e8 c9 32 ff ff       	call   c0000738 <strcpy>
c000d46f:	5a                   	pop    edx
c000d470:	59                   	pop    ecx
c000d471:	68 7c 6d 02 c0       	push   0xc0026d7c
c000d476:	56                   	push   esi
c000d477:	e8 fc 33 ff ff       	call   c0000878 <strcat>
c000d47c:	5d                   	pop    ebp
c000d47d:	58                   	pop    eax
c000d47e:	57                   	push   edi
c000d47f:	56                   	push   esi
c000d480:	e8 f3 33 ff ff       	call   c0000878 <strcat>
c000d485:	83 c4 10             	add    esp,0x10
c000d488:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d48b:	3c 60                	cmp    al,0x60
c000d48d:	7e 03                	jle    c000d492 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d48f:	83 e8 20             	sub    eax,0x20
c000d492:	88 04 24             	mov    BYTE PTR [esp],al
c000d495:	88 03                	mov    BYTE PTR [ebx],al
c000d497:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d49e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4a8:	bf 03 00 00 00       	mov    edi,0x3
c000d4ad:	b8 03 00 00 00       	mov    eax,0x3
c000d4b2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4b5:	84 d2                	test   dl,dl
c000d4b7:	0f 84 91 00 00 00    	je     c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4bd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4c0:	80 fa 5c             	cmp    dl,0x5c
c000d4c3:	74 05                	je     c000d4ca <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4c5:	80 fa 2f             	cmp    dl,0x2f
c000d4c8:	75 12                	jne    c000d4dc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4ca:	89 c5                	mov    ebp,eax
c000d4cc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4d1:	74 09                	je     c000d4dc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d3:	40                   	inc    eax
c000d4d4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4d8:	89 cf                	mov    edi,ecx
c000d4da:	eb d6                	jmp    c000d4b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4dc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4e1:	75 5b                	jne    c000d53e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4e3:	80 fa 2e             	cmp    dl,0x2e
c000d4e6:	75 56                	jne    c000d53e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4e8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4ec:	74 19                	je     c000d507 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4ee:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4f3:	74 53                	je     c000d548 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4f5:	89 f9                	mov    ecx,edi
c000d4f7:	41                   	inc    ecx
c000d4f8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d4fb:	80 fa 2f             	cmp    dl,0x2f
c000d4fe:	74 f7                	je     c000d4f7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d500:	80 fa 5c             	cmp    dl,0x5c
c000d503:	74 f2                	je     c000d4f7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d505:	eb d1                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d507:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d50c:	74 3a                	je     c000d548 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d50e:	83 f8 03             	cmp    eax,0x3
c000d511:	74 c5                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d513:	41                   	inc    ecx
c000d514:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d517:	80 fa 2f             	cmp    dl,0x2f
c000d51a:	74 f7                	je     c000d513 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d51c:	80 fa 5c             	cmp    dl,0x5c
c000d51f:	74 f2                	je     c000d513 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d521:	48                   	dec    eax
c000d522:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d526:	75 06                	jne    c000d52e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d528:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d52c:	eb f3                	jmp    c000d521 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d52e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d532:	74 07                	je     c000d53b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d534:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d538:	48                   	dec    eax
c000d539:	eb f3                	jmp    c000d52e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d53b:	40                   	inc    eax
c000d53c:	eb 9a                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d53e:	80 fa 2f             	cmp    dl,0x2f
c000d541:	74 95                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d543:	80 fa 5c             	cmp    dl,0x5c
c000d546:	74 90                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d548:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d54b:	40                   	inc    eax
c000d54c:	eb 8a                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d552:	83 ec 0c             	sub    esp,0xc
c000d555:	53                   	push   ebx
c000d556:	e8 3d 31 ff ff       	call   c0000698 <strlen>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d563:	75 26                	jne    c000d58b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d565:	83 ec 0c             	sub    esp,0xc
c000d568:	53                   	push   ebx
c000d569:	e8 2a 31 ff ff       	call   c0000698 <strlen>
c000d56e:	83 c4 10             	add    esp,0x10
c000d571:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d576:	74 26                	je     c000d59e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	53                   	push   ebx
c000d57c:	e8 17 31 ff ff       	call   c0000698 <strlen>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d589:	eb c7                	jmp    c000d552 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d58b:	83 ec 0c             	sub    esp,0xc
c000d58e:	53                   	push   ebx
c000d58f:	e8 04 31 ff ff       	call   c0000698 <strlen>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d59c:	74 c7                	je     c000d565 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d59e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5a4:	5b                   	pop    ebx
c000d5a5:	5e                   	pop    esi
c000d5a6:	5f                   	pop    edi
c000d5a7:	5d                   	pop    ebp
c000d5a8:	c3                   	ret    
c000d5a9:	90                   	nop

c000d5aa <File::File(char const*, Process*)>:
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b1:	83 ec 08             	sub    esp,0x8
c000d5b4:	6a 00                	push   0x0
c000d5b6:	50                   	push   eax
c000d5b7:	e8 1a e3 ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000d5bc:	83 c4 10             	add    esp,0x10
c000d5bf:	ba 9c 54 02 c0       	mov    edx,0xc002549c
c000d5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c8:	89 10                	mov    DWORD PTR [eax],edx
c000d5ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	83 c0 0d             	add    eax,0xd
c000d5db:	83 ec 04             	sub    esp,0x4
c000d5de:	52                   	push   edx
c000d5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e3:	50                   	push   eax
c000d5e4:	e8 17 fe ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5f3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d604:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d612:	0f b6 c0             	movzx  eax,al
c000d615:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d61c:	85 c0                	test   eax,eax
c000d61e:	74 5e                	je     c000d67e <File::File(char const*, Process*)+0xd4>
c000d620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d624:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d62a:	0f b6 c0             	movzx  eax,al
c000d62d:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d634:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d63a:	85 c0                	test   eax,eax
c000d63c:	75 40                	jne    c000d67e <File::File(char const*, Process*)+0xd4>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	68 d8 53 02 c0       	push   0xc00253d8
c000d646:	e8 f4 f9 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d652:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d658:	0f b6 c0             	movzx  eax,al
c000d65b:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	50                   	push   eax
c000d666:	e8 37 31 00 00       	call   c00107a2 <LogicalDisk::mount()>
c000d66b:	83 c4 10             	add    esp,0x10
c000d66e:	83 ec 0c             	sub    esp,0xc
c000d671:	68 6d 77 02 c0       	push   0xc002776d
c000d676:	e8 c4 f9 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	90                   	nop
c000d67f:	83 c4 0c             	add    esp,0xc
c000d682:	c3                   	ret    
c000d683:	90                   	nop

c000d684 <File::open(FileOpenMode)>:
c000d684:	53                   	push   ebx
c000d685:	b8 0b 00 00 00       	mov    eax,0xb
c000d68a:	83 ec 08             	sub    esp,0x8
c000d68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d691:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d698:	80 fa 19             	cmp    dl,0x19
c000d69b:	77 40                	ja     c000d6dd <File::open(FileOpenMode)+0x59>
c000d69d:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000d6a4:	85 d2                	test   edx,edx
c000d6a6:	74 35                	je     c000d6dd <File::open(FileOpenMode)+0x59>
c000d6a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6ae:	85 d2                	test   edx,edx
c000d6b0:	74 2b                	je     c000d6dd <File::open(FileOpenMode)+0x59>
c000d6b2:	b8 06 00 00 00       	mov    eax,0x6
c000d6b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6bb:	75 20                	jne    c000d6dd <File::open(FileOpenMode)+0x59>
c000d6bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6bf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c9:	51                   	push   ecx
c000d6ca:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6cd:	51                   	push   ecx
c000d6ce:	52                   	push   edx
c000d6cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6d2:	83 c4 10             	add    esp,0x10
c000d6d5:	85 c0                	test   eax,eax
c000d6d7:	75 04                	jne    c000d6dd <File::open(FileOpenMode)+0x59>
c000d6d9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6dd:	83 c4 08             	add    esp,0x8
c000d6e0:	5b                   	pop    ebx
c000d6e1:	c3                   	ret    

c000d6e2 <File::close()>:
c000d6e2:	53                   	push   ebx
c000d6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000d6e8:	83 ec 08             	sub    esp,0x8
c000d6eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6ef:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6f6:	80 fa 19             	cmp    dl,0x19
c000d6f9:	77 41                	ja     c000d73c <File::close()+0x5a>
c000d6fb:	8b 1c 95 60 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6da0]
c000d702:	85 db                	test   ebx,ebx
c000d704:	74 36                	je     c000d73c <File::close()+0x5a>
c000d706:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d70d:	74 2d                	je     c000d73c <File::close()+0x5a>
c000d70f:	b8 05 00 00 00       	mov    eax,0x5
c000d714:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d718:	74 22                	je     c000d73c <File::close()+0x5a>
c000d71a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d71e:	8b 04 95 60 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6da0]
c000d725:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d72b:	53                   	push   ebx
c000d72c:	53                   	push   ebx
c000d72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d72f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d735:	50                   	push   eax
c000d736:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d739:	83 c4 10             	add    esp,0x10
c000d73c:	83 c4 08             	add    esp,0x8
c000d73f:	5b                   	pop    ebx
c000d740:	c3                   	ret    
c000d741:	90                   	nop

c000d742 <File::seek(unsigned long long)>:
c000d742:	56                   	push   esi
c000d743:	53                   	push   ebx
c000d744:	b8 0b 00 00 00       	mov    eax,0xb
c000d749:	51                   	push   ecx
c000d74a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d74e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d752:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d759:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d75d:	80 fa 19             	cmp    dl,0x19
c000d760:	77 31                	ja     c000d793 <File::seek(unsigned long long)+0x51>
c000d762:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000d769:	85 d2                	test   edx,edx
c000d76b:	74 26                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d76d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d773:	85 d2                	test   edx,edx
c000d775:	74 1c                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d777:	b8 05 00 00 00       	mov    eax,0x5
c000d77c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d780:	74 11                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d782:	8b 02                	mov    eax,DWORD PTR [edx]
c000d784:	53                   	push   ebx
c000d785:	51                   	push   ecx
c000d786:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d78c:	52                   	push   edx
c000d78d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	5a                   	pop    edx
c000d794:	5b                   	pop    ebx
c000d795:	5e                   	pop    esi
c000d796:	c3                   	ret    
c000d797:	90                   	nop

c000d798 <File::tell(unsigned long long*)>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7a4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7ab:	80 fa 19             	cmp    dl,0x19
c000d7ae:	77 34                	ja     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7b0:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000d7b7:	85 d2                	test   edx,edx
c000d7b9:	74 29                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7c1:	85 d2                	test   edx,edx
c000d7c3:	74 1f                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7c5:	b8 05 00 00 00       	mov    eax,0x5
c000d7ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7ce:	74 14                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7d0:	50                   	push   eax
c000d7d1:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7dd:	52                   	push   edx
c000d7de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	83 c4 0c             	add    esp,0xc
c000d7e7:	c3                   	ret    

c000d7e8 <File::rewind()>:
c000d7e8:	83 ec 10             	sub    esp,0x10
c000d7eb:	6a 00                	push   0x0
c000d7ed:	6a 00                	push   0x0
c000d7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f3:	e8 4a ff ff ff       	call   c000d742 <File::seek(unsigned long long)>
c000d7f8:	83 c4 1c             	add    esp,0x1c
c000d7fb:	c3                   	ret    

c000d7fc <File::unlink()>:
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	b8 0b 00 00 00       	mov    eax,0xb
c000d804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d808:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d80f:	80 f9 19             	cmp    cl,0x19
c000d812:	77 2f                	ja     c000d843 <File::unlink()+0x47>
c000d814:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000d81b:	85 c9                	test   ecx,ecx
c000d81d:	74 24                	je     c000d843 <File::unlink()+0x47>
c000d81f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d825:	85 c9                	test   ecx,ecx
c000d827:	74 1a                	je     c000d843 <File::unlink()+0x47>
c000d829:	b8 06 00 00 00       	mov    eax,0x6
c000d82e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d832:	75 0f                	jne    c000d843 <File::unlink()+0x47>
c000d834:	83 c2 0d             	add    edx,0xd
c000d837:	50                   	push   eax
c000d838:	50                   	push   eax
c000d839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d83b:	52                   	push   edx
c000d83c:	51                   	push   ecx
c000d83d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	83 c4 0c             	add    esp,0xc
c000d846:	c3                   	ret    
c000d847:	90                   	nop

c000d848 <File::rename(char const*)>:
c000d848:	83 ec 0c             	sub    esp,0xc
c000d84b:	b8 0b 00 00 00       	mov    eax,0xb
c000d850:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d85b:	80 f9 19             	cmp    cl,0x19
c000d85e:	77 32                	ja     c000d892 <File::rename(char const*)+0x4a>
c000d860:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000d867:	85 c9                	test   ecx,ecx
c000d869:	74 27                	je     c000d892 <File::rename(char const*)+0x4a>
c000d86b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d871:	85 c9                	test   ecx,ecx
c000d873:	74 1d                	je     c000d892 <File::rename(char const*)+0x4a>
c000d875:	b8 06 00 00 00       	mov    eax,0x6
c000d87a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d87e:	75 12                	jne    c000d892 <File::rename(char const*)+0x4a>
c000d880:	83 c2 0d             	add    edx,0xd
c000d883:	50                   	push   eax
c000d884:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d88a:	52                   	push   edx
c000d88b:	51                   	push   ecx
c000d88c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d88f:	83 c4 10             	add    esp,0x10
c000d892:	83 c4 0c             	add    esp,0xc
c000d895:	c3                   	ret    

c000d896 <File::chfatattr(unsigned char, unsigned char)>:
c000d896:	57                   	push   edi
c000d897:	b8 0b 00 00 00       	mov    eax,0xb
c000d89c:	56                   	push   esi
c000d89d:	53                   	push   ebx
c000d89e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8b1:	80 f9 19             	cmp    cl,0x19
c000d8b4:	77 37                	ja     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8b6:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000d8bd:	85 c9                	test   ecx,ecx
c000d8bf:	74 2c                	je     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8c7:	85 c9                	test   ecx,ecx
c000d8c9:	74 22                	je     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8cb:	b8 06 00 00 00       	mov    eax,0x6
c000d8d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8d4:	75 17                	jne    c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8d8:	89 f0                	mov    eax,esi
c000d8da:	83 c2 0d             	add    edx,0xd
c000d8dd:	0f b6 f0             	movzx  esi,al
c000d8e0:	0f b6 db             	movzx  ebx,bl
c000d8e3:	56                   	push   esi
c000d8e4:	53                   	push   ebx
c000d8e5:	52                   	push   edx
c000d8e6:	51                   	push   ecx
c000d8e7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	5b                   	pop    ebx
c000d8ee:	5e                   	pop    esi
c000d8ef:	5f                   	pop    edi
c000d8f0:	c3                   	ret    
c000d8f1:	90                   	nop

c000d8f2 <File::exists()>:
c000d8f2:	83 ec 0c             	sub    esp,0xc
c000d8f5:	31 c0                	xor    eax,eax
c000d8f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d902:	80 f9 19             	cmp    cl,0x19
c000d905:	77 24                	ja     c000d92b <File::exists()+0x39>
c000d907:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000d90e:	85 c9                	test   ecx,ecx
c000d910:	74 19                	je     c000d92b <File::exists()+0x39>
c000d912:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d918:	85 c9                	test   ecx,ecx
c000d91a:	74 0f                	je     c000d92b <File::exists()+0x39>
c000d91c:	83 c2 0d             	add    edx,0xd
c000d91f:	50                   	push   eax
c000d920:	50                   	push   eax
c000d921:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d923:	52                   	push   edx
c000d924:	51                   	push   ecx
c000d925:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	83 c4 0c             	add    esp,0xc
c000d92e:	c3                   	ret    
c000d92f:	90                   	nop

c000d930 <File::stat(unsigned long long*, bool*)>:
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	50                   	push   eax
c000d933:	b8 0b 00 00 00       	mov    eax,0xb
c000d938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d93c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d940:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d947:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d94b:	80 f9 19             	cmp    cl,0x19
c000d94e:	77 3d                	ja     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d950:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000d957:	85 c9                	test   ecx,ecx
c000d959:	74 32                	je     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d95b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d961:	85 c9                	test   ecx,ecx
c000d963:	74 28                	je     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d967:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d96b:	74 13                	je     c000d980 <File::stat(unsigned long long*, bool*)+0x50>
c000d96d:	83 ec 04             	sub    esp,0x4
c000d970:	56                   	push   esi
c000d971:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d977:	51                   	push   ecx
c000d978:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d97b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d97e:	eb 0a                	jmp    c000d98a <File::stat(unsigned long long*, bool*)+0x5a>
c000d980:	53                   	push   ebx
c000d981:	83 c2 0d             	add    edx,0xd
c000d984:	56                   	push   esi
c000d985:	52                   	push   edx
c000d986:	51                   	push   ecx
c000d987:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d98a:	83 c4 10             	add    esp,0x10
c000d98d:	5a                   	pop    edx
c000d98e:	5b                   	pop    ebx
c000d98f:	5e                   	pop    esi
c000d990:	c3                   	ret    

c000d991 <Fs::setcwd(Process*, char*)>:
c000d991:	55                   	push   ebp
c000d992:	57                   	push   edi
c000d993:	56                   	push   esi
c000d994:	53                   	push   ebx
c000d995:	81 ec 20 02 00 00    	sub    esp,0x220
c000d99b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9a2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9a8:	57                   	push   edi
c000d9a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9b0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9b4:	56                   	push   esi
c000d9b5:	e8 46 fa ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9ba:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9bd:	e8 d6 2c ff ff       	call   c0000698 <strlen>
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	83 f8 02             	cmp    eax,0x2
c000d9c8:	77 15                	ja     c000d9df <Fs::setcwd(Process*, char*)+0x4e>
c000d9ca:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9cf:	83 eb 41             	sub    ebx,0x41
c000d9d2:	8b 04 9d 60 92 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6da0]
c000d9d9:	85 c0                	test   eax,eax
c000d9db:	75 1c                	jne    c000d9f9 <Fs::setcwd(Process*, char*)+0x68>
c000d9dd:	eb 4c                	jmp    c000da2b <Fs::setcwd(Process*, char*)+0x9a>
c000d9df:	83 ec 0c             	sub    esp,0xc
c000d9e2:	56                   	push   esi
c000d9e3:	e8 b0 2c ff ff       	call   c0000698 <strlen>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	83 f8 03             	cmp    eax,0x3
c000d9ee:	75 74                	jne    c000da64 <Fs::setcwd(Process*, char*)+0xd3>
c000d9f0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9f5:	75 6d                	jne    c000da64 <Fs::setcwd(Process*, char*)+0xd3>
c000d9f7:	eb d1                	jmp    c000d9ca <Fs::setcwd(Process*, char*)+0x39>
c000d9f9:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da00:	75 29                	jne    c000da2b <Fs::setcwd(Process*, char*)+0x9a>
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	68 b0 53 02 c0       	push   0xc00253b0
c000da0a:	e8 30 f6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000da0f:	5a                   	pop    edx
c000da10:	ff 34 9d 60 92 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6da0]
c000da17:	e8 86 2d 00 00       	call   c00107a2 <LogicalDisk::mount()>
c000da1c:	c7 04 24 6d 77 02 c0 	mov    DWORD PTR [esp],0xc002776d
c000da23:	e8 17 f6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000da28:	83 c4 10             	add    esp,0x10
c000da2b:	b8 03 00 00 00       	mov    eax,0x3
c000da30:	83 fb 19             	cmp    ebx,0x19
c000da33:	0f 87 c6 00 00 00    	ja     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da39:	8b 14 9d 60 92 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6da0]
c000da40:	b8 05 00 00 00       	mov    eax,0x5
c000da45:	85 d2                	test   edx,edx
c000da47:	0f 84 b2 00 00 00    	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da4d:	b8 06 00 00 00       	mov    eax,0x6
c000da52:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da59:	0f 85 92 00 00 00    	jne    c000daf1 <Fs::setcwd(Process*, char*)+0x160>
c000da5f:	e9 9b 00 00 00       	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da64:	83 ec 0c             	sub    esp,0xc
c000da67:	68 14 01 00 00       	push   0x114
c000da6c:	e8 e2 c2 ff ff       	call   c0009d53 <malloc>
c000da71:	83 c4 0c             	add    esp,0xc
c000da74:	89 c3                	mov    ebx,eax
c000da76:	55                   	push   ebp
c000da77:	56                   	push   esi
c000da78:	50                   	push   eax
c000da79:	e8 2c fb ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c000da7e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da83:	83 c4 0c             	add    esp,0xc
c000da86:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da8a:	50                   	push   eax
c000da8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da8f:	50                   	push   eax
c000da90:	53                   	push   ebx
c000da91:	e8 9a fe ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c000da96:	83 c4 10             	add    esp,0x10
c000da99:	83 f8 02             	cmp    eax,0x2
c000da9c:	74 04                	je     c000daa2 <Fs::setcwd(Process*, char*)+0x111>
c000da9e:	85 c0                	test   eax,eax
c000daa0:	74 1c                	je     c000dabe <Fs::setcwd(Process*, char*)+0x12d>
c000daa2:	b8 01 00 00 00       	mov    eax,0x1
c000daa7:	85 db                	test   ebx,ebx
c000daa9:	74 54                	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000daab:	83 ec 0c             	sub    esp,0xc
c000daae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dab0:	53                   	push   ebx
c000dab1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	b8 01 00 00 00       	mov    eax,0x1
c000dabc:	eb 41                	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dabe:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dac3:	75 1c                	jne    c000dae1 <Fs::setcwd(Process*, char*)+0x150>
c000dac5:	b8 02 00 00 00       	mov    eax,0x2
c000daca:	85 db                	test   ebx,ebx
c000dacc:	74 31                	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad3:	53                   	push   ebx
c000dad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	b8 02 00 00 00       	mov    eax,0x2
c000dadf:	eb 1e                	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dae1:	85 db                	test   ebx,ebx
c000dae3:	74 0c                	je     c000daf1 <Fs::setcwd(Process*, char*)+0x160>
c000dae5:	83 ec 0c             	sub    esp,0xc
c000dae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daea:	53                   	push   ebx
c000daeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daee:	83 c4 10             	add    esp,0x10
c000daf1:	50                   	push   eax
c000daf2:	50                   	push   eax
c000daf3:	56                   	push   esi
c000daf4:	57                   	push   edi
c000daf5:	e8 3e 2c ff ff       	call   c0000738 <strcpy>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	31 c0                	xor    eax,eax
c000daff:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db05:	5b                   	pop    ebx
c000db06:	5e                   	pop    esi
c000db07:	5f                   	pop    edi
c000db08:	5d                   	pop    ebp
c000db09:	c3                   	ret    

c000db0a <Directory::Directory(char const*, Process*)>:
c000db0a:	83 ec 0c             	sub    esp,0xc
c000db0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db11:	83 ec 08             	sub    esp,0x8
c000db14:	6a 00                	push   0x0
c000db16:	50                   	push   eax
c000db17:	e8 ba dd ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000db1c:	83 c4 10             	add    esp,0x10
c000db1f:	ba b8 54 02 c0       	mov    edx,0xc00254b8
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	89 10                	mov    DWORD PTR [eax],edx
c000db2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	83 c0 0d             	add    eax,0xd
c000db3b:	83 ec 04             	sub    esp,0x4
c000db3e:	52                   	push   edx
c000db3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db43:	50                   	push   eax
c000db44:	e8 b7 f8 ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db50:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db53:	8d 50 bf             	lea    edx,[eax-0x41]
c000db56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db64:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db72:	0f b6 c0             	movzx  eax,al
c000db75:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000db7c:	85 c0                	test   eax,eax
c000db7e:	74 5e                	je     c000dbde <Directory::Directory(char const*, Process*)+0xd4>
c000db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db84:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db8a:	0f b6 c0             	movzx  eax,al
c000db8d:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000db94:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db9a:	85 c0                	test   eax,eax
c000db9c:	75 40                	jne    c000dbde <Directory::Directory(char const*, Process*)+0xd4>
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	68 00 54 02 c0       	push   0xc0025400
c000dba6:	e8 94 f4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbb8:	0f b6 c0             	movzx  eax,al
c000dbbb:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c000dbc2:	83 ec 0c             	sub    esp,0xc
c000dbc5:	50                   	push   eax
c000dbc6:	e8 d7 2b 00 00       	call   c00107a2 <LogicalDisk::mount()>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	68 6d 77 02 c0       	push   0xc002776d
c000dbd6:	e8 64 f4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000dbdb:	83 c4 10             	add    esp,0x10
c000dbde:	90                   	nop
c000dbdf:	83 c4 0c             	add    esp,0xc
c000dbe2:	c3                   	ret    
c000dbe3:	90                   	nop

c000dbe4 <Directory::open()>:
c000dbe4:	53                   	push   ebx
c000dbe5:	b8 0b 00 00 00       	mov    eax,0xb
c000dbea:	83 ec 08             	sub    esp,0x8
c000dbed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dbf8:	80 fa 19             	cmp    dl,0x19
c000dbfb:	77 3d                	ja     c000dc3a <Directory::open()+0x56>
c000dbfd:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000dc04:	85 d2                	test   edx,edx
c000dc06:	74 32                	je     c000dc3a <Directory::open()+0x56>
c000dc08:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc0e:	85 d2                	test   edx,edx
c000dc10:	74 28                	je     c000dc3a <Directory::open()+0x56>
c000dc12:	b8 06 00 00 00       	mov    eax,0x6
c000dc17:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc1b:	75 1d                	jne    c000dc3a <Directory::open()+0x56>
c000dc1d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc23:	50                   	push   eax
c000dc24:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc26:	51                   	push   ecx
c000dc27:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc2a:	51                   	push   ecx
c000dc2b:	52                   	push   edx
c000dc2c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	85 c0                	test   eax,eax
c000dc34:	75 04                	jne    c000dc3a <Directory::open()+0x56>
c000dc36:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc3a:	83 c4 08             	add    esp,0x8
c000dc3d:	5b                   	pop    ebx
c000dc3e:	c3                   	ret    
c000dc3f:	90                   	nop

c000dc40 <Directory::close()>:
c000dc40:	53                   	push   ebx
c000dc41:	b8 0b 00 00 00       	mov    eax,0xb
c000dc46:	83 ec 08             	sub    esp,0x8
c000dc49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc4d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc54:	80 fa 19             	cmp    dl,0x19
c000dc57:	77 41                	ja     c000dc9a <Directory::close()+0x5a>
c000dc59:	8b 1c 95 60 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6da0]
c000dc60:	85 db                	test   ebx,ebx
c000dc62:	74 36                	je     c000dc9a <Directory::close()+0x5a>
c000dc64:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc6b:	74 2d                	je     c000dc9a <Directory::close()+0x5a>
c000dc6d:	b8 05 00 00 00       	mov    eax,0x5
c000dc72:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc76:	74 22                	je     c000dc9a <Directory::close()+0x5a>
c000dc78:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc7c:	8b 04 95 60 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6da0]
c000dc83:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc89:	53                   	push   ebx
c000dc8a:	53                   	push   ebx
c000dc8b:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc93:	50                   	push   eax
c000dc94:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	83 c4 08             	add    esp,0x8
c000dc9d:	5b                   	pop    ebx
c000dc9e:	c3                   	ret    
c000dc9f:	90                   	nop

c000dca0 <Directory::unlink()>:
c000dca0:	83 ec 0c             	sub    esp,0xc
c000dca3:	b8 0b 00 00 00       	mov    eax,0xb
c000dca8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcb3:	80 f9 19             	cmp    cl,0x19
c000dcb6:	77 2f                	ja     c000dce7 <Directory::unlink()+0x47>
c000dcb8:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000dcbf:	85 c9                	test   ecx,ecx
c000dcc1:	74 24                	je     c000dce7 <Directory::unlink()+0x47>
c000dcc3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcc9:	85 c9                	test   ecx,ecx
c000dccb:	74 1a                	je     c000dce7 <Directory::unlink()+0x47>
c000dccd:	b8 06 00 00 00       	mov    eax,0x6
c000dcd2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcd6:	75 0f                	jne    c000dce7 <Directory::unlink()+0x47>
c000dcd8:	83 c2 0d             	add    edx,0xd
c000dcdb:	50                   	push   eax
c000dcdc:	50                   	push   eax
c000dcdd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcdf:	52                   	push   edx
c000dce0:	51                   	push   ecx
c000dce1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dce4:	83 c4 10             	add    esp,0x10
c000dce7:	83 c4 0c             	add    esp,0xc
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <Directory::rename(char const*)>:
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	b8 0b 00 00 00       	mov    eax,0xb
c000dcf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcf8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcff:	80 f9 19             	cmp    cl,0x19
c000dd02:	77 32                	ja     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd04:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000dd0b:	85 c9                	test   ecx,ecx
c000dd0d:	74 27                	je     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd15:	85 c9                	test   ecx,ecx
c000dd17:	74 1d                	je     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd19:	b8 06 00 00 00       	mov    eax,0x6
c000dd1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd22:	75 12                	jne    c000dd36 <Directory::rename(char const*)+0x4a>
c000dd24:	83 c2 0d             	add    edx,0xd
c000dd27:	50                   	push   eax
c000dd28:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd2e:	52                   	push   edx
c000dd2f:	51                   	push   ecx
c000dd30:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd33:	83 c4 10             	add    esp,0x10
c000dd36:	83 c4 0c             	add    esp,0xc
c000dd39:	c3                   	ret    

c000dd3a <Directory::exists()>:
c000dd3a:	83 ec 0c             	sub    esp,0xc
c000dd3d:	31 c0                	xor    eax,eax
c000dd3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd43:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd4a:	80 f9 19             	cmp    cl,0x19
c000dd4d:	77 24                	ja     c000dd73 <Directory::exists()+0x39>
c000dd4f:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000dd56:	85 c9                	test   ecx,ecx
c000dd58:	74 19                	je     c000dd73 <Directory::exists()+0x39>
c000dd5a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd60:	85 c9                	test   ecx,ecx
c000dd62:	74 0f                	je     c000dd73 <Directory::exists()+0x39>
c000dd64:	83 c2 0d             	add    edx,0xd
c000dd67:	50                   	push   eax
c000dd68:	50                   	push   eax
c000dd69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd6b:	52                   	push   edx
c000dd6c:	51                   	push   ecx
c000dd6d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd70:	83 c4 10             	add    esp,0x10
c000dd73:	83 c4 0c             	add    esp,0xc
c000dd76:	c3                   	ret    
c000dd77:	90                   	nop

c000dd78 <Directory::read(dirent*)>:
c000dd78:	83 ec 1c             	sub    esp,0x1c
c000dd7b:	b8 0b 00 00 00       	mov    eax,0xb
c000dd80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd84:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd8b:	80 fa 19             	cmp    dl,0x19
c000dd8e:	77 30                	ja     c000ddc0 <Directory::read(dirent*)+0x48>
c000dd90:	8b 14 95 60 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6da0]
c000dd97:	85 d2                	test   edx,edx
c000dd99:	74 25                	je     c000ddc0 <Directory::read(dirent*)+0x48>
c000dd9b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dda2:	74 1c                	je     c000ddc0 <Directory::read(dirent*)+0x48>
c000dda4:	83 ec 0c             	sub    esp,0xc
c000dda7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dda9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddad:	52                   	push   edx
c000ddae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddb2:	6a 00                	push   0x0
c000ddb4:	68 10 01 00 00       	push   0x110
c000ddb9:	51                   	push   ecx
c000ddba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddbd:	83 c4 20             	add    esp,0x20
c000ddc0:	83 c4 1c             	add    esp,0x1c
c000ddc3:	c3                   	ret    

c000ddc4 <Directory::create()>:
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	b8 0b 00 00 00       	mov    eax,0xb
c000ddcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddd7:	80 f9 19             	cmp    cl,0x19
c000ddda:	77 2f                	ja     c000de0b <Directory::create()+0x47>
c000dddc:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c000dde3:	85 c9                	test   ecx,ecx
c000dde5:	74 24                	je     c000de0b <Directory::create()+0x47>
c000dde7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dded:	85 c9                	test   ecx,ecx
c000ddef:	74 1a                	je     c000de0b <Directory::create()+0x47>
c000ddf1:	b8 06 00 00 00       	mov    eax,0x6
c000ddf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddfa:	75 0f                	jne    c000de0b <Directory::create()+0x47>
c000ddfc:	83 c2 0d             	add    edx,0xd
c000ddff:	50                   	push   eax
c000de00:	50                   	push   eax
c000de01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de03:	52                   	push   edx
c000de04:	51                   	push   ecx
c000de05:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	83 c4 0c             	add    esp,0xc
c000de0e:	c3                   	ret    
c000de0f:	90                   	nop

c000de10 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de10:	b8 0a 00 00 00       	mov    eax,0xa
c000de15:	c3                   	ret    
c000de16:	66 90                	xchg   ax,ax

c000de18 <Bus::Bus(char const*)>:
c000de18:	83 ec 0c             	sub    esp,0xc
c000de1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1f:	83 ec 08             	sub    esp,0x8
c000de22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de26:	50                   	push   eax
c000de27:	e8 8a 09 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000de2c:	83 c4 10             	add    esp,0x10
c000de2f:	ba d4 54 02 c0       	mov    edx,0xc00254d4
c000de34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de38:	89 10                	mov    DWORD PTR [eax],edx
c000de3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de48:	90                   	nop
c000de49:	83 c4 0c             	add    esp,0xc
c000de4c:	c3                   	ret    
c000de4d:	90                   	nop
c000de4e:	66 90                	xchg   ax,ax

c000de50 <Bus::~Bus()>:
c000de50:	83 ec 0c             	sub    esp,0xc
c000de53:	ba d4 54 02 c0       	mov    edx,0xc00254d4
c000de58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de5c:	89 10                	mov    DWORD PTR [eax],edx
c000de5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de62:	83 ec 0c             	sub    esp,0xc
c000de65:	50                   	push   eax
c000de66:	e8 15 06 00 00       	call   c000e480 <Device::~Device()>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	90                   	nop
c000de6f:	83 c4 0c             	add    esp,0xc
c000de72:	c3                   	ret    
c000de73:	90                   	nop

c000de74 <Bus::~Bus()>:
c000de74:	83 ec 0c             	sub    esp,0xc
c000de77:	83 ec 0c             	sub    esp,0xc
c000de7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7e:	e8 cd ff ff ff       	call   c000de50 <Bus::~Bus()>
c000de83:	83 c4 10             	add    esp,0x10
c000de86:	83 ec 08             	sub    esp,0x8
c000de89:	68 58 01 00 00       	push   0x158
c000de8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de92:	e8 c7 f0 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	83 c4 0c             	add    esp,0xc
c000de9d:	c3                   	ret    
c000de9e:	66 90                	xchg   ax,ax

c000dea0 <Buzzer::Buzzer(char const*)>:
c000dea0:	83 ec 0c             	sub    esp,0xc
c000dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea7:	83 ec 08             	sub    esp,0x8
c000deaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deae:	50                   	push   eax
c000deaf:	e8 02 09 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	ba 00 55 02 c0       	mov    edx,0xc0025500
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ded0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dede:	90                   	nop
c000dedf:	83 c4 0c             	add    esp,0xc
c000dee2:	c3                   	ret    
c000dee3:	90                   	nop

c000dee4 <Buzzer::~Buzzer()>:
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	ba 00 55 02 c0       	mov    edx,0xc0025500
c000deec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def0:	89 10                	mov    DWORD PTR [eax],edx
c000def2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	50                   	push   eax
c000defa:	e8 81 05 00 00       	call   c000e480 <Device::~Device()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	90                   	nop
c000df03:	83 c4 0c             	add    esp,0xc
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <Buzzer::~Buzzer()>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df12:	e8 cd ff ff ff       	call   c000dee4 <Buzzer::~Buzzer()>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	83 ec 08             	sub    esp,0x8
c000df1d:	68 5c 01 00 00       	push   0x15c
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 33 f0 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 c4 0c             	add    esp,0xc
c000df31:	c3                   	ret    

c000df32 <Buzzer::stop()>:
c000df32:	83 ec 14             	sub    esp,0x14
c000df35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df39:	8b 10                	mov    edx,DWORD PTR [eax]
c000df3b:	6a 00                	push   0x0
c000df3d:	50                   	push   eax
c000df3e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df41:	83 c4 1c             	add    esp,0x1c
c000df44:	c3                   	ret    

c000df45 <beepThread(void*)>:
c000df45:	53                   	push   ebx
c000df46:	83 ec 08             	sub    esp,0x8
c000df49:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000df4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df52:	48                   	dec    eax
c000df53:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000df58:	75 02                	jne    c000df5c <beepThread(void*)+0x17>
c000df5a:	fb                   	sti    
c000df5b:	90                   	nop
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df66:	50                   	push   eax
c000df67:	e8 ec b0 00 00       	call   c0019058 <milliTenthSleep(unsigned int)>
c000df6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df6f:	e8 be ff ff ff       	call   c000df32 <Buzzer::stop()>
c000df74:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df7c:	83 c4 18             	add    esp,0x18
c000df7f:	5b                   	pop    ebx
c000df80:	e9 d3 af 00 00       	jmp    c0018f58 <blockTask(TaskState)>
c000df85:	90                   	nop

c000df86 <Buzzer::beep(int, int, bool)>:
c000df86:	57                   	push   edi
c000df87:	56                   	push   esi
c000df88:	53                   	push   ebx
c000df89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df8d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df91:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000df95:	50                   	push   eax
c000df96:	50                   	push   eax
c000df97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9d:	53                   	push   ebx
c000df9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	89 f8                	mov    eax,edi
c000dfa6:	84 c0                	test   al,al
c000dfa8:	74 1e                	je     c000dfc8 <Buzzer::beep(int, int, bool)+0x42>
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	6b f6 0a             	imul   esi,esi,0xa
c000dfb0:	56                   	push   esi
c000dfb1:	e8 a2 b0 00 00       	call   c0019058 <milliTenthSleep(unsigned int)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfbd:	5b                   	pop    ebx
c000dfbe:	5e                   	pop    esi
c000dfbf:	5f                   	pop    edi
c000dfc0:	e9 6d ff ff ff       	jmp    c000df32 <Buzzer::stop()>
c000dfc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc8:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfce:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000dfd3:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dfdb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfdf:	c7 44 24 14 45 df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df45
c000dfe7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfeb:	5b                   	pop    ebx
c000dfec:	5e                   	pop    esi
c000dfed:	5f                   	pop    edi
c000dfee:	e9 51 ab 00 00       	jmp    c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c000dff3:	90                   	nop

c000dff4 <User::loadClockSettings(int)>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 14             	sub    esp,0x14
c000dff8:	68 14 01 00 00       	push   0x114
c000dffd:	e8 51 bd ff ff       	call   c0009d53 <malloc>
c000e002:	83 c4 0c             	add    esp,0xc
c000e005:	89 c3                	mov    ebx,eax
c000e007:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c000e00d:	68 28 55 02 c0       	push   0xc0025528
c000e012:	50                   	push   eax
c000e013:	e8 92 f5 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c000e018:	58                   	pop    eax
c000e019:	5a                   	pop    edx
c000e01a:	6a 01                	push   0x1
c000e01c:	53                   	push   ebx
c000e01d:	e8 62 f6 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c000e022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e025:	e8 b8 f6 ff ff       	call   c000d6e2 <File::close()>
c000e02a:	83 c4 10             	add    esp,0x10
c000e02d:	85 db                	test   ebx,ebx
c000e02f:	74 0f                	je     c000e040 <User::loadClockSettings(int)+0x4c>
c000e031:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e033:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e037:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e03a:	83 c4 08             	add    esp,0x8
c000e03d:	5b                   	pop    ebx
c000e03e:	ff e0                	jmp    eax
c000e040:	83 c4 08             	add    esp,0x8
c000e043:	5b                   	pop    ebx
c000e044:	c3                   	ret    
c000e045:	90                   	nop

c000e046 <Clock::Clock(char const*)>:
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04d:	83 ec 08             	sub    esp,0x8
c000e050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e054:	50                   	push   eax
c000e055:	e8 5c 07 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000e05a:	83 c4 10             	add    esp,0x10
c000e05d:	ba 50 55 02 c0       	mov    edx,0xc0025550
c000e062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e066:	89 10                	mov    DWORD PTR [eax],edx
c000e068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e076:	90                   	nop
c000e077:	83 c4 0c             	add    esp,0xc
c000e07a:	c3                   	ret    
c000e07b:	90                   	nop

c000e07c <Clock::~Clock()>:
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	ba 50 55 02 c0       	mov    edx,0xc0025550
c000e084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e088:	89 10                	mov    DWORD PTR [eax],edx
c000e08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08e:	83 ec 0c             	sub    esp,0xc
c000e091:	50                   	push   eax
c000e092:	e8 e9 03 00 00       	call   c000e480 <Device::~Device()>
c000e097:	83 c4 10             	add    esp,0x10
c000e09a:	90                   	nop
c000e09b:	83 c4 0c             	add    esp,0xc
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <Clock::~Clock()>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0aa:	e8 cd ff ff ff       	call   c000e07c <Clock::~Clock()>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	68 58 01 00 00       	push   0x158
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	e8 9b ee ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 c4 0c             	add    esp,0xc
c000e0c9:	c3                   	ret    

c000e0ca <Clock::timeInSecondsLocal()>:
c000e0ca:	53                   	push   ebx
c000e0cb:	83 ec 14             	sub    esp,0x14
c000e0ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0d4:	50                   	push   eax
c000e0d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0d8:	0f b6 0d dc 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028ddc
c000e0df:	03 0d e0 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028de0
c000e0e5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0eb:	89 cb                	mov    ebx,ecx
c000e0ed:	c1 fb 1f             	sar    ebx,0x1f
c000e0f0:	01 c8                	add    eax,ecx
c000e0f2:	11 da                	adc    edx,ebx
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	31 c9                	xor    ecx,ecx
c000e0f9:	80 3d dd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028ddd,0x0
c000e100:	74 05                	je     c000e107 <Clock::timeInSecondsLocal()+0x3d>
c000e102:	b9 08 07 00 00       	mov    ecx,0x708
c000e107:	31 db                	xor    ebx,ebx
c000e109:	01 c8                	add    eax,ecx
c000e10b:	11 da                	adc    edx,ebx
c000e10d:	83 c4 08             	add    esp,0x8
c000e110:	5b                   	pop    ebx
c000e111:	c3                   	ret    

c000e112 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e112:	57                   	push   edi
c000e113:	56                   	push   esi
c000e114:	53                   	push   ebx
c000e115:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e119:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e11d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e11f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e123:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e126:	0f b6 05 dc 8d 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ddc
c000e12d:	03 05 e0 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028de0
c000e133:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e139:	99                   	cdq    
c000e13a:	29 c6                	sub    esi,eax
c000e13c:	19 d7                	sbb    edi,edx
c000e13e:	89 f0                	mov    eax,esi
c000e140:	89 fa                	mov    edx,edi
c000e142:	31 f6                	xor    esi,esi
c000e144:	80 3d dd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028ddd,0x0
c000e14b:	74 05                	je     c000e152 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e14d:	be 08 07 00 00       	mov    esi,0x708
c000e152:	31 ff                	xor    edi,edi
c000e154:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e158:	29 f0                	sub    eax,esi
c000e15a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e15e:	19 fa                	sbb    edx,edi
c000e160:	89 d8                	mov    eax,ebx
c000e162:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e166:	5b                   	pop    ebx
c000e167:	5e                   	pop    esi
c000e168:	5f                   	pop    edi
c000e169:	ff e0                	jmp    eax

c000e16b <datetimeToSeconds(datetime_t)>:
c000e16b:	55                   	push   ebp
c000e16c:	57                   	push   edi
c000e16d:	56                   	push   esi
c000e16e:	53                   	push   ebx
c000e16f:	83 ec 14             	sub    esp,0x14
c000e172:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e176:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e17a:	89 d3                	mov    ebx,edx
c000e17c:	0f b6 c6             	movzx  eax,dh
c000e17f:	c1 eb 10             	shr    ebx,0x10
c000e182:	48                   	dec    eax
c000e183:	66 81 eb 6c 07       	sub    bx,0x76c
c000e188:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e18c:	0f b6 f5             	movzx  esi,ch
c000e18f:	89 cf                	mov    edi,ecx
c000e191:	6b f6 3c             	imul   esi,esi,0x3c
c000e194:	c1 ef 10             	shr    edi,0x10
c000e197:	0f b6 c9             	movzx  ecx,cl
c000e19a:	89 f8                	mov    eax,edi
c000e19c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1a2:	0f b6 f8             	movzx  edi,al
c000e1a5:	0f b6 d2             	movzx  edx,dl
c000e1a8:	01 fe                	add    esi,edi
c000e1aa:	01 f1                	add    ecx,esi
c000e1ac:	0f b7 f3             	movzx  esi,bx
c000e1af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1b3:	c1 f9 1f             	sar    ecx,0x1f
c000e1b6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1bf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1c4:	8b 0c 8d a0 55 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdaa60]
c000e1cb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1cf:	76 29                	jbe    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1d1:	f6 c3 03             	test   bl,0x3
c000e1d4:	75 24                	jne    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1d6:	31 d2                	xor    edx,edx
c000e1d8:	bf 64 00 00 00       	mov    edi,0x64
c000e1dd:	89 d8                	mov    eax,ebx
c000e1df:	66 f7 f7             	div    di
c000e1e2:	66 85 d2             	test   dx,dx
c000e1e5:	75 12                	jne    c000e1f9 <datetimeToSeconds(datetime_t)+0x8e>
c000e1e7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e1ed:	bf 90 01 00 00       	mov    edi,0x190
c000e1f2:	99                   	cdq    
c000e1f3:	f7 ff                	idiv   edi
c000e1f5:	85 d2                	test   edx,edx
c000e1f7:	75 01                	jne    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1f9:	41                   	inc    ecx
c000e1fa:	66 83 fb 46          	cmp    bx,0x46
c000e1fe:	76 45                	jbe    c000e245 <datetimeToSeconds(datetime_t)+0xda>
c000e200:	bb 46 00 00 00       	mov    ebx,0x46
c000e205:	bf 64 00 00 00       	mov    edi,0x64
c000e20a:	bd 90 01 00 00       	mov    ebp,0x190
c000e20f:	b8 6d 01 00 00       	mov    eax,0x16d
c000e214:	f6 c3 03             	test   bl,0x3
c000e217:	75 23                	jne    c000e23c <datetimeToSeconds(datetime_t)+0xd1>
c000e219:	89 d8                	mov    eax,ebx
c000e21b:	99                   	cdq    
c000e21c:	f7 ff                	idiv   edi
c000e21e:	b8 6e 01 00 00       	mov    eax,0x16e
c000e223:	85 d2                	test   edx,edx
c000e225:	75 15                	jne    c000e23c <datetimeToSeconds(datetime_t)+0xd1>
c000e227:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e22d:	99                   	cdq    
c000e22e:	f7 fd                	idiv   ebp
c000e230:	83 fa 01             	cmp    edx,0x1
c000e233:	19 c0                	sbb    eax,eax
c000e235:	f7 d0                	not    eax
c000e237:	05 6e 01 00 00       	add    eax,0x16e
c000e23c:	01 c1                	add    ecx,eax
c000e23e:	43                   	inc    ebx
c000e23f:	39 f3                	cmp    ebx,esi
c000e241:	7c cc                	jl     c000e20f <datetimeToSeconds(datetime_t)+0xa4>
c000e243:	eb 35                	jmp    c000e27a <datetimeToSeconds(datetime_t)+0x10f>
c000e245:	74 33                	je     c000e27a <datetimeToSeconds(datetime_t)+0x10f>
c000e247:	b8 45 00 00 00       	mov    eax,0x45
c000e24c:	89 c2                	mov    edx,eax
c000e24e:	83 e2 03             	and    edx,0x3
c000e251:	39 f0                	cmp    eax,esi
c000e253:	7e 0f                	jle    c000e264 <datetimeToSeconds(datetime_t)+0xf9>
c000e255:	83 fa 01             	cmp    edx,0x1
c000e258:	19 d2                	sbb    edx,edx
c000e25a:	48                   	dec    eax
c000e25b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e262:	eb e8                	jmp    c000e24c <datetimeToSeconds(datetime_t)+0xe1>
c000e264:	b8 6d 01 00 00       	mov    eax,0x16d
c000e269:	85 d2                	test   edx,edx
c000e26b:	75 0b                	jne    c000e278 <datetimeToSeconds(datetime_t)+0x10d>
c000e26d:	66 83 fb 01          	cmp    bx,0x1
c000e271:	19 c0                	sbb    eax,eax
c000e273:	05 6e 01 00 00       	add    eax,0x16e
c000e278:	29 c1                	sub    ecx,eax
c000e27a:	b8 80 51 01 00       	mov    eax,0x15180
c000e27f:	f7 e9                	imul   ecx
c000e281:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e285:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e289:	83 c4 14             	add    esp,0x14
c000e28c:	5b                   	pop    ebx
c000e28d:	5e                   	pop    esi
c000e28e:	5f                   	pop    edi
c000e28f:	5d                   	pop    ebp
c000e290:	c3                   	ret    
c000e291:	90                   	nop

c000e292 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e292:	57                   	push   edi
c000e293:	56                   	push   esi
c000e294:	53                   	push   ebx
c000e295:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e299:	8b 06                	mov    eax,DWORD PTR [esi]
c000e29b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e29e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a6:	e8 c0 fe ff ff       	call   c000e16b <datetimeToSeconds(datetime_t)>
c000e2ab:	59                   	pop    ecx
c000e2ac:	0f b6 0d dc 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028ddc
c000e2b3:	5b                   	pop    ebx
c000e2b4:	03 0d e0 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028de0
c000e2ba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2c0:	89 cb                	mov    ebx,ecx
c000e2c2:	c1 fb 1f             	sar    ebx,0x1f
c000e2c5:	29 c8                	sub    eax,ecx
c000e2c7:	19 da                	sbb    edx,ebx
c000e2c9:	31 c9                	xor    ecx,ecx
c000e2cb:	80 3d dd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028ddd,0x0
c000e2d2:	74 05                	je     c000e2d9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2d4:	b9 08 07 00 00       	mov    ecx,0x708
c000e2d9:	31 db                	xor    ebx,ebx
c000e2db:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2df:	29 c8                	sub    eax,ecx
c000e2e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2e5:	19 da                	sbb    edx,ebx
c000e2e7:	89 f8                	mov    eax,edi
c000e2e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e2ed:	5b                   	pop    ebx
c000e2ee:	5e                   	pop    esi
c000e2ef:	5f                   	pop    edi
c000e2f0:	ff e0                	jmp    eax

c000e2f2 <secondsToDatetime(unsigned long long)>:
c000e2f2:	55                   	push   ebp
c000e2f3:	57                   	push   edi
c000e2f4:	56                   	push   esi
c000e2f5:	53                   	push   ebx
c000e2f6:	83 ec 1c             	sub    esp,0x1c
c000e2f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e2fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e301:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e305:	6a 00                	push   0x0
c000e307:	68 80 51 01 00       	push   0x15180
c000e30c:	55                   	push   ebp
c000e30d:	57                   	push   edi
c000e30e:	e8 35 4d 01 00       	call   c0023048 <__udivdi3>
c000e313:	83 c4 10             	add    esp,0x10
c000e316:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e31c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e320:	6a 00                	push   0x0
c000e322:	68 80 51 01 00       	push   0x15180
c000e327:	55                   	push   ebp
c000e328:	57                   	push   edi
c000e329:	bf 10 0e 00 00       	mov    edi,0xe10
c000e32e:	e8 15 4e 01 00       	call   c0023148 <__umoddi3>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	99                   	cdq    
c000e337:	f7 ff                	idiv   edi
c000e339:	bf 3c 00 00 00       	mov    edi,0x3c
c000e33e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e341:	89 d0                	mov    eax,edx
c000e343:	99                   	cdq    
c000e344:	f7 ff                	idiv   edi
c000e346:	85 db                	test   ebx,ebx
c000e348:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e34b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e34e:	79 11                	jns    c000e361 <secondsToDatetime(unsigned long long)+0x6f>
c000e350:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e354:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e35a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e35f:	eb 07                	jmp    c000e368 <secondsToDatetime(unsigned long long)+0x76>
c000e361:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e366:	89 d8                	mov    eax,ebx
c000e368:	bf b4 05 00 00       	mov    edi,0x5b4
c000e36d:	99                   	cdq    
c000e36e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e373:	f7 f9                	idiv   ecx
c000e375:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e37a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e37e:	31 d2                	xor    edx,edx
c000e380:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e388:	01 c3                	add    ebx,eax
c000e38a:	89 d8                	mov    eax,ebx
c000e38c:	f7 f1                	div    ecx
c000e38e:	31 d2                	xor    edx,edx
c000e390:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e393:	89 d8                	mov    eax,ebx
c000e395:	f7 f7                	div    edi
c000e397:	31 d2                	xor    edx,edx
c000e399:	29 c1                	sub    ecx,eax
c000e39b:	89 d8                	mov    eax,ebx
c000e39d:	f7 f5                	div    ebp
c000e39f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3a4:	29 c1                	sub    ecx,eax
c000e3a6:	31 d2                	xor    edx,edx
c000e3a8:	89 c8                	mov    eax,ecx
c000e3aa:	f7 f5                	div    ebp
c000e3ac:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3b5:	31 d2                	xor    edx,edx
c000e3b7:	89 c8                	mov    eax,ecx
c000e3b9:	f7 f5                	div    ebp
c000e3bb:	31 d2                	xor    edx,edx
c000e3bd:	01 c3                	add    ebx,eax
c000e3bf:	89 c8                	mov    eax,ecx
c000e3c1:	f7 f7                	div    edi
c000e3c3:	bf 99 00 00 00       	mov    edi,0x99
c000e3c8:	29 c3                	sub    ebx,eax
c000e3ca:	31 d2                	xor    edx,edx
c000e3cc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3d4:	29 c3                	sub    ebx,eax
c000e3d6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3d9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3dc:	bb 05 00 00 00       	mov    ebx,0x5
c000e3e1:	83 c1 02             	add    ecx,0x2
c000e3e4:	89 c8                	mov    eax,ecx
c000e3e6:	f7 f7                	div    edi
c000e3e8:	31 d2                	xor    edx,edx
c000e3ea:	89 c7                	mov    edi,eax
c000e3ec:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e3f2:	83 c0 02             	add    eax,0x2
c000e3f5:	f7 f3                	div    ebx
c000e3f7:	89 eb                	mov    ebx,ebp
c000e3f9:	29 c3                	sub    ebx,eax
c000e3fb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e401:	88 1e                	mov    BYTE PTR [esi],bl
c000e403:	19 c0                	sbb    eax,eax
c000e405:	31 d2                	xor    edx,edx
c000e407:	83 e0 0c             	and    eax,0xc
c000e40a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e40e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e416:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e41a:	83 f9 01             	cmp    ecx,0x1
c000e41d:	0f 96 c2             	setbe  dl
c000e420:	41                   	inc    ecx
c000e421:	01 d0                	add    eax,edx
c000e423:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e426:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e42a:	83 c4 1c             	add    esp,0x1c
c000e42d:	89 f0                	mov    eax,esi
c000e42f:	5b                   	pop    ebx
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	5d                   	pop    ebp
c000e433:	c2 04 00             	ret    0x4

c000e436 <Clock::timeInDatetimeLocal()>:
c000e436:	53                   	push   ebx
c000e437:	83 ec 14             	sub    esp,0x14
c000e43a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e43e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e442:	e8 83 fc ff ff       	call   c000e0ca <Clock::timeInSecondsLocal()>
c000e447:	83 c4 0c             	add    esp,0xc
c000e44a:	52                   	push   edx
c000e44b:	50                   	push   eax
c000e44c:	53                   	push   ebx
c000e44d:	e8 a0 fe ff ff       	call   c000e2f2 <secondsToDatetime(unsigned long long)>
c000e452:	89 d8                	mov    eax,ebx
c000e454:	83 c4 14             	add    esp,0x14
c000e457:	5b                   	pop    ebx
c000e458:	c2 04 00             	ret    0x4
c000e45b:	90                   	nop

c000e45c <Device::hibernate()>:
c000e45c:	c3                   	ret    
c000e45d:	90                   	nop

c000e45e <Device::wake()>:
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <Device::detect()>:
c000e460:	c3                   	ret    
c000e461:	90                   	nop

c000e462 <Device::disableLegacy()>:
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <Device::powerSaving(PowerSavingLevel)>:
c000e464:	c3                   	ret    
c000e465:	90                   	nop

c000e466 <DriverlessDevice::close(int, int, void*)>:
c000e466:	31 c0                	xor    eax,eax
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <DriverlessDevice::detect()>:
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <DriverlessDevice::open(int, int, void*)>:
c000e46c:	83 ec 18             	sub    esp,0x18
c000e46f:	68 d0 55 02 c0       	push   0xc00255d0
c000e474:	e8 88 6b 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000e479:	83 c8 ff             	or     eax,0xffffffff
c000e47c:	83 c4 1c             	add    esp,0x1c
c000e47f:	c3                   	ret    

c000e480 <Device::~Device()>:
c000e480:	ba 30 56 02 c0       	mov    edx,0xc0025630
c000e485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e489:	89 10                	mov    DWORD PTR [eax],edx
c000e48b:	90                   	nop
c000e48c:	c3                   	ret    
c000e48d:	90                   	nop

c000e48e <Device::~Device()>:
c000e48e:	83 ec 0c             	sub    esp,0xc
c000e491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e495:	e8 e6 ff ff ff       	call   c000e480 <Device::~Device()>
c000e49a:	83 c4 04             	add    esp,0x4
c000e49d:	83 ec 08             	sub    esp,0x8
c000e4a0:	68 58 01 00 00       	push   0x158
c000e4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4a9:	e8 b0 ea ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	83 c4 0c             	add    esp,0xc
c000e4b4:	c3                   	ret    
c000e4b5:	90                   	nop

c000e4b6 <Device::findAndLoadDriver()>:
c000e4b6:	c7 44 24 04 ee 55 02 c0 	mov    DWORD PTR [esp+0x4],0xc00255ee
c000e4be:	e9 7c eb ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c000e4c3:	90                   	nop

c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4c4:	57                   	push   edi
c000e4c5:	b9 09 00 00 00       	mov    ecx,0x9
c000e4ca:	56                   	push   esi
c000e4cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4dd:	81 c7 18 01 00 00    	add    edi,0x118
c000e4e3:	fc                   	cld    
c000e4e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e4e6:	5e                   	pop    esi
c000e4e7:	5f                   	pop    edi
c000e4e8:	c3                   	ret    
c000e4e9:	90                   	nop

c000e4ea <Device::preOpenACPI(void*, char*, char*)>:
c000e4ea:	57                   	push   edi
c000e4eb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e4f0:	56                   	push   esi
c000e4f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e4f9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e503:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e509:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e50f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e513:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e515:	b9 0e 00 00 00       	mov    ecx,0xe
c000e51a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e520:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e524:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e526:	5e                   	pop    esi
c000e527:	5f                   	pop    edi
c000e528:	c3                   	ret    
c000e529:	90                   	nop

c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e52e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e533:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e53a:	75 0b                	jne    c000e547 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e53c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e53e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e542:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e545:	eb 1e                	jmp    c000e565 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e547:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000e54c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e552:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e558:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e55a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e55e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e562:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e565:	ff e0                	jmp    eax
c000e567:	90                   	nop

c000e568 <Device::getParent()>:
c000e568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e56c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e572:	c3                   	ret    
c000e573:	90                   	nop

c000e574 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e578:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e57d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e584:	75 0b                	jne    c000e591 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e586:	8b 00                	mov    eax,DWORD PTR [eax]
c000e588:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e58c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e58f:	eb 1e                	jmp    c000e5af <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e591:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000e596:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e59c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ac:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5af:	ff e0                	jmp    eax
c000e5b1:	90                   	nop

c000e5b2 <Device::addChild(Device*)>:
c000e5b2:	53                   	push   ebx
c000e5b3:	83 ec 08             	sub    esp,0x8
c000e5b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5be:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5c4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5cc:	85 d2                	test   edx,edx
c000e5ce:	74 04                	je     c000e5d4 <Device::addChild(Device*)+0x22>
c000e5d0:	89 d3                	mov    ebx,edx
c000e5d2:	eb f6                	jmp    c000e5ca <Device::addChild(Device*)+0x18>
c000e5d4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5d7:	83 ec 0c             	sub    esp,0xc
c000e5da:	6a 08                	push   0x8
c000e5dc:	e8 72 b7 ff ff       	call   c0009d53 <malloc>
c000e5e1:	89 03                	mov    DWORD PTR [ebx],eax
c000e5e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5f0:	83 c4 18             	add    esp,0x18
c000e5f3:	5b                   	pop    ebx
c000e5f4:	c3                   	ret    
c000e5f5:	90                   	nop

c000e5f6 <Device::removeAllChildren()>:
c000e5f6:	56                   	push   esi
c000e5f7:	53                   	push   ebx
c000e5f8:	52                   	push   edx
c000e5f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5fd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e603:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e606:	74 17                	je     c000e61f <Device::removeAllChildren()+0x29>
c000e608:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e60b:	85 c0                	test   eax,eax
c000e60d:	74 0c                	je     c000e61b <Device::removeAllChildren()+0x25>
c000e60f:	83 ec 0c             	sub    esp,0xc
c000e612:	8b 10                	mov    edx,DWORD PTR [eax]
c000e614:	50                   	push   eax
c000e615:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e618:	83 c4 10             	add    esp,0x10
c000e61b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e61d:	eb e4                	jmp    c000e603 <Device::removeAllChildren()+0xd>
c000e61f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e625:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e62b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e631:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e638:	58                   	pop    eax
c000e639:	5b                   	pop    ebx
c000e63a:	5e                   	pop    esi
c000e63b:	c3                   	ret    

c000e63c <Device::hibernateAll()>:
c000e63c:	53                   	push   ebx
c000e63d:	83 ec 14             	sub    esp,0x14
c000e640:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e644:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e646:	53                   	push   ebx
c000e647:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e64a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e656:	74 0f                	je     c000e667 <Device::hibernateAll()+0x2b>
c000e658:	83 ec 0c             	sub    esp,0xc
c000e65b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e65e:	e8 d9 ff ff ff       	call   c000e63c <Device::hibernateAll()>
c000e663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e665:	eb e9                	jmp    c000e650 <Device::hibernateAll()+0x14>
c000e667:	83 c4 08             	add    esp,0x8
c000e66a:	5b                   	pop    ebx
c000e66b:	c3                   	ret    

c000e66c <Device::wakeAll()>:
c000e66c:	53                   	push   ebx
c000e66d:	83 ec 14             	sub    esp,0x14
c000e670:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e674:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e676:	53                   	push   ebx
c000e677:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e67a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e680:	83 c4 10             	add    esp,0x10
c000e683:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e686:	74 0f                	je     c000e697 <Device::wakeAll()+0x2b>
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e68e:	e8 d9 ff ff ff       	call   c000e66c <Device::wakeAll()>
c000e693:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e695:	eb e9                	jmp    c000e680 <Device::wakeAll()+0x14>
c000e697:	83 c4 08             	add    esp,0x8
c000e69a:	5b                   	pop    ebx
c000e69b:	c3                   	ret    

c000e69c <Device::detectAll()>:
c000e69c:	53                   	push   ebx
c000e69d:	83 ec 14             	sub    esp,0x14
c000e6a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6a6:	53                   	push   ebx
c000e6a7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6b0:	83 c4 10             	add    esp,0x10
c000e6b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6b6:	74 0f                	je     c000e6c7 <Device::detectAll()+0x2b>
c000e6b8:	83 ec 0c             	sub    esp,0xc
c000e6bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6be:	e8 d9 ff ff ff       	call   c000e69c <Device::detectAll()>
c000e6c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6c5:	eb e9                	jmp    c000e6b0 <Device::detectAll()+0x14>
c000e6c7:	83 c4 08             	add    esp,0x8
c000e6ca:	5b                   	pop    ebx
c000e6cb:	c3                   	ret    

c000e6cc <Device::disableLegacyAll()>:
c000e6cc:	53                   	push   ebx
c000e6cd:	83 ec 14             	sub    esp,0x14
c000e6d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6d6:	53                   	push   ebx
c000e6d7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e0:	83 c4 10             	add    esp,0x10
c000e6e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6e6:	74 0f                	je     c000e6f7 <Device::disableLegacyAll()+0x2b>
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6ee:	e8 d9 ff ff ff       	call   c000e6cc <Device::disableLegacyAll()>
c000e6f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6f5:	eb e9                	jmp    c000e6e0 <Device::disableLegacyAll()+0x14>
c000e6f7:	83 c4 08             	add    esp,0x8
c000e6fa:	5b                   	pop    ebx
c000e6fb:	c3                   	ret    

c000e6fc <Device::loadDriversForAll()>:
c000e6fc:	53                   	push   ebx
c000e6fd:	83 ec 08             	sub    esp,0x8
c000e700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e704:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e70b:	75 0c                	jne    c000e719 <Device::loadDriversForAll()+0x1d>
c000e70d:	83 ec 0c             	sub    esp,0xc
c000e710:	53                   	push   ebx
c000e711:	e8 a0 fd ff ff       	call   c000e4b6 <Device::findAndLoadDriver()>
c000e716:	83 c4 10             	add    esp,0x10
c000e719:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e71f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e722:	74 12                	je     c000e736 <Device::loadDriversForAll()+0x3a>
c000e724:	83 ec 0c             	sub    esp,0xc
c000e727:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e72a:	e8 cd ff ff ff       	call   c000e6fc <Device::loadDriversForAll()>
c000e72f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e731:	83 c4 10             	add    esp,0x10
c000e734:	eb e9                	jmp    c000e71f <Device::loadDriversForAll()+0x23>
c000e736:	83 c4 08             	add    esp,0x8
c000e739:	5b                   	pop    ebx
c000e73a:	c3                   	ret    
c000e73b:	90                   	nop

c000e73c <Device::closeAll()>:
c000e73c:	53                   	push   ebx
c000e73d:	83 ec 08             	sub    esp,0x8
c000e740:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e744:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e746:	6a 00                	push   0x0
c000e748:	6a 00                	push   0x0
c000e74a:	6a 00                	push   0x0
c000e74c:	53                   	push   ebx
c000e74d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e750:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e75c:	74 0f                	je     c000e76d <Device::closeAll()+0x31>
c000e75e:	83 ec 0c             	sub    esp,0xc
c000e761:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e764:	e8 d3 ff ff ff       	call   c000e73c <Device::closeAll()>
c000e769:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e76b:	eb e9                	jmp    c000e756 <Device::closeAll()+0x1a>
c000e76d:	83 c4 08             	add    esp,0x8
c000e770:	5b                   	pop    ebx
c000e771:	c3                   	ret    

c000e772 <Device::powerSavingAll(PowerSavingLevel)>:
c000e772:	56                   	push   esi
c000e773:	53                   	push   ebx
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e77b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e77f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e781:	56                   	push   esi
c000e782:	53                   	push   ebx
c000e783:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e786:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e78c:	83 c4 10             	add    esp,0x10
c000e78f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e792:	74 0f                	je     c000e7a3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e794:	52                   	push   edx
c000e795:	52                   	push   edx
c000e796:	56                   	push   esi
c000e797:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e79a:	e8 d3 ff ff ff       	call   c000e772 <Device::powerSavingAll(PowerSavingLevel)>
c000e79f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7a1:	eb e9                	jmp    c000e78c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7a3:	58                   	pop    eax
c000e7a4:	5b                   	pop    ebx
c000e7a5:	5e                   	pop    esi
c000e7a6:	c3                   	ret    
c000e7a7:	90                   	nop

c000e7a8 <Device::setName(char const*)>:
c000e7a8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7b0:	e9 83 1f ff ff       	jmp    c0000738 <strcpy>
c000e7b5:	90                   	nop

c000e7b6 <Device::Device(char const*)>:
c000e7b6:	83 ec 1c             	sub    esp,0x1c
c000e7b9:	ba 30 56 02 c0       	mov    edx,0xc0025630
c000e7be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c2:	89 10                	mov    DWORD PTR [eax],edx
c000e7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e7fc:	83 ec 08             	sub    esp,0x8
c000e7ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e807:	e8 9c ff ff ff       	call   c000e7a8 <Device::setName(char const*)>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e817:	83 ec 0c             	sub    esp,0xc
c000e81a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e81e:	e8 30 b5 ff ff       	call   c0009d53 <malloc>
c000e823:	83 c4 10             	add    esp,0x10
c000e826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e82c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e833:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e837:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e841:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e847:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e84d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e851:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e857:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e862:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e878:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e886:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e894:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e89e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8ac:	90                   	nop
c000e8ad:	83 c4 1c             	add    esp,0x1c
c000e8b0:	c3                   	ret    
c000e8b1:	90                   	nop

c000e8b2 <Device::getName()>:
c000e8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8b6:	05 d0 00 00 00       	add    eax,0xd0
c000e8bb:	c3                   	ret    

c000e8bc <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8bc:	83 ec 0c             	sub    esp,0xc
c000e8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c3:	83 ec 08             	sub    esp,0x8
c000e8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ca:	50                   	push   eax
c000e8cb:	e8 e6 fe ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	ba 5c 56 02 c0       	mov    edx,0xc002565c
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	89 10                	mov    DWORD PTR [eax],edx
c000e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e8ec:	90                   	nop
c000e8ed:	83 c4 0c             	add    esp,0xc
c000e8f0:	c3                   	ret    
c000e8f1:	90                   	nop

c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e8f2:	57                   	push   edi
c000e8f3:	56                   	push   esi
c000e8f4:	53                   	push   ebx
c000e8f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e8fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e901:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e907:	75 0c                	jne    c000e915 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e909:	52                   	push   edx
c000e90a:	52                   	push   edx
c000e90b:	53                   	push   ebx
c000e90c:	56                   	push   esi
c000e90d:	e8 e8 4b 01 00       	call   c00234fa <LinkedList<Device>::addElement(Device*)>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e91b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e91e:	74 12                	je     c000e932 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e920:	50                   	push   eax
c000e921:	57                   	push   edi
c000e922:	56                   	push   esi
c000e923:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e926:	e8 c7 ff ff ff       	call   c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e92b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	eb e9                	jmp    c000e91b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e932:	5b                   	pop    ebx
c000e933:	5e                   	pop    esi
c000e934:	5f                   	pop    edi
c000e935:	c3                   	ret    

c000e936 <getDevicesOfType(DeviceType)>:
c000e936:	53                   	push   ebx
c000e937:	83 ec 14             	sub    esp,0x14
c000e93a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e93e:	53                   	push   ebx
c000e93f:	e8 92 4c 01 00       	call   c00235d6 <LinkedList<Device>::LinkedList()>
c000e944:	83 c4 0c             	add    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	53                   	push   ebx
c000e94c:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c000e952:	e8 9b ff ff ff       	call   c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e957:	89 d8                	mov    eax,ebx
c000e959:	83 c4 18             	add    esp,0x18
c000e95c:	5b                   	pop    ebx
c000e95d:	c2 04 00             	ret    0x4

c000e960 <HardDiskController::HardDiskController(char const*)>:
c000e960:	83 ec 0c             	sub    esp,0xc
c000e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e967:	83 ec 08             	sub    esp,0x8
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	50                   	push   eax
c000e96f:	e8 42 fe ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e974:	83 c4 10             	add    esp,0x10
c000e977:	ba 88 56 02 c0       	mov    edx,0xc0025688
c000e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e980:	89 10                	mov    DWORD PTR [eax],edx
c000e982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e986:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e990:	90                   	nop
c000e991:	83 c4 0c             	add    esp,0xc
c000e994:	c3                   	ret    
c000e995:	90                   	nop
c000e996:	66 90                	xchg   ax,ax

c000e998 <HardDiskController::~HardDiskController()>:
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	ba 88 56 02 c0       	mov    edx,0xc0025688
c000e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a4:	89 10                	mov    DWORD PTR [eax],edx
c000e9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9aa:	83 ec 0c             	sub    esp,0xc
c000e9ad:	50                   	push   eax
c000e9ae:	e8 cd fa ff ff       	call   c000e480 <Device::~Device()>
c000e9b3:	83 c4 10             	add    esp,0x10
c000e9b6:	90                   	nop
c000e9b7:	83 c4 0c             	add    esp,0xc
c000e9ba:	c3                   	ret    
c000e9bb:	90                   	nop

c000e9bc <HardDiskController::~HardDiskController()>:
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	83 ec 0c             	sub    esp,0xc
c000e9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9c6:	e8 cd ff ff ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	83 ec 08             	sub    esp,0x8
c000e9d1:	68 58 01 00 00       	push   0x158
c000e9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9da:	e8 7f e5 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e9df:	83 c4 10             	add    esp,0x10
c000e9e2:	83 c4 0c             	add    esp,0xc
c000e9e5:	c3                   	ret    

c000e9e6 <PhysicalDisk::eject()>:
c000e9e6:	83 c8 ff             	or     eax,0xffffffff
c000e9e9:	c3                   	ret    

c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e9ea:	83 ec 0c             	sub    esp,0xc
c000e9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f1:	83 ec 08             	sub    esp,0x8
c000e9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9f8:	50                   	push   eax
c000e9f9:	e8 b8 fd ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e9fe:	83 c4 10             	add    esp,0x10
c000ea01:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000ea06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea0a:	89 10                	mov    DWORD PTR [eax],edx
c000ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea10:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea26:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea38:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea42:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea4c:	90                   	nop
c000ea4d:	83 c4 0c             	add    esp,0xc
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop

c000ea52 <PhysicalDisk::startCache()>:
c000ea52:	56                   	push   esi
c000ea53:	53                   	push   ebx
c000ea54:	83 ec 10             	sub    esp,0x10
c000ea57:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea5b:	6a 44                	push   0x44
c000ea5d:	e8 f1 b2 ff ff       	call   c0009d53 <malloc>
c000ea62:	89 c6                	mov    esi,eax
c000ea64:	58                   	pop    eax
c000ea65:	5a                   	pop    edx
c000ea66:	53                   	push   ebx
c000ea67:	56                   	push   esi
c000ea68:	e8 4b 26 00 00       	call   c00110b8 <VCache::VCache(PhysicalDisk*)>
c000ea6d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea73:	83 c4 14             	add    esp,0x14
c000ea76:	5b                   	pop    ebx
c000ea77:	5e                   	pop    esi
c000ea78:	c3                   	ret    
c000ea79:	90                   	nop

c000ea7a <PhysicalDisk::~PhysicalDisk()>:
c000ea7a:	83 ec 0c             	sub    esp,0xc
c000ea7d:	ba b4 56 02 c0       	mov    edx,0xc00256b4
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	89 10                	mov    DWORD PTR [eax],edx
c000ea88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	50                   	push   eax
c000ea90:	e8 eb f9 ff ff       	call   c000e480 <Device::~Device()>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	90                   	nop
c000ea99:	83 c4 0c             	add    esp,0xc
c000ea9c:	c3                   	ret    
c000ea9d:	90                   	nop

c000ea9e <PhysicalDisk::~PhysicalDisk()>:
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	83 ec 0c             	sub    esp,0xc
c000eaa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaa8:	e8 cd ff ff ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c000eaad:	83 c4 10             	add    esp,0x10
c000eab0:	83 ec 08             	sub    esp,0x8
c000eab3:	68 6c 01 00 00       	push   0x16c
c000eab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eabc:	e8 9d e4 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	83 c4 0c             	add    esp,0xc
c000eac7:	c3                   	ret    

c000eac8 <FPU::FPU(char const*)>:
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eacf:	83 ec 08             	sub    esp,0x8
c000ead2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead6:	50                   	push   eax
c000ead7:	e8 da fc ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	ba 14 57 02 c0       	mov    edx,0xc0025714
c000eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae8:	89 10                	mov    DWORD PTR [eax],edx
c000eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eaf8:	90                   	nop
c000eaf9:	83 c4 0c             	add    esp,0xc
c000eafc:	c3                   	ret    
c000eafd:	90                   	nop
c000eafe:	66 90                	xchg   ax,ax

c000eb00 <FPU::~FPU()>:
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	ba 14 57 02 c0       	mov    edx,0xc0025714
c000eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0c:	89 10                	mov    DWORD PTR [eax],edx
c000eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb12:	83 ec 0c             	sub    esp,0xc
c000eb15:	50                   	push   eax
c000eb16:	e8 65 f9 ff ff       	call   c000e480 <Device::~Device()>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	90                   	nop
c000eb1f:	83 c4 0c             	add    esp,0xc
c000eb22:	c3                   	ret    
c000eb23:	90                   	nop

c000eb24 <FPU::~FPU()>:
c000eb24:	83 ec 0c             	sub    esp,0xc
c000eb27:	83 ec 0c             	sub    esp,0xc
c000eb2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb2e:	e8 cd ff ff ff       	call   c000eb00 <FPU::~FPU()>
c000eb33:	83 c4 10             	add    esp,0x10
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	68 58 01 00 00       	push   0x158
c000eb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb42:	e8 17 e4 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000eb47:	83 c4 10             	add    esp,0x10
c000eb4a:	83 c4 0c             	add    esp,0xc
c000eb4d:	c3                   	ret    

c000eb4e <setupFPU()>:
c000eb4e:	83 ec 28             	sub    esp,0x28
c000eb51:	68 e4 56 02 c0       	push   0xc00256e4
c000eb56:	e8 e4 e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000eb5b:	8b 15 a8 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca8
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eb6a:	a8 10                	test   al,0x10
c000eb6c:	74 2e                	je     c000eb9c <setupFPU()+0x4e>
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	68 f7 56 02 c0       	push   0xc00256f7
c000eb76:	e8 c4 e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000eb7b:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eb82:	e8 cc b1 ff ff       	call   c0009d53 <malloc>
c000eb87:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb8e:	e8 05 30 01 00       	call   c0021b98 <x87::x87()>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb9a:	eb 24                	jmp    c000ebc0 <setupFPU()+0x72>
c000eb9c:	83 e0 ef             	and    eax,0xffffffef
c000eb9f:	83 ec 0c             	sub    esp,0xc
c000eba2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000eba8:	68 01 57 02 c0       	push   0xc0025701
c000ebad:	e8 8d e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ebb2:	0f 20 c0             	mov    eax,cr0
c000ebb5:	83 c8 04             	or     eax,0x4
c000ebb8:	0f 22 c0             	mov    cr0,eax
c000ebbb:	31 c0                	xor    eax,eax
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	83 c4 1c             	add    esp,0x1c
c000ebc3:	c3                   	ret    

c000ebc4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ebc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebcc:	c1 e0 04             	shl    eax,0x4
c000ebcf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ebd3:	8d 50 10             	lea    edx,[eax+0x10]
c000ebd6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ebdc:	74 08                	je     c000ebe6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ebde:	83 c0 04             	add    eax,0x4
c000ebe1:	39 d0                	cmp    eax,edx
c000ebe3:	75 f1                	jne    c000ebd6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ebe5:	c3                   	ret    
c000ebe6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebf0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ebfa:	eb e2                	jmp    c000ebde <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ebfc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ebfc:	57                   	push   edi
c000ebfd:	31 c0                	xor    eax,eax
c000ebff:	56                   	push   esi
c000ec00:	53                   	push   ebx
c000ec01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec0d:	89 da                	mov    edx,ebx
c000ec0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec13:	c1 e2 04             	shl    edx,0x4
c000ec16:	01 ca                	add    edx,ecx
c000ec18:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ec20:	74 16                	je     c000ec38 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ec22:	40                   	inc    eax
c000ec23:	83 f8 04             	cmp    eax,0x4
c000ec26:	75 f0                	jne    c000ec18 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ec28:	c7 44 24 10 44 57 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025744
c000ec30:	5b                   	pop    ebx
c000ec31:	5e                   	pop    esi
c000ec32:	5f                   	pop    edi
c000ec33:	e9 c9 63 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c000ec38:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ec3b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ec3e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ec44:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ec4a:	5b                   	pop    ebx
c000ec4b:	5e                   	pop    esi
c000ec4c:	5f                   	pop    edi
c000ec4d:	c3                   	ret    

c000ec4e <doubleFault(regs*, void*)>:
c000ec4e:	55                   	push   ebp
c000ec4f:	89 e5                	mov    ebp,esp
c000ec51:	83 ec 08             	sub    esp,0x8
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 51 57 02 c0       	push   0xc0025751
c000ec5c:	e8 a0 63 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	90                   	nop
c000ec65:	c9                   	leave  
c000ec66:	c3                   	ret    
c000ec67:	90                   	nop

c000ec68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ec68:	56                   	push   esi
c000ec69:	53                   	push   ebx
c000ec6a:	50                   	push   eax
c000ec6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec73:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ec78:	75 35                	jne    c000ecaf <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ec7a:	8d 43 20             	lea    eax,[ebx+0x20]
c000ec7d:	31 d2                	xor    edx,edx
c000ec7f:	89 c1                	mov    ecx,eax
c000ec81:	c1 e1 04             	shl    ecx,0x4
c000ec84:	01 f1                	add    ecx,esi
c000ec86:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ec8e:	74 3e                	je     c000ecce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ec90:	42                   	inc    edx
c000ec91:	83 fa 04             	cmp    edx,0x4
c000ec94:	75 f0                	jne    c000ec86 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ec96:	83 ec 0c             	sub    esp,0xc
c000ec99:	68 6b 57 02 c0       	push   0xc002576b
c000ec9e:	e8 5e 63 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecab:	5a                   	pop    edx
c000ecac:	5b                   	pop    ebx
c000ecad:	5e                   	pop    esi
c000ecae:	c3                   	ret    
c000ecaf:	83 ec 0c             	sub    esp,0xc
c000ecb2:	56                   	push   esi
c000ecb3:	e8 fa fb ff ff       	call   c000e8b2 <Device::getName()>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ecbe:	75 ba                	jne    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecc0:	83 fb 0f             	cmp    ebx,0xf
c000ecc3:	7f 29                	jg     c000ecee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ecc5:	0f b6 9b a0 83 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7c60]
c000eccc:	eb ac                	jmp    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecce:	8d 04 82             	lea    eax,[edx+eax*4]
c000ecd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecd5:	8d 04 86             	lea    eax,[esi+eax*4]
c000ecd8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ecde:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ece2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ece8:	89 d8                	mov    eax,ebx
c000ecea:	5a                   	pop    edx
c000eceb:	5b                   	pop    ebx
c000ecec:	5e                   	pop    esi
c000eced:	c3                   	ret    
c000ecee:	83 ec 0c             	sub    esp,0xc
c000ecf1:	68 5e 57 02 c0       	push   0xc002575e
c000ecf6:	e8 06 63 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000ecfb:	83 c4 10             	add    esp,0x10
c000ecfe:	e9 77 ff ff ff       	jmp    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed03:	90                   	nop

c000ed04 <InterruptController::clearAllHandlers(int, bool)>:
c000ed04:	56                   	push   esi
c000ed05:	53                   	push   ebx
c000ed06:	52                   	push   edx
c000ed07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed0f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed14:	75 61                	jne    c000ed77 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed16:	8d 46 20             	lea    eax,[esi+0x20]
c000ed19:	c1 e6 04             	shl    esi,0x4
c000ed1c:	c1 e0 04             	shl    eax,0x4
c000ed1f:	01 de                	add    esi,ebx
c000ed21:	01 d8                	add    eax,ebx
c000ed23:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ed2d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ed37:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ed41:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed4b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ed55:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ed5f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ed69:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ed73:	58                   	pop    eax
c000ed74:	5b                   	pop    ebx
c000ed75:	5e                   	pop    esi
c000ed76:	c3                   	ret    
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	53                   	push   ebx
c000ed7b:	e8 32 fb ff ff       	call   c000e8b2 <Device::getName()>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed86:	75 8e                	jne    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed88:	83 fe 0f             	cmp    esi,0xf
c000ed8b:	7f 09                	jg     c000ed96 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ed8d:	0f b6 b6 a0 83 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7c60]
c000ed94:	eb 80                	jmp    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed96:	83 ec 0c             	sub    esp,0xc
c000ed99:	68 78 57 02 c0       	push   0xc0025778
c000ed9e:	e8 5e 62 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	e9 6b ff ff ff       	jmp    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000edab:	90                   	nop

c000edac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000edac:	56                   	push   esi
c000edad:	53                   	push   ebx
c000edae:	52                   	push   edx
c000edaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000edb7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000edbc:	75 3a                	jne    c000edf8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000edbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edc2:	8d 50 20             	lea    edx,[eax+0x20]
c000edc5:	c1 e2 04             	shl    edx,0x4
c000edc8:	8d 04 16             	lea    eax,[esi+edx*1]
c000edcb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000edcf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000edd5:	74 0b                	je     c000ede2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000edd7:	83 c0 04             	add    eax,0x4
c000edda:	39 d0                	cmp    eax,edx
c000eddc:	75 f1                	jne    c000edcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000edde:	58                   	pop    eax
c000eddf:	5b                   	pop    ebx
c000ede0:	5e                   	pop    esi
c000ede1:	c3                   	ret    
c000ede2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000edec:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000edf6:	eb df                	jmp    c000edd7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000edf8:	83 ec 0c             	sub    esp,0xc
c000edfb:	56                   	push   esi
c000edfc:	e8 b1 fa ff ff       	call   c000e8b2 <Device::getName()>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee07:	75 b5                	jne    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee09:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee0e:	7f 11                	jg     c000ee21 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee14:	0f b6 80 a0 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7c60]
c000ee1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee1f:	eb 9d                	jmp    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee21:	83 ec 0c             	sub    esp,0xc
c000ee24:	68 85 57 02 c0       	push   0xc0025785
c000ee29:	e8 d3 61 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	eb 8b                	jmp    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ee33 <nmiHandler(regs*, void*)>:
c000ee33:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000ee38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee3c:	e9 db a6 ff ff       	jmp    c000951c <Computer::handleNMI()>

c000ee41 <int_handler>:
c000ee41:	55                   	push   ebp
c000ee42:	57                   	push   edi
c000ee43:	56                   	push   esi
c000ee44:	53                   	push   ebx
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ee4c:	80 3d 84 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029784,0x0
c000ee53:	74 0b                	je     c000ee60 <int_handler+0x1f>
c000ee55:	fa                   	cli    
c000ee56:	f4                   	hlt    
c000ee57:	80 3d 84 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029784,0x0
c000ee5e:	75 f5                	jne    c000ee55 <int_handler+0x14>
c000ee60:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000ee65:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ee68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee6e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ee74:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee77:	83 f8 17             	cmp    eax,0x17
c000ee7a:	77 13                	ja     c000ee8f <int_handler+0x4e>
c000ee7c:	83 ec 08             	sub    esp,0x8
c000ee7f:	8b 17                	mov    edx,DWORD PTR [edi]
c000ee81:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee84:	0f b6 c0             	movzx  eax,al
c000ee87:	50                   	push   eax
c000ee88:	57                   	push   edi
c000ee89:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	83 c3 15             	add    ebx,0x15
c000ee92:	c1 e3 04             	shl    ebx,0x4
c000ee95:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ee99:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eea0:	31 db                	xor    ebx,ebx
c000eea2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eea6:	85 c0                	test   eax,eax
c000eea8:	74 13                	je     c000eebd <int_handler+0x7c>
c000eeaa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eead:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eeb1:	74 1c                	je     c000eecf <int_handler+0x8e>
c000eeb3:	83 ec 08             	sub    esp,0x8
c000eeb6:	52                   	push   edx
c000eeb7:	56                   	push   esi
c000eeb8:	ff d0                	call   eax
c000eeba:	83 c4 10             	add    esp,0x10
c000eebd:	43                   	inc    ebx
c000eebe:	83 fb 04             	cmp    ebx,0x4
c000eec1:	75 df                	jne    c000eea2 <int_handler+0x61>
c000eec3:	83 c4 0c             	add    esp,0xc
c000eec6:	31 c0                	xor    eax,eax
c000eec8:	5b                   	pop    ebx
c000eec9:	31 d2                	xor    edx,edx
c000eecb:	5e                   	pop    esi
c000eecc:	5f                   	pop    edi
c000eecd:	5d                   	pop    ebp
c000eece:	c3                   	ret    
c000eecf:	83 ec 08             	sub    esp,0x8
c000eed2:	52                   	push   edx
c000eed3:	56                   	push   esi
c000eed4:	ff d0                	call   eax
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	83 c4 0c             	add    esp,0xc
c000eedc:	5b                   	pop    ebx
c000eedd:	5e                   	pop    esi
c000eede:	5f                   	pop    edi
c000eedf:	5d                   	pop    ebp
c000eee0:	c3                   	ret    
c000eee1:	90                   	nop

c000eee2 <InterruptController::InterruptController(char const*)>:
c000eee2:	83 ec 1c             	sub    esp,0x1c
c000eee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee9:	83 ec 08             	sub    esp,0x8
c000eeec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eef0:	50                   	push   eax
c000eef1:	e8 c0 f8 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000eef6:	83 c4 10             	add    esp,0x10
c000eef9:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c000eefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef02:	89 10                	mov    DWORD PTR [eax],edx
c000ef04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef08:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef1a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ef22:	7f 5e                	jg     c000ef82 <InterruptController::InterruptController(char const*)+0xa0>
c000ef24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef2c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ef31:	7f 49                	jg     c000ef7c <InterruptController::InterruptController(char const*)+0x9a>
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef3b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef46:	01 ca                	add    edx,ecx
c000ef48:	83 c2 54             	add    edx,0x54
c000ef4b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef66:	01 ca                	add    edx,ecx
c000ef68:	81 c2 54 04 00 00    	add    edx,0x454
c000ef6e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef76:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ef7a:	eb b0                	jmp    c000ef2c <InterruptController::InterruptController(char const*)+0x4a>
c000ef7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef80:	eb 98                	jmp    c000ef1a <InterruptController::InterruptController(char const*)+0x38>
c000ef82:	90                   	nop
c000ef83:	83 c4 1c             	add    esp,0x1c
c000ef86:	c3                   	ret    
c000ef87:	90                   	nop

c000ef88 <InterruptController::~InterruptController()>:
c000ef88:	83 ec 0c             	sub    esp,0xc
c000ef8b:	ba 64 5a 02 c0       	mov    edx,0xc0025a64
c000ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef94:	89 10                	mov    DWORD PTR [eax],edx
c000ef96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef9a:	83 ec 0c             	sub    esp,0xc
c000ef9d:	50                   	push   eax
c000ef9e:	e8 dd f4 ff ff       	call   c000e480 <Device::~Device()>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	90                   	nop
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	c3                   	ret    
c000efab:	90                   	nop

c000efac <InterruptController::~InterruptController()>:
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	83 ec 0c             	sub    esp,0xc
c000efb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efb6:	e8 cd ff ff ff       	call   c000ef88 <InterruptController::~InterruptController()>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	83 ec 08             	sub    esp,0x8
c000efc1:	68 58 21 00 00       	push   0x2158
c000efc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efca:	e8 8f df ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000efcf:	83 c4 10             	add    esp,0x10
c000efd2:	83 c4 0c             	add    esp,0xc
c000efd5:	c3                   	ret    

c000efd6 <displayDebugInfo(regs*)>:
c000efd6:	55                   	push   ebp
c000efd7:	57                   	push   edi
c000efd8:	56                   	push   esi
c000efd9:	53                   	push   ebx
c000efda:	83 ec 24             	sub    esp,0x24
c000efdd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000efe1:	0f 20 c2             	mov    edx,cr0
c000efe4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000efe8:	0f 20 d7             	mov    edi,cr2
c000efeb:	0f 20 de             	mov    esi,cr3
c000efee:	0f 20 e5             	mov    ebp,cr4
c000eff1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eff4:	68 92 57 02 c0       	push   0xc0025792
c000eff9:	e8 41 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000effe:	59                   	pop    ecx
c000efff:	58                   	pop    eax
c000f000:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f003:	68 9d 57 02 c0       	push   0xc002579d
c000f008:	e8 32 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f00d:	58                   	pop    eax
c000f00e:	5a                   	pop    edx
c000f00f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f012:	68 a8 57 02 c0       	push   0xc00257a8
c000f017:	e8 23 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f01c:	59                   	pop    ecx
c000f01d:	58                   	pop    eax
c000f01e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f021:	68 b3 57 02 c0       	push   0xc00257b3
c000f026:	e8 14 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f02b:	58                   	pop    eax
c000f02c:	5a                   	pop    edx
c000f02d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f030:	68 be 57 02 c0       	push   0xc00257be
c000f035:	e8 05 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f03a:	59                   	pop    ecx
c000f03b:	58                   	pop    eax
c000f03c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f03f:	68 c9 57 02 c0       	push   0xc00257c9
c000f044:	e8 f6 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f049:	58                   	pop    eax
c000f04a:	5a                   	pop    edx
c000f04b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f04e:	68 d4 57 02 c0       	push   0xc00257d4
c000f053:	e8 e7 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f058:	59                   	pop    ecx
c000f059:	58                   	pop    eax
c000f05a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f05d:	68 df 57 02 c0       	push   0xc00257df
c000f062:	e8 d8 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f067:	58                   	pop    eax
c000f068:	5a                   	pop    edx
c000f069:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f06c:	68 ea 57 02 c0       	push   0xc00257ea
c000f071:	e8 c9 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f076:	59                   	pop    ecx
c000f077:	58                   	pop    eax
c000f078:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f07b:	68 f9 57 02 c0       	push   0xc00257f9
c000f080:	e8 ba df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f085:	58                   	pop    eax
c000f086:	5a                   	pop    edx
c000f087:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f08a:	68 04 58 02 c0       	push   0xc0025804
c000f08f:	e8 ab df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f094:	59                   	pop    ecx
c000f095:	58                   	pop    eax
c000f096:	57                   	push   edi
c000f097:	68 0f 58 02 c0       	push   0xc002580f
c000f09c:	e8 9e df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f0a1:	58                   	pop    eax
c000f0a2:	5a                   	pop    edx
c000f0a3:	56                   	push   esi
c000f0a4:	68 1a 58 02 c0       	push   0xc002581a
c000f0a9:	e8 91 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f0ae:	59                   	pop    ecx
c000f0af:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f0b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0ba:	e8 8e bd ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c000f0bf:	58                   	pop    eax
c000f0c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f0c3:	5a                   	pop    edx
c000f0c4:	c1 e0 05             	shl    eax,0x5
c000f0c7:	05 00 81 02 c0       	add    eax,0xc0028100
c000f0cc:	50                   	push   eax
c000f0cd:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f0d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d8:	e8 7d c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f0dd:	59                   	pop    ecx
c000f0de:	58                   	pop    eax
c000f0df:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f0e4:	68 25 58 02 c0       	push   0xc0025825
c000f0e9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0ef:	e8 66 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f0f4:	58                   	pop    eax
c000f0f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0fa:	5a                   	pop    edx
c000f0fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f0fe:	83 c0 0c             	add    eax,0xc
c000f101:	50                   	push   eax
c000f102:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f107:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f10d:	e8 48 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f112:	59                   	pop    ecx
c000f113:	58                   	pop    eax
c000f114:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f119:	68 2e 58 02 c0       	push   0xc002582e
c000f11e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f124:	e8 31 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f129:	58                   	pop    eax
c000f12a:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f12f:	5a                   	pop    edx
c000f130:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f133:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f139:	e8 d6 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f13e:	59                   	pop    ecx
c000f13f:	58                   	pop    eax
c000f140:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f145:	68 36 58 02 c0       	push   0xc0025836
c000f14a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f150:	e8 05 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f155:	58                   	pop    eax
c000f156:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f15b:	5a                   	pop    edx
c000f15c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f15f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f165:	e8 aa c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f16a:	59                   	pop    ecx
c000f16b:	58                   	pop    eax
c000f16c:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f171:	68 3e 58 02 c0       	push   0xc002583e
c000f176:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f17c:	e8 d9 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f181:	58                   	pop    eax
c000f182:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f187:	5a                   	pop    edx
c000f188:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f18b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f191:	e8 7e c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f196:	59                   	pop    ecx
c000f197:	58                   	pop    eax
c000f198:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f19d:	68 46 58 02 c0       	push   0xc0025846
c000f1a2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a8:	e8 ad c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f1ad:	58                   	pop    eax
c000f1ae:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f1b3:	5a                   	pop    edx
c000f1b4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f1b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1bd:	e8 52 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f1c2:	59                   	pop    ecx
c000f1c3:	58                   	pop    eax
c000f1c4:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f1c9:	68 4e 58 02 c0       	push   0xc002584e
c000f1ce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d4:	e8 81 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f1d9:	58                   	pop    eax
c000f1da:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f1df:	5a                   	pop    edx
c000f1e0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1e3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e9:	e8 26 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f1ee:	59                   	pop    ecx
c000f1ef:	58                   	pop    eax
c000f1f0:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f1f5:	68 56 58 02 c0       	push   0xc0025856
c000f1fa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f200:	e8 55 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f205:	58                   	pop    eax
c000f206:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f20b:	5a                   	pop    edx
c000f20c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f20f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f215:	e8 fa c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f21a:	59                   	pop    ecx
c000f21b:	58                   	pop    eax
c000f21c:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f221:	68 5e 58 02 c0       	push   0xc002585e
c000f226:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f22c:	e8 29 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f231:	58                   	pop    eax
c000f232:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f237:	5a                   	pop    edx
c000f238:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f23c:	52                   	push   edx
c000f23d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f243:	e8 cc c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f248:	59                   	pop    ecx
c000f249:	58                   	pop    eax
c000f24a:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f24f:	68 67 58 02 c0       	push   0xc0025867
c000f254:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f25a:	e8 fb c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f25f:	58                   	pop    eax
c000f260:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f265:	5a                   	pop    edx
c000f266:	57                   	push   edi
c000f267:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f26d:	e8 a2 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f272:	59                   	pop    ecx
c000f273:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f278:	5f                   	pop    edi
c000f279:	68 6f 58 02 c0       	push   0xc002586f
c000f27e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f284:	e8 d1 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f289:	58                   	pop    eax
c000f28a:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f28f:	5a                   	pop    edx
c000f290:	56                   	push   esi
c000f291:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f297:	e8 78 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f29c:	59                   	pop    ecx
c000f29d:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f2a2:	5e                   	pop    esi
c000f2a3:	68 77 58 02 c0       	push   0xc0025877
c000f2a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2ae:	e8 a7 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f2b3:	5f                   	pop    edi
c000f2b4:	58                   	pop    eax
c000f2b5:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f2ba:	55                   	push   ebp
c000f2bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c1:	e8 4e c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f2c6:	58                   	pop    eax
c000f2c7:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f2cc:	5a                   	pop    edx
c000f2cd:	68 7f 58 02 c0       	push   0xc002587f
c000f2d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2d8:	e8 7d c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f2dd:	0f 21 c0             	mov    eax,db0
c000f2e0:	59                   	pop    ecx
c000f2e1:	5e                   	pop    esi
c000f2e2:	50                   	push   eax
c000f2e3:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f2e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2ee:	e8 21 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f2f3:	5f                   	pop    edi
c000f2f4:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f2f9:	5d                   	pop    ebp
c000f2fa:	68 88 58 02 c0       	push   0xc0025888
c000f2ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f305:	e8 50 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f30a:	0f 21 c8             	mov    eax,db1
c000f30d:	5a                   	pop    edx
c000f30e:	59                   	pop    ecx
c000f30f:	50                   	push   eax
c000f310:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f315:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f31b:	e8 f4 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f320:	5e                   	pop    esi
c000f321:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f326:	5f                   	pop    edi
c000f327:	68 90 58 02 c0       	push   0xc0025890
c000f32c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f332:	e8 23 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f337:	0f 21 d0             	mov    eax,db2
c000f33a:	5d                   	pop    ebp
c000f33b:	5a                   	pop    edx
c000f33c:	50                   	push   eax
c000f33d:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f342:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f348:	e8 c7 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f34d:	59                   	pop    ecx
c000f34e:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f353:	5e                   	pop    esi
c000f354:	68 98 58 02 c0       	push   0xc0025898
c000f359:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f35f:	e8 f6 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f364:	0f 21 d8             	mov    eax,db3
c000f367:	5f                   	pop    edi
c000f368:	5d                   	pop    ebp
c000f369:	50                   	push   eax
c000f36a:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f36f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f375:	e8 9a bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f37a:	58                   	pop    eax
c000f37b:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f380:	5a                   	pop    edx
c000f381:	68 a0 58 02 c0       	push   0xc00258a0
c000f386:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f38c:	e8 c9 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f391:	0f 21 f0             	mov    eax,db6
c000f394:	59                   	pop    ecx
c000f395:	5e                   	pop    esi
c000f396:	50                   	push   eax
c000f397:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f39c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3a2:	e8 6d bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f3a7:	5f                   	pop    edi
c000f3a8:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f3ad:	5d                   	pop    ebp
c000f3ae:	68 a8 58 02 c0       	push   0xc00258a8
c000f3b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b9:	e8 9c bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f3be:	0f 21 f8             	mov    eax,db7
c000f3c1:	5a                   	pop    edx
c000f3c2:	59                   	pop    ecx
c000f3c3:	50                   	push   eax
c000f3c4:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f3c9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3cf:	e8 40 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f3d4:	5e                   	pop    esi
c000f3d5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f3d8:	e8 f8 8d 00 00       	call   c00181d5 <Thr::getDriverNameFromAddress(unsigned long)>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	85 c0                	test   eax,eax
c000f3e2:	74 7d                	je     c000f461 <displayDebugInfo(regs*)+0x48b>
c000f3e4:	89 c6                	mov    esi,eax
c000f3e6:	50                   	push   eax
c000f3e7:	50                   	push   eax
c000f3e8:	56                   	push   esi
c000f3e9:	68 b0 58 02 c0       	push   0xc00258b0
c000f3ee:	e8 4c dc ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f3f3:	5a                   	pop    edx
c000f3f4:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f3f9:	59                   	pop    ecx
c000f3fa:	68 be 58 02 c0       	push   0xc00258be
c000f3ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f405:	e8 50 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f40a:	5f                   	pop    edi
c000f40b:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f410:	5d                   	pop    ebp
c000f411:	56                   	push   esi
c000f412:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f418:	e8 3d bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f41d:	58                   	pop    eax
c000f41e:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f423:	5a                   	pop    edx
c000f424:	68 ca 58 02 c0       	push   0xc00258ca
c000f429:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f42f:	e8 26 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f434:	59                   	pop    ecx
c000f435:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c000f43a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f440:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f443:	e8 c4 8d 00 00       	call   c001820c <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f448:	5b                   	pop    ebx
c000f449:	5d                   	pop    ebp
c000f44a:	50                   	push   eax
c000f44b:	57                   	push   edi
c000f44c:	e8 c3 be ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f451:	58                   	pop    eax
c000f452:	5a                   	pop    edx
c000f453:	56                   	push   esi
c000f454:	68 d6 58 02 c0       	push   0xc00258d6
c000f459:	e8 e1 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	fa                   	cli    
c000f462:	f4                   	hlt    
c000f463:	eb fe                	jmp    c000f463 <displayDebugInfo(regs*)+0x48d>

c000f465 <x87EmulHandler(regs*, void*)>:
c000f465:	83 ec 18             	sub    esp,0x18
c000f468:	68 e6 58 02 c0       	push   0xc00258e6
c000f46d:	e8 cd db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f472:	0f 20 c2             	mov    edx,cr0
c000f475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f481:	75 4b                	jne    c000f4ce <x87EmulHandler(regs*, void*)+0x69>
c000f483:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000f488:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f48e:	85 c0                	test   eax,eax
c000f490:	74 05                	je     c000f497 <x87EmulHandler(regs*, void*)+0x32>
c000f492:	83 e2 08             	and    edx,0x8
c000f495:	75 17                	jne    c000f4ae <x87EmulHandler(regs*, void*)+0x49>
c000f497:	83 ec 0c             	sub    esp,0xc
c000f49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f49e:	e8 eb b3 00 00       	call   c001a88e <Vm::x87Handler(regs*)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	84 c0                	test   al,al
c000f4a8:	74 24                	je     c000f4ce <x87EmulHandler(regs*, void*)+0x69>
c000f4aa:	83 c4 0c             	add    esp,0xc
c000f4ad:	c3                   	ret    
c000f4ae:	83 ec 0c             	sub    esp,0xc
c000f4b1:	68 16 59 02 c0       	push   0xc0025916
c000f4b6:	e8 84 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f4bb:	0f 06                	clts   
c000f4bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	a3 e8 8d 02 c0       	mov    ds:0xc0028de8,eax
c000f4ca:	83 c4 0c             	add    esp,0xc
c000f4cd:	c3                   	ret    
c000f4ce:	83 ec 0c             	sub    esp,0xc
c000f4d1:	68 00 59 02 c0       	push   0xc0025900
c000f4d6:	e8 64 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f4db:	5a                   	pop    edx
c000f4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e0:	e8 f1 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f4e5 <gpFault(regs*, void*)>:
c000f4e5:	53                   	push   ebx
c000f4e6:	83 ec 14             	sub    esp,0x14
c000f4e9:	c7 05 e4 8d 02 c0 4b 9d 01 c0 	mov    DWORD PTR ds:0xc0028de4,0xc0019d4b
c000f4f3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f4f7:	53                   	push   ebx
c000f4f8:	e8 4e a8 00 00       	call   c0019d4b <Vm::faultHandler(regs*)>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	84 c0                	test   al,al
c000f502:	74 05                	je     c000f509 <gpFault(regs*, void*)+0x24>
c000f504:	83 c4 08             	add    esp,0x8
c000f507:	5b                   	pop    ebx
c000f508:	c3                   	ret    
c000f509:	83 ec 0c             	sub    esp,0xc
c000f50c:	68 23 59 02 c0       	push   0xc0025923
c000f511:	e8 29 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f519:	e8 b8 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f51e <pgFault(regs*, void*)>:
c000f51e:	53                   	push   ebx
c000f51f:	83 ec 10             	sub    esp,0x10
c000f522:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f526:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f529:	68 3e 59 02 c0       	push   0xc002593e
c000f52e:	e8 0c db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f533:	0f 20 d0             	mov    eax,cr2
c000f536:	5a                   	pop    edx
c000f537:	59                   	pop    ecx
c000f538:	50                   	push   eax
c000f539:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f53e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f541:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f547:	e8 6e d6 ff ff       	call   c000cbba <VAS::tryLoadBackOffDisk(unsigned long)>
c000f54c:	83 c4 10             	add    esp,0x10
c000f54f:	84 c0                	test   al,al
c000f551:	74 05                	je     c000f558 <pgFault(regs*, void*)+0x3a>
c000f553:	83 c4 08             	add    esp,0x8
c000f556:	5b                   	pop    ebx
c000f557:	c3                   	ret    
c000f558:	83 ec 0c             	sub    esp,0xc
c000f55b:	68 53 59 02 c0       	push   0xc0025953
c000f560:	e8 da da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f565:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f568:	e8 69 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f56d <otherISRHandler(regs*, void*)>:
c000f56d:	53                   	push   ebx
c000f56e:	83 ec 0c             	sub    esp,0xc
c000f571:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f575:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f578:	50                   	push   eax
c000f579:	50                   	push   eax
c000f57a:	68 60 59 02 c0       	push   0xc0025960
c000f57f:	e8 bb da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f584:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f587:	e8 4a fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f58c <opcodeFault(regs*, void*)>:
c000f58c:	55                   	push   ebp
c000f58d:	89 e5                	mov    ebp,esp
c000f58f:	56                   	push   esi
c000f590:	53                   	push   ebx
c000f591:	83 ec 30             	sub    esp,0x30
c000f594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f597:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f59a:	83 ec 08             	sub    esp,0x8
c000f59d:	50                   	push   eax
c000f59e:	68 7d 59 02 c0       	push   0xc002597d
c000f5a3:	e8 97 da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f5a8:	83 c4 10             	add    esp,0x10
c000f5ab:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000f5b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f5b6:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f5bc:	84 c0                	test   al,al
c000f5be:	74 24                	je     c000f5e4 <opcodeFault(regs*, void*)+0x58>
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	68 8c 59 02 c0       	push   0xc002598c
c000f5c8:	e8 72 da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f5cd:	83 c4 10             	add    esp,0x10
c000f5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5d6:	8d 50 19             	lea    edx,[eax+0x19]
c000f5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5df:	e9 7b 03 00 00       	jmp    c000f95f <opcodeFault(regs*, void*)+0x3d3>
c000f5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f5ed:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f5fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f5ff:	3c f0                	cmp    al,0xf0
c000f601:	75 17                	jne    c000f61a <opcodeFault(regs*, void*)+0x8e>
c000f603:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f609:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f60c:	8d 50 01             	lea    edx,[eax+0x1]
c000f60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f612:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f615:	e9 d6 00 00 00       	jmp    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f61a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f61d:	8a 00                	mov    al,BYTE PTR [eax]
c000f61f:	3c f2                	cmp    al,0xf2
c000f621:	74 09                	je     c000f62c <opcodeFault(regs*, void*)+0xa0>
c000f623:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f626:	8a 00                	mov    al,BYTE PTR [eax]
c000f628:	3c f3                	cmp    al,0xf3
c000f62a:	75 1b                	jne    c000f647 <opcodeFault(regs*, void*)+0xbb>
c000f62c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f630:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f636:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f639:	8d 50 01             	lea    edx,[eax+0x1]
c000f63c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f63f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f642:	e9 a9 00 00 00       	jmp    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f64a:	8a 00                	mov    al,BYTE PTR [eax]
c000f64c:	3c 66                	cmp    al,0x66
c000f64e:	75 1b                	jne    c000f66b <opcodeFault(regs*, void*)+0xdf>
c000f650:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f654:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f65a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f65d:	8d 50 01             	lea    edx,[eax+0x1]
c000f660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f663:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f666:	e9 85 00 00 00       	jmp    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f66b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f66e:	8a 00                	mov    al,BYTE PTR [eax]
c000f670:	3c 67                	cmp    al,0x67
c000f672:	75 18                	jne    c000f68c <opcodeFault(regs*, void*)+0x100>
c000f674:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f678:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f67e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f681:	8d 50 01             	lea    edx,[eax+0x1]
c000f684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f687:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f68a:	eb 64                	jmp    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f68c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68f:	8a 00                	mov    al,BYTE PTR [eax]
c000f691:	3c 2e                	cmp    al,0x2e
c000f693:	74 09                	je     c000f69e <opcodeFault(regs*, void*)+0x112>
c000f695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f698:	8a 00                	mov    al,BYTE PTR [eax]
c000f69a:	3c 3e                	cmp    al,0x3e
c000f69c:	75 18                	jne    c000f6b6 <opcodeFault(regs*, void*)+0x12a>
c000f69e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6b4:	eb 3a                	jmp    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f6b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6b9:	8a 00                	mov    al,BYTE PTR [eax]
c000f6bb:	3c 36                	cmp    al,0x36
c000f6bd:	74 1b                	je     c000f6da <opcodeFault(regs*, void*)+0x14e>
c000f6bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c2:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c4:	3c 26                	cmp    al,0x26
c000f6c6:	74 12                	je     c000f6da <opcodeFault(regs*, void*)+0x14e>
c000f6c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6cb:	8a 00                	mov    al,BYTE PTR [eax]
c000f6cd:	3c 64                	cmp    al,0x64
c000f6cf:	74 09                	je     c000f6da <opcodeFault(regs*, void*)+0x14e>
c000f6d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6d4:	8a 00                	mov    al,BYTE PTR [eax]
c000f6d6:	3c 65                	cmp    al,0x65
c000f6d8:	75 16                	jne    c000f6f0 <opcodeFault(regs*, void*)+0x164>
c000f6da:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f3:	8a 00                	mov    al,BYTE PTR [eax]
c000f6f5:	3c 0f                	cmp    al,0xf
c000f6f7:	0f 85 8d 01 00 00    	jne    c000f88a <opcodeFault(regs*, void*)+0x2fe>
c000f6fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f700:	40                   	inc    eax
c000f701:	8a 00                	mov    al,BYTE PTR [eax]
c000f703:	3c c7                	cmp    al,0xc7
c000f705:	0f 85 7f 01 00 00    	jne    c000f88a <opcodeFault(regs*, void*)+0x2fe>
c000f70b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f70e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f711:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f714:	8d 50 01             	lea    edx,[eax+0x1]
c000f717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f71a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f71d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f720:	50                   	push   eax
c000f721:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f724:	50                   	push   eax
c000f725:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f728:	50                   	push   eax
c000f729:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f72c:	e8 e9 4f 00 00       	call   c001471a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f737:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f73a:	83 f0 01             	xor    eax,0x1
c000f73d:	84 c0                	test   al,al
c000f73f:	0f 84 45 01 00 00    	je     c000f88a <opcodeFault(regs*, void*)+0x2fe>
c000f745:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f748:	3c 01                	cmp    al,0x1
c000f74a:	0f 85 3a 01 00 00    	jne    c000f88a <opcodeFault(regs*, void*)+0x2fe>
c000f750:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f753:	83 f0 01             	xor    eax,0x1
c000f756:	84 c0                	test   al,al
c000f758:	0f 84 2c 01 00 00    	je     c000f88a <opcodeFault(regs*, void*)+0x2fe>
c000f75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f761:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f764:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f767:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f76e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f771:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f774:	89 c2                	mov    edx,eax
c000f776:	b8 00 00 00 00       	mov    eax,0x0
c000f77b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f77e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f784:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f787:	ba 00 00 00 00       	mov    edx,0x0
c000f78c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f78f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f795:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f798:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f79b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f7a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f7a5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f7a8:	89 c2                	mov    edx,eax
c000f7aa:	b8 00 00 00 00       	mov    eax,0x0
c000f7af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f7b2:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f7bb:	ba 00 00 00 00       	mov    edx,0x0
c000f7c0:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f7c3:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f7c6:	fa                   	cli    
c000f7c7:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000f7cc:	40                   	inc    eax
c000f7cd:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000f7d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f7d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7da:	89 c1                	mov    ecx,eax
c000f7dc:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f7df:	89 cb                	mov    ebx,ecx
c000f7e1:	89 d0                	mov    eax,edx
c000f7e3:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f7e6:	89 c6                	mov    esi,eax
c000f7e8:	89 f0                	mov    eax,esi
c000f7ea:	09 d8                	or     eax,ebx
c000f7ec:	85 c0                	test   eax,eax
c000f7ee:	75 21                	jne    c000f811 <opcodeFault(regs*, void*)+0x285>
c000f7f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f7f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f7f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f7f9:	89 01                	mov    DWORD PTR [ecx],eax
c000f7fb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f801:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f804:	83 c8 40             	or     eax,0x40
c000f807:	89 c2                	mov    edx,eax
c000f809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f80c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f80f:	eb 3e                	jmp    c000f84f <opcodeFault(regs*, void*)+0x2c3>
c000f811:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f814:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f817:	8b 00                	mov    eax,DWORD PTR [eax]
c000f819:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f81c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f81f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f825:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f828:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f82b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f82e:	89 d0                	mov    eax,edx
c000f830:	31 d2                	xor    edx,edx
c000f832:	89 c3                	mov    ebx,eax
c000f834:	89 d6                	mov    esi,edx
c000f836:	89 da                	mov    edx,ebx
c000f838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f841:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f844:	83 e0 bf             	and    eax,0xffffffbf
c000f847:	89 c2                	mov    edx,eax
c000f849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f84c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f84f:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000f854:	48                   	dec    eax
c000f855:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000f85a:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000f85f:	85 c0                	test   eax,eax
c000f861:	75 01                	jne    c000f864 <opcodeFault(regs*, void*)+0x2d8>
c000f863:	fb                   	sti    
c000f864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f867:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f86a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f86d:	01 c2                	add    edx,eax
c000f86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f872:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f875:	83 ec 0c             	sub    esp,0xc
c000f878:	68 af 59 02 c0       	push   0xc00259af
c000f87d:	e8 bd d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f882:	83 c4 10             	add    esp,0x10
c000f885:	e9 d5 00 00 00       	jmp    c000f95f <opcodeFault(regs*, void*)+0x3d3>
c000f88a:	83 ec 0c             	sub    esp,0xc
c000f88d:	68 c2 59 02 c0       	push   0xc00259c2
c000f892:	e8 a8 d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f897:	83 c4 10             	add    esp,0x10
c000f89a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8a6:	c1 e0 04             	shl    eax,0x4
c000f8a9:	01 d0                	add    eax,edx
c000f8ab:	83 c0 03             	add    eax,0x3
c000f8ae:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b0:	0f b6 d8             	movzx  ebx,al
c000f8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8bf:	c1 e0 04             	shl    eax,0x4
c000f8c2:	01 d0                	add    eax,edx
c000f8c4:	83 c0 02             	add    eax,0x2
c000f8c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f8c9:	0f b6 c8             	movzx  ecx,al
c000f8cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8cf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8d8:	c1 e0 04             	shl    eax,0x4
c000f8db:	01 d0                	add    eax,edx
c000f8dd:	40                   	inc    eax
c000f8de:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e0:	0f b6 d0             	movzx  edx,al
c000f8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8ef:	c1 e0 04             	shl    eax,0x4
c000f8f2:	01 f0                	add    eax,esi
c000f8f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f8f6:	0f b6 c0             	movzx  eax,al
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	53                   	push   ebx
c000f8fd:	51                   	push   ecx
c000f8fe:	52                   	push   edx
c000f8ff:	50                   	push   eax
c000f900:	68 d4 59 02 c0       	push   0xc00259d4
c000f905:	e8 35 d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f90a:	83 c4 20             	add    esp,0x20
c000f90d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f910:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f913:	83 c0 03             	add    eax,0x3
c000f916:	8a 00                	mov    al,BYTE PTR [eax]
c000f918:	0f b6 d8             	movzx  ebx,al
c000f91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f921:	83 c0 02             	add    eax,0x2
c000f924:	8a 00                	mov    al,BYTE PTR [eax]
c000f926:	0f b6 c8             	movzx  ecx,al
c000f929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f92f:	40                   	inc    eax
c000f930:	8a 00                	mov    al,BYTE PTR [eax]
c000f932:	0f b6 d0             	movzx  edx,al
c000f935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f938:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f93b:	8a 00                	mov    al,BYTE PTR [eax]
c000f93d:	0f b6 c0             	movzx  eax,al
c000f940:	83 ec 0c             	sub    esp,0xc
c000f943:	53                   	push   ebx
c000f944:	51                   	push   ecx
c000f945:	52                   	push   edx
c000f946:	50                   	push   eax
c000f947:	68 fc 59 02 c0       	push   0xc00259fc
c000f94c:	e8 ee d6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f951:	83 c4 20             	add    esp,0x20
c000f954:	83 ec 0c             	sub    esp,0xc
c000f957:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f95a:	e8 77 f6 ff ff       	call   c000efd6 <displayDebugInfo(regs*)>
c000f95f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f962:	5b                   	pop    ebx
c000f963:	5e                   	pop    esi
c000f964:	5d                   	pop    ebp
c000f965:	c3                   	ret    

c000f966 <displayProgramFault(char const*)>:
c000f966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f96b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f96e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f974:	85 c0                	test   eax,eax
c000f976:	74 15                	je     c000f98d <displayProgramFault(char const*)+0x27>
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	6a 04                	push   0x4
c000f97d:	6a 0f                	push   0xf
c000f97f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f983:	50                   	push   eax
c000f984:	e8 cd b6 ff ff       	call   c000b056 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f989:	83 c4 1c             	add    esp,0x1c
c000f98c:	c3                   	ret    
c000f98d:	c3                   	ret    

c000f98e <setupInterruptController()>:
c000f98e:	55                   	push   ebp
c000f98f:	89 e5                	mov    ebp,esp
c000f991:	53                   	push   ebx
c000f992:	83 ec 24             	sub    esp,0x24
c000f995:	b8 00 00 00 00       	mov    eax,0x0
c000f99a:	85 c0                	test   eax,eax
c000f99c:	0f 95 c0             	setne  al
c000f99f:	84 c0                	test   al,al
c000f9a1:	74 5b                	je     c000f9fe <setupInterruptController()+0x70>
c000f9a3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f9aa:	83 ec 0c             	sub    esp,0xc
c000f9ad:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f9b0:	e8 9e a3 ff ff       	call   c0009d53 <malloc>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	89 c3                	mov    ebx,eax
c000f9ba:	83 ec 0c             	sub    esp,0xc
c000f9bd:	53                   	push   ebx
c000f9be:	e8 13 24 01 00       	call   c0021dd6 <APIC::APIC()>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f9c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f9cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d1:	83 c0 08             	add    eax,0x8
c000f9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d6:	6a 00                	push   0x0
c000f9d8:	6a 00                	push   0x0
c000f9da:	6a 00                	push   0x0
c000f9dc:	52                   	push   edx
c000f9dd:	ff d0                	call   eax
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000f9e7:	83 ec 08             	sub    esp,0x8
c000f9ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f9ed:	50                   	push   eax
c000f9ee:	e8 bf eb ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9f9:	e9 79 03 00 00       	jmp    c000fd77 <setupInterruptController()+0x3e9>
c000f9fe:	a0 c0 95 02 c0       	mov    al,ds:0xc00295c0
c000fa03:	84 c0                	test   al,al
c000fa05:	75 14                	jne    c000fa1b <setupInterruptController()+0x8d>
c000fa07:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000fa0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fa12:	83 e2 fe             	and    edx,0xfffffffe
c000fa15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fa1b:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000fa20:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fa26:	83 e0 01             	and    eax,0x1
c000fa29:	84 c0                	test   al,al
c000fa2b:	0f 95 c0             	setne  al
c000fa2e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fa31:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fa38:	83 ec 0c             	sub    esp,0xc
c000fa3b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fa3e:	e8 10 a3 ff ff       	call   c0009d53 <malloc>
c000fa43:	83 c4 10             	add    esp,0x10
c000fa46:	89 c3                	mov    ebx,eax
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	53                   	push   ebx
c000fa4c:	e8 dd 28 01 00       	call   c002232e <PIC::PIC()>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fa57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa5f:	83 c0 08             	add    eax,0x8
c000fa62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa64:	6a 00                	push   0x0
c000fa66:	6a 00                	push   0x0
c000fa68:	6a 00                	push   0x0
c000fa6a:	52                   	push   edx
c000fa6b:	ff d0                	call   eax
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fa74:	74 73                	je     c000fae9 <setupInterruptController()+0x15b>
c000fa76:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa7e:	83 c0 0c             	add    eax,0xc
c000fa81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa83:	6a 00                	push   0x0
c000fa85:	6a 00                	push   0x0
c000fa87:	6a 00                	push   0x0
c000fa89:	52                   	push   edx
c000fa8a:	ff d0                	call   eax
c000fa8c:	83 c4 10             	add    esp,0x10
c000fa8f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fa93:	74 15                	je     c000faaa <setupInterruptController()+0x11c>
c000fa95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9a:	83 c0 04             	add    eax,0x4
c000fa9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa9f:	83 ec 0c             	sub    esp,0xc
c000faa2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000faa5:	ff d0                	call   eax
c000faa7:	83 c4 10             	add    esp,0x10
c000faaa:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fab7:	e8 97 a2 ff ff       	call   c0009d53 <malloc>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	89 c3                	mov    ebx,eax
c000fac1:	83 ec 0c             	sub    esp,0xc
c000fac4:	53                   	push   ebx
c000fac5:	e8 0c 23 01 00       	call   c0021dd6 <APIC::APIC()>
c000faca:	83 c4 10             	add    esp,0x10
c000facd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fad0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fad6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad8:	83 c0 08             	add    eax,0x8
c000fadb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadd:	6a 00                	push   0x0
c000fadf:	6a 00                	push   0x0
c000fae1:	6a 00                	push   0x0
c000fae3:	52                   	push   edx
c000fae4:	ff d0                	call   eax
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000faee:	83 ec 08             	sub    esp,0x8
c000faf1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000faf4:	50                   	push   eax
c000faf5:	e8 b8 ea ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	c7 05 e8 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028de8,0x0
c000fb07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0c:	83 c0 24             	add    eax,0x24
c000fb0f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb11:	6a 00                	push   0x0
c000fb13:	68 6d f5 00 c0       	push   0xc000f56d
c000fb18:	6a 00                	push   0x0
c000fb1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb1d:	ff d0                	call   eax
c000fb1f:	83 c4 10             	add    esp,0x10
c000fb22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb25:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb27:	83 c0 24             	add    eax,0x24
c000fb2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb2c:	6a 00                	push   0x0
c000fb2e:	68 6d f5 00 c0       	push   0xc000f56d
c000fb33:	6a 01                	push   0x1
c000fb35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb38:	ff d0                	call   eax
c000fb3a:	83 c4 10             	add    esp,0x10
c000fb3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb40:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb42:	83 c0 24             	add    eax,0x24
c000fb45:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb47:	6a 00                	push   0x0
c000fb49:	68 33 ee 00 c0       	push   0xc000ee33
c000fb4e:	6a 02                	push   0x2
c000fb50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb53:	ff d0                	call   eax
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb5d:	83 c0 24             	add    eax,0x24
c000fb60:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb62:	6a 00                	push   0x0
c000fb64:	68 6d f5 00 c0       	push   0xc000f56d
c000fb69:	6a 03                	push   0x3
c000fb6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb6e:	ff d0                	call   eax
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb78:	83 c0 24             	add    eax,0x24
c000fb7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb7d:	6a 00                	push   0x0
c000fb7f:	68 6d f5 00 c0       	push   0xc000f56d
c000fb84:	6a 04                	push   0x4
c000fb86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb89:	ff d0                	call   eax
c000fb8b:	83 c4 10             	add    esp,0x10
c000fb8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb91:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb93:	83 c0 24             	add    eax,0x24
c000fb96:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb98:	6a 00                	push   0x0
c000fb9a:	68 6d f5 00 c0       	push   0xc000f56d
c000fb9f:	6a 05                	push   0x5
c000fba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fba4:	ff d0                	call   eax
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbae:	83 c0 24             	add    eax,0x24
c000fbb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbb3:	6a 00                	push   0x0
c000fbb5:	68 8c f5 00 c0       	push   0xc000f58c
c000fbba:	6a 06                	push   0x6
c000fbbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbbf:	ff d0                	call   eax
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbc7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc9:	83 c0 24             	add    eax,0x24
c000fbcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbce:	6a 00                	push   0x0
c000fbd0:	68 65 f4 00 c0       	push   0xc000f465
c000fbd5:	6a 07                	push   0x7
c000fbd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbda:	ff d0                	call   eax
c000fbdc:	83 c4 10             	add    esp,0x10
c000fbdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe4:	83 c0 24             	add    eax,0x24
c000fbe7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbe9:	6a 00                	push   0x0
c000fbeb:	68 4e ec 00 c0       	push   0xc000ec4e
c000fbf0:	6a 08                	push   0x8
c000fbf2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbf5:	ff d0                	call   eax
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbfd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbff:	83 c0 24             	add    eax,0x24
c000fc02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc04:	6a 00                	push   0x0
c000fc06:	68 6d f5 00 c0       	push   0xc000f56d
c000fc0b:	6a 09                	push   0x9
c000fc0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc10:	ff d0                	call   eax
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc18:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1a:	83 c0 24             	add    eax,0x24
c000fc1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1f:	6a 00                	push   0x0
c000fc21:	68 6d f5 00 c0       	push   0xc000f56d
c000fc26:	6a 0a                	push   0xa
c000fc28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc2b:	ff d0                	call   eax
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc33:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc35:	83 c0 24             	add    eax,0x24
c000fc38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc3a:	6a 00                	push   0x0
c000fc3c:	68 6d f5 00 c0       	push   0xc000f56d
c000fc41:	6a 0b                	push   0xb
c000fc43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc46:	ff d0                	call   eax
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc50:	83 c0 24             	add    eax,0x24
c000fc53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc55:	6a 00                	push   0x0
c000fc57:	68 6d f5 00 c0       	push   0xc000f56d
c000fc5c:	6a 0c                	push   0xc
c000fc5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc61:	ff d0                	call   eax
c000fc63:	83 c4 10             	add    esp,0x10
c000fc66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc69:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6b:	83 c0 24             	add    eax,0x24
c000fc6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc70:	6a 00                	push   0x0
c000fc72:	68 e5 f4 00 c0       	push   0xc000f4e5
c000fc77:	6a 0d                	push   0xd
c000fc79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc7c:	ff d0                	call   eax
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc86:	83 c0 24             	add    eax,0x24
c000fc89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc8b:	6a 00                	push   0x0
c000fc8d:	68 1e f5 00 c0       	push   0xc000f51e
c000fc92:	6a 0e                	push   0xe
c000fc94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc97:	ff d0                	call   eax
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca1:	83 c0 24             	add    eax,0x24
c000fca4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca6:	6a 00                	push   0x0
c000fca8:	68 6d f5 00 c0       	push   0xc000f56d
c000fcad:	6a 0f                	push   0xf
c000fcaf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcb2:	ff d0                	call   eax
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcba:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbc:	83 c0 24             	add    eax,0x24
c000fcbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc1:	6a 00                	push   0x0
c000fcc3:	68 6d f5 00 c0       	push   0xc000f56d
c000fcc8:	6a 10                	push   0x10
c000fcca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fccd:	ff d0                	call   eax
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd7:	83 c0 24             	add    eax,0x24
c000fcda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcdc:	6a 00                	push   0x0
c000fcde:	68 6d f5 00 c0       	push   0xc000f56d
c000fce3:	6a 11                	push   0x11
c000fce5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fce8:	ff d0                	call   eax
c000fcea:	83 c4 10             	add    esp,0x10
c000fced:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf2:	83 c0 24             	add    eax,0x24
c000fcf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	68 6d f5 00 c0       	push   0xc000f56d
c000fcfe:	6a 12                	push   0x12
c000fd00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd03:	ff d0                	call   eax
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0d:	83 c0 24             	add    eax,0x24
c000fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd12:	6a 00                	push   0x0
c000fd14:	68 6d f5 00 c0       	push   0xc000f56d
c000fd19:	6a 13                	push   0x13
c000fd1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd1e:	ff d0                	call   eax
c000fd20:	83 c4 10             	add    esp,0x10
c000fd23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd28:	83 c0 24             	add    eax,0x24
c000fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd2d:	6a 00                	push   0x0
c000fd2f:	68 6d f5 00 c0       	push   0xc000f56d
c000fd34:	6a 14                	push   0x14
c000fd36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd39:	ff d0                	call   eax
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd41:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd43:	83 c0 24             	add    eax,0x24
c000fd46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd48:	6a 00                	push   0x0
c000fd4a:	68 6d f5 00 c0       	push   0xc000f56d
c000fd4f:	6a 1e                	push   0x1e
c000fd51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd54:	ff d0                	call   eax
c000fd56:	83 c4 10             	add    esp,0x10
c000fd59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5e:	83 c0 24             	add    eax,0x24
c000fd61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd63:	6a 00                	push   0x0
c000fd65:	68 4b 72 01 c0       	push   0xc001724b
c000fd6a:	6a 60                	push   0x60
c000fd6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd6f:	ff d0                	call   eax
c000fd71:	83 c4 10             	add    esp,0x10
c000fd74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd77:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fd7a:	c9                   	leave  
c000fd7b:	c3                   	ret    

c000fd7c <InterruptController::convertLegacyIRQNumber(int)>:
c000fd7c:	55                   	push   ebp
c000fd7d:	89 e5                	mov    ebp,esp
c000fd7f:	83 ec 08             	sub    esp,0x8
c000fd82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd85:	83 ec 0c             	sub    esp,0xc
c000fd88:	50                   	push   eax
c000fd89:	e8 24 eb ff ff       	call   c000e8b2 <Device::getName()>
c000fd8e:	83 c4 10             	add    esp,0x10
c000fd91:	8a 00                	mov    al,BYTE PTR [eax]
c000fd93:	3c 41                	cmp    al,0x41
c000fd95:	0f 94 c0             	sete   al
c000fd98:	84 c0                	test   al,al
c000fd9a:	74 28                	je     c000fdc4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fd9c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fda0:	7f 12                	jg     c000fdb4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fda2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fda5:	05 a0 83 02 c0       	add    eax,0xc00283a0
c000fdaa:	8a 00                	mov    al,BYTE PTR [eax]
c000fdac:	0f b6 c0             	movzx  eax,al
c000fdaf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fdb2:	eb 10                	jmp    c000fdc4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	68 24 5a 02 c0       	push   0xc0025a24
c000fdbc:	e8 40 52 00 00       	call   c0015001 <Krnl::panic(char const*)>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdc7:	c9                   	leave  
c000fdc8:	c3                   	ret    
c000fdc9:	90                   	nop

c000fdca <startGUI(void*)>:
c000fdca:	55                   	push   ebp
c000fdcb:	89 e5                	mov    ebp,esp
c000fdcd:	53                   	push   ebx
c000fdce:	83 ec 04             	sub    esp,0x4
c000fdd1:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000fdd6:	48                   	dec    eax
c000fdd7:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000fddc:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000fde1:	85 c0                	test   eax,eax
c000fde3:	75 01                	jne    c000fde6 <startGUI(void*)+0x1c>
c000fde5:	fb                   	sti    
c000fde6:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000fdec:	83 ec 08             	sub    esp,0x8
c000fdef:	6a 01                	push   0x1
c000fdf1:	68 a4 5a 02 c0       	push   0xc0025aa4
c000fdf6:	e8 2b 84 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	83 ec 08             	sub    esp,0x8
c000fe01:	53                   	push   ebx
c000fe02:	50                   	push   eax
c000fe03:	e8 4f 86 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c000fe08:	83 c4 10             	add    esp,0x10
c000fe0b:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000fe11:	83 ec 08             	sub    esp,0x8
c000fe14:	6a 01                	push   0x1
c000fe16:	68 be 5a 02 c0       	push   0xc0025abe
c000fe1b:	e8 06 84 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c000fe20:	83 c4 10             	add    esp,0x10
c000fe23:	83 ec 08             	sub    esp,0x8
c000fe26:	53                   	push   ebx
c000fe27:	50                   	push   eax
c000fe28:	e8 2a 86 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c000fe2d:	83 c4 10             	add    esp,0x10
c000fe30:	90                   	nop
c000fe31:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe34:	c9                   	leave  
c000fe35:	c3                   	ret    

c000fe36 <startGUIVESA(void*)>:
c000fe36:	55                   	push   ebp
c000fe37:	89 e5                	mov    ebp,esp
c000fe39:	53                   	push   ebx
c000fe3a:	83 ec 04             	sub    esp,0x4
c000fe3d:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000fe42:	48                   	dec    eax
c000fe43:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000fe48:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000fe4d:	85 c0                	test   eax,eax
c000fe4f:	75 01                	jne    c000fe52 <startGUIVESA(void*)+0x1c>
c000fe51:	fb                   	sti    
c000fe52:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000fe58:	83 ec 08             	sub    esp,0x8
c000fe5b:	6a 01                	push   0x1
c000fe5d:	68 dc 5a 02 c0       	push   0xc0025adc
c000fe62:	e8 bf 83 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c000fe67:	83 c4 10             	add    esp,0x10
c000fe6a:	83 ec 08             	sub    esp,0x8
c000fe6d:	53                   	push   ebx
c000fe6e:	50                   	push   eax
c000fe6f:	e8 e3 85 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000fe7d:	83 ec 08             	sub    esp,0x8
c000fe80:	6a 01                	push   0x1
c000fe82:	68 be 5a 02 c0       	push   0xc0025abe
c000fe87:	e8 9a 83 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	83 ec 08             	sub    esp,0x8
c000fe92:	53                   	push   ebx
c000fe93:	50                   	push   eax
c000fe94:	e8 be 85 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	90                   	nop
c000fe9d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fea0:	c9                   	leave  
c000fea1:	c3                   	ret    

c000fea2 <sendKeyToTerminal(unsigned char)>:
c000fea2:	55                   	push   ebp
c000fea3:	89 e5                	mov    ebp,esp
c000fea5:	83 ec 28             	sub    esp,0x28
c000fea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000feae:	a1 24 8d 02 c0       	mov    eax,ds:0xc0028d24
c000feb3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000feb7:	83 ec 08             	sub    esp,0x8
c000feba:	52                   	push   edx
c000febb:	50                   	push   eax
c000febc:	e8 3b b6 ff ff       	call   c000b4fc <VgaText::receiveKey(unsigned char)>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fec8:	0f 85 8f 00 00 00    	jne    c000ff5d <sendKeyToTerminal(unsigned char)+0xbb>
c000fece:	fa                   	cli    
c000fecf:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000fed4:	40                   	inc    eax
c000fed5:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000feda:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c000fedf:	40                   	inc    eax
c000fee0:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c000fee5:	a1 00 8e 02 c0       	mov    eax,ds:0xc0028e00
c000feea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000feed:	c7 05 00 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028e00,0x0
c000fef7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fefb:	74 1f                	je     c000ff1c <sendKeyToTerminal(unsigned char)+0x7a>
c000fefd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ff00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000ff03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ff0c:	83 ec 0c             	sub    esp,0xc
c000ff0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff12:	e8 05 93 00 00       	call   c001921c <unblockTask(ThreadControlBlock*)>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	eb db                	jmp    c000fef7 <sendKeyToTerminal(unsigned char)+0x55>
c000ff1c:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c000ff21:	48                   	dec    eax
c000ff22:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c000ff27:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	75 18                	jne    c000ff48 <sendKeyToTerminal(unsigned char)+0xa6>
c000ff30:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c000ff35:	85 c0                	test   eax,eax
c000ff37:	74 0f                	je     c000ff48 <sendKeyToTerminal(unsigned char)+0xa6>
c000ff39:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c000ff43:	e8 18 8e 00 00       	call   c0018d60 <schedule()>
c000ff48:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000ff4d:	48                   	dec    eax
c000ff4e:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c000ff53:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c000ff58:	85 c0                	test   eax,eax
c000ff5a:	75 01                	jne    c000ff5d <sendKeyToTerminal(unsigned char)+0xbb>
c000ff5c:	fb                   	sti    
c000ff5d:	90                   	nop
c000ff5e:	c9                   	leave  
c000ff5f:	c3                   	ret    

c000ff60 <sendKeyboardToken(KeyboardToken)>:
c000ff60:	55                   	push   ebp
c000ff61:	89 e5                	mov    ebp,esp
c000ff63:	83 ec 18             	sub    esp,0x18
c000ff66:	e8 6f 53 00 00       	call   c00152da <Krnl::userIOReceived()>
c000ff6b:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ff6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff71:	0f b7 c0             	movzx  eax,ax
c000ff74:	83 f2 01             	xor    edx,0x1
c000ff77:	88 90 20 8e 02 c0    	mov    BYTE PTR [eax-0x3ffd71e0],dl
c000ff7d:	a1 08 8e 02 c0       	mov    eax,ds:0xc0028e08
c000ff82:	85 c0                	test   eax,eax
c000ff84:	74 24                	je     c000ffaa <sendKeyboardToken(KeyboardToken)+0x4a>
c000ff86:	8b 0d 08 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e08
c000ff8c:	83 ec 04             	sub    esp,0x4
c000ff8f:	68 20 8e 02 c0       	push   0xc0028e20
c000ff94:	83 ec 08             	sub    esp,0x8
c000ff97:	89 e2                	mov    edx,esp
c000ff99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff9c:	89 02                	mov    DWORD PTR [edx],eax
c000ff9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffa1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ffa5:	ff d1                	call   ecx
c000ffa7:	83 c4 10             	add    esp,0x10
c000ffaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffad:	66 3d 03 02          	cmp    ax,0x203
c000ffb1:	75 07                	jne    c000ffba <sendKeyboardToken(KeyboardToken)+0x5a>
c000ffb3:	a0 20 8f 02 c0       	mov    al,ds:0xc0028f20
c000ffb8:	84 c0                	test   al,al
c000ffba:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ffbe:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ffc1:	a0 28 92 02 c0       	mov    al,ds:0xc0029228
c000ffc6:	38 c2                	cmp    dl,al
c000ffc8:	74 1c                	je     c000ffe6 <sendKeyboardToken(KeyboardToken)+0x86>
c000ffca:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ffcd:	a2 28 92 02 c0       	mov    ds:0xc0029228,al
c000ffd2:	a0 28 92 02 c0       	mov    al,ds:0xc0029228
c000ffd7:	0f b6 c0             	movzx  eax,al
c000ffda:	83 ec 0c             	sub    esp,0xc
c000ffdd:	50                   	push   eax
c000ffde:	e8 5b ab ff ff       	call   c000ab3e <setTerminalScrollLock(bool)>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ffe9:	84 c0                	test   al,al
c000ffeb:	0f 84 ae 00 00 00    	je     c001009f <sendKeyboardToken(KeyboardToken)+0x13f>
c000fff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fff4:	66 3d 10 03          	cmp    ax,0x310
c000fff8:	75 06                	jne    c0010000 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fffa:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0010000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010003:	66 3d 11 03          	cmp    ax,0x311
c0010007:	75 06                	jne    c001000f <sendKeyboardToken(KeyboardToken)+0xaf>
c0010009:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010012:	66 3d 12 03          	cmp    ax,0x312
c0010016:	75 06                	jne    c001001e <sendKeyboardToken(KeyboardToken)+0xbe>
c0010018:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010021:	66 3d 13 03          	cmp    ax,0x313
c0010025:	75 06                	jne    c001002d <sendKeyboardToken(KeyboardToken)+0xcd>
c0010027:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001002d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010030:	66 3d 14 03          	cmp    ax,0x314
c0010034:	75 06                	jne    c001003c <sendKeyboardToken(KeyboardToken)+0xdc>
c0010036:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001003c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003f:	66 3d 15 03          	cmp    ax,0x315
c0010043:	75 06                	jne    c001004b <sendKeyboardToken(KeyboardToken)+0xeb>
c0010045:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001004b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001004e:	66 3d 16 03          	cmp    ax,0x316
c0010052:	75 06                	jne    c001005a <sendKeyboardToken(KeyboardToken)+0xfa>
c0010054:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001005a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005d:	66 3d 17 03          	cmp    ax,0x317
c0010061:	75 06                	jne    c0010069 <sendKeyboardToken(KeyboardToken)+0x109>
c0010063:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0010069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006c:	66 3d 18 03          	cmp    ax,0x318
c0010070:	75 06                	jne    c0010078 <sendKeyboardToken(KeyboardToken)+0x118>
c0010072:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0010078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001007b:	66 3d 19 03          	cmp    ax,0x319
c001007f:	75 06                	jne    c0010087 <sendKeyboardToken(KeyboardToken)+0x127>
c0010081:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0010087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001008a:	66 3d 1a 03          	cmp    ax,0x31a
c001008e:	0f 85 c9 00 00 00    	jne    c001015d <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010094:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001009a:	e9 be 00 00 00       	jmp    c001015d <sendKeyboardToken(KeyboardToken)+0x1fd>
c001009f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100a2:	66 3d 10 03          	cmp    ax,0x310
c00100a6:	75 0a                	jne    c00100b2 <sendKeyboardToken(KeyboardToken)+0x152>
c00100a8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00100ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100b5:	66 3d 11 03          	cmp    ax,0x311
c00100b9:	75 0a                	jne    c00100c5 <sendKeyboardToken(KeyboardToken)+0x165>
c00100bb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00100c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100c8:	66 3d 12 03          	cmp    ax,0x312
c00100cc:	75 0a                	jne    c00100d8 <sendKeyboardToken(KeyboardToken)+0x178>
c00100ce:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00100d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100db:	66 3d 13 03          	cmp    ax,0x313
c00100df:	75 0a                	jne    c00100eb <sendKeyboardToken(KeyboardToken)+0x18b>
c00100e1:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00100e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100ee:	66 3d 14 03          	cmp    ax,0x314
c00100f2:	75 0a                	jne    c00100fe <sendKeyboardToken(KeyboardToken)+0x19e>
c00100f4:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00100fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010101:	66 3d 15 03          	cmp    ax,0x315
c0010105:	75 0a                	jne    c0010111 <sendKeyboardToken(KeyboardToken)+0x1b1>
c0010107:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001010d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010114:	66 3d 16 03          	cmp    ax,0x316
c0010118:	75 0a                	jne    c0010124 <sendKeyboardToken(KeyboardToken)+0x1c4>
c001011a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010120:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010127:	66 3d 17 03          	cmp    ax,0x317
c001012b:	75 0a                	jne    c0010137 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001012d:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010133:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001013a:	66 3d 18 03          	cmp    ax,0x318
c001013e:	75 0a                	jne    c001014a <sendKeyboardToken(KeyboardToken)+0x1ea>
c0010140:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0010146:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001014a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001014d:	66 3d 19 03          	cmp    ax,0x319
c0010151:	75 0a                	jne    c001015d <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010153:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0010159:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010160:	66 3d 00 02          	cmp    ax,0x200
c0010164:	75 2c                	jne    c0010192 <sendKeyboardToken(KeyboardToken)+0x232>
c0010166:	a0 20 92 02 c0       	mov    al,ds:0xc0029220
c001016b:	83 f0 01             	xor    eax,0x1
c001016e:	84 c0                	test   al,al
c0010170:	74 20                	je     c0010192 <sendKeyboardToken(KeyboardToken)+0x232>
c0010172:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c0010177:	6a 01                	push   0x1
c0010179:	6a 00                	push   0x0
c001017b:	68 ca fd 00 c0       	push   0xc000fdca
c0010180:	50                   	push   eax
c0010181:	e8 be 89 00 00       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c0010186:	83 c4 10             	add    esp,0x10
c0010189:	c6 05 20 92 02 c0 01 	mov    BYTE PTR ds:0xc0029220,0x1
c0010190:	eb 33                	jmp    c00101c5 <sendKeyboardToken(KeyboardToken)+0x265>
c0010192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010195:	66 3d 01 02          	cmp    ax,0x201
c0010199:	75 2a                	jne    c00101c5 <sendKeyboardToken(KeyboardToken)+0x265>
c001019b:	a0 20 92 02 c0       	mov    al,ds:0xc0029220
c00101a0:	83 f0 01             	xor    eax,0x1
c00101a3:	84 c0                	test   al,al
c00101a5:	74 1e                	je     c00101c5 <sendKeyboardToken(KeyboardToken)+0x265>
c00101a7:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c00101ac:	6a 01                	push   0x1
c00101ae:	6a 00                	push   0x0
c00101b0:	68 36 fe 00 c0       	push   0xc000fe36
c00101b5:	50                   	push   eax
c00101b6:	e8 89 89 00 00       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c00101bb:	83 c4 10             	add    esp,0x10
c00101be:	c6 05 20 92 02 c0 01 	mov    BYTE PTR ds:0xc0029220,0x1
c00101c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101c8:	66 3d 1d 03          	cmp    ax,0x31d
c00101cc:	75 06                	jne    c00101d4 <sendKeyboardToken(KeyboardToken)+0x274>
c00101ce:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00101d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d7:	66 3d 1c 03          	cmp    ax,0x31c
c00101db:	75 06                	jne    c00101e3 <sendKeyboardToken(KeyboardToken)+0x283>
c00101dd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00101e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e6:	66 3d 1b 03          	cmp    ax,0x31b
c00101ea:	75 06                	jne    c00101f2 <sendKeyboardToken(KeyboardToken)+0x292>
c00101ec:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00101f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f5:	66 3d 1e 03          	cmp    ax,0x31e
c00101f9:	75 06                	jne    c0010201 <sendKeyboardToken(KeyboardToken)+0x2a1>
c00101fb:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0010201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010204:	66 3d 1f 03          	cmp    ax,0x31f
c0010208:	75 06                	jne    c0010210 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001020a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0010210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010213:	66 3d 1a 03          	cmp    ax,0x31a
c0010217:	75 06                	jne    c001021f <sendKeyboardToken(KeyboardToken)+0x2bf>
c0010219:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001021f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010223:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010226:	83 f0 01             	xor    eax,0x1
c0010229:	84 c0                	test   al,al
c001022b:	74 77                	je     c00102a4 <sendKeyboardToken(KeyboardToken)+0x344>
c001022d:	a0 21 8f 02 c0       	mov    al,ds:0xc0028f21
c0010232:	84 c0                	test   al,al
c0010234:	74 41                	je     c0010277 <sendKeyboardToken(KeyboardToken)+0x317>
c0010236:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001023a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001023e:	74 2b                	je     c001026b <sendKeyboardToken(KeyboardToken)+0x30b>
c0010240:	8b 15 24 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029224
c0010246:	89 d0                	mov    eax,edx
c0010248:	c1 e0 02             	shl    eax,0x2
c001024b:	01 d0                	add    eax,edx
c001024d:	01 c0                	add    eax,eax
c001024f:	a3 24 92 02 c0       	mov    ds:0xc0029224,eax
c0010254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	8d 50 d0             	lea    edx,[eax-0x30]
c001025d:	a1 24 92 02 c0       	mov    eax,ds:0xc0029224
c0010262:	01 d0                	add    eax,edx
c0010264:	a3 24 92 02 c0       	mov    ds:0xc0029224,eax
c0010269:	eb 6d                	jmp    c00102d8 <sendKeyboardToken(KeyboardToken)+0x378>
c001026b:	c7 05 24 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029224,0x0
c0010275:	eb 61                	jmp    c00102d8 <sendKeyboardToken(KeyboardToken)+0x378>
c0010277:	a1 24 92 02 c0       	mov    eax,ds:0xc0029224
c001027c:	85 c0                	test   eax,eax
c001027e:	74 18                	je     c0010298 <sendKeyboardToken(KeyboardToken)+0x338>
c0010280:	a1 24 92 02 c0       	mov    eax,ds:0xc0029224
c0010285:	0f b6 c0             	movzx  eax,al
c0010288:	83 ec 0c             	sub    esp,0xc
c001028b:	50                   	push   eax
c001028c:	e8 11 fc ff ff       	call   c000fea2 <sendKeyToTerminal(unsigned char)>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010298:	c7 05 24 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029224,0x0
c00102a2:	eb 34                	jmp    c00102d8 <sendKeyboardToken(KeyboardToken)+0x378>
c00102a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102a7:	66 3d 01 01          	cmp    ax,0x101
c00102ab:	75 2b                	jne    c00102d8 <sendKeyboardToken(KeyboardToken)+0x378>
c00102ad:	a1 24 92 02 c0       	mov    eax,ds:0xc0029224
c00102b2:	85 c0                	test   eax,eax
c00102b4:	74 18                	je     c00102ce <sendKeyboardToken(KeyboardToken)+0x36e>
c00102b6:	a1 24 92 02 c0       	mov    eax,ds:0xc0029224
c00102bb:	0f b6 c0             	movzx  eax,al
c00102be:	83 ec 0c             	sub    esp,0xc
c00102c1:	50                   	push   eax
c00102c2:	e8 db fb ff ff       	call   c000fea2 <sendKeyToTerminal(unsigned char)>
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00102ce:	c7 05 24 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029224,0x0
c00102d8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00102db:	83 f0 01             	xor    eax,0x1
c00102de:	84 c0                	test   al,al
c00102e0:	74 4c                	je     c001032e <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00102e5:	83 f0 01             	xor    eax,0x1
c00102e8:	84 c0                	test   al,al
c00102ea:	74 42                	je     c001032e <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102ec:	a0 20 8f 02 c0       	mov    al,ds:0xc0028f20
c00102f1:	83 f0 01             	xor    eax,0x1
c00102f4:	84 c0                	test   al,al
c00102f6:	74 36                	je     c001032e <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102fb:	66 83 f8 1f          	cmp    ax,0x1f
c00102ff:	76 09                	jbe    c001030a <sendKeyboardToken(KeyboardToken)+0x3aa>
c0010301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010304:	66 83 f8 7e          	cmp    ax,0x7e
c0010308:	76 12                	jbe    c001031c <sendKeyboardToken(KeyboardToken)+0x3bc>
c001030a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001030d:	66 83 f8 0a          	cmp    ax,0xa
c0010311:	74 09                	je     c001031c <sendKeyboardToken(KeyboardToken)+0x3bc>
c0010313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010316:	66 83 f8 08          	cmp    ax,0x8
c001031a:	75 12                	jne    c001032e <sendKeyboardToken(KeyboardToken)+0x3ce>
c001031c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001031f:	0f b6 c0             	movzx  eax,al
c0010322:	83 ec 0c             	sub    esp,0xc
c0010325:	50                   	push   eax
c0010326:	e8 77 fb ff ff       	call   c000fea2 <sendKeyToTerminal(unsigned char)>
c001032b:	83 c4 10             	add    esp,0x10
c001032e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010331:	83 f0 01             	xor    eax,0x1
c0010334:	84 c0                	test   al,al
c0010336:	74 4f                	je     c0010387 <sendKeyboardToken(KeyboardToken)+0x427>
c0010338:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001033b:	83 f0 01             	xor    eax,0x1
c001033e:	84 c0                	test   al,al
c0010340:	74 45                	je     c0010387 <sendKeyboardToken(KeyboardToken)+0x427>
c0010342:	a0 20 8f 02 c0       	mov    al,ds:0xc0028f20
c0010347:	84 c0                	test   al,al
c0010349:	74 3c                	je     c0010387 <sendKeyboardToken(KeyboardToken)+0x427>
c001034b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001034e:	66 83 f8 3f          	cmp    ax,0x3f
c0010352:	76 33                	jbe    c0010387 <sendKeyboardToken(KeyboardToken)+0x427>
c0010354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010357:	66 83 f8 7f          	cmp    ax,0x7f
c001035b:	77 2a                	ja     c0010387 <sendKeyboardToken(KeyboardToken)+0x427>
c001035d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010360:	88 c2                	mov    dl,al
c0010362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010365:	66 83 f8 5f          	cmp    ax,0x5f
c0010369:	76 04                	jbe    c001036f <sendKeyboardToken(KeyboardToken)+0x40f>
c001036b:	b0 20                	mov    al,0x20
c001036d:	eb 02                	jmp    c0010371 <sendKeyboardToken(KeyboardToken)+0x411>
c001036f:	b0 00                	mov    al,0x0
c0010371:	29 c2                	sub    edx,eax
c0010373:	88 d0                	mov    al,dl
c0010375:	83 e8 40             	sub    eax,0x40
c0010378:	0f b6 c0             	movzx  eax,al
c001037b:	83 ec 0c             	sub    esp,0xc
c001037e:	50                   	push   eax
c001037f:	e8 1e fb ff ff       	call   c000fea2 <sendKeyToTerminal(unsigned char)>
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001038a:	66 3d 00 03          	cmp    ax,0x300
c001038e:	75 0f                	jne    c001039f <sendKeyboardToken(KeyboardToken)+0x43f>
c0010390:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010393:	83 f0 01             	xor    eax,0x1
c0010396:	84 c0                	test   al,al
c0010398:	74 05                	je     c001039f <sendKeyboardToken(KeyboardToken)+0x43f>
c001039a:	e8 10 ab ff ff       	call   c000aeaf <doTerminalCycle()>
c001039f:	90                   	nop
c00103a0:	c9                   	leave  
c00103a1:	c3                   	ret    

c00103a2 <clearInternalKeybuffer(VgaText*)>:
c00103a2:	55                   	push   ebp
c00103a3:	89 e5                	mov    ebp,esp
c00103a5:	83 ec 08             	sub    esp,0x8
c00103a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103ab:	05 32 01 00 00       	add    eax,0x132
c00103b0:	83 ec 0c             	sub    esp,0xc
c00103b3:	50                   	push   eax
c00103b4:	e8 df 02 ff ff       	call   c0000698 <strlen>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00103bf:	81 c2 32 01 00 00    	add    edx,0x132
c00103c5:	83 ec 04             	sub    esp,0x4
c00103c8:	50                   	push   eax
c00103c9:	6a 00                	push   0x0
c00103cb:	52                   	push   edx
c00103cc:	e8 ab 02 ff ff       	call   c000067c <memset>
c00103d1:	83 c4 10             	add    esp,0x10
c00103d4:	90                   	nop
c00103d5:	c9                   	leave  
c00103d6:	c3                   	ret    

c00103d7 <readKeyboard(VgaText*, char*, unsigned long)>:
c00103d7:	55                   	push   ebp
c00103d8:	89 e5                	mov    ebp,esp
c00103da:	83 ec 18             	sub    esp,0x18
c00103dd:	a1 08 8e 02 c0       	mov    eax,ds:0xc0028e08
c00103e2:	85 c0                	test   eax,eax
c00103e4:	74 2a                	je     c0010410 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00103e6:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00103ec:	8b 0d 08 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e08
c00103f2:	83 ec 04             	sub    esp,0x4
c00103f5:	68 20 8e 02 c0       	push   0xc0028e20
c00103fa:	83 ec 08             	sub    esp,0x8
c00103fd:	89 e2                	mov    edx,esp
c00103ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010402:	89 02                	mov    DWORD PTR [edx],eax
c0010404:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010407:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001040b:	ff d1                	call   ecx
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	fb                   	sti    
c0010411:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010418:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001041c:	0f 84 a1 00 00 00    	je     c00104c3 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010425:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001042b:	84 c0                	test   al,al
c001042d:	75 28                	jne    c0010457 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001042f:	fa                   	cli    
c0010430:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0010435:	40                   	inc    eax
c0010436:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001043b:	e8 20 89 00 00       	call   c0018d60 <schedule()>
c0010440:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0010445:	48                   	dec    eax
c0010446:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001044b:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0010450:	85 c0                	test   eax,eax
c0010452:	75 ce                	jne    c0010422 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010454:	fb                   	sti    
c0010455:	eb cb                	jmp    c0010422 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010457:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001045a:	8d 50 01             	lea    edx,[eax+0x1]
c001045d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010460:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010463:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010469:	88 10                	mov    BYTE PTR [eax],dl
c001046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001046e:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010474:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001047a:	05 32 01 00 00       	add    eax,0x132
c001047f:	83 ec 0c             	sub    esp,0xc
c0010482:	50                   	push   eax
c0010483:	e8 10 02 ff ff       	call   c0000698 <strlen>
c0010488:	83 c4 10             	add    esp,0x10
c001048b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001048e:	81 c2 32 01 00 00    	add    edx,0x132
c0010494:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010497:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001049a:	81 c2 32 01 00 00    	add    edx,0x132
c00104a0:	83 ec 04             	sub    esp,0x4
c00104a3:	50                   	push   eax
c00104a4:	51                   	push   ecx
c00104a5:	52                   	push   edx
c00104a6:	e8 09 01 ff ff       	call   c00005b4 <memmove>
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00104b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00104b4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00104b8:	0f 85 5a ff ff ff    	jne    c0010418 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00104be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104c1:	eb 03                	jmp    c00104c6 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00104c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104c6:	c9                   	leave  
c00104c7:	c3                   	ret    

c00104c8 <Keyboard::Keyboard(char const*)>:
c00104c8:	83 ec 0c             	sub    esp,0xc
c00104cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cf:	83 ec 08             	sub    esp,0x8
c00104d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104d6:	50                   	push   eax
c00104d7:	e8 da e2 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00104dc:	83 c4 10             	add    esp,0x10
c00104df:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c00104e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e8:	89 10                	mov    DWORD PTR [eax],edx
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00104f8:	c6 05 04 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e04,0x1
c00104ff:	90                   	nop
c0010500:	83 c4 0c             	add    esp,0xc
c0010503:	c3                   	ret    

c0010504 <Keyboard::~Keyboard()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	ba 00 5b 02 c0       	mov    edx,0xc0025b00
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	89 10                	mov    DWORD PTR [eax],edx
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	83 ec 0c             	sub    esp,0xc
c0010519:	50                   	push   eax
c001051a:	e8 61 df ff ff       	call   c000e480 <Device::~Device()>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	90                   	nop
c0010523:	83 c4 0c             	add    esp,0xc
c0010526:	c3                   	ret    
c0010527:	90                   	nop

c0010528 <Keyboard::~Keyboard()>:
c0010528:	83 ec 0c             	sub    esp,0xc
c001052b:	83 ec 0c             	sub    esp,0xc
c001052e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010532:	e8 cd ff ff ff       	call   c0010504 <Keyboard::~Keyboard()>
c0010537:	83 c4 10             	add    esp,0x10
c001053a:	83 ec 08             	sub    esp,0x8
c001053d:	68 5c 01 00 00       	push   0x15c
c0010542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010546:	e8 13 ca ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001054b:	83 c4 10             	add    esp,0x10
c001054e:	83 c4 0c             	add    esp,0xc
c0010551:	c3                   	ret    

c0010552 <LogicalDisk::close(int, int, void*)>:
c0010552:	83 c8 ff             	or     eax,0xffffffff
c0010555:	c3                   	ret    

c0010556 <LogicalDisk::~LogicalDisk()>:
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	ba d0 5b 02 c0       	mov    edx,0xc0025bd0
c001055e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010562:	89 10                	mov    DWORD PTR [eax],edx
c0010564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	50                   	push   eax
c001056c:	e8 0f df ff ff       	call   c000e480 <Device::~Device()>
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	90                   	nop
c0010575:	83 c4 0c             	add    esp,0xc
c0010578:	c3                   	ret    
c0010579:	90                   	nop

c001057a <LogicalDisk::~LogicalDisk()>:
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	83 ec 0c             	sub    esp,0xc
c0010580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010584:	e8 cd ff ff ff       	call   c0010556 <LogicalDisk::~LogicalDisk()>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	83 ec 08             	sub    esp,0x8
c001058f:	68 74 01 00 00       	push   0x174
c0010594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010598:	e8 c1 c9 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001059d:	83 c4 10             	add    esp,0x10
c00105a0:	83 c4 0c             	add    esp,0xc
c00105a3:	c3                   	ret    

c00105a4 <LogicalDisk::open(int, int, void*)>:
c00105a4:	83 ec 18             	sub    esp,0x18
c00105a7:	68 2c 5b 02 c0       	push   0xc0025b2c
c00105ac:	e8 50 4a 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00105b1:	83 c8 ff             	or     eax,0xffffffff
c00105b4:	83 c4 1c             	add    esp,0x1c
c00105b7:	c3                   	ret    

c00105b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00105b8:	53                   	push   ebx
c00105b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00105cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00105d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00105d7:	77 10                	ja     c00105e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00105d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00105df:	89 d3                	mov    ebx,edx
c00105e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00105e7:	72 05                	jb     c00105ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00105e9:	83 c8 ff             	or     eax,0xffffffff
c00105ec:	89 c2                	mov    edx,eax
c00105ee:	5b                   	pop    ebx
c00105ef:	c3                   	ret    

c00105f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00105f0:	56                   	push   esi
c00105f1:	83 c8 ff             	or     eax,0xffffffff
c00105f4:	53                   	push   ebx
c00105f5:	89 c2                	mov    edx,eax
c00105f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00105ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010603:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010609:	77 27                	ja     c0010632 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001060b:	89 d8                	mov    eax,ebx
c001060d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010613:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010619:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001061e:	89 c2                	mov    edx,eax
c0010620:	73 10                	jae    c0010632 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010622:	89 c8                	mov    eax,ecx
c0010624:	89 da                	mov    edx,ebx
c0010626:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001062c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010632:	5b                   	pop    ebx
c0010633:	5e                   	pop    esi
c0010634:	c3                   	ret    
c0010635:	90                   	nop

c0010636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010636:	83 ec 1c             	sub    esp,0x1c
c0010639:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001063d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010649:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001064d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010650:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065c:	83 ec 08             	sub    esp,0x8
c001065f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010663:	50                   	push   eax
c0010664:	e8 4d e1 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	ba d0 5b 02 c0       	mov    edx,0xc0025bd0
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	89 10                	mov    DWORD PTR [eax],edx
c0010677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001067b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010686:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001068d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010691:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001069b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001069f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00106a7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00106ad:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00106b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00106b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106be:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00106c4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00106ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106d2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00106e6:	90                   	nop
c00106e7:	83 c4 1c             	add    esp,0x1c
c00106ea:	c3                   	ret    
c00106eb:	90                   	nop

c00106ec <LogicalDisk::assignDriveLetter()>:
c00106ec:	55                   	push   ebp
c00106ed:	57                   	push   edi
c00106ee:	56                   	push   esi
c00106ef:	53                   	push   ebx
c00106f0:	83 ec 14             	sub    esp,0x14
c00106f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106f7:	8b 3d 40 92 02 c0    	mov    edi,DWORD PTR ds:0xc0029240
c00106fd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010703:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010707:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001070d:	8b 3d 44 92 02 c0    	mov    edi,DWORD PTR ds:0xc0029244
c0010713:	3c 01                	cmp    al,0x1
c0010715:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010719:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001071d:	19 c0                	sbb    eax,eax
c001071f:	83 e0 02             	and    eax,0x2
c0010722:	83 c0 41             	add    eax,0x41
c0010725:	0f be e8             	movsx  ebp,al
c0010728:	3c 43                	cmp    al,0x43
c001072a:	75 10                	jne    c001073c <LogicalDisk::assignDriveLetter()+0x50>
c001072c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010733:	75 5d                	jne    c0010792 <LogicalDisk::assignDriveLetter()+0xa6>
c0010735:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001073a:	75 56                	jne    c0010792 <LogicalDisk::assignDriveLetter()+0xa6>
c001073c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001073f:	ba 01 00 00 00       	mov    edx,0x1
c0010744:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010748:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001074c:	d3 e2                	shl    edx,cl
c001074e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010752:	89 d7                	mov    edi,edx
c0010754:	89 d6                	mov    esi,edx
c0010756:	c1 ff 1f             	sar    edi,0x1f
c0010759:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001075d:	21 f9                	and    ecx,edi
c001075f:	09 d1                	or     ecx,edx
c0010761:	75 2f                	jne    c0010792 <LogicalDisk::assignDriveLetter()+0xa6>
c0010763:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001076b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010771:	09 f2                	or     edx,esi
c0010773:	89 15 40 92 02 c0    	mov    DWORD PTR ds:0xc0029240,edx
c0010779:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001077d:	09 fa                	or     edx,edi
c001077f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010783:	89 15 44 92 02 c0    	mov    DWORD PTR ds:0xc0029244,edx
c0010789:	89 1c bd 60 92 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6da0],ebx
c0010790:	eb 08                	jmp    c001079a <LogicalDisk::assignDriveLetter()+0xae>
c0010792:	45                   	inc    ebp
c0010793:	40                   	inc    eax
c0010794:	3c 5b                	cmp    al,0x5b
c0010796:	75 90                	jne    c0010728 <LogicalDisk::assignDriveLetter()+0x3c>
c0010798:	31 c0                	xor    eax,eax
c001079a:	83 c4 14             	add    esp,0x14
c001079d:	5b                   	pop    ebx
c001079e:	5e                   	pop    esi
c001079f:	5f                   	pop    edi
c00107a0:	5d                   	pop    ebp
c00107a1:	c3                   	ret    

c00107a2 <LogicalDisk::mount()>:
c00107a2:	56                   	push   esi
c00107a3:	53                   	push   ebx
c00107a4:	83 ec 1c             	sub    esp,0x1c
c00107a7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00107ab:	8b 1d d4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd4
c00107b1:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00107b8:	50                   	push   eax
c00107b9:	68 50 5b 02 c0       	push   0xc0025b50
c00107be:	e8 7c c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00107c3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00107cd:	83 c4 10             	add    esp,0x10
c00107d0:	85 db                	test   ebx,ebx
c00107d2:	74 4e                	je     c0010822 <LogicalDisk::mount()+0x80>
c00107d4:	83 ec 0c             	sub    esp,0xc
c00107d7:	68 71 5b 02 c0       	push   0xc0025b71
c00107dc:	e8 5e c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00107e1:	83 c4 0c             	add    esp,0xc
c00107e4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00107eb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107ed:	83 e8 41             	sub    eax,0x41
c00107f0:	50                   	push   eax
c00107f1:	56                   	push   esi
c00107f2:	53                   	push   ebx
c00107f3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00107f6:	83 c4 10             	add    esp,0x10
c00107f9:	84 c0                	test   al,al
c00107fb:	74 20                	je     c001081d <LogicalDisk::mount()+0x7b>
c00107fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010801:	83 ec 0c             	sub    esp,0xc
c0010804:	68 8d 5b 02 c0       	push   0xc0025b8d
c0010809:	e8 31 c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010817:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001081b:	eb 07                	jmp    c0010824 <LogicalDisk::mount()+0x82>
c001081d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010820:	eb ae                	jmp    c00107d0 <LogicalDisk::mount()+0x2e>
c0010822:	31 c0                	xor    eax,eax
c0010824:	83 c4 14             	add    esp,0x14
c0010827:	5b                   	pop    ebx
c0010828:	5e                   	pop    esi
c0010829:	c3                   	ret    

c001082a <LogicalDisk::unmount()>:
c001082a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010838:	c3                   	ret    
c0010839:	90                   	nop

c001083a <LogicalDisk::eject()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010844:	8b 10                	mov    edx,DWORD PTR [eax]
c0010846:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001084a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001084d:	90                   	nop

c001084e <LogicalDisk::unassignDriveLetter()>:
c001084e:	57                   	push   edi
c001084f:	56                   	push   esi
c0010850:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010854:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001085b:	84 c9                	test   cl,cl
c001085d:	75 0f                	jne    c001086e <LogicalDisk::unassignDriveLetter()+0x20>
c001085f:	c7 44 24 0c a6 5b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025ba6
c0010867:	5e                   	pop    esi
c0010868:	5f                   	pop    edi
c0010869:	e9 93 47 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c001086e:	83 e9 41             	sub    ecx,0x41
c0010871:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010878:	b8 01 00 00 00       	mov    eax,0x1
c001087d:	c7 04 8d 60 92 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6da0],0x0
c0010888:	d3 e0                	shl    eax,cl
c001088a:	89 c7                	mov    edi,eax
c001088c:	f7 d0                	not    eax
c001088e:	c1 ff 1f             	sar    edi,0x1f
c0010891:	21 05 40 92 02 c0    	and    DWORD PTR ds:0xc0029240,eax
c0010897:	89 fe                	mov    esi,edi
c0010899:	f7 d6                	not    esi
c001089b:	21 35 44 92 02 c0    	and    DWORD PTR ds:0xc0029244,esi
c00108a1:	5e                   	pop    esi
c00108a2:	5f                   	pop    edi
c00108a3:	c3                   	ret    

c00108a4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00108a4:	57                   	push   edi
c00108a5:	56                   	push   esi
c00108a6:	53                   	push   ebx
c00108a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00108b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00108bd:	77 41                	ja     c0010900 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00108bf:	99                   	cdq    
c00108c0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00108c6:	01 c8                	add    eax,ecx
c00108c8:	11 da                	adc    edx,ebx
c00108ca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00108d0:	19 d7                	sbb    edi,edx
c00108d2:	72 33                	jb     c0010907 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00108d4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00108da:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00108e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00108e4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00108e8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00108ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00108f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108f8:	5b                   	pop    ebx
c00108f9:	5e                   	pop    esi
c00108fa:	5f                   	pop    edi
c00108fb:	e9 f2 0a 00 00       	jmp    c00113f2 <VCache::read(unsigned long long, int, void*)>
c0010900:	b8 05 00 00 00       	mov    eax,0x5
c0010905:	eb 05                	jmp    c001090c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010907:	b8 07 00 00 00       	mov    eax,0x7
c001090c:	5b                   	pop    ebx
c001090d:	5e                   	pop    esi
c001090e:	5f                   	pop    edi
c001090f:	c3                   	ret    

c0010910 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010910:	57                   	push   edi
c0010911:	56                   	push   esi
c0010912:	53                   	push   ebx
c0010913:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001091b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001091f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010923:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010929:	77 41                	ja     c001096c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001092b:	99                   	cdq    
c001092c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010932:	01 c8                	add    eax,ecx
c0010934:	11 da                	adc    edx,ebx
c0010936:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001093c:	19 d7                	sbb    edi,edx
c001093e:	72 33                	jb     c0010973 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010940:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010946:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001094c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010950:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010954:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001095a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010960:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010964:	5b                   	pop    ebx
c0010965:	5e                   	pop    esi
c0010966:	5f                   	pop    edi
c0010967:	e9 8c 09 00 00       	jmp    c00112f8 <VCache::write(unsigned long long, int, void*)>
c001096c:	b8 05 00 00 00       	mov    eax,0x5
c0010971:	eb 05                	jmp    c0010978 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010973:	b8 07 00 00 00       	mov    eax,0x7
c0010978:	5b                   	pop    ebx
c0010979:	5e                   	pop    esi
c001097a:	5f                   	pop    edi
c001097b:	c3                   	ret    

c001097c <Mouse::Mouse(char const*)>:
c001097c:	83 ec 0c             	sub    esp,0xc
c001097f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010983:	83 ec 08             	sub    esp,0x8
c0010986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098a:	50                   	push   eax
c001098b:	e8 26 de ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010990:	83 c4 10             	add    esp,0x10
c0010993:	ba fc 5b 02 c0       	mov    edx,0xc0025bfc
c0010998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099c:	89 10                	mov    DWORD PTR [eax],edx
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00109ac:	90                   	nop
c00109ad:	83 c4 0c             	add    esp,0xc
c00109b0:	c3                   	ret    
c00109b1:	90                   	nop
c00109b2:	66 90                	xchg   ax,ax

c00109b4 <Mouse::~Mouse()>:
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	ba fc 5b 02 c0       	mov    edx,0xc0025bfc
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	89 10                	mov    DWORD PTR [eax],edx
c00109c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c6:	83 ec 0c             	sub    esp,0xc
c00109c9:	50                   	push   eax
c00109ca:	e8 b1 da ff ff       	call   c000e480 <Device::~Device()>
c00109cf:	83 c4 10             	add    esp,0x10
c00109d2:	90                   	nop
c00109d3:	83 c4 0c             	add    esp,0xc
c00109d6:	c3                   	ret    
c00109d7:	90                   	nop

c00109d8 <Mouse::~Mouse()>:
c00109d8:	83 ec 0c             	sub    esp,0xc
c00109db:	83 ec 0c             	sub    esp,0xc
c00109de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e2:	e8 cd ff ff ff       	call   c00109b4 <Mouse::~Mouse()>
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	83 ec 08             	sub    esp,0x8
c00109ed:	68 58 01 00 00       	push   0x158
c00109f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f6:	e8 63 c5 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00109fb:	83 c4 10             	add    esp,0x10
c00109fe:	83 c4 0c             	add    esp,0xc
c0010a01:	c3                   	ret    

c0010a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010a02:	55                   	push   ebp
c0010a03:	57                   	push   edi
c0010a04:	56                   	push   esi
c0010a05:	53                   	push   ebx
c0010a06:	81 ec 28 01 00 00    	sub    esp,0x128
c0010a0c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010a13:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010a1a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010a21:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010a28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010a30:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a37:	e8 76 de ff ff       	call   c000e8b2 <Device::getName()>
c0010a3c:	5a                   	pop    edx
c0010a3d:	59                   	pop    ecx
c0010a3e:	50                   	push   eax
c0010a3f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010a43:	55                   	push   ebp
c0010a44:	e8 ef fc fe ff       	call   c0000738 <strcpy>
c0010a49:	5b                   	pop    ebx
c0010a4a:	58                   	pop    eax
c0010a4b:	68 20 5c 02 c0       	push   0xc0025c20
c0010a50:	55                   	push   ebp
c0010a51:	e8 22 fe fe ff       	call   c0000878 <strcat>
c0010a56:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010a5d:	e8 f1 92 ff ff       	call   c0009d53 <malloc>
c0010a62:	83 c4 0c             	add    esp,0xc
c0010a65:	89 c3                	mov    ebx,eax
c0010a67:	57                   	push   edi
c0010a68:	56                   	push   esi
c0010a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010a78:	55                   	push   ebp
c0010a79:	50                   	push   eax
c0010a7a:	e8 b7 fb ff ff       	call   c0010636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a7f:	83 c4 14             	add    esp,0x14
c0010a82:	53                   	push   ebx
c0010a83:	e8 64 fc ff ff       	call   c00106ec <LogicalDisk::assignDriveLetter()>
c0010a88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a8b:	e8 12 fd ff ff       	call   c00107a2 <LogicalDisk::mount()>
c0010a90:	58                   	pop    eax
c0010a91:	5a                   	pop    edx
c0010a92:	53                   	push   ebx
c0010a93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a9a:	e8 13 db ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0010a9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010aa5:	5b                   	pop    ebx
c0010aa6:	5e                   	pop    esi
c0010aa7:	5f                   	pop    edi
c0010aa8:	5d                   	pop    ebp
c0010aa9:	c3                   	ret    

c0010aaa <createPartitionsForDisk(PhysicalDisk*)>:
c0010aaa:	55                   	push   ebp
c0010aab:	57                   	push   edi
c0010aac:	56                   	push   esi
c0010aad:	53                   	push   ebx
c0010aae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010ab4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010abb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010ac1:	3d 00 02 00 00       	cmp    eax,0x200
c0010ac6:	74 27                	je     c0010aef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010ac8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010ace:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010ad4:	83 ec 10             	sub    esp,0x10
c0010ad7:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010adb:	99                   	cdq    
c0010adc:	c1 e6 0a             	shl    esi,0xa
c0010adf:	52                   	push   edx
c0010ae0:	89 fd                	mov    ebp,edi
c0010ae2:	50                   	push   eax
c0010ae3:	55                   	push   ebp
c0010ae4:	56                   	push   esi
c0010ae5:	e8 5e 25 01 00       	call   c0023048 <__udivdi3>
c0010aea:	e9 b1 00 00 00       	jmp    c0010ba0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010aef:	83 ec 0c             	sub    esp,0xc
c0010af2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010af4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010af8:	56                   	push   esi
c0010af9:	6a 01                	push   0x1
c0010afb:	6a 00                	push   0x0
c0010afd:	6a 00                	push   0x0
c0010aff:	53                   	push   ebx
c0010b00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010b03:	83 c4 20             	add    esp,0x20
c0010b06:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010b0e:	75 0a                	jne    c0010b1a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010b10:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010b18:	74 2c                	je     c0010b46 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010b1a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b20:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b2c:	83 ec 10             	sub    esp,0x10
c0010b2f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b33:	89 f7                	mov    edi,esi
c0010b35:	c1 e0 0a             	shl    eax,0xa
c0010b38:	c1 ff 1f             	sar    edi,0x1f
c0010b3b:	57                   	push   edi
c0010b3c:	56                   	push   esi
c0010b3d:	52                   	push   edx
c0010b3e:	50                   	push   eax
c0010b3f:	e8 04 25 01 00       	call   c0023048 <__udivdi3>
c0010b44:	eb 5a                	jmp    c0010ba0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010b46:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010b4d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010b54:	83 e1 7f             	and    ecx,0x7f
c0010b57:	83 e0 7f             	and    eax,0x7f
c0010b5a:	01 c1                	add    ecx,eax
c0010b5c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010b63:	83 e0 7f             	and    eax,0x7f
c0010b66:	01 c1                	add    ecx,eax
c0010b68:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010b6f:	83 e0 7f             	and    eax,0x7f
c0010b72:	00 c1                	add    cl,al
c0010b74:	74 41                	je     c0010bb7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010b76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b88:	83 ec 10             	sub    esp,0x10
c0010b8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b8f:	89 f7                	mov    edi,esi
c0010b91:	c1 e0 0a             	shl    eax,0xa
c0010b94:	c1 ff 1f             	sar    edi,0x1f
c0010b97:	57                   	push   edi
c0010b98:	56                   	push   esi
c0010b99:	52                   	push   edx
c0010b9a:	50                   	push   eax
c0010b9b:	e8 a8 24 01 00       	call   c0023048 <__udivdi3>
c0010ba0:	83 c4 14             	add    esp,0x14
c0010ba3:	52                   	push   edx
c0010ba4:	50                   	push   eax
c0010ba5:	6a 00                	push   0x0
c0010ba7:	6a 00                	push   0x0
c0010ba9:	53                   	push   ebx
c0010baa:	e8 53 fe ff ff       	call   c0010a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010baf:	83 c4 20             	add    esp,0x20
c0010bb2:	e9 79 01 00 00       	jmp    c0010d30 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010bb7:	89 f0                	mov    eax,esi
c0010bb9:	31 f6                	xor    esi,esi
c0010bbb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010bc2:	75 02                	jne    c0010bc6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010bc4:	89 f1                	mov    ecx,esi
c0010bc6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010bcd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010bd4:	c1 e2 08             	shl    edx,0x8
c0010bd7:	c1 e7 10             	shl    edi,0x10
c0010bda:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010be2:	09 fa                	or     edx,edi
c0010be4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010bec:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010bf3:	83 c0 10             	add    eax,0x10
c0010bf6:	09 fa                	or     edx,edi
c0010bf8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010bff:	c1 e7 18             	shl    edi,0x18
c0010c02:	09 fa                	or     edx,edi
c0010c04:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010c0b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010c0f:	c1 e7 10             	shl    edi,0x10
c0010c12:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010c19:	c1 e2 08             	shl    edx,0x8
c0010c1c:	09 fa                	or     edx,edi
c0010c1e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010c25:	09 fa                	or     edx,edi
c0010c27:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010c2e:	c1 e7 18             	shl    edi,0x18
c0010c31:	09 fa                	or     edx,edi
c0010c33:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010c37:	46                   	inc    esi
c0010c38:	83 fe 04             	cmp    esi,0x4
c0010c3b:	0f 85 7a ff ff ff    	jne    c0010bbb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c45:	83 f0 01             	xor    eax,0x1
c0010c48:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c4c:	75 57                	jne    c0010ca5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c52:	83 f0 01             	xor    eax,0x1
c0010c55:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010c59:	75 4a                	jne    c0010ca5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010c5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010c67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010c6f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c75:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c7b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c85:	89 f7                	mov    edi,esi
c0010c87:	c1 e0 0a             	shl    eax,0xa
c0010c8a:	c1 ff 1f             	sar    edi,0x1f
c0010c8d:	57                   	push   edi
c0010c8e:	56                   	push   esi
c0010c8f:	52                   	push   edx
c0010c90:	50                   	push   eax
c0010c91:	e8 b2 23 01 00       	call   c0023048 <__udivdi3>
c0010c96:	83 c4 10             	add    esp,0x10
c0010c99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010ca1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ca5:	84 c9                	test   cl,cl
c0010ca7:	74 53                	je     c0010cfc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010ca9:	0f b6 c9             	movzx  ecx,cl
c0010cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cb4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cb8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010cbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010cc4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010cc8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010ccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010cdc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010ce0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010ce4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010ce8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010cec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010cf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010cf4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010cf8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010cfc:	31 ed                	xor    ebp,ebp
c0010cfe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010d02:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010d06:	89 f8                	mov    eax,edi
c0010d08:	09 f0                	or     eax,esi
c0010d0a:	74 1e                	je     c0010d2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d0c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010d10:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010d14:	89 d1                	mov    ecx,edx
c0010d16:	09 c1                	or     ecx,eax
c0010d18:	74 10                	je     c0010d2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d1a:	83 ec 0c             	sub    esp,0xc
c0010d1d:	57                   	push   edi
c0010d1e:	56                   	push   esi
c0010d1f:	52                   	push   edx
c0010d20:	50                   	push   eax
c0010d21:	53                   	push   ebx
c0010d22:	e8 db fc ff ff       	call   c0010a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d27:	83 c4 20             	add    esp,0x20
c0010d2a:	45                   	inc    ebp
c0010d2b:	83 fd 04             	cmp    ebp,0x4
c0010d2e:	75 ce                	jne    c0010cfe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010d30:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010d36:	5b                   	pop    ebx
c0010d37:	5e                   	pop    esi
c0010d38:	5f                   	pop    edi
c0010d39:	5d                   	pop    ebp
c0010d3a:	c3                   	ret    
c0010d3b:	90                   	nop

c0010d3c <Serial::Serial(char const*)>:
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d43:	83 ec 08             	sub    esp,0x8
c0010d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d4a:	50                   	push   eax
c0010d4b:	e8 66 da ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	ba 34 5c 02 c0       	mov    edx,0xc0025c34
c0010d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5c:	89 10                	mov    DWORD PTR [eax],edx
c0010d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d62:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010d6c:	90                   	nop
c0010d6d:	83 c4 0c             	add    esp,0xc
c0010d70:	c3                   	ret    
c0010d71:	90                   	nop
c0010d72:	66 90                	xchg   ax,ax

c0010d74 <Serial::~Serial()>:
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	ba 34 5c 02 c0       	mov    edx,0xc0025c34
c0010d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d80:	89 10                	mov    DWORD PTR [eax],edx
c0010d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	50                   	push   eax
c0010d8a:	e8 f1 d6 ff ff       	call   c000e480 <Device::~Device()>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	90                   	nop
c0010d93:	83 c4 0c             	add    esp,0xc
c0010d96:	c3                   	ret    
c0010d97:	90                   	nop

c0010d98 <Serial::~Serial()>:
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	83 ec 0c             	sub    esp,0xc
c0010d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da2:	e8 cd ff ff ff       	call   c0010d74 <Serial::~Serial()>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	83 ec 08             	sub    esp,0x8
c0010dad:	68 58 01 00 00       	push   0x158
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	e8 a3 c1 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 c4 0c             	add    esp,0xc
c0010dc1:	c3                   	ret    
c0010dc2:	66 90                	xchg   ax,ax

c0010dc4 <Timer::Timer(char const*)>:
c0010dc4:	83 ec 0c             	sub    esp,0xc
c0010dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dcb:	83 ec 08             	sub    esp,0x8
c0010dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd2:	50                   	push   eax
c0010dd3:	e8 de d9 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010dd8:	83 c4 10             	add    esp,0x10
c0010ddb:	ba 78 5c 02 c0       	mov    edx,0xc0025c78
c0010de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de4:	89 10                	mov    DWORD PTR [eax],edx
c0010de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dea:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010df4:	90                   	nop
c0010df5:	83 c4 0c             	add    esp,0xc
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop
c0010dfa:	66 90                	xchg   ax,ax

c0010dfc <Timer::~Timer()>:
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	ba 78 5c 02 c0       	mov    edx,0xc0025c78
c0010e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e08:	89 10                	mov    DWORD PTR [eax],edx
c0010e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0e:	83 ec 0c             	sub    esp,0xc
c0010e11:	50                   	push   eax
c0010e12:	e8 69 d6 ff ff       	call   c000e480 <Device::~Device()>
c0010e17:	83 c4 10             	add    esp,0x10
c0010e1a:	90                   	nop
c0010e1b:	83 c4 0c             	add    esp,0xc
c0010e1e:	c3                   	ret    
c0010e1f:	90                   	nop

c0010e20 <Timer::~Timer()>:
c0010e20:	83 ec 0c             	sub    esp,0xc
c0010e23:	83 ec 0c             	sub    esp,0xc
c0010e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e2a:	e8 cd ff ff ff       	call   c0010dfc <Timer::~Timer()>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	68 5c 01 00 00       	push   0x15c
c0010e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e3e:	e8 1b c1 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0010e43:	83 c4 10             	add    esp,0x10
c0010e46:	83 c4 0c             	add    esp,0xc
c0010e49:	c3                   	ret    

c0010e4a <Timer::read()>:
c0010e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010e54:	c3                   	ret    

c0010e55 <timerHandler(unsigned int)>:
c0010e55:	56                   	push   esi
c0010e56:	53                   	push   ebx
c0010e57:	51                   	push   ecx
c0010e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5c:	01 05 cc 92 02 c0    	add    DWORD PTR ds:0xc00292cc,eax
c0010e62:	80 3d ad 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cad,0x0
c0010e69:	0f 84 49 01 00 00    	je     c0010fb8 <timerHandler(unsigned int)+0x163>
c0010e6f:	fa                   	cli    
c0010e70:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0010e76:	83 ec 0c             	sub    esp,0xc
c0010e79:	ff 05 c4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c4
c0010e7f:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010e84:	e8 8f 27 01 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	84 c0                	test   al,al
c0010e8e:	0f 85 a0 00 00 00    	jne    c0010f34 <timerHandler(unsigned int)+0xdf>
c0010e94:	83 ec 0c             	sub    esp,0xc
c0010e97:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010e9c:	e8 93 27 01 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ea1:	83 c4 10             	add    esp,0x10
c0010ea4:	89 c6                	mov    esi,eax
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	83 ec 0c             	sub    esp,0xc
c0010eab:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010eb0:	e8 7f 27 01 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010eb5:	c7 04 24 d8 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1d8
c0010ebc:	89 c3                	mov    ebx,eax
c0010ebe:	e8 79 27 01 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010ec3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ec6:	83 c4 10             	add    esp,0x10
c0010ec9:	3b 05 cc 92 02 c0    	cmp    eax,DWORD PTR ds:0xc00292cc
c0010ecf:	77 23                	ja     c0010ef4 <timerHandler(unsigned int)+0x9f>
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	53                   	push   ebx
c0010ed5:	e8 42 83 00 00       	call   c001921c <unblockTask(ThreadControlBlock*)>
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	39 de                	cmp    esi,ebx
c0010edf:	75 27                	jne    c0010f08 <timerHandler(unsigned int)+0xb3>
c0010ee1:	83 ec 0c             	sub    esp,0xc
c0010ee4:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010ee9:	e8 46 27 01 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010eee:	89 c6                	mov    esi,eax
c0010ef0:	eb 12                	jmp    c0010f04 <timerHandler(unsigned int)+0xaf>
c0010ef2:	66 90                	xchg   ax,ax
c0010ef4:	52                   	push   edx
c0010ef5:	52                   	push   edx
c0010ef6:	53                   	push   ebx
c0010ef7:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010efc:	e8 f3 27 01 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010f01:	8d 76 00             	lea    esi,[esi+0x0]
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	90                   	nop
c0010f08:	83 ec 0c             	sub    esp,0xc
c0010f0b:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010f10:	e8 03 27 01 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	84 c0                	test   al,al
c0010f1a:	75 18                	jne    c0010f34 <timerHandler(unsigned int)+0xdf>
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	68 d8 a1 02 c0       	push   0xc002a1d8
c0010f24:	e8 0b 27 01 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f29:	83 c4 10             	add    esp,0x10
c0010f2c:	39 f0                	cmp    eax,esi
c0010f2e:	0f 85 74 ff ff ff    	jne    c0010ea8 <timerHandler(unsigned int)+0x53>
c0010f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f39:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010f3d:	74 41                	je     c0010f80 <timerHandler(unsigned int)+0x12b>
c0010f3f:	80 3d ac 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028cac,0x0
c0010f46:	74 38                	je     c0010f80 <timerHandler(unsigned int)+0x12b>
c0010f48:	fa                   	cli    
c0010f49:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0010f4f:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c0010f54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f5a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010f5d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f63:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010f66:	72 08                	jb     c0010f70 <timerHandler(unsigned int)+0x11b>
c0010f68:	e8 f3 7d 00 00       	call   c0018d60 <schedule()>
c0010f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f70:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0010f75:	48                   	dec    eax
c0010f76:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0010f7b:	75 03                	jne    c0010f80 <timerHandler(unsigned int)+0x12b>
c0010f7d:	fb                   	sti    
c0010f7e:	66 90                	xchg   ax,ax
c0010f80:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0010f85:	48                   	dec    eax
c0010f86:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c0010f8b:	75 1b                	jne    c0010fa8 <timerHandler(unsigned int)+0x153>
c0010f8d:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c0010f94:	74 12                	je     c0010fa8 <timerHandler(unsigned int)+0x153>
c0010f96:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0010fa0:	e8 bb 7d 00 00       	call   c0018d60 <schedule()>
c0010fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa8:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0010fad:	48                   	dec    eax
c0010fae:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0010fb3:	75 03                	jne    c0010fb8 <timerHandler(unsigned int)+0x163>
c0010fb5:	fb                   	sti    
c0010fb6:	66 90                	xchg   ax,ax
c0010fb8:	58                   	pop    eax
c0010fb9:	5b                   	pop    ebx
c0010fba:	5e                   	pop    esi
c0010fbb:	c3                   	ret    

c0010fbc <setupTimer(int)>:
c0010fbc:	57                   	push   edi
c0010fbd:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fce:	83 ec 0c             	sub    esp,0xc
c0010fd1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010fd7:	e8 d6 d8 ff ff       	call   c000e8b2 <Device::getName()>
c0010fdc:	83 c4 10             	add    esp,0x10
c0010fdf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010fe2:	0f 85 94 00 00 00    	jne    c001107c <setupTimer(int)+0xc0>
c0010fe8:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0010fed:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010ff4:	0f 84 82 00 00 00    	je     c001107c <setupTimer(int)+0xc0>
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	68 5c 01 00 00       	push   0x15c
c0011002:	e8 4c 8d ff ff       	call   c0009d53 <malloc>
c0011007:	89 04 24             	mov    DWORD PTR [esp],eax
c001100a:	89 c3                	mov    ebx,eax
c001100c:	e8 07 1a 01 00       	call   c0022a18 <PIT::PIT()>
c0011011:	59                   	pop    ecx
c0011012:	5f                   	pop    edi
c0011013:	53                   	push   ebx
c0011014:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c001101a:	e8 93 d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c001101f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011021:	6a 00                	push   0x0
c0011023:	6a 00                	push   0x0
c0011025:	56                   	push   esi
c0011026:	53                   	push   ebx
c0011027:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001102a:	83 c4 14             	add    esp,0x14
c001102d:	68 60 01 00 00       	push   0x160
c0011032:	e8 1c 8d ff ff       	call   c0009d53 <malloc>
c0011037:	89 04 24             	mov    DWORD PTR [esp],eax
c001103a:	89 c7                	mov    edi,eax
c001103c:	e8 8b 18 01 00       	call   c00228cc <APICTimer::APICTimer()>
c0011041:	6a 00                	push   0x0
c0011043:	6a 00                	push   0x0
c0011045:	56                   	push   esi
c0011046:	57                   	push   edi
c0011047:	e8 80 17 01 00       	call   c00227cc <APICTimer::open(int, int, void*)>
c001104c:	83 c4 20             	add    esp,0x20
c001104f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011051:	6a 00                	push   0x0
c0011053:	6a 00                	push   0x0
c0011055:	6a 00                	push   0x0
c0011057:	53                   	push   ebx
c0011058:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001105b:	58                   	pop    eax
c001105c:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011061:	5a                   	pop    edx
c0011062:	57                   	push   edi
c0011063:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011069:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001106f:	e8 3e d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	eb 37                	jmp    c00110b0 <setupTimer(int)+0xf4>
c0011079:	8d 76 00             	lea    esi,[esi+0x0]
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	68 5c 01 00 00       	push   0x15c
c0011084:	e8 ca 8c ff ff       	call   c0009d53 <malloc>
c0011089:	89 04 24             	mov    DWORD PTR [esp],eax
c001108c:	89 c3                	mov    ebx,eax
c001108e:	e8 85 19 01 00       	call   c0022a18 <PIT::PIT()>
c0011093:	58                   	pop    eax
c0011094:	5a                   	pop    edx
c0011095:	53                   	push   ebx
c0011096:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c001109c:	e8 11 d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c00110a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110a3:	6a 00                	push   0x0
c00110a5:	6a 00                	push   0x0
c00110a7:	56                   	push   esi
c00110a8:	53                   	push   ebx
c00110a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110ac:	83 c4 20             	add    esp,0x20
c00110af:	90                   	nop
c00110b0:	89 d8                	mov    eax,ebx
c00110b2:	5b                   	pop    ebx
c00110b3:	5e                   	pop    esi
c00110b4:	5f                   	pop    edi
c00110b5:	c3                   	ret    
c00110b6:	66 90                	xchg   ax,ax

c00110b8 <VCache::VCache(PhysicalDisk*)>:
c00110b8:	53                   	push   ebx
c00110b9:	83 ec 18             	sub    esp,0x18
c00110bc:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c00110c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110c5:	89 10                	mov    DWORD PTR [eax],edx
c00110c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110cb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00110d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110d6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00110dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00110e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00110ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00110fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011105:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001110c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011110:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011118:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001111f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0011126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001112a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001112e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011132:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0011136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001113a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001113e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011142:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011149:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011151:	83 ec 0c             	sub    esp,0xc
c0011154:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011158:	e8 f6 8b ff ff       	call   c0009d53 <malloc>
c001115d:	83 c4 10             	add    esp,0x10
c0011160:	89 c3                	mov    ebx,eax
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	53                   	push   ebx
c0011166:	e8 c5 79 00 00       	call   c0018b30 <Mutex::Mutex()>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011172:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011179:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001117d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011184:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001118b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001118f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011199:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001119c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111a0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00111a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00111b0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00111b3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00111b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111ba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00111be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111c8:	05 00 01 00 00       	add    eax,0x100
c00111cd:	c1 e0 04             	shl    eax,0x4
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	50                   	push   eax
c00111d4:	e8 7a 8b ff ff       	call   c0009d53 <malloc>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	89 c2                	mov    edx,eax
c00111de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111e9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00111f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00111f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011202:	c1 e0 06             	shl    eax,0x6
c0011205:	83 ec 0c             	sub    esp,0xc
c0011208:	50                   	push   eax
c0011209:	e8 45 8b ff ff       	call   c0009d53 <malloc>
c001120e:	83 c4 10             	add    esp,0x10
c0011211:	89 c2                	mov    edx,eax
c0011213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011217:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001121a:	90                   	nop
c001121b:	83 c4 18             	add    esp,0x18
c001121e:	5b                   	pop    ebx
c001121f:	c3                   	ret    

c0011220 <VCache::invalidateReadBuffer()>:
c0011220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011224:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001122a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001122e:	c3                   	ret    
c001122f:	90                   	nop

c0011230 <VCache::writeWriteBuffer()>:
c0011230:	53                   	push   ebx
c0011231:	83 ec 08             	sub    esp,0x8
c0011234:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011238:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001123c:	74 1e                	je     c001125c <VCache::writeWriteBuffer()+0x2c>
c001123e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011241:	83 ec 0c             	sub    esp,0xc
c0011244:	8b 10                	mov    edx,DWORD PTR [eax]
c0011246:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011249:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001124c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001124f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011252:	50                   	push   eax
c0011253:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011256:	83 c4 20             	add    esp,0x20
c0011259:	8d 76 00             	lea    esi,[esi+0x0]
c001125c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011263:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001126a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001126e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011275:	83 c4 08             	add    esp,0x8
c0011278:	5b                   	pop    ebx
c0011279:	c3                   	ret    
c001127a:	66 90                	xchg   ax,ax

c001127c <VCache::~VCache()>:
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ba a8 5c 02 c0       	mov    edx,0xc0025ca8
c0011284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011288:	89 10                	mov    DWORD PTR [eax],edx
c001128a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011291:	84 c0                	test   al,al
c0011293:	74 0f                	je     c00112a4 <VCache::~VCache()+0x28>
c0011295:	83 ec 0c             	sub    esp,0xc
c0011298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129c:	e8 8f ff ff ff       	call   c0011230 <VCache::writeWriteBuffer()>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00112ab:	83 ec 0c             	sub    esp,0xc
c00112ae:	50                   	push   eax
c00112af:	e8 af 8a ff ff       	call   c0009d63 <free>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00112be:	83 ec 0c             	sub    esp,0xc
c00112c1:	50                   	push   eax
c00112c2:	e8 9c 8a ff ff       	call   c0009d63 <free>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	90                   	nop
c00112cb:	83 c4 0c             	add    esp,0xc
c00112ce:	c3                   	ret    
c00112cf:	90                   	nop

c00112d0 <VCache::~VCache()>:
c00112d0:	83 ec 0c             	sub    esp,0xc
c00112d3:	83 ec 0c             	sub    esp,0xc
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 9d ff ff ff       	call   c001127c <VCache::~VCache()>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	6a 44                	push   0x44
c00112e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112eb:	e8 6e bc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	83 c4 0c             	add    esp,0xc
c00112f6:	c3                   	ret    
c00112f7:	90                   	nop

c00112f8 <VCache::write(unsigned long long, int, void*)>:
c00112f8:	55                   	push   ebp
c00112f9:	31 c0                	xor    eax,eax
c00112fb:	57                   	push   edi
c00112fc:	56                   	push   esi
c00112fd:	53                   	push   ebx
c00112fe:	83 ec 0c             	sub    esp,0xc
c0011301:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011305:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011309:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001130d:	8d 76 00             	lea    esi,[esi+0x0]
c0011310:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011314:	7d 1a                	jge    c0011330 <VCache::write(unsigned long long, int, void*)+0x38>
c0011316:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011319:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001131f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011323:	0f af c8             	imul   ecx,eax
c0011326:	01 ca                	add    edx,ecx
c0011328:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001132a:	40                   	inc    eax
c001132b:	eb e3                	jmp    c0011310 <VCache::write(unsigned long long, int, void*)+0x18>
c001132d:	8d 76 00             	lea    esi,[esi+0x0]
c0011330:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011334:	74 0a                	je     c0011340 <VCache::write(unsigned long long, int, void*)+0x48>
c0011336:	53                   	push   ebx
c0011337:	e8 e4 fe ff ff       	call   c0011220 <VCache::invalidateReadBuffer()>
c001133c:	58                   	pop    eax
c001133d:	8d 76 00             	lea    esi,[esi+0x0]
c0011340:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011344:	74 5e                	je     c00113a4 <VCache::write(unsigned long long, int, void*)+0xac>
c0011346:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011349:	89 e8                	mov    eax,ebp
c001134b:	99                   	cdq    
c001134c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001134f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011352:	89 c1                	mov    ecx,eax
c0011354:	89 d0                	mov    eax,edx
c0011356:	31 f1                	xor    ecx,esi
c0011358:	31 f8                	xor    eax,edi
c001135a:	09 c1                	or     ecx,eax
c001135c:	75 3a                	jne    c0011398 <VCache::write(unsigned long long, int, void*)+0xa0>
c001135e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011363:	75 33                	jne    c0011398 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011365:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011368:	89 ef                	mov    edi,ebp
c001136a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011370:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011374:	0f af f9             	imul   edi,ecx
c0011377:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001137a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001137c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001137f:	40                   	inc    eax
c0011380:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011383:	83 f8 40             	cmp    eax,0x40
c0011386:	75 60                	jne    c00113e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011388:	83 ec 0c             	sub    esp,0xc
c001138b:	53                   	push   ebx
c001138c:	e8 9f fe ff ff       	call   c0011230 <VCache::writeWriteBuffer()>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	eb 52                	jmp    c00113e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011396:	66 90                	xchg   ax,ax
c0011398:	83 ec 0c             	sub    esp,0xc
c001139b:	53                   	push   ebx
c001139c:	e8 8f fe ff ff       	call   c0011230 <VCache::writeWriteBuffer()>
c00113a1:	83 c4 10             	add    esp,0x10
c00113a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00113a7:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00113ac:	7f 22                	jg     c00113d0 <VCache::write(unsigned long long, int, void*)+0xd8>
c00113ae:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00113b1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00113b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00113b8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00113bc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00113bf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00113c2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00113c8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113ce:	eb 18                	jmp    c00113e8 <VCache::write(unsigned long long, int, void*)+0xf0>
c00113d0:	83 ec 0c             	sub    esp,0xc
c00113d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00113d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113dd:	57                   	push   edi
c00113de:	56                   	push   esi
c00113df:	50                   	push   eax
c00113e0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00113e3:	83 c4 20             	add    esp,0x20
c00113e6:	66 90                	xchg   ax,ax
c00113e8:	83 c4 0c             	add    esp,0xc
c00113eb:	31 c0                	xor    eax,eax
c00113ed:	5b                   	pop    ebx
c00113ee:	5e                   	pop    esi
c00113ef:	5f                   	pop    edi
c00113f0:	5d                   	pop    ebp
c00113f1:	c3                   	ret    

c00113f2 <VCache::read(unsigned long long, int, void*)>:
c00113f2:	55                   	push   ebp
c00113f3:	31 c0                	xor    eax,eax
c00113f5:	57                   	push   edi
c00113f6:	56                   	push   esi
c00113f7:	53                   	push   ebx
c00113f8:	83 ec 1c             	sub    esp,0x1c
c00113fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00113ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011403:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011407:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001140b:	90                   	nop
c001140c:	39 e8                	cmp    eax,ebp
c001140e:	7d 18                	jge    c0011428 <VCache::read(unsigned long long, int, void*)+0x36>
c0011410:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011413:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011419:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001141d:	0f af c8             	imul   ecx,eax
c0011420:	01 ca                	add    edx,ecx
c0011422:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011424:	40                   	inc    eax
c0011425:	eb e5                	jmp    c001140c <VCache::read(unsigned long long, int, void*)+0x1a>
c0011427:	90                   	nop
c0011428:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001142c:	74 0e                	je     c001143c <VCache::read(unsigned long long, int, void*)+0x4a>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	53                   	push   ebx
c0011432:	e8 f9 fd ff ff       	call   c0011230 <VCache::writeWriteBuffer()>
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	66 90                	xchg   ax,ax
c001143c:	83 fd 01             	cmp    ebp,0x1
c001143f:	0f 85 87 00 00 00    	jne    c00114cc <VCache::read(unsigned long long, int, void*)+0xda>
c0011445:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011448:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001144c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011453:	75 77                	jne    c00114cc <VCache::read(unsigned long long, int, void*)+0xda>
c0011455:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011458:	89 e9                	mov    ecx,ebp
c001145a:	f7 d9                	neg    ecx
c001145c:	89 c8                	mov    eax,ecx
c001145e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011462:	c1 f8 1f             	sar    eax,0x1f
c0011465:	21 f1                	and    ecx,esi
c0011467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001146b:	89 c8                	mov    eax,ecx
c001146d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011471:	21 f9                	and    ecx,edi
c0011473:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011477:	89 ca                	mov    edx,ecx
c0011479:	74 0d                	je     c0011488 <VCache::read(unsigned long long, int, void*)+0x96>
c001147b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001147e:	75 08                	jne    c0011488 <VCache::read(unsigned long long, int, void*)+0x96>
c0011480:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011483:	74 27                	je     c00114ac <VCache::read(unsigned long long, int, void*)+0xba>
c0011485:	8d 76 00             	lea    esi,[esi+0x0]
c0011488:	83 ec 0c             	sub    esp,0xc
c001148b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001148f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011493:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011496:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011499:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001149b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001149e:	55                   	push   ebp
c001149f:	52                   	push   edx
c00114a0:	50                   	push   eax
c00114a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00114a5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00114a8:	83 c4 20             	add    esp,0x20
c00114ab:	90                   	nop
c00114ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114af:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00114b3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00114b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00114bc:	48                   	dec    eax
c00114bd:	21 c6                	and    esi,eax
c00114bf:	0f af f1             	imul   esi,ecx
c00114c2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00114c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114c7:	eb 23                	jmp    c00114ec <VCache::read(unsigned long long, int, void*)+0xfa>
c00114c9:	8d 76 00             	lea    esi,[esi+0x0]
c00114cc:	83 ec 0c             	sub    esp,0xc
c00114cf:	53                   	push   ebx
c00114d0:	e8 4b fd ff ff       	call   c0011220 <VCache::invalidateReadBuffer()>
c00114d5:	5a                   	pop    edx
c00114d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00114db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114df:	55                   	push   ebp
c00114e0:	57                   	push   edi
c00114e1:	56                   	push   esi
c00114e2:	50                   	push   eax
c00114e3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00114e6:	83 c4 20             	add    esp,0x20
c00114e9:	8d 76 00             	lea    esi,[esi+0x0]
c00114ec:	83 c4 1c             	add    esp,0x1c
c00114ef:	31 c0                	xor    eax,eax
c00114f1:	5b                   	pop    ebx
c00114f2:	5e                   	pop    esi
c00114f3:	5f                   	pop    edi
c00114f4:	5d                   	pop    ebp
c00114f5:	c3                   	ret    

c00114f6 <Video::putrect(int, int, int, int, unsigned int)>:
c00114f6:	55                   	push   ebp
c00114f7:	57                   	push   edi
c00114f8:	56                   	push   esi
c00114f9:	53                   	push   ebx
c00114fa:	83 ec 1c             	sub    esp,0x1c
c00114fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011501:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011505:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011509:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001150d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011515:	01 df                	add    edi,ebx
c0011517:	39 fb                	cmp    ebx,edi
c0011519:	7d 1f                	jge    c001153a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001151b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001151f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011523:	7d 12                	jge    c0011537 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011525:	8b 16                	mov    edx,DWORD PTR [esi]
c0011527:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001152b:	53                   	push   ebx
c001152c:	55                   	push   ebp
c001152d:	45                   	inc    ebp
c001152e:	56                   	push   esi
c001152f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011532:	83 c4 10             	add    esp,0x10
c0011535:	eb e8                	jmp    c001151f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011537:	43                   	inc    ebx
c0011538:	eb dd                	jmp    c0011517 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001153a:	83 c4 1c             	add    esp,0x1c
c001153d:	5b                   	pop    ebx
c001153e:	5e                   	pop    esi
c001153f:	5f                   	pop    edi
c0011540:	5d                   	pop    ebp
c0011541:	c3                   	ret    

c0011542 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011542:	55                   	push   ebp
c0011543:	57                   	push   edi
c0011544:	31 ff                	xor    edi,edi
c0011546:	56                   	push   esi
c0011547:	53                   	push   ebx
c0011548:	83 ec 1c             	sub    esp,0x1c
c001154b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001154f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011553:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001155a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001155f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011563:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011567:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001156b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001156e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011572:	01 f9                	add    ecx,edi
c0011574:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011578:	7d 2f                	jge    c00115a9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001157a:	31 f6                	xor    esi,esi
c001157c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011580:	01 f2                	add    edx,esi
c0011582:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011586:	7d 1a                	jge    c00115a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011588:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001158b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001158e:	46                   	inc    esi
c001158f:	51                   	push   ecx
c0011590:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011594:	52                   	push   edx
c0011595:	55                   	push   ebp
c0011596:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115a0:	eb da                	jmp    c001157c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00115a2:	47                   	inc    edi
c00115a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00115a7:	eb c5                	jmp    c001156e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00115a9:	83 c4 1c             	add    esp,0x1c
c00115ac:	5b                   	pop    ebx
c00115ad:	5e                   	pop    esi
c00115ae:	5f                   	pop    edi
c00115af:	5d                   	pop    ebp
c00115b0:	c3                   	ret    
c00115b1:	90                   	nop

c00115b2 <Video::blit(unsigned int*, int, int, int, int)>:
c00115b2:	55                   	push   ebp
c00115b3:	57                   	push   edi
c00115b4:	56                   	push   esi
c00115b5:	53                   	push   ebx
c00115b6:	83 ec 1c             	sub    esp,0x1c
c00115b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115c1:	85 c0                	test   eax,eax
c00115c3:	79 02                	jns    c00115c7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00115c5:	31 c0                	xor    eax,eax
c00115c7:	c1 e0 02             	shl    eax,0x2
c00115ca:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00115ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115d6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00115da:	39 d8                	cmp    eax,ebx
c00115dc:	7e 49                	jle    c0011627 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115de:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00115e4:	7c 41                	jl     c0011627 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115e6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00115ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00115f2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00115f6:	39 f9                	cmp    ecx,edi
c00115f8:	7e 22                	jle    c001161c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00115fa:	83 c5 04             	add    ebp,0x4
c00115fd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011603:	7c 14                	jl     c0011619 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011605:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011607:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001160a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001160e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011612:	56                   	push   esi
c0011613:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	47                   	inc    edi
c001161a:	eb d2                	jmp    c00115ee <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001161c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011620:	43                   	inc    ebx
c0011621:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011625:	eb ab                	jmp    c00115d2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011627:	83 c4 1c             	add    esp,0x1c
c001162a:	5b                   	pop    ebx
c001162b:	5e                   	pop    esi
c001162c:	5f                   	pop    edi
c001162d:	5d                   	pop    ebp
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <Video::clearScreen(unsigned int)>:
c0011630:	57                   	push   edi
c0011631:	56                   	push   esi
c0011632:	53                   	push   ebx
c0011633:	31 db                	xor    ebx,ebx
c0011635:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011639:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001163f:	7e 1f                	jle    c0011660 <Video::clearScreen(unsigned int)+0x30>
c0011641:	31 ff                	xor    edi,edi
c0011643:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011649:	7e 12                	jle    c001165d <Video::clearScreen(unsigned int)+0x2d>
c001164b:	8b 06                	mov    eax,DWORD PTR [esi]
c001164d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011651:	53                   	push   ebx
c0011652:	57                   	push   edi
c0011653:	47                   	inc    edi
c0011654:	56                   	push   esi
c0011655:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011658:	83 c4 10             	add    esp,0x10
c001165b:	eb e6                	jmp    c0011643 <Video::clearScreen(unsigned int)+0x13>
c001165d:	43                   	inc    ebx
c001165e:	eb d9                	jmp    c0011639 <Video::clearScreen(unsigned int)+0x9>
c0011660:	5b                   	pop    ebx
c0011661:	5e                   	pop    esi
c0011662:	5f                   	pop    edi
c0011663:	c3                   	ret    

c0011664 <Video::putpixel(int, int, unsigned int)>:
c0011664:	c7 44 24 04 b0 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025cb0
c001166c:	e9 90 39 00 00       	jmp    c0015001 <Krnl::panic(char const*)>
c0011671:	90                   	nop

c0011672 <Video::Video(char const*)>:
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011679:	83 ec 08             	sub    esp,0x8
c001167c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011680:	50                   	push   eax
c0011681:	e8 30 d1 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	ba 20 5d 02 c0       	mov    edx,0xc0025d20
c001168e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011692:	89 10                	mov    DWORD PTR [eax],edx
c0011694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011698:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00116a2:	90                   	nop
c00116a3:	83 c4 0c             	add    esp,0xc
c00116a6:	c3                   	ret    
c00116a7:	90                   	nop

c00116a8 <Video::~Video()>:
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	ba 20 5d 02 c0       	mov    edx,0xc0025d20
c00116b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b4:	89 10                	mov    DWORD PTR [eax],edx
c00116b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	50                   	push   eax
c00116be:	e8 bd cd ff ff       	call   c000e480 <Device::~Device()>
c00116c3:	83 c4 10             	add    esp,0x10
c00116c6:	90                   	nop
c00116c7:	83 c4 0c             	add    esp,0xc
c00116ca:	c3                   	ret    
c00116cb:	90                   	nop

c00116cc <Video::~Video()>:
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	83 ec 0c             	sub    esp,0xc
c00116d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d6:	e8 cd ff ff ff       	call   c00116a8 <Video::~Video()>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	83 ec 08             	sub    esp,0x8
c00116e1:	68 64 01 00 00       	push   0x164
c00116e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ea:	e8 6f b8 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	83 c4 0c             	add    esp,0xc
c00116f5:	c3                   	ret    

c00116f6 <Video::isMonochrome()>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011700:	c3                   	ret    
c0011701:	90                   	nop

c0011702 <Video::getWidth()>:
c0011702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011706:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001170c:	c3                   	ret    
c001170d:	90                   	nop

c001170e <Video::getHeight()>:
c001170e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011712:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011718:	c3                   	ret    
c0011719:	90                   	nop

c001171a <Video::drawCursor(int, int, unsigned char*, int)>:
c001171a:	55                   	push   ebp
c001171b:	57                   	push   edi
c001171c:	56                   	push   esi
c001171d:	53                   	push   ebx
c001171e:	83 ec 2c             	sub    esp,0x2c
c0011721:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011725:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011729:	83 f8 01             	cmp    eax,0x1
c001172c:	19 c9                	sbb    ecx,ecx
c001172e:	31 db                	xor    ebx,ebx
c0011730:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011734:	89 cd                	mov    ebp,ecx
c0011736:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001173e:	f7 d5                	not    ebp
c0011740:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011746:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001174a:	01 d8                	add    eax,ebx
c001174c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011750:	56                   	push   esi
c0011751:	e8 b8 ff ff ff       	call   c001170e <Video::getHeight()>
c0011756:	59                   	pop    ecx
c0011757:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001175b:	7e 70                	jle    c00117cd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001175d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011761:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011765:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011768:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001176c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011770:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001177b:	89 f8                	mov    eax,edi
c001177d:	83 c0 20             	add    eax,0x20
c0011780:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011784:	56                   	push   esi
c0011785:	e8 78 ff ff ff       	call   c0011702 <Video::getWidth()>
c001178a:	5a                   	pop    edx
c001178b:	39 c7                	cmp    edi,eax
c001178d:	7d 34                	jge    c00117c3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001178f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011794:	74 05                	je     c001179b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011796:	8b 06                	mov    eax,DWORD PTR [esi]
c0011798:	55                   	push   ebp
c0011799:	eb 0d                	jmp    c00117a8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001179b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00117a0:	74 12                	je     c00117b4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00117a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00117a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117ac:	57                   	push   edi
c00117ad:	56                   	push   esi
c00117ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117b1:	83 c4 10             	add    esp,0x10
c00117b4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00117b8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00117bc:	47                   	inc    edi
c00117bd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00117c1:	75 c1                	jne    c0011784 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00117c3:	43                   	inc    ebx
c00117c4:	83 fb 20             	cmp    ebx,0x20
c00117c7:	0f 85 79 ff ff ff    	jne    c0011746 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00117cd:	83 c4 2c             	add    esp,0x2c
c00117d0:	5b                   	pop    ebx
c00117d1:	5e                   	pop    esi
c00117d2:	5f                   	pop    edi
c00117d3:	5d                   	pop    ebp
c00117d4:	c3                   	ret    
c00117d5:	90                   	nop

c00117d6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00117d6:	55                   	push   ebp
c00117d7:	57                   	push   edi
c00117d8:	56                   	push   esi
c00117d9:	53                   	push   ebx
c00117da:	83 ec 28             	sub    esp,0x28
c00117dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00117e1:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00117e5:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00117e9:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00117ed:	c1 e6 08             	shl    esi,0x8
c00117f0:	01 c6                	add    esi,eax
c00117f2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00117f6:	c1 e0 08             	shl    eax,0x8
c00117f9:	01 d0                	add    eax,edx
c00117fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011803:	0f af c6             	imul   eax,esi
c0011806:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001180d:	50                   	push   eax
c001180e:	e8 40 85 ff ff       	call   c0009d53 <malloc>
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	89 c7                	mov    edi,eax
c0011818:	85 c0                	test   eax,eax
c001181a:	75 10                	jne    c001182c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001181c:	83 ec 0c             	sub    esp,0xc
c001181f:	68 d1 5c 02 c0       	push   0xc0025cd1
c0011824:	e8 d8 37 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001182f:	ba 12 00 00 00       	mov    edx,0x12
c0011834:	84 c0                	test   al,al
c0011836:	74 11                	je     c0011849 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011838:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001183c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011840:	c1 fa 03             	sar    edx,0x3
c0011843:	0f af d1             	imul   edx,ecx
c0011846:	83 c2 12             	add    edx,0x12
c0011849:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001184d:	74 04                	je     c0011853 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001184f:	85 f6                	test   esi,esi
c0011851:	75 12                	jne    c0011865 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011853:	83 ec 0c             	sub    esp,0xc
c0011856:	68 e1 5c 02 c0       	push   0xc0025ce1
c001185b:	e8 df b7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011860:	e9 b8 00 00 00       	jmp    c001191d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011865:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011869:	80 f9 02             	cmp    cl,0x2
c001186c:	0f 85 96 00 00 00    	jne    c0011908 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011872:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011877:	75 0e                	jne    c0011887 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011879:	84 c0                	test   al,al
c001187b:	75 0a                	jne    c0011887 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001187d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011880:	83 e8 18             	sub    eax,0x18
c0011883:	a8 f7                	test   al,0xf7
c0011885:	74 0a                	je     c0011891 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011887:	83 ec 0c             	sub    esp,0xc
c001188a:	68 f6 5c 02 c0       	push   0xc0025cf6
c001188f:	eb 7f                	jmp    c0011910 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011891:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011899:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00118a1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00118a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00118ad:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00118b1:	75 0c                	jne    c00118bf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00118b3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00118b8:	c1 e0 18             	shl    eax,0x18
c00118bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118bf:	45                   	inc    ebp
c00118c0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00118c5:	c1 e1 10             	shl    ecx,0x10
c00118c8:	89 c8                	mov    eax,ecx
c00118ca:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00118cf:	c1 e1 08             	shl    ecx,0x8
c00118d2:	09 c1                	or     ecx,eax
c00118d4:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00118d8:	09 c1                	or     ecx,eax
c00118da:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00118de:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00118e2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00118e6:	c1 f8 03             	sar    eax,0x3
c00118e9:	01 c2                	add    edx,eax
c00118eb:	89 e8                	mov    eax,ebp
c00118ed:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00118f1:	39 c6                	cmp    esi,eax
c00118f3:	7f b0                	jg     c00118a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00118f5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00118fd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011900:	7e 22                	jle    c0011924 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011902:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011906:	eb 99                	jmp    c00118a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011908:	50                   	push   eax
c0011909:	50                   	push   eax
c001190a:	51                   	push   ecx
c001190b:	68 04 5d 02 c0       	push   0xc0025d04
c0011910:	e8 2a b7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011915:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011918:	e8 46 84 ff ff       	call   c0009d63 <free>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	31 ff                	xor    edi,edi
c0011922:	eb 0f                	jmp    c0011933 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011924:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011928:	89 30                	mov    DWORD PTR [eax],esi
c001192a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001192e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011931:	89 30                	mov    DWORD PTR [eax],esi
c0011933:	83 c4 1c             	add    esp,0x1c
c0011936:	89 f8                	mov    eax,edi
c0011938:	5b                   	pop    ebx
c0011939:	5e                   	pop    esi
c001193a:	5f                   	pop    edi
c001193b:	5d                   	pop    ebp
c001193c:	c3                   	ret    
c001193d:	90                   	nop

c001193e <Video::putTGA(int, int, unsigned char*, int)>:
c001193e:	55                   	push   ebp
c001193f:	57                   	push   edi
c0011940:	56                   	push   esi
c0011941:	53                   	push   ebx
c0011942:	83 ec 28             	sub    esp,0x28
c0011945:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011949:	8d 44 24 18          	lea    eax,[esp+0x18]
c001194d:	50                   	push   eax
c001194e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011952:	50                   	push   eax
c0011953:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011957:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001195b:	56                   	push   esi
c001195c:	e8 75 fe ff ff       	call   c00117d6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011961:	83 c4 20             	add    esp,0x20
c0011964:	85 c0                	test   eax,eax
c0011966:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001196a:	74 35                	je     c00119a1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001196c:	89 c7                	mov    edi,eax
c001196e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011972:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011976:	39 d8                	cmp    eax,ebx
c0011978:	7e 27                	jle    c00119a1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001197a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001197e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011982:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011986:	39 e8                	cmp    eax,ebp
c0011988:	7e 14                	jle    c001199e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001198a:	8b 06                	mov    eax,DWORD PTR [esi]
c001198c:	83 c7 04             	add    edi,0x4
c001198f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011992:	53                   	push   ebx
c0011993:	55                   	push   ebp
c0011994:	45                   	inc    ebp
c0011995:	56                   	push   esi
c0011996:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	eb e0                	jmp    c001197e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001199e:	43                   	inc    ebx
c001199f:	eb cd                	jmp    c001196e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00119a1:	83 c4 1c             	add    esp,0x1c
c00119a4:	5b                   	pop    ebx
c00119a5:	5e                   	pop    esi
c00119a6:	5f                   	pop    edi
c00119a7:	5d                   	pop    ebp
c00119a8:	c3                   	ret    
c00119a9:	66 90                	xchg   ax,ax
c00119ab:	90                   	nop

c00119ac <ACPI::close(int, int, void*)>:
c00119ac:	83 ec 1c             	sub    esp,0x1c
c00119af:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00119b7:	74 0b                	je     c00119c4 <ACPI::close(int, int, void*)+0x18>
c00119b9:	b8 00 00 00 00       	mov    eax,0x0
c00119be:	e9 99 00 00 00       	jmp    c0011a5c <ACPI::close(int, int, void*)+0xb0>
c00119c3:	90                   	nop
c00119c4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00119c9:	75 29                	jne    c00119f4 <ACPI::close(int, int, void*)+0x48>
c00119cb:	a1 e8 92 02 c0       	mov    eax,ds:0xc00292e8
c00119d0:	85 c0                	test   eax,eax
c00119d2:	74 08                	je     c00119dc <ACPI::close(int, int, void*)+0x30>
c00119d4:	a1 e8 92 02 c0       	mov    eax,ds:0xc00292e8
c00119d9:	ff d0                	call   eax
c00119db:	90                   	nop
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	68 60 5d 02 c0       	push   0xc0025d60
c00119e4:	e8 18 36 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00119e9:	83 c4 10             	add    esp,0x10
c00119ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119f1:	eb 69                	jmp    c0011a5c <ACPI::close(int, int, void*)+0xb0>
c00119f3:	90                   	nop
c00119f4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00119f9:	75 59                	jne    c0011a54 <ACPI::close(int, int, void*)+0xa8>
c00119fb:	a1 e4 92 02 c0       	mov    eax,ds:0xc00292e4
c0011a00:	85 c0                	test   eax,eax
c0011a02:	74 08                	je     c0011a0c <ACPI::close(int, int, void*)+0x60>
c0011a04:	a1 e4 92 02 c0       	mov    eax,ds:0xc00292e4
c0011a09:	ff d0                	call   eax
c0011a0b:	90                   	nop
c0011a0c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011a11:	8d 76 00             	lea    esi,[esi+0x0]
c0011a14:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a19:	83 e0 02             	and    eax,0x2
c0011a1c:	74 1e                	je     c0011a3c <ACPI::close(int, int, void*)+0x90>
c0011a1e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a29:	89 c2                	mov    edx,eax
c0011a2b:	ec                   	in     al,dx
c0011a2c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a30:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011a34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a38:	eb da                	jmp    c0011a14 <ACPI::close(int, int, void*)+0x68>
c0011a3a:	66 90                	xchg   ax,ax
c0011a3c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011a43:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011a48:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011a4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a50:	ee                   	out    dx,al
c0011a51:	8d 76 00             	lea    esi,[esi+0x0]
c0011a54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a59:	8d 76 00             	lea    esi,[esi+0x0]
c0011a5c:	83 c4 1c             	add    esp,0x1c
c0011a5f:	c3                   	ret    

c0011a60 <findRSDP()>:
c0011a60:	83 ec 1c             	sub    esp,0x1c
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 83 5e 02 c0       	push   0xc0025e83
c0011a6b:	e8 3d 83 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011a78:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a7e:	83 e0 04             	and    eax,0x4
c0011a81:	84 c0                	test   al,al
c0011a83:	75 0b                	jne    c0011a90 <findRSDP()+0x30>
c0011a85:	b8 00 00 00 00       	mov    eax,0x0
c0011a8a:	e9 a1 00 00 00       	jmp    c0011b30 <findRSDP()+0xd0>
c0011a8f:	90                   	nop
c0011a90:	a1 d8 8c 02 c0       	mov    eax,ds:0xc0028cd8
c0011a95:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011a9a:	7f 1c                	jg     c0011ab8 <findRSDP()+0x58>
c0011a9c:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011aa1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011aa7:	83 e2 fb             	and    edx,0xfffffffb
c0011aaa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ab0:	b8 00 00 00 00       	mov    eax,0x0
c0011ab5:	eb 79                	jmp    c0011b30 <findRSDP()+0xd0>
c0011ab7:	90                   	nop
c0011ab8:	83 ec 0c             	sub    esp,0xc
c0011abb:	68 93 5e 02 c0       	push   0xc0025e93
c0011ac0:	e8 e8 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011ad0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011ad8:	77 3e                	ja     c0011b18 <findRSDP()+0xb8>
c0011ada:	83 ec 04             	sub    esp,0x4
c0011add:	6a 08                	push   0x8
c0011adf:	68 ac 5e 02 c0       	push   0xc0025eac
c0011ae4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ae8:	e8 8b ea fe ff       	call   c0000578 <memcmp>
c0011aed:	83 c4 10             	add    esp,0x10
c0011af0:	85 c0                	test   eax,eax
c0011af2:	0f 94 c0             	sete   al
c0011af5:	84 c0                	test   al,al
c0011af7:	74 17                	je     c0011b10 <findRSDP()+0xb0>
c0011af9:	83 ec 0c             	sub    esp,0xc
c0011afc:	68 b5 5e 02 c0       	push   0xc0025eb5
c0011b01:	e8 a7 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0d:	eb 21                	jmp    c0011b30 <findRSDP()+0xd0>
c0011b0f:	90                   	nop
c0011b10:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011b15:	eb b9                	jmp    c0011ad0 <findRSDP()+0x70>
c0011b17:	90                   	nop
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	68 c3 5e 02 c0       	push   0xc0025ec3
c0011b20:	e8 88 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	b8 00 00 00 00       	mov    eax,0x0
c0011b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011b30:	83 c4 1c             	add    esp,0x1c
c0011b33:	c3                   	ret    

c0011b34 <loadACPITables(unsigned char*)>:
c0011b34:	57                   	push   edi
c0011b35:	56                   	push   esi
c0011b36:	53                   	push   ebx
c0011b37:	83 ec 60             	sub    esp,0x60
c0011b3a:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011b3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b45:	83 e0 04             	and    eax,0x4
c0011b48:	84 c0                	test   al,al
c0011b4a:	0f 84 3c 02 00 00    	je     c0011d8c <loadACPITables(unsigned char*)+0x258>
c0011b50:	a0 00 95 02 c0       	mov    al,ds:0xc0029500
c0011b55:	84 c0                	test   al,al
c0011b57:	74 77                	je     c0011bd0 <loadACPITables(unsigned char*)+0x9c>
c0011b59:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b5d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011b61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011b65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b68:	83 e8 24             	sub    eax,0x24
c0011b6b:	c1 e8 03             	shr    eax,0x3
c0011b6e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011b72:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011b7a:	66 90                	xchg   ax,ax
c0011b7c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011b80:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011b84:	0f 8d b6 00 00 00    	jge    c0011c40 <loadACPITables(unsigned char*)+0x10c>
c0011b8a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b8e:	83 c0 24             	add    eax,0x24
c0011b91:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011b95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011b99:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011ba1:	c1 e0 03             	shl    eax,0x3
c0011ba4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011ba8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011bac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb1:	89 c1                	mov    ecx,eax
c0011bb3:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c0011bb8:	8d 50 01             	lea    edx,[eax+0x1]
c0011bbb:	89 15 ec 92 02 c0    	mov    DWORD PTR ds:0xc00292ec,edx
c0011bc1:	89 ca                	mov    edx,ecx
c0011bc3:	89 14 c5 04 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6cfc],edx
c0011bca:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011bce:	eb ac                	jmp    c0011b7c <loadACPITables(unsigned char*)+0x48>
c0011bd0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bd4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011bd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bdf:	83 e8 24             	sub    eax,0x24
c0011be2:	c1 e8 02             	shr    eax,0x2
c0011be5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011be9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0011bf4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011bf8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011bfc:	7d 42                	jge    c0011c40 <loadACPITables(unsigned char*)+0x10c>
c0011bfe:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c02:	83 c0 24             	add    eax,0x24
c0011c05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011c09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011c0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011c11:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011c15:	c1 e0 02             	shl    eax,0x2
c0011c18:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011c1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c22:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c0011c27:	8d 50 01             	lea    edx,[eax+0x1]
c0011c2a:	89 15 ec 92 02 c0    	mov    DWORD PTR ds:0xc00292ec,edx
c0011c30:	89 ca                	mov    edx,ecx
c0011c32:	89 14 c5 04 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6cfc],edx
c0011c39:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011c3d:	eb b5                	jmp    c0011bf4 <loadACPITables(unsigned char*)+0xc0>
c0011c3f:	90                   	nop
c0011c40:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011c48:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c0011c4d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011c51:	0f 8d 39 01 00 00    	jge    c0011d90 <loadACPITables(unsigned char*)+0x25c>
c0011c57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011c5b:	8b 04 c5 04 93 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6cfc]
c0011c62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c6a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c72:	25 ff 0f 00 00       	and    eax,0xfff
c0011c77:	89 c6                	mov    esi,eax
c0011c79:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c0011c7f:	83 ec 0c             	sub    esp,0xc
c0011c82:	6a 01                	push   0x1
c0011c84:	e8 90 a0 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c90:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c96:	83 ec 0c             	sub    esp,0xc
c0011c99:	6a 01                	push   0x1
c0011c9b:	6a 01                	push   0x1
c0011c9d:	50                   	push   eax
c0011c9e:	52                   	push   edx
c0011c9f:	53                   	push   ebx
c0011ca0:	e8 11 aa ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ca5:	83 c4 20             	add    esp,0x20
c0011ca8:	09 f0                	or     eax,esi
c0011caa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011cae:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011cb2:	c1 e0 03             	shl    eax,0x3
c0011cb5:	05 00 93 02 c0       	add    eax,0xc0029300
c0011cba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011cc6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011cce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011cde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ce2:	89 c6                	mov    esi,eax
c0011ce4:	89 d7                	mov    edi,edx
c0011ce6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ce8:	89 c8                	mov    eax,ecx
c0011cea:	89 fa                	mov    edx,edi
c0011cec:	89 f3                	mov    ebx,esi
c0011cee:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011cf2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011cf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d09:	05 00 10 00 00       	add    eax,0x1000
c0011d0e:	c1 e8 0c             	shr    eax,0xc
c0011d11:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d21:	25 ff 0f 00 00       	and    eax,0xfff
c0011d26:	89 c6                	mov    esi,eax
c0011d28:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c0011d2e:	83 ec 0c             	sub    esp,0xc
c0011d31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d35:	e8 df 9f ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d41:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011d47:	83 ec 0c             	sub    esp,0xc
c0011d4a:	6a 01                	push   0x1
c0011d4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d50:	50                   	push   eax
c0011d51:	52                   	push   edx
c0011d52:	53                   	push   ebx
c0011d53:	e8 5e a9 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d58:	83 c4 20             	add    esp,0x20
c0011d5b:	09 f0                	or     eax,esi
c0011d5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d65:	83 ec 0c             	sub    esp,0xc
c0011d68:	50                   	push   eax
c0011d69:	e8 db a2 ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d6e:	83 c4 10             	add    esp,0x10
c0011d71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d79:	89 14 c5 04 93 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6cfc],edx
c0011d80:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011d84:	e9 bf fe ff ff       	jmp    c0011c48 <loadACPITables(unsigned char*)+0x114>
c0011d89:	8d 76 00             	lea    esi,[esi+0x0]
c0011d8c:	90                   	nop
c0011d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d90:	83 c4 60             	add    esp,0x60
c0011d93:	5b                   	pop    ebx
c0011d94:	5e                   	pop    esi
c0011d95:	5f                   	pop    edi
c0011d96:	c3                   	ret    
c0011d97:	90                   	nop

c0011d98 <findRSDT(unsigned char*)>:
c0011d98:	57                   	push   edi
c0011d99:	56                   	push   esi
c0011d9a:	53                   	push   ebx
c0011d9b:	83 ec 50             	sub    esp,0x50
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	68 d7 5e 02 c0       	push   0xc0025ed7
c0011da6:	e8 02 80 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011db3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011db9:	83 e0 04             	and    eax,0x4
c0011dbc:	84 c0                	test   al,al
c0011dbe:	75 0c                	jne    c0011dcc <findRSDT(unsigned char*)+0x34>
c0011dc0:	b8 00 00 00 00       	mov    eax,0x0
c0011dc5:	e9 86 01 00 00       	jmp    c0011f50 <findRSDT(unsigned char*)+0x1b8>
c0011dca:	66 90                	xchg   ax,ax
c0011dcc:	83 ec 0c             	sub    esp,0xc
c0011dcf:	68 e9 5e 02 c0       	push   0xc0025ee9
c0011dd4:	e8 d4 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	89 e0                	mov    eax,esp
c0011dde:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011de2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011de6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011dea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011df2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011dfe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011e02:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011e06:	89 c6                	mov    esi,eax
c0011e08:	89 d7                	mov    edi,edx
c0011e0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e0c:	89 c8                	mov    eax,ecx
c0011e0e:	89 fa                	mov    edx,edi
c0011e10:	89 f3                	mov    ebx,esi
c0011e12:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011e16:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011e1a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e1e:	83 ec 0c             	sub    esp,0xc
c0011e21:	68 fb 5e 02 c0       	push   0xc0025efb
c0011e26:	e8 82 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011e2b:	83 c4 10             	add    esp,0x10
c0011e2e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e32:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011e36:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	68 0d 5f 02 c0       	push   0xc0025f0d
c0011e46:	e8 62 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011e4b:	83 c4 10             	add    esp,0x10
c0011e4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e56:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e5e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011e62:	83 ec 04             	sub    esp,0x4
c0011e65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e69:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e6d:	68 84 5d 02 c0       	push   0xc0025d84
c0011e72:	e8 c8 b1 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011e7e:	25 ff 0f 00 00       	and    eax,0xfff
c0011e83:	89 c6                	mov    esi,eax
c0011e85:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c0011e8b:	83 ec 0c             	sub    esp,0xc
c0011e8e:	6a 02                	push   0x2
c0011e90:	e8 84 9e ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011e95:	83 c4 10             	add    esp,0x10
c0011e98:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011e9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ea2:	83 ec 0c             	sub    esp,0xc
c0011ea5:	6a 01                	push   0x1
c0011ea7:	6a 02                	push   0x2
c0011ea9:	50                   	push   eax
c0011eaa:	52                   	push   edx
c0011eab:	53                   	push   ebx
c0011eac:	e8 05 a8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eb1:	83 c4 20             	add    esp,0x20
c0011eb4:	09 f0                	or     eax,esi
c0011eb6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011eba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ebe:	25 ff 0f 00 00       	and    eax,0xfff
c0011ec3:	89 c6                	mov    esi,eax
c0011ec5:	8b 1d d0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd0
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	6a 02                	push   0x2
c0011ed0:	e8 44 9e ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011edc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	6a 01                	push   0x1
c0011ee7:	6a 02                	push   0x2
c0011ee9:	50                   	push   eax
c0011eea:	52                   	push   edx
c0011eeb:	53                   	push   ebx
c0011eec:	e8 c5 a7 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ef1:	83 c4 20             	add    esp,0x20
c0011ef4:	09 f0                	or     eax,esi
c0011ef6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011efa:	83 ec 04             	sub    esp,0x4
c0011efd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f05:	68 a4 5d 02 c0       	push   0xc0025da4
c0011f0a:	e8 30 b1 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011f17:	75 13                	jne    c0011f2c <findRSDT(unsigned char*)+0x194>
c0011f19:	c6 05 00 95 02 c0 00 	mov    BYTE PTR ds:0xc0029500,0x0
c0011f20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f24:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f28:	eb 22                	jmp    c0011f4c <findRSDT(unsigned char*)+0x1b4>
c0011f2a:	66 90                	xchg   ax,ax
c0011f2c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011f31:	75 11                	jne    c0011f44 <findRSDT(unsigned char*)+0x1ac>
c0011f33:	c6 05 00 95 02 c0 01 	mov    BYTE PTR ds:0xc0029500,0x1
c0011f3a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011f3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f42:	eb 08                	jmp    c0011f4c <findRSDT(unsigned char*)+0x1b4>
c0011f44:	b8 00 00 00 00       	mov    eax,0x0
c0011f49:	eb 05                	jmp    c0011f50 <findRSDT(unsigned char*)+0x1b8>
c0011f4b:	90                   	nop
c0011f4c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f50:	83 c4 50             	add    esp,0x50
c0011f53:	5b                   	pop    ebx
c0011f54:	5e                   	pop    esi
c0011f55:	5f                   	pop    edi
c0011f56:	c3                   	ret    
c0011f57:	90                   	nop

c0011f58 <findDataTable(unsigned char*, char*)>:
c0011f58:	83 ec 1c             	sub    esp,0x1c
c0011f5b:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011f60:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f66:	83 e0 04             	and    eax,0x4
c0011f69:	84 c0                	test   al,al
c0011f6b:	75 07                	jne    c0011f74 <findDataTable(unsigned char*, char*)+0x1c>
c0011f6d:	b8 00 00 00 00       	mov    eax,0x0
c0011f72:	eb 58                	jmp    c0011fcc <findDataTable(unsigned char*, char*)+0x74>
c0011f74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f7c:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c0011f81:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011f85:	7d 3d                	jge    c0011fc4 <findDataTable(unsigned char*, char*)+0x6c>
c0011f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8b:	c1 e0 03             	shl    eax,0x3
c0011f8e:	05 00 93 02 c0       	add    eax,0xc0029300
c0011f93:	83 ec 04             	sub    esp,0x4
c0011f96:	6a 04                	push   0x4
c0011f98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f9c:	50                   	push   eax
c0011f9d:	e8 d6 e5 fe ff       	call   c0000578 <memcmp>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	85 c0                	test   eax,eax
c0011fa7:	0f 94 c0             	sete   al
c0011faa:	84 c0                	test   al,al
c0011fac:	74 0e                	je     c0011fbc <findDataTable(unsigned char*, char*)+0x64>
c0011fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb2:	8b 04 c5 04 93 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6cfc]
c0011fb9:	eb 11                	jmp    c0011fcc <findDataTable(unsigned char*, char*)+0x74>
c0011fbb:	90                   	nop
c0011fbc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011fc0:	eb ba                	jmp    c0011f7c <findDataTable(unsigned char*, char*)+0x24>
c0011fc2:	66 90                	xchg   ax,ax
c0011fc4:	b8 00 00 00 00       	mov    eax,0x0
c0011fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0011fcc:	83 c4 1c             	add    esp,0x1c
c0011fcf:	c3                   	ret    

c0011fd0 <scanMADT()>:
c0011fd0:	53                   	push   ebx
c0011fd1:	83 ec 38             	sub    esp,0x38
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	68 1f 5f 02 c0       	push   0xc0025f1f
c0011fdc:	e8 cc 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011fe1:	83 c4 10             	add    esp,0x10
c0011fe4:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0011fe9:	25 00 04 00 00       	and    eax,0x400
c0011fee:	74 14                	je     c0012004 <scanMADT()+0x34>
c0011ff0:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0011ff5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ffb:	83 e2 fb             	and    edx,0xfffffffb
c0011ffe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012004:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0012009:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001200f:	83 e0 04             	and    eax,0x4
c0012012:	84 c0                	test   al,al
c0012014:	0f 84 82 04 00 00    	je     c001249c <scanMADT()+0x4cc>
c001201a:	83 ec 0c             	sub    esp,0xc
c001201d:	68 2c 5f 02 c0       	push   0xc0025f2c
c0012022:	e8 86 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	e8 31 fa ff ff       	call   c0011a60 <findRSDP()>
c001202f:	a3 0c 95 02 c0       	mov    ds:0xc002950c,eax
c0012034:	a1 0c 95 02 c0       	mov    eax,ds:0xc002950c
c0012039:	85 c0                	test   eax,eax
c001203b:	75 1b                	jne    c0012058 <scanMADT()+0x88>
c001203d:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0012042:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012048:	83 e2 fb             	and    edx,0xfffffffb
c001204b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012051:	e9 4e 04 00 00       	jmp    c00124a4 <scanMADT()+0x4d4>
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	68 3e 5f 02 c0       	push   0xc0025f3e
c0012060:	e8 48 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	a1 0c 95 02 c0       	mov    eax,ds:0xc002950c
c001206d:	83 ec 0c             	sub    esp,0xc
c0012070:	50                   	push   eax
c0012071:	e8 22 fd ff ff       	call   c0011d98 <findRSDT(unsigned char*)>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	a3 08 95 02 c0       	mov    ds:0xc0029508,eax
c001207e:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c0012083:	85 c0                	test   eax,eax
c0012085:	75 19                	jne    c00120a0 <scanMADT()+0xd0>
c0012087:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001208c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012092:	83 e2 fb             	and    edx,0xfffffffb
c0012095:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001209b:	e9 04 04 00 00       	jmp    c00124a4 <scanMADT()+0x4d4>
c00120a0:	83 ec 0c             	sub    esp,0xc
c00120a3:	68 4e 5f 02 c0       	push   0xc0025f4e
c00120a8:	e8 00 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c00120b5:	83 ec 0c             	sub    esp,0xc
c00120b8:	50                   	push   eax
c00120b9:	e8 76 fa ff ff       	call   c0011b34 <loadACPITables(unsigned char*)>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c00120c6:	83 ec 08             	sub    esp,0x8
c00120c9:	68 66 5f 02 c0       	push   0xc0025f66
c00120ce:	50                   	push   eax
c00120cf:	e8 84 fe ff ff       	call   c0011f58 <findDataTable(unsigned char*, char*)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00120db:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00120e0:	75 1a                	jne    c00120fc <scanMADT()+0x12c>
c00120e2:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00120e7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120ed:	83 e2 fe             	and    edx,0xfffffffe
c00120f0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00120f6:	e9 a9 03 00 00       	jmp    c00124a4 <scanMADT()+0x4d4>
c00120fb:	90                   	nop
c00120fc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001210b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001210f:	0f 87 8f 03 00 00    	ja     c00124a4 <scanMADT()+0x4d4>
c0012115:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001211d:	0f 87 81 03 00 00    	ja     c00124a4 <scanMADT()+0x4d4>
c0012123:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012127:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001212b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001212f:	8d 50 01             	lea    edx,[eax+0x1]
c0012132:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012136:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001213a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001213e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0012142:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012146:	8d 50 01             	lea    edx,[eax+0x1]
c0012149:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001214d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012151:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012155:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012159:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001215e:	0f 86 3c 03 00 00    	jbe    c00124a0 <scanMADT()+0x4d0>
c0012164:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012169:	75 59                	jne    c00121c4 <scanMADT()+0x1f4>
c001216b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001216f:	8d 50 01             	lea    edx,[eax+0x1]
c0012172:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012176:	8a 15 00 97 02 c0    	mov    dl,BYTE PTR ds:0xc0029700
c001217c:	0f b6 d2             	movzx  edx,dl
c001217f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012183:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012187:	88 82 40 97 02 c0    	mov    BYTE PTR [edx-0x3ffd68c0],al
c001218d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012191:	8d 50 01             	lea    edx,[eax+0x1]
c0012194:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012198:	8a 15 00 97 02 c0    	mov    dl,BYTE PTR ds:0xc0029700
c001219e:	8d 4a 01             	lea    ecx,[edx+0x1]
c00121a1:	88 0d 00 97 02 c0    	mov    BYTE PTR ds:0xc0029700,cl
c00121a7:	0f b6 d2             	movzx  edx,dl
c00121aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121b2:	88 82 20 97 02 c0    	mov    BYTE PTR [edx-0x3ffd68e0],al
c00121b8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00121bd:	e9 c6 02 00 00       	jmp    c0012488 <scanMADT()+0x4b8>
c00121c2:	66 90                	xchg   ax,ax
c00121c4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00121c9:	0f 85 15 01 00 00    	jne    c00122e4 <scanMADT()+0x314>
c00121cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121d3:	8d 50 01             	lea    edx,[eax+0x1]
c00121d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121da:	8a 15 c0 95 02 c0    	mov    dl,BYTE PTR ds:0xc00295c0
c00121e0:	0f b6 d2             	movzx  edx,dl
c00121e3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121e7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121eb:	88 82 e0 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6a20],al
c00121f1:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00121f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121fd:	01 d0                	add    eax,edx
c00121ff:	83 c0 2c             	add    eax,0x2c
c0012202:	8a 00                	mov    al,BYTE PTR [eax]
c0012204:	0f b6 d0             	movzx  edx,al
c0012207:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001220b:	8d 48 01             	lea    ecx,[eax+0x1]
c001220e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012212:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012216:	0f b6 c0             	movzx  eax,al
c0012219:	c1 e0 08             	shl    eax,0x8
c001221c:	89 d1                	mov    ecx,edx
c001221e:	09 c1                	or     ecx,eax
c0012220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012224:	8d 50 02             	lea    edx,[eax+0x2]
c0012227:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001222b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001222f:	0f b6 c0             	movzx  eax,al
c0012232:	c1 e0 10             	shl    eax,0x10
c0012235:	09 c1                	or     ecx,eax
c0012237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001223b:	8d 50 03             	lea    edx,[eax+0x3]
c001223e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012242:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012246:	0f b6 c0             	movzx  eax,al
c0012249:	c1 e0 18             	shl    eax,0x18
c001224c:	09 c1                	or     ecx,eax
c001224e:	89 ca                	mov    edx,ecx
c0012250:	a0 c0 95 02 c0       	mov    al,ds:0xc00295c0
c0012255:	0f b6 c0             	movzx  eax,al
c0012258:	89 14 85 00 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a00],edx
c001225f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012264:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012268:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001226c:	01 d0                	add    eax,edx
c001226e:	83 c0 2c             	add    eax,0x2c
c0012271:	8a 00                	mov    al,BYTE PTR [eax]
c0012273:	0f b6 d0             	movzx  edx,al
c0012276:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001227a:	8d 48 01             	lea    ecx,[eax+0x1]
c001227d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012281:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012285:	0f b6 c0             	movzx  eax,al
c0012288:	c1 e0 08             	shl    eax,0x8
c001228b:	89 d1                	mov    ecx,edx
c001228d:	09 c1                	or     ecx,eax
c001228f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012293:	8d 50 02             	lea    edx,[eax+0x2]
c0012296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001229a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001229e:	0f b6 c0             	movzx  eax,al
c00122a1:	c1 e0 10             	shl    eax,0x10
c00122a4:	09 c1                	or     ecx,eax
c00122a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122aa:	8d 50 03             	lea    edx,[eax+0x3]
c00122ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00122b5:	0f b6 c0             	movzx  eax,al
c00122b8:	c1 e0 18             	shl    eax,0x18
c00122bb:	09 c1                	or     ecx,eax
c00122bd:	89 ca                	mov    edx,ecx
c00122bf:	a0 c0 95 02 c0       	mov    al,ds:0xc00295c0
c00122c4:	0f b6 c0             	movzx  eax,al
c00122c7:	89 14 85 80 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6980],edx
c00122ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122d3:	a0 c0 95 02 c0       	mov    al,ds:0xc00295c0
c00122d8:	40                   	inc    eax
c00122d9:	a2 c0 95 02 c0       	mov    ds:0xc00295c0,al
c00122de:	e9 a5 01 00 00       	jmp    c0012488 <scanMADT()+0x4b8>
c00122e3:	90                   	nop
c00122e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00122e9:	0f 85 e9 00 00 00    	jne    c00123d8 <scanMADT()+0x408>
c00122ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122f3:	8d 50 01             	lea    edx,[eax+0x1]
c00122f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012302:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001230a:	8d 50 01             	lea    edx,[eax+0x1]
c001230d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012311:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012315:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012319:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001231d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012321:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012325:	01 d0                	add    eax,edx
c0012327:	83 c0 2c             	add    eax,0x2c
c001232a:	8a 00                	mov    al,BYTE PTR [eax]
c001232c:	0f b6 d0             	movzx  edx,al
c001232f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012333:	8d 48 01             	lea    ecx,[eax+0x1]
c0012336:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001233a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001233e:	0f b6 c0             	movzx  eax,al
c0012341:	c1 e0 08             	shl    eax,0x8
c0012344:	89 d1                	mov    ecx,edx
c0012346:	09 c1                	or     ecx,eax
c0012348:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001234c:	8d 50 02             	lea    edx,[eax+0x2]
c001234f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012353:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012357:	0f b6 c0             	movzx  eax,al
c001235a:	c1 e0 10             	shl    eax,0x10
c001235d:	09 c1                	or     ecx,eax
c001235f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012363:	8d 50 03             	lea    edx,[eax+0x3]
c0012366:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001236a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001236e:	0f b6 c0             	movzx  eax,al
c0012371:	c1 e0 18             	shl    eax,0x18
c0012374:	09 c8                	or     eax,ecx
c0012376:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001237a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001237f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012383:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012387:	01 d0                	add    eax,edx
c0012389:	83 c0 2c             	add    eax,0x2c
c001238c:	8a 00                	mov    al,BYTE PTR [eax]
c001238e:	0f b6 c0             	movzx  eax,al
c0012391:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012395:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012398:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001239c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00123a0:	0f b6 d2             	movzx  edx,dl
c00123a3:	c1 e2 08             	shl    edx,0x8
c00123a6:	09 d0                	or     eax,edx
c00123a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00123ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00123b2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00123b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123bb:	88 90 a0 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7c60],dl
c00123c1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00123c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00123cb:	66 89 84 12 a0 95 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6a60],ax
c00123d3:	e9 b0 00 00 00       	jmp    c0012488 <scanMADT()+0x4b8>
c00123d8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00123dd:	0f 85 99 00 00 00    	jne    c001247c <scanMADT()+0x4ac>
c00123e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123e7:	8d 50 01             	lea    edx,[eax+0x1]
c00123ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00123f6:	0f b6 c0             	movzx  eax,al
c00123f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012401:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012405:	01 d0                	add    eax,edx
c0012407:	83 c0 2c             	add    eax,0x2c
c001240a:	8a 00                	mov    al,BYTE PTR [eax]
c001240c:	0f b6 d0             	movzx  edx,al
c001240f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012413:	8d 48 01             	lea    ecx,[eax+0x1]
c0012416:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001241a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001241e:	0f b6 c0             	movzx  eax,al
c0012421:	c1 e0 08             	shl    eax,0x8
c0012424:	09 d0                	or     eax,edx
c0012426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001242a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001242f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012433:	8d 50 01             	lea    edx,[eax+0x1]
c0012436:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001243a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001243e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012442:	0f b6 c0             	movzx  eax,al
c0012445:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244d:	c1 e0 08             	shl    eax,0x8
c0012450:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012454:	89 c1                	mov    ecx,eax
c0012456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001245a:	c1 e0 18             	shl    eax,0x18
c001245d:	89 c3                	mov    ebx,eax
c001245f:	a1 10 95 02 c0       	mov    eax,ds:0xc0029510
c0012464:	8d 50 01             	lea    edx,[eax+0x1]
c0012467:	89 15 10 95 02 c0    	mov    DWORD PTR ds:0xc0029510,edx
c001246d:	09 d9                	or     ecx,ebx
c001246f:	89 ca                	mov    edx,ecx
c0012471:	89 14 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],edx
c0012478:	eb 0e                	jmp    c0012488 <scanMADT()+0x4b8>
c001247a:	66 90                	xchg   ax,ax
c001247c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012481:	75 05                	jne    c0012488 <scanMADT()+0x4b8>
c0012483:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012488:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001248d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012491:	01 d0                	add    eax,edx
c0012493:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012497:	e9 68 fc ff ff       	jmp    c0012104 <scanMADT()+0x134>
c001249c:	90                   	nop
c001249d:	eb 05                	jmp    c00124a4 <scanMADT()+0x4d4>
c001249f:	90                   	nop
c00124a0:	90                   	nop
c00124a1:	8d 76 00             	lea    esi,[esi+0x0]
c00124a4:	83 c4 38             	add    esp,0x38
c00124a7:	5b                   	pop    ebx
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop
c00124aa:	66 90                	xchg   ax,ax

c00124ac <ACPI::ACPI()>:
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b3:	83 ec 08             	sub    esp,0x8
c00124b6:	68 6b 5f 02 c0       	push   0xc0025f6b
c00124bb:	50                   	push   eax
c00124bc:	e8 f5 c2 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	ba 2c 61 02 c0       	mov    edx,0xc002612c
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	89 10                	mov    DWORD PTR [eax],edx
c00124cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00124da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124de:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	68 70 5f 02 c0       	push   0xc0025f70
c00124fe:	e8 aa 78 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	e8 c5 fa ff ff       	call   c0011fd0 <scanMADT()>
c001250b:	90                   	nop
c001250c:	83 c4 0c             	add    esp,0xc
c001250f:	c3                   	ret    

c0012510 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012510:	83 ec 2c             	sub    esp,0x2c
c0012513:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001251b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001251f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012523:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012528:	88 d0                	mov    al,dl
c001252a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001252e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012533:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001253b:	90                   	nop
c001253c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012540:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012546:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001254a:	0f 8d 9c 00 00 00    	jge    c00125ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012550:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012554:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012558:	83 c2 2a             	add    edx,0x2a
c001255b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001255f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012564:	75 7a                	jne    c00125e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012566:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001256e:	83 c2 2a             	add    edx,0x2a
c0012571:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012575:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012579:	75 65                	jne    c00125e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001257b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012580:	74 3a                	je     c00125bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012582:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012586:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001258a:	83 c2 2a             	add    edx,0x2a
c001258d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012598:	39 c2                	cmp    edx,eax
c001259a:	74 10                	je     c00125ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001259c:	83 ec 0c             	sub    esp,0xc
c001259f:	68 c4 5d 02 c0       	push   0xc0025dc4
c00125a4:	e8 58 2a 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	83 ec 0c             	sub    esp,0xc
c00125af:	68 7e 5f 02 c0       	push   0xc0025f7e
c00125b4:	e8 48 2a 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00125b9:	83 c4 10             	add    esp,0x10
c00125bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125c8:	83 c2 2a             	add    edx,0x2a
c00125cb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00125cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00125d1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00125d4:	89 01                	mov    DWORD PTR [ecx],eax
c00125d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00125d9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00125de:	66 90                	xchg   ax,ax
c00125e0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00125e4:	e9 53 ff ff ff       	jmp    c001253c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00125e9:	8d 76 00             	lea    esi,[esi+0x0]
c00125ec:	90                   	nop
c00125ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f1:	83 c4 2c             	add    esp,0x2c
c00125f4:	c2 04 00             	ret    0x4
c00125f7:	90                   	nop

c00125f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00125f8:	83 ec 1c             	sub    esp,0x1c
c00125fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125ff:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012603:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012607:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001260c:	88 c8                	mov    al,cl
c001260e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012612:	88 d0                	mov    al,dl
c0012614:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001261c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012626:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012629:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001262d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012635:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001263b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001263f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012646:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001264b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001264f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012655:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012659:	8d 48 01             	lea    ecx,[eax+0x1]
c001265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012660:	83 c2 2a             	add    edx,0x2a
c0012663:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012675:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012678:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001267c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012684:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001268a:	8d 50 01             	lea    edx,[eax+0x1]
c001268d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012691:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001269b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00126a1:	3d 00 02 00 00       	cmp    eax,0x200
c00126a6:	75 10                	jne    c00126b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	68 8d 5f 02 c0       	push   0xc0025f8d
c00126b0:	e8 4c 29 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	90                   	nop
c00126b9:	83 c4 1c             	add    esp,0x1c
c00126bc:	c3                   	ret    
c00126bd:	90                   	nop
c00126be:	66 90                	xchg   ax,ax

c00126c0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00126c0:	b8 00 00 00 00       	mov    eax,0x0
c00126c5:	c3                   	ret    
c00126c6:	66 90                	xchg   ax,ax

c00126c8 <ACPI::detectPCI()>:
c00126c8:	53                   	push   ebx
c00126c9:	83 ec 68             	sub    esp,0x68
c00126cc:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00126d1:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00126d6:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00126db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00126e1:	83 e0 04             	and    eax,0x4
c00126e4:	84 c0                	test   al,al
c00126e6:	74 2c                	je     c0012714 <ACPI::detectPCI()+0x4c>
c00126e8:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c00126ed:	83 ec 08             	sub    esp,0x8
c00126f0:	68 aa 5f 02 c0       	push   0xc0025faa
c00126f5:	50                   	push   eax
c00126f6:	e8 5d f8 ff ff       	call   c0011f58 <findDataTable(unsigned char*, char*)>
c00126fb:	83 c4 10             	add    esp,0x10
c00126fe:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0012702:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012707:	74 0b                	je     c0012714 <ACPI::detectPCI()+0x4c>
c0012709:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001270e:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012713:	90                   	nop
c0012714:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c001271c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012720:	8a 00                	mov    al,BYTE PTR [eax]
c0012722:	3c 01                	cmp    al,0x1
c0012724:	75 0e                	jne    c0012734 <ACPI::detectPCI()+0x6c>
c0012726:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001272b:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012730:	eb 2a                	jmp    c001275c <ACPI::detectPCI()+0x94>
c0012732:	66 90                	xchg   ax,ax
c0012734:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012738:	8a 00                	mov    al,BYTE PTR [eax]
c001273a:	3c 02                	cmp    al,0x2
c001273c:	75 1e                	jne    c001275c <ACPI::detectPCI()+0x94>
c001273e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012743:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012748:	74 12                	je     c001275c <ACPI::detectPCI()+0x94>
c001274a:	83 ec 0c             	sub    esp,0xc
c001274d:	68 f4 5d 02 c0       	push   0xc0025df4
c0012752:	e8 aa 28 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	66 90                	xchg   ax,ax
c001275c:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012760:	83 f0 01             	xor    eax,0x1
c0012763:	84 c0                	test   al,al
c0012765:	74 41                	je     c00127a8 <ACPI::detectPCI()+0xe0>
c0012767:	e8 e4 d9 fe ff       	call   c0000150 <manualPCIProbe>
c001276c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012770:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012775:	75 0d                	jne    c0012784 <ACPI::detectPCI()+0xbc>
c0012777:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001277c:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012781:	eb 25                	jmp    c00127a8 <ACPI::detectPCI()+0xe0>
c0012783:	90                   	nop
c0012784:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012789:	75 1d                	jne    c00127a8 <ACPI::detectPCI()+0xe0>
c001278b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012790:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012795:	74 11                	je     c00127a8 <ACPI::detectPCI()+0xe0>
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	68 f4 5d 02 c0       	push   0xc0025df4
c001279f:	e8 5d 28 00 00       	call   c0015001 <Krnl::panic(char const*)>
c00127a4:	83 c4 10             	add    esp,0x10
c00127a7:	90                   	nop
c00127a8:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00127ad:	0f 84 49 03 00 00    	je     c0012afc <ACPI::detectPCI()+0x434>
c00127b3:	83 ec 0c             	sub    esp,0xc
c00127b6:	68 af 5f 02 c0       	push   0xc0025faf
c00127bb:	e8 ed 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00127c0:	83 c4 10             	add    esp,0x10
c00127c3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00127c8:	0f 84 8e 00 00 00    	je     c001285c <ACPI::detectPCI()+0x194>
c00127ce:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00127d3:	25 00 08 00 00       	and    eax,0x800
c00127d8:	0f 84 16 01 00 00    	je     c00128f4 <ACPI::detectPCI()+0x22c>
c00127de:	83 ec 0c             	sub    esp,0xc
c00127e1:	68 1c 5e 02 c0       	push   0xc0025e1c
c00127e6:	e8 c2 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00127f3:	25 80 00 00 00       	and    eax,0x80
c00127f8:	0f 85 f6 00 00 00    	jne    c00128f4 <ACPI::detectPCI()+0x22c>
c00127fe:	66 90                	xchg   ax,ax
c0012800:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012807:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c001280c:	89 c2                	mov    edx,eax
c001280e:	ec                   	in     al,dx
c001280f:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012813:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012817:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001281b:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012820:	74 0a                	je     c001282c <ACPI::detectPCI()+0x164>
c0012822:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012827:	74 03                	je     c001282c <ACPI::detectPCI()+0x164>
c0012829:	eb d5                	jmp    c0012800 <ACPI::detectPCI()+0x138>
c001282b:	90                   	nop
c001282c:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012833:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012838:	89 c2                	mov    edx,eax
c001283a:	ec                   	in     al,dx
c001283b:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001283f:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012843:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012847:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c001284c:	74 de                	je     c001282c <ACPI::detectPCI()+0x164>
c001284e:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012853:	0f 85 93 00 00 00    	jne    c00128ec <ACPI::detectPCI()+0x224>
c0012859:	eb d1                	jmp    c001282c <ACPI::detectPCI()+0x164>
c001285b:	90                   	nop
c001285c:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012860:	83 f0 01             	xor    eax,0x1
c0012863:	84 c0                	test   al,al
c0012865:	0f 84 89 00 00 00    	je     c00128f4 <ACPI::detectPCI()+0x22c>
c001286b:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0012870:	25 00 08 00 00       	and    eax,0x800
c0012875:	74 7d                	je     c00128f4 <ACPI::detectPCI()+0x22c>
c0012877:	83 ec 0c             	sub    esp,0xc
c001287a:	68 40 5e 02 c0       	push   0xc0025e40
c001287f:	e8 29 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c001288c:	25 80 00 00 00       	and    eax,0x80
c0012891:	75 61                	jne    c00128f4 <ACPI::detectPCI()+0x22c>
c0012893:	90                   	nop
c0012894:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001289b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00128a0:	89 c2                	mov    edx,eax
c00128a2:	ec                   	in     al,dx
c00128a3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00128a7:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00128ab:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00128af:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00128b4:	74 0a                	je     c00128c0 <ACPI::detectPCI()+0x1f8>
c00128b6:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00128bb:	74 03                	je     c00128c0 <ACPI::detectPCI()+0x1f8>
c00128bd:	eb d5                	jmp    c0012894 <ACPI::detectPCI()+0x1cc>
c00128bf:	90                   	nop
c00128c0:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00128c7:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00128cc:	89 c2                	mov    edx,eax
c00128ce:	ec                   	in     al,dx
c00128cf:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00128d3:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00128d7:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00128db:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00128e0:	74 de                	je     c00128c0 <ACPI::detectPCI()+0x1f8>
c00128e2:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00128e7:	75 07                	jne    c00128f0 <ACPI::detectPCI()+0x228>
c00128e9:	eb d5                	jmp    c00128c0 <ACPI::detectPCI()+0x1f8>
c00128eb:	90                   	nop
c00128ec:	90                   	nop
c00128ed:	eb 05                	jmp    c00128f4 <ACPI::detectPCI()+0x22c>
c00128ef:	90                   	nop
c00128f0:	90                   	nop
c00128f1:	8d 76 00             	lea    esi,[esi+0x0]
c00128f4:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012903:	e8 4b 74 ff ff       	call   c0009d53 <malloc>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	89 c3                	mov    ebx,eax
c001290d:	83 ec 0c             	sub    esp,0xc
c0012910:	53                   	push   ebx
c0012911:	e8 f0 b0 00 00       	call   c001da06 <PCI::PCI()>
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c001291d:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0012922:	25 00 08 00 00       	and    eax,0x800
c0012927:	74 7b                	je     c00129a4 <ACPI::detectPCI()+0x2dc>
c0012929:	83 ec 0c             	sub    esp,0xc
c001292c:	68 c7 5f 02 c0       	push   0xc0025fc7
c0012931:	e8 77 74 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012936:	83 c4 10             	add    esp,0x10
c0012939:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c001293e:	25 80 00 00 00       	and    eax,0x80
c0012943:	75 5f                	jne    c00129a4 <ACPI::detectPCI()+0x2dc>
c0012945:	8d 76 00             	lea    esi,[esi+0x0]
c0012948:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001294f:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012954:	89 c2                	mov    edx,eax
c0012956:	ec                   	in     al,dx
c0012957:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001295b:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001295f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012963:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012968:	74 0a                	je     c0012974 <ACPI::detectPCI()+0x2ac>
c001296a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001296f:	74 03                	je     c0012974 <ACPI::detectPCI()+0x2ac>
c0012971:	eb d5                	jmp    c0012948 <ACPI::detectPCI()+0x280>
c0012973:	90                   	nop
c0012974:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001297b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012980:	89 c2                	mov    edx,eax
c0012982:	ec                   	in     al,dx
c0012983:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012987:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001298b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001298f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012994:	74 de                	je     c0012974 <ACPI::detectPCI()+0x2ac>
c0012996:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001299b:	75 03                	jne    c00129a0 <ACPI::detectPCI()+0x2d8>
c001299d:	eb d5                	jmp    c0012974 <ACPI::detectPCI()+0x2ac>
c001299f:	90                   	nop
c00129a0:	90                   	nop
c00129a1:	8d 76 00             	lea    esi,[esi+0x0]
c00129a4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00129a8:	83 ec 08             	sub    esp,0x8
c00129ab:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00129af:	50                   	push   eax
c00129b0:	e8 fd bb ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c00129b5:	83 c4 10             	add    esp,0x10
c00129b8:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00129bd:	25 00 08 00 00       	and    eax,0x800
c00129c2:	74 78                	je     c0012a3c <ACPI::detectPCI()+0x374>
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	68 cd 5f 02 c0       	push   0xc0025fcd
c00129cc:	e8 dc 73 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00129d1:	83 c4 10             	add    esp,0x10
c00129d4:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00129d9:	25 80 00 00 00       	and    eax,0x80
c00129de:	75 5c                	jne    c0012a3c <ACPI::detectPCI()+0x374>
c00129e0:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00129e7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00129ec:	89 c2                	mov    edx,eax
c00129ee:	ec                   	in     al,dx
c00129ef:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00129f3:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00129f7:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00129fb:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012a00:	74 0a                	je     c0012a0c <ACPI::detectPCI()+0x344>
c0012a02:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012a07:	74 03                	je     c0012a0c <ACPI::detectPCI()+0x344>
c0012a09:	eb d5                	jmp    c00129e0 <ACPI::detectPCI()+0x318>
c0012a0b:	90                   	nop
c0012a0c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012a13:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012a18:	89 c2                	mov    edx,eax
c0012a1a:	ec                   	in     al,dx
c0012a1b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012a1f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012a23:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012a27:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012a2c:	74 de                	je     c0012a0c <ACPI::detectPCI()+0x344>
c0012a2e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012a33:	75 03                	jne    c0012a38 <ACPI::detectPCI()+0x370>
c0012a35:	eb d5                	jmp    c0012a0c <ACPI::detectPCI()+0x344>
c0012a37:	90                   	nop
c0012a38:	90                   	nop
c0012a39:	8d 76 00             	lea    esi,[esi+0x0]
c0012a3c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012a40:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a42:	83 c0 08             	add    eax,0x8
c0012a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a47:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012a4c:	74 0a                	je     c0012a58 <ACPI::detectPCI()+0x390>
c0012a4e:	ba 01 00 00 00       	mov    edx,0x1
c0012a53:	eb 0b                	jmp    c0012a60 <ACPI::detectPCI()+0x398>
c0012a55:	8d 76 00             	lea    esi,[esi+0x0]
c0012a58:	ba 02 00 00 00       	mov    edx,0x2
c0012a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a60:	6a 00                	push   0x0
c0012a62:	6a 00                	push   0x0
c0012a64:	52                   	push   edx
c0012a65:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a69:	ff d0                	call   eax
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0012a73:	25 00 08 00 00       	and    eax,0x800
c0012a78:	0f 84 26 01 00 00    	je     c0012ba4 <ACPI::detectPCI()+0x4dc>
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	68 d3 5f 02 c0       	push   0xc0025fd3
c0012a86:	e8 22 73 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012a8b:	83 c4 10             	add    esp,0x10
c0012a8e:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c0012a93:	25 80 00 00 00       	and    eax,0x80
c0012a98:	0f 85 06 01 00 00    	jne    c0012ba4 <ACPI::detectPCI()+0x4dc>
c0012a9e:	66 90                	xchg   ax,ax
c0012aa0:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012aa7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012aac:	89 c2                	mov    edx,eax
c0012aae:	ec                   	in     al,dx
c0012aaf:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012ab3:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012ab7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012abb:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012ac0:	74 0a                	je     c0012acc <ACPI::detectPCI()+0x404>
c0012ac2:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012ac7:	74 03                	je     c0012acc <ACPI::detectPCI()+0x404>
c0012ac9:	eb d5                	jmp    c0012aa0 <ACPI::detectPCI()+0x3d8>
c0012acb:	90                   	nop
c0012acc:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012ad3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012ad8:	89 c2                	mov    edx,eax
c0012ada:	ec                   	in     al,dx
c0012adb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012adf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012ae3:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012ae7:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012aec:	74 de                	je     c0012acc <ACPI::detectPCI()+0x404>
c0012aee:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012af3:	0f 85 a7 00 00 00    	jne    c0012ba0 <ACPI::detectPCI()+0x4d8>
c0012af9:	eb d1                	jmp    c0012acc <ACPI::detectPCI()+0x404>
c0012afb:	90                   	nop
c0012afc:	83 ec 0c             	sub    esp,0xc
c0012aff:	68 d9 5f 02 c0       	push   0xc0025fd9
c0012b04:	e8 36 a5 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012b09:	83 c4 10             	add    esp,0x10
c0012b0c:	83 ec 0c             	sub    esp,0xc
c0012b0f:	68 e4 5f 02 c0       	push   0xc0025fe4
c0012b14:	e8 94 72 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012b19:	83 c4 10             	add    esp,0x10
c0012b1c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012b24:	83 ec 0c             	sub    esp,0xc
c0012b27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b2b:	e8 23 72 ff ff       	call   c0009d53 <malloc>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	89 c3                	mov    ebx,eax
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	53                   	push   ebx
c0012b39:	e8 32 c0 00 00       	call   c001eb70 <IDE::IDE()>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012b45:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b49:	83 ec 08             	sub    esp,0x8
c0012b4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b50:	50                   	push   eax
c0012b51:	e8 5c ba ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0012b56:	83 c4 10             	add    esp,0x10
c0012b59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b5d:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012b67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b6b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012b74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b78:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012b81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b87:	83 c0 08             	add    eax,0x8
c0012b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b8c:	6a 00                	push   0x0
c0012b8e:	6a 00                	push   0x0
c0012b90:	6a 00                	push   0x0
c0012b92:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012b96:	ff d0                	call   eax
c0012b98:	83 c4 10             	add    esp,0x10
c0012b9b:	eb 07                	jmp    c0012ba4 <ACPI::detectPCI()+0x4dc>
c0012b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba0:	90                   	nop
c0012ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba4:	90                   	nop
c0012ba5:	83 c4 68             	add    esp,0x68
c0012ba8:	5b                   	pop    ebx
c0012ba9:	c3                   	ret    
c0012baa:	66 90                	xchg   ax,ax

c0012bac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012bac:	83 ec 1c             	sub    esp,0x1c
c0012baf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bb3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012bb6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012bba:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0012bbf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012bc4:	83 ec 08             	sub    esp,0x8
c0012bc7:	52                   	push   edx
c0012bc8:	50                   	push   eax
c0012bc9:	e8 4c 67 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012bd5:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0012bda:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012bdf:	83 ec 04             	sub    esp,0x4
c0012be2:	6a 01                	push   0x1
c0012be4:	52                   	push   edx
c0012be5:	50                   	push   eax
c0012be6:	e8 13 69 ff ff       	call   c00094fe <Computer::writeCMOS(unsigned char, unsigned char)>
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	90                   	nop
c0012bef:	83 c4 1c             	add    esp,0x1c
c0012bf2:	c3                   	ret    
c0012bf3:	90                   	nop

c0012bf4 <ACPI::sleep()>:
c0012bf4:	83 ec 0c             	sub    esp,0xc
c0012bf7:	83 ec 0c             	sub    esp,0xc
c0012bfa:	68 f9 5f 02 c0       	push   0xc0025ff9
c0012bff:	e8 3b a4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012c04:	83 c4 10             	add    esp,0x10
c0012c07:	a1 e0 92 02 c0       	mov    eax,ds:0xc00292e0
c0012c0c:	85 c0                	test   eax,eax
c0012c0e:	74 18                	je     c0012c28 <ACPI::sleep()+0x34>
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	68 06 60 02 c0       	push   0xc0026006
c0012c18:	e8 22 a4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012c1d:	83 c4 10             	add    esp,0x10
c0012c20:	a1 e0 92 02 c0       	mov    eax,ds:0xc00292e0
c0012c25:	ff d0                	call   eax
c0012c27:	90                   	nop
c0012c28:	90                   	nop
c0012c29:	83 c4 0c             	add    esp,0xc
c0012c2c:	c3                   	ret    
c0012c2d:	90                   	nop
c0012c2e:	66 90                	xchg   ax,ax

c0012c30 <ACPI::open(int, int, void*)>:
c0012c30:	57                   	push   edi
c0012c31:	56                   	push   esi
c0012c32:	53                   	push   ebx
c0012c33:	81 ec 70 01 00 00    	sub    esp,0x170
c0012c39:	83 ec 0c             	sub    esp,0xc
c0012c3c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c43:	e8 80 fa ff ff       	call   c00126c8 <ACPI::detectPCI()>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	83 ec 0c             	sub    esp,0xc
c0012c4e:	68 64 5e 02 c0       	push   0xc0025e64
c0012c53:	e8 55 71 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	83 ec 0c             	sub    esp,0xc
c0012c5e:	68 20 60 02 c0       	push   0xc0026020
c0012c63:	e8 47 4b 00 00       	call   c00177af <Thr::loadKernelSymbolTable(char const*)>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012c73:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c88:	e8 c6 70 ff ff       	call   c0009d53 <malloc>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	89 c3                	mov    ebx,eax
c0012c92:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c0012c97:	83 ec 04             	sub    esp,0x4
c0012c9a:	50                   	push   eax
c0012c9b:	68 3e 60 02 c0       	push   0xc002603e
c0012ca0:	53                   	push   ebx
c0012ca1:	e8 04 a9 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012cb0:	83 ec 08             	sub    esp,0x8
c0012cb3:	6a 01                	push   0x1
c0012cb5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cbc:	e8 c3 a9 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012ccb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012cd3:	75 17                	jne    c0012cec <ACPI::open(int, int, void*)+0xbc>
c0012cd5:	83 ec 0c             	sub    esp,0xc
c0012cd8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cdf:	e8 fe a9 ff ff       	call   c000d6e2 <File::close()>
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	eb 0b                	jmp    c0012cf4 <ACPI::open(int, int, void*)+0xc4>
c0012ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cec:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012cf4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012cfc:	74 1e                	je     c0012d1c <ACPI::open(int, int, void*)+0xec>
c0012cfe:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d07:	83 c0 08             	add    eax,0x8
c0012d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d0c:	83 ec 0c             	sub    esp,0xc
c0012d0f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d16:	ff d0                	call   eax
c0012d18:	83 c4 10             	add    esp,0x10
c0012d1b:	90                   	nop
c0012d1c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012d23:	83 f0 01             	xor    eax,0x1
c0012d26:	84 c0                	test   al,al
c0012d28:	74 42                	je     c0012d6c <ACPI::open(int, int, void*)+0x13c>
c0012d2a:	83 ec 0c             	sub    esp,0xc
c0012d2d:	68 5c 60 02 c0       	push   0xc002605c
c0012d32:	e8 76 70 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	83 ec 04             	sub    esp,0x4
c0012d3d:	6a 0c                	push   0xc
c0012d3f:	68 77 60 02 c0       	push   0xc0026077
c0012d44:	68 88 60 02 c0       	push   0xc0026088
c0012d49:	e8 cb 30 00 00       	call   c0015e19 <Reg::readIntWithDefault(char*, char*, int)>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012d58:	83 ec 0c             	sub    esp,0xc
c0012d5b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012d62:	e8 bc 91 ff ff       	call   c000bf23 <Virt::setupPageSwapping(int)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	66 90                	xchg   ax,ax
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	68 26 46 02 c0       	push   0xc0024626
c0012d74:	e8 34 70 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012d79:	83 c4 10             	add    esp,0x10
c0012d7c:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c0012d82:	83 ec 08             	sub    esp,0x8
c0012d85:	6a 01                	push   0x1
c0012d87:	68 8f 60 02 c0       	push   0xc002608f
c0012d8c:	e8 95 54 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 ec 08             	sub    esp,0x8
c0012d97:	53                   	push   ebx
c0012d98:	50                   	push   eax
c0012d99:	e8 b9 56 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012da8:	83 ec 08             	sub    esp,0x8
c0012dab:	6a 12                	push   0x12
c0012dad:	50                   	push   eax
c0012dae:	e8 83 bb ff ff       	call   c000e936 <getDevicesOfType(DeviceType)>
c0012db3:	83 c4 0c             	add    esp,0xc
c0012db6:	66 90                	xchg   ax,ax
c0012db8:	83 ec 0c             	sub    esp,0xc
c0012dbb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dc2:	50                   	push   eax
c0012dc3:	e8 5c 0a 01 00       	call   c0023824 <LinkedList<Device>::isEmpty()>
c0012dc8:	83 c4 10             	add    esp,0x10
c0012dcb:	83 f0 01             	xor    eax,0x1
c0012dce:	84 c0                	test   al,al
c0012dd0:	0f 84 46 01 00 00    	je     c0012f1c <ACPI::open(int, int, void*)+0x2ec>
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012de0:	50                   	push   eax
c0012de1:	e8 5a 0a 01 00       	call   c0023840 <LinkedList<Device>::getFirstElement()>
c0012de6:	83 c4 10             	add    esp,0x10
c0012de9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dfa:	50                   	push   eax
c0012dfb:	e8 48 0a 01 00       	call   c0023848 <LinkedList<Device>::removeFirst()>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012e0a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012e11:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012e18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e1c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012e22:	ba 09 00 00 00       	mov    edx,0x9
c0012e27:	fc                   	cld    
c0012e28:	89 c7                	mov    edi,eax
c0012e2a:	89 de                	mov    esi,ebx
c0012e2c:	89 d1                	mov    ecx,edx
c0012e2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e30:	83 ec 08             	sub    esp,0x8
c0012e33:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012e37:	50                   	push   eax
c0012e38:	83 ec 24             	sub    esp,0x24
c0012e3b:	89 e0                	mov    eax,esp
c0012e3d:	89 c3                	mov    ebx,eax
c0012e3f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012e43:	ba 09 00 00 00       	mov    edx,0x9
c0012e48:	89 df                	mov    edi,ebx
c0012e4a:	89 c6                	mov    esi,eax
c0012e4c:	89 d1                	mov    ecx,edx
c0012e4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e50:	e8 8f b0 00 00       	call   c001dee4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012e55:	83 c4 30             	add    esp,0x30
c0012e58:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012e5f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012e67:	0f 84 4b ff ff ff    	je     c0012db8 <ACPI::open(int, int, void*)+0x188>
c0012e6d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012e78:	83 ec 0c             	sub    esp,0xc
c0012e7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012e82:	e8 cc 6e ff ff       	call   c0009d53 <malloc>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	89 c3                	mov    ebx,eax
c0012e8c:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c0012e91:	83 ec 04             	sub    esp,0x4
c0012e94:	50                   	push   eax
c0012e95:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012e9c:	53                   	push   ebx
c0012e9d:	e8 08 a7 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012eac:	83 ec 0c             	sub    esp,0xc
c0012eaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012eb6:	e8 37 aa ff ff       	call   c000d8f2 <File::exists()>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	84 c0                	test   al,al
c0012ec0:	74 2a                	je     c0012eec <ACPI::open(int, int, void*)+0x2bc>
c0012ec2:	83 ec 08             	sub    esp,0x8
c0012ec5:	6a 01                	push   0x1
c0012ec7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ece:	e8 53 53 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0012ed3:	83 c4 10             	add    esp,0x10
c0012ed6:	83 ec 08             	sub    esp,0x8
c0012ed9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ee0:	50                   	push   eax
c0012ee1:	e8 71 55 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0012eec:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012ef4:	0f 84 be fe ff ff    	je     c0012db8 <ACPI::open(int, int, void*)+0x188>
c0012efa:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f03:	83 c0 08             	add    eax,0x8
c0012f06:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f08:	83 ec 0c             	sub    esp,0xc
c0012f0b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f12:	ff d0                	call   eax
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	e9 9c fe ff ff       	jmp    c0012db8 <ACPI::open(int, int, void*)+0x188>
c0012f1c:	83 ec 0c             	sub    esp,0xc
c0012f1f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f26:	50                   	push   eax
c0012f27:	e8 f4 08 01 00       	call   c0023820 <LinkedList<Device>::~LinkedList()>
c0012f2c:	83 c4 10             	add    esp,0x10
c0012f2f:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c0012f35:	83 ec 08             	sub    esp,0x8
c0012f38:	6a 01                	push   0x1
c0012f3a:	68 aa 60 02 c0       	push   0xc00260aa
c0012f3f:	e8 e2 52 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0012f44:	83 c4 10             	add    esp,0x10
c0012f47:	83 ec 08             	sub    esp,0x8
c0012f4a:	53                   	push   ebx
c0012f4b:	50                   	push   eax
c0012f4c:	e8 06 55 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c0012f5a:	83 ec 08             	sub    esp,0x8
c0012f5d:	6a 01                	push   0x1
c0012f5f:	68 c7 60 02 c0       	push   0xc00260c7
c0012f64:	e8 bd 52 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	83 ec 08             	sub    esp,0x8
c0012f6f:	53                   	push   ebx
c0012f70:	50                   	push   eax
c0012f71:	e8 e1 54 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0012f7e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f84:	83 e0 04             	and    eax,0x4
c0012f87:	84 c0                	test   al,al
c0012f89:	0f 84 15 01 00 00    	je     c00130a4 <ACPI::open(int, int, void*)+0x474>
c0012f8f:	83 ec 0c             	sub    esp,0xc
c0012f92:	68 e4 60 02 c0       	push   0xc00260e4
c0012f97:	e8 11 6e ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012f9c:	83 c4 10             	add    esp,0x10
c0012f9f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012faa:	83 ec 0c             	sub    esp,0xc
c0012fad:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012fb4:	e8 9a 6d ff ff       	call   c0009d53 <malloc>
c0012fb9:	83 c4 10             	add    esp,0x10
c0012fbc:	89 c3                	mov    ebx,eax
c0012fbe:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c0012fc3:	83 ec 04             	sub    esp,0x4
c0012fc6:	50                   	push   eax
c0012fc7:	68 01 61 02 c0       	push   0xc0026101
c0012fcc:	53                   	push   ebx
c0012fcd:	e8 d8 a5 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012fd2:	83 c4 10             	add    esp,0x10
c0012fd5:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012fdc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012fe4:	74 1a                	je     c0013000 <ACPI::open(int, int, void*)+0x3d0>
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012ff0:	e8 fd a8 ff ff       	call   c000d8f2 <File::exists()>
c0012ff5:	83 c4 10             	add    esp,0x10
c0012ff8:	84 c0                	test   al,al
c0012ffa:	74 04                	je     c0013000 <ACPI::open(int, int, void*)+0x3d0>
c0012ffc:	b0 01                	mov    al,0x1
c0012ffe:	eb 04                	jmp    c0013004 <ACPI::open(int, int, void*)+0x3d4>
c0013000:	b0 00                	mov    al,0x0
c0013002:	66 90                	xchg   ax,ax
c0013004:	84 c0                	test   al,al
c0013006:	74 28                	je     c0013030 <ACPI::open(int, int, void*)+0x400>
c0013008:	83 ec 08             	sub    esp,0x8
c001300b:	6a 01                	push   0x1
c001300d:	68 01 61 02 c0       	push   0xc0026101
c0013012:	e8 0f 52 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	83 ec 08             	sub    esp,0x8
c001301d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013024:	50                   	push   eax
c0013025:	e8 2d 54 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	8d 76 00             	lea    esi,[esi+0x0]
c0013030:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013038:	74 2a                	je     c0013064 <ACPI::open(int, int, void*)+0x434>
c001303a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013042:	74 20                	je     c0013064 <ACPI::open(int, int, void*)+0x434>
c0013044:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001304b:	8b 00                	mov    eax,DWORD PTR [eax]
c001304d:	83 c0 08             	add    eax,0x8
c0013050:	8b 00                	mov    eax,DWORD PTR [eax]
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001305c:	ff d0                	call   eax
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	8d 76 00             	lea    esi,[esi+0x0]
c0013064:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c0013069:	83 ec 08             	sub    esp,0x8
c001306c:	68 1e 61 02 c0       	push   0xc002611e
c0013071:	50                   	push   eax
c0013072:	e8 e1 ee ff ff       	call   c0011f58 <findDataTable(unsigned char*, char*)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013081:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0013089:	74 19                	je     c00130a4 <ACPI::open(int, int, void*)+0x474>
c001308b:	83 ec 08             	sub    esp,0x8
c001308e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013095:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001309c:	e8 0b fb ff ff       	call   c0012bac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	b8 00 00 00 00       	mov    eax,0x0
c00130a9:	81 c4 70 01 00 00    	add    esp,0x170
c00130af:	5b                   	pop    ebx
c00130b0:	5e                   	pop    esi
c00130b1:	5f                   	pop    edi
c00130b2:	c3                   	ret    
c00130b3:	90                   	nop

c00130b4 <CPU::close(int, int, void*)>:
c00130b4:	31 c0                	xor    eax,eax
c00130b6:	c3                   	ret    
c00130b7:	90                   	nop

c00130b8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00130b8:	55                   	push   ebp
c00130b9:	57                   	push   edi
c00130ba:	56                   	push   esi
c00130bb:	53                   	push   ebx
c00130bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00130c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130c4:	89 ce                	mov    esi,ecx
c00130c6:	89 d5                	mov    ebp,edx
c00130c8:	80 f9 04             	cmp    cl,0x4
c00130cb:	75 28                	jne    c00130f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00130cd:	8d 42 f9             	lea    eax,[edx-0x7]
c00130d0:	3c 03                	cmp    al,0x3
c00130d2:	0f 86 63 01 00 00    	jbe    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130d8:	80 fa 03             	cmp    dl,0x3
c00130db:	0f 84 5a 01 00 00    	je     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130e1:	8d 7a f2             	lea    edi,[edx-0xe]
c00130e4:	b8 70 85 02 c0       	mov    eax,0xc0028570
c00130e9:	89 fb                	mov    ebx,edi
c00130eb:	80 fb 01             	cmp    bl,0x1
c00130ee:	77 4e                	ja     c001313e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00130f0:	e9 52 01 00 00       	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130f5:	80 f9 05             	cmp    cl,0x5
c00130f8:	75 4d                	jne    c0013147 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00130fa:	b8 80 85 02 c0       	mov    eax,0xc0028580
c00130ff:	80 fa 03             	cmp    dl,0x3
c0013102:	0f 86 3f 01 00 00    	jbe    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013108:	8d 7a fa             	lea    edi,[edx-0x6]
c001310b:	b8 90 85 02 c0       	mov    eax,0xc0028590
c0013110:	89 fb                	mov    ebx,edi
c0013112:	80 fb 01             	cmp    bl,0x1
c0013115:	0f 86 2c 01 00 00    	jbe    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001311b:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0013120:	80 fa 08             	cmp    dl,0x8
c0013123:	0f 84 1e 01 00 00    	je     c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013129:	89 d7                	mov    edi,edx
c001312b:	b8 b0 85 02 c0       	mov    eax,0xc00285b0
c0013130:	83 e7 fb             	and    edi,0xfffffffb
c0013133:	89 fb                	mov    ebx,edi
c0013135:	80 fb 09             	cmp    bl,0x9
c0013138:	0f 84 09 01 00 00    	je     c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001313e:	31 c0                	xor    eax,eax
c0013140:	89 eb                	mov    ebx,ebp
c0013142:	0f b6 fb             	movzx  edi,bl
c0013145:	eb 30                	jmp    c0013177 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0013147:	31 c0                	xor    eax,eax
c0013149:	80 f9 06             	cmp    cl,0x6
c001314c:	75 f2                	jne    c0013140 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001314e:	80 fa 0a             	cmp    dl,0xa
c0013151:	77 ed                	ja     c0013140 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013153:	bf de 05 00 00       	mov    edi,0x5de
c0013158:	0f a3 d7             	bt     edi,edx
c001315b:	73 e3                	jae    c0013140 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001315d:	b8 c0 85 02 c0       	mov    eax,0xc00285c0
c0013162:	e9 e0 00 00 00       	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013167:	39 c7                	cmp    edi,eax
c0013169:	0f 84 d3 00 00 00    	je     c0013242 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001316f:	40                   	inc    eax
c0013170:	3d d0 00 00 00       	cmp    eax,0xd0
c0013175:	74 09                	je     c0013180 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0013177:	89 f3                	mov    ebx,esi
c0013179:	80 fb 0f             	cmp    bl,0xf
c001317c:	75 f1                	jne    c001316f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001317e:	eb e7                	jmp    c0013167 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013180:	80 f9 10             	cmp    cl,0x10
c0013183:	75 14                	jne    c0013199 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013185:	8d 42 fc             	lea    eax,[edx-0x4]
c0013188:	83 e0 fb             	and    eax,0xfffffffb
c001318b:	3c 02                	cmp    al,0x2
c001318d:	76 34                	jbe    c00131c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001318f:	b8 59 64 02 c0       	mov    eax,0xc0026459
c0013194:	80 fa 02             	cmp    dl,0x2
c0013197:	eb 24                	jmp    c00131bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0013199:	80 f9 11             	cmp    cl,0x11
c001319c:	75 13                	jne    c00131b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001319e:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00131a3:	80 fa 03             	cmp    dl,0x3
c00131a6:	0f 85 9b 00 00 00    	jne    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ac:	e9 91 00 00 00       	jmp    c0013242 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00131b1:	80 f9 12             	cmp    cl,0x12
c00131b4:	75 14                	jne    c00131ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00131b6:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00131bb:	fe ca                	dec    dl
c00131bd:	0f 85 84 00 00 00    	jne    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131c3:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c00131c8:	eb 7d                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ca:	80 f9 14             	cmp    cl,0x14
c00131cd:	75 12                	jne    c00131e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00131cf:	4a                   	dec    edx
c00131d0:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00131d5:	80 fa 01             	cmp    dl,0x1
c00131d8:	77 6d                	ja     c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131da:	b8 f0 85 02 c0       	mov    eax,0xc00285f0
c00131df:	eb 66                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131e1:	80 f9 15             	cmp    cl,0x15
c00131e4:	75 31                	jne    c0013217 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00131e6:	b8 00 86 02 c0       	mov    eax,0xc0028600
c00131eb:	80 fa 01             	cmp    dl,0x1
c00131ee:	74 57                	je     c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131f0:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00131f5:	80 fa 13             	cmp    dl,0x13
c00131f8:	76 0c                	jbe    c0013206 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00131fa:	80 fa 30             	cmp    dl,0x30
c00131fd:	75 48                	jne    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ff:	b8 20 86 02 c0       	mov    eax,0xc0028620
c0013204:	eb 41                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013206:	b9 04 00 09 00       	mov    ecx,0x90004
c001320b:	0f a3 d1             	bt     ecx,edx
c001320e:	73 37                	jae    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013210:	b8 10 86 02 c0       	mov    eax,0xc0028610
c0013215:	eb 30                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013217:	b8 59 64 02 c0       	mov    eax,0xc0026459
c001321c:	80 f9 16             	cmp    cl,0x16
c001321f:	75 26                	jne    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013221:	b8 30 86 02 c0       	mov    eax,0xc0028630
c0013226:	84 d2                	test   dl,dl
c0013228:	74 1d                	je     c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001322a:	b8 59 64 02 c0       	mov    eax,0xc0026459
c001322f:	80 fa 30             	cmp    dl,0x30
c0013232:	75 13                	jne    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013234:	b8 40 86 02 c0       	mov    eax,0xc0028640
c0013239:	eb 0c                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001323b:	b8 60 85 02 c0       	mov    eax,0xc0028560
c0013240:	eb 05                	jmp    c0013247 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013242:	b8 d0 85 02 c0       	mov    eax,0xc00285d0
c0013247:	5b                   	pop    ebx
c0013248:	5e                   	pop    esi
c0013249:	5f                   	pop    edi
c001324a:	5d                   	pop    ebp
c001324b:	c3                   	ret    

c001324c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001324c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013254:	80 f9 04             	cmp    cl,0x4
c0013257:	75 6b                	jne    c00132c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013259:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c001325e:	80 fa 01             	cmp    dl,0x1
c0013261:	0f 86 92 02 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013267:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c001326c:	80 fa 02             	cmp    dl,0x2
c001326f:	0f 84 84 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013275:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c001327a:	80 fa 03             	cmp    dl,0x3
c001327d:	0f 84 76 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013283:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c0013288:	80 fa 04             	cmp    dl,0x4
c001328b:	0f 84 68 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013291:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0013296:	80 fa 05             	cmp    dl,0x5
c0013299:	0f 84 5a 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001329f:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00132a4:	80 fa 07             	cmp    dl,0x7
c00132a7:	0f 84 4c 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ad:	83 ea 08             	sub    edx,0x8
c00132b0:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00132b5:	80 fa 01             	cmp    dl,0x1
c00132b8:	0f 87 3b 02 00 00    	ja     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132be:	b8 10 84 02 c0       	mov    eax,0xc0028410
c00132c3:	c3                   	ret    
c00132c4:	80 f9 05             	cmp    cl,0x5
c00132c7:	75 45                	jne    c001330e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00132c9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00132cc:	b8 20 84 02 c0       	mov    eax,0xc0028420
c00132d1:	80 f9 02             	cmp    cl,0x2
c00132d4:	0f 86 1f 02 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132da:	80 fa 04             	cmp    dl,0x4
c00132dd:	0f 84 f3 01 00 00    	je     c00134d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00132e3:	80 fa 07             	cmp    dl,0x7
c00132e6:	0f 84 0d 02 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ec:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00132f1:	80 fa 08             	cmp    dl,0x8
c00132f4:	0f 84 ff 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132fa:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00132ff:	80 fa 09             	cmp    dl,0x9
c0013302:	0f 85 f1 01 00 00    	jne    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013308:	b8 40 84 02 c0       	mov    eax,0xc0028440
c001330d:	c3                   	ret    
c001330e:	80 f9 06             	cmp    cl,0x6
c0013311:	0f 85 85 01 00 00    	jne    c001349c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0013317:	b8 50 84 02 c0       	mov    eax,0xc0028450
c001331c:	80 fa 01             	cmp    dl,0x1
c001331f:	0f 84 d4 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013325:	8d 42 fb             	lea    eax,[edx-0x5]
c0013328:	3c 01                	cmp    al,0x1
c001332a:	0f 86 ac 01 00 00    	jbe    c00134dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013330:	80 fa 03             	cmp    dl,0x3
c0013333:	0f 84 a3 01 00 00    	je     c00134dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013339:	8d 4a f9             	lea    ecx,[edx-0x7]
c001333c:	b8 70 84 02 c0       	mov    eax,0xc0028470
c0013341:	80 f9 01             	cmp    cl,0x1
c0013344:	0f 86 af 01 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001334a:	80 fa 09             	cmp    dl,0x9
c001334d:	0f 84 8f 01 00 00    	je     c00134e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013353:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013356:	80 f9 01             	cmp    cl,0x1
c0013359:	0f 86 9a 01 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001335f:	b8 80 84 02 c0       	mov    eax,0xc0028480
c0013364:	80 fa 0d             	cmp    dl,0xd
c0013367:	0f 84 8c 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001336d:	b8 90 84 02 c0       	mov    eax,0xc0028490
c0013372:	80 fa 0e             	cmp    dl,0xe
c0013375:	0f 84 7e 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001337b:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013380:	80 fa 0f             	cmp    dl,0xf
c0013383:	0f 84 70 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013389:	b8 80 84 02 c0       	mov    eax,0xc0028480
c001338e:	80 fa 15             	cmp    dl,0x15
c0013391:	0f 84 62 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013397:	8d 4a ea             	lea    ecx,[edx-0x16]
c001339a:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c001339f:	80 f9 01             	cmp    cl,0x1
c00133a2:	0f 86 51 01 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133a8:	80 fa 1a             	cmp    dl,0x1a
c00133ab:	0f 84 37 01 00 00    	je     c00134e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00133b1:	80 fa 1c             	cmp    dl,0x1c
c00133b4:	0f 84 34 01 00 00    	je     c00134ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00133ba:	80 fa 1d             	cmp    dl,0x1d
c00133bd:	0f 84 36 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133c3:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00133c8:	80 fa 25             	cmp    dl,0x25
c00133cb:	0f 84 28 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133d1:	8d 4a da             	lea    ecx,[edx-0x26]
c00133d4:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c00133d9:	80 f9 01             	cmp    cl,0x1
c00133dc:	0f 86 17 01 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e2:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c00133e7:	80 fa 2a             	cmp    dl,0x2a
c00133ea:	0f 84 09 01 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133f0:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00133f5:	80 fa 2c             	cmp    dl,0x2c
c00133f8:	0f 84 fb 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133fe:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c0013403:	80 fa 2d             	cmp    dl,0x2d
c0013406:	0f 84 ed 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340c:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c0013411:	80 fa 2e             	cmp    dl,0x2e
c0013414:	0f 84 df 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341a:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c001341f:	80 fa 2f             	cmp    dl,0x2f
c0013422:	0f 84 d1 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013428:	8d 4a cb             	lea    ecx,[edx-0x35]
c001342b:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0013430:	80 f9 01             	cmp    cl,0x1
c0013433:	0f 86 c0 00 00 00    	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013439:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c001343e:	80 fa 37             	cmp    dl,0x37
c0013441:	0f 84 b2 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013447:	b8 00 85 02 c0       	mov    eax,0xc0028500
c001344c:	80 fa 3a             	cmp    dl,0x3a
c001344f:	0f 84 a4 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013455:	b8 10 85 02 c0       	mov    eax,0xc0028510
c001345a:	80 fa 3c             	cmp    dl,0x3c
c001345d:	0f 84 96 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013463:	b8 20 85 02 c0       	mov    eax,0xc0028520
c0013468:	80 fa 3d             	cmp    dl,0x3d
c001346b:	0f 84 88 00 00 00    	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013471:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0013476:	80 fa 3e             	cmp    dl,0x3e
c0013479:	74 7e                	je     c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001347b:	8d 42 bb             	lea    eax,[edx-0x45]
c001347e:	3c 01                	cmp    al,0x1
c0013480:	76 72                	jbe    c00134f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013482:	80 fa 3f             	cmp    dl,0x3f
c0013485:	74 6d                	je     c00134f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013487:	80 fa 4a             	cmp    dl,0x4a
c001348a:	74 0a                	je     c0013496 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001348c:	b8 59 64 02 c0       	mov    eax,0xc0026459
c0013491:	80 fa 4d             	cmp    dl,0x4d
c0013494:	75 63                	jne    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013496:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c001349b:	c3                   	ret    
c001349c:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00134a1:	80 f9 0b             	cmp    cl,0xb
c00134a4:	75 0a                	jne    c00134b0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00134a6:	fe ca                	dec    dl
c00134a8:	75 4f                	jne    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134aa:	b8 30 85 02 c0       	mov    eax,0xc0028530
c00134af:	c3                   	ret    
c00134b0:	80 f9 0f             	cmp    cl,0xf
c00134b3:	75 44                	jne    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b5:	b8 40 85 02 c0       	mov    eax,0xc0028540
c00134ba:	80 fa 02             	cmp    dl,0x2
c00134bd:	76 3a                	jbe    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134bf:	8d 42 fd             	lea    eax,[edx-0x3]
c00134c2:	3c 01                	cmp    al,0x1
c00134c4:	76 0a                	jbe    c00134d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00134c6:	b8 59 64 02 c0       	mov    eax,0xc0026459
c00134cb:	80 fa 06             	cmp    dl,0x6
c00134ce:	75 29                	jne    c00134f9 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d0:	b8 50 85 02 c0       	mov    eax,0xc0028550
c00134d5:	c3                   	ret    
c00134d6:	b8 30 84 02 c0       	mov    eax,0xc0028430
c00134db:	c3                   	ret    
c00134dc:	b8 60 84 02 c0       	mov    eax,0xc0028460
c00134e1:	c3                   	ret    
c00134e2:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00134e7:	c3                   	ret    
c00134e8:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00134ed:	c3                   	ret    
c00134ee:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c00134f3:	c3                   	ret    
c00134f4:	b8 10 85 02 c0       	mov    eax,0xc0028510
c00134f9:	c3                   	ret    

c00134fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00134fa:	60                   	pusha  
c00134fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00134ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013503:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013507:	9c                   	pushf  
c0013508:	fa                   	cli    
c0013509:	0f 09                	wbinvd 
c001350b:	0f 30                	wrmsr  
c001350d:	9d                   	popf   
c001350e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013512:	89 02                	mov    DWORD PTR [edx],eax
c0013514:	61                   	popa   
c0013515:	c3                   	ret    

c0013516 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013516:	60                   	pusha  
c0013517:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001351b:	9c                   	pushf  
c001351c:	fa                   	cli    
c001351d:	0f 09                	wbinvd 
c001351f:	31 c0                	xor    eax,eax
c0013521:	31 d2                	xor    edx,edx
c0013523:	0f 32                	rdmsr  
c0013525:	9d                   	popf   
c0013526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001352a:	89 02                	mov    DWORD PTR [edx],eax
c001352c:	61                   	popa   
c001352d:	c3                   	ret    

c001352e <CPU::AMD_K6_writeback(int, int, int)>:
c001352e:	56                   	push   esi
c001352f:	53                   	push   ebx
c0013530:	83 ec 10             	sub    esp,0x10
c0013533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013537:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001353c:	75 5d                	jne    c001359b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001353e:	83 f8 08             	cmp    eax,0x8
c0013541:	75 09                	jne    c001354c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013543:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013548:	7e 13                	jle    c001355d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001354a:	eb 30                	jmp    c001357c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001354c:	83 f8 06             	cmp    eax,0x6
c001354f:	7c 4a                	jl     c001359b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013551:	83 f8 07             	cmp    eax,0x7
c0013554:	7e 07                	jle    c001355d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013556:	83 f8 09             	cmp    eax,0x9
c0013559:	74 21                	je     c001357c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001355b:	eb 3e                	jmp    c001359b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001355d:	89 e6                	mov    esi,esp
c001355f:	8b 1d cc 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ccc
c0013565:	56                   	push   esi
c0013566:	c1 eb 15             	shr    ebx,0x15
c0013569:	68 82 00 00 c0       	push   0xc0000082
c001356e:	83 e3 7e             	and    ebx,0x7e
c0013571:	e8 a0 ff ff ff       	call   c0013516 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013576:	56                   	push   esi
c0013577:	6a 00                	push   0x0
c0013579:	53                   	push   ebx
c001357a:	eb 12                	jmp    c001358e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001357c:	89 e3                	mov    ebx,esp
c001357e:	53                   	push   ebx
c001357f:	68 82 00 00 c0       	push   0xc0000082
c0013584:	e8 8d ff ff ff       	call   c0013516 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013589:	53                   	push   ebx
c001358a:	6a 00                	push   0x0
c001358c:	6a 00                	push   0x0
c001358e:	68 82 00 00 c0       	push   0xc0000082
c0013593:	e8 62 ff ff ff       	call   c00134fa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013598:	83 c4 18             	add    esp,0x18
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	5b                   	pop    ebx
c001359f:	5e                   	pop    esi
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00135a2:	55                   	push   ebp
c00135a3:	57                   	push   edi
c00135a4:	56                   	push   esi
c00135a5:	53                   	push   ebx
c00135a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135b2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00135b6:	39 05 60 86 02 c0    	cmp    DWORD PTR ds:0xc0028660,eax
c00135bc:	75 23                	jne    c00135e1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00135be:	a1 6c 97 02 c0       	mov    eax,ds:0xc002976c
c00135c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135c7:	89 06                	mov    DWORD PTR [esi],eax
c00135c9:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00135ce:	89 07                	mov    DWORD PTR [edi],eax
c00135d0:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c00135d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00135d8:	a1 60 97 02 c0       	mov    eax,ds:0xc0029760
c00135dd:	89 02                	mov    DWORD PTR [edx],eax
c00135df:	eb 3f                	jmp    c0013620 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00135e1:	31 c9                	xor    ecx,ecx
c00135e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135e7:	0f a2                	cpuid  
c00135e9:	89 06                	mov    DWORD PTR [esi],eax
c00135eb:	89 1f                	mov    DWORD PTR [edi],ebx
c00135ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135f1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00135f4:	89 10                	mov    DWORD PTR [eax],edx
c00135f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135fa:	a3 60 86 02 c0       	mov    ds:0xc0028660,eax
c00135ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0013601:	a3 6c 97 02 c0       	mov    ds:0xc002976c,eax
c0013606:	8b 07                	mov    eax,DWORD PTR [edi]
c0013608:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c001360d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013610:	a3 64 97 02 c0       	mov    ds:0xc0029764,eax
c0013615:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013619:	8b 00                	mov    eax,DWORD PTR [eax]
c001361b:	a3 60 97 02 c0       	mov    ds:0xc0029760,eax
c0013620:	5b                   	pop    ebx
c0013621:	5e                   	pop    esi
c0013622:	5f                   	pop    edi
c0013623:	5d                   	pop    ebp
c0013624:	c3                   	ret    
c0013625:	90                   	nop

c0013626 <CPU::cpuidCheckEDX(unsigned int)>:
c0013626:	83 ec 10             	sub    esp,0x10
c0013629:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001362d:	50                   	push   eax
c001362e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013632:	50                   	push   eax
c0013633:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013637:	50                   	push   eax
c0013638:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001363c:	50                   	push   eax
c001363d:	6a 01                	push   0x1
c001363f:	e8 5e ff ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013644:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013648:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001364c:	0f 95 c0             	setne  al
c001364f:	83 c4 24             	add    esp,0x24
c0013652:	c3                   	ret    
c0013653:	90                   	nop

c0013654 <CPU::cpuidCheckECX(unsigned int)>:
c0013654:	83 ec 10             	sub    esp,0x10
c0013657:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001365b:	50                   	push   eax
c001365c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013660:	50                   	push   eax
c0013661:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013665:	50                   	push   eax
c0013666:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001366a:	50                   	push   eax
c001366b:	6a 01                	push   0x1
c001366d:	e8 30 ff ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013676:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001367a:	0f 95 c0             	setne  al
c001367d:	83 c4 24             	add    esp,0x24
c0013680:	c3                   	ret    
c0013681:	90                   	nop

c0013682 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013682:	83 ec 10             	sub    esp,0x10
c0013685:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013689:	50                   	push   eax
c001368a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001368e:	50                   	push   eax
c001368f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013693:	50                   	push   eax
c0013694:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013698:	50                   	push   eax
c0013699:	6a 07                	push   0x7
c001369b:	e8 02 ff ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136a4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00136a8:	0f 95 c0             	setne  al
c00136ab:	83 c4 24             	add    esp,0x24
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00136b0:	83 ec 10             	sub    esp,0x10
c00136b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136b7:	50                   	push   eax
c00136b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136bc:	50                   	push   eax
c00136bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136c1:	50                   	push   eax
c00136c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136c6:	50                   	push   eax
c00136c7:	6a 07                	push   0x7
c00136c9:	e8 d4 fe ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00136d6:	0f 95 c0             	setne  al
c00136d9:	83 c4 24             	add    esp,0x24
c00136dc:	c3                   	ret    
c00136dd:	90                   	nop

c00136de <CPU::CPU()>:
c00136de:	83 ec 0c             	sub    esp,0xc
c00136e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e5:	83 ec 08             	sub    esp,0x8
c00136e8:	68 59 64 02 c0       	push   0xc0026459
c00136ed:	50                   	push   eax
c00136ee:	e8 c3 b0 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00136f3:	83 c4 10             	add    esp,0x10
c00136f6:	ba bc 66 02 c0       	mov    edx,0xc00266bc
c00136fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ff:	89 10                	mov    DWORD PTR [eax],edx
c0013701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013705:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001370f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013713:	05 78 01 00 00       	add    eax,0x178
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	50                   	push   eax
c001371c:	e8 c7 5e ff ff       	call   c00095e8 <GDT::GDT()>
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013728:	05 7c 09 00 00       	add    eax,0x97c
c001372d:	83 ec 0c             	sub    esp,0xc
c0013730:	50                   	push   eax
c0013731:	e8 0a 61 ff ff       	call   c0009840 <IDT::IDT()>
c0013736:	83 c4 10             	add    esp,0x10
c0013739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001373d:	05 7c 11 00 00       	add    eax,0x117c
c0013742:	83 ec 0c             	sub    esp,0xc
c0013745:	50                   	push   eax
c0013746:	e8 11 7f ff ff       	call   c000b65c <TSS::TSS()>
c001374b:	83 c4 10             	add    esp,0x10
c001374e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013752:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013767:	90                   	nop
c0013768:	83 c4 0c             	add    esp,0xc
c001376b:	c3                   	ret    

c001376c <CPU::displayFeatures()>:
c001376c:	53                   	push   ebx
c001376d:	83 ec 10             	sub    esp,0x10
c0013770:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013774:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001377a:	68 50 61 02 c0       	push   0xc0026150
c001377f:	e8 bb 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013784:	58                   	pop    eax
c0013785:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001378b:	5a                   	pop    edx
c001378c:	50                   	push   eax
c001378d:	68 61 61 02 c0       	push   0xc0026161
c0013792:	e8 a8 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013797:	59                   	pop    ecx
c0013798:	58                   	pop    eax
c0013799:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001379f:	c1 e8 0e             	shr    eax,0xe
c00137a2:	0f b6 c0             	movzx  eax,al
c00137a5:	50                   	push   eax
c00137a6:	68 72 61 02 c0       	push   0xc0026172
c00137ab:	e8 8f 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137b0:	58                   	pop    eax
c00137b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137b7:	5a                   	pop    edx
c00137b8:	66 c1 e8 06          	shr    ax,0x6
c00137bc:	0f b6 c0             	movzx  eax,al
c00137bf:	50                   	push   eax
c00137c0:	68 83 61 02 c0       	push   0xc0026183
c00137c5:	e8 75 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137ca:	c7 04 24 83 67 02 c0 	mov    DWORD PTR [esp],0xc0026783
c00137d1:	e8 69 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00137de:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00137e5:	74 05                	je     c00137ec <CPU::displayFeatures()+0x80>
c00137e7:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00137ec:	51                   	push   ecx
c00137ed:	51                   	push   ecx
c00137ee:	50                   	push   eax
c00137ef:	68 94 61 02 c0       	push   0xc0026194
c00137f4:	e8 46 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0013801:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013808:	78 05                	js     c001380f <CPU::displayFeatures()+0xa3>
c001380a:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c001380f:	52                   	push   edx
c0013810:	52                   	push   edx
c0013811:	50                   	push   eax
c0013812:	68 ab 61 02 c0       	push   0xc00261ab
c0013817:	e8 23 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0013824:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001382b:	75 05                	jne    c0013832 <CPU::displayFeatures()+0xc6>
c001382d:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013832:	51                   	push   ecx
c0013833:	51                   	push   ecx
c0013834:	50                   	push   eax
c0013835:	68 c2 61 02 c0       	push   0xc00261c2
c001383a:	e8 00 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001383f:	83 c4 10             	add    esp,0x10
c0013842:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0013847:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001384e:	75 05                	jne    c0013855 <CPU::displayFeatures()+0xe9>
c0013850:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013855:	52                   	push   edx
c0013856:	52                   	push   edx
c0013857:	50                   	push   eax
c0013858:	68 d9 61 02 c0       	push   0xc00261d9
c001385d:	e8 dd 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c001386a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013871:	75 05                	jne    c0013878 <CPU::displayFeatures()+0x10c>
c0013873:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013878:	51                   	push   ecx
c0013879:	51                   	push   ecx
c001387a:	50                   	push   eax
c001387b:	68 f0 61 02 c0       	push   0xc00261f0
c0013880:	e8 ba 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013885:	83 c4 10             	add    esp,0x10
c0013888:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c001388d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013894:	75 05                	jne    c001389b <CPU::displayFeatures()+0x12f>
c0013896:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c001389b:	52                   	push   edx
c001389c:	52                   	push   edx
c001389d:	50                   	push   eax
c001389e:	68 07 62 02 c0       	push   0xc0026207
c00138a3:	e8 97 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00138b0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00138b7:	75 05                	jne    c00138be <CPU::displayFeatures()+0x152>
c00138b9:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00138be:	51                   	push   ecx
c00138bf:	51                   	push   ecx
c00138c0:	50                   	push   eax
c00138c1:	68 1e 62 02 c0       	push   0xc002621e
c00138c6:	e8 74 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00138cb:	83 c4 10             	add    esp,0x10
c00138ce:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00138d3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00138da:	75 05                	jne    c00138e1 <CPU::displayFeatures()+0x175>
c00138dc:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00138e1:	52                   	push   edx
c00138e2:	52                   	push   edx
c00138e3:	50                   	push   eax
c00138e4:	68 35 62 02 c0       	push   0xc0026235
c00138e9:	e8 51 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00138f6:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00138fd:	75 05                	jne    c0013904 <CPU::displayFeatures()+0x198>
c00138ff:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013904:	51                   	push   ecx
c0013905:	51                   	push   ecx
c0013906:	50                   	push   eax
c0013907:	68 4c 62 02 c0       	push   0xc002624c
c001390c:	e8 2e 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013911:	83 c4 10             	add    esp,0x10
c0013914:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0013919:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013920:	75 05                	jne    c0013927 <CPU::displayFeatures()+0x1bb>
c0013922:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013927:	52                   	push   edx
c0013928:	52                   	push   edx
c0013929:	50                   	push   eax
c001392a:	68 63 62 02 c0       	push   0xc0026263
c001392f:	e8 0b 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c001393c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013943:	75 05                	jne    c001394a <CPU::displayFeatures()+0x1de>
c0013945:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c001394a:	51                   	push   ecx
c001394b:	51                   	push   ecx
c001394c:	50                   	push   eax
c001394d:	68 7a 62 02 c0       	push   0xc002627a
c0013952:	e8 e8 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c001395f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013966:	75 05                	jne    c001396d <CPU::displayFeatures()+0x201>
c0013968:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c001396d:	52                   	push   edx
c001396e:	52                   	push   edx
c001396f:	50                   	push   eax
c0013970:	68 91 62 02 c0       	push   0xc0026291
c0013975:	e8 c5 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001397a:	83 c4 10             	add    esp,0x10
c001397d:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c0013982:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013989:	75 05                	jne    c0013990 <CPU::displayFeatures()+0x224>
c001398b:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c0013990:	51                   	push   ecx
c0013991:	51                   	push   ecx
c0013992:	50                   	push   eax
c0013993:	68 a8 62 02 c0       	push   0xc00262a8
c0013998:	e8 a2 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00139a5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00139ac:	78 05                	js     c00139b3 <CPU::displayFeatures()+0x247>
c00139ae:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00139b3:	52                   	push   edx
c00139b4:	52                   	push   edx
c00139b5:	50                   	push   eax
c00139b6:	68 bf 62 02 c0       	push   0xc00262bf
c00139bb:	e8 7f 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00139c8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00139cf:	75 05                	jne    c00139d6 <CPU::displayFeatures()+0x26a>
c00139d1:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00139d6:	51                   	push   ecx
c00139d7:	51                   	push   ecx
c00139d8:	50                   	push   eax
c00139d9:	68 d6 62 02 c0       	push   0xc00262d6
c00139de:	e8 5c 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00139e3:	83 c4 10             	add    esp,0x10
c00139e6:	b8 a1 46 02 c0       	mov    eax,0xc00246a1
c00139eb:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00139f2:	75 05                	jne    c00139f9 <CPU::displayFeatures()+0x28d>
c00139f4:	b8 a5 46 02 c0       	mov    eax,0xc00246a5
c00139f9:	52                   	push   edx
c00139fa:	52                   	push   edx
c00139fb:	50                   	push   eax
c00139fc:	68 ed 62 02 c0       	push   0xc00262ed
c0013a01:	e8 39 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013a06:	83 c4 18             	add    esp,0x18
c0013a09:	5b                   	pop    ebx
c0013a0a:	c3                   	ret    
c0013a0b:	90                   	nop

c0013a0c <CPU::detectFeatures()>:
c0013a0c:	55                   	push   ebp
c0013a0d:	57                   	push   edi
c0013a0e:	56                   	push   esi
c0013a0f:	53                   	push   ebx
c0013a10:	83 ec 50             	sub    esp,0x50
c0013a13:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013a17:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013a21:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013a28:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013a2e:	6a 0d                	push   0xd
c0013a30:	6a 00                	push   0x0
c0013a32:	55                   	push   ebp
c0013a33:	e8 44 cc fe ff       	call   c000067c <memset>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0013a40:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013a47:	0f 84 22 09 00 00    	je     c001436f <CPU::detectFeatures()+0x963>
c0013a4d:	83 ec 0c             	sub    esp,0xc
c0013a50:	89 ef                	mov    edi,ebp
c0013a52:	6a 10                	push   0x10
c0013a54:	e8 cd fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013a59:	83 e0 01             	and    eax,0x1
c0013a5c:	8d 14 00             	lea    edx,[eax+eax*1]
c0013a5f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a65:	83 e0 fd             	and    eax,0xfffffffd
c0013a68:	09 d0                	or     eax,edx
c0013a6a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a70:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013a77:	e8 aa fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013a7c:	83 e0 01             	and    eax,0x1
c0013a7f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013a86:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a8c:	83 e0 fb             	and    eax,0xfffffffb
c0013a8f:	09 d0                	or     eax,edx
c0013a91:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a97:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013a9e:	e8 83 fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013aa3:	83 e0 01             	and    eax,0x1
c0013aa6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013aad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ab3:	83 e0 f7             	and    eax,0xfffffff7
c0013ab6:	09 d0                	or     eax,edx
c0013ab8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013abe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013ac5:	e8 5c fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013aca:	83 e0 01             	and    eax,0x1
c0013acd:	c1 e0 04             	shl    eax,0x4
c0013ad0:	88 c2                	mov    dl,al
c0013ad2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013ad8:	83 e0 ef             	and    eax,0xffffffef
c0013adb:	09 d0                	or     eax,edx
c0013add:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ae3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013aea:	e8 37 fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013aef:	83 e0 01             	and    eax,0x1
c0013af2:	c1 e0 05             	shl    eax,0x5
c0013af5:	88 c2                	mov    dl,al
c0013af7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013afd:	83 e0 df             	and    eax,0xffffffdf
c0013b00:	09 d0                	or     eax,edx
c0013b02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013b08:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013b0f:	e8 12 fb ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013b14:	83 e0 01             	and    eax,0x1
c0013b17:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b1a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013b20:	83 e0 fd             	and    eax,0xfffffffd
c0013b23:	09 d0                	or     eax,edx
c0013b25:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013b2b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013b32:	e8 ef fa ff ff       	call   c0013626 <CPU::cpuidCheckEDX(unsigned int)>
c0013b37:	83 e0 01             	and    eax,0x1
c0013b3a:	c1 e0 06             	shl    eax,0x6
c0013b3d:	88 c2                	mov    dl,al
c0013b3f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b45:	83 e0 bf             	and    eax,0xffffffbf
c0013b48:	09 d0                	or     eax,edx
c0013b4a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b50:	58                   	pop    eax
c0013b51:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b55:	50                   	push   eax
c0013b56:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b5a:	50                   	push   eax
c0013b5b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013b5f:	56                   	push   esi
c0013b60:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b64:	50                   	push   eax
c0013b65:	6a 00                	push   0x0
c0013b67:	e8 36 fa ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013b6c:	b8 04 00 00 00       	mov    eax,0x4
c0013b71:	89 c1                	mov    ecx,eax
c0013b73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b75:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013b7b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013b7f:	89 c1                	mov    ecx,eax
c0013b81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b83:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013b89:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013b8d:	89 c1                	mov    ecx,eax
c0013b8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b91:	83 c4 18             	add    esp,0x18
c0013b94:	68 04 63 02 c0       	push   0xc0026304
c0013b99:	55                   	push   ebp
c0013b9a:	e8 25 cc fe ff       	call   c00007c4 <strcmp>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	85 c0                	test   eax,eax
c0013ba4:	75 0f                	jne    c0013bb5 <CPU::detectFeatures()+0x1a9>
c0013ba6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013bb0:	e9 22 02 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013bb5:	50                   	push   eax
c0013bb6:	50                   	push   eax
c0013bb7:	68 11 63 02 c0       	push   0xc0026311
c0013bbc:	55                   	push   ebp
c0013bbd:	e8 02 cc fe ff       	call   c00007c4 <strcmp>
c0013bc2:	83 c4 10             	add    esp,0x10
c0013bc5:	85 c0                	test   eax,eax
c0013bc7:	74 dd                	je     c0013ba6 <CPU::detectFeatures()+0x19a>
c0013bc9:	50                   	push   eax
c0013bca:	50                   	push   eax
c0013bcb:	68 1e 63 02 c0       	push   0xc002631e
c0013bd0:	55                   	push   ebp
c0013bd1:	e8 ee cb fe ff       	call   c00007c4 <strcmp>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	85 c0                	test   eax,eax
c0013bdb:	74 2a                	je     c0013c07 <CPU::detectFeatures()+0x1fb>
c0013bdd:	50                   	push   eax
c0013bde:	50                   	push   eax
c0013bdf:	68 2b 63 02 c0       	push   0xc002632b
c0013be4:	55                   	push   ebp
c0013be5:	e8 da cb fe ff       	call   c00007c4 <strcmp>
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	85 c0                	test   eax,eax
c0013bef:	74 16                	je     c0013c07 <CPU::detectFeatures()+0x1fb>
c0013bf1:	50                   	push   eax
c0013bf2:	50                   	push   eax
c0013bf3:	68 38 63 02 c0       	push   0xc0026338
c0013bf8:	55                   	push   ebp
c0013bf9:	e8 c6 cb fe ff       	call   c00007c4 <strcmp>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	85 c0                	test   eax,eax
c0013c03:	74 48                	je     c0013c4d <CPU::detectFeatures()+0x241>
c0013c05:	eb 0f                	jmp    c0013c16 <CPU::detectFeatures()+0x20a>
c0013c07:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013c11:	e9 c1 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013c16:	50                   	push   eax
c0013c17:	50                   	push   eax
c0013c18:	68 45 63 02 c0       	push   0xc0026345
c0013c1d:	55                   	push   ebp
c0013c1e:	e8 a1 cb fe ff       	call   c00007c4 <strcmp>
c0013c23:	83 c4 10             	add    esp,0x10
c0013c26:	85 c0                	test   eax,eax
c0013c28:	74 23                	je     c0013c4d <CPU::detectFeatures()+0x241>
c0013c2a:	57                   	push   edi
c0013c2b:	57                   	push   edi
c0013c2c:	68 52 63 02 c0       	push   0xc0026352
c0013c31:	55                   	push   ebp
c0013c32:	e8 8d cb fe ff       	call   c00007c4 <strcmp>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	85 c0                	test   eax,eax
c0013c3c:	75 1e                	jne    c0013c5c <CPU::detectFeatures()+0x250>
c0013c3e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c48:	e9 8a 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013c4d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013c57:	e9 7b 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013c5c:	56                   	push   esi
c0013c5d:	56                   	push   esi
c0013c5e:	68 5f 63 02 c0       	push   0xc002635f
c0013c63:	55                   	push   ebp
c0013c64:	e8 5b cb fe ff       	call   c00007c4 <strcmp>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	85 c0                	test   eax,eax
c0013c6e:	75 0f                	jne    c0013c7f <CPU::detectFeatures()+0x273>
c0013c70:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013c7a:	e9 58 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013c7f:	51                   	push   ecx
c0013c80:	51                   	push   ecx
c0013c81:	68 1e 63 02 c0       	push   0xc002631e
c0013c86:	55                   	push   ebp
c0013c87:	e8 38 cb fe ff       	call   c00007c4 <strcmp>
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	85 c0                	test   eax,eax
c0013c91:	75 0f                	jne    c0013ca2 <CPU::detectFeatures()+0x296>
c0013c93:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013c9d:	e9 35 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013ca2:	52                   	push   edx
c0013ca3:	52                   	push   edx
c0013ca4:	68 6c 63 02 c0       	push   0xc002636c
c0013ca9:	55                   	push   ebp
c0013caa:	e8 15 cb fe ff       	call   c00007c4 <strcmp>
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	85 c0                	test   eax,eax
c0013cb4:	75 0f                	jne    c0013cc5 <CPU::detectFeatures()+0x2b9>
c0013cb6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013cc0:	e9 12 01 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013cc5:	50                   	push   eax
c0013cc6:	50                   	push   eax
c0013cc7:	68 79 63 02 c0       	push   0xc0026379
c0013ccc:	55                   	push   ebp
c0013ccd:	e8 f2 ca fe ff       	call   c00007c4 <strcmp>
c0013cd2:	83 c4 10             	add    esp,0x10
c0013cd5:	85 c0                	test   eax,eax
c0013cd7:	75 0f                	jne    c0013ce8 <CPU::detectFeatures()+0x2dc>
c0013cd9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013ce3:	e9 ef 00 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013ce8:	50                   	push   eax
c0013ce9:	50                   	push   eax
c0013cea:	68 86 63 02 c0       	push   0xc0026386
c0013cef:	55                   	push   ebp
c0013cf0:	e8 cf ca fe ff       	call   c00007c4 <strcmp>
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	85 c0                	test   eax,eax
c0013cfa:	75 0f                	jne    c0013d0b <CPU::detectFeatures()+0x2ff>
c0013cfc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013d06:	e9 cc 00 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013d0b:	50                   	push   eax
c0013d0c:	50                   	push   eax
c0013d0d:	68 93 63 02 c0       	push   0xc0026393
c0013d12:	55                   	push   ebp
c0013d13:	e8 ac ca fe ff       	call   c00007c4 <strcmp>
c0013d18:	83 c4 10             	add    esp,0x10
c0013d1b:	85 c0                	test   eax,eax
c0013d1d:	75 0f                	jne    c0013d2e <CPU::detectFeatures()+0x322>
c0013d1f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013d29:	e9 a9 00 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013d2e:	50                   	push   eax
c0013d2f:	50                   	push   eax
c0013d30:	68 a0 63 02 c0       	push   0xc00263a0
c0013d35:	55                   	push   ebp
c0013d36:	e8 89 ca fe ff       	call   c00007c4 <strcmp>
c0013d3b:	83 c4 10             	add    esp,0x10
c0013d3e:	85 c0                	test   eax,eax
c0013d40:	75 0f                	jne    c0013d51 <CPU::detectFeatures()+0x345>
c0013d42:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013d4c:	e9 86 00 00 00       	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013d51:	50                   	push   eax
c0013d52:	50                   	push   eax
c0013d53:	68 ad 63 02 c0       	push   0xc00263ad
c0013d58:	55                   	push   ebp
c0013d59:	e8 66 ca fe ff       	call   c00007c4 <strcmp>
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	85 c0                	test   eax,eax
c0013d63:	75 0c                	jne    c0013d71 <CPU::detectFeatures()+0x365>
c0013d65:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013d6f:	eb 66                	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013d71:	50                   	push   eax
c0013d72:	50                   	push   eax
c0013d73:	68 ba 63 02 c0       	push   0xc00263ba
c0013d78:	55                   	push   ebp
c0013d79:	e8 46 ca fe ff       	call   c00007c4 <strcmp>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	85 c0                	test   eax,eax
c0013d83:	75 0c                	jne    c0013d91 <CPU::detectFeatures()+0x385>
c0013d85:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013d8f:	eb 46                	jmp    c0013dd7 <CPU::detectFeatures()+0x3cb>
c0013d91:	57                   	push   edi
c0013d92:	57                   	push   edi
c0013d93:	68 c7 63 02 c0       	push   0xc00263c7
c0013d98:	55                   	push   ebp
c0013d99:	e8 26 ca fe ff       	call   c00007c4 <strcmp>
c0013d9e:	83 c4 10             	add    esp,0x10
c0013da1:	85 c0                	test   eax,eax
c0013da3:	74 e0                	je     c0013d85 <CPU::detectFeatures()+0x379>
c0013da5:	56                   	push   esi
c0013da6:	56                   	push   esi
c0013da7:	68 d4 63 02 c0       	push   0xc00263d4
c0013dac:	55                   	push   ebp
c0013dad:	e8 12 ca fe ff       	call   c00007c4 <strcmp>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	85 c0                	test   eax,eax
c0013db7:	74 cc                	je     c0013d85 <CPU::detectFeatures()+0x379>
c0013db9:	51                   	push   ecx
c0013dba:	51                   	push   ecx
c0013dbb:	68 e1 63 02 c0       	push   0xc00263e1
c0013dc0:	55                   	push   ebp
c0013dc1:	e8 fe c9 fe ff       	call   c00007c4 <strcmp>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	85 c0                	test   eax,eax
c0013dcb:	74 b8                	je     c0013d85 <CPU::detectFeatures()+0x379>
c0013dcd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013dd7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013ddc:	0f 86 be 00 00 00    	jbe    c0013ea0 <CPU::detectFeatures()+0x494>
c0013de2:	83 ec 0c             	sub    esp,0xc
c0013de5:	68 80 00 00 00       	push   0x80
c0013dea:	e8 93 f8 ff ff       	call   c0013682 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013def:	83 e0 01             	and    eax,0x1
c0013df2:	c1 e0 06             	shl    eax,0x6
c0013df5:	88 c2                	mov    dl,al
c0013df7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013dfd:	83 e0 bf             	and    eax,0xffffffbf
c0013e00:	09 d0                	or     eax,edx
c0013e02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e08:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013e0f:	e8 6e f8 ff ff       	call   c0013682 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e14:	83 e0 01             	and    eax,0x1
c0013e17:	c1 e0 04             	shl    eax,0x4
c0013e1a:	88 c2                	mov    dl,al
c0013e1c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e22:	83 e0 ef             	and    eax,0xffffffef
c0013e25:	09 d0                	or     eax,edx
c0013e27:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e2d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013e34:	e8 49 f8 ff ff       	call   c0013682 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e39:	c1 e0 07             	shl    eax,0x7
c0013e3c:	88 c2                	mov    dl,al
c0013e3e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e44:	83 e0 7f             	and    eax,0x7f
c0013e47:	09 d0                	or     eax,edx
c0013e49:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e4f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013e56:	e8 55 f8 ff ff       	call   c00136b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e5b:	83 e0 01             	and    eax,0x1
c0013e5e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013e65:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e6b:	83 e0 f7             	and    eax,0xfffffff7
c0013e6e:	09 d0                	or     eax,edx
c0013e70:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e76:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013e7d:	e8 2e f8 ff ff       	call   c00136b0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e82:	83 c4 10             	add    esp,0x10
c0013e85:	83 e0 01             	and    eax,0x1
c0013e88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013e8f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e95:	83 e0 fb             	and    eax,0xfffffffb
c0013e98:	09 d0                	or     eax,edx
c0013e9a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ea7:	50                   	push   eax
c0013ea8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013eac:	50                   	push   eax
c0013ead:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013eb1:	56                   	push   esi
c0013eb2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013eb6:	50                   	push   eax
c0013eb7:	6a 01                	push   0x1
c0013eb9:	e8 e4 f6 ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ebe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013ec2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013ec8:	88 ca                	mov    dl,cl
c0013eca:	83 e0 f0             	and    eax,0xfffffff0
c0013ecd:	83 e2 0f             	and    edx,0xf
c0013ed0:	09 d0                	or     eax,edx
c0013ed2:	88 ca                	mov    dl,cl
c0013ed4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013eda:	c0 ea 04             	shr    dl,0x4
c0013edd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013ee1:	0f b6 c2             	movzx  eax,dl
c0013ee4:	83 c4 20             	add    esp,0x20
c0013ee7:	c1 e0 06             	shl    eax,0x6
c0013eea:	89 c7                	mov    edi,eax
c0013eec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ef2:	66 25 3f c0          	and    ax,0xc03f
c0013ef6:	09 f8                	or     eax,edi
c0013ef8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013eff:	89 c8                	mov    eax,ecx
c0013f01:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013f08:	c1 e8 08             	shr    eax,0x8
c0013f0b:	83 e5 3f             	and    ebp,0x3f
c0013f0e:	83 e0 0f             	and    eax,0xf
c0013f11:	89 c7                	mov    edi,eax
c0013f13:	c1 e7 06             	shl    edi,0x6
c0013f16:	09 ef                	or     edi,ebp
c0013f18:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013f1f:	89 fa                	mov    edx,edi
c0013f21:	83 e5 c0             	and    ebp,0xffffffc0
c0013f24:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013f2a:	88 c2                	mov    dl,al
c0013f2c:	c0 ea 02             	shr    dl,0x2
c0013f2f:	89 d7                	mov    edi,edx
c0013f31:	09 ef                	or     edi,ebp
c0013f33:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013f39:	89 fa                	mov    edx,edi
c0013f3b:	83 e5 cf             	and    ebp,0xffffffcf
c0013f3e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013f44:	89 cf                	mov    edi,ecx
c0013f46:	c1 ef 0c             	shr    edi,0xc
c0013f49:	83 e7 03             	and    edi,0x3
c0013f4c:	c1 e7 04             	shl    edi,0x4
c0013f4f:	09 ef                	or     edi,ebp
c0013f51:	3c 06                	cmp    al,0x6
c0013f53:	89 fa                	mov    edx,edi
c0013f55:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013f5b:	74 04                	je     c0013f61 <CPU::detectFeatures()+0x555>
c0013f5d:	3c 0f                	cmp    al,0xf
c0013f5f:	75 5c                	jne    c0013fbd <CPU::detectFeatures()+0x5b1>
c0013f61:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013f65:	89 cf                	mov    edi,ecx
c0013f67:	c1 ef 10             	shr    edi,0x10
c0013f6a:	c1 e7 04             	shl    edi,0x4
c0013f6d:	09 fa                	or     edx,edi
c0013f6f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013f75:	0f b6 d2             	movzx  edx,dl
c0013f78:	66 81 e7 3f c0       	and    di,0xc03f
c0013f7d:	c1 e2 06             	shl    edx,0x6
c0013f80:	09 fa                	or     edx,edi
c0013f82:	3c 0f                	cmp    al,0xf
c0013f84:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013f8b:	75 30                	jne    c0013fbd <CPU::detectFeatures()+0x5b1>
c0013f8d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013f93:	c1 e9 14             	shr    ecx,0x14
c0013f96:	83 e0 3f             	and    eax,0x3f
c0013f99:	83 c1 0f             	add    ecx,0xf
c0013f9c:	88 ca                	mov    dl,cl
c0013f9e:	c0 e9 02             	shr    cl,0x2
c0013fa1:	c1 e2 06             	shl    edx,0x6
c0013fa4:	09 d0                	or     eax,edx
c0013fa6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013fac:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013fb2:	83 e0 c0             	and    eax,0xffffffc0
c0013fb5:	09 c1                	or     ecx,eax
c0013fb7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013fbd:	83 ec 0c             	sub    esp,0xc
c0013fc0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013fc7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fcb:	50                   	push   eax
c0013fcc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013fd0:	55                   	push   ebp
c0013fd1:	56                   	push   esi
c0013fd2:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013fd6:	57                   	push   edi
c0013fd7:	68 00 00 00 80       	push   0x80000000
c0013fdc:	e8 c1 f5 ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fe1:	83 c4 20             	add    esp,0x20
c0013fe4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013fec:	76 22                	jbe    c0014010 <CPU::detectFeatures()+0x604>
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ff5:	50                   	push   eax
c0013ff6:	55                   	push   ebp
c0013ff7:	56                   	push   esi
c0013ff8:	57                   	push   edi
c0013ff9:	68 01 00 00 80       	push   0x80000001
c0013ffe:	e8 9f f5 ff ff       	call   c00135a2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014003:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001400d:	83 c4 20             	add    esp,0x20
c0014010:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014016:	83 f8 01             	cmp    eax,0x1
c0014019:	75 6f                	jne    c001408a <CPU::detectFeatures()+0x67e>
c001401b:	51                   	push   ecx
c001401c:	51                   	push   ecx
c001401d:	68 ed 63 02 c0       	push   0xc00263ed
c0014022:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014026:	56                   	push   esi
c0014027:	e8 0c c7 fe ff       	call   c0000738 <strcpy>
c001402c:	5f                   	pop    edi
c001402d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014033:	5d                   	pop    ebp
c0014034:	66 c1 e8 06          	shr    ax,0x6
c0014038:	0f b6 c0             	movzx  eax,al
c001403b:	50                   	push   eax
c001403c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014042:	c1 e8 0e             	shr    eax,0xe
c0014045:	0f b6 c0             	movzx  eax,al
c0014048:	50                   	push   eax
c0014049:	e8 fe f1 ff ff       	call   c001324c <CPU::lookupIntelName(unsigned char, unsigned char)>
c001404e:	5a                   	pop    edx
c001404f:	59                   	pop    ecx
c0014050:	50                   	push   eax
c0014051:	56                   	push   esi
c0014052:	e8 21 c8 fe ff       	call   c0000878 <strcat>
c0014057:	5f                   	pop    edi
c0014058:	5d                   	pop    ebp
c0014059:	56                   	push   esi
c001405a:	53                   	push   ebx
c001405b:	e8 48 a7 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c0014060:	58                   	pop    eax
c0014061:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014067:	5a                   	pop    edx
c0014068:	68 f4 63 02 c0       	push   0xc00263f4
c001406d:	50                   	push   eax
c001406e:	e8 51 c7 fe ff       	call   c00007c4 <strcmp>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	85 c0                	test   eax,eax
c0014078:	0f 85 71 03 00 00    	jne    c00143ef <CPU::detectFeatures()+0x9e3>
c001407e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014085:	e9 65 03 00 00       	jmp    c00143ef <CPU::detectFeatures()+0x9e3>
c001408a:	83 f8 02             	cmp    eax,0x2
c001408d:	0f 85 b5 00 00 00    	jne    c0014148 <CPU::detectFeatures()+0x73c>
c0014093:	57                   	push   edi
c0014094:	57                   	push   edi
c0014095:	68 06 64 02 c0       	push   0xc0026406
c001409a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001409e:	56                   	push   esi
c001409f:	e8 94 c6 fe ff       	call   c0000738 <strcpy>
c00140a4:	5d                   	pop    ebp
c00140a5:	58                   	pop    eax
c00140a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ac:	66 c1 e8 06          	shr    ax,0x6
c00140b0:	0f b6 c0             	movzx  eax,al
c00140b3:	50                   	push   eax
c00140b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ba:	c1 e8 0e             	shr    eax,0xe
c00140bd:	0f b6 c0             	movzx  eax,al
c00140c0:	50                   	push   eax
c00140c1:	e8 f2 ef ff ff       	call   c00130b8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00140c6:	5a                   	pop    edx
c00140c7:	59                   	pop    ecx
c00140c8:	50                   	push   eax
c00140c9:	56                   	push   esi
c00140ca:	e8 a9 c7 fe ff       	call   c0000878 <strcat>
c00140cf:	5f                   	pop    edi
c00140d0:	5d                   	pop    ebp
c00140d1:	56                   	push   esi
c00140d2:	53                   	push   ebx
c00140d3:	e8 d0 a6 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c00140d8:	58                   	pop    eax
c00140d9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00140df:	5a                   	pop    edx
c00140e0:	68 0b 64 02 c0       	push   0xc002640b
c00140e5:	50                   	push   eax
c00140e6:	e8 d9 c6 fe ff       	call   c00007c4 <strcmp>
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	85 c0                	test   eax,eax
c00140f0:	75 20                	jne    c0014112 <CPU::detectFeatures()+0x706>
c00140f2:	8b 15 a8 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca8
c00140f8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140fe:	a8 01                	test   al,0x1
c0014100:	74 10                	je     c0014112 <CPU::detectFeatures()+0x706>
c0014102:	83 e0 fe             	and    eax,0xfffffffe
c0014105:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001410b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014112:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014118:	c1 e8 0e             	shr    eax,0xe
c001411b:	3c 05                	cmp    al,0x5
c001411d:	0f 85 cc 02 00 00    	jne    c00143ef <CPU::detectFeatures()+0x9e3>
c0014123:	56                   	push   esi
c0014124:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001412a:	83 e0 0f             	and    eax,0xf
c001412d:	50                   	push   eax
c001412e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014134:	66 c1 e8 06          	shr    ax,0x6
c0014138:	0f b6 c0             	movzx  eax,al
c001413b:	50                   	push   eax
c001413c:	6a 05                	push   0x5
c001413e:	e8 eb f3 ff ff       	call   c001352e <CPU::AMD_K6_writeback(int, int, int)>
c0014143:	e9 1f 02 00 00       	jmp    c0014367 <CPU::detectFeatures()+0x95b>
c0014148:	8d 50 fd             	lea    edx,[eax-0x3]
c001414b:	83 fa 01             	cmp    edx,0x1
c001414e:	76 09                	jbe    c0014159 <CPU::detectFeatures()+0x74d>
c0014150:	83 f8 06             	cmp    eax,0x6
c0014153:	0f 85 91 01 00 00    	jne    c00142ea <CPU::detectFeatures()+0x8de>
c0014159:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001415f:	c1 ea 0e             	shr    edx,0xe
c0014162:	80 fa 05             	cmp    dl,0x5
c0014165:	75 7b                	jne    c00141e2 <CPU::detectFeatures()+0x7d6>
c0014167:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001416d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014172:	66 81 fa 00 01       	cmp    dx,0x100
c0014177:	75 0c                	jne    c0014185 <CPU::detectFeatures()+0x779>
c0014179:	51                   	push   ecx
c001417a:	51                   	push   ecx
c001417b:	68 12 64 02 c0       	push   0xc0026412
c0014180:	e9 dc 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014185:	66 81 fa 00 02       	cmp    dx,0x200
c001418a:	75 0c                	jne    c0014198 <CPU::detectFeatures()+0x78c>
c001418c:	52                   	push   edx
c001418d:	52                   	push   edx
c001418e:	68 25 64 02 c0       	push   0xc0026425
c0014193:	e9 c9 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014198:	66 81 fa 40 02       	cmp    dx,0x240
c001419d:	75 0c                	jne    c00141ab <CPU::detectFeatures()+0x79f>
c001419f:	50                   	push   eax
c00141a0:	50                   	push   eax
c00141a1:	68 37 64 02 c0       	push   0xc0026437
c00141a6:	e9 b6 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00141ab:	83 f8 06             	cmp    eax,0x6
c00141ae:	75 0c                	jne    c00141bc <CPU::detectFeatures()+0x7b0>
c00141b0:	50                   	push   eax
c00141b1:	50                   	push   eax
c00141b2:	68 49 64 02 c0       	push   0xc0026449
c00141b7:	e9 a5 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00141bc:	83 f8 04             	cmp    eax,0x4
c00141bf:	75 0c                	jne    c00141cd <CPU::detectFeatures()+0x7c1>
c00141c1:	50                   	push   eax
c00141c2:	50                   	push   eax
c00141c3:	68 55 64 02 c0       	push   0xc0026455
c00141c8:	e9 94 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00141cd:	83 f8 03             	cmp    eax,0x3
c00141d0:	0f 85 19 02 00 00    	jne    c00143ef <CPU::detectFeatures()+0x9e3>
c00141d6:	50                   	push   eax
c00141d7:	50                   	push   eax
c00141d8:	68 5d 64 02 c0       	push   0xc002645d
c00141dd:	e9 7f 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00141e2:	80 fa 06             	cmp    dl,0x6
c00141e5:	0f 85 db 00 00 00    	jne    c00142c6 <CPU::detectFeatures()+0x8ba>
c00141eb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00141f1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00141f6:	66 81 fa 80 01       	cmp    dx,0x180
c00141fb:	75 0c                	jne    c0014209 <CPU::detectFeatures()+0x7fd>
c00141fd:	50                   	push   eax
c00141fe:	50                   	push   eax
c00141ff:	68 68 64 02 c0       	push   0xc0026468
c0014204:	e9 58 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014209:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001420f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014214:	75 0c                	jne    c0014222 <CPU::detectFeatures()+0x816>
c0014216:	50                   	push   eax
c0014217:	50                   	push   eax
c0014218:	68 78 64 02 c0       	push   0xc0026478
c001421d:	e9 3f 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014222:	66 81 fa 40 02       	cmp    dx,0x240
c0014227:	75 0c                	jne    c0014235 <CPU::detectFeatures()+0x829>
c0014229:	55                   	push   ebp
c001422a:	55                   	push   ebp
c001422b:	68 7f 64 02 c0       	push   0xc002647f
c0014230:	e9 2c 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014235:	66 81 fa 80 02       	cmp    dx,0x280
c001423a:	75 0c                	jne    c0014248 <CPU::detectFeatures()+0x83c>
c001423c:	57                   	push   edi
c001423d:	57                   	push   edi
c001423e:	68 88 64 02 c0       	push   0xc0026488
c0014243:	e9 19 01 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014248:	66 81 fa 40 03       	cmp    dx,0x340
c001424d:	74 ed                	je     c001423c <CPU::detectFeatures()+0x830>
c001424f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014254:	75 0c                	jne    c0014262 <CPU::detectFeatures()+0x856>
c0014256:	56                   	push   esi
c0014257:	56                   	push   esi
c0014258:	68 8f 64 02 c0       	push   0xc002648f
c001425d:	e9 ff 00 00 00       	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014262:	83 f8 06             	cmp    eax,0x6
c0014265:	0f 84 45 ff ff ff    	je     c00141b0 <CPU::detectFeatures()+0x7a4>
c001426b:	83 f8 04             	cmp    eax,0x4
c001426e:	0f 84 4d ff ff ff    	je     c00141c1 <CPU::detectFeatures()+0x7b5>
c0014274:	83 f8 03             	cmp    eax,0x3
c0014277:	0f 85 72 01 00 00    	jne    c00143ef <CPU::detectFeatures()+0x9e3>
c001427d:	51                   	push   ecx
c001427e:	51                   	push   ecx
c001427f:	68 98 64 02 c0       	push   0xc0026498
c0014284:	53                   	push   ebx
c0014285:	e8 1e a5 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c001428a:	b1 c1                	mov    cl,0xc1
c001428c:	88 c8                	mov    al,cl
c001428e:	e6 22                	out    0x22,al
c0014290:	e4 23                	in     al,0x23
c0014292:	88 c2                	mov    dl,al
c0014294:	88 c8                	mov    al,cl
c0014296:	e6 22                	out    0x22,al
c0014298:	88 d0                	mov    al,dl
c001429a:	83 c8 10             	or     eax,0x10
c001429d:	e6 23                	out    0x23,al
c001429f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00142a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00142a9:	89 d0                	mov    eax,edx
c00142ab:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00142b1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00142b5:	40                   	inc    eax
c00142b6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00142bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00142c1:	e9 a1 00 00 00       	jmp    c0014367 <CPU::detectFeatures()+0x95b>
c00142c6:	83 f8 06             	cmp    eax,0x6
c00142c9:	0f 84 e1 fe ff ff    	je     c00141b0 <CPU::detectFeatures()+0x7a4>
c00142cf:	83 f8 04             	cmp    eax,0x4
c00142d2:	0f 84 e9 fe ff ff    	je     c00141c1 <CPU::detectFeatures()+0x7b5>
c00142d8:	83 f8 03             	cmp    eax,0x3
c00142db:	0f 85 0e 01 00 00    	jne    c00143ef <CPU::detectFeatures()+0x9e3>
c00142e1:	52                   	push   edx
c00142e2:	52                   	push   edx
c00142e3:	68 a3 64 02 c0       	push   0xc00264a3
c00142e8:	eb 77                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00142ea:	83 f8 07             	cmp    eax,0x7
c00142ed:	75 09                	jne    c00142f8 <CPU::detectFeatures()+0x8ec>
c00142ef:	50                   	push   eax
c00142f0:	50                   	push   eax
c00142f1:	68 ad 64 02 c0       	push   0xc00264ad
c00142f6:	eb 69                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c00142f8:	83 f8 0a             	cmp    eax,0xa
c00142fb:	75 09                	jne    c0014306 <CPU::detectFeatures()+0x8fa>
c00142fd:	50                   	push   eax
c00142fe:	50                   	push   eax
c00142ff:	68 b8 64 02 c0       	push   0xc00264b8
c0014304:	eb 5b                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014306:	83 f8 0b             	cmp    eax,0xb
c0014309:	75 09                	jne    c0014314 <CPU::detectFeatures()+0x908>
c001430b:	50                   	push   eax
c001430c:	50                   	push   eax
c001430d:	68 c0 64 02 c0       	push   0xc00264c0
c0014312:	eb 4d                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014314:	83 f8 08             	cmp    eax,0x8
c0014317:	75 09                	jne    c0014322 <CPU::detectFeatures()+0x916>
c0014319:	50                   	push   eax
c001431a:	50                   	push   eax
c001431b:	68 c9 64 02 c0       	push   0xc00264c9
c0014320:	eb 3f                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014322:	83 f8 09             	cmp    eax,0x9
c0014325:	75 09                	jne    c0014330 <CPU::detectFeatures()+0x924>
c0014327:	50                   	push   eax
c0014328:	50                   	push   eax
c0014329:	68 d1 64 02 c0       	push   0xc00264d1
c001432e:	eb 31                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c0014330:	83 f8 05             	cmp    eax,0x5
c0014333:	75 09                	jne    c001433e <CPU::detectFeatures()+0x932>
c0014335:	50                   	push   eax
c0014336:	50                   	push   eax
c0014337:	68 d9 64 02 c0       	push   0xc00264d9
c001433c:	eb 23                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c001433e:	83 f8 0c             	cmp    eax,0xc
c0014341:	75 09                	jne    c001434c <CPU::detectFeatures()+0x940>
c0014343:	55                   	push   ebp
c0014344:	55                   	push   ebp
c0014345:	68 e7 64 02 c0       	push   0xc00264e7
c001434a:	eb 15                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c001434c:	83 f8 0d             	cmp    eax,0xd
c001434f:	75 09                	jne    c001435a <CPU::detectFeatures()+0x94e>
c0014351:	57                   	push   edi
c0014352:	57                   	push   edi
c0014353:	68 f2 64 02 c0       	push   0xc00264f2
c0014358:	eb 07                	jmp    c0014361 <CPU::detectFeatures()+0x955>
c001435a:	56                   	push   esi
c001435b:	56                   	push   esi
c001435c:	68 06 65 02 c0       	push   0xc0026506
c0014361:	53                   	push   ebx
c0014362:	e8 41 a4 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c0014367:	83 c4 10             	add    esp,0x10
c001436a:	e9 80 00 00 00       	jmp    c00143ef <CPU::detectFeatures()+0x9e3>
c001436f:	51                   	push   ecx
c0014370:	51                   	push   ecx
c0014371:	68 52 63 02 c0       	push   0xc0026352
c0014376:	55                   	push   ebp
c0014377:	e8 bc c3 fe ff       	call   c0000738 <strcpy>
c001437c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014386:	e8 58 be fe ff       	call   c00001e3 <is486>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	85 c0                	test   eax,eax
c0014390:	74 2b                	je     c00143bd <CPU::detectFeatures()+0x9b1>
c0014392:	52                   	push   edx
c0014393:	52                   	push   edx
c0014394:	68 12 65 02 c0       	push   0xc0026512
c0014399:	53                   	push   ebx
c001439a:	e8 09 a4 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c001439f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00143a6:	0f 20 c0             	mov    eax,cr0
c00143a9:	83 e0 14             	and    eax,0x14
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	83 f8 04             	cmp    eax,0x4
c00143b2:	75 1f                	jne    c00143d3 <CPU::detectFeatures()+0x9c7>
c00143b4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00143bb:	eb 32                	jmp    c00143ef <CPU::detectFeatures()+0x9e3>
c00143bd:	50                   	push   eax
c00143be:	50                   	push   eax
c00143bf:	68 1d 65 02 c0       	push   0xc002651d
c00143c4:	53                   	push   ebx
c00143c5:	e8 de a3 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c00143ca:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00143d1:	eb d3                	jmp    c00143a6 <CPU::detectFeatures()+0x99a>
c00143d3:	e8 e6 bd fe ff       	call   c00001be <hasLegacyFPU>
c00143d8:	83 e0 01             	and    eax,0x1
c00143db:	8d 14 00             	lea    edx,[eax+eax*1]
c00143de:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00143e4:	83 e0 fd             	and    eax,0xfffffffd
c00143e7:	09 d0                	or     eax,edx
c00143e9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00143ef:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00143f6:	74 0e                	je     c0014406 <CPU::detectFeatures()+0x9fa>
c00143f8:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00143fd:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0014404:	eb 20                	jmp    c0014426 <CPU::detectFeatures()+0xa1a>
c0014406:	e8 b3 bd fe ff       	call   c00001be <hasLegacyFPU>
c001440b:	83 e0 01             	and    eax,0x1
c001440e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014411:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014417:	83 e0 fd             	and    eax,0xfffffffd
c001441a:	09 d0                	or     eax,edx
c001441c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014422:	a8 02                	test   al,0x2
c0014424:	75 d2                	jne    c00143f8 <CPU::detectFeatures()+0x9ec>
c0014426:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001442d:	83 c4 4c             	add    esp,0x4c
c0014430:	5b                   	pop    ebx
c0014431:	5e                   	pop    esi
c0014432:	5f                   	pop    edi
c0014433:	5d                   	pop    ebp
c0014434:	c3                   	ret    
c0014435:	90                   	nop

c0014436 <CPU::setupSMEP()>:
c0014436:	0f 20 e0             	mov    eax,cr4
c0014439:	0d 00 00 10 00       	or     eax,0x100000
c001443e:	0f 22 e0             	mov    cr4,eax
c0014441:	c3                   	ret    

c0014442 <CPU::setupUMIP()>:
c0014442:	0f 20 e0             	mov    eax,cr4
c0014445:	80 cc 08             	or     ah,0x8
c0014448:	0f 22 e0             	mov    cr4,eax
c001444b:	c3                   	ret    

c001444c <CPU::setupTSC()>:
c001444c:	0f 20 e0             	mov    eax,cr4
c001444f:	83 c8 04             	or     eax,0x4
c0014452:	0f 22 e0             	mov    cr4,eax
c0014455:	c3                   	ret    

c0014456 <CPU::setupLargePages()>:
c0014456:	0f 20 e0             	mov    eax,cr4
c0014459:	83 c8 10             	or     eax,0x10
c001445c:	0f 22 e0             	mov    cr4,eax
c001445f:	c3                   	ret    

c0014460 <CPU::setupPAT()>:
c0014460:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0014465:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001446c:	74 2c                	je     c001449a <CPU::setupPAT()+0x3a>
c001446e:	53                   	push   ebx
c001446f:	83 ec 10             	sub    esp,0x10
c0014472:	68 77 02 00 00       	push   0x277
c0014477:	50                   	push   eax
c0014478:	e8 e9 4d ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001447d:	83 e2 f8             	and    edx,0xfffffff8
c0014480:	83 ca 01             	or     edx,0x1
c0014483:	52                   	push   edx
c0014484:	50                   	push   eax
c0014485:	68 77 02 00 00       	push   0x277
c001448a:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c0014490:	e8 fd 4d ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014495:	83 c4 28             	add    esp,0x28
c0014498:	5b                   	pop    ebx
c0014499:	c3                   	ret    
c001449a:	c3                   	ret    
c001449b:	90                   	nop

c001449c <CPU::setupMTRR()>:
c001449c:	c3                   	ret    
c001449d:	90                   	nop

c001449e <CPU::setupGlobalPages()>:
c001449e:	0f 20 e0             	mov    eax,cr4
c00144a1:	0c 80                	or     al,0x80
c00144a3:	0f 22 e0             	mov    cr4,eax
c00144a6:	c3                   	ret    
c00144a7:	90                   	nop

c00144a8 <CPU::allowUsermodeDataAccess()>:
c00144a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ac:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00144b3:	74 03                	je     c00144b8 <CPU::allowUsermodeDataAccess()+0x10>
c00144b5:	0f 01 cb             	stac   
c00144b8:	c3                   	ret    
c00144b9:	90                   	nop

c00144ba <CPU::prohibitUsermodeDataAccess()>:
c00144ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144be:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00144c5:	74 03                	je     c00144ca <CPU::prohibitUsermodeDataAccess()+0x10>
c00144c7:	0f 01 ca             	clac   
c00144ca:	c3                   	ret    
c00144cb:	90                   	nop

c00144cc <CPU::setupSMAP()>:
c00144cc:	0f 20 e0             	mov    eax,cr4
c00144cf:	0d 00 00 20 00       	or     eax,0x200000
c00144d4:	0f 22 e0             	mov    cr4,eax
c00144d7:	eb e1                	jmp    c00144ba <CPU::prohibitUsermodeDataAccess()>
c00144d9:	90                   	nop

c00144da <CPU::setupFeatures()>:
c00144da:	53                   	push   ebx
c00144db:	83 ec 08             	sub    esp,0x8
c00144de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144e2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00144e9:	74 18                	je     c0014503 <CPU::setupFeatures()+0x29>
c00144eb:	83 ec 0c             	sub    esp,0xc
c00144ee:	68 28 65 02 c0       	push   0xc0026528
c00144f3:	e8 47 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00144f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144fb:	e8 42 ff ff ff       	call   c0014442 <CPU::setupUMIP()>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001450a:	74 18                	je     c0014524 <CPU::setupFeatures()+0x4a>
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	68 32 65 02 c0       	push   0xc0026532
c0014514:	e8 26 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0014519:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001451c:	e8 2b ff ff ff       	call   c001444c <CPU::setupTSC()>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001452b:	74 18                	je     c0014545 <CPU::setupFeatures()+0x6b>
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	68 3b 65 02 c0       	push   0xc002653b
c0014535:	e8 05 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001453a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001453d:	e8 14 ff ff ff       	call   c0014456 <CPU::setupLargePages()>
c0014542:	83 c4 10             	add    esp,0x10
c0014545:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001454c:	74 18                	je     c0014566 <CPU::setupFeatures()+0x8c>
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	68 44 65 02 c0       	push   0xc0026544
c0014556:	e8 e4 8a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001455b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001455e:	e8 3b ff ff ff       	call   c001449e <CPU::setupGlobalPages()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001456d:	74 18                	je     c0014587 <CPU::setupFeatures()+0xad>
c001456f:	83 ec 0c             	sub    esp,0xc
c0014572:	68 56 65 02 c0       	push   0xc0026556
c0014577:	e8 c3 8a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001457c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001457f:	e8 dc fe ff ff       	call   c0014460 <CPU::setupPAT()>
c0014584:	83 c4 10             	add    esp,0x10
c0014587:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001458e:	74 11                	je     c00145a1 <CPU::setupFeatures()+0xc7>
c0014590:	c7 44 24 10 5f 65 02 c0 	mov    DWORD PTR [esp+0x10],0xc002655f
c0014598:	83 c4 08             	add    esp,0x8
c001459b:	5b                   	pop    ebx
c001459c:	e9 9e 8a ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c00145a1:	83 c4 08             	add    esp,0x8
c00145a4:	5b                   	pop    ebx
c00145a5:	c3                   	ret    

c00145a6 <CPU::open(int, int, void*)>:
c00145a6:	57                   	push   edi
c00145a7:	56                   	push   esi
c00145a8:	53                   	push   ebx
c00145a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145b1:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00145b7:	83 ec 0c             	sub    esp,0xc
c00145ba:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00145c0:	68 69 65 02 c0       	push   0xc0026569
c00145c5:	e8 e3 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00145ca:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00145d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00145d3:	e8 72 50 ff ff       	call   c000964a <GDT::setup()>
c00145d8:	c7 04 24 7b 65 02 c0 	mov    DWORD PTR [esp],0xc002657b
c00145df:	e8 c9 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00145e4:	83 c4 0c             	add    esp,0xc
c00145e7:	6a 00                	push   0x0
c00145e9:	68 ef be ad de       	push   0xdeadbeef
c00145ee:	57                   	push   edi
c00145ef:	e8 ac 70 ff ff       	call   c000b6a0 <TSS::setup(unsigned long, unsigned long)>
c00145f4:	c7 04 24 8d 65 02 c0 	mov    DWORD PTR [esp],0xc002658d
c00145fb:	e8 ad 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014600:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014603:	e8 78 70 ff ff       	call   c000b680 <TSS::flush()>
c0014608:	c7 04 24 a1 65 02 c0 	mov    DWORD PTR [esp],0xc00265a1
c001460f:	e8 99 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014614:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001461a:	89 04 24             	mov    DWORD PTR [esp],eax
c001461d:	e8 94 52 ff ff       	call   c00098b6 <IDT::setup()>
c0014622:	c7 04 24 b3 65 02 c0 	mov    DWORD PTR [esp],0xc00265b3
c0014629:	e8 7f 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001462e:	b8 00 04 00 00       	mov    eax,0x400
c0014633:	0f 23 f8             	mov    db7,eax
c0014636:	c7 04 24 d1 65 02 c0 	mov    DWORD PTR [esp],0xc00265d1
c001463d:	e8 6b 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014642:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001464c:	e8 b9 5d ff ff       	call   c000a40a <Phys::allocatePage()>
c0014651:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014657:	89 30                	mov    DWORD PTR [eax],esi
c0014659:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001465f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014662:	c7 04 24 f3 65 02 c0 	mov    DWORD PTR [esp],0xc00265f3
c0014669:	e8 3f 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001466e:	58                   	pop    eax
c001466f:	5a                   	pop    edx
c0014670:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014676:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001467a:	e8 1b 80 ff ff       	call   c000c69a <VAS::setCPUSpecific(unsigned long)>
c001467f:	c7 04 24 1b 66 02 c0 	mov    DWORD PTR [esp],0xc002661b
c0014686:	e8 22 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001468b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001468e:	e8 79 f3 ff ff       	call   c0013a0c <CPU::detectFeatures()>
c0014693:	c7 04 24 3e 66 02 c0 	mov    DWORD PTR [esp],0xc002663e
c001469a:	e8 0e 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001469f:	e8 ea b2 ff ff       	call   c000f98e <setupInterruptController()>
c00146a4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00146aa:	c7 04 24 62 66 02 c0 	mov    DWORD PTR [esp],0xc0026662
c00146b1:	e8 f7 56 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00146b6:	a1 c0 8c 02 c0       	mov    eax,ds:0xc0028cc0
c00146bb:	83 e0 10             	and    eax,0x10
c00146be:	83 f8 01             	cmp    eax,0x1
c00146c1:	19 c0                	sbb    eax,eax
c00146c3:	83 e0 46             	and    eax,0x46
c00146c6:	83 c0 1e             	add    eax,0x1e
c00146c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00146cc:	e8 eb c8 ff ff       	call   c0010fbc <setupTimer(int)>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00146da:	f6 05 c0 8c 02 c0 20 	test   BYTE PTR ds:0xc0028cc0,0x20
c00146e1:	74 18                	je     c00146fb <CPU::open(int, int, void*)+0x155>
c00146e3:	83 ec 0c             	sub    esp,0xc
c00146e6:	68 7d 66 02 c0       	push   0xc002667d
c00146eb:	e8 bd 56 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00146f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146f3:	e8 e2 fd ff ff       	call   c00144da <CPU::setupFeatures()>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	83 ec 0c             	sub    esp,0xc
c00146fe:	68 98 66 02 c0       	push   0xc0026698
c0014703:	e8 a5 56 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014708:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001470b:	e8 5c f0 ff ff       	call   c001376c <CPU::displayFeatures()>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	31 c0                	xor    eax,eax
c0014715:	5b                   	pop    ebx
c0014716:	5e                   	pop    esi
c0014717:	5f                   	pop    edi
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001471a:	57                   	push   edi
c001471b:	56                   	push   esi
c001471c:	53                   	push   ebx
c001471d:	51                   	push   ecx
c001471e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014722:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014725:	0f 02 c0             	lar    eax,ax
c0014728:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001472b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001472f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014732:	88 ca                	mov    dl,cl
c0014734:	c0 ea 06             	shr    dl,0x6
c0014737:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001473b:	89 ca                	mov    edx,ecx
c001473d:	66 c1 ea 03          	shr    dx,0x3
c0014741:	83 e2 07             	and    edx,0x7
c0014744:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014749:	88 17                	mov    BYTE PTR [edi],dl
c001474b:	0f 84 a6 01 00 00    	je     c00148f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014751:	83 e1 07             	and    ecx,0x7
c0014754:	80 f9 04             	cmp    cl,0x4
c0014757:	0f 84 98 00 00 00    	je     c00147f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001475d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014762:	0f 95 c0             	setne  al
c0014765:	80 f9 05             	cmp    cl,0x5
c0014768:	0f 95 c2             	setne  dl
c001476b:	08 c2                	or     dl,al
c001476d:	74 79                	je     c00147e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001476f:	84 c9                	test   cl,cl
c0014771:	75 05                	jne    c0014778 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014773:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014776:	eb 3c                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014778:	80 f9 01             	cmp    cl,0x1
c001477b:	75 05                	jne    c0014782 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001477d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014780:	eb 32                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014782:	80 f9 02             	cmp    cl,0x2
c0014785:	75 05                	jne    c001478c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014787:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001478a:	eb 28                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001478c:	31 c0                	xor    eax,eax
c001478e:	80 f9 03             	cmp    cl,0x3
c0014791:	75 05                	jne    c0014798 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014793:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014796:	eb 1c                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014798:	80 f9 05             	cmp    cl,0x5
c001479b:	75 05                	jne    c00147a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001479d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00147a0:	eb 12                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147a2:	80 f9 06             	cmp    cl,0x6
c00147a5:	75 05                	jne    c00147ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00147a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147aa:	eb 08                	jmp    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147ac:	80 f9 07             	cmp    cl,0x7
c00147af:	75 03                	jne    c00147b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147b1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147b4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00147b9:	75 10                	jne    c00147cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00147bb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00147bf:	b9 03 00 00 00       	mov    ecx,0x3
c00147c4:	01 d0                	add    eax,edx
c00147c6:	e9 37 01 00 00       	jmp    c0014902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147cb:	b9 02 00 00 00       	mov    ecx,0x2
c00147d0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00147d5:	0f 85 27 01 00 00    	jne    c0014902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147db:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00147de:	b9 06 00 00 00       	mov    ecx,0x6
c00147e3:	e9 1a 01 00 00       	jmp    c0014902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147e8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00147eb:	b9 06 00 00 00       	mov    ecx,0x6
c00147f0:	e9 0f 01 00 00       	jmp    c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00147f5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00147f8:	88 ca                	mov    dl,cl
c00147fa:	c0 ea 06             	shr    dl,0x6
c00147fd:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014801:	89 ca                	mov    edx,ecx
c0014803:	66 c1 ea 03          	shr    dx,0x3
c0014807:	83 e2 07             	and    edx,0x7
c001480a:	80 e1 07             	and    cl,0x7
c001480d:	75 05                	jne    c0014814 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001480f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014812:	eb 4c                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014814:	80 f9 01             	cmp    cl,0x1
c0014817:	75 05                	jne    c001481e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014819:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001481c:	eb 42                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001481e:	80 f9 02             	cmp    cl,0x2
c0014821:	75 05                	jne    c0014828 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014823:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014826:	eb 38                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014828:	80 f9 03             	cmp    cl,0x3
c001482b:	75 05                	jne    c0014832 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001482d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014830:	eb 2e                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014832:	80 f9 04             	cmp    cl,0x4
c0014835:	75 12                	jne    c0014849 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014837:	f6 c4 60             	test   ah,0x60
c001483a:	75 08                	jne    c0014844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001483c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001483f:	8d 78 14             	lea    edi,[eax+0x14]
c0014842:	eb 1c                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014844:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014847:	eb 17                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014849:	80 f9 05             	cmp    cl,0x5
c001484c:	75 05                	jne    c0014853 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001484e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014851:	eb 0d                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014853:	80 f9 06             	cmp    cl,0x6
c0014856:	75 05                	jne    c001485d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014858:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001485b:	eb 03                	jmp    c0014860 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001485d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014860:	84 d2                	test   dl,dl
c0014862:	75 05                	jne    c0014869 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014864:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014867:	eb 3c                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014869:	80 fa 01             	cmp    dl,0x1
c001486c:	75 05                	jne    c0014873 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001486e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014871:	eb 32                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014873:	80 fa 02             	cmp    dl,0x2
c0014876:	75 05                	jne    c001487d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014878:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001487b:	eb 28                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001487d:	80 fa 03             	cmp    dl,0x3
c0014880:	75 05                	jne    c0014887 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014882:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014885:	eb 1e                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014887:	31 c0                	xor    eax,eax
c0014889:	80 fa 04             	cmp    dl,0x4
c001488c:	74 17                	je     c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001488e:	80 fa 05             	cmp    dl,0x5
c0014891:	75 05                	jne    c0014898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014893:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014896:	eb 0d                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014898:	80 fa 06             	cmp    dl,0x6
c001489b:	75 05                	jne    c00148a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001489d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148a0:	eb 03                	jmp    c00148a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00148a2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148a5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00148aa:	0f 94 c2             	sete   dl
c00148ad:	80 f9 05             	cmp    cl,0x5
c00148b0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00148b4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00148b9:	d3 e0                	shl    eax,cl
c00148bb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00148bf:	74 0a                	je     c00148cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00148c1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148c4:	b9 07 00 00 00       	mov    ecx,0x7
c00148c9:	eb 37                	jmp    c0014902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148cb:	01 f8                	add    eax,edi
c00148cd:	b9 03 00 00 00       	mov    ecx,0x3
c00148d2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00148d7:	74 2b                	je     c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148d9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00148de:	75 0d                	jne    c00148ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00148e0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00148e4:	01 c8                	add    eax,ecx
c00148e6:	b9 04 00 00 00       	mov    ecx,0x4
c00148eb:	eb 17                	jmp    c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148ed:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148f0:	b9 07 00 00 00       	mov    ecx,0x7
c00148f5:	eb 0d                	jmp    c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148f7:	b9 02 00 00 00       	mov    ecx,0x2
c00148fc:	b2 01                	mov    dl,0x1
c00148fe:	31 c0                	xor    eax,eax
c0014900:	eb 02                	jmp    c0014904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014902:	31 d2                	xor    edx,edx
c0014904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014908:	89 0b                	mov    DWORD PTR [ebx],ecx
c001490a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001490e:	88 11                	mov    BYTE PTR [ecx],dl
c0014910:	5a                   	pop    edx
c0014911:	5b                   	pop    ebx
c0014912:	5e                   	pop    esi
c0014913:	5f                   	pop    edi
c0014914:	c3                   	ret    

c0014915 <Krnl::smpEntry()>:
c0014915:	eb fe                	jmp    c0014915 <Krnl::smpEntry()>

c0014917 <Krnl::startCPU(int)>:
c0014917:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001491c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014923:	0f 84 36 01 00 00    	je     c0014a5f <Krnl::startCPU(int)+0x148>
c0014929:	53                   	push   ebx
c001492a:	83 ec 10             	sub    esp,0x10
c001492d:	fa                   	cli    
c001492e:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0014934:	6a 1b                	push   0x1b
c0014936:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c001493c:	e8 25 49 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0014941:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014946:	89 c3                	mov    ebx,eax
c0014948:	58                   	pop    eax
c0014949:	5a                   	pop    edx
c001494a:	53                   	push   ebx
c001494b:	68 e0 66 02 c0       	push   0xc00266e0
c0014950:	e8 ea 86 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0014955:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001495f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014963:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001496d:	c1 e0 18             	shl    eax,0x18
c0014970:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014976:	83 c4 10             	add    esp,0x10
c0014979:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001497f:	09 c2                	or     edx,eax
c0014981:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014987:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001498d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014993:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014999:	80 cd c5             	or     ch,0xc5
c001499c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00149a2:	f3 90                	pause  
c00149a4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00149a6:	0f ba e1 0c          	bt     ecx,0xc
c00149aa:	72 f6                	jb     c00149a2 <Krnl::startCPU(int)+0x8b>
c00149ac:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00149b2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00149b8:	09 c1                	or     ecx,eax
c00149ba:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149c0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149c6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00149cc:	80 cd 85             	or     ch,0x85
c00149cf:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00149d5:	f3 90                	pause  
c00149d7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00149d9:	0f ba e1 0c          	bt     ecx,0xc
c00149dd:	72 f6                	jb     c00149d5 <Krnl::startCPU(int)+0xbe>
c00149df:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00149e9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00149ef:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00149f5:	09 c1                	or     ecx,eax
c00149f7:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149fd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014a03:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014a09:	81 c9 02 06 00 00    	or     ecx,0x602
c0014a0f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a15:	f3 90                	pause  
c0014a17:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a19:	0f ba e1 0c          	bt     ecx,0xc
c0014a1d:	72 f6                	jb     c0014a15 <Krnl::startCPU(int)+0xfe>
c0014a1f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a29:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a2f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a35:	09 c8                	or     eax,ecx
c0014a37:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014a3d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014a43:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014a48:	0d 02 06 00 00       	or     eax,0x602
c0014a4d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014a53:	f3 90                	pause  
c0014a55:	8b 02                	mov    eax,DWORD PTR [edx]
c0014a57:	0f ba e0 0c          	bt     eax,0xc
c0014a5b:	72 f6                	jb     c0014a53 <Krnl::startCPU(int)+0x13c>
c0014a5d:	eb fe                	jmp    c0014a5d <Krnl::startCPU(int)+0x146>
c0014a5f:	c3                   	ret    

c0014a60 <Krnl::startCPUs()>:
c0014a60:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0014a65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014a6b:	88 c2                	mov    dl,al
c0014a6d:	83 e2 0a             	and    edx,0xa
c0014a70:	80 fa 0a             	cmp    dl,0xa
c0014a73:	75 09                	jne    c0014a7e <Krnl::startCPUs()+0x1e>
c0014a75:	a8 01                	test   al,0x1
c0014a77:	74 05                	je     c0014a7e <Krnl::startCPUs()+0x1e>
c0014a79:	e9 1d b7 fe ff       	jmp    c000019b <prepareTramp>
c0014a7e:	c3                   	ret    
c0014a7f:	90                   	nop

c0014a80 <EnvVarContainer::getEnv(char const*)>:
c0014a80:	57                   	push   edi
c0014a81:	56                   	push   esi
c0014a82:	53                   	push   ebx
c0014a83:	31 db                	xor    ebx,ebx
c0014a85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a89:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014a8b:	7e 2b                	jle    c0014ab8 <EnvVarContainer::getEnv(char const*)+0x38>
c0014a8d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014a94:	50                   	push   eax
c0014a95:	50                   	push   eax
c0014a96:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014a99:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014a9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014aa0:	e8 1f bd fe ff       	call   c00007c4 <strcmp>
c0014aa5:	83 c4 10             	add    esp,0x10
c0014aa8:	85 c0                	test   eax,eax
c0014aaa:	75 09                	jne    c0014ab5 <EnvVarContainer::getEnv(char const*)+0x35>
c0014aac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014aaf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014ab3:	eb 05                	jmp    c0014aba <EnvVarContainer::getEnv(char const*)+0x3a>
c0014ab5:	43                   	inc    ebx
c0014ab6:	eb d1                	jmp    c0014a89 <EnvVarContainer::getEnv(char const*)+0x9>
c0014ab8:	31 c0                	xor    eax,eax
c0014aba:	5b                   	pop    ebx
c0014abb:	5e                   	pop    esi
c0014abc:	5f                   	pop    edi
c0014abd:	c3                   	ret    

c0014abe <EnvVarContainer::setEnv(char const*, char const*)>:
c0014abe:	55                   	push   ebp
c0014abf:	57                   	push   edi
c0014ac0:	56                   	push   esi
c0014ac1:	53                   	push   ebx
c0014ac2:	83 ec 28             	sub    esp,0x28
c0014ac5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014ac9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014acd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014ad1:	56                   	push   esi
c0014ad2:	e8 c1 bb fe ff       	call   c0000698 <strlen>
c0014ad7:	40                   	inc    eax
c0014ad8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014adb:	e8 73 52 ff ff       	call   c0009d53 <malloc>
c0014ae0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ae7:	e8 ac bb fe ff       	call   c0000698 <strlen>
c0014aec:	40                   	inc    eax
c0014aed:	89 04 24             	mov    DWORD PTR [esp],eax
c0014af0:	e8 5e 52 ff ff       	call   c0009d53 <malloc>
c0014af5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014af8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014afc:	e8 97 bb fe ff       	call   c0000698 <strlen>
c0014b01:	83 c4 0c             	add    esp,0xc
c0014b04:	40                   	inc    eax
c0014b05:	50                   	push   eax
c0014b06:	6a 00                	push   0x0
c0014b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b0c:	e8 6b bb fe ff       	call   c000067c <memset>
c0014b11:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b14:	e8 7f bb fe ff       	call   c0000698 <strlen>
c0014b19:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014b1d:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b25:	89 de                	mov    esi,ebx
c0014b27:	e8 6c bb fe ff       	call   c0000698 <strlen>
c0014b2c:	83 c4 0c             	add    esp,0xc
c0014b2f:	40                   	inc    eax
c0014b30:	50                   	push   eax
c0014b31:	6a 00                	push   0x0
c0014b33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b37:	e8 40 bb fe ff       	call   c000067c <memset>
c0014b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b3f:	e8 54 bb fe ff       	call   c0000698 <strlen>
c0014b44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014b48:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b50:	40                   	inc    eax
c0014b51:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014b54:	c1 e0 03             	shl    eax,0x3
c0014b57:	5a                   	pop    edx
c0014b58:	59                   	pop    ecx
c0014b59:	50                   	push   eax
c0014b5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b5d:	e8 dd 51 ff ff       	call   c0009d3f <realloc>
c0014b62:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014b66:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b69:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014b6c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014b70:	b9 08 00 00 00       	mov    ecx,0x8
c0014b75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b77:	83 c4 2c             	add    esp,0x2c
c0014b7a:	5b                   	pop    ebx
c0014b7b:	5e                   	pop    esi
c0014b7c:	5f                   	pop    edi
c0014b7d:	5d                   	pop    ebp
c0014b7e:	c3                   	ret    
c0014b7f:	90                   	nop

c0014b80 <EnvVarContainer::deleteEnv(char const*)>:
c0014b80:	c3                   	ret    
c0014b81:	90                   	nop

c0014b82 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014b82:	55                   	push   ebp
c0014b83:	57                   	push   edi
c0014b84:	56                   	push   esi
c0014b85:	53                   	push   ebx
c0014b86:	81 ec 38 01 00 00    	sub    esp,0x138
c0014b8c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014b93:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014b9a:	68 14 01 00 00       	push   0x114
c0014b9f:	e8 af 51 ff ff       	call   c0009d53 <malloc>
c0014ba4:	83 c4 0c             	add    esp,0xc
c0014ba7:	89 c3                	mov    ebx,eax
c0014ba9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bac:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014bb3:	50                   	push   eax
c0014bb4:	e8 f1 89 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0014bb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bbc:	e8 31 8d ff ff       	call   c000d8f2 <File::exists()>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	84 c0                	test   al,al
c0014bc6:	75 31                	jne    c0014bf9 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014bc8:	50                   	push   eax
c0014bc9:	50                   	push   eax
c0014bca:	6a 12                	push   0x12
c0014bcc:	53                   	push   ebx
c0014bcd:	e8 b2 8a ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0014bd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bd4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014bd7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bda:	e8 b9 ba fe ff       	call   c0000698 <strlen>
c0014bdf:	5a                   	pop    edx
c0014be0:	31 d2                	xor    edx,edx
c0014be2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014be6:	51                   	push   ecx
c0014be7:	56                   	push   esi
c0014be8:	52                   	push   edx
c0014be9:	50                   	push   eax
c0014bea:	53                   	push   ebx
c0014beb:	ff d7                	call   edi
c0014bed:	83 c4 14             	add    esp,0x14
c0014bf0:	53                   	push   ebx
c0014bf1:	e8 ec 8a ff ff       	call   c000d6e2 <File::close()>
c0014bf6:	83 c4 10             	add    esp,0x10
c0014bf9:	56                   	push   esi
c0014bfa:	31 f6                	xor    esi,esi
c0014bfc:	68 00 01 00 00       	push   0x100
c0014c01:	6a 00                	push   0x0
c0014c03:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014c07:	50                   	push   eax
c0014c08:	e8 6f ba fe ff       	call   c000067c <memset>
c0014c0d:	5f                   	pop    edi
c0014c0e:	58                   	pop    eax
c0014c0f:	6a 01                	push   0x1
c0014c11:	53                   	push   ebx
c0014c12:	e8 6d 8a ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c22:	83 ec 0c             	sub    esp,0xc
c0014c25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c27:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014c2b:	51                   	push   ecx
c0014c2c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014c30:	52                   	push   edx
c0014c31:	6a 00                	push   0x0
c0014c33:	6a 01                	push   0x1
c0014c35:	53                   	push   ebx
c0014c36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c39:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014c3d:	83 c4 20             	add    esp,0x20
c0014c40:	3c 0d                	cmp    al,0xd
c0014c42:	0f 84 09 01 00 00    	je     c0014d51 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014c48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014c4d:	0f 84 ef 00 00 00    	je     c0014d42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c53:	3c 0a                	cmp    al,0xa
c0014c55:	74 13                	je     c0014c6a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c5c:	74 0c                	je     c0014c6a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c5e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014c64:	0f 8e d8 00 00 00    	jle    c0014d42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c6e:	83 ec 0c             	sub    esp,0xc
c0014c71:	8d 78 01             	lea    edi,[eax+0x1]
c0014c74:	57                   	push   edi
c0014c75:	e8 d9 50 ff ff       	call   c0009d53 <malloc>
c0014c7a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014c7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c82:	8d 56 04             	lea    edx,[esi+0x4]
c0014c85:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014c8c:	e8 c2 50 ff ff       	call   c0009d53 <malloc>
c0014c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c95:	83 c4 0c             	add    esp,0xc
c0014c98:	57                   	push   edi
c0014c99:	6a 00                	push   0x0
c0014c9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c9f:	e8 d8 b9 fe ff       	call   c000067c <memset>
c0014ca4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014ca8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014cac:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014cb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cb2:	83 c4 0c             	add    esp,0xc
c0014cb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cb9:	52                   	push   edx
c0014cba:	6a 00                	push   0x0
c0014cbc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014cc0:	e8 b7 b9 fe ff       	call   c000067c <memset>
c0014cc5:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014cc9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014ccd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cd0:	e8 c3 b9 fe ff       	call   c0000698 <strlen>
c0014cd5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014cd9:	89 c1                	mov    ecx,eax
c0014cdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ce0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014ce3:	40                   	inc    eax
c0014ce4:	83 c4 10             	add    esp,0x10
c0014ce7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014cea:	85 d2                	test   edx,edx
c0014cec:	75 0c                	jne    c0014cfa <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014cee:	83 ec 0c             	sub    esp,0xc
c0014cf1:	6a 08                	push   0x8
c0014cf3:	e8 5b 50 ff ff       	call   c0009d53 <malloc>
c0014cf8:	eb 0c                	jmp    c0014d06 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014cfa:	c1 e0 03             	shl    eax,0x3
c0014cfd:	51                   	push   ecx
c0014cfe:	51                   	push   ecx
c0014cff:	50                   	push   eax
c0014d00:	52                   	push   edx
c0014d01:	e8 39 50 ff ff       	call   c0009d3f <realloc>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d0f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014d12:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d16:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d1a:	b9 08 00 00 00       	mov    ecx,0x8
c0014d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d21:	31 f6                	xor    esi,esi
c0014d23:	50                   	push   eax
c0014d24:	68 00 01 00 00       	push   0x100
c0014d29:	6a 00                	push   0x0
c0014d2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d2f:	50                   	push   eax
c0014d30:	e8 47 b9 fe ff       	call   c000067c <memset>
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d40:	eb 0f                	jmp    c0014d51 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d42:	3c 3d                	cmp    al,0x3d
c0014d44:	74 07                	je     c0014d4d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014d46:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014d4a:	46                   	inc    esi
c0014d4b:	eb 04                	jmp    c0014d51 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d4d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014d51:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d56:	0f 85 c6 fe ff ff    	jne    c0014c22 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014d5c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d62:	5b                   	pop    ebx
c0014d63:	5e                   	pop    esi
c0014d64:	5f                   	pop    edi
c0014d65:	5d                   	pop    ebp
c0014d66:	c3                   	ret    
c0014d67:	90                   	nop

c0014d68 <EnvVarContainer::__loadSystem()>:
c0014d68:	83 ec 10             	sub    esp,0x10
c0014d6b:	68 80 86 02 c0       	push   0xc0028680
c0014d70:	68 f1 66 02 c0       	push   0xc00266f1
c0014d75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d79:	e8 04 fe ff ff       	call   c0014b82 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014d7e:	83 c4 1c             	add    esp,0x1c
c0014d81:	c3                   	ret    

c0014d82 <EnvVarContainer::__loadUser()>:
c0014d82:	c3                   	ret    
c0014d83:	90                   	nop

c0014d84 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014da4:	90                   	nop
c0014da5:	c3                   	ret    

c0014da6 <EnvVarContainer::~EnvVarContainer()>:
c0014da6:	83 ec 0c             	sub    esp,0xc
c0014da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db0:	85 c0                	test   eax,eax
c0014db2:	74 1d                	je     c0014dd1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dba:	85 c0                	test   eax,eax
c0014dbc:	74 13                	je     c0014dd1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	50                   	push   eax
c0014dc9:	e8 95 4f ff ff       	call   c0009d63 <free>
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	90                   	nop
c0014dd2:	83 c4 0c             	add    esp,0xc
c0014dd5:	c3                   	ret    

c0014dd6 <Krnl::getEnv(Process*, char const*)>:
c0014dd6:	53                   	push   ebx
c0014dd7:	83 ec 08             	sub    esp,0x8
c0014dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014de2:	39 05 f0 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1f0,eax
c0014de8:	74 04                	je     c0014dee <Krnl::getEnv(Process*, char const*)+0x18>
c0014dea:	85 c0                	test   eax,eax
c0014dec:	75 0b                	jne    c0014df9 <Krnl::getEnv(Process*, char const*)+0x23>
c0014dee:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0014df3:	85 c0                	test   eax,eax
c0014df5:	75 19                	jne    c0014e10 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014df7:	eb 27                	jmp    c0014e20 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014df9:	52                   	push   edx
c0014dfa:	52                   	push   edx
c0014dfb:	53                   	push   ebx
c0014dfc:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014e02:	e8 79 fc ff ff       	call   c0014a80 <EnvVarContainer::getEnv(char const*)>
c0014e07:	83 c4 10             	add    esp,0x10
c0014e0a:	85 c0                	test   eax,eax
c0014e0c:	75 28                	jne    c0014e36 <Krnl::getEnv(Process*, char const*)+0x60>
c0014e0e:	eb de                	jmp    c0014dee <Krnl::getEnv(Process*, char const*)+0x18>
c0014e10:	52                   	push   edx
c0014e11:	52                   	push   edx
c0014e12:	53                   	push   ebx
c0014e13:	50                   	push   eax
c0014e14:	e8 67 fc ff ff       	call   c0014a80 <EnvVarContainer::getEnv(char const*)>
c0014e19:	83 c4 10             	add    esp,0x10
c0014e1c:	85 c0                	test   eax,eax
c0014e1e:	75 16                	jne    c0014e36 <Krnl::getEnv(Process*, char const*)+0x60>
c0014e20:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e24:	a1 78 97 02 c0       	mov    eax,ds:0xc0029778
c0014e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e2d:	83 c4 08             	add    esp,0x8
c0014e30:	5b                   	pop    ebx
c0014e31:	e9 4a fc ff ff       	jmp    c0014a80 <EnvVarContainer::getEnv(char const*)>
c0014e36:	83 c4 08             	add    esp,0x8
c0014e39:	5b                   	pop    ebx
c0014e3a:	c3                   	ret    

c0014e3b <Krnl::setEnvSystem(char const*, char const*)>:
c0014e3b:	83 ec 10             	sub    esp,0x10
c0014e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e46:	ff 35 78 97 02 c0    	push   DWORD PTR ds:0xc0029778
c0014e4c:	e8 6d fc ff ff       	call   c0014abe <EnvVarContainer::setEnv(char const*, char const*)>
c0014e51:	83 c4 1c             	add    esp,0x1c
c0014e54:	c3                   	ret    

c0014e55 <Krnl::setEnvUser(char const*, char const*)>:
c0014e55:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0014e5a:	85 c0                	test   eax,eax
c0014e5c:	74 15                	je     c0014e73 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014e5e:	83 ec 10             	sub    esp,0x10
c0014e61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e69:	50                   	push   eax
c0014e6a:	e8 4f fc ff ff       	call   c0014abe <EnvVarContainer::setEnv(char const*, char const*)>
c0014e6f:	83 c4 1c             	add    esp,0x1c
c0014e72:	c3                   	ret    
c0014e73:	c3                   	ret    

c0014e74 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e78:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e82:	e9 37 fc ff ff       	jmp    c0014abe <EnvVarContainer::setEnv(char const*, char const*)>

c0014e87 <Krnl::deleteEnvSystem(char const*)>:
c0014e87:	c3                   	ret    

c0014e88 <Krnl::deleteEnvUser(char const*)>:
c0014e88:	c3                   	ret    

c0014e89 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014e89:	c3                   	ret    

c0014e8a <Krnl::newProcessEnv(Process*)>:
c0014e8a:	83 ec 28             	sub    esp,0x28
c0014e8d:	6a 0c                	push   0xc
c0014e8f:	e8 bf 4e ff ff       	call   c0009d53 <malloc>
c0014e94:	5a                   	pop    edx
c0014e95:	59                   	pop    ecx
c0014e96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e9a:	50                   	push   eax
c0014e9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e9f:	e8 e0 fe ff ff       	call   c0014d84 <EnvVarContainer::EnvVarContainer(Process*)>
c0014ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ea8:	83 c4 2c             	add    esp,0x2c
c0014eab:	c3                   	ret    

c0014eac <Krnl::copyProcessEnv(Process*, Process*)>:
c0014eac:	57                   	push   edi
c0014ead:	56                   	push   esi
c0014eae:	53                   	push   ebx
c0014eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb3:	83 ec 0c             	sub    esp,0xc
c0014eb6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014ebc:	6a 0c                	push   0xc
c0014ebe:	e8 90 4e ff ff       	call   c0009d53 <malloc>
c0014ec3:	89 c3                	mov    ebx,eax
c0014ec5:	58                   	pop    eax
c0014ec6:	5a                   	pop    edx
c0014ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ecb:	53                   	push   ebx
c0014ecc:	e8 b3 fe ff ff       	call   c0014d84 <EnvVarContainer::EnvVarContainer(Process*)>
c0014ed1:	8b 07                	mov    eax,DWORD PTR [edi]
c0014ed3:	89 03                	mov    DWORD PTR [ebx],eax
c0014ed5:	c1 e0 03             	shl    eax,0x3
c0014ed8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014edb:	e8 73 4e ff ff       	call   c0009d53 <malloc>
c0014ee0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014ee3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ee5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014ee8:	c1 e1 03             	shl    ecx,0x3
c0014eeb:	89 c7                	mov    edi,eax
c0014eed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	89 d8                	mov    eax,ebx
c0014ef4:	5b                   	pop    ebx
c0014ef5:	5e                   	pop    esi
c0014ef6:	5f                   	pop    edi
c0014ef7:	c3                   	ret    

c0014ef8 <Krnl::loadSystemEnv()>:
c0014ef8:	53                   	push   ebx
c0014ef9:	83 ec 14             	sub    esp,0x14
c0014efc:	6a 0c                	push   0xc
c0014efe:	e8 50 4e ff ff       	call   c0009d53 <malloc>
c0014f03:	89 c3                	mov    ebx,eax
c0014f05:	58                   	pop    eax
c0014f06:	5a                   	pop    edx
c0014f07:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0014f0d:	53                   	push   ebx
c0014f0e:	e8 71 fe ff ff       	call   c0014d84 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f16:	89 1d 78 97 02 c0    	mov    DWORD PTR ds:0xc0029778,ebx
c0014f1c:	e8 47 fe ff ff       	call   c0014d68 <EnvVarContainer::__loadSystem()>
c0014f21:	83 c4 18             	add    esp,0x18
c0014f24:	5b                   	pop    ebx
c0014f25:	c3                   	ret    

c0014f26 <Krnl::loadUserEnv()>:
c0014f26:	53                   	push   ebx
c0014f27:	83 ec 14             	sub    esp,0x14
c0014f2a:	6a 0c                	push   0xc
c0014f2c:	e8 22 4e ff ff       	call   c0009d53 <malloc>
c0014f31:	89 c3                	mov    ebx,eax
c0014f33:	58                   	pop    eax
c0014f34:	5a                   	pop    edx
c0014f35:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0014f3b:	53                   	push   ebx
c0014f3c:	e8 43 fe ff ff       	call   c0014d84 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f41:	89 1d 74 97 02 c0    	mov    DWORD PTR ds:0xc0029774,ebx
c0014f47:	83 c4 18             	add    esp,0x18
c0014f4a:	5b                   	pop    ebx
c0014f4b:	c3                   	ret    

c0014f4c <Krnl::flushEnv()>:
c0014f4c:	c3                   	ret    

c0014f4d <Krnl::getProcessTotalEnvCount(Process*)>:
c0014f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f51:	8b 15 74 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029774
c0014f57:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f5d:	a1 78 97 02 c0       	mov    eax,ds:0xc0029778
c0014f62:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f64:	03 01                	add    eax,DWORD PTR [ecx]
c0014f66:	85 d2                	test   edx,edx
c0014f68:	74 02                	je     c0014f6c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014f6a:	03 02                	add    eax,DWORD PTR [edx]
c0014f6c:	c3                   	ret    

c0014f6d <Krnl::getProcessEnvPair(Process*, int)>:
c0014f6d:	57                   	push   edi
c0014f6e:	56                   	push   esi
c0014f6f:	8b 35 74 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029774
c0014f75:	53                   	push   ebx
c0014f76:	85 f6                	test   esi,esi
c0014f78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f80:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014f8c:	75 16                	jne    c0014fa4 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014f8e:	39 c2                	cmp    edx,eax
c0014f90:	7c 16                	jl     c0014fa8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014f92:	8b 0d 78 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029778
c0014f98:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014f9a:	01 c6                	add    esi,eax
c0014f9c:	39 d6                	cmp    esi,edx
c0014f9e:	7e 3c                	jle    c0014fdc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014fa0:	29 c2                	sub    edx,eax
c0014fa2:	eb 04                	jmp    c0014fa8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014fa4:	39 c2                	cmp    edx,eax
c0014fa6:	7d 05                	jge    c0014fad <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014fa8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014fab:	eb 20                	jmp    c0014fcd <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014fad:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014faf:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014fb2:	39 d1                	cmp    ecx,edx
c0014fb4:	7e 04                	jle    c0014fba <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014fb6:	29 c2                	sub    edx,eax
c0014fb8:	eb 10                	jmp    c0014fca <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014fba:	8b 35 78 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029778
c0014fc0:	03 0e                	add    ecx,DWORD PTR [esi]
c0014fc2:	39 d1                	cmp    ecx,edx
c0014fc4:	7e 16                	jle    c0014fdc <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014fc6:	29 c2                	sub    edx,eax
c0014fc8:	29 fa                	sub    edx,edi
c0014fca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014fcd:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014fd0:	8b 02                	mov    eax,DWORD PTR [edx]
c0014fd2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014fd5:	89 03                	mov    DWORD PTR [ebx],eax
c0014fd7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014fda:	eb 1d                	jmp    c0014ff9 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014fdc:	83 ec 0c             	sub    esp,0xc
c0014fdf:	68 13 67 02 c0       	push   0xc0026713
c0014fe4:	e8 18 00 00 00       	call   c0015001 <Krnl::panic(char const*)>
c0014fe9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014fef:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	89 d8                	mov    eax,ebx
c0014ffb:	5b                   	pop    ebx
c0014ffc:	5e                   	pop    esi
c0014ffd:	5f                   	pop    edi
c0014ffe:	c2 04 00             	ret    0x4

c0015001 <Krnl::panic(char const*)>:
c0015001:	53                   	push   ebx
c0015002:	83 ec 10             	sub    esp,0x10
c0015005:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015009:	fa                   	cli    
c001500a:	c6 05 84 97 02 c0 01 	mov    BYTE PTR ds:0xc0029784,0x1
c0015011:	53                   	push   ebx
c0015012:	68 2d 67 02 c0       	push   0xc002672d
c0015017:	e8 23 80 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001501c:	83 c4 0c             	add    esp,0xc
c001501f:	6a 01                	push   0x1
c0015021:	6a 0f                	push   0xf
c0015023:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015029:	e8 7e 5c ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001502e:	59                   	pop    ecx
c001502f:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015035:	e8 94 61 ff ff       	call   c000b1ce <VgaText::clearScreen()>
c001503a:	58                   	pop    eax
c001503b:	5a                   	pop    edx
c001503c:	68 84 67 02 c0       	push   0xc0026784
c0015041:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015047:	e8 a0 5c ff ff       	call   c000acec <VgaText::setTitle(char*)>
c001504c:	83 c4 0c             	add    esp,0xc
c001504f:	6a 01                	push   0x1
c0015051:	6a 0f                	push   0xf
c0015053:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015059:	e8 4e 5c ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001505e:	59                   	pop    ecx
c001505f:	58                   	pop    eax
c0015060:	68 46 67 02 c0       	push   0xc0026746
c0015065:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001506b:	e8 ea 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015070:	58                   	pop    eax
c0015071:	5a                   	pop    edx
c0015072:	68 d0 67 02 c0       	push   0xc00267d0
c0015077:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001507d:	e8 d8 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015082:	59                   	pop    ecx
c0015083:	58                   	pop    eax
c0015084:	68 62 67 02 c0       	push   0xc0026762
c0015089:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001508f:	e8 c6 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015094:	58                   	pop    eax
c0015095:	5a                   	pop    edx
c0015096:	53                   	push   ebx
c0015097:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001509d:	e8 b8 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150a2:	59                   	pop    ecx
c00150a3:	5b                   	pop    ebx
c00150a4:	68 82 67 02 c0       	push   0xc0026782
c00150a9:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00150af:	e8 a6 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150b4:	58                   	pop    eax
c00150b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b9:	e8 17 31 00 00       	call   c00181d5 <Thr::getDriverNameFromAddress(unsigned long)>
c00150be:	83 c4 10             	add    esp,0x10
c00150c1:	85 c0                	test   eax,eax
c00150c3:	0f 84 36 01 00 00    	je     c00151ff <Krnl::panic(char const*)+0x1fe>
c00150c9:	83 ec 08             	sub    esp,0x8
c00150cc:	89 c3                	mov    ebx,eax
c00150ce:	68 0c 68 02 c0       	push   0xc002680c
c00150d3:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00150d9:	e8 7c 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150de:	59                   	pop    ecx
c00150df:	58                   	pop    eax
c00150e0:	68 62 67 02 c0       	push   0xc0026762
c00150e5:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00150eb:	e8 6a 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150f0:	58                   	pop    eax
c00150f1:	5a                   	pop    edx
c00150f2:	53                   	push   ebx
c00150f3:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00150f9:	e8 5c 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	83 ec 08             	sub    esp,0x8
c0015104:	68 81 67 02 c0       	push   0xc0026781
c0015109:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001510f:	e8 46 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015114:	58                   	pop    eax
c0015115:	5a                   	pop    edx
c0015116:	68 64 68 02 c0       	push   0xc0026864
c001511b:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015121:	e8 34 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015126:	59                   	pop    ecx
c0015127:	5b                   	pop    ebx
c0015128:	68 a4 68 02 c0       	push   0xc00268a4
c001512d:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015133:	e8 22 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015138:	58                   	pop    eax
c0015139:	5a                   	pop    edx
c001513a:	68 6d 67 02 c0       	push   0xc002676d
c001513f:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015145:	e8 10 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001514a:	59                   	pop    ecx
c001514b:	5b                   	pop    ebx
c001514c:	68 e8 68 02 c0       	push   0xc00268e8
c0015151:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015157:	e8 fe 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001515c:	58                   	pop    eax
c001515d:	5a                   	pop    edx
c001515e:	68 85 67 02 c0       	push   0xc0026785
c0015163:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015169:	e8 ec 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001516e:	0f 20 c0             	mov    eax,cr0
c0015171:	59                   	pop    ecx
c0015172:	5b                   	pop    ebx
c0015173:	50                   	push   eax
c0015174:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001517a:	e8 95 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c001517f:	58                   	pop    eax
c0015180:	5a                   	pop    edx
c0015181:	68 8f 67 02 c0       	push   0xc002678f
c0015186:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001518c:	e8 c9 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015191:	0f 20 d0             	mov    eax,cr2
c0015194:	59                   	pop    ecx
c0015195:	5b                   	pop    ebx
c0015196:	50                   	push   eax
c0015197:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001519d:	e8 72 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c00151a2:	58                   	pop    eax
c00151a3:	5a                   	pop    edx
c00151a4:	68 99 67 02 c0       	push   0xc0026799
c00151a9:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00151af:	e8 a6 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151b4:	0f 20 d8             	mov    eax,cr3
c00151b7:	59                   	pop    ecx
c00151b8:	5b                   	pop    ebx
c00151b9:	50                   	push   eax
c00151ba:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00151c0:	e8 4f 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c00151c5:	58                   	pop    eax
c00151c6:	5a                   	pop    edx
c00151c7:	68 ac 67 02 c0       	push   0xc00267ac
c00151cc:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00151d2:	e8 83 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151d7:	0f 20 e0             	mov    eax,cr4
c00151da:	59                   	pop    ecx
c00151db:	5b                   	pop    ebx
c00151dc:	50                   	push   eax
c00151dd:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00151e3:	e8 2c 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c00151e8:	58                   	pop    eax
c00151e9:	5a                   	pop    edx
c00151ea:	68 b6 67 02 c0       	push   0xc00267b6
c00151ef:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c00151f5:	e8 60 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	eb fe                	jmp    c00151fd <Krnl::panic(char const*)+0x1fc>
c00151ff:	51                   	push   ecx
c0015200:	51                   	push   ecx
c0015201:	68 38 68 02 c0       	push   0xc0026838
c0015206:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001520c:	e8 49 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015211:	5b                   	pop    ebx
c0015212:	58                   	pop    eax
c0015213:	68 62 67 02 c0       	push   0xc0026762
c0015218:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c001521e:	e8 37 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015223:	58                   	pop    eax
c0015224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015229:	5a                   	pop    edx
c001522a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001522d:	83 c0 0c             	add    eax,0xc
c0015230:	50                   	push   eax
c0015231:	ff 35 24 8d 02 c0    	push   DWORD PTR ds:0xc0028d24
c0015237:	e8 1e 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	e9 bd fe ff ff       	jmp    c0015101 <Krnl::panic(char const*)+0x100>

c0015244 <Krnl::powerThread(void*)>:
c0015244:	53                   	push   ebx
c0015245:	83 ec 08             	sub    esp,0x8
c0015248:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c001524d:	48                   	dec    eax
c001524e:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0015253:	75 01                	jne    c0015256 <Krnl::powerThread(void*)+0x12>
c0015255:	fb                   	sti    
c0015256:	52                   	push   edx
c0015257:	52                   	push   edx
c0015258:	ff 35 e4 97 02 c0    	push   DWORD PTR ds:0xc00297e4
c001525e:	68 0e 69 02 c0       	push   0xc002690e
c0015263:	e8 d7 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0015268:	59                   	pop    ecx
c0015269:	8b 1d d4 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297d4
c001526f:	58                   	pop    eax
c0015270:	c6 05 a0 97 02 c0 00 	mov    BYTE PTR ds:0xc00297a0,0x0
c0015277:	53                   	push   ebx
c0015278:	68 18 69 02 c0       	push   0xc0026918
c001527d:	e8 bd 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0015282:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0015289:	e8 da 3d 00 00       	call   c0019068 <sleep(unsigned int)>
c001528e:	a1 e4 97 02 c0       	mov    eax,ds:0xc00297e4
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	83 c0 0a             	add    eax,0xa
c0015299:	85 db                	test   ebx,ebx
c001529b:	a3 e4 97 02 c0       	mov    ds:0xc00297e4,eax
c00152a0:	74 b4                	je     c0015256 <Krnl::powerThread(void*)+0x12>
c00152a2:	39 d8                	cmp    eax,ebx
c00152a4:	7e b0                	jle    c0015256 <Krnl::powerThread(void*)+0x12>
c00152a6:	83 ec 0c             	sub    esp,0xc
c00152a9:	68 30 69 02 c0       	push   0xc0026930
c00152ae:	e8 8c 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00152b3:	58                   	pop    eax
c00152b4:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c00152ba:	e8 3b 40 ff ff       	call   c00092fa <Computer::sleep()>
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	eb 92                	jmp    c0015256 <Krnl::powerThread(void*)+0x12>

c00152c4 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00152c4:	57                   	push   edi
c00152c5:	b9 09 00 00 00       	mov    ecx,0x9
c00152ca:	56                   	push   esi
c00152cb:	bf c0 97 02 c0       	mov    edi,0xc00297c0
c00152d0:	fc                   	cld    
c00152d1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00152d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152d7:	5e                   	pop    esi
c00152d8:	5f                   	pop    edi
c00152d9:	c3                   	ret    

c00152da <Krnl::userIOReceived()>:
c00152da:	c7 05 e4 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297e4,0x0
c00152e4:	c3                   	ret    

c00152e5 <Krnl::handlePowerButton()>:
c00152e5:	83 ec 0c             	sub    esp,0xc
c00152e8:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c00152ed:	83 f8 02             	cmp    eax,0x2
c00152f0:	75 10                	jne    c0015302 <Krnl::handlePowerButton()+0x1d>
c00152f2:	83 ec 0c             	sub    esp,0xc
c00152f5:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c00152fb:	e8 ca 3f ff ff       	call   c00092ca <Computer::shutdown()>
c0015300:	eb 11                	jmp    c0015313 <Krnl::handlePowerButton()+0x2e>
c0015302:	48                   	dec    eax
c0015303:	75 11                	jne    c0015316 <Krnl::handlePowerButton()+0x31>
c0015305:	83 ec 0c             	sub    esp,0xc
c0015308:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c001530e:	e8 e7 3f ff ff       	call   c00092fa <Computer::sleep()>
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	83 c4 0c             	add    esp,0xc
c0015319:	c3                   	ret    

c001531a <Krnl::handleSleepButton()>:
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0015322:	83 f8 02             	cmp    eax,0x2
c0015325:	75 10                	jne    c0015337 <Krnl::handleSleepButton()+0x1d>
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c0015330:	e8 95 3f ff ff       	call   c00092ca <Computer::shutdown()>
c0015335:	eb 11                	jmp    c0015348 <Krnl::handleSleepButton()+0x2e>
c0015337:	48                   	dec    eax
c0015338:	75 11                	jne    c001534b <Krnl::handleSleepButton()+0x31>
c001533a:	83 ec 0c             	sub    esp,0xc
c001533d:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c0015343:	e8 b2 3f ff ff       	call   c00092fa <Computer::sleep()>
c0015348:	83 c4 10             	add    esp,0x10
c001534b:	83 c4 0c             	add    esp,0xc
c001534e:	c3                   	ret    

c001534f <Krnl::setupPowerManager()>:
c001534f:	83 ec 0c             	sub    esp,0xc
c0015352:	c7 05 e4 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297e4,0x0
c001535c:	68 f0 00 00 00       	push   0xf0
c0015361:	c6 05 a0 97 02 c0 00 	mov    BYTE PTR ds:0xc00297a0,0x0
c0015368:	6a 00                	push   0x0
c001536a:	68 44 52 01 c0       	push   0xc0015244
c001536f:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0015375:	e8 ca 37 00 00       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c001537a:	c7 05 c0 97 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x2
c0015384:	c7 05 c4 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297c4,0x1
c001538e:	c7 05 c8 97 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00297c8,0x3
c0015398:	c7 05 cc 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297cc,0x0
c00153a2:	c7 05 d8 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297d8,0x0
c00153ac:	c7 05 d0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297d0,0x0
c00153b6:	c7 05 dc 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297dc,0x0
c00153c0:	c7 05 d4 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00297d4,0x3c
c00153ca:	c7 05 e0 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00297e0,0x3c
c00153d4:	83 c4 1c             	add    esp,0x1c
c00153d7:	c3                   	ret    

c00153d8 <Net::switchEndian16(unsigned short)>:
c00153d8:	83 ec 04             	sub    esp,0x4
c00153db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153df:	66 89 04 24          	mov    WORD PTR [esp],ax
c00153e3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153e7:	c1 f8 08             	sar    eax,0x8
c00153ea:	89 c2                	mov    edx,eax
c00153ec:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153f0:	c1 e0 08             	shl    eax,0x8
c00153f3:	09 d0                	or     eax,edx
c00153f5:	83 c4 04             	add    esp,0x4
c00153f8:	c3                   	ret    
c00153f9:	8d 76 00             	lea    esi,[esi+0x0]

c00153fc <Net::switchEndian32(unsigned int)>:
c00153fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015400:	c1 e8 18             	shr    eax,0x18
c0015403:	89 c2                	mov    edx,eax
c0015405:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015409:	c1 e0 08             	shl    eax,0x8
c001540c:	25 00 00 ff 00       	and    eax,0xff0000
c0015411:	09 c2                	or     edx,eax
c0015413:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015417:	c1 e8 08             	shr    eax,0x8
c001541a:	25 00 ff 00 00       	and    eax,0xff00
c001541f:	09 c2                	or     edx,eax
c0015421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015425:	c1 e0 18             	shl    eax,0x18
c0015428:	09 d0                	or     eax,edx
c001542a:	c3                   	ret    
c001542b:	90                   	nop

c001542c <Net::crc32Calc(unsigned char*, int)>:
c001542c:	83 ec 10             	sub    esp,0x10
c001542f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015434:	75 0a                	jne    c0015440 <Net::crc32Calc(unsigned char*, int)+0x14>
c0015436:	b8 00 00 00 00       	mov    eax,0x0
c001543b:	e9 8c 00 00 00       	jmp    c00154cc <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015440:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015445:	7f 09                	jg     c0015450 <Net::crc32Calc(unsigned char*, int)+0x24>
c0015447:	b8 00 00 00 00       	mov    eax,0x0
c001544c:	eb 7e                	jmp    c00154cc <Net::crc32Calc(unsigned char*, int)+0xa0>
c001544e:	66 90                	xchg   ax,ax
c0015450:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0015458:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015464:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0015468:	7d 5a                	jge    c00154c4 <Net::crc32Calc(unsigned char*, int)+0x98>
c001546a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001546e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015472:	01 d0                	add    eax,edx
c0015474:	8a 00                	mov    al,BYTE PTR [eax]
c0015476:	0f b6 c0             	movzx  eax,al
c0015479:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001547d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015485:	8d 76 00             	lea    esi,[esi+0x0]
c0015488:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001548d:	7f 2d                	jg     c00154bc <Net::crc32Calc(unsigned char*, int)+0x90>
c001548f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015493:	83 e0 01             	and    eax,0x1
c0015496:	74 10                	je     c00154a8 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0015498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001549c:	d1 e8                	shr    eax,1
c001549e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00154a3:	eb 0b                	jmp    c00154b0 <Net::crc32Calc(unsigned char*, int)+0x84>
c00154a5:	8d 76 00             	lea    esi,[esi+0x0]
c00154a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154ac:	d1 e8                	shr    eax,1
c00154ae:	66 90                	xchg   ax,ax
c00154b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00154b8:	eb ce                	jmp    c0015488 <Net::crc32Calc(unsigned char*, int)+0x5c>
c00154ba:	66 90                	xchg   ax,ax
c00154bc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00154c0:	eb 9e                	jmp    c0015460 <Net::crc32Calc(unsigned char*, int)+0x34>
c00154c2:	66 90                	xchg   ax,ax
c00154c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154c8:	f7 d0                	not    eax
c00154ca:	66 90                	xchg   ax,ax
c00154cc:	83 c4 10             	add    esp,0x10
c00154cf:	c3                   	ret    

c00154d0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00154d0:	57                   	push   edi
c00154d1:	56                   	push   esi
c00154d2:	53                   	push   ebx
c00154d3:	83 ec 60             	sub    esp,0x60
c00154d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154dd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00154e1:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00154e9:	8d 76 00             	lea    esi,[esi+0x0]
c00154ec:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00154f1:	7f 1d                	jg     c0015510 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00154f3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154fa:	8d 50 01             	lea    edx,[eax+0x1]
c00154fd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015504:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0015507:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001550b:	eb df                	jmp    c00154ec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c001550d:	8d 76 00             	lea    esi,[esi+0x0]
c0015510:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015517:	8d 50 01             	lea    edx,[eax+0x1]
c001551a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015521:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015524:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001552b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001552f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015533:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015537:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001553f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001554b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001554f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015553:	89 c6                	mov    esi,eax
c0015555:	89 d7                	mov    edi,edx
c0015557:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015559:	89 c8                	mov    eax,ecx
c001555b:	89 fa                	mov    edx,edi
c001555d:	89 f3                	mov    ebx,esi
c001555f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015563:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015567:	89 04 24             	mov    DWORD PTR [esp],eax
c001556a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015572:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015579:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001557d:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015581:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015585:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001558d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015591:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015599:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001559d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00155a1:	89 c6                	mov    esi,eax
c00155a3:	89 d7                	mov    edi,edx
c00155a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155a7:	89 c8                	mov    eax,ecx
c00155a9:	89 fa                	mov    edx,edi
c00155ab:	89 f3                	mov    ebx,esi
c00155ad:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00155b1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00155b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00155b9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00155c1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00155c8:	0f b7 c0             	movzx  eax,ax
c00155cb:	c1 f8 08             	sar    eax,0x8
c00155ce:	89 c1                	mov    ecx,eax
c00155d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155d7:	8d 50 01             	lea    edx,[eax+0x1]
c00155da:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00155e1:	88 ca                	mov    dl,cl
c00155e3:	88 10                	mov    BYTE PTR [eax],dl
c00155e5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00155ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00155f6:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00155fd:	88 10                	mov    BYTE PTR [eax],dl
c00155ff:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015603:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015607:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001560e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015612:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0015616:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001561a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001561e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015622:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015626:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001562a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001562e:	89 c6                	mov    esi,eax
c0015630:	89 d7                	mov    edi,edx
c0015632:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015634:	89 c8                	mov    eax,ecx
c0015636:	89 fa                	mov    edx,edi
c0015638:	89 f3                	mov    ebx,esi
c001563a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001563e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015642:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015646:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001564a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015651:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015658:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001565c:	50                   	push   eax
c001565d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015661:	e8 c6 fd ff ff       	call   c001542c <Net::crc32Calc(unsigned char*, int)>
c0015666:	83 c4 08             	add    esp,0x8
c0015669:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001566d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015671:	c1 e8 18             	shr    eax,0x18
c0015674:	89 c1                	mov    ecx,eax
c0015676:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001567d:	8d 50 01             	lea    edx,[eax+0x1]
c0015680:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015687:	88 ca                	mov    dl,cl
c0015689:	88 10                	mov    BYTE PTR [eax],dl
c001568b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001568f:	c1 e8 10             	shr    eax,0x10
c0015692:	89 c1                	mov    ecx,eax
c0015694:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001569b:	8d 50 01             	lea    edx,[eax+0x1]
c001569e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156a5:	88 ca                	mov    dl,cl
c00156a7:	88 10                	mov    BYTE PTR [eax],dl
c00156a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00156ad:	c1 e8 08             	shr    eax,0x8
c00156b0:	89 c1                	mov    ecx,eax
c00156b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156b9:	8d 50 01             	lea    edx,[eax+0x1]
c00156bc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156c3:	88 ca                	mov    dl,cl
c00156c5:	88 10                	mov    BYTE PTR [eax],dl
c00156c7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156ce:	8d 50 01             	lea    edx,[eax+0x1]
c00156d1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156d8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00156dc:	88 10                	mov    BYTE PTR [eax],dl
c00156de:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00156e2:	83 c4 60             	add    esp,0x60
c00156e5:	5b                   	pop    ebx
c00156e6:	5e                   	pop    esi
c00156e7:	5f                   	pop    edi
c00156e8:	c3                   	ret    
c00156e9:	8d 76 00             	lea    esi,[esi+0x0]

c00156ec <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00156ec:	57                   	push   edi
c00156ed:	56                   	push   esi
c00156ee:	53                   	push   ebx
c00156ef:	83 ec 70             	sub    esp,0x70
c00156f2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00156f9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00156fd:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015705:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001570c:	83 c0 0e             	add    eax,0xe
c001570f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015713:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001571a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001571e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015726:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001572a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001572e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015732:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015736:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001573a:	89 c6                	mov    esi,eax
c001573c:	89 d7                	mov    edi,edx
c001573e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015740:	89 c8                	mov    eax,ecx
c0015742:	89 fa                	mov    edx,edi
c0015744:	89 f3                	mov    ebx,esi
c0015746:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001574a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001574e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015752:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001575a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015761:	83 c0 08             	add    eax,0x8
c0015764:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015768:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001576f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015773:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001577b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001577f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015783:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015787:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001578b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001578f:	89 c6                	mov    esi,eax
c0015791:	89 d7                	mov    edi,edx
c0015793:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015795:	89 c8                	mov    eax,ecx
c0015797:	89 fa                	mov    edx,edi
c0015799:	89 f3                	mov    ebx,esi
c001579b:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001579f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00157a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00157a7:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00157af:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157b6:	8d 50 01             	lea    edx,[eax+0x1]
c00157b9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157c0:	8a 00                	mov    al,BYTE PTR [eax]
c00157c2:	0f b6 c0             	movzx  eax,al
c00157c5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00157ca:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157d1:	8d 50 01             	lea    edx,[eax+0x1]
c00157d4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157db:	8a 00                	mov    al,BYTE PTR [eax]
c00157dd:	0f b6 c0             	movzx  eax,al
c00157e0:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00157e5:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00157ea:	c1 e0 08             	shl    eax,0x8
c00157ed:	89 c2                	mov    edx,eax
c00157ef:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00157f3:	09 d0                	or     eax,edx
c00157f5:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00157fc:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015800:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015808:	75 46                	jne    c0015850 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001580a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015811:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015814:	66 3d dc 05          	cmp    ax,0x5dc
c0015818:	77 16                	ja     c0015830 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001581a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015821:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015824:	0f b7 c0             	movzx  eax,ax
c0015827:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001582e:	eb 20                	jmp    c0015850 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015830:	83 ec 0c             	sub    esp,0xc
c0015833:	68 40 69 02 c0       	push   0xc0026940
c0015838:	e8 02 78 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015847:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001584b:	e9 18 01 00 00       	jmp    c0015968 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015850:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015857:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001585e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015860:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015864:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001586b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001586f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015873:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001587b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001587f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015883:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015887:	89 c6                	mov    esi,eax
c0015889:	89 d7                	mov    edi,edx
c001588b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001588d:	89 c8                	mov    eax,ecx
c001588f:	89 fa                	mov    edx,edi
c0015891:	89 f3                	mov    ebx,esi
c0015893:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015897:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001589b:	89 04 24             	mov    DWORD PTR [esp],eax
c001589e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158a5:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00158ac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158b3:	8d 50 01             	lea    edx,[eax+0x1]
c00158b6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158bd:	8a 00                	mov    al,BYTE PTR [eax]
c00158bf:	0f b6 c0             	movzx  eax,al
c00158c2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00158c6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158cd:	8d 50 01             	lea    edx,[eax+0x1]
c00158d0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158d7:	8a 00                	mov    al,BYTE PTR [eax]
c00158d9:	0f b6 c0             	movzx  eax,al
c00158dc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00158e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158e7:	8d 50 01             	lea    edx,[eax+0x1]
c00158ea:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158f1:	8a 00                	mov    al,BYTE PTR [eax]
c00158f3:	0f b6 c0             	movzx  eax,al
c00158f6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00158fa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015901:	8d 50 01             	lea    edx,[eax+0x1]
c0015904:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001590b:	8a 00                	mov    al,BYTE PTR [eax]
c001590d:	0f b6 c0             	movzx  eax,al
c0015910:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015914:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015918:	c1 e0 18             	shl    eax,0x18
c001591b:	89 c2                	mov    edx,eax
c001591d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015921:	c1 e0 10             	shl    eax,0x10
c0015924:	09 c2                	or     edx,eax
c0015926:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001592a:	c1 e0 08             	shl    eax,0x8
c001592d:	09 d0                	or     eax,edx
c001592f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015933:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015937:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001593e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015942:	83 e8 04             	sub    eax,0x4
c0015945:	83 ec 08             	sub    esp,0x8
c0015948:	50                   	push   eax
c0015949:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001594d:	e8 da fa ff ff       	call   c001542c <Net::crc32Calc(unsigned char*, int)>
c0015952:	83 c4 10             	add    esp,0x10
c0015955:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015959:	0f 94 c2             	sete   dl
c001595c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015963:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015966:	90                   	nop
c0015967:	90                   	nop
c0015968:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001596f:	83 c4 70             	add    esp,0x70
c0015972:	5b                   	pop    ebx
c0015973:	5e                   	pop    esi
c0015974:	5f                   	pop    edi
c0015975:	c2 04 00             	ret    0x4

c0015978 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015978:	55                   	push   ebp
c0015979:	57                   	push   edi
c001597a:	56                   	push   esi
c001597b:	53                   	push   ebx
c001597c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015982:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015989:	8a 1e                	mov    bl,BYTE PTR [esi]
c001598b:	8d 6e 01             	lea    ebp,[esi+0x1]
c001598e:	80 fb 40             	cmp    bl,0x40
c0015991:	75 1b                	jne    c00159ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015993:	8a 16                	mov    dl,BYTE PTR [esi]
c0015995:	84 d2                	test   dl,dl
c0015997:	0f 84 f1 00 00 00    	je     c0015a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001599d:	8d 46 01             	lea    eax,[esi+0x1]
c00159a0:	80 fa 3a             	cmp    dl,0x3a
c00159a3:	74 04                	je     c00159a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00159a5:	89 c6                	mov    esi,eax
c00159a7:	eb ea                	jmp    c0015993 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00159a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00159ac:	89 c6                	mov    esi,eax
c00159ae:	50                   	push   eax
c00159af:	6a 40                	push   0x40
c00159b1:	6a 00                	push   0x0
c00159b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00159b7:	50                   	push   eax
c00159b8:	e8 bf ac fe ff       	call   c000067c <memset>
c00159bd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00159c4:	31 c0                	xor    eax,eax
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	8a 0f                	mov    cl,BYTE PTR [edi]
c00159cb:	84 c9                	test   cl,cl
c00159cd:	0f 84 bb 00 00 00    	je     c0015a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159d3:	3d c7 00 00 00       	cmp    eax,0xc7
c00159d8:	0f 8f b0 00 00 00    	jg     c0015a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159de:	80 f9 0a             	cmp    cl,0xa
c00159e1:	0f 85 98 00 00 00    	jne    c0015a7f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00159e7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00159ec:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00159f0:	a8 df                	test   al,0xdf
c00159f2:	0f 94 c1             	sete   cl
c00159f5:	3c 23                	cmp    al,0x23
c00159f7:	0f 94 c2             	sete   dl
c00159fa:	08 d1                	or     cl,dl
c00159fc:	75 4a                	jne    c0015a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159fe:	8d 50 f7             	lea    edx,[eax-0x9]
c0015a01:	80 fa 01             	cmp    dl,0x1
c0015a04:	76 42                	jbe    c0015a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a06:	3c 5b                	cmp    al,0x5b
c0015a08:	75 42                	jne    c0015a4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015a0a:	80 fb 40             	cmp    bl,0x40
c0015a0d:	75 39                	jne    c0015a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a0f:	83 ec 0c             	sub    esp,0xc
c0015a12:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015a16:	52                   	push   edx
c0015a17:	e8 7c ac fe ff       	call   c0000698 <strlen>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	83 f8 3f             	cmp    eax,0x3f
c0015a22:	77 6a                	ja     c0015a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a24:	50                   	push   eax
c0015a25:	50                   	push   eax
c0015a26:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015a2a:	52                   	push   edx
c0015a2b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a2f:	52                   	push   edx
c0015a30:	e8 03 ad fe ff       	call   c0000738 <strcpy>
c0015a35:	58                   	pop    eax
c0015a36:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a3a:	52                   	push   edx
c0015a3b:	e8 58 ac fe ff       	call   c0000698 <strlen>
c0015a40:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	31 d2                	xor    edx,edx
c0015a4a:	eb 3a                	jmp    c0015a86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015a4c:	80 fb 40             	cmp    bl,0x40
c0015a4f:	74 06                	je     c0015a57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015a55:	eb 20                	jmp    c0015a77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015a57:	50                   	push   eax
c0015a58:	50                   	push   eax
c0015a59:	55                   	push   ebp
c0015a5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015a5e:	50                   	push   eax
c0015a5f:	e8 60 ad fe ff       	call   c00007c4 <strcmp>
c0015a64:	83 c4 10             	add    esp,0x10
c0015a67:	85 c0                	test   eax,eax
c0015a69:	75 dd                	jne    c0015a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a6b:	eb e4                	jmp    c0015a51 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015a6d:	8d 50 01             	lea    edx,[eax+0x1]
c0015a70:	80 f9 3d             	cmp    cl,0x3d
c0015a73:	74 1d                	je     c0015a92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015a75:	89 d0                	mov    eax,edx
c0015a77:	8a 08                	mov    cl,BYTE PTR [eax]
c0015a79:	84 c9                	test   cl,cl
c0015a7b:	75 f0                	jne    c0015a6d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015a7d:	eb 0f                	jmp    c0015a8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0015a82:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015a86:	47                   	inc    edi
c0015a87:	89 d0                	mov    eax,edx
c0015a89:	e9 3b ff ff ff       	jmp    c00159c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015a8e:	31 c0                	xor    eax,eax
c0015a90:	eb 33                	jmp    c0015ac5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015a92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015a96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015a99:	50                   	push   eax
c0015a9a:	50                   	push   eax
c0015a9b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015a9f:	50                   	push   eax
c0015aa0:	56                   	push   esi
c0015aa1:	e8 1e ad fe ff       	call   c00007c4 <strcmp>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	85 c0                	test   eax,eax
c0015aab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015aaf:	75 97                	jne    c0015a48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015ab1:	51                   	push   ecx
c0015ab2:	51                   	push   ecx
c0015ab3:	52                   	push   edx
c0015ab4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015abb:	e8 78 ac fe ff       	call   c0000738 <strcpy>
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	b0 01                	mov    al,0x1
c0015ac5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015acb:	5b                   	pop    ebx
c0015acc:	5e                   	pop    esi
c0015acd:	5f                   	pop    edi
c0015ace:	5d                   	pop    ebp
c0015acf:	c3                   	ret    

c0015ad0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ad0:	57                   	push   edi
c0015ad1:	56                   	push   esi
c0015ad2:	53                   	push   ebx
c0015ad3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015ad9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015ae0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015ae7:	53                   	push   ebx
c0015ae8:	e8 ab ab fe ff       	call   c0000698 <strlen>
c0015aed:	89 34 24             	mov    DWORD PTR [esp],esi
c0015af0:	89 c7                	mov    edi,eax
c0015af2:	e8 a1 ab fe ff       	call   c0000698 <strlen>
c0015af7:	83 c4 10             	add    esp,0x10
c0015afa:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015afe:	3d ff 00 00 00       	cmp    eax,0xff
c0015b03:	0f 87 d3 00 00 00    	ja     c0015bdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015b09:	57                   	push   edi
c0015b0a:	57                   	push   edi
c0015b0b:	56                   	push   esi
c0015b0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015b10:	56                   	push   esi
c0015b11:	e8 22 ac fe ff       	call   c0000738 <strcpy>
c0015b16:	58                   	pop    eax
c0015b17:	5a                   	pop    edx
c0015b18:	68 7c 6d 02 c0       	push   0xc0026d7c
c0015b1d:	56                   	push   esi
c0015b1e:	e8 55 ad fe ff       	call   c0000878 <strcat>
c0015b23:	59                   	pop    ecx
c0015b24:	5f                   	pop    edi
c0015b25:	53                   	push   ebx
c0015b26:	56                   	push   esi
c0015b27:	e8 4c ad fe ff       	call   c0000878 <strcat>
c0015b2c:	58                   	pop    eax
c0015b2d:	5a                   	pop    edx
c0015b2e:	68 8c 69 02 c0       	push   0xc002698c
c0015b33:	56                   	push   esi
c0015b34:	e8 3f ad fe ff       	call   c0000878 <strcat>
c0015b39:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015b40:	e8 0e 42 ff ff       	call   c0009d53 <malloc>
c0015b45:	83 c4 0c             	add    esp,0xc
c0015b48:	89 c3                	mov    ebx,eax
c0015b4a:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0015b50:	56                   	push   esi
c0015b51:	50                   	push   eax
c0015b52:	e8 53 7a ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	85 db                	test   ebx,ebx
c0015b5c:	74 7e                	je     c0015bdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015b5e:	51                   	push   ecx
c0015b5f:	51                   	push   ecx
c0015b60:	6a 01                	push   0x1
c0015b62:	53                   	push   ebx
c0015b63:	e8 1c 7b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	85 c0                	test   eax,eax
c0015b6d:	74 08                	je     c0015b77 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015b6f:	83 ec 0c             	sub    esp,0xc
c0015b72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b74:	53                   	push   ebx
c0015b75:	eb 5f                	jmp    c0015bd6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015b77:	52                   	push   edx
c0015b78:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b7c:	50                   	push   eax
c0015b7d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015b81:	50                   	push   eax
c0015b82:	53                   	push   ebx
c0015b83:	e8 a8 7d ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c0015b88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	89 c1                	mov    ecx,eax
c0015b91:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015b95:	74 31                	je     c0015bc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015b97:	83 ec 0c             	sub    esp,0xc
c0015b9a:	50                   	push   eax
c0015b9b:	e8 b3 41 ff ff       	call   c0009d53 <malloc>
c0015ba0:	89 c6                	mov    esi,eax
c0015ba2:	58                   	pop    eax
c0015ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ba5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015ba9:	52                   	push   edx
c0015baa:	56                   	push   esi
c0015bab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015baf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015bb3:	53                   	push   ebx
c0015bb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bb7:	83 c4 20             	add    esp,0x20
c0015bba:	85 c0                	test   eax,eax
c0015bbc:	75 0a                	jne    c0015bc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015bbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bc2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015bc6:	74 18                	je     c0015be0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	53                   	push   ebx
c0015bcc:	e8 11 7b ff ff       	call   c000d6e2 <File::close()>
c0015bd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	31 c0                	xor    eax,eax
c0015bde:	eb 3b                	jmp    c0015c1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	53                   	push   ebx
c0015be4:	e8 f9 7a ff ff       	call   c000d6e2 <File::close()>
c0015be9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015beb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bf1:	83 c4 0c             	add    esp,0xc
c0015bf4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015bfb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015c02:	56                   	push   esi
c0015c03:	e8 70 fd ff ff       	call   c0015978 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015c08:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c0b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015c0f:	e8 4f 41 ff ff       	call   c0009d63 <free>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c1b:	81 c4 20 01 00 00    	add    esp,0x120
c0015c21:	5b                   	pop    ebx
c0015c22:	5e                   	pop    esi
c0015c23:	5f                   	pop    edi
c0015c24:	c3                   	ret    

c0015c25 <Reg::getLine(char*, char*, char*)>:
c0015c25:	57                   	push   edi
c0015c26:	56                   	push   esi
c0015c27:	53                   	push   ebx
c0015c28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c2c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c30:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c34:	57                   	push   edi
c0015c35:	56                   	push   esi
c0015c36:	53                   	push   ebx
c0015c37:	68 91 69 02 c0       	push   0xc0026991
c0015c3c:	e8 8f fe ff ff       	call   c0015ad0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	84 c0                	test   al,al
c0015c46:	75 10                	jne    c0015c58 <Reg::getLine(char*, char*, char*)+0x33>
c0015c48:	57                   	push   edi
c0015c49:	56                   	push   esi
c0015c4a:	53                   	push   ebx
c0015c4b:	68 b6 69 02 c0       	push   0xc00269b6
c0015c50:	e8 7b fe ff ff       	call   c0015ad0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	5b                   	pop    ebx
c0015c59:	5e                   	pop    esi
c0015c5a:	5f                   	pop    edi
c0015c5b:	c3                   	ret    

c0015c5c <Reg::readInt(char*, char*, int*)>:
c0015c5c:	55                   	push   ebp
c0015c5d:	57                   	push   edi
c0015c5e:	56                   	push   esi
c0015c5f:	53                   	push   ebx
c0015c60:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015c66:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015c6a:	57                   	push   edi
c0015c6b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c72:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c79:	e8 a7 ff ff ff       	call   c0015c25 <Reg::getLine(char*, char*, char*)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	84 c0                	test   al,al
c0015c83:	0f 84 b3 00 00 00    	je     c0015d3c <Reg::readInt(char*, char*, int*)+0xe0>
c0015c89:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015c8d:	80 fa 2b             	cmp    dl,0x2b
c0015c90:	74 0c                	je     c0015c9e <Reg::readInt(char*, char*, int*)+0x42>
c0015c92:	80 fa 2d             	cmp    dl,0x2d
c0015c95:	75 0e                	jne    c0015ca5 <Reg::readInt(char*, char*, int*)+0x49>
c0015c97:	ba 01 00 00 00       	mov    edx,0x1
c0015c9c:	eb 0b                	jmp    c0015ca9 <Reg::readInt(char*, char*, int*)+0x4d>
c0015c9e:	ba 01 00 00 00       	mov    edx,0x1
c0015ca3:	eb 02                	jmp    c0015ca7 <Reg::readInt(char*, char*, int*)+0x4b>
c0015ca5:	31 d2                	xor    edx,edx
c0015ca7:	31 c0                	xor    eax,eax
c0015ca9:	be 0a 00 00 00       	mov    esi,0xa
c0015cae:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015cb3:	75 20                	jne    c0015cd5 <Reg::readInt(char*, char*, int*)+0x79>
c0015cb5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015cb9:	80 f9 78             	cmp    cl,0x78
c0015cbc:	75 0a                	jne    c0015cc8 <Reg::readInt(char*, char*, int*)+0x6c>
c0015cbe:	83 c2 02             	add    edx,0x2
c0015cc1:	be 10 00 00 00       	mov    esi,0x10
c0015cc6:	eb 0d                	jmp    c0015cd5 <Reg::readInt(char*, char*, int*)+0x79>
c0015cc8:	80 f9 62             	cmp    cl,0x62
c0015ccb:	75 08                	jne    c0015cd5 <Reg::readInt(char*, char*, int*)+0x79>
c0015ccd:	83 c2 02             	add    edx,0x2
c0015cd0:	be 02 00 00 00       	mov    esi,0x2
c0015cd5:	01 d7                	add    edi,edx
c0015cd7:	31 d2                	xor    edx,edx
c0015cd9:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015cdb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015cdf:	80 fb 0d             	cmp    bl,0xd
c0015ce2:	0f 94 c3             	sete   bl
c0015ce5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015cea:	0f 94 c1             	sete   cl
c0015ced:	08 cb                	or     bl,cl
c0015cef:	75 3a                	jne    c0015d2b <Reg::readInt(char*, char*, int*)+0xcf>
c0015cf1:	0f af d6             	imul   edx,esi
c0015cf4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015cf9:	83 fe 10             	cmp    esi,0x10
c0015cfc:	75 26                	jne    c0015d24 <Reg::readInt(char*, char*, int*)+0xc8>
c0015cfe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015d02:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015d05:	89 e9                	mov    ecx,ebp
c0015d07:	80 f9 05             	cmp    cl,0x5
c0015d0a:	77 06                	ja     c0015d12 <Reg::readInt(char*, char*, int*)+0xb6>
c0015d0c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015d10:	eb 16                	jmp    c0015d28 <Reg::readInt(char*, char*, int*)+0xcc>
c0015d12:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015d16:	83 e9 61             	sub    ecx,0x61
c0015d19:	80 f9 05             	cmp    cl,0x5
c0015d1c:	77 06                	ja     c0015d24 <Reg::readInt(char*, char*, int*)+0xc8>
c0015d1e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015d22:	eb 04                	jmp    c0015d28 <Reg::readInt(char*, char*, int*)+0xcc>
c0015d24:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015d28:	47                   	inc    edi
c0015d29:	eb ae                	jmp    c0015cd9 <Reg::readInt(char*, char*, int*)+0x7d>
c0015d2b:	84 c0                	test   al,al
c0015d2d:	74 02                	je     c0015d31 <Reg::readInt(char*, char*, int*)+0xd5>
c0015d2f:	f7 da                	neg    edx
c0015d31:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015d38:	89 10                	mov    DWORD PTR [eax],edx
c0015d3a:	88 d8                	mov    al,bl
c0015d3c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015d42:	5b                   	pop    ebx
c0015d43:	5e                   	pop    esi
c0015d44:	5f                   	pop    edi
c0015d45:	5d                   	pop    ebp
c0015d46:	c3                   	ret    

c0015d47 <Reg::readString(char*, char*, char*, int)>:
c0015d47:	57                   	push   edi
c0015d48:	56                   	push   esi
c0015d49:	53                   	push   ebx
c0015d4a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015d50:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015d57:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015d5b:	57                   	push   edi
c0015d5c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d63:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d6a:	e8 b6 fe ff ff       	call   c0015c25 <Reg::getLine(char*, char*, char*)>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	89 c6                	mov    esi,eax
c0015d74:	84 c0                	test   al,al
c0015d76:	74 44                	je     c0015dbc <Reg::readString(char*, char*, char*, int)+0x75>
c0015d78:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015d7f:	31 c0                	xor    eax,eax
c0015d81:	4a                   	dec    edx
c0015d82:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015d85:	84 c9                	test   cl,cl
c0015d87:	74 0f                	je     c0015d98 <Reg::readString(char*, char*, char*, int)+0x51>
c0015d89:	39 c2                	cmp    edx,eax
c0015d8b:	7e 0b                	jle    c0015d98 <Reg::readString(char*, char*, char*, int)+0x51>
c0015d8d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015d90:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015d95:	40                   	inc    eax
c0015d96:	eb ea                	jmp    c0015d82 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	53                   	push   ebx
c0015d9c:	e8 f7 a8 fe ff       	call   c0000698 <strlen>
c0015da1:	83 c4 10             	add    esp,0x10
c0015da4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015da9:	75 11                	jne    c0015dbc <Reg::readString(char*, char*, char*, int)+0x75>
c0015dab:	83 ec 0c             	sub    esp,0xc
c0015dae:	53                   	push   ebx
c0015daf:	e8 e4 a8 fe ff       	call   c0000698 <strlen>
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015dbc:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015dc2:	89 f0                	mov    eax,esi
c0015dc4:	5b                   	pop    ebx
c0015dc5:	5e                   	pop    esi
c0015dc6:	5f                   	pop    edi
c0015dc7:	c3                   	ret    

c0015dc8 <Reg::readBool(char*, char*, bool*)>:
c0015dc8:	83 ec 20             	sub    esp,0x20
c0015dcb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015dcf:	50                   	push   eax
c0015dd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd8:	e8 7f fe ff ff       	call   c0015c5c <Reg::readInt(char*, char*, int*)>
c0015ddd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015de2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015de6:	0f 95 02             	setne  BYTE PTR [edx]
c0015de9:	83 c4 2c             	add    esp,0x2c
c0015dec:	c3                   	ret    

c0015ded <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015ded:	53                   	push   ebx
c0015dee:	83 ec 1c             	sub    esp,0x1c
c0015df1:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015df5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015df9:	50                   	push   eax
c0015dfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e02:	e8 c1 ff ff ff       	call   c0015dc8 <Reg::readBool(char*, char*, bool*)>
c0015e07:	83 c4 10             	add    esp,0x10
c0015e0a:	84 c0                	test   al,al
c0015e0c:	74 04                	je     c0015e12 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015e0e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015e12:	88 d8                	mov    al,bl
c0015e14:	83 c4 18             	add    esp,0x18
c0015e17:	5b                   	pop    ebx
c0015e18:	c3                   	ret    

c0015e19 <Reg::readIntWithDefault(char*, char*, int)>:
c0015e19:	53                   	push   ebx
c0015e1a:	83 ec 1c             	sub    esp,0x1c
c0015e1d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e21:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e25:	50                   	push   eax
c0015e26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e2e:	e8 29 fe ff ff       	call   c0015c5c <Reg::readInt(char*, char*, int*)>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	84 c0                	test   al,al
c0015e38:	74 04                	je     c0015e3e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015e3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015e3e:	89 d8                	mov    eax,ebx
c0015e40:	83 c4 18             	add    esp,0x18
c0015e43:	5b                   	pop    ebx
c0015e44:	c3                   	ret    

c0015e45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015e45:	57                   	push   edi
c0015e46:	56                   	push   esi
c0015e47:	56                   	push   esi
c0015e48:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015e4c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015e50:	56                   	push   esi
c0015e51:	57                   	push   edi
c0015e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e5a:	e8 e8 fe ff ff       	call   c0015d47 <Reg::readString(char*, char*, char*, int)>
c0015e5f:	83 c4 10             	add    esp,0x10
c0015e62:	84 c0                	test   al,al
c0015e64:	75 1a                	jne    c0015e80 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015e66:	51                   	push   ecx
c0015e67:	56                   	push   esi
c0015e68:	6a 00                	push   0x0
c0015e6a:	57                   	push   edi
c0015e6b:	e8 0c a8 fe ff       	call   c000067c <memset>
c0015e70:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015e73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e79:	83 c4 10             	add    esp,0x10
c0015e7c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015e80:	89 f8                	mov    eax,edi
c0015e82:	5a                   	pop    edx
c0015e83:	5e                   	pop    esi
c0015e84:	5f                   	pop    edi
c0015e85:	c3                   	ret    

c0015e86 <Sys::eject(regs*)>:
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	83 ca ff             	or     edx,0xffffffff
c0015e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e90:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015e93:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e98:	83 e9 41             	sub    ecx,0x41
c0015e9b:	83 f9 19             	cmp    ecx,0x19
c0015e9e:	77 18                	ja     c0015eb8 <Sys::eject(regs*)+0x32>
c0015ea0:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c0015ea7:	85 c9                	test   ecx,ecx
c0015ea9:	74 0d                	je     c0015eb8 <Sys::eject(regs*)+0x32>
c0015eab:	83 ec 0c             	sub    esp,0xc
c0015eae:	51                   	push   ecx
c0015eaf:	e8 86 a9 ff ff       	call   c001083a <LogicalDisk::eject()>
c0015eb4:	83 c4 10             	add    esp,0x10
c0015eb7:	99                   	cdq    
c0015eb8:	83 c4 0c             	add    esp,0xc
c0015ebb:	c3                   	ret    

c0015ebc <Sys::exit(regs*)>:
c0015ebc:	83 ec 18             	sub    esp,0x18
c0015ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ec3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ec6:	e8 ad 37 00 00       	call   c0019678 <terminateTask(int)>
c0015ecb:	83 c8 ff             	or     eax,0xffffffff
c0015ece:	83 c4 1c             	add    esp,0x1c
c0015ed1:	89 c2                	mov    edx,eax
c0015ed3:	c3                   	ret    

c0015ed4 <Sys::getCwd(regs*)>:
c0015ed4:	83 ec 10             	sub    esp,0x10
c0015ed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015edb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015ede:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ee9:	e8 be 74 ff ff       	call   c000d3ac <Fs::getcwd(Process*, char*, int)>
c0015eee:	83 c4 1c             	add    esp,0x1c
c0015ef1:	99                   	cdq    
c0015ef2:	c3                   	ret    

c0015ef3 <Sys::getPID(regs*)>:
c0015ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015efb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015efd:	99                   	cdq    
c0015efe:	c3                   	ret    

c0015eff <Sys::getRAMData(regs*)>:
c0015eff:	8b 0d d8 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cd8
c0015f05:	69 05 d4 8c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028cd4,0xc8
c0015f0f:	99                   	cdq    
c0015f10:	f7 f9                	idiv   ecx
c0015f12:	c1 e0 18             	shl    eax,0x18
c0015f15:	09 c8                	or     eax,ecx
c0015f17:	99                   	cdq    
c0015f18:	c3                   	ret    

c0015f19 <Sys::getVGAPtr(regs*)>:
c0015f19:	55                   	push   ebp
c0015f1a:	57                   	push   edi
c0015f1b:	56                   	push   esi
c0015f1c:	53                   	push   ebx
c0015f1d:	83 ec 18             	sub    esp,0x18
c0015f20:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015f24:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015f27:	e8 50 32 00 00       	call   c001917c <Thr::processFromPID(int)>
c0015f2c:	83 c4 10             	add    esp,0x10
c0015f2f:	89 c1                	mov    ecx,eax
c0015f31:	b8 01 00 00 00       	mov    eax,0x1
c0015f36:	85 c9                	test   ecx,ecx
c0015f38:	74 59                	je     c0015f93 <Sys::getVGAPtr(regs*)+0x7a>
c0015f3a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015f40:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015f44:	74 0c                	je     c0015f52 <Sys::getVGAPtr(regs*)+0x39>
c0015f46:	83 ec 0c             	sub    esp,0xc
c0015f49:	53                   	push   ebx
c0015f4a:	e8 fe 4e ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015f55:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015f58:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015f5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015f62:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f65:	81 c3 82 00 00 00    	add    ebx,0x82
c0015f6b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015f71:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f74:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015f77:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015f7d:	50                   	push   eax
c0015f7e:	50                   	push   eax
c0015f7f:	53                   	push   ebx
c0015f80:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f83:	05 a8 0f 00 00       	add    eax,0xfa8
c0015f88:	50                   	push   eax
c0015f89:	e8 aa a7 fe ff       	call   c0000738 <strcpy>
c0015f8e:	83 c4 10             	add    esp,0x10
c0015f91:	31 c0                	xor    eax,eax
c0015f93:	83 c4 0c             	add    esp,0xc
c0015f96:	31 d2                	xor    edx,edx
c0015f98:	5b                   	pop    ebx
c0015f99:	5e                   	pop    esi
c0015f9a:	5f                   	pop    edi
c0015f9b:	5d                   	pop    ebp
c0015f9c:	c3                   	ret    

c0015f9d <Sys::loadDLL(regs*)>:
c0015f9d:	56                   	push   esi
c0015f9e:	53                   	push   ebx
c0015f9f:	31 d2                	xor    edx,edx
c0015fa1:	51                   	push   ecx
c0015fa2:	b8 01 00 00 00       	mov    eax,0x1
c0015fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fab:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015faf:	0f 84 8c 00 00 00    	je     c0016041 <Sys::loadDLL(regs*)+0xa4>
c0015fb5:	83 ec 0c             	sub    esp,0xc
c0015fb8:	68 14 01 00 00       	push   0x114
c0015fbd:	e8 91 3d ff ff       	call   c0009d53 <malloc>
c0015fc2:	83 c4 0c             	add    esp,0xc
c0015fc5:	89 c3                	mov    ebx,eax
c0015fc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fcc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015fcf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015fd2:	53                   	push   ebx
c0015fd3:	e8 d2 75 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0015fd8:	83 c4 10             	add    esp,0x10
c0015fdb:	31 d2                	xor    edx,edx
c0015fdd:	b8 02 00 00 00       	mov    eax,0x2
c0015fe2:	85 db                	test   ebx,ebx
c0015fe4:	74 5b                	je     c0016041 <Sys::loadDLL(regs*)+0xa4>
c0015fe6:	83 ec 0c             	sub    esp,0xc
c0015fe9:	53                   	push   ebx
c0015fea:	e8 03 79 ff ff       	call   c000d8f2 <File::exists()>
c0015fef:	83 c4 10             	add    esp,0x10
c0015ff2:	84 c0                	test   al,al
c0015ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ff6:	75 11                	jne    c0016009 <Sys::loadDLL(regs*)+0x6c>
c0015ff8:	83 ec 0c             	sub    esp,0xc
c0015ffb:	53                   	push   ebx
c0015ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fff:	83 c4 10             	add    esp,0x10
c0016002:	b8 03 00 00 00       	mov    eax,0x3
c0016007:	eb 36                	jmp    c001603f <Sys::loadDLL(regs*)+0xa2>
c0016009:	83 ec 0c             	sub    esp,0xc
c001600c:	53                   	push   ebx
c001600d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016010:	58                   	pop    eax
c0016011:	5a                   	pop    edx
c0016012:	6a 00                	push   0x0
c0016014:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016017:	e8 0a 22 00 00       	call   c0018226 <Thr::loadDLL(char const*, bool)>
c001601c:	83 c4 10             	add    esp,0x10
c001601f:	89 c1                	mov    ecx,eax
c0016021:	31 d2                	xor    edx,edx
c0016023:	b8 04 00 00 00       	mov    eax,0x4
c0016028:	85 c9                	test   ecx,ecx
c001602a:	74 15                	je     c0016041 <Sys::loadDLL(regs*)+0xa4>
c001602c:	53                   	push   ebx
c001602d:	53                   	push   ebx
c001602e:	ff 35 a8 8c 02 c0    	push   DWORD PTR ds:0xc0028ca8
c0016034:	51                   	push   ecx
c0016035:	e8 1d 24 00 00       	call   c0018457 <Thr::executeDLL(unsigned long, void*)>
c001603a:	83 c4 10             	add    esp,0x10
c001603d:	31 c0                	xor    eax,eax
c001603f:	31 d2                	xor    edx,edx
c0016041:	59                   	pop    ecx
c0016042:	5b                   	pop    ebx
c0016043:	5e                   	pop    esi
c0016044:	c3                   	ret    

c0016045 <Sys::read(regs*)>:
c0016045:	57                   	push   edi
c0016046:	56                   	push   esi
c0016047:	53                   	push   ebx
c0016048:	83 ec 10             	sub    esp,0x10
c001604b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001604f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016052:	83 f8 02             	cmp    eax,0x2
c0016055:	77 10                	ja     c0016067 <Sys::read(regs*)+0x22>
c0016057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001605c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001605f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016065:	eb 0e                	jmp    c0016075 <Sys::read(regs*)+0x30>
c0016067:	83 ec 0c             	sub    esp,0xc
c001606a:	50                   	push   eax
c001606b:	e8 53 5b ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016070:	83 c4 10             	add    esp,0x10
c0016073:	89 c1                	mov    ecx,eax
c0016075:	83 c8 ff             	or     eax,0xffffffff
c0016078:	85 c9                	test   ecx,ecx
c001607a:	89 c2                	mov    edx,eax
c001607c:	74 28                	je     c00160a6 <Sys::read(regs*)+0x61>
c001607e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016086:	31 ff                	xor    edi,edi
c0016088:	83 ec 0c             	sub    esp,0xc
c001608b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001608d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016091:	52                   	push   edx
c0016092:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016095:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016098:	57                   	push   edi
c0016099:	56                   	push   esi
c001609a:	51                   	push   ecx
c001609b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001609e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00160a2:	83 c4 20             	add    esp,0x20
c00160a5:	99                   	cdq    
c00160a6:	83 c4 10             	add    esp,0x10
c00160a9:	5b                   	pop    ebx
c00160aa:	5e                   	pop    esi
c00160ab:	5f                   	pop    edi
c00160ac:	c3                   	ret    

c00160ad <Sys::sbrk(regs*)>:
c00160ad:	56                   	push   esi
c00160ae:	53                   	push   ebx
c00160af:	50                   	push   eax
c00160b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160bc:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00160bf:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00160c5:	85 db                	test   ebx,ebx
c00160c7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00160ca:	74 02                	je     c00160ce <Sys::sbrk(regs*)+0x21>
c00160cc:	79 06                	jns    c00160d4 <Sys::sbrk(regs*)+0x27>
c00160ce:	89 f0                	mov    eax,esi
c00160d0:	31 d2                	xor    edx,edx
c00160d2:	eb 2a                	jmp    c00160fe <Sys::sbrk(regs*)+0x51>
c00160d4:	83 c8 ff             	or     eax,0xffffffff
c00160d7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00160dd:	89 c2                	mov    edx,eax
c00160df:	77 1d                	ja     c00160fe <Sys::sbrk(regs*)+0x51>
c00160e1:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00160e7:	50                   	push   eax
c00160e8:	c1 ea 0c             	shr    edx,0xc
c00160eb:	68 07 0c 00 00       	push   0xc07
c00160f0:	52                   	push   edx
c00160f1:	51                   	push   ecx
c00160f2:	e8 cb 63 ff ff       	call   c000c4c2 <VAS::allocatePages(int, int)>
c00160f7:	89 f0                	mov    eax,esi
c00160f9:	31 d2                	xor    edx,edx
c00160fb:	83 c4 10             	add    esp,0x10
c00160fe:	59                   	pop    ecx
c00160ff:	5b                   	pop    ebx
c0016100:	5e                   	pop    esi
c0016101:	c3                   	ret    

c0016102 <Sys::setCwd(regs*)>:
c0016102:	83 ec 14             	sub    esp,0x14
c0016105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016109:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001610c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016111:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016114:	e8 78 78 ff ff       	call   c000d991 <Fs::setcwd(Process*, char*)>
c0016119:	83 c4 1c             	add    esp,0x1c
c001611c:	99                   	cdq    
c001611d:	c3                   	ret    

c001611e <Sys::setTime(regs*)>:
c001611e:	55                   	push   ebp
c001611f:	31 c9                	xor    ecx,ecx
c0016121:	57                   	push   edi
c0016122:	bd 0c 00 00 00       	mov    ebp,0xc
c0016127:	56                   	push   esi
c0016128:	53                   	push   ebx
c0016129:	31 db                	xor    ebx,ebx
c001612b:	83 ec 10             	sub    esp,0x10
c001612e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016132:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016135:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0016138:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001613b:	89 c2                	mov    edx,eax
c001613d:	66 81 ef 6c 07       	sub    di,0x76c
c0016142:	83 e2 1f             	and    edx,0x1f
c0016145:	c1 e7 10             	shl    edi,0x10
c0016148:	42                   	inc    edx
c0016149:	c1 e8 05             	shr    eax,0x5
c001614c:	88 d1                	mov    cl,dl
c001614e:	31 d2                	xor    edx,edx
c0016150:	f7 f5                	div    ebp
c0016152:	89 dd                	mov    ebp,ebx
c0016154:	88 d5                	mov    ch,dl
c0016156:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001615c:	0f b7 c1             	movzx  eax,cx
c001615f:	31 d2                	xor    edx,edx
c0016161:	09 f8                	or     eax,edi
c0016163:	bf 3c 00 00 00       	mov    edi,0x3c
c0016168:	89 c1                	mov    ecx,eax
c001616a:	89 f0                	mov    eax,esi
c001616c:	f7 f7                	div    edi
c001616e:	c1 e2 10             	shl    edx,0x10
c0016171:	09 d5                	or     ebp,edx
c0016173:	31 d2                	xor    edx,edx
c0016175:	89 eb                	mov    ebx,ebp
c0016177:	f7 f7                	div    edi
c0016179:	bf 10 0e 00 00       	mov    edi,0xe10
c001617e:	88 d7                	mov    bh,dl
c0016180:	89 f0                	mov    eax,esi
c0016182:	31 d2                	xor    edx,edx
c0016184:	f7 f7                	div    edi
c0016186:	bf 18 00 00 00       	mov    edi,0x18
c001618b:	31 d2                	xor    edx,edx
c001618d:	f7 f7                	div    edi
c001618f:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0016194:	88 d3                	mov    bl,dl
c0016196:	53                   	push   ebx
c0016197:	51                   	push   ecx
c0016198:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001619e:	e8 ef 80 ff ff       	call   c000e292 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00161a3:	83 c4 1c             	add    esp,0x1c
c00161a6:	83 f0 01             	xor    eax,0x1
c00161a9:	5b                   	pop    ebx
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	5e                   	pop    esi
c00161ae:	31 d2                	xor    edx,edx
c00161b0:	5f                   	pop    edi
c00161b1:	5d                   	pop    ebp
c00161b2:	c3                   	ret    

c00161b3 <Sys::timezone(regs*)>:
c00161b3:	53                   	push   ebx
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161bb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00161bf:	75 17                	jne    c00161d8 <Sys::timezone(regs*)+0x25>
c00161c1:	83 ec 0c             	sub    esp,0xc
c00161c4:	68 d1 69 02 c0       	push   0xc00269d1
c00161c9:	e8 71 6e ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00161ce:	83 c8 ff             	or     eax,0xffffffff
c00161d1:	83 c4 10             	add    esp,0x10
c00161d4:	89 c2                	mov    edx,eax
c00161d6:	eb 20                	jmp    c00161f8 <Sys::timezone(regs*)+0x45>
c00161d8:	83 ec 0c             	sub    esp,0xc
c00161db:	68 e6 69 02 c0       	push   0xc00269e6
c00161e0:	e8 5a 6e ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00161e5:	58                   	pop    eax
c00161e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00161e9:	e8 06 7e ff ff       	call   c000dff4 <User::loadClockSettings(int)>
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	b8 01 00 00 00       	mov    eax,0x1
c00161f6:	31 d2                	xor    edx,edx
c00161f8:	83 c4 08             	add    esp,0x8
c00161fb:	5b                   	pop    ebx
c00161fc:	c3                   	ret    

c00161fd <Sys::write(regs*)>:
c00161fd:	57                   	push   edi
c00161fe:	56                   	push   esi
c00161ff:	53                   	push   ebx
c0016200:	83 ec 10             	sub    esp,0x10
c0016203:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016207:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001620a:	83 f8 02             	cmp    eax,0x2
c001620d:	77 10                	ja     c001621f <Sys::write(regs*)+0x22>
c001620f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016214:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016217:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001621d:	eb 0e                	jmp    c001622d <Sys::write(regs*)+0x30>
c001621f:	83 ec 0c             	sub    esp,0xc
c0016222:	50                   	push   eax
c0016223:	e8 9b 59 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	89 c1                	mov    ecx,eax
c001622d:	83 c8 ff             	or     eax,0xffffffff
c0016230:	85 c9                	test   ecx,ecx
c0016232:	89 c2                	mov    edx,eax
c0016234:	74 28                	je     c001625e <Sys::write(regs*)+0x61>
c0016236:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001623e:	31 ff                	xor    edi,edi
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016245:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016249:	52                   	push   edx
c001624a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001624d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016250:	57                   	push   edi
c0016251:	56                   	push   esi
c0016252:	51                   	push   ecx
c0016253:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016256:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001625a:	83 c4 20             	add    esp,0x20
c001625d:	99                   	cdq    
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	5b                   	pop    ebx
c0016262:	5e                   	pop    esi
c0016263:	5f                   	pop    edi
c0016264:	c3                   	ret    

c0016265 <Sys::wsbe(regs*)>:
c0016265:	57                   	push   edi
c0016266:	b9 0b 00 00 00       	mov    ecx,0xb
c001626b:	56                   	push   esi
c001626c:	be 25 6a 02 c0       	mov    esi,0xc0026a25
c0016271:	53                   	push   ebx
c0016272:	83 ec 30             	sub    esp,0x30
c0016275:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0016279:	fc                   	cld    
c001627a:	83 ec 0c             	sub    esp,0xc
c001627d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001627f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016288:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001628b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016291:	8b 06                	mov    eax,DWORD PTR [esi]
c0016293:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0016296:	57                   	push   edi
c0016297:	e8 fc a3 fe ff       	call   c0000698 <strlen>
c001629c:	5a                   	pop    edx
c001629d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00162a1:	52                   	push   edx
c00162a2:	31 d2                	xor    edx,edx
c00162a4:	57                   	push   edi
c00162a5:	52                   	push   edx
c00162a6:	50                   	push   eax
c00162a7:	56                   	push   esi
c00162a8:	ff d3                	call   ebx
c00162aa:	83 c4 14             	add    esp,0x14
c00162ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00162b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00162b4:	e8 bf 33 00 00       	call   c0019678 <terminateTask(int)>
c00162b9:	83 c4 40             	add    esp,0x40
c00162bc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00162c1:	5b                   	pop    ebx
c00162c2:	31 d2                	xor    edx,edx
c00162c4:	5e                   	pop    esi
c00162c5:	5f                   	pop    edi
c00162c6:	c3                   	ret    

c00162c7 <Sys::yield(regs*)>:
c00162c7:	83 ec 0c             	sub    esp,0xc
c00162ca:	fa                   	cli    
c00162cb:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00162d1:	e8 8a 2a 00 00       	call   c0018d60 <schedule()>
c00162d6:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00162db:	48                   	dec    eax
c00162dc:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00162e1:	75 01                	jne    c00162e4 <Sys::yield(regs*)+0x1d>
c00162e3:	fb                   	sti    
c00162e4:	8b 15 cc 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292cc
c00162ea:	83 c4 0c             	add    esp,0xc
c00162ed:	89 d0                	mov    eax,edx
c00162ef:	c1 ea 11             	shr    edx,0x11
c00162f2:	c1 e0 07             	shl    eax,0x7
c00162f5:	25 80 30 0f 00       	and    eax,0xf3080
c00162fa:	31 d0                	xor    eax,edx
c00162fc:	31 d2                	xor    edx,edx
c00162fe:	c3                   	ret    

c00162ff <sysCallSeekDir(regs*)>:
c00162ff:	31 c0                	xor    eax,eax
c0016301:	31 d2                	xor    edx,edx
c0016303:	c3                   	ret    

c0016304 <sysCallTellDir(regs*)>:
c0016304:	31 c0                	xor    eax,eax
c0016306:	31 d2                	xor    edx,edx
c0016308:	c3                   	ret    

c0016309 <sysCallVerify(regs*)>:
c0016309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001630d:	31 d2                	xor    edx,edx
c001630f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016312:	c3                   	ret    

c0016313 <sysCallGetArgc(regs*)>:
c0016313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016318:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001631b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016321:	99                   	cdq    
c0016322:	c3                   	ret    

c0016323 <sysFormatDisk(regs*)>:
c0016323:	56                   	push   esi
c0016324:	53                   	push   ebx
c0016325:	53                   	push   ebx
c0016326:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001632a:	8b 1d d4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd4
c0016330:	eb 25                	jmp    c0016357 <sysFormatDisk(regs*)+0x34>
c0016332:	83 ec 0c             	sub    esp,0xc
c0016335:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016338:	8b 13                	mov    edx,DWORD PTR [ebx]
c001633a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001633d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016340:	50                   	push   eax
c0016341:	ff 34 85 60 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6da0]
c0016348:	53                   	push   ebx
c0016349:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001634c:	83 c4 20             	add    esp,0x20
c001634f:	83 f8 08             	cmp    eax,0x8
c0016352:	75 12                	jne    c0016366 <sysFormatDisk(regs*)+0x43>
c0016354:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016357:	85 db                	test   ebx,ebx
c0016359:	75 d7                	jne    c0016332 <sysFormatDisk(regs*)+0xf>
c001635b:	59                   	pop    ecx
c001635c:	b8 03 00 00 00       	mov    eax,0x3
c0016361:	31 d2                	xor    edx,edx
c0016363:	5b                   	pop    ebx
c0016364:	5e                   	pop    esi
c0016365:	c3                   	ret    
c0016366:	85 c0                	test   eax,eax
c0016368:	74 1b                	je     c0016385 <sysFormatDisk(regs*)+0x62>
c001636a:	83 f8 09             	cmp    eax,0x9
c001636d:	74 0b                	je     c001637a <sysFormatDisk(regs*)+0x57>
c001636f:	59                   	pop    ecx
c0016370:	b8 02 00 00 00       	mov    eax,0x2
c0016375:	31 d2                	xor    edx,edx
c0016377:	5b                   	pop    ebx
c0016378:	5e                   	pop    esi
c0016379:	c3                   	ret    
c001637a:	59                   	pop    ecx
c001637b:	b8 01 00 00 00       	mov    eax,0x1
c0016380:	31 d2                	xor    edx,edx
c0016382:	5b                   	pop    ebx
c0016383:	5e                   	pop    esi
c0016384:	c3                   	ret    
c0016385:	59                   	pop    ecx
c0016386:	31 c0                	xor    eax,eax
c0016388:	31 d2                	xor    edx,edx
c001638a:	5b                   	pop    ebx
c001638b:	5e                   	pop    esi
c001638c:	c3                   	ret    

c001638d <sysSetDiskVolumeLabel(regs*)>:
c001638d:	56                   	push   esi
c001638e:	53                   	push   ebx
c001638f:	53                   	push   ebx
c0016390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016394:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016397:	83 f8 19             	cmp    eax,0x19
c001639a:	77 2d                	ja     c00163c9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001639c:	8b 0c 85 60 92 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6da0]
c00163a3:	85 c9                	test   ecx,ecx
c00163a5:	74 22                	je     c00163c9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00163a7:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00163aa:	85 db                	test   ebx,ebx
c00163ac:	74 1b                	je     c00163c9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00163ae:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00163b4:	85 d2                	test   edx,edx
c00163b6:	74 11                	je     c00163c9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00163b8:	8b 32                	mov    esi,DWORD PTR [edx]
c00163ba:	53                   	push   ebx
c00163bb:	50                   	push   eax
c00163bc:	51                   	push   ecx
c00163bd:	52                   	push   edx
c00163be:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00163c1:	83 c4 10             	add    esp,0x10
c00163c4:	99                   	cdq    
c00163c5:	59                   	pop    ecx
c00163c6:	5b                   	pop    ebx
c00163c7:	5e                   	pop    esi
c00163c8:	c3                   	ret    
c00163c9:	59                   	pop    ecx
c00163ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163d4:	5b                   	pop    ebx
c00163d5:	5e                   	pop    esi
c00163d6:	c3                   	ret    

c00163d7 <sysGetDiskVolumeLabel(regs*)>:
c00163d7:	57                   	push   edi
c00163d8:	56                   	push   esi
c00163d9:	53                   	push   ebx
c00163da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00163e1:	83 fa 19             	cmp    edx,0x19
c00163e4:	77 38                	ja     c001641e <sysGetDiskVolumeLabel(regs*)+0x47>
c00163e6:	8b 0c 95 60 92 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6da0]
c00163ed:	85 c9                	test   ecx,ecx
c00163ef:	74 2d                	je     c001641e <sysGetDiskVolumeLabel(regs*)+0x47>
c00163f1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00163f4:	85 db                	test   ebx,ebx
c00163f6:	74 26                	je     c001641e <sysGetDiskVolumeLabel(regs*)+0x47>
c00163f8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00163fb:	85 f6                	test   esi,esi
c00163fd:	74 1f                	je     c001641e <sysGetDiskVolumeLabel(regs*)+0x47>
c00163ff:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0016405:	85 c0                	test   eax,eax
c0016407:	74 15                	je     c001641e <sysGetDiskVolumeLabel(regs*)+0x47>
c0016409:	83 ec 0c             	sub    esp,0xc
c001640c:	8b 38                	mov    edi,DWORD PTR [eax]
c001640e:	56                   	push   esi
c001640f:	53                   	push   ebx
c0016410:	52                   	push   edx
c0016411:	51                   	push   ecx
c0016412:	50                   	push   eax
c0016413:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016416:	83 c4 20             	add    esp,0x20
c0016419:	99                   	cdq    
c001641a:	5b                   	pop    ebx
c001641b:	5e                   	pop    esi
c001641c:	5f                   	pop    edi
c001641d:	c3                   	ret    
c001641e:	5b                   	pop    ebx
c001641f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016424:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016429:	5e                   	pop    esi
c001642a:	5f                   	pop    edi
c001642b:	c3                   	ret    

c001642c <sysShutdown(regs*)>:
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016433:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016436:	85 c0                	test   eax,eax
c0016438:	74 18                	je     c0016452 <sysShutdown(regs*)+0x26>
c001643a:	83 f8 01             	cmp    eax,0x1
c001643d:	74 38                	je     c0016477 <sysShutdown(regs*)+0x4b>
c001643f:	83 f8 02             	cmp    eax,0x2
c0016442:	74 24                	je     c0016468 <sysShutdown(regs*)+0x3c>
c0016444:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016449:	ba ff ff ff ff       	mov    edx,0xffffffff
c001644e:	83 c4 0c             	add    esp,0xc
c0016451:	c3                   	ret    
c0016452:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0016457:	8b 10                	mov    edx,DWORD PTR [eax]
c0016459:	6a 00                	push   0x0
c001645b:	6a 00                	push   0x0
c001645d:	6a 00                	push   0x0
c001645f:	50                   	push   eax
c0016460:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	eb dc                	jmp    c0016444 <sysShutdown(regs*)+0x18>
c0016468:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001646d:	8b 10                	mov    edx,DWORD PTR [eax]
c001646f:	6a 00                	push   0x0
c0016471:	6a 00                	push   0x0
c0016473:	6a 01                	push   0x1
c0016475:	eb e8                	jmp    c001645f <sysShutdown(regs*)+0x33>
c0016477:	a1 e0 92 02 c0       	mov    eax,ds:0xc00292e0
c001647c:	85 c0                	test   eax,eax
c001647e:	74 02                	je     c0016482 <sysShutdown(regs*)+0x56>
c0016480:	ff d0                	call   eax
c0016482:	31 c0                	xor    eax,eax
c0016484:	31 d2                	xor    edx,edx
c0016486:	83 c4 0c             	add    esp,0xc
c0016489:	c3                   	ret    

c001648a <sysCallRealpath(regs*)>:
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016491:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016494:	85 d2                	test   edx,edx
c0016496:	74 07                	je     c001649f <sysCallRealpath(regs*)+0x15>
c0016498:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001649b:	85 c0                	test   eax,eax
c001649d:	75 0b                	jne    c00164aa <sysCallRealpath(regs*)+0x20>
c001649f:	b8 01 00 00 00       	mov    eax,0x1
c00164a4:	31 d2                	xor    edx,edx
c00164a6:	83 c4 0c             	add    esp,0xc
c00164a9:	c3                   	ret    
c00164aa:	51                   	push   ecx
c00164ab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164b1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00164b4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00164ba:	51                   	push   ecx
c00164bb:	52                   	push   edx
c00164bc:	50                   	push   eax
c00164bd:	e8 3e 6f ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c00164c2:	83 c4 10             	add    esp,0x10
c00164c5:	31 c0                	xor    eax,eax
c00164c7:	31 d2                	xor    edx,edx
c00164c9:	83 c4 0c             	add    esp,0xc
c00164cc:	c3                   	ret    

c00164cd <sysCallReadDir(regs*)>:
c00164cd:	53                   	push   ebx
c00164ce:	83 ec 18             	sub    esp,0x18
c00164d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164d5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00164d8:	83 f8 02             	cmp    eax,0x2
c00164db:	76 60                	jbe    c001653d <sysCallReadDir(regs*)+0x70>
c00164dd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00164e4:	77 48                	ja     c001652e <sysCallReadDir(regs*)+0x61>
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	50                   	push   eax
c00164ea:	e8 d4 56 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	85 c0                	test   eax,eax
c00164f4:	74 38                	je     c001652e <sysCallReadDir(regs*)+0x61>
c00164f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00164fe:	83 ec 0c             	sub    esp,0xc
c0016501:	8b 10                	mov    edx,DWORD PTR [eax]
c0016503:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016507:	51                   	push   ecx
c0016508:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001650b:	6a 00                	push   0x0
c001650d:	68 10 01 00 00       	push   0x110
c0016512:	50                   	push   eax
c0016513:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016516:	83 c4 20             	add    esp,0x20
c0016519:	85 c0                	test   eax,eax
c001651b:	74 29                	je     c0016546 <sysCallReadDir(regs*)+0x79>
c001651d:	83 f8 07             	cmp    eax,0x7
c0016520:	74 1b                	je     c001653d <sysCallReadDir(regs*)+0x70>
c0016522:	b8 02 00 00 00       	mov    eax,0x2
c0016527:	31 d2                	xor    edx,edx
c0016529:	83 c4 18             	add    esp,0x18
c001652c:	5b                   	pop    ebx
c001652d:	c3                   	ret    
c001652e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016533:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016538:	83 c4 18             	add    esp,0x18
c001653b:	5b                   	pop    ebx
c001653c:	c3                   	ret    
c001653d:	b8 01 00 00 00       	mov    eax,0x1
c0016542:	31 d2                	xor    edx,edx
c0016544:	eb e3                	jmp    c0016529 <sysCallReadDir(regs*)+0x5c>
c0016546:	31 c0                	xor    eax,eax
c0016548:	31 d2                	xor    edx,edx
c001654a:	eb dd                	jmp    c0016529 <sysCallReadDir(regs*)+0x5c>

c001654c <sysCallIsATTY(regs*)>:
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016553:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016556:	83 f8 02             	cmp    eax,0x2
c0016559:	76 07                	jbe    c0016562 <sysCallIsATTY(regs*)+0x16>
c001655b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016560:	75 26                	jne    c0016588 <sysCallIsATTY(regs*)+0x3c>
c0016562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016567:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001656a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016570:	85 c0                	test   eax,eax
c0016572:	74 24                	je     c0016598 <sysCallIsATTY(regs*)+0x4c>
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	8b 10                	mov    edx,DWORD PTR [eax]
c0016579:	50                   	push   eax
c001657a:	ff 12                	call   DWORD PTR [edx]
c001657c:	31 d2                	xor    edx,edx
c001657e:	0f b6 c0             	movzx  eax,al
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	83 c4 0c             	add    esp,0xc
c0016587:	c3                   	ret    
c0016588:	83 ec 0c             	sub    esp,0xc
c001658b:	50                   	push   eax
c001658c:	e8 32 56 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	85 c0                	test   eax,eax
c0016596:	75 dc                	jne    c0016574 <sysCallIsATTY(regs*)+0x28>
c0016598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001659d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165a2:	83 c4 0c             	add    esp,0xc
c00165a5:	c3                   	ret    

c00165a6 <sysCallSeek(regs*)>:
c00165a6:	53                   	push   ebx
c00165a7:	83 ec 08             	sub    esp,0x8
c00165aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165b1:	8d 50 fd             	lea    edx,[eax-0x3]
c00165b4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00165ba:	77 32                	ja     c00165ee <sysCallSeek(regs*)+0x48>
c00165bc:	83 ec 0c             	sub    esp,0xc
c00165bf:	50                   	push   eax
c00165c0:	e8 fe 55 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00165c5:	83 c4 0c             	add    esp,0xc
c00165c8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00165cb:	31 db                	xor    ebx,ebx
c00165cd:	53                   	push   ebx
c00165ce:	51                   	push   ecx
c00165cf:	50                   	push   eax
c00165d0:	e8 6d 71 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00165d5:	83 c4 10             	add    esp,0x10
c00165d8:	85 c0                	test   eax,eax
c00165da:	0f 95 c0             	setne  al
c00165dd:	31 d2                	xor    edx,edx
c00165df:	0f b6 c0             	movzx  eax,al
c00165e2:	f7 d8                	neg    eax
c00165e4:	83 d2 00             	adc    edx,0x0
c00165e7:	83 c4 08             	add    esp,0x8
c00165ea:	f7 da                	neg    edx
c00165ec:	5b                   	pop    ebx
c00165ed:	c3                   	ret    
c00165ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165f8:	83 c4 08             	add    esp,0x8
c00165fb:	5b                   	pop    ebx
c00165fc:	c3                   	ret    

c00165fd <sysCallTell(regs*)>:
c00165fd:	53                   	push   ebx
c00165fe:	83 ec 08             	sub    esp,0x8
c0016601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016605:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016608:	83 f8 02             	cmp    eax,0x2
c001660b:	76 4d                	jbe    c001665a <sysCallTell(regs*)+0x5d>
c001660d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016612:	76 19                	jbe    c001662d <sysCallTell(regs*)+0x30>
c0016614:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016617:	31 d2                	xor    edx,edx
c0016619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001661f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016626:	31 c0                	xor    eax,eax
c0016628:	83 c4 08             	add    esp,0x8
c001662b:	5b                   	pop    ebx
c001662c:	c3                   	ret    
c001662d:	83 ec 0c             	sub    esp,0xc
c0016630:	50                   	push   eax
c0016631:	e8 8d 55 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016636:	5a                   	pop    edx
c0016637:	59                   	pop    ecx
c0016638:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001663b:	50                   	push   eax
c001663c:	e8 57 71 ff ff       	call   c000d798 <File::tell(unsigned long long*)>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	85 c0                	test   eax,eax
c0016646:	0f 95 c0             	setne  al
c0016649:	31 d2                	xor    edx,edx
c001664b:	0f b6 c0             	movzx  eax,al
c001664e:	f7 d8                	neg    eax
c0016650:	83 d2 00             	adc    edx,0x0
c0016653:	83 c4 08             	add    esp,0x8
c0016656:	f7 da                	neg    edx
c0016658:	5b                   	pop    ebx
c0016659:	c3                   	ret    
c001665a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001665f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016664:	83 c4 08             	add    esp,0x8
c0016667:	5b                   	pop    ebx
c0016668:	c3                   	ret    

c0016669 <sysCallSize(regs*)>:
c0016669:	53                   	push   ebx
c001666a:	83 ec 18             	sub    esp,0x18
c001666d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016671:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016674:	83 f8 02             	cmp    eax,0x2
c0016677:	76 53                	jbe    c00166cc <sysCallSize(regs*)+0x63>
c0016679:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001667e:	76 19                	jbe    c0016699 <sysCallSize(regs*)+0x30>
c0016680:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016683:	31 d2                	xor    edx,edx
c0016685:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001668b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016692:	31 c0                	xor    eax,eax
c0016694:	83 c4 18             	add    esp,0x18
c0016697:	5b                   	pop    ebx
c0016698:	c3                   	ret    
c0016699:	83 ec 0c             	sub    esp,0xc
c001669c:	50                   	push   eax
c001669d:	e8 21 55 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00166a2:	83 c4 0c             	add    esp,0xc
c00166a5:	8d 54 24 13          	lea    edx,[esp+0x13]
c00166a9:	52                   	push   edx
c00166aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166ad:	50                   	push   eax
c00166ae:	e8 7d 72 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	85 c0                	test   eax,eax
c00166b8:	0f 95 c0             	setne  al
c00166bb:	31 d2                	xor    edx,edx
c00166bd:	0f b6 c0             	movzx  eax,al
c00166c0:	f7 d8                	neg    eax
c00166c2:	83 d2 00             	adc    edx,0x0
c00166c5:	83 c4 18             	add    esp,0x18
c00166c8:	f7 da                	neg    edx
c00166ca:	5b                   	pop    ebx
c00166cb:	c3                   	ret    
c00166cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166d6:	83 c4 18             	add    esp,0x18
c00166d9:	5b                   	pop    ebx
c00166da:	c3                   	ret    

c00166db <sysCallSizeFromFilename(regs*)>:
c00166db:	57                   	push   edi
c00166dc:	56                   	push   esi
c00166dd:	53                   	push   ebx
c00166de:	83 ec 20             	sub    esp,0x20
c00166e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166e5:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00166e8:	83 fb 02             	cmp    ebx,0x2
c00166eb:	0f 86 88 00 00 00    	jbe    c0016779 <sysCallSizeFromFilename(regs*)+0x9e>
c00166f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00166f7:	76 1b                	jbe    c0016714 <sysCallSizeFromFilename(regs*)+0x39>
c00166f9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00166fc:	31 d2                	xor    edx,edx
c00166fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016704:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001670b:	83 c4 20             	add    esp,0x20
c001670e:	31 c0                	xor    eax,eax
c0016710:	5b                   	pop    ebx
c0016711:	5e                   	pop    esi
c0016712:	5f                   	pop    edi
c0016713:	c3                   	ret    
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	68 14 01 00 00       	push   0x114
c001671c:	e8 32 36 ff ff       	call   c0009d53 <malloc>
c0016721:	83 c4 0c             	add    esp,0xc
c0016724:	89 c7                	mov    edi,eax
c0016726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001672b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001672e:	53                   	push   ebx
c001672f:	57                   	push   edi
c0016730:	e8 75 6e ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016735:	83 c4 0c             	add    esp,0xc
c0016738:	8d 44 24 23          	lea    eax,[esp+0x23]
c001673c:	50                   	push   eax
c001673d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016740:	57                   	push   edi
c0016741:	e8 ea 71 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	85 ff                	test   edi,edi
c001674b:	74 14                	je     c0016761 <sysCallSizeFromFilename(regs*)+0x86>
c001674d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016751:	8b 17                	mov    edx,DWORD PTR [edi]
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	57                   	push   edi
c0016757:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016761:	85 c0                	test   eax,eax
c0016763:	0f 95 c0             	setne  al
c0016766:	31 d2                	xor    edx,edx
c0016768:	0f b6 c0             	movzx  eax,al
c001676b:	f7 d8                	neg    eax
c001676d:	83 d2 00             	adc    edx,0x0
c0016770:	83 c4 20             	add    esp,0x20
c0016773:	f7 da                	neg    edx
c0016775:	5b                   	pop    ebx
c0016776:	5e                   	pop    esi
c0016777:	5f                   	pop    edi
c0016778:	c3                   	ret    
c0016779:	83 c4 20             	add    esp,0x20
c001677c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016781:	5b                   	pop    ebx
c0016782:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016787:	5e                   	pop    esi
c0016788:	5f                   	pop    edi
c0016789:	c3                   	ret    

c001678a <sysCallClose(regs*)>:
c001678a:	53                   	push   ebx
c001678b:	83 ec 08             	sub    esp,0x8
c001678e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016792:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016795:	83 f8 02             	cmp    eax,0x2
c0016798:	76 41                	jbe    c00167db <sysCallClose(regs*)+0x51>
c001679a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00167a0:	83 fa 01             	cmp    edx,0x1
c00167a3:	76 2d                	jbe    c00167d2 <sysCallClose(regs*)+0x48>
c00167a5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167aa:	77 2f                	ja     c00167db <sysCallClose(regs*)+0x51>
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	50                   	push   eax
c00167b0:	e8 0e 54 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00167b5:	89 c3                	mov    ebx,eax
c00167b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ba:	e8 23 6f ff ff       	call   c000d6e2 <File::close()>
c00167bf:	83 c4 10             	add    esp,0x10
c00167c2:	85 db                	test   ebx,ebx
c00167c4:	74 0c                	je     c00167d2 <sysCallClose(regs*)+0x48>
c00167c6:	83 ec 0c             	sub    esp,0xc
c00167c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167cb:	53                   	push   ebx
c00167cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	31 c0                	xor    eax,eax
c00167d4:	31 d2                	xor    edx,edx
c00167d6:	83 c4 08             	add    esp,0x8
c00167d9:	5b                   	pop    ebx
c00167da:	c3                   	ret    
c00167db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167e5:	83 c4 08             	add    esp,0x8
c00167e8:	5b                   	pop    ebx
c00167e9:	c3                   	ret    

c00167ea <sysCallOpenDir(regs*)>:
c00167ea:	56                   	push   esi
c00167eb:	53                   	push   ebx
c00167ec:	53                   	push   ebx
c00167ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167f1:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00167f4:	85 f6                	test   esi,esi
c00167f6:	74 59                	je     c0016851 <sysCallOpenDir(regs*)+0x67>
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	68 14 01 00 00       	push   0x114
c0016800:	e8 4e 35 ff ff       	call   c0009d53 <malloc>
c0016805:	83 c4 0c             	add    esp,0xc
c0016808:	89 c6                	mov    esi,eax
c001680a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001680f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016812:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016815:	56                   	push   esi
c0016816:	e8 ef 72 ff ff       	call   c000db0a <Directory::Directory(char const*, Process*)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	85 f6                	test   esi,esi
c0016820:	74 2f                	je     c0016851 <sysCallOpenDir(regs*)+0x67>
c0016822:	83 ec 0c             	sub    esp,0xc
c0016825:	56                   	push   esi
c0016826:	e8 b9 73 ff ff       	call   c000dbe4 <Directory::open()>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	85 c0                	test   eax,eax
c0016830:	75 1f                	jne    c0016851 <sysCallOpenDir(regs*)+0x67>
c0016832:	83 ec 0c             	sub    esp,0xc
c0016835:	56                   	push   esi
c0016836:	e8 93 50 ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c001683b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	89 02                	mov    DWORD PTR [edx],eax
c0016843:	c1 f8 1f             	sar    eax,0x1f
c0016846:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016849:	31 c0                	xor    eax,eax
c001684b:	59                   	pop    ecx
c001684c:	31 d2                	xor    edx,edx
c001684e:	5b                   	pop    ebx
c001684f:	5e                   	pop    esi
c0016850:	c3                   	ret    
c0016851:	59                   	pop    ecx
c0016852:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016857:	ba ff ff ff ff       	mov    edx,0xffffffff
c001685c:	5b                   	pop    ebx
c001685d:	5e                   	pop    esi
c001685e:	c3                   	ret    

c001685f <sysCallCloseDir(regs*)>:
c001685f:	53                   	push   ebx
c0016860:	83 ec 08             	sub    esp,0x8
c0016863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016867:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001686a:	8d 50 fd             	lea    edx,[eax-0x3]
c001686d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016873:	77 2f                	ja     c00168a4 <sysCallCloseDir(regs*)+0x45>
c0016875:	83 ec 0c             	sub    esp,0xc
c0016878:	50                   	push   eax
c0016879:	e8 45 53 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c001687e:	89 c3                	mov    ebx,eax
c0016880:	89 04 24             	mov    DWORD PTR [esp],eax
c0016883:	e8 b8 73 ff ff       	call   c000dc40 <Directory::close()>
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	85 db                	test   ebx,ebx
c001688d:	74 0c                	je     c001689b <sysCallCloseDir(regs*)+0x3c>
c001688f:	83 ec 0c             	sub    esp,0xc
c0016892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016894:	53                   	push   ebx
c0016895:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016898:	83 c4 10             	add    esp,0x10
c001689b:	31 c0                	xor    eax,eax
c001689d:	31 d2                	xor    edx,edx
c001689f:	83 c4 08             	add    esp,0x8
c00168a2:	5b                   	pop    ebx
c00168a3:	c3                   	ret    
c00168a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168ae:	83 c4 08             	add    esp,0x8
c00168b1:	5b                   	pop    ebx
c00168b2:	c3                   	ret    

c00168b3 <sysCallMakeDir(regs*)>:
c00168b3:	56                   	push   esi
c00168b4:	53                   	push   ebx
c00168b5:	83 ec 10             	sub    esp,0x10
c00168b8:	68 14 01 00 00       	push   0x114
c00168bd:	e8 91 34 ff ff       	call   c0009d53 <malloc>
c00168c2:	83 c4 0c             	add    esp,0xc
c00168c5:	89 c3                	mov    ebx,eax
c00168c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00168cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168d3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00168d6:	53                   	push   ebx
c00168d7:	e8 2e 72 ff ff       	call   c000db0a <Directory::Directory(char const*, Process*)>
c00168dc:	83 c4 10             	add    esp,0x10
c00168df:	85 db                	test   ebx,ebx
c00168e1:	74 32                	je     c0016915 <sysCallMakeDir(regs*)+0x62>
c00168e3:	83 ec 0c             	sub    esp,0xc
c00168e6:	53                   	push   ebx
c00168e7:	e8 d8 74 ff ff       	call   c000ddc4 <Directory::create()>
c00168ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168ef:	89 c6                	mov    esi,eax
c00168f1:	e8 4a 73 ff ff       	call   c000dc40 <Directory::close()>
c00168f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	31 c0                	xor    eax,eax
c0016903:	59                   	pop    ecx
c0016904:	85 f6                	test   esi,esi
c0016906:	5b                   	pop    ebx
c0016907:	0f 95 c0             	setne  al
c001690a:	5e                   	pop    esi
c001690b:	31 d2                	xor    edx,edx
c001690d:	f7 d8                	neg    eax
c001690f:	83 d2 00             	adc    edx,0x0
c0016912:	f7 da                	neg    edx
c0016914:	c3                   	ret    
c0016915:	59                   	pop    ecx
c0016916:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001691b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016920:	5b                   	pop    ebx
c0016921:	5e                   	pop    esi
c0016922:	c3                   	ret    

c0016923 <sysCallWait(regs*)>:
c0016923:	83 ec 10             	sub    esp,0x10
c0016926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001692a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001692d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016930:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016933:	e8 50 26 00 00       	call   c0018f88 <waitTask(int, int*, int)>
c0016938:	83 c4 1c             	add    esp,0x1c
c001693b:	99                   	cdq    
c001693c:	c3                   	ret    

c001693d <sysCallNotImpl(regs*)>:
c001693d:	83 ec 18             	sub    esp,0x18
c0016940:	68 51 6a 02 c0       	push   0xc0026a51
c0016945:	e8 b7 e6 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001694a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001694f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016954:	83 c4 1c             	add    esp,0x1c
c0016957:	c3                   	ret    

c0016958 <sysPanic(regs*)>:
c0016958:	83 ec 18             	sub    esp,0x18
c001695b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001695f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016962:	e8 9a e6 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0016967:	b8 01 00 00 00       	mov    eax,0x1
c001696c:	31 d2                	xor    edx,edx
c001696e:	83 c4 1c             	add    esp,0x1c
c0016971:	c3                   	ret    

c0016972 <sysCallRmdir(regs*)>:
c0016972:	56                   	push   esi
c0016973:	53                   	push   ebx
c0016974:	83 ec 20             	sub    esp,0x20
c0016977:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001697b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001697e:	68 14 01 00 00       	push   0x114
c0016983:	e8 cb 33 ff ff       	call   c0009d53 <malloc>
c0016988:	83 c4 0c             	add    esp,0xc
c001698b:	89 c3                	mov    ebx,eax
c001698d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016992:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016995:	56                   	push   esi
c0016996:	53                   	push   ebx
c0016997:	e8 0e 6c ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001699c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001699f:	e8 58 6e ff ff       	call   c000d7fc <File::unlink()>
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	85 db                	test   ebx,ebx
c00169a9:	74 14                	je     c00169bf <sysCallRmdir(regs*)+0x4d>
c00169ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169af:	8b 13                	mov    edx,DWORD PTR [ebx]
c00169b1:	83 ec 0c             	sub    esp,0xc
c00169b4:	53                   	push   ebx
c00169b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00169b8:	83 c4 10             	add    esp,0x10
c00169bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169bf:	85 c0                	test   eax,eax
c00169c1:	0f 95 c0             	setne  al
c00169c4:	31 d2                	xor    edx,edx
c00169c6:	0f b6 c0             	movzx  eax,al
c00169c9:	f7 d8                	neg    eax
c00169cb:	83 d2 00             	adc    edx,0x0
c00169ce:	83 c4 14             	add    esp,0x14
c00169d1:	f7 da                	neg    edx
c00169d3:	5b                   	pop    ebx
c00169d4:	5e                   	pop    esi
c00169d5:	c3                   	ret    

c00169d6 <sysCallUnlink(regs*)>:
c00169d6:	56                   	push   esi
c00169d7:	53                   	push   ebx
c00169d8:	83 ec 20             	sub    esp,0x20
c00169db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169df:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00169e2:	68 14 01 00 00       	push   0x114
c00169e7:	e8 67 33 ff ff       	call   c0009d53 <malloc>
c00169ec:	83 c4 0c             	add    esp,0xc
c00169ef:	89 c3                	mov    ebx,eax
c00169f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169f6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00169f9:	56                   	push   esi
c00169fa:	53                   	push   ebx
c00169fb:	e8 aa 6b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016a00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a03:	e8 f4 6d ff ff       	call   c000d7fc <File::unlink()>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	85 db                	test   ebx,ebx
c0016a0d:	74 14                	je     c0016a23 <sysCallUnlink(regs*)+0x4d>
c0016a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a13:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	53                   	push   ebx
c0016a19:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a23:	85 c0                	test   eax,eax
c0016a25:	0f 95 c0             	setne  al
c0016a28:	31 d2                	xor    edx,edx
c0016a2a:	0f b6 c0             	movzx  eax,al
c0016a2d:	f7 d8                	neg    eax
c0016a2f:	83 d2 00             	adc    edx,0x0
c0016a32:	83 c4 14             	add    esp,0x14
c0016a35:	f7 da                	neg    edx
c0016a37:	5b                   	pop    ebx
c0016a38:	5e                   	pop    esi
c0016a39:	c3                   	ret    

c0016a3a <sysCallGetArgv(regs*)>:
c0016a3a:	83 ec 0c             	sub    esp,0xc
c0016a3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a41:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016a44:	85 c0                	test   eax,eax
c0016a46:	78 2b                	js     c0016a73 <sysCallGetArgv(regs*)+0x39>
c0016a48:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a4e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016a51:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016a57:	7d 1a                	jge    c0016a73 <sysCallGetArgv(regs*)+0x39>
c0016a59:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016a60:	85 c0                	test   eax,eax
c0016a62:	74 17                	je     c0016a7b <sysCallGetArgv(regs*)+0x41>
c0016a64:	83 ec 08             	sub    esp,0x8
c0016a67:	50                   	push   eax
c0016a68:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016a6b:	e8 c8 9c fe ff       	call   c0000738 <strcpy>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	31 c0                	xor    eax,eax
c0016a75:	31 d2                	xor    edx,edx
c0016a77:	83 c4 0c             	add    esp,0xc
c0016a7a:	c3                   	ret    
c0016a7b:	b8 01 00 00 00       	mov    eax,0x1
c0016a80:	31 d2                	xor    edx,edx
c0016a82:	83 c4 0c             	add    esp,0xc
c0016a85:	c3                   	ret    

c0016a86 <sysCallTTYName(regs*)>:
c0016a86:	56                   	push   esi
c0016a87:	53                   	push   ebx
c0016a88:	53                   	push   ebx
c0016a89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a8d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016a90:	85 c0                	test   eax,eax
c0016a92:	74 5f                	je     c0016af3 <sysCallTTYName(regs*)+0x6d>
c0016a94:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016a97:	83 f8 02             	cmp    eax,0x2
c0016a9a:	77 3e                	ja     c0016ada <sysCallTTYName(regs*)+0x54>
c0016a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016aa4:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016aaa:	85 db                	test   ebx,ebx
c0016aac:	74 45                	je     c0016af3 <sysCallTTYName(regs*)+0x6d>
c0016aae:	83 ec 0c             	sub    esp,0xc
c0016ab1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab3:	53                   	push   ebx
c0016ab4:	ff 10                	call   DWORD PTR [eax]
c0016ab6:	83 c4 10             	add    esp,0x10
c0016ab9:	84 c0                	test   al,al
c0016abb:	74 41                	je     c0016afe <sysCallTTYName(regs*)+0x78>
c0016abd:	83 ec 08             	sub    esp,0x8
c0016ac0:	81 c3 82 00 00 00    	add    ebx,0x82
c0016ac6:	53                   	push   ebx
c0016ac7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016aca:	e8 69 9c fe ff       	call   c0000738 <strcpy>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	31 c0                	xor    eax,eax
c0016ad4:	59                   	pop    ecx
c0016ad5:	31 d2                	xor    edx,edx
c0016ad7:	5b                   	pop    ebx
c0016ad8:	5e                   	pop    esi
c0016ad9:	c3                   	ret    
c0016ada:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016adf:	74 bb                	je     c0016a9c <sysCallTTYName(regs*)+0x16>
c0016ae1:	83 ec 0c             	sub    esp,0xc
c0016ae4:	50                   	push   eax
c0016ae5:	e8 d9 50 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	89 c3                	mov    ebx,eax
c0016aef:	85 db                	test   ebx,ebx
c0016af1:	75 bb                	jne    c0016aae <sysCallTTYName(regs*)+0x28>
c0016af3:	59                   	pop    ecx
c0016af4:	b8 01 00 00 00       	mov    eax,0x1
c0016af9:	31 d2                	xor    edx,edx
c0016afb:	5b                   	pop    ebx
c0016afc:	5e                   	pop    esi
c0016afd:	c3                   	ret    
c0016afe:	59                   	pop    ecx
c0016aff:	b8 02 00 00 00       	mov    eax,0x2
c0016b04:	31 d2                	xor    edx,edx
c0016b06:	5b                   	pop    ebx
c0016b07:	5e                   	pop    esi
c0016b08:	c3                   	ret    

c0016b09 <sysCallUSleep(regs*)>:
c0016b09:	83 ec 1c             	sub    esp,0x1c
c0016b0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b10:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b13:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016b16:	6a 00                	push   0x0
c0016b18:	6a 64                	push   0x64
c0016b1a:	52                   	push   edx
c0016b1b:	50                   	push   eax
c0016b1c:	e8 27 c5 00 00       	call   c0023048 <__udivdi3>
c0016b21:	83 c4 14             	add    esp,0x14
c0016b24:	50                   	push   eax
c0016b25:	e8 2e 25 00 00       	call   c0019058 <milliTenthSleep(unsigned int)>
c0016b2a:	31 c0                	xor    eax,eax
c0016b2c:	31 d2                	xor    edx,edx
c0016b2e:	83 c4 1c             	add    esp,0x1c
c0016b31:	c3                   	ret    

c0016b32 <sysCallSpawn(regs*)>:
c0016b32:	56                   	push   esi
c0016b33:	53                   	push   ebx
c0016b34:	50                   	push   eax
c0016b35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b39:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b3c:	85 c0                	test   eax,eax
c0016b3e:	75 08                	jne    c0016b48 <sysCallSpawn(regs*)+0x16>
c0016b40:	59                   	pop    ecx
c0016b41:	31 c0                	xor    eax,eax
c0016b43:	31 d2                	xor    edx,edx
c0016b45:	5b                   	pop    ebx
c0016b46:	5e                   	pop    esi
c0016b47:	c3                   	ret    
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	68 1f 07 00 00       	push   0x71f
c0016b50:	e8 fe 31 ff ff       	call   c0009d53 <malloc>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	89 c6                	mov    esi,eax
c0016b5a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016b5d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b60:	85 c0                	test   eax,eax
c0016b62:	75 32                	jne    c0016b96 <sysCallSpawn(regs*)+0x64>
c0016b64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b6c:	52                   	push   edx
c0016b6d:	50                   	push   eax
c0016b6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b71:	56                   	push   esi
c0016b72:	e8 d9 1b 00 00       	call   c0018750 <Process::Process(char const*, Process*, char**)>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016b81:	75 bd                	jne    c0016b40 <sysCallSpawn(regs*)+0xe>
c0016b83:	83 ec 0c             	sub    esp,0xc
c0016b86:	56                   	push   esi
c0016b87:	e8 b0 20 00 00       	call   c0018c3c <Process::createUserThread()>
c0016b8c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	99                   	cdq    
c0016b92:	59                   	pop    ecx
c0016b93:	5b                   	pop    ebx
c0016b94:	5e                   	pop    esi
c0016b95:	c3                   	ret    
c0016b96:	31 c0                	xor    eax,eax
c0016b98:	eb d2                	jmp    c0016b6c <sysCallSpawn(regs*)+0x3a>

c0016b9a <sysCallGetEnv(regs*)>:
c0016b9a:	57                   	push   edi
c0016b9b:	56                   	push   esi
c0016b9c:	53                   	push   ebx
c0016b9d:	83 ec 1c             	sub    esp,0x1c
c0016ba0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ba9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016bac:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016baf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016bb2:	e8 96 e3 ff ff       	call   c0014f4d <Krnl::getProcessTotalEnvCount(Process*)>
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	39 c7                	cmp    edi,eax
c0016bbc:	7c 14                	jl     c0016bd2 <sysCallGetEnv(regs*)+0x38>
c0016bbe:	85 f6                	test   esi,esi
c0016bc0:	75 0b                	jne    c0016bcd <sysCallGetEnv(regs*)+0x33>
c0016bc2:	83 c4 10             	add    esp,0x10
c0016bc5:	31 c0                	xor    eax,eax
c0016bc7:	5b                   	pop    ebx
c0016bc8:	31 d2                	xor    edx,edx
c0016bca:	5e                   	pop    esi
c0016bcb:	5f                   	pop    edi
c0016bcc:	c3                   	ret    
c0016bcd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016bd0:	eb f0                	jmp    c0016bc2 <sysCallGetEnv(regs*)+0x28>
c0016bd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bd6:	52                   	push   edx
c0016bd7:	57                   	push   edi
c0016bd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bde:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016be1:	50                   	push   eax
c0016be2:	e8 86 e3 ff ff       	call   c0014f6d <Krnl::getProcessEnvPair(Process*, int)>
c0016be7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016bf2:	83 c4 0c             	add    esp,0xc
c0016bf5:	85 c9                	test   ecx,ecx
c0016bf7:	75 23                	jne    c0016c1c <sysCallGetEnv(regs*)+0x82>
c0016bf9:	83 ec 0c             	sub    esp,0xc
c0016bfc:	50                   	push   eax
c0016bfd:	e8 96 9a fe ff       	call   c0000698 <strlen>
c0016c02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016c05:	89 c3                	mov    ebx,eax
c0016c07:	e8 8c 9a fe ff       	call   c0000698 <strlen>
c0016c0c:	83 c4 10             	add    esp,0x10
c0016c0f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	31 d2                	xor    edx,edx
c0016c18:	5b                   	pop    ebx
c0016c19:	5e                   	pop    esi
c0016c1a:	5f                   	pop    edi
c0016c1b:	c3                   	ret    
c0016c1c:	83 ec 08             	sub    esp,0x8
c0016c1f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016c22:	50                   	push   eax
c0016c23:	56                   	push   esi
c0016c24:	e8 0f 9b fe ff       	call   c0000738 <strcpy>
c0016c29:	58                   	pop    eax
c0016c2a:	5a                   	pop    edx
c0016c2b:	68 6b 6a 02 c0       	push   0xc0026a6b
c0016c30:	56                   	push   esi
c0016c31:	e8 42 9c fe ff       	call   c0000878 <strcat>
c0016c36:	59                   	pop    ecx
c0016c37:	5b                   	pop    ebx
c0016c38:	57                   	push   edi
c0016c39:	56                   	push   esi
c0016c3a:	e8 39 9c fe ff       	call   c0000878 <strcat>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	e9 7b ff ff ff       	jmp    c0016bc2 <sysCallGetEnv(regs*)+0x28>

c0016c47 <sysAppSettings(regs*)>:
c0016c47:	57                   	push   edi
c0016c48:	56                   	push   esi
c0016c49:	56                   	push   esi
c0016c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c51:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016c57:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c5c:	66 3d c0 09          	cmp    ax,0x9c0
c0016c60:	75 2e                	jne    c0016c90 <sysAppSettings(regs*)+0x49>
c0016c62:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016c68:	83 e0 1f             	and    eax,0x1f
c0016c6b:	3c 01                	cmp    al,0x1
c0016c6d:	74 2c                	je     c0016c9b <sysAppSettings(regs*)+0x54>
c0016c6f:	3c 07                	cmp    al,0x7
c0016c71:	0f 84 b3 00 00 00    	je     c0016d2a <sysAppSettings(regs*)+0xe3>
c0016c77:	84 c0                	test   al,al
c0016c79:	0f 84 d2 00 00 00    	je     c0016d51 <sysAppSettings(regs*)+0x10a>
c0016c7f:	3c 08                	cmp    al,0x8
c0016c81:	74 63                	je     c0016ce6 <sysAppSettings(regs*)+0x9f>
c0016c83:	59                   	pop    ecx
c0016c84:	0f b6 c0             	movzx  eax,al
c0016c87:	5e                   	pop    esi
c0016c88:	05 e8 03 00 00       	add    eax,0x3e8
c0016c8d:	5f                   	pop    edi
c0016c8e:	99                   	cdq    
c0016c8f:	c3                   	ret    
c0016c90:	b8 01 00 00 00       	mov    eax,0x1
c0016c95:	59                   	pop    ecx
c0016c96:	31 d2                	xor    edx,edx
c0016c98:	5e                   	pop    esi
c0016c99:	5f                   	pop    edi
c0016c9a:	c3                   	ret    
c0016c9b:	50                   	push   eax
c0016c9c:	68 00 01 00 00       	push   0x100
c0016ca1:	6a 00                	push   0x0
c0016ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cab:	83 c0 0c             	add    eax,0xc
c0016cae:	50                   	push   eax
c0016caf:	e8 c8 99 fe ff       	call   c000067c <memset>
c0016cb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb9:	b9 ff 00 00 00       	mov    ecx,0xff
c0016cbe:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016cc1:	83 c7 0c             	add    edi,0xc
c0016cc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ccb:	5a                   	pop    edx
c0016ccc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ccf:	59                   	pop    ecx
c0016cd0:	8d 50 0c             	lea    edx,[eax+0xc]
c0016cd3:	52                   	push   edx
c0016cd4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016cda:	e8 0d 40 ff ff       	call   c000acec <VgaText::setTitle(char*)>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	31 c0                	xor    eax,eax
c0016ce4:	eb af                	jmp    c0016c95 <sysAppSettings(regs*)+0x4e>
c0016ce6:	83 ec 08             	sub    esp,0x8
c0016ce9:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016cef:	83 e0 0f             	and    eax,0xf
c0016cf2:	50                   	push   eax
c0016cf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cfb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016d01:	e8 d6 3f ff ff       	call   c000acdc <VgaText::setTitleColour(VgaColour)>
c0016d06:	5f                   	pop    edi
c0016d07:	58                   	pop    eax
c0016d08:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016d0e:	c1 e8 04             	shr    eax,0x4
c0016d11:	83 e0 0f             	and    eax,0xf
c0016d14:	50                   	push   eax
c0016d15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d1d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016d23:	e8 a4 3f ff ff       	call   c000accc <VgaText::setTitleTextColour(VgaColour)>
c0016d28:	eb b5                	jmp    c0016cdf <sysAppSettings(regs*)+0x98>
c0016d2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d32:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016d38:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016d3e:	c0 e8 06             	shr    al,0x6
c0016d41:	83 e0 01             	and    eax,0x1
c0016d44:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016d4a:	31 c0                	xor    eax,eax
c0016d4c:	e9 44 ff ff ff       	jmp    c0016c95 <sysAppSettings(regs*)+0x4e>
c0016d51:	b8 02 00 00 00       	mov    eax,0x2
c0016d56:	e9 3a ff ff ff       	jmp    c0016c95 <sysAppSettings(regs*)+0x4e>

c0016d5b <sysSetFatAttrib(regs*)>:
c0016d5b:	57                   	push   edi
c0016d5c:	56                   	push   esi
c0016d5d:	53                   	push   ebx
c0016d5e:	83 ec 1c             	sub    esp,0x1c
c0016d61:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d65:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d68:	68 14 01 00 00       	push   0x114
c0016d6d:	e8 e1 2f ff ff       	call   c0009d53 <malloc>
c0016d72:	83 c4 0c             	add    esp,0xc
c0016d75:	89 c3                	mov    ebx,eax
c0016d77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d7f:	57                   	push   edi
c0016d80:	53                   	push   ebx
c0016d81:	e8 24 68 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016d86:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d89:	83 c4 0c             	add    esp,0xc
c0016d8c:	0f b6 d4             	movzx  edx,ah
c0016d8f:	0f b6 c0             	movzx  eax,al
c0016d92:	52                   	push   edx
c0016d93:	50                   	push   eax
c0016d94:	53                   	push   ebx
c0016d95:	e8 fc 6a ff ff       	call   c000d896 <File::chfatattr(unsigned char, unsigned char)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	85 db                	test   ebx,ebx
c0016d9f:	74 14                	je     c0016db5 <sysSetFatAttrib(regs*)+0x5a>
c0016da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016da7:	83 ec 0c             	sub    esp,0xc
c0016daa:	53                   	push   ebx
c0016dab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016db5:	85 c0                	test   eax,eax
c0016db7:	0f 95 c0             	setne  al
c0016dba:	31 d2                	xor    edx,edx
c0016dbc:	0f b6 c0             	movzx  eax,al
c0016dbf:	f7 d8                	neg    eax
c0016dc1:	83 d2 00             	adc    edx,0x0
c0016dc4:	83 c4 10             	add    esp,0x10
c0016dc7:	f7 da                	neg    edx
c0016dc9:	5b                   	pop    ebx
c0016dca:	5e                   	pop    esi
c0016dcb:	5f                   	pop    edi
c0016dcc:	c3                   	ret    

c0016dcd <sysPipe(regs*)>:
c0016dcd:	57                   	push   edi
c0016dce:	56                   	push   esi
c0016dcf:	53                   	push   ebx
c0016dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dd4:	83 ec 0c             	sub    esp,0xc
c0016dd7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016dda:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ddd:	6a 20                	push   0x20
c0016ddf:	e8 6f 2f ff ff       	call   c0009d53 <malloc>
c0016de4:	89 c3                	mov    ebx,eax
c0016de6:	58                   	pop    eax
c0016de7:	5a                   	pop    edx
c0016de8:	68 00 50 00 00       	push   0x5000
c0016ded:	53                   	push   ebx
c0016dee:	e8 71 3c ff ff       	call   c000aa64 <Pipe::Pipe(int)>
c0016df3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016df6:	e8 d3 4a ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0016dfb:	89 07                	mov    DWORD PTR [edi],eax
c0016dfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e00:	e8 c9 4a ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	89 06                	mov    DWORD PTR [esi],eax
c0016e0a:	31 d2                	xor    edx,edx
c0016e0c:	5b                   	pop    ebx
c0016e0d:	31 c0                	xor    eax,eax
c0016e0f:	5e                   	pop    esi
c0016e10:	5f                   	pop    edi
c0016e11:	c3                   	ret    

c0016e12 <sysGetUnixTime(regs*)>:
c0016e12:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0016e17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e21:	e9 a4 72 ff ff       	jmp    c000e0ca <Clock::timeInSecondsLocal()>

c0016e26 <string_ends_with(char const*, char const*)>:
c0016e26:	57                   	push   edi
c0016e27:	56                   	push   esi
c0016e28:	53                   	push   ebx
c0016e29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e31:	83 ec 0c             	sub    esp,0xc
c0016e34:	53                   	push   ebx
c0016e35:	e8 5e 98 fe ff       	call   c0000698 <strlen>
c0016e3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e3d:	89 c6                	mov    esi,eax
c0016e3f:	e8 54 98 fe ff       	call   c0000698 <strlen>
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	39 c6                	cmp    esi,eax
c0016e49:	7d 06                	jge    c0016e51 <string_ends_with(char const*, char const*)+0x2b>
c0016e4b:	5b                   	pop    ebx
c0016e4c:	31 c0                	xor    eax,eax
c0016e4e:	5e                   	pop    esi
c0016e4f:	5f                   	pop    edi
c0016e50:	c3                   	ret    
c0016e51:	83 ec 08             	sub    esp,0x8
c0016e54:	29 c6                	sub    esi,eax
c0016e56:	57                   	push   edi
c0016e57:	01 f3                	add    ebx,esi
c0016e59:	53                   	push   ebx
c0016e5a:	e8 65 99 fe ff       	call   c00007c4 <strcmp>
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	85 c0                	test   eax,eax
c0016e64:	5b                   	pop    ebx
c0016e65:	0f 94 c0             	sete   al
c0016e68:	5e                   	pop    esi
c0016e69:	0f b6 c0             	movzx  eax,al
c0016e6c:	5f                   	pop    edi
c0016e6d:	c3                   	ret    

c0016e6e <sysCallOpen(regs*)>:
c0016e6e:	56                   	push   esi
c0016e6f:	53                   	push   ebx
c0016e70:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e76:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016e7d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016e80:	85 c9                	test   ecx,ecx
c0016e82:	0f 84 ad 01 00 00    	je     c0017035 <sysCallOpen(regs*)+0x1c7>
c0016e88:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e8b:	85 c0                	test   eax,eax
c0016e8d:	0f 84 a2 01 00 00    	je     c0017035 <sysCallOpen(regs*)+0x1c7>
c0016e93:	52                   	push   edx
c0016e94:	68 6d 6a 02 c0       	push   0xc0026a6d
c0016e99:	50                   	push   eax
c0016e9a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016e9e:	56                   	push   esi
c0016e9f:	e8 5c 65 ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016ea4:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ea7:	e8 ec 97 fe ff       	call   c0000698 <strlen>
c0016eac:	83 c4 10             	add    esp,0x10
c0016eaf:	48                   	dec    eax
c0016eb0:	74 1d                	je     c0016ecf <sysCallOpen(regs*)+0x61>
c0016eb2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016eb5:	eb 0f                	jmp    c0016ec6 <sysCallOpen(regs*)+0x58>
c0016eb7:	80 fa 3a             	cmp    dl,0x3a
c0016eba:	74 0f                	je     c0016ecb <sysCallOpen(regs*)+0x5d>
c0016ebc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016ec0:	48                   	dec    eax
c0016ec1:	74 0c                	je     c0016ecf <sysCallOpen(regs*)+0x61>
c0016ec3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016ec6:	80 fa 2e             	cmp    dl,0x2e
c0016ec9:	75 ec                	jne    c0016eb7 <sysCallOpen(regs*)+0x49>
c0016ecb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016ecf:	83 ec 08             	sub    esp,0x8
c0016ed2:	68 71 6a 02 c0       	push   0xc0026a71
c0016ed7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016eda:	e8 47 ff ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016edf:	83 c4 10             	add    esp,0x10
c0016ee2:	85 c0                	test   eax,eax
c0016ee4:	74 1d                	je     c0016f03 <sysCallOpen(regs*)+0x95>
c0016ee6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ee9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016eef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016ef6:	81 c4 04 01 00 00    	add    esp,0x104
c0016efc:	31 c0                	xor    eax,eax
c0016efe:	31 d2                	xor    edx,edx
c0016f00:	5b                   	pop    ebx
c0016f01:	5e                   	pop    esi
c0016f02:	c3                   	ret    
c0016f03:	83 ec 08             	sub    esp,0x8
c0016f06:	68 76 6a 02 c0       	push   0xc0026a76
c0016f0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f0e:	e8 13 ff ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016f13:	83 c4 10             	add    esp,0x10
c0016f16:	85 c0                	test   eax,eax
c0016f18:	75 cc                	jne    c0016ee6 <sysCallOpen(regs*)+0x78>
c0016f1a:	83 ec 08             	sub    esp,0x8
c0016f1d:	68 72 6a 02 c0       	push   0xc0026a72
c0016f22:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f25:	e8 9a 98 fe ff       	call   c00007c4 <strcmp>
c0016f2a:	83 c4 10             	add    esp,0x10
c0016f2d:	85 c0                	test   eax,eax
c0016f2f:	74 b5                	je     c0016ee6 <sysCallOpen(regs*)+0x78>
c0016f31:	83 ec 08             	sub    esp,0x8
c0016f34:	68 71 6a 02 c0       	push   0xc0026a71
c0016f39:	56                   	push   esi
c0016f3a:	e8 e7 fe ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	85 c0                	test   eax,eax
c0016f44:	75 a0                	jne    c0016ee6 <sysCallOpen(regs*)+0x78>
c0016f46:	83 ec 08             	sub    esp,0x8
c0016f49:	68 7b 6a 02 c0       	push   0xc0026a7b
c0016f4e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f51:	e8 d0 fe ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	85 c0                	test   eax,eax
c0016f5b:	0f 85 e7 00 00 00    	jne    c0017048 <sysCallOpen(regs*)+0x1da>
c0016f61:	83 ec 08             	sub    esp,0x8
c0016f64:	68 80 6a 02 c0       	push   0xc0026a80
c0016f69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f6c:	e8 b5 fe ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016f71:	83 c4 10             	add    esp,0x10
c0016f74:	85 c0                	test   eax,eax
c0016f76:	0f 85 cc 00 00 00    	jne    c0017048 <sysCallOpen(regs*)+0x1da>
c0016f7c:	83 ec 08             	sub    esp,0x8
c0016f7f:	68 7c 6a 02 c0       	push   0xc0026a7c
c0016f84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f87:	e8 38 98 fe ff       	call   c00007c4 <strcmp>
c0016f8c:	83 c4 10             	add    esp,0x10
c0016f8f:	85 c0                	test   eax,eax
c0016f91:	0f 84 b1 00 00 00    	je     c0017048 <sysCallOpen(regs*)+0x1da>
c0016f97:	83 ec 08             	sub    esp,0x8
c0016f9a:	68 7b 6a 02 c0       	push   0xc0026a7b
c0016f9f:	56                   	push   esi
c0016fa0:	e8 81 fe ff ff       	call   c0016e26 <string_ends_with(char const*, char const*)>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	85 c0                	test   eax,eax
c0016faa:	0f 85 98 00 00 00    	jne    c0017048 <sysCallOpen(regs*)+0x1da>
c0016fb0:	83 ec 0c             	sub    esp,0xc
c0016fb3:	68 14 01 00 00       	push   0x114
c0016fb8:	e8 96 2d ff ff       	call   c0009d53 <malloc>
c0016fbd:	83 c4 0c             	add    esp,0xc
c0016fc0:	89 c6                	mov    esi,eax
c0016fc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fc7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016fca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fcd:	56                   	push   esi
c0016fce:	e8 d7 65 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	85 f6                	test   esi,esi
c0016fd8:	74 5b                	je     c0017035 <sysCallOpen(regs*)+0x1c7>
c0016fda:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016fdd:	0f b6 c2             	movzx  eax,dl
c0016fe0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016fe3:	89 d0                	mov    eax,edx
c0016fe5:	83 e0 01             	and    eax,0x1
c0016fe8:	f6 c2 02             	test   dl,0x2
c0016feb:	74 03                	je     c0016ff0 <sysCallOpen(regs*)+0x182>
c0016fed:	83 c8 02             	or     eax,0x2
c0016ff0:	f6 c2 04             	test   dl,0x4
c0016ff3:	74 03                	je     c0016ff8 <sysCallOpen(regs*)+0x18a>
c0016ff5:	83 c8 04             	or     eax,0x4
c0016ff8:	f6 c2 08             	test   dl,0x8
c0016ffb:	74 03                	je     c0017000 <sysCallOpen(regs*)+0x192>
c0016ffd:	83 c8 0a             	or     eax,0xa
c0017000:	83 e2 10             	and    edx,0x10
c0017003:	74 03                	je     c0017008 <sysCallOpen(regs*)+0x19a>
c0017005:	83 c8 12             	or     eax,0x12
c0017008:	83 ec 08             	sub    esp,0x8
c001700b:	50                   	push   eax
c001700c:	56                   	push   esi
c001700d:	e8 72 66 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017012:	83 c4 10             	add    esp,0x10
c0017015:	85 c0                	test   eax,eax
c0017017:	75 1c                	jne    c0017035 <sysCallOpen(regs*)+0x1c7>
c0017019:	83 ec 0c             	sub    esp,0xc
c001701c:	56                   	push   esi
c001701d:	e8 ac 48 ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0017022:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017025:	83 c4 10             	add    esp,0x10
c0017028:	89 02                	mov    DWORD PTR [edx],eax
c001702a:	c1 f8 1f             	sar    eax,0x1f
c001702d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017030:	e9 c1 fe ff ff       	jmp    c0016ef6 <sysCallOpen(regs*)+0x88>
c0017035:	81 c4 04 01 00 00    	add    esp,0x104
c001703b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017040:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017045:	5b                   	pop    ebx
c0017046:	5e                   	pop    esi
c0017047:	c3                   	ret    
c0017048:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001704b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017051:	e9 99 fe ff ff       	jmp    c0016eef <sysCallOpen(regs*)+0x81>

c0017056 <Sys::loadSyscalls()>:
c0017056:	c7 05 00 98 02 c0 c7 62 01 c0 	mov    DWORD PTR ds:0xc0029800,0xc00162c7
c0017060:	c7 05 04 98 02 c0 bc 5e 01 c0 	mov    DWORD PTR ds:0xc0029804,0xc0015ebc
c001706a:	c7 05 08 98 02 c0 ad 60 01 c0 	mov    DWORD PTR ds:0xc0029808,0xc00160ad
c0017074:	c7 05 0c 98 02 c0 fd 61 01 c0 	mov    DWORD PTR ds:0xc002980c,0xc00161fd
c001707e:	c7 05 10 98 02 c0 45 60 01 c0 	mov    DWORD PTR ds:0xc0029810,0xc0016045
c0017088:	c7 05 14 98 02 c0 f3 5e 01 c0 	mov    DWORD PTR ds:0xc0029814,0xc0015ef3
c0017092:	c7 05 18 98 02 c0 d4 5e 01 c0 	mov    DWORD PTR ds:0xc0029818,0xc0015ed4
c001709c:	c7 05 1c 98 02 c0 02 61 01 c0 	mov    DWORD PTR ds:0xc002981c,0xc0016102
c00170a6:	c7 05 24 98 02 c0 8a 67 01 c0 	mov    DWORD PTR ds:0xc0029824,0xc001678a
c00170b0:	c7 05 20 98 02 c0 6e 6e 01 c0 	mov    DWORD PTR ds:0xc0029820,0xc0016e6e
c00170ba:	c7 05 28 98 02 c0 ea 67 01 c0 	mov    DWORD PTR ds:0xc0029828,0xc00167ea
c00170c4:	c7 05 2c 98 02 c0 cd 64 01 c0 	mov    DWORD PTR ds:0xc002982c,0xc00164cd
c00170ce:	c7 05 30 98 02 c0 ff 62 01 c0 	mov    DWORD PTR ds:0xc0029830,0xc00162ff
c00170d8:	c7 05 34 98 02 c0 04 63 01 c0 	mov    DWORD PTR ds:0xc0029834,0xc0016304
c00170e2:	c7 05 38 98 02 c0 b3 68 01 c0 	mov    DWORD PTR ds:0xc0029838,0xc00168b3
c00170ec:	c7 05 3c 98 02 c0 5f 68 01 c0 	mov    DWORD PTR ds:0xc002983c,0xc001685f
c00170f6:	c7 05 40 98 02 c0 a6 65 01 c0 	mov    DWORD PTR ds:0xc0029840,0xc00165a6
c0017100:	c7 05 44 98 02 c0 fd 65 01 c0 	mov    DWORD PTR ds:0xc0029844,0xc00165fd
c001710a:	c7 05 48 98 02 c0 69 66 01 c0 	mov    DWORD PTR ds:0xc0029848,0xc0016669
c0017114:	c7 05 4c 98 02 c0 09 63 01 c0 	mov    DWORD PTR ds:0xc002984c,0xc0016309
c001711e:	c7 05 50 98 02 c0 23 69 01 c0 	mov    DWORD PTR ds:0xc0029850,0xc0016923
c0017128:	c7 05 54 98 02 c0 3d 69 01 c0 	mov    DWORD PTR ds:0xc0029854,0xc001693d
c0017132:	c7 05 58 98 02 c0 3d 69 01 c0 	mov    DWORD PTR ds:0xc0029858,0xc001693d
c001713c:	c7 05 5c 98 02 c0 72 69 01 c0 	mov    DWORD PTR ds:0xc002985c,0xc0016972
c0017146:	c7 05 60 98 02 c0 d6 69 01 c0 	mov    DWORD PTR ds:0xc0029860,0xc00169d6
c0017150:	c7 05 64 98 02 c0 13 63 01 c0 	mov    DWORD PTR ds:0xc0029864,0xc0016313
c001715a:	c7 05 68 98 02 c0 3a 6a 01 c0 	mov    DWORD PTR ds:0xc0029868,0xc0016a3a
c0017164:	c7 05 6c 98 02 c0 8a 64 01 c0 	mov    DWORD PTR ds:0xc002986c,0xc001648a
c001716e:	c7 05 70 98 02 c0 86 6a 01 c0 	mov    DWORD PTR ds:0xc0029870,0xc0016a86
c0017178:	c7 05 74 98 02 c0 4c 65 01 c0 	mov    DWORD PTR ds:0xc0029874,0xc001654c
c0017182:	c7 05 78 98 02 c0 09 6b 01 c0 	mov    DWORD PTR ds:0xc0029878,0xc0016b09
c001718c:	c7 05 7c 98 02 c0 db 66 01 c0 	mov    DWORD PTR ds:0xc002987c,0xc00166db
c0017196:	c7 05 80 98 02 c0 32 6b 01 c0 	mov    DWORD PTR ds:0xc0029880,0xc0016b32
c00171a0:	c7 05 84 98 02 c0 9a 6b 01 c0 	mov    DWORD PTR ds:0xc0029884,0xc0016b9a
c00171aa:	c7 05 88 98 02 c0 47 6c 01 c0 	mov    DWORD PTR ds:0xc0029888,0xc0016c47
c00171b4:	c7 05 8c 98 02 c0 23 63 01 c0 	mov    DWORD PTR ds:0xc002988c,0xc0016323
c00171be:	c7 05 90 98 02 c0 8d 63 01 c0 	mov    DWORD PTR ds:0xc0029890,0xc001638d
c00171c8:	c7 05 94 98 02 c0 d7 63 01 c0 	mov    DWORD PTR ds:0xc0029894,0xc00163d7
c00171d2:	c7 05 98 98 02 c0 5b 6d 01 c0 	mov    DWORD PTR ds:0xc0029898,0xc0016d5b
c00171dc:	c7 05 9c 98 02 c0 58 69 01 c0 	mov    DWORD PTR ds:0xc002989c,0xc0016958
c00171e6:	c7 05 a0 98 02 c0 2c 64 01 c0 	mov    DWORD PTR ds:0xc00298a0,0xc001642c
c00171f0:	c7 05 a4 98 02 c0 cd 6d 01 c0 	mov    DWORD PTR ds:0xc00298a4,0xc0016dcd
c00171fa:	c7 05 a8 98 02 c0 12 6e 01 c0 	mov    DWORD PTR ds:0xc00298a8,0xc0016e12
c0017204:	c7 05 ac 98 02 c0 9d 5f 01 c0 	mov    DWORD PTR ds:0xc00298ac,0xc0015f9d
c001720e:	c7 05 b0 98 02 c0 1e 61 01 c0 	mov    DWORD PTR ds:0xc00298b0,0xc001611e
c0017218:	c7 05 b4 98 02 c0 b3 61 01 c0 	mov    DWORD PTR ds:0xc00298b4,0xc00161b3
c0017222:	c7 05 b8 98 02 c0 86 5e 01 c0 	mov    DWORD PTR ds:0xc00298b8,0xc0015e86
c001722c:	c7 05 bc 98 02 c0 65 62 01 c0 	mov    DWORD PTR ds:0xc00298bc,0xc0016265
c0017236:	c7 05 c0 98 02 c0 ff 5e 01 c0 	mov    DWORD PTR ds:0xc00298c0,0xc0015eff
c0017240:	c7 05 c4 98 02 c0 19 5f 01 c0 	mov    DWORD PTR ds:0xc00298c4,0xc0015f19
c001724a:	c3                   	ret    

c001724b <Sys::systemCall(regs*, void*)>:
c001724b:	53                   	push   ebx
c001724c:	83 ec 08             	sub    esp,0x8
c001724f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017253:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017256:	83 f8 7f             	cmp    eax,0x7f
c0017259:	77 16                	ja     c0017271 <Sys::systemCall(regs*, void*)+0x26>
c001725b:	8b 14 85 00 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6800]
c0017262:	85 d2                	test   edx,edx
c0017264:	74 0b                	je     c0017271 <Sys::systemCall(regs*, void*)+0x26>
c0017266:	83 ec 0c             	sub    esp,0xc
c0017269:	53                   	push   ebx
c001726a:	ff d2                	call   edx
c001726c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001726f:	eb 0d                	jmp    c001727e <Sys::systemCall(regs*, void*)+0x33>
c0017271:	52                   	push   edx
c0017272:	52                   	push   edx
c0017273:	50                   	push   eax
c0017274:	68 85 6a 02 c0       	push   0xc0026a85
c0017279:	e8 c1 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001727e:	83 c4 10             	add    esp,0x10
c0017281:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0017286:	31 d2                	xor    edx,edx
c0017288:	83 c4 08             	add    esp,0x8
c001728b:	5b                   	pop    ebx
c001728c:	c3                   	ret    

c001728d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001728d:	55                   	push   ebp
c001728e:	57                   	push   edi
c001728f:	56                   	push   esi
c0017290:	53                   	push   ebx
c0017291:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0017297:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001729e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00172a5:	85 c0                	test   eax,eax
c00172a7:	0f 95 c1             	setne  cl
c00172aa:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00172b2:	0f 94 c2             	sete   dl
c00172b5:	84 d1                	test   cl,dl
c00172b7:	74 23                	je     c00172dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00172b9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00172bf:	74 1b                	je     c00172dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00172c1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00172c7:	89 da                	mov    edx,ebx
c00172c9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00172cf:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00172d5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00172dc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00172e3:	05 ff 0f 00 00       	add    eax,0xfff
c00172e8:	83 ec 0c             	sub    esp,0xc
c00172eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ef:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00172f5:	c1 e8 0c             	shr    eax,0xc
c00172f8:	89 fe                	mov    esi,edi
c00172fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172fe:	c1 ee 0c             	shr    esi,0xc
c0017301:	6a 01                	push   0x1
c0017303:	e8 11 4a ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0017308:	89 c5                	mov    ebp,eax
c001730a:	58                   	pop    eax
c001730b:	5a                   	pop    edx
c001730c:	56                   	push   esi
c001730d:	68 99 6a 02 c0       	push   0xc0026a99
c0017312:	e8 28 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0017317:	59                   	pop    ecx
c0017318:	58                   	pop    eax
c0017319:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001731d:	68 ab 6a 02 c0       	push   0xc0026aab
c0017322:	e8 18 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0017327:	83 c4 10             	add    esp,0x10
c001732a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017330:	0f 86 31 01 00 00    	jbe    c0017467 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0017336:	c1 e6 0c             	shl    esi,0xc
c0017339:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001733c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001733f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017343:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001734a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001734d:	01 df                	add    edi,ebx
c001734f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017352:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017356:	0f 84 08 01 00 00    	je     c0017464 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001735c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017362:	76 05                	jbe    c0017369 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017364:	bf 00 10 00 00       	mov    edi,0x1000
c0017369:	83 ec 0c             	sub    esp,0xc
c001736c:	31 d2                	xor    edx,edx
c001736e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017375:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017377:	8d 44 24 28          	lea    eax,[esp+0x28]
c001737b:	50                   	push   eax
c001737c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017380:	56                   	push   esi
c0017381:	52                   	push   edx
c0017382:	57                   	push   edi
c0017383:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001738a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001738d:	83 c4 20             	add    esp,0x20
c0017390:	85 c0                	test   eax,eax
c0017392:	74 0a                	je     c001739e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017394:	53                   	push   ebx
c0017395:	53                   	push   ebx
c0017396:	50                   	push   eax
c0017397:	68 bd 6a 02 c0       	push   0xc0026abd
c001739c:	eb 0f                	jmp    c00173ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001739e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00173a2:	74 20                	je     c00173c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00173a4:	51                   	push   ecx
c00173a5:	51                   	push   ecx
c00173a6:	6a 00                	push   0x0
c00173a8:	68 e8 6a 02 c0       	push   0xc0026ae8
c00173ad:	e8 8d 5c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00173b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173b5:	e8 8f 4c ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c00173ba:	83 c4 10             	add    esp,0x10
c00173bd:	31 c0                	xor    eax,eax
c00173bf:	e9 68 01 00 00       	jmp    c001752c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00173c4:	fa                   	cli    
c00173c5:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00173cb:	e8 3a 30 ff ff       	call   c000a40a <Phys::allocatePage()>
c00173d0:	6a 07                	push   0x7
c00173d2:	89 c7                	mov    edi,eax
c00173d4:	55                   	push   ebp
c00173d5:	50                   	push   eax
c00173d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00173de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173e4:	e8 d7 4f ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00173e9:	83 c4 0c             	add    esp,0xc
c00173ec:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00173f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173f9:	6a 00                	push   0x0
c00173fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017400:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017403:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017409:	e8 0c 4e ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c001740e:	58                   	pop    eax
c001740f:	5a                   	pop    edx
c0017410:	68 07 0c 00 00       	push   0xc07
c0017415:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017419:	57                   	push   edi
c001741a:	89 ef                	mov    edi,ebp
c001741c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017423:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017429:	6a 00                	push   0x0
c001742b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017430:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017433:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017439:	e8 3e 53 ff ff       	call   c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001743e:	b9 00 10 00 00       	mov    ecx,0x1000
c0017443:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017445:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c001744a:	83 c4 20             	add    esp,0x20
c001744d:	48                   	dec    eax
c001744e:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0017453:	85 c0                	test   eax,eax
c0017455:	75 01                	jne    c0017458 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0017457:	fb                   	sti    
c0017458:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001745f:	e9 df fe ff ff       	jmp    c0017343 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017464:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0017467:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001746f:	0f 86 a9 00 00 00    	jbe    c001751e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017475:	fa                   	cli    
c0017476:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001747c:	51                   	push   ecx
c001747d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017484:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001748a:	6a 00                	push   0x0
c001748c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017491:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017494:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001749a:	e8 7b 4d ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c001749f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00174a3:	c1 e6 0c             	shl    esi,0xc
c00174a6:	01 de                	add    esi,ebx
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	39 de                	cmp    esi,ebx
c00174ad:	74 61                	je     c0017510 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00174af:	e8 56 2f ff ff       	call   c000a40a <Phys::allocatePage()>
c00174b4:	6a 07                	push   0x7
c00174b6:	89 c7                	mov    edi,eax
c00174b8:	55                   	push   ebp
c00174b9:	50                   	push   eax
c00174ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174c2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174c8:	e8 f3 4e ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174cd:	58                   	pop    eax
c00174ce:	5a                   	pop    edx
c00174cf:	68 07 0c 00 00       	push   0xc07
c00174d4:	53                   	push   ebx
c00174d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174db:	57                   	push   edi
c00174dc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00174e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174e9:	6a 00                	push   0x0
c00174eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174f9:	e8 7e 52 ff ff       	call   c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174fe:	83 c4 1c             	add    esp,0x1c
c0017501:	68 00 10 00 00       	push   0x1000
c0017506:	6a 00                	push   0x0
c0017508:	55                   	push   ebp
c0017509:	e8 6e 91 fe ff       	call   c000067c <memset>
c001750e:	eb 98                	jmp    c00174a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017510:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0017515:	48                   	dec    eax
c0017516:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001751b:	75 01                	jne    c001751e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001751d:	fb                   	sti    
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	55                   	push   ebp
c0017522:	e8 22 4b ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	b0 01                	mov    al,0x1
c001752c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017532:	5b                   	pop    ebx
c0017533:	5e                   	pop    esi
c0017534:	5f                   	pop    edi
c0017535:	5d                   	pop    ebp
c0017536:	c3                   	ret    

c0017537 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017537:	55                   	push   ebp
c0017538:	57                   	push   edi
c0017539:	56                   	push   esi
c001753a:	53                   	push   ebx
c001753b:	83 ec 48             	sub    esp,0x48
c001753e:	68 14 01 00 00       	push   0x114
c0017543:	e8 0b 28 ff ff       	call   c0009d53 <malloc>
c0017548:	83 c4 0c             	add    esp,0xc
c001754b:	89 c6                	mov    esi,eax
c001754d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017551:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017555:	50                   	push   eax
c0017556:	e8 4f 60 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001755b:	58                   	pop    eax
c001755c:	5a                   	pop    edx
c001755d:	6a 01                	push   0x1
c001755f:	56                   	push   esi
c0017560:	e8 1f 61 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	85 c0                	test   eax,eax
c001756a:	0f 85 47 01 00 00    	jne    c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017570:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017578:	83 ec 0c             	sub    esp,0xc
c001757b:	6a 34                	push   0x34
c001757d:	e8 d1 27 ff ff       	call   c0009d53 <malloc>
c0017582:	89 c3                	mov    ebx,eax
c0017584:	58                   	pop    eax
c0017585:	8b 06                	mov    eax,DWORD PTR [esi]
c0017587:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001758b:	57                   	push   edi
c001758c:	53                   	push   ebx
c001758d:	6a 00                	push   0x0
c001758f:	6a 34                	push   0x34
c0017591:	56                   	push   esi
c0017592:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017595:	83 c4 20             	add    esp,0x20
c0017598:	85 c0                	test   eax,eax
c001759a:	0f 85 17 01 00 00    	jne    c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175a0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00175a6:	0f 85 0b 01 00 00    	jne    c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00175af:	85 c0                	test   eax,eax
c00175b1:	0f 84 00 01 00 00    	je     c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175b7:	31 d2                	xor    edx,edx
c00175b9:	55                   	push   ebp
c00175ba:	52                   	push   edx
c00175bb:	50                   	push   eax
c00175bc:	56                   	push   esi
c00175bd:	e8 80 61 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	85 c0                	test   eax,eax
c00175c7:	0f 85 ea 00 00 00    	jne    c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175cd:	83 ec 0c             	sub    esp,0xc
c00175d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175d3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175df:	0f af c2             	imul   eax,edx
c00175e2:	50                   	push   eax
c00175e3:	e8 6b 27 ff ff       	call   c0009d53 <malloc>
c00175e8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175f5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175f9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175fd:	0f af c2             	imul   eax,edx
c0017600:	99                   	cdq    
c0017601:	52                   	push   edx
c0017602:	50                   	push   eax
c0017603:	56                   	push   esi
c0017604:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017607:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001760a:	83 c4 20             	add    esp,0x20
c001760d:	85 c0                	test   eax,eax
c001760f:	0f 84 a2 00 00 00    	je     c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017615:	31 d2                	xor    edx,edx
c0017617:	51                   	push   ecx
c0017618:	52                   	push   edx
c0017619:	50                   	push   eax
c001761a:	56                   	push   esi
c001761b:	e8 22 61 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017620:	83 c4 10             	add    esp,0x10
c0017623:	85 c0                	test   eax,eax
c0017625:	0f 85 8c 00 00 00    	jne    c00176b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001762b:	83 ec 0c             	sub    esp,0xc
c001762e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017632:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017636:	31 ed                	xor    ebp,ebp
c0017638:	0f af c2             	imul   eax,edx
c001763b:	50                   	push   eax
c001763c:	e8 12 27 ff ff       	call   c0009d53 <malloc>
c0017641:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017643:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017647:	89 3c 24             	mov    DWORD PTR [esp],edi
c001764a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001764e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017652:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017656:	0f af c2             	imul   eax,edx
c0017659:	99                   	cdq    
c001765a:	52                   	push   edx
c001765b:	50                   	push   eax
c001765c:	56                   	push   esi
c001765d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017660:	83 c4 20             	add    esp,0x20
c0017663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001766b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001766f:	0f 86 80 00 00 00    	jbe    c00176f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017675:	0f b7 fd             	movzx  edi,bp
c0017678:	c1 e7 05             	shl    edi,0x5
c001767b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001767f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017682:	75 6b                	jne    c00176ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017684:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017687:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001768b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001768e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017692:	52                   	push   edx
c0017693:	31 d2                	xor    edx,edx
c0017695:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017698:	52                   	push   edx
c0017699:	50                   	push   eax
c001769a:	56                   	push   esi
c001769b:	e8 a2 60 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	85 c0                	test   eax,eax
c00176a5:	74 17                	je     c00176be <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00176a7:	83 ec 0c             	sub    esp,0xc
c00176aa:	68 14 6b 02 c0       	push   0xc0026b14
c00176af:	e8 8b 59 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00176b4:	83 c4 10             	add    esp,0x10
c00176b7:	31 c0                	xor    eax,eax
c00176b9:	e9 87 00 00 00       	jmp    c0017745 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00176be:	83 ec 0c             	sub    esp,0xc
c00176c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00176c4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00176c7:	50                   	push   eax
c00176c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176d0:	56                   	push   esi
c00176d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00176d5:	e8 b3 fb ff ff       	call   c001728d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176de:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176e2:	83 c4 20             	add    esp,0x20
c00176e5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176e9:	73 04                	jae    c00176ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176ef:	45                   	inc    ebp
c00176f0:	e9 76 ff ff ff       	jmp    c001766b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00176f5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00176f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017701:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017707:	83 ec 0c             	sub    esp,0xc
c001770a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017710:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017715:	05 00 10 00 00       	add    eax,0x1000
c001771a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001771d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017721:	e8 3d 26 ff ff       	call   c0009d63 <free>
c0017726:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017729:	e8 35 26 ff ff       	call   c0009d63 <free>
c001772e:	58                   	pop    eax
c001772f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017733:	e8 2b 26 ff ff       	call   c0009d63 <free>
c0017738:	89 34 24             	mov    DWORD PTR [esp],esi
c001773b:	e8 a2 5f ff ff       	call   c000d6e2 <File::close()>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	b0 01                	mov    al,0x1
c0017745:	83 c4 3c             	add    esp,0x3c
c0017748:	5b                   	pop    ebx
c0017749:	5e                   	pop    esi
c001774a:	5f                   	pop    edi
c001774b:	5d                   	pop    ebp
c001774c:	c3                   	ret    

c001774d <Thr::runtimeReferenceHelper()>:
c001774d:	83 ec 18             	sub    esp,0x18
c0017750:	68 1c 6b 02 c0       	push   0xc0026b1c
c0017755:	e8 e5 58 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001775a:	fa                   	cli    
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	eb fe                	jmp    c001775e <Thr::runtimeReferenceHelper()+0x11>

c0017760 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017760:	57                   	push   edi
c0017761:	56                   	push   esi
c0017762:	53                   	push   ebx
c0017763:	31 db                	xor    ebx,ebx
c0017765:	39 1d a0 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1a0,ebx
c001776b:	7e 3c                	jle    c00177a9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001776d:	8b 34 9d 20 a1 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5ee0]
c0017774:	31 ff                	xor    edi,edi
c0017776:	39 3c 9d 20 a0 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5fe0],edi
c001777d:	7e 27                	jle    c00177a6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001777f:	50                   	push   eax
c0017780:	50                   	push   eax
c0017781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017785:	8b 06                	mov    eax,DWORD PTR [esi]
c0017787:	03 04 9d a0 a0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5f60]
c001778e:	50                   	push   eax
c001778f:	e8 30 90 fe ff       	call   c00007c4 <strcmp>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	85 c0                	test   eax,eax
c0017799:	75 05                	jne    c00177a0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001779b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001779e:	eb 0b                	jmp    c00177ab <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00177a0:	83 c6 10             	add    esi,0x10
c00177a3:	47                   	inc    edi
c00177a4:	eb d0                	jmp    c0017776 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00177a6:	43                   	inc    ebx
c00177a7:	eb bc                	jmp    c0017765 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00177a9:	31 c0                	xor    eax,eax
c00177ab:	5b                   	pop    ebx
c00177ac:	5e                   	pop    esi
c00177ad:	5f                   	pop    edi
c00177ae:	c3                   	ret    

c00177af <Thr::loadKernelSymbolTable(char const*)>:
c00177af:	55                   	push   ebp
c00177b0:	57                   	push   edi
c00177b1:	56                   	push   esi
c00177b2:	53                   	push   ebx
c00177b3:	83 ec 68             	sub    esp,0x68
c00177b6:	8b 35 f0 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a1f0
c00177bc:	68 14 01 00 00       	push   0x114
c00177c1:	e8 8d 25 ff ff       	call   c0009d53 <malloc>
c00177c6:	83 c4 0c             	add    esp,0xc
c00177c9:	89 c3                	mov    ebx,eax
c00177cb:	56                   	push   esi
c00177cc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00177d0:	50                   	push   eax
c00177d1:	e8 d4 5d ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c00177d6:	5e                   	pop    esi
c00177d7:	5f                   	pop    edi
c00177d8:	6a 01                	push   0x1
c00177da:	53                   	push   ebx
c00177db:	e8 a4 5e ff ff       	call   c000d684 <File::open(FileOpenMode)>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	85 c0                	test   eax,eax
c00177e5:	74 0a                	je     c00177f1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00177e7:	83 ec 0c             	sub    esp,0xc
c00177ea:	68 3e 6b 02 c0       	push   0xc0026b3e
c00177ef:	eb 34                	jmp    c0017825 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00177f1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	6a 34                	push   0x34
c00177fe:	e8 50 25 ff ff       	call   c0009d53 <malloc>
c0017803:	59                   	pop    ecx
c0017804:	89 c7                	mov    edi,eax
c0017806:	8d 74 24 34          	lea    esi,[esp+0x34]
c001780a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001780c:	56                   	push   esi
c001780d:	57                   	push   edi
c001780e:	6a 00                	push   0x0
c0017810:	6a 34                	push   0x34
c0017812:	53                   	push   ebx
c0017813:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017816:	83 c4 20             	add    esp,0x20
c0017819:	85 c0                	test   eax,eax
c001781b:	74 17                	je     c0017834 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001781d:	83 ec 0c             	sub    esp,0xc
c0017820:	68 55 6b 02 c0       	push   0xc0026b55
c0017825:	e8 d7 d7 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001782a:	83 c4 10             	add    esp,0x10
c001782d:	31 c0                	xor    eax,eax
c001782f:	e9 31 02 00 00       	jmp    c0017a65 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017834:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001783a:	75 e1                	jne    c001781d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001783c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001783f:	85 c0                	test   eax,eax
c0017841:	74 da                	je     c001781d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017843:	52                   	push   edx
c0017844:	31 d2                	xor    edx,edx
c0017846:	52                   	push   edx
c0017847:	50                   	push   eax
c0017848:	53                   	push   ebx
c0017849:	e8 f4 5e ff ff       	call   c000d742 <File::seek(unsigned long long)>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	85 c0                	test   eax,eax
c0017853:	75 c8                	jne    c001781d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001785c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017860:	31 ed                	xor    ebp,ebp
c0017862:	0f af c2             	imul   eax,edx
c0017865:	50                   	push   eax
c0017866:	e8 e8 24 ff ff       	call   c0009d53 <malloc>
c001786b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001786d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017871:	89 34 24             	mov    DWORD PTR [esp],esi
c0017874:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017878:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001787c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017880:	0f af c2             	imul   eax,edx
c0017883:	99                   	cdq    
c0017884:	52                   	push   edx
c0017885:	50                   	push   eax
c0017886:	53                   	push   ebx
c0017887:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001788a:	83 c4 20             	add    esp,0x20
c001788d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017895:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001789d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00178a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178ad:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00178b1:	0f 86 aa 00 00 00    	jbe    c0017961 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00178b7:	0f b7 f5             	movzx  esi,bp
c00178ba:	6b f6 28             	imul   esi,esi,0x28
c00178bd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00178c1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00178c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178c8:	50                   	push   eax
c00178c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178cd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00178d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00178d3:	6b c0 28             	imul   eax,eax,0x28
c00178d6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178da:	89 d0                	mov    eax,edx
c00178dc:	31 d2                	xor    edx,edx
c00178de:	52                   	push   edx
c00178df:	50                   	push   eax
c00178e0:	53                   	push   ebx
c00178e1:	e8 5c 5e ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00178e6:	83 c4 0c             	add    esp,0xc
c00178e9:	6a 20                	push   0x20
c00178eb:	6a 00                	push   0x0
c00178ed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178f1:	52                   	push   edx
c00178f2:	e8 85 8d fe ff       	call   c000067c <memset>
c00178f7:	58                   	pop    eax
c00178f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178fa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00178fe:	51                   	push   ecx
c00178ff:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017903:	52                   	push   edx
c0017904:	6a 00                	push   0x0
c0017906:	6a 1f                	push   0x1f
c0017908:	53                   	push   ebx
c0017909:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001790c:	83 c4 18             	add    esp,0x18
c001790f:	68 6c 6b 02 c0       	push   0xc0026b6c
c0017914:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017918:	52                   	push   edx
c0017919:	e8 a6 8e fe ff       	call   c00007c4 <strcmp>
c001791e:	83 c4 10             	add    esp,0x10
c0017921:	85 c0                	test   eax,eax
c0017923:	75 0f                	jne    c0017934 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017925:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017928:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001792c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017930:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017934:	50                   	push   eax
c0017935:	50                   	push   eax
c0017936:	68 74 6b 02 c0       	push   0xc0026b74
c001793b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001793f:	50                   	push   eax
c0017940:	e8 7f 8e fe ff       	call   c00007c4 <strcmp>
c0017945:	83 c4 10             	add    esp,0x10
c0017948:	85 c0                	test   eax,eax
c001794a:	75 0f                	jne    c001795b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001794c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001794f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017953:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017957:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001795b:	45                   	inc    ebp
c001795c:	e9 4c ff ff ff       	jmp    c00178ad <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017961:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017966:	75 10                	jne    c0017978 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017968:	83 ec 0c             	sub    esp,0xc
c001796b:	68 7c 6b 02 c0       	push   0xc0026b7c
c0017970:	e8 8c d6 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0017975:	83 c4 10             	add    esp,0x10
c0017978:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001797d:	75 10                	jne    c001798f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001797f:	83 ec 0c             	sub    esp,0xc
c0017982:	68 7c 6b 02 c0       	push   0xc0026b7c
c0017987:	e8 75 d6 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	31 d2                	xor    edx,edx
c0017991:	50                   	push   eax
c0017992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017996:	52                   	push   edx
c0017997:	50                   	push   eax
c0017998:	53                   	push   ebx
c0017999:	e8 a4 5d ff ff       	call   c000d742 <File::seek(unsigned long long)>
c001799e:	5a                   	pop    edx
c001799f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179a3:	e8 ab 23 ff ff       	call   c0009d53 <malloc>
c00179a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b0:	31 c9                	xor    ecx,ecx
c00179b2:	5e                   	pop    esi
c00179b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179b5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00179b9:	55                   	push   ebp
c00179ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179be:	51                   	push   ecx
c00179bf:	52                   	push   edx
c00179c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00179c4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00179c8:	53                   	push   ebx
c00179c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179cc:	83 c4 14             	add    esp,0x14
c00179cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179d3:	e8 7b 23 ff ff       	call   c0009d53 <malloc>
c00179d8:	89 c6                	mov    esi,eax
c00179da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179df:	56                   	push   esi
c00179e0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179e8:	51                   	push   ecx
c00179e9:	52                   	push   edx
c00179ea:	53                   	push   ebx
c00179eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179f2:	8b 15 a0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1a0
c00179f8:	83 c4 1c             	add    esp,0x1c
c00179fb:	c1 e8 04             	shr    eax,0x4
c00179fe:	89 04 95 20 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5fe0],eax
c0017a05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a09:	31 d2                	xor    edx,edx
c0017a0b:	52                   	push   edx
c0017a0c:	50                   	push   eax
c0017a0d:	53                   	push   ebx
c0017a0e:	e8 2f 5d ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017a13:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a15:	31 d2                	xor    edx,edx
c0017a17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a1a:	56                   	push   esi
c0017a1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a1f:	52                   	push   edx
c0017a20:	50                   	push   eax
c0017a21:	53                   	push   ebx
c0017a22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a25:	83 c4 14             	add    esp,0x14
c0017a28:	53                   	push   ebx
c0017a29:	e8 b4 5c ff ff       	call   c000d6e2 <File::close()>
c0017a2e:	5d                   	pop    ebp
c0017a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a33:	e8 2b 23 ff ff       	call   c0009d63 <free>
c0017a38:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a3b:	e8 23 23 ff ff       	call   c0009d63 <free>
c0017a40:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c0017a45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a49:	8d 50 01             	lea    edx,[eax+0x1]
c0017a4c:	89 0c 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],ecx
c0017a53:	89 34 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],esi
c0017a5a:	89 15 a0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a0,edx
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	b0 01                	mov    al,0x1
c0017a65:	83 c4 5c             	add    esp,0x5c
c0017a68:	5b                   	pop    ebx
c0017a69:	5e                   	pop    esi
c0017a6a:	5f                   	pop    edi
c0017a6b:	5d                   	pop    ebp
c0017a6c:	c3                   	ret    

c0017a6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a6d:	55                   	push   ebp
c0017a6e:	57                   	push   edi
c0017a6f:	56                   	push   esi
c0017a70:	53                   	push   ebx
c0017a71:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a77:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a7e:	8b 1d f0 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a1f0
c0017a84:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017a88:	68 14 01 00 00       	push   0x114
c0017a8d:	e8 c1 22 ff ff       	call   c0009d53 <malloc>
c0017a92:	83 c4 0c             	add    esp,0xc
c0017a95:	89 c5                	mov    ebp,eax
c0017a97:	53                   	push   ebx
c0017a98:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a9f:	50                   	push   eax
c0017aa0:	e8 05 5b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0017aa5:	5e                   	pop    esi
c0017aa6:	5f                   	pop    edi
c0017aa7:	6a 01                	push   0x1
c0017aa9:	55                   	push   ebp
c0017aaa:	e8 d5 5b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	85 c0                	test   eax,eax
c0017ab4:	0f 85 a7 06 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017aba:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	6a 34                	push   0x34
c0017ac7:	e8 87 22 ff ff       	call   c0009d53 <malloc>
c0017acc:	5b                   	pop    ebx
c0017acd:	89 c7                	mov    edi,eax
c0017acf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ad3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ad6:	53                   	push   ebx
c0017ad7:	57                   	push   edi
c0017ad8:	6a 00                	push   0x0
c0017ada:	6a 34                	push   0x34
c0017adc:	55                   	push   ebp
c0017add:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ae0:	83 c4 20             	add    esp,0x20
c0017ae3:	85 c0                	test   eax,eax
c0017ae5:	0f 85 76 06 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017aeb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017af1:	0f 85 6a 06 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017af7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017afa:	85 c0                	test   eax,eax
c0017afc:	0f 84 5f 06 00 00    	je     c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b02:	31 d2                	xor    edx,edx
c0017b04:	51                   	push   ecx
c0017b05:	52                   	push   edx
c0017b06:	50                   	push   eax
c0017b07:	55                   	push   ebp
c0017b08:	e8 35 5c ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017b0d:	83 c4 10             	add    esp,0x10
c0017b10:	85 c0                	test   eax,eax
c0017b12:	0f 85 49 06 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b18:	83 ec 0c             	sub    esp,0xc
c0017b1b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017b1e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b26:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b2a:	0f af c2             	imul   eax,edx
c0017b2d:	50                   	push   eax
c0017b2e:	e8 20 22 ff ff       	call   c0009d53 <malloc>
c0017b33:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b41:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b45:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b49:	0f af c2             	imul   eax,edx
c0017b4c:	99                   	cdq    
c0017b4d:	52                   	push   edx
c0017b4e:	50                   	push   eax
c0017b4f:	55                   	push   ebp
c0017b50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b53:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017b56:	83 c4 20             	add    esp,0x20
c0017b59:	85 c0                	test   eax,eax
c0017b5b:	0f 84 00 06 00 00    	je     c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b61:	52                   	push   edx
c0017b62:	31 d2                	xor    edx,edx
c0017b64:	52                   	push   edx
c0017b65:	50                   	push   eax
c0017b66:	55                   	push   ebp
c0017b67:	e8 d6 5b ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	85 c0                	test   eax,eax
c0017b71:	0f 85 ea 05 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b77:	83 ec 0c             	sub    esp,0xc
c0017b7a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b7e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017b82:	31 f6                	xor    esi,esi
c0017b84:	0f af c2             	imul   eax,edx
c0017b87:	50                   	push   eax
c0017b88:	e8 c6 21 ff ff       	call   c0009d53 <malloc>
c0017b8d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b9b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b9f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017ba3:	0f af c2             	imul   eax,edx
c0017ba6:	99                   	cdq    
c0017ba7:	52                   	push   edx
c0017ba8:	50                   	push   eax
c0017ba9:	55                   	push   ebp
c0017baa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bad:	83 c4 20             	add    esp,0x20
c0017bb0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017bb4:	0f 86 8a 00 00 00    	jbe    c0017c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017bba:	0f b7 de             	movzx  ebx,si
c0017bbd:	c1 e3 05             	shl    ebx,0x5
c0017bc0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017bc4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017bc7:	75 75                	jne    c0017c3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017bc9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017bcc:	31 d2                	xor    edx,edx
c0017bce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bd2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bd9:	50                   	push   eax
c0017bda:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bdd:	52                   	push   edx
c0017bde:	50                   	push   eax
c0017bdf:	55                   	push   ebp
c0017be0:	e8 5d 5b ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017be5:	83 c4 10             	add    esp,0x10
c0017be8:	85 c0                	test   eax,eax
c0017bea:	0f 85 71 05 00 00    	jne    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017bf0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017bf7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017bfa:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017bfe:	31 d2                	xor    edx,edx
c0017c00:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c0b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017c12:	50                   	push   eax
c0017c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c1b:	52                   	push   edx
c0017c1c:	50                   	push   eax
c0017c1d:	55                   	push   ebp
c0017c1e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c21:	83 c4 1c             	add    esp,0x1c
c0017c24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c27:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c2a:	50                   	push   eax
c0017c2b:	6a 00                	push   0x0
c0017c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c31:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017c35:	50                   	push   eax
c0017c36:	e8 41 8a fe ff       	call   c000067c <memset>
c0017c3b:	83 c4 10             	add    esp,0x10
c0017c3e:	46                   	inc    esi
c0017c3f:	e9 6c ff ff ff       	jmp    c0017bb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017c44:	53                   	push   ebx
c0017c45:	31 db                	xor    ebx,ebx
c0017c47:	68 00 01 00 00       	push   0x100
c0017c4c:	6a 00                	push   0x0
c0017c4e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c52:	50                   	push   eax
c0017c53:	e8 24 8a fe ff       	call   c000067c <memset>
c0017c58:	83 c4 0c             	add    esp,0xc
c0017c5b:	68 00 01 00 00       	push   0x100
c0017c60:	6a 00                	push   0x0
c0017c62:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c69:	50                   	push   eax
c0017c6a:	e8 0d 8a fe ff       	call   c000067c <memset>
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c7a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c82:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017c8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c92:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c9a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017c9e:	0f 86 30 01 00 00    	jbe    c0017dd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017ca4:	0f b7 f3             	movzx  esi,bx
c0017ca7:	6b f6 28             	imul   esi,esi,0x28
c0017caa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017cae:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cb5:	52                   	push   edx
c0017cb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cba:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017cbe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cc0:	6b d2 28             	imul   edx,edx,0x28
c0017cc3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017cc7:	31 d2                	xor    edx,edx
c0017cc9:	52                   	push   edx
c0017cca:	50                   	push   eax
c0017ccb:	55                   	push   ebp
c0017ccc:	e8 71 5a ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017cd1:	83 c4 0c             	add    esp,0xc
c0017cd4:	6a 20                	push   0x20
c0017cd6:	6a 00                	push   0x0
c0017cd8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cdf:	51                   	push   ecx
c0017ce0:	e8 97 89 fe ff       	call   c000067c <memset>
c0017ce5:	59                   	pop    ecx
c0017ce6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ce9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ced:	52                   	push   edx
c0017cee:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017cf5:	51                   	push   ecx
c0017cf6:	6a 00                	push   0x0
c0017cf8:	6a 1f                	push   0x1f
c0017cfa:	55                   	push   ebp
c0017cfb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cfe:	83 c4 1c             	add    esp,0x1c
c0017d01:	6a 09                	push   0x9
c0017d03:	68 96 6b 02 c0       	push   0xc0026b96
c0017d08:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d0f:	51                   	push   ecx
c0017d10:	e8 63 88 fe ff       	call   c0000578 <memcmp>
c0017d15:	83 c4 10             	add    esp,0x10
c0017d18:	85 c0                	test   eax,eax
c0017d1a:	75 21                	jne    c0017d3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d24:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d2f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d36:	89 d0                	mov    eax,edx
c0017d38:	40                   	inc    eax
c0017d39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d3d:	50                   	push   eax
c0017d3e:	6a 09                	push   0x9
c0017d40:	68 a0 6b 02 c0       	push   0xc0026ba0
c0017d45:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d4c:	50                   	push   eax
c0017d4d:	e8 26 88 fe ff       	call   c0000578 <memcmp>
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	85 c0                	test   eax,eax
c0017d57:	75 21                	jne    c0017d7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017d59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d61:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d69:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d6c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d73:	89 d0                	mov    eax,edx
c0017d75:	40                   	inc    eax
c0017d76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d7a:	50                   	push   eax
c0017d7b:	50                   	push   eax
c0017d7c:	68 6c 6b 02 c0       	push   0xc0026b6c
c0017d81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d88:	50                   	push   eax
c0017d89:	e8 36 8a fe ff       	call   c00007c4 <strcmp>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	85 c0                	test   eax,eax
c0017d93:	75 0f                	jne    c0017da4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017d95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017da4:	50                   	push   eax
c0017da5:	50                   	push   eax
c0017da6:	68 74 6b 02 c0       	push   0xc0026b74
c0017dab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017db2:	50                   	push   eax
c0017db3:	e8 0c 8a fe ff       	call   c00007c4 <strcmp>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	85 c0                	test   eax,eax
c0017dbd:	75 0f                	jne    c0017dce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017dbf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017dc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017dc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dce:	43                   	inc    ebx
c0017dcf:	e9 c6 fe ff ff       	jmp    c0017c9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017dd4:	31 d2                	xor    edx,edx
c0017dd6:	50                   	push   eax
c0017dd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ddb:	52                   	push   edx
c0017ddc:	50                   	push   eax
c0017ddd:	55                   	push   ebp
c0017dde:	e8 5f 59 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017de3:	58                   	pop    eax
c0017de4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017de8:	e8 66 1f ff ff       	call   c0009d53 <malloc>
c0017ded:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017df0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017df4:	31 d2                	xor    edx,edx
c0017df6:	58                   	pop    eax
c0017df7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017dfb:	53                   	push   ebx
c0017dfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017e00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e04:	52                   	push   edx
c0017e05:	50                   	push   eax
c0017e06:	55                   	push   ebp
c0017e07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e0a:	83 c4 14             	add    esp,0x14
c0017e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e11:	e8 3d 1f ff ff       	call   c0009d53 <malloc>
c0017e16:	31 d2                	xor    edx,edx
c0017e18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e1c:	83 c4 0c             	add    esp,0xc
c0017e1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e23:	52                   	push   edx
c0017e24:	50                   	push   eax
c0017e25:	55                   	push   ebp
c0017e26:	e8 17 59 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017e2b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e2e:	31 d2                	xor    edx,edx
c0017e30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e3b:	52                   	push   edx
c0017e3c:	50                   	push   eax
c0017e3d:	55                   	push   ebp
c0017e3e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e41:	83 c4 20             	add    esp,0x20
c0017e44:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017e50:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017e54:	0f 84 0b 03 00 00    	je     c0018165 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017e5a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017e61:	31 d2                	xor    edx,edx
c0017e63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e67:	c1 e8 03             	shr    eax,0x3
c0017e6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017e6e:	51                   	push   ecx
c0017e6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e73:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e77:	52                   	push   edx
c0017e78:	50                   	push   eax
c0017e79:	55                   	push   ebp
c0017e7a:	e8 c3 58 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017e7f:	5b                   	pop    ebx
c0017e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e84:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e8b:	e8 c3 1e ff ff       	call   c0009d53 <malloc>
c0017e90:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e97:	31 d2                	xor    edx,edx
c0017e99:	5e                   	pop    esi
c0017e9a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017e9e:	50                   	push   eax
c0017e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ea3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017eae:	52                   	push   edx
c0017eaf:	50                   	push   eax
c0017eb0:	55                   	push   ebp
c0017eb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017eb4:	83 c4 20             	add    esp,0x20
c0017eb7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ebf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017ec3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017ec7:	0f 8d 7c 02 00 00    	jge    c0018149 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017ecd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ed5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017eda:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017edd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee5:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017ee9:	89 d8                	mov    eax,ebx
c0017eeb:	c1 e8 08             	shr    eax,0x8
c0017eee:	89 c6                	mov    esi,eax
c0017ef0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ef4:	c1 e6 04             	shl    esi,0x4
c0017ef7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017efb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017efe:	85 d2                	test   edx,edx
c0017f00:	0f 85 bf 00 00 00    	jne    c0017fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f06:	83 ec 0c             	sub    esp,0xc
c0017f09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f0d:	03 06                	add    eax,DWORD PTR [esi]
c0017f0f:	50                   	push   eax
c0017f10:	e8 4b f8 ff ff       	call   c0017760 <Thr::getAddressOfKernelSymbol(char const*)>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	89 c2                	mov    edx,eax
c0017f1a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017f1f:	85 c0                	test   eax,eax
c0017f21:	0f 85 9e 00 00 00    	jne    c0017fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f27:	83 ec 0c             	sub    esp,0xc
c0017f2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f2e:	03 06                	add    eax,DWORD PTR [esi]
c0017f30:	50                   	push   eax
c0017f31:	e8 d2 09 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	89 c2                	mov    edx,eax
c0017f3b:	85 c0                	test   eax,eax
c0017f3d:	0f 85 82 00 00 00    	jne    c0017fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f43:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f47:	50                   	push   eax
c0017f48:	50                   	push   eax
c0017f49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4d:	03 06                	add    eax,DWORD PTR [esi]
c0017f4f:	50                   	push   eax
c0017f50:	68 aa 6b 02 c0       	push   0xc0026baa
c0017f55:	e8 e5 50 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0017f5a:	58                   	pop    eax
c0017f5b:	5a                   	pop    edx
c0017f5c:	68 c4 6b 02 c0       	push   0xc0026bc4
c0017f61:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f68:	50                   	push   eax
c0017f69:	e8 ca 87 fe ff       	call   c0000738 <strcpy>
c0017f6e:	59                   	pop    ecx
c0017f6f:	58                   	pop    eax
c0017f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f74:	03 06                	add    eax,DWORD PTR [esi]
c0017f76:	50                   	push   eax
c0017f77:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f7e:	50                   	push   eax
c0017f7f:	e8 f4 88 fe ff       	call   c0000878 <strcat>
c0017f84:	58                   	pop    eax
c0017f85:	5a                   	pop    edx
c0017f86:	68 5a 6c 02 c0       	push   0xc0026c5a
c0017f8b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f92:	50                   	push   eax
c0017f93:	e8 e0 88 fe ff       	call   c0000878 <strcat>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017fa0:	0f 84 5d 01 00 00    	je     c0018103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017fa6:	83 ec 0c             	sub    esp,0xc
c0017fa9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fb0:	50                   	push   eax
c0017fb1:	e8 4b d0 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fc1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017fc5:	80 fb 01             	cmp    bl,0x1
c0017fc8:	0f 85 88 00 00 00    	jne    c0018056 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017fce:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017fd5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017fd9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017fdd:	01 ce                	add    esi,ecx
c0017fdf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017fe5:	0f 94 c0             	sete   al
c0017fe8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017fee:	0f 94 c3             	sete   bl
c0017ff1:	09 c3                	or     ebx,eax
c0017ff3:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ff5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017ffa:	74 41                	je     c001803d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017ffc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017fff:	84 db                	test   bl,bl
c0018001:	75 15                	jne    c0018018 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0018003:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018007:	66 83 f8 0c          	cmp    ax,0xc
c001800b:	76 05                	jbe    c0018012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001800d:	b8 0c 00 00 00       	mov    eax,0xc
c0018012:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0018016:	76 37                	jbe    c001804f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018018:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001801c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018021:	0f 84 dc 00 00 00    	je     c0018103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018027:	83 ec 0c             	sub    esp,0xc
c001802a:	68 db 6b 02 c0       	push   0xc0026bdb
c001802f:	e8 cd cf ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001803b:	eb 12                	jmp    c001804f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001803d:	01 c1                	add    ecx,eax
c001803f:	84 db                	test   bl,bl
c0018041:	75 0c                	jne    c001804f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018043:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018047:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001804b:	77 02                	ja     c001804f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001804d:	01 d1                	add    ecx,edx
c001804f:	89 0e                	mov    DWORD PTR [esi],ecx
c0018051:	e9 ea 00 00 00       	jmp    c0018140 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018056:	80 fb 02             	cmp    bl,0x2
c0018059:	75 7c                	jne    c00180d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001805b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018062:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0018066:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001806a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018070:	74 20                	je     c0018092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018072:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018078:	74 18                	je     c0018092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001807a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001807e:	b9 0a 00 00 00       	mov    ecx,0xa
c0018083:	66 83 f8 0e          	cmp    ax,0xe
c0018087:	77 03                	ja     c001808c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0018089:	8d 48 fc             	lea    ecx,[eax-0x4]
c001808c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018090:	76 1f                	jbe    c00180b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018092:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0018096:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001809b:	74 66                	je     c0018103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001809d:	83 ec 0c             	sub    esp,0xc
c00180a0:	68 f7 6b 02 c0       	push   0xc0026bf7
c00180a5:	e8 57 cf ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00180aa:	83 c4 10             	add    esp,0x10
c00180ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00180b3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00180b8:	74 13                	je     c00180cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00180ba:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00180be:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00180c5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00180c9:	01 c8                	add    eax,ecx
c00180cb:	eb 04                	jmp    c00180d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00180cd:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00180d1:	01 c2                	add    edx,eax
c00180d3:	89 16                	mov    DWORD PTR [esi],edx
c00180d5:	eb 69                	jmp    c0018140 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00180d7:	0f b6 db             	movzx  ebx,bl
c00180da:	50                   	push   eax
c00180db:	50                   	push   eax
c00180dc:	53                   	push   ebx
c00180dd:	68 13 6c 02 c0       	push   0xc0026c13
c00180e2:	e8 58 4f ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180ef:	74 12                	je     c0018103 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	68 1e 6c 02 c0       	push   0xc0026c1e
c00180f9:	e8 03 cf ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	eb 3d                	jmp    c0018140 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018103:	83 ec 0c             	sub    esp,0xc
c0018106:	55                   	push   ebp
c0018107:	e8 d6 55 ff ff       	call   c000d6e2 <File::close()>
c001810c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001810f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018112:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018115:	59                   	pop    ecx
c0018116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001811a:	e8 44 1c ff ff       	call   c0009d63 <free>
c001811f:	5b                   	pop    ebx
c0018120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018124:	e8 3a 1c ff ff       	call   c0009d63 <free>
c0018129:	89 3c 24             	mov    DWORD PTR [esp],edi
c001812c:	e8 32 1c ff ff       	call   c0009d63 <free>
c0018131:	5e                   	pop    esi
c0018132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018136:	e8 28 1c ff ff       	call   c0009d63 <free>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	eb 21                	jmp    c0018161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018140:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018144:	e9 76 fd ff ff       	jmp    c0017ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018150:	e8 0e 1c ff ff       	call   c0009d63 <free>
c0018155:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	e9 eb fc ff ff       	jmp    c0017e4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018161:	31 c0                	xor    eax,eax
c0018163:	eb 33                	jmp    c0018198 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018165:	83 ec 0c             	sub    esp,0xc
c0018168:	55                   	push   ebp
c0018169:	e8 74 55 ff ff       	call   c000d6e2 <File::close()>
c001816e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018171:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018174:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018177:	58                   	pop    eax
c0018178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001817c:	e8 e2 1b ff ff       	call   c0009d63 <free>
c0018181:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018184:	e8 da 1b ff ff       	call   c0009d63 <free>
c0018189:	5a                   	pop    edx
c001818a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001818e:	e8 d0 1b ff ff       	call   c0009d63 <free>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	b0 01                	mov    al,0x1
c0018198:	81 c4 5c 03 00 00    	add    esp,0x35c
c001819e:	5b                   	pop    ebx
c001819f:	5e                   	pop    esi
c00181a0:	5f                   	pop    edi
c00181a1:	5d                   	pop    ebp
c00181a2:	c3                   	ret    

c00181a3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00181a3:	56                   	push   esi
c00181a4:	31 d2                	xor    edx,edx
c00181a6:	53                   	push   ebx
c00181a7:	8b 1d 00 9a 02 c0    	mov    ebx,DWORD PTR ds:0xc0029a00
c00181ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181b1:	39 d3                	cmp    ebx,edx
c00181b3:	7e 1b                	jle    c00181d0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00181b5:	8b 04 95 20 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63e0]
c00181bc:	39 c8                	cmp    eax,ecx
c00181be:	77 0d                	ja     c00181cd <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00181c0:	8b 34 95 20 9a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd65e0]
c00181c7:	01 c6                	add    esi,eax
c00181c9:	39 ce                	cmp    esi,ecx
c00181cb:	77 05                	ja     c00181d2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00181cd:	42                   	inc    edx
c00181ce:	eb e1                	jmp    c00181b1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00181d0:	31 c0                	xor    eax,eax
c00181d2:	5b                   	pop    ebx
c00181d3:	5e                   	pop    esi
c00181d4:	c3                   	ret    

c00181d5 <Thr::getDriverNameFromAddress(unsigned long)>:
c00181d5:	53                   	push   ebx
c00181d6:	31 c0                	xor    eax,eax
c00181d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181dc:	8b 1d 00 9a 02 c0    	mov    ebx,DWORD PTR ds:0xc0029a00
c00181e2:	39 c3                	cmp    ebx,eax
c00181e4:	7e 22                	jle    c0018208 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00181e6:	8b 14 85 20 9c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd63e0]
c00181ed:	39 ca                	cmp    edx,ecx
c00181ef:	77 14                	ja     c0018205 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181f1:	03 14 85 20 9a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd65e0]
c00181f8:	39 ca                	cmp    edx,ecx
c00181fa:	76 09                	jbe    c0018205 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181fc:	8b 04 85 20 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61e0]
c0018203:	eb 05                	jmp    c001820a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018205:	40                   	inc    eax
c0018206:	eb da                	jmp    c00181e2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018208:	31 c0                	xor    eax,eax
c001820a:	5b                   	pop    ebx
c001820b:	c3                   	ret    

c001820c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001820c:	53                   	push   ebx
c001820d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018211:	53                   	push   ebx
c0018212:	e8 8c ff ff ff       	call   c00181a3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018217:	5a                   	pop    edx
c0018218:	31 d2                	xor    edx,edx
c001821a:	85 c0                	test   eax,eax
c001821c:	74 04                	je     c0018222 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001821e:	89 da                	mov    edx,ebx
c0018220:	29 c2                	sub    edx,eax
c0018222:	89 d0                	mov    eax,edx
c0018224:	5b                   	pop    ebx
c0018225:	c3                   	ret    

c0018226 <Thr::loadDLL(char const*, bool)>:
c0018226:	55                   	push   ebp
c0018227:	57                   	push   edi
c0018228:	56                   	push   esi
c0018229:	53                   	push   ebx
c001822a:	81 ec 34 01 00 00    	sub    esp,0x134
c0018230:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018237:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001823e:	56                   	push   esi
c001823f:	68 36 6c 02 c0       	push   0xc0026c36
c0018244:	e8 f6 4d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018249:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018250:	e8 fe 1a ff ff       	call   c0009d53 <malloc>
c0018255:	83 c4 0c             	add    esp,0xc
c0018258:	89 c3                	mov    ebx,eax
c001825a:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0018260:	56                   	push   esi
c0018261:	50                   	push   eax
c0018262:	e8 43 53 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	85 db                	test   ebx,ebx
c001826c:	75 3c                	jne    c00182aa <Thr::loadDLL(char const*, bool)+0x84>
c001826e:	89 f8                	mov    eax,edi
c0018270:	84 c0                	test   al,al
c0018272:	0f 84 d2 01 00 00    	je     c001844a <Thr::loadDLL(char const*, bool)+0x224>
c0018278:	55                   	push   ebp
c0018279:	55                   	push   ebp
c001827a:	68 47 6c 02 c0       	push   0xc0026c47
c001827f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018283:	55                   	push   ebp
c0018284:	e8 af 84 fe ff       	call   c0000738 <strcpy>
c0018289:	58                   	pop    eax
c001828a:	5a                   	pop    edx
c001828b:	56                   	push   esi
c001828c:	55                   	push   ebp
c001828d:	e8 e6 85 fe ff       	call   c0000878 <strcat>
c0018292:	59                   	pop    ecx
c0018293:	58                   	pop    eax
c0018294:	68 5a 6c 02 c0       	push   0xc0026c5a
c0018299:	55                   	push   ebp
c001829a:	e8 d9 85 fe ff       	call   c0000878 <strcat>
c001829f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00182a2:	e8 5a cd ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	51                   	push   ecx
c00182ab:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00182af:	50                   	push   eax
c00182b0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182b4:	50                   	push   eax
c00182b5:	53                   	push   ebx
c00182b6:	e8 75 56 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	85 db                	test   ebx,ebx
c00182c0:	74 0c                	je     c00182ce <Thr::loadDLL(char const*, bool)+0xa8>
c00182c2:	83 ec 0c             	sub    esp,0xc
c00182c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182c7:	53                   	push   ebx
c00182c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182cb:	83 c4 10             	add    esp,0x10
c00182ce:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00182d3:	75 0a                	jne    c00182df <Thr::loadDLL(char const*, bool)+0xb9>
c00182d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182d9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00182dd:	75 3c                	jne    c001831b <Thr::loadDLL(char const*, bool)+0xf5>
c00182df:	89 f8                	mov    eax,edi
c00182e1:	84 c0                	test   al,al
c00182e3:	0f 84 49 01 00 00    	je     c0018432 <Thr::loadDLL(char const*, bool)+0x20c>
c00182e9:	51                   	push   ecx
c00182ea:	51                   	push   ecx
c00182eb:	68 47 6c 02 c0       	push   0xc0026c47
c00182f0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00182f4:	53                   	push   ebx
c00182f5:	e8 3e 84 fe ff       	call   c0000738 <strcpy>
c00182fa:	5d                   	pop    ebp
c00182fb:	58                   	pop    eax
c00182fc:	56                   	push   esi
c00182fd:	53                   	push   ebx
c00182fe:	e8 75 85 fe ff       	call   c0000878 <strcat>
c0018303:	58                   	pop    eax
c0018304:	5a                   	pop    edx
c0018305:	68 5a 6c 02 c0       	push   0xc0026c5a
c001830a:	53                   	push   ebx
c001830b:	e8 68 85 fe ff       	call   c0000878 <strcat>
c0018310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018313:	e8 e9 cc ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0018318:	83 c4 10             	add    esp,0x10
c001831b:	52                   	push   edx
c001831c:	6a 03                	push   0x3
c001831e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018322:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018326:	05 ff 0f 00 00       	add    eax,0xfff
c001832b:	83 d2 00             	adc    edx,0x0
c001832e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018332:	50                   	push   eax
c0018333:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c0018339:	e8 84 41 ff ff       	call   c000c4c2 <VAS::allocatePages(int, int)>
c001833e:	59                   	pop    ecx
c001833f:	89 c3                	mov    ebx,eax
c0018341:	5d                   	pop    ebp
c0018342:	50                   	push   eax
c0018343:	68 ca 4b 02 c0       	push   0xc0024bca
c0018348:	e8 f2 4c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001834d:	89 34 24             	mov    DWORD PTR [esp],esi
c0018350:	e8 43 83 fe ff       	call   c0000698 <strlen>
c0018355:	8b 2d 00 9a 02 c0    	mov    ebp,DWORD PTR ds:0xc0029a00
c001835b:	40                   	inc    eax
c001835c:	89 04 24             	mov    DWORD PTR [esp],eax
c001835f:	e8 ef 19 ff ff       	call   c0009d53 <malloc>
c0018364:	89 04 ad 20 9e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd61e0],eax
c001836b:	58                   	pop    eax
c001836c:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0018371:	5a                   	pop    edx
c0018372:	56                   	push   esi
c0018373:	ff 34 85 20 9e 02 c0 	push   DWORD PTR [eax*4-0x3ffd61e0]
c001837a:	e8 b9 83 fe ff       	call   c0000738 <strcpy>
c001837f:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0018384:	8d 50 01             	lea    edx,[eax+0x1]
c0018387:	89 1c 85 20 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd63e0],ebx
c001838e:	89 15 00 9a 02 c0    	mov    DWORD PTR ds:0xc0029a00,edx
c0018394:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018398:	83 c4 0c             	add    esp,0xc
c001839b:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c00183a2:	6a 01                	push   0x1
c00183a4:	53                   	push   ebx
c00183a5:	56                   	push   esi
c00183a6:	e8 c2 f6 ff ff       	call   c0017a6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00183ab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00183af:	83 c4 10             	add    esp,0x10
c00183b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00183b7:	0f 85 89 00 00 00    	jne    c0018446 <Thr::loadDLL(char const*, bool)+0x220>
c00183bd:	89 f8                	mov    eax,edi
c00183bf:	84 c0                	test   al,al
c00183c1:	74 73                	je     c0018436 <Thr::loadDLL(char const*, bool)+0x210>
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	68 5c 6c 02 c0       	push   0xc0026c5c
c00183cb:	e8 31 cc ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	eb 61                	jmp    c0018436 <Thr::loadDLL(char const*, bool)+0x210>
c00183d5:	50                   	push   eax
c00183d6:	50                   	push   eax
c00183d7:	89 e8                	mov    eax,ebp
c00183d9:	c1 e0 0c             	shl    eax,0xc
c00183dc:	01 d8                	add    eax,ebx
c00183de:	50                   	push   eax
c00183df:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c00183e5:	e8 40 3c ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00183ef:	a8 60                	test   al,0x60
c00183f1:	75 11                	jne    c0018404 <Thr::loadDLL(char const*, bool)+0x1de>
c00183f3:	83 ec 0c             	sub    esp,0xc
c00183f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183fb:	50                   	push   eax
c00183fc:	e8 86 1f ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	45                   	inc    ebp
c0018405:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018409:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001840d:	05 ff 0f 00 00       	add    eax,0xfff
c0018412:	bf 00 00 00 00       	mov    edi,0x0
c0018417:	83 d2 00             	adc    edx,0x0
c001841a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001841e:	c1 ea 0c             	shr    edx,0xc
c0018421:	39 c5                	cmp    ebp,eax
c0018423:	89 d1                	mov    ecx,edx
c0018425:	89 f8                	mov    eax,edi
c0018427:	19 c8                	sbb    eax,ecx
c0018429:	72 aa                	jb     c00183d5 <Thr::loadDLL(char const*, bool)+0x1af>
c001842b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018430:	75 18                	jne    c001844a <Thr::loadDLL(char const*, bool)+0x224>
c0018432:	31 db                	xor    ebx,ebx
c0018434:	eb 14                	jmp    c001844a <Thr::loadDLL(char const*, bool)+0x224>
c0018436:	83 ec 0c             	sub    esp,0xc
c0018439:	68 7b 6c 02 c0       	push   0xc0026c7b
c001843e:	e8 be cb ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	31 ed                	xor    ebp,ebp
c0018448:	eb bb                	jmp    c0018405 <Thr::loadDLL(char const*, bool)+0x1df>
c001844a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018450:	89 d8                	mov    eax,ebx
c0018452:	5b                   	pop    ebx
c0018453:	5e                   	pop    esi
c0018454:	5f                   	pop    edi
c0018455:	5d                   	pop    ebp
c0018456:	c3                   	ret    

c0018457 <Thr::executeDLL(unsigned long, void*)>:
c0018457:	56                   	push   esi
c0018458:	53                   	push   ebx
c0018459:	52                   	push   edx
c001845a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018462:	85 db                	test   ebx,ebx
c0018464:	75 10                	jne    c0018476 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018466:	83 ec 0c             	sub    esp,0xc
c0018469:	68 97 6c 02 c0       	push   0xc0026c97
c001846e:	e8 8e cb ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	50                   	push   eax
c0018477:	50                   	push   eax
c0018478:	53                   	push   ebx
c0018479:	68 c1 6c 02 c0       	push   0xc0026cc1
c001847e:	e8 bc 4b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018483:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018487:	89 d8                	mov    eax,ebx
c0018489:	83 c4 14             	add    esp,0x14
c001848c:	5b                   	pop    ebx
c001848d:	5e                   	pop    esi
c001848e:	ff e0                	jmp    eax

c0018490 <userModeEntryPoint(void*)>:
c0018490:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018495:	48                   	dec    eax
c0018496:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001849b:	75 03                	jne    c00184a0 <userModeEntryPoint(void*)+0x10>
c001849d:	fb                   	sti    
c001849e:	66 90                	xchg   ax,ax
c00184a0:	fb                   	sti    
c00184a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184a9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00184af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184b3:	e9 a7 7d fe ff       	jmp    c000025f <goToUsermode>

c00184b8 <changeTSS>:
c00184b8:	83 ec 14             	sub    esp,0x14
c00184bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184c0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00184c3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00184c8:	c1 e2 15             	shl    edx,0x15
c00184cb:	29 d0                	sub    eax,edx
c00184cd:	50                   	push   eax
c00184ce:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00184d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00184d9:	05 7c 11 00 00       	add    eax,0x117c
c00184de:	50                   	push   eax
c00184df:	e8 88 31 ff ff       	call   c000b66c <TSS::setESP(unsigned long)>
c00184e4:	83 c4 1c             	add    esp,0x1c
c00184e7:	c3                   	ret    

c00184e8 <switchToThread(ThreadControlBlock*)>:
c00184e8:	57                   	push   edi
c00184e9:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c00184ee:	56                   	push   esi
c00184ef:	85 c0                	test   eax,eax
c00184f1:	53                   	push   ebx
c00184f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184f6:	0f 85 b8 01 00 00    	jne    c00186b4 <switchToThread(ThreadControlBlock*)+0x1cc>
c00184fc:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c00184ff:	3c ff                	cmp    al,0xff
c0018501:	0f 84 a5 01 00 00    	je     c00186ac <switchToThread(ThreadControlBlock*)+0x1c4>
c0018507:	0f b6 d0             	movzx  edx,al
c001850a:	b8 00 04 00 00       	mov    eax,0x400
c001850f:	29 d0                	sub    eax,edx
c0018511:	d1 f8                	sar    eax,1
c0018513:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0018516:	66 90                	xchg   ax,ax
c0018518:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001851b:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0018520:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018526:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001852d:	74 4d                	je     c001857c <switchToThread(ThreadControlBlock*)+0x94>
c001852f:	0f 31                	rdtsc  
c0018531:	a3 08 a2 02 c0       	mov    ds:0xc002a208,eax
c0018536:	89 c6                	mov    esi,eax
c0018538:	89 d7                	mov    edi,edx
c001853a:	2b 35 f8 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a1f8
c0018540:	89 15 0c a2 02 c0    	mov    DWORD PTR ds:0xc002a20c,edx
c0018546:	1b 3d fc a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a1fc
c001854c:	89 35 00 a2 02 c0    	mov    DWORD PTR ds:0xc002a200,esi
c0018552:	a3 f8 a1 02 c0       	mov    ds:0xc002a1f8,eax
c0018557:	89 3d 04 a2 02 c0    	mov    DWORD PTR ds:0xc002a204,edi
c001855d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018563:	89 15 fc a1 02 c0    	mov    DWORD PTR ds:0xc002a1fc,edx
c0018569:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001856c:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001856f:	01 c6                	add    esi,eax
c0018571:	11 d7                	adc    edi,edx
c0018573:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0018576:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0018579:	8d 76 00             	lea    esi,[esi+0x0]
c001857c:	83 ec 0c             	sub    esp,0xc
c001857f:	68 e0 6c 02 c0       	push   0xc0026ce0
c0018584:	e8 b6 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018589:	83 c4 10             	add    esp,0x10
c001858c:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0018591:	8b b8 e0 01 00 00    	mov    edi,DWORD PTR [eax+0x1e0]
c0018597:	85 ff                	test   edi,edi
c0018599:	74 79                	je     c0018614 <switchToThread(ThreadControlBlock*)+0x12c>
c001859b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185a0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00185a4:	75 6e                	jne    c0018614 <switchToThread(ThreadControlBlock*)+0x12c>
c00185a6:	8b 70 55             	mov    esi,DWORD PTR [eax+0x55]
c00185a9:	85 f6                	test   esi,esi
c00185ab:	0f 84 1b 01 00 00    	je     c00186cc <switchToThread(ThreadControlBlock*)+0x1e4>
c00185b1:	8d 76 00             	lea    esi,[esi+0x0]
c00185b4:	fa                   	cli    
c00185b5:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00185bb:	83 ec 08             	sub    esp,0x8
c00185be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185c3:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00185c6:	68 f0 6c 02 c0       	push   0xc0026cf0
c00185cb:	e8 6f 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00185d0:	5a                   	pop    edx
c00185d1:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00185d6:	59                   	pop    ecx
c00185d7:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00185dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00185e5:	ff 71 55             	push   DWORD PTR [ecx+0x55]
c00185e8:	50                   	push   eax
c00185e9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00185ec:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	48                   	dec    eax
c00185f5:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00185fa:	85 c0                	test   eax,eax
c00185fc:	0f 84 c2 00 00 00    	je     c00186c4 <switchToThread(ThreadControlBlock*)+0x1dc>
c0018602:	66 90                	xchg   ax,ax
c0018604:	83 ec 0c             	sub    esp,0xc
c0018607:	68 0b 6d 02 c0       	push   0xc0026d0b
c001860c:	e8 2e 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	83 ec 0c             	sub    esp,0xc
c0018617:	68 19 6d 02 c0       	push   0xc0026d19
c001861c:	e8 1e 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018621:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018624:	e8 6e 7c fe ff       	call   c0000297 <switchToThreadASM>
c0018629:	c7 04 24 29 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d29
c0018630:	e8 0a 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018635:	83 c4 10             	add    esp,0x10
c0018638:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001863d:	8b b8 e0 01 00 00    	mov    edi,DWORD PTR [eax+0x1e0]
c0018643:	85 ff                	test   edi,edi
c0018645:	74 55                	je     c001869c <switchToThread(ThreadControlBlock*)+0x1b4>
c0018647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001864c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018650:	75 4a                	jne    c001869c <switchToThread(ThreadControlBlock*)+0x1b4>
c0018652:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c0018655:	85 c0                	test   eax,eax
c0018657:	74 43                	je     c001869c <switchToThread(ThreadControlBlock*)+0x1b4>
c0018659:	83 ec 08             	sub    esp,0x8
c001865c:	50                   	push   eax
c001865d:	68 39 6d 02 c0       	push   0xc0026d39
c0018662:	e8 d8 49 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018667:	5a                   	pop    edx
c0018668:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001866d:	59                   	pop    ecx
c001866e:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0018674:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001867a:	8b 10                	mov    edx,DWORD PTR [eax]
c001867c:	ff 71 55             	push   DWORD PTR [ecx+0x55]
c001867f:	50                   	push   eax
c0018680:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0018683:	5b                   	pop    ebx
c0018684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018689:	5e                   	pop    esi
c001868a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001868d:	68 52 6d 02 c0       	push   0xc0026d52
c0018692:	e8 a8 49 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	66 90                	xchg   ax,ax
c001869c:	c7 44 24 10 6a 6d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026d6a
c00186a4:	5b                   	pop    ebx
c00186a5:	5e                   	pop    esi
c00186a6:	5f                   	pop    edi
c00186a7:	e9 93 49 ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c00186ac:	31 c0                	xor    eax,eax
c00186ae:	e9 65 fe ff ff       	jmp    c0018518 <switchToThread(ThreadControlBlock*)+0x30>
c00186b3:	90                   	nop
c00186b4:	5b                   	pop    ebx
c00186b5:	c7 05 c0 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x1
c00186bf:	5e                   	pop    esi
c00186c0:	5f                   	pop    edi
c00186c1:	c3                   	ret    
c00186c2:	66 90                	xchg   ax,ax
c00186c4:	fb                   	sti    
c00186c5:	e9 3a ff ff ff       	jmp    c0018604 <switchToThread(ThreadControlBlock*)+0x11c>
c00186ca:	66 90                	xchg   ax,ax
c00186cc:	83 ec 0c             	sub    esp,0xc
c00186cf:	68 00 04 00 00       	push   0x400
c00186d4:	e8 7a 16 ff ff       	call   c0009d53 <malloc>
c00186d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00186df:	83 c0 0f             	add    eax,0xf
c00186e2:	83 c4 10             	add    esp,0x10
c00186e5:	83 e0 f0             	and    eax,0xfffffff0
c00186e8:	89 42 55             	mov    DWORD PTR [edx+0x55],eax
c00186eb:	e9 c4 fe ff ff       	jmp    c00185b4 <switchToThread(ThreadControlBlock*)+0xcc>

c00186f0 <Process::addArgs(char**)>:
c00186f0:	57                   	push   edi
c00186f1:	56                   	push   esi
c00186f2:	53                   	push   ebx
c00186f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00186fb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018705:	85 ff                	test   edi,edi
c0018707:	74 43                	je     c001874c <Process::addArgs(char**)+0x5c>
c0018709:	8b 07                	mov    eax,DWORD PTR [edi]
c001870b:	85 c0                	test   eax,eax
c001870d:	74 3d                	je     c001874c <Process::addArgs(char**)+0x5c>
c001870f:	31 db                	xor    ebx,ebx
c0018711:	8d 76 00             	lea    esi,[esi+0x0]
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	50                   	push   eax
c0018718:	e8 7b 7f fe ff       	call   c0000698 <strlen>
c001871d:	40                   	inc    eax
c001871e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018721:	e8 2d 16 ff ff       	call   c0009d53 <malloc>
c0018726:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001872d:	5a                   	pop    edx
c001872e:	59                   	pop    ecx
c001872f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018732:	43                   	inc    ebx
c0018733:	50                   	push   eax
c0018734:	e8 ff 7f fe ff       	call   c0000738 <strcpy>
c0018739:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018745:	85 c0                	test   eax,eax
c0018747:	75 cb                	jne    c0018714 <Process::addArgs(char**)+0x24>
c0018749:	8d 76 00             	lea    esi,[esi+0x0]
c001874c:	5b                   	pop    ebx
c001874d:	5e                   	pop    esi
c001874e:	5f                   	pop    edi
c001874f:	c3                   	ret    

c0018750 <Process::Process(char const*, Process*, char**)>:
c0018750:	56                   	push   esi
c0018751:	53                   	push   ebx
c0018752:	83 ec 14             	sub    esp,0x14
c0018755:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018759:	05 0c 02 00 00       	add    eax,0x20c
c001875e:	bb 07 00 00 00       	mov    ebx,0x7
c0018763:	89 c6                	mov    esi,eax
c0018765:	8d 76 00             	lea    esi,[esi+0x0]
c0018768:	85 db                	test   ebx,ebx
c001876a:	78 14                	js     c0018780 <Process::Process(char const*, Process*, char**)+0x30>
c001876c:	83 ec 0c             	sub    esp,0xc
c001876f:	56                   	push   esi
c0018770:	e8 df b1 00 00       	call   c0023954 <ThreadControlBlock::ThreadControlBlock()>
c0018775:	83 c4 10             	add    esp,0x10
c0018778:	83 c6 5f             	add    esi,0x5f
c001877b:	4b                   	dec    ebx
c001877c:	eb ea                	jmp    c0018768 <Process::Process(char const*, Process*, char**)+0x18>
c001877e:	66 90                	xchg   ax,ax
c0018780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018784:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001878b:	83 ec 0c             	sub    esp,0xc
c001878e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018792:	e8 f3 c6 ff ff       	call   c0014e8a <Krnl::newProcessEnv(Process*)>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	89 c2                	mov    edx,eax
c001879c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00187a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187aa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00187b3:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c00187b8:	8d 50 01             	lea    edx,[eax+0x1]
c00187bb:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c00187c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187c5:	89 02                	mov    DWORD PTR [edx],eax
c00187c7:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00187cf:	83 ec 0c             	sub    esp,0xc
c00187d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00187d6:	e8 78 15 ff ff       	call   c0009d53 <malloc>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	89 c3                	mov    ebx,eax
c00187e0:	83 ec 08             	sub    esp,0x8
c00187e3:	6a 00                	push   0x0
c00187e5:	53                   	push   ebx
c00187e6:	e8 7f 40 ff ff       	call   c000c86a <VAS::VAS(bool)>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00187f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001880e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018818:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001881e:	85 c0                	test   eax,eax
c0018820:	74 42                	je     c0018864 <Process::Process(char const*, Process*, char**)+0x114>
c0018822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018826:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001882c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018836:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001883c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018840:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018846:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001884c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018850:	05 0c 01 00 00       	add    eax,0x10c
c0018855:	83 ec 08             	sub    esp,0x8
c0018858:	52                   	push   edx
c0018859:	50                   	push   eax
c001885a:	e8 d9 7e fe ff       	call   c0000738 <strcpy>
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	eb 64                	jmp    c00188c8 <Process::Process(char const*, Process*, char**)+0x178>
c0018864:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c001886c:	83 ec 0c             	sub    esp,0xc
c001886f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018873:	e8 db 14 ff ff       	call   c0009d53 <malloc>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	89 c3                	mov    ebx,eax
c001887d:	83 ec 08             	sub    esp,0x8
c0018880:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018884:	53                   	push   ebx
c0018885:	e8 f6 2a ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c001888a:	83 c4 10             	add    esp,0x10
c001888d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018891:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001889b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00188a1:	83 ec 0c             	sub    esp,0xc
c00188a4:	50                   	push   eax
c00188a5:	e8 95 22 ff ff       	call   c000ab3f <addToTerminalCycle(VgaText*)>
c00188aa:	83 c4 10             	add    esp,0x10
c00188ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b1:	05 0c 01 00 00       	add    eax,0x10c
c00188b6:	83 ec 08             	sub    esp,0x8
c00188b9:	68 7a 6d 02 c0       	push   0xc0026d7a
c00188be:	50                   	push   eax
c00188bf:	e8 74 7e fe ff       	call   c0000738 <strcpy>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	90                   	nop
c00188c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188cc:	83 c0 0c             	add    eax,0xc
c00188cf:	83 ec 08             	sub    esp,0x8
c00188d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188d6:	50                   	push   eax
c00188d7:	e8 5c 7e fe ff       	call   c0000738 <strcpy>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	83 ec 08             	sub    esp,0x8
c00188e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00188e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188ea:	e8 01 fe ff ff       	call   c00186f0 <Process::addArgs(char**)>
c00188ef:	83 c4 10             	add    esp,0x10
c00188f2:	83 ec 08             	sub    esp,0x8
c00188f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188fd:	e8 35 ec ff ff       	call   c0017537 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018902:	83 c4 10             	add    esp,0x10
c0018905:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018909:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001890d:	83 f0 01             	xor    eax,0x1
c0018910:	88 c2                	mov    dl,al
c0018912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018916:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001891c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018921:	83 ec 08             	sub    esp,0x8
c0018924:	50                   	push   eax
c0018925:	68 d4 6d 02 c0       	push   0xc0026dd4
c001892a:	e8 10 47 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001892f:	83 c4 10             	add    esp,0x10
c0018932:	90                   	nop
c0018933:	83 c4 14             	add    esp,0x14
c0018936:	5b                   	pop    ebx
c0018937:	5e                   	pop    esi
c0018938:	c3                   	ret    
c0018939:	90                   	nop
c001893a:	66 90                	xchg   ax,ax

c001893c <Process::Process(bool, char const*, Process*, char**)>:
c001893c:	56                   	push   esi
c001893d:	53                   	push   ebx
c001893e:	83 ec 24             	sub    esp,0x24
c0018941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018945:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001894d:	05 0c 02 00 00       	add    eax,0x20c
c0018952:	bb 07 00 00 00       	mov    ebx,0x7
c0018957:	89 c6                	mov    esi,eax
c0018959:	8d 76 00             	lea    esi,[esi+0x0]
c001895c:	85 db                	test   ebx,ebx
c001895e:	78 14                	js     c0018974 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	56                   	push   esi
c0018964:	e8 eb af 00 00       	call   c0023954 <ThreadControlBlock::ThreadControlBlock()>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	83 c6 5f             	add    esi,0x5f
c001896f:	4b                   	dec    ebx
c0018970:	eb ea                	jmp    c001895c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018972:	66 90                	xchg   ax,ax
c0018974:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018978:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001897f:	83 ec 0c             	sub    esp,0xc
c0018982:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018986:	e8 ff c4 ff ff       	call   c0014e8a <Krnl::newProcessEnv(Process*)>
c001898b:	83 c4 10             	add    esp,0x10
c001898e:	89 c2                	mov    edx,eax
c0018990:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018994:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001899a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00189a7:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c00189ac:	8d 50 01             	lea    edx,[eax+0x1]
c00189af:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c00189b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189b9:	89 02                	mov    DWORD PTR [edx],eax
c00189bb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00189c3:	83 ec 0c             	sub    esp,0xc
c00189c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00189ca:	e8 84 13 ff ff       	call   c0009d53 <malloc>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	89 c3                	mov    ebx,eax
c00189d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189d9:	83 ec 08             	sub    esp,0x8
c00189dc:	50                   	push   eax
c00189dd:	53                   	push   ebx
c00189de:	e8 87 3e ff ff       	call   c000c86a <VAS::VAS(bool)>
c00189e3:	83 c4 10             	add    esp,0x10
c00189e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ea:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018a06:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018a0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a16:	85 c0                	test   eax,eax
c0018a18:	74 42                	je     c0018a5c <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a1e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a24:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a2e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a48:	05 0c 01 00 00       	add    eax,0x10c
c0018a4d:	83 ec 08             	sub    esp,0x8
c0018a50:	52                   	push   edx
c0018a51:	50                   	push   eax
c0018a52:	e8 e1 7c fe ff       	call   c0000738 <strcpy>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	eb 64                	jmp    c0018ac0 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018a5c:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018a64:	83 ec 0c             	sub    esp,0xc
c0018a67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018a6b:	e8 e3 12 ff ff       	call   c0009d53 <malloc>
c0018a70:	83 c4 10             	add    esp,0x10
c0018a73:	89 c3                	mov    ebx,eax
c0018a75:	83 ec 08             	sub    esp,0x8
c0018a78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018a7c:	53                   	push   ebx
c0018a7d:	e8 fe 28 ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c0018a82:	83 c4 10             	add    esp,0x10
c0018a85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a89:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a99:	83 ec 0c             	sub    esp,0xc
c0018a9c:	50                   	push   eax
c0018a9d:	e8 9d 20 ff ff       	call   c000ab3f <addToTerminalCycle(VgaText*)>
c0018aa2:	83 c4 10             	add    esp,0x10
c0018aa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aa9:	05 0c 01 00 00       	add    eax,0x10c
c0018aae:	83 ec 08             	sub    esp,0x8
c0018ab1:	68 7a 6d 02 c0       	push   0xc0026d7a
c0018ab6:	50                   	push   eax
c0018ab7:	e8 7c 7c fe ff       	call   c0000738 <strcpy>
c0018abc:	83 c4 10             	add    esp,0x10
c0018abf:	90                   	nop
c0018ac0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ac4:	83 c0 0c             	add    eax,0xc
c0018ac7:	83 ec 08             	sub    esp,0x8
c0018aca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018ace:	50                   	push   eax
c0018acf:	e8 64 7c fe ff       	call   c0000738 <strcpy>
c0018ad4:	83 c4 10             	add    esp,0x10
c0018ad7:	83 ec 08             	sub    esp,0x8
c0018ada:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ade:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ae2:	e8 09 fc ff ff       	call   c00186f0 <Process::addArgs(char**)>
c0018ae7:	83 c4 10             	add    esp,0x10
c0018aea:	90                   	nop
c0018aeb:	83 c4 24             	add    esp,0x24
c0018aee:	5b                   	pop    ebx
c0018aef:	5e                   	pop    esi
c0018af0:	c3                   	ret    
c0018af1:	8d 76 00             	lea    esi,[esi+0x0]

c0018af4 <taskStartupFunction>:
c0018af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018af9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018afc:	c3                   	ret    
c0018afd:	90                   	nop
c0018afe:	66 90                	xchg   ax,ax

c0018b00 <Semaphore::Semaphore(int)>:
c0018b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b08:	89 10                	mov    DWORD PTR [eax],edx
c0018b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b0e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b24:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b2b:	90                   	nop
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop
c0018b2e:	66 90                	xchg   ax,ax

c0018b30 <Mutex::Mutex()>:
c0018b30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b34:	6a 01                	push   0x1
c0018b36:	50                   	push   eax
c0018b37:	e8 c4 ff ff ff       	call   c0018b00 <Semaphore::Semaphore(int)>
c0018b3c:	83 c4 08             	add    esp,0x8
c0018b3f:	90                   	nop
c0018b40:	c3                   	ret    
c0018b41:	90                   	nop
c0018b42:	66 90                	xchg   ax,ax

c0018b44 <Process::createThread(void (*)(void*), void*, int)>:
c0018b44:	57                   	push   edi
c0018b45:	31 c9                	xor    ecx,ecx
c0018b47:	56                   	push   esi
c0018b48:	53                   	push   ebx
c0018b49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b4d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018b54:	89 f2                	mov    edx,esi
c0018b56:	66 90                	xchg   ax,ax
c0018b58:	0f b7 c2             	movzx  eax,dx
c0018b5b:	83 e2 01             	and    edx,0x1
c0018b5e:	74 14                	je     c0018b74 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018b60:	d1 f8                	sar    eax,1
c0018b62:	41                   	inc    ecx
c0018b63:	89 c2                	mov    edx,eax
c0018b65:	83 f9 10             	cmp    ecx,0x10
c0018b68:	75 ee                	jne    c0018b58 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018b6a:	31 db                	xor    ebx,ebx
c0018b6c:	89 d8                	mov    eax,ebx
c0018b6e:	5b                   	pop    ebx
c0018b6f:	5e                   	pop    esi
c0018b70:	5f                   	pop    edi
c0018b71:	c3                   	ret    
c0018b72:	66 90                	xchg   ax,ax
c0018b74:	b8 01 00 00 00       	mov    eax,0x1
c0018b79:	d3 e0                	shl    eax,cl
c0018b7b:	09 c6                	or     esi,eax
c0018b7d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b80:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018b87:	01 c0                	add    eax,eax
c0018b89:	01 c8                	add    eax,ecx
c0018b8b:	8d 04 80             	lea    eax,[eax+eax*4]
c0018b8e:	01 d8                	add    eax,ebx
c0018b90:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018b97:	75 0b                	jne    c0018ba4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018b99:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018ba3:	90                   	nop
c0018ba4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018baa:	83 ec 08             	sub    esp,0x8
c0018bad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018bb0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018bb3:	01 c0                	add    eax,eax
c0018bb5:	01 c8                	add    eax,ecx
c0018bb7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018bba:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018bbd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bc3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018bc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018bcd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018bd3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018bd9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018be0:	89 ca                	mov    edx,ecx
c0018be2:	f7 da                	neg    edx
c0018be4:	c1 e2 15             	shl    edx,0x15
c0018be7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bed:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018bf3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018bf7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c01:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018c07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c0b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c11:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c1b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c25:	53                   	push   ebx
c0018c26:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018c2b:	e8 c4 aa 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c30:	83 c4 10             	add    esp,0x10
c0018c33:	89 d8                	mov    eax,ebx
c0018c35:	5b                   	pop    ebx
c0018c36:	5e                   	pop    esi
c0018c37:	5f                   	pop    edi
c0018c38:	c3                   	ret    
c0018c39:	90                   	nop
c0018c3a:	66 90                	xchg   ax,ax

c0018c3c <Process::createUserThread()>:
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	68 80 00 00 00       	push   0x80
c0018c44:	6a 00                	push   0x0
c0018c46:	68 90 84 01 c0       	push   0xc0018490
c0018c4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c4f:	e8 f0 fe ff ff       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c0018c54:	83 c4 1c             	add    esp,0x1c
c0018c57:	c3                   	ret    

c0018c58 <setupMultitasking(void (*)())>:
c0018c58:	56                   	push   esi
c0018c59:	53                   	push   ebx
c0018c5a:	51                   	push   ecx
c0018c5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c5f:	eb 13                	jmp    c0018c74 <setupMultitasking(void (*)())+0x1c>
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018c6c:	e8 cb a9 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c71:	83 c4 10             	add    esp,0x10
c0018c74:	83 ec 0c             	sub    esp,0xc
c0018c77:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018c7c:	e8 97 a9 00 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c81:	83 c4 10             	add    esp,0x10
c0018c84:	84 c0                	test   al,al
c0018c86:	74 dc                	je     c0018c64 <setupMultitasking(void (*)())+0xc>
c0018c88:	83 ec 0c             	sub    esp,0xc
c0018c8b:	68 1f 07 00 00       	push   0x71f
c0018c90:	e8 be 10 ff ff       	call   c0009d53 <malloc>
c0018c95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c9c:	89 c3                	mov    ebx,eax
c0018c9e:	6a 00                	push   0x0
c0018ca0:	68 7e 6d 02 c0       	push   0xc0026d7e
c0018ca5:	6a 01                	push   0x1
c0018ca7:	50                   	push   eax
c0018ca8:	e8 8f fc ff ff       	call   c001893c <Process::Process(bool, char const*, Process*, char**)>
c0018cad:	83 c4 14             	add    esp,0x14
c0018cb0:	89 1d f0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1f0,ebx
c0018cb6:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018cbc:	e8 8c 21 ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c0018cc1:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018cc9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018cd3:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018cd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018cdc:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018ce6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018cec:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018cf2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018cfc:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018d06:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d10:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d16:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d20:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d26:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d30:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d36:	58                   	pop    eax
c0018d37:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d3d:	5a                   	pop    edx
c0018d3e:	68 7a 6d 02 c0       	push   0xc0026d7a
c0018d43:	50                   	push   eax
c0018d44:	e8 ef 79 fe ff       	call   c0000738 <strcpy>
c0018d49:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018d50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d54:	83 c4 14             	add    esp,0x14
c0018d57:	5b                   	pop    ebx
c0018d58:	5e                   	pop    esi
c0018d59:	e9 2b 75 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018d5e:	66 90                	xchg   ax,ax

c0018d60 <schedule()>:
c0018d60:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0018d65:	85 c0                	test   eax,eax
c0018d67:	74 0b                	je     c0018d74 <schedule()+0x14>
c0018d69:	c7 05 c0 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x1
c0018d73:	c3                   	ret    
c0018d74:	53                   	push   ebx
c0018d75:	83 ec 14             	sub    esp,0x14
c0018d78:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018d7d:	e8 96 a8 00 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	84 c0                	test   al,al
c0018d87:	75 3b                	jne    c0018dc4 <schedule()+0x64>
c0018d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018d91:	4a                   	dec    edx
c0018d92:	74 38                	je     c0018dcc <schedule()+0x6c>
c0018d94:	83 ec 0c             	sub    esp,0xc
c0018d97:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018d9c:	e8 93 a8 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018da1:	c7 04 24 e4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e4
c0018da8:	89 c3                	mov    ebx,eax
c0018daa:	e8 8d a8 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018daf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018db6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018db9:	e8 2a f7 ff ff       	call   c00184e8 <switchToThread(ThreadControlBlock*)>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc4:	83 c4 08             	add    esp,0x8
c0018dc7:	5b                   	pop    ebx
c0018dc8:	c3                   	ret    
c0018dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dcc:	83 ec 08             	sub    esp,0x8
c0018dcf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018dd6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018ddc:	68 e4 a1 02 c0       	push   0xc002a1e4
c0018de1:	e8 0e a9 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018de6:	83 c4 10             	add    esp,0x10
c0018de9:	eb a9                	jmp    c0018d94 <schedule()+0x34>
c0018deb:	90                   	nop

c0018dec <Semaphore::tryAcquire()>:
c0018dec:	53                   	push   ebx
c0018ded:	83 ec 08             	sub    esp,0x8
c0018df0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018df4:	fa                   	cli    
c0018df5:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018dfa:	8d 50 01             	lea    edx,[eax+0x1]
c0018dfd:	89 15 c8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c8,edx
c0018e03:	8b 15 c4 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1c4
c0018e09:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018e0c:	89 1d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ebx
c0018e12:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018e15:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018e17:	7c 33                	jl     c0018e4c <Semaphore::tryAcquire()+0x60>
c0018e19:	89 15 c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,edx
c0018e1f:	85 d2                	test   edx,edx
c0018e21:	75 0d                	jne    c0018e30 <Semaphore::tryAcquire()+0x44>
c0018e23:	8b 15 c0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1c0
c0018e29:	85 d2                	test   edx,edx
c0018e2b:	75 6b                	jne    c0018e98 <Semaphore::tryAcquire()+0xac>
c0018e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e30:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018e35:	85 c0                	test   eax,eax
c0018e37:	74 0b                	je     c0018e44 <Semaphore::tryAcquire()+0x58>
c0018e39:	8d 76 00             	lea    esi,[esi+0x0]
c0018e3c:	31 c0                	xor    eax,eax
c0018e3e:	83 c4 08             	add    esp,0x8
c0018e41:	5b                   	pop    ebx
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop
c0018e44:	fb                   	sti    
c0018e45:	83 c4 08             	add    esp,0x8
c0018e48:	5b                   	pop    ebx
c0018e49:	c3                   	ret    
c0018e4a:	66 90                	xchg   ax,ax
c0018e4c:	43                   	inc    ebx
c0018e4d:	89 15 c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,edx
c0018e53:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018e56:	85 d2                	test   edx,edx
c0018e58:	75 22                	jne    c0018e7c <Semaphore::tryAcquire()+0x90>
c0018e5a:	8b 0d c0 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1c0
c0018e60:	85 c9                	test   ecx,ecx
c0018e62:	74 18                	je     c0018e7c <Semaphore::tryAcquire()+0x90>
c0018e64:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0018e6e:	e8 ed fe ff ff       	call   c0018d60 <schedule()>
c0018e73:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018e78:	48                   	dec    eax
c0018e79:	8d 76 00             	lea    esi,[esi+0x0]
c0018e7c:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018e81:	85 c0                	test   eax,eax
c0018e83:	75 0b                	jne    c0018e90 <Semaphore::tryAcquire()+0xa4>
c0018e85:	fb                   	sti    
c0018e86:	b0 01                	mov    al,0x1
c0018e88:	83 c4 08             	add    esp,0x8
c0018e8b:	5b                   	pop    ebx
c0018e8c:	c3                   	ret    
c0018e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e90:	b0 01                	mov    al,0x1
c0018e92:	83 c4 08             	add    esp,0x8
c0018e95:	5b                   	pop    ebx
c0018e96:	c3                   	ret    
c0018e97:	90                   	nop
c0018e98:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0018ea2:	e8 b9 fe ff ff       	call   c0018d60 <schedule()>
c0018ea7:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018eac:	48                   	dec    eax
c0018ead:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018eb2:	85 c0                	test   eax,eax
c0018eb4:	75 86                	jne    c0018e3c <Semaphore::tryAcquire()+0x50>
c0018eb6:	eb 8c                	jmp    c0018e44 <Semaphore::tryAcquire()+0x58>

c0018eb8 <Semaphore::assertLocked(char const*)>:
c0018eb8:	83 ec 0c             	sub    esp,0xc
c0018ebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ebf:	fa                   	cli    
c0018ec0:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0018ec6:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0018ecb:	8d 48 01             	lea    ecx,[eax+0x1]
c0018ece:	89 0d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ecx
c0018ed4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018ed6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018ed9:	7c 29                	jl     c0018f04 <Semaphore::assertLocked(char const*)+0x4c>
c0018edb:	90                   	nop
c0018edc:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c0018ee1:	85 c0                	test   eax,eax
c0018ee3:	75 0b                	jne    c0018ef0 <Semaphore::assertLocked(char const*)+0x38>
c0018ee5:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c0018eea:	85 c0                	test   eax,eax
c0018eec:	75 2e                	jne    c0018f1c <Semaphore::assertLocked(char const*)+0x64>
c0018eee:	66 90                	xchg   ax,ax
c0018ef0:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018ef5:	48                   	dec    eax
c0018ef6:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018efb:	75 03                	jne    c0018f00 <Semaphore::assertLocked(char const*)+0x48>
c0018efd:	fb                   	sti    
c0018efe:	66 90                	xchg   ax,ax
c0018f00:	83 c4 0c             	add    esp,0xc
c0018f03:	c3                   	ret    
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f0b:	e8 f1 c0 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0018f10:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	48                   	dec    eax
c0018f19:	eb c1                	jmp    c0018edc <Semaphore::assertLocked(char const*)+0x24>
c0018f1b:	90                   	nop
c0018f1c:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0018f26:	e8 35 fe ff ff       	call   c0018d60 <schedule()>
c0018f2b:	eb c3                	jmp    c0018ef0 <Semaphore::assertLocked(char const*)+0x38>
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]

c0018f30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018f30:	83 ec 0c             	sub    esp,0xc
c0018f33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f3c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f3f:	e8 1c fe ff ff       	call   c0018d60 <schedule()>
c0018f44:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018f49:	48                   	dec    eax
c0018f4a:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018f4f:	75 03                	jne    c0018f54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018f51:	fb                   	sti    
c0018f52:	66 90                	xchg   ax,ax
c0018f54:	83 c4 0c             	add    esp,0xc
c0018f57:	c3                   	ret    

c0018f58 <blockTask(TaskState)>:
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	fa                   	cli    
c0018f5c:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0018f62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f6e:	e8 ed fd ff ff       	call   c0018d60 <schedule()>
c0018f73:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0018f78:	48                   	dec    eax
c0018f79:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0018f7e:	75 04                	jne    c0018f84 <blockTask(TaskState)+0x2c>
c0018f80:	fb                   	sti    
c0018f81:	8d 76 00             	lea    esi,[esi+0x0]
c0018f84:	83 c4 0c             	add    esp,0xc
c0018f87:	c3                   	ret    

c0018f88 <waitTask(int, int*, int)>:
c0018f88:	83 ec 18             	sub    esp,0x18
c0018f8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018f97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fa0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018fa3:	6a 07                	push   0x7
c0018fa5:	e8 ae ff ff ff       	call   c0018f58 <blockTask(TaskState)>
c0018faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018faf:	83 c4 10             	add    esp,0x10
c0018fb2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018fb5:	85 d2                	test   edx,edx
c0018fb7:	74 0b                	je     c0018fc4 <waitTask(int, int*, int)+0x3c>
c0018fb9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018fbc:	89 02                	mov    DWORD PTR [edx],eax
c0018fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fc3:	90                   	nop
c0018fc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018fc7:	83 c4 0c             	add    esp,0xc
c0018fca:	c3                   	ret    
c0018fcb:	90                   	nop

c0018fcc <milliTenthSleepUntil(unsigned int)>:
c0018fcc:	83 ec 0c             	sub    esp,0xc
c0018fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fd3:	39 05 cc 92 02 c0    	cmp    DWORD PTR ds:0xc00292cc,eax
c0018fd9:	76 05                	jbe    c0018fe0 <milliTenthSleepUntil(unsigned int)+0x14>
c0018fdb:	90                   	nop
c0018fdc:	83 c4 0c             	add    esp,0xc
c0018fdf:	c3                   	ret    
c0018fe0:	fa                   	cli    
c0018fe1:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0018fe7:	83 ec 08             	sub    esp,0x8
c0018fea:	ff 05 c4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c4
c0018ff0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018ff6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018ff9:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018fff:	68 d8 a1 02 c0       	push   0xc002a1d8
c0019004:	e8 eb a6 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019009:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0019010:	e8 43 ff ff ff       	call   c0018f58 <blockTask(TaskState)>
c0019015:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c001901a:	83 c4 10             	add    esp,0x10
c001901d:	48                   	dec    eax
c001901e:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c0019023:	85 c0                	test   eax,eax
c0019025:	75 09                	jne    c0019030 <milliTenthSleepUntil(unsigned int)+0x64>
c0019027:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c001902c:	85 c0                	test   eax,eax
c001902e:	75 14                	jne    c0019044 <milliTenthSleepUntil(unsigned int)+0x78>
c0019030:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019035:	48                   	dec    eax
c0019036:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001903b:	75 9f                	jne    c0018fdc <milliTenthSleepUntil(unsigned int)+0x10>
c001903d:	fb                   	sti    
c001903e:	83 c4 0c             	add    esp,0xc
c0019041:	c3                   	ret    
c0019042:	66 90                	xchg   ax,ax
c0019044:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c001904e:	e8 0d fd ff ff       	call   c0018d60 <schedule()>
c0019053:	eb db                	jmp    c0019030 <milliTenthSleepUntil(unsigned int)+0x64>
c0019055:	8d 76 00             	lea    esi,[esi+0x0]

c0019058 <milliTenthSleep(unsigned int)>:
c0019058:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c001905d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019061:	e9 66 ff ff ff       	jmp    c0018fcc <milliTenthSleepUntil(unsigned int)>
c0019066:	66 90                	xchg   ax,ax

c0019068 <sleep(unsigned int)>:
c0019068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001906c:	8d 04 80             	lea    eax,[eax+eax*4]
c001906f:	8d 04 80             	lea    eax,[eax+eax*4]
c0019072:	8d 04 80             	lea    eax,[eax+eax*4]
c0019075:	8d 04 80             	lea    eax,[eax+eax*4]
c0019078:	c1 e0 04             	shl    eax,0x4
c001907b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001907f:	eb d7                	jmp    c0019058 <milliTenthSleep(unsigned int)>
c0019081:	90                   	nop
c0019082:	66 90                	xchg   ax,ax

c0019084 <Semaphore::acquire()>:
c0019084:	83 ec 0c             	sub    esp,0xc
c0019087:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001908b:	fa                   	cli    
c001908c:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0019091:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019097:	8d 48 01             	lea    ecx,[eax+0x1]
c001909a:	89 0d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ecx
c00190a0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00190a3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00190a5:	7d 2d                	jge    c00190d4 <Semaphore::acquire()+0x50>
c00190a7:	41                   	inc    ecx
c00190a8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00190ab:	90                   	nop
c00190ac:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c00190b1:	85 c0                	test   eax,eax
c00190b3:	75 0b                	jne    c00190c0 <Semaphore::acquire()+0x3c>
c00190b5:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c00190ba:	85 c0                	test   eax,eax
c00190bc:	75 62                	jne    c0019120 <Semaphore::acquire()+0x9c>
c00190be:	66 90                	xchg   ax,ax
c00190c0:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00190c5:	48                   	dec    eax
c00190c6:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00190cb:	75 03                	jne    c00190d0 <Semaphore::acquire()+0x4c>
c00190cd:	fb                   	sti    
c00190ce:	66 90                	xchg   ax,ax
c00190d0:	83 c4 0c             	add    esp,0xc
c00190d3:	c3                   	ret    
c00190d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00190e0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00190e3:	85 c9                	test   ecx,ecx
c00190e5:	74 4d                	je     c0019134 <Semaphore::acquire()+0xb0>
c00190e7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00190ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190f0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00190f3:	90                   	nop
c00190f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190f9:	83 ec 0c             	sub    esp,0xc
c00190fc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00190ff:	68 fc 6d 02 c0       	push   0xc0026dfc
c0019104:	e8 36 3f ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0019109:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0019110:	e8 43 fe ff ff       	call   c0018f58 <blockTask(TaskState)>
c0019115:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c001911a:	83 c4 10             	add    esp,0x10
c001911d:	48                   	dec    eax
c001911e:	eb 8c                	jmp    c00190ac <Semaphore::acquire()+0x28>
c0019120:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c001912a:	e8 31 fc ff ff       	call   c0018d60 <schedule()>
c001912f:	eb 8f                	jmp    c00190c0 <Semaphore::acquire()+0x3c>
c0019131:	8d 76 00             	lea    esi,[esi+0x0]
c0019134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019139:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001913c:	eb b6                	jmp    c00190f4 <Semaphore::acquire()+0x70>
c001913e:	66 90                	xchg   ax,ax

c0019140 <taskReturned>:
c0019140:	83 ec 18             	sub    esp,0x18
c0019143:	68 1c 6e 02 c0       	push   0xc0026e1c
c0019148:	e8 b4 be ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	83 ec 0c             	sub    esp,0xc
c0019153:	6a 02                	push   0x2
c0019155:	e8 fe fd ff ff       	call   c0018f58 <blockTask(TaskState)>
c001915a:	fa                   	cli    
c001915b:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019161:	e8 fa fb ff ff       	call   c0018d60 <schedule()>
c0019166:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	48                   	dec    eax
c001916f:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019174:	85 c0                	test   eax,eax
c0019176:	75 d8                	jne    c0019150 <taskReturned+0x10>
c0019178:	fb                   	sti    
c0019179:	eb d5                	jmp    c0019150 <taskReturned+0x10>
c001917b:	90                   	nop

c001917c <Thr::processFromPID(int)>:
c001917c:	57                   	push   edi
c001917d:	56                   	push   esi
c001917e:	53                   	push   ebx
c001917f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019183:	fa                   	cli    
c0019184:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019192:	e8 9d a4 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	89 c7                	mov    edi,eax
c001919c:	eb 16                	jmp    c00191b4 <Thr::processFromPID(int)+0x38>
c001919e:	66 90                	xchg   ax,ax
c00191a0:	83 ec 0c             	sub    esp,0xc
c00191a3:	68 e4 a1 02 c0       	push   0xc002a1e4
c00191a8:	e8 87 a4 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	39 f8                	cmp    eax,edi
c00191b2:	74 4c                	je     c0019200 <Thr::processFromPID(int)+0x84>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	68 e4 a1 02 c0       	push   0xc002a1e4
c00191bc:	e8 73 a4 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00191c1:	c7 04 24 e4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e4
c00191c8:	89 c3                	mov    ebx,eax
c00191ca:	e8 6d a4 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00191cf:	58                   	pop    eax
c00191d0:	5a                   	pop    edx
c00191d1:	53                   	push   ebx
c00191d2:	68 e4 a1 02 c0       	push   0xc002a1e4
c00191d7:	e8 18 a5 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191df:	83 c4 10             	add    esp,0x10
c00191e2:	39 30                	cmp    DWORD PTR [eax],esi
c00191e4:	75 ba                	jne    c00191a0 <Thr::processFromPID(int)+0x24>
c00191e6:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00191eb:	48                   	dec    eax
c00191ec:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00191f1:	74 09                	je     c00191fc <Thr::processFromPID(int)+0x80>
c00191f3:	90                   	nop
c00191f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191f7:	5b                   	pop    ebx
c00191f8:	5e                   	pop    esi
c00191f9:	5f                   	pop    edi
c00191fa:	c3                   	ret    
c00191fb:	90                   	nop
c00191fc:	fb                   	sti    
c00191fd:	eb f5                	jmp    c00191f4 <Thr::processFromPID(int)+0x78>
c00191ff:	90                   	nop
c0019200:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019205:	48                   	dec    eax
c0019206:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001920b:	75 07                	jne    c0019214 <Thr::processFromPID(int)+0x98>
c001920d:	fb                   	sti    
c001920e:	5b                   	pop    ebx
c001920f:	5e                   	pop    esi
c0019210:	5f                   	pop    edi
c0019211:	c3                   	ret    
c0019212:	66 90                	xchg   ax,ax
c0019214:	5b                   	pop    ebx
c0019215:	31 c0                	xor    eax,eax
c0019217:	5e                   	pop    esi
c0019218:	5f                   	pop    edi
c0019219:	c3                   	ret    
c001921a:	66 90                	xchg   ax,ax

c001921c <unblockTask(ThreadControlBlock*)>:
c001921c:	53                   	push   ebx
c001921d:	83 ec 08             	sub    esp,0x8
c0019220:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019224:	fa                   	cli    
c0019225:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001922b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001922e:	85 c0                	test   eax,eax
c0019230:	74 66                	je     c0019298 <unblockTask(ThreadControlBlock*)+0x7c>
c0019232:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019235:	48                   	dec    eax
c0019236:	74 38                	je     c0019270 <unblockTask(ThreadControlBlock*)+0x54>
c0019238:	83 ec 0c             	sub    esp,0xc
c001923b:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019240:	e8 ef a3 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	85 c0                	test   eax,eax
c001924a:	75 1c                	jne    c0019268 <unblockTask(ThreadControlBlock*)+0x4c>
c001924c:	eb 5e                	jmp    c00192ac <unblockTask(ThreadControlBlock*)+0x90>
c001924e:	66 90                	xchg   ax,ax
c0019250:	83 ec 08             	sub    esp,0x8
c0019253:	50                   	push   eax
c0019254:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019259:	e8 86 a7 00 00       	call   c00239e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001925e:	83 c4 10             	add    esp,0x10
c0019261:	85 c0                	test   eax,eax
c0019263:	74 47                	je     c00192ac <unblockTask(ThreadControlBlock*)+0x90>
c0019265:	8d 76 00             	lea    esi,[esi+0x0]
c0019268:	39 c3                	cmp    ebx,eax
c001926a:	75 e4                	jne    c0019250 <unblockTask(ThreadControlBlock*)+0x34>
c001926c:	eb 12                	jmp    c0019280 <unblockTask(ThreadControlBlock*)+0x64>
c001926e:	66 90                	xchg   ax,ax
c0019270:	83 ec 0c             	sub    esp,0xc
c0019273:	68 9c 6d 02 c0       	push   0xc0026d9c
c0019278:	e8 c2 3d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001927d:	83 c4 10             	add    esp,0x10
c0019280:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019285:	48                   	dec    eax
c0019286:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001928b:	75 03                	jne    c0019290 <unblockTask(ThreadControlBlock*)+0x74>
c001928d:	fb                   	sti    
c001928e:	66 90                	xchg   ax,ax
c0019290:	83 c4 08             	add    esp,0x8
c0019293:	5b                   	pop    ebx
c0019294:	c3                   	ret    
c0019295:	8d 76 00             	lea    esi,[esi+0x0]
c0019298:	83 ec 0c             	sub    esp,0xc
c001929b:	68 85 6d 02 c0       	push   0xc0026d85
c00192a0:	e8 9a 3d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00192a5:	83 c4 10             	add    esp,0x10
c00192a8:	eb d6                	jmp    c0019280 <unblockTask(ThreadControlBlock*)+0x64>
c00192aa:	66 90                	xchg   ax,ax
c00192ac:	83 ec 08             	sub    esp,0x8
c00192af:	53                   	push   ebx
c00192b0:	68 e4 a1 02 c0       	push   0xc002a1e4
c00192b5:	e8 3a a4 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00192ba:	83 c4 10             	add    esp,0x10
c00192bd:	eb c1                	jmp    c0019280 <unblockTask(ThreadControlBlock*)+0x64>
c00192bf:	90                   	nop

c00192c0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00192c0:	55                   	push   ebp
c00192c1:	57                   	push   edi
c00192c2:	56                   	push   esi
c00192c3:	53                   	push   ebx
c00192c4:	83 ec 1c             	sub    esp,0x1c
c00192c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192cb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192ce:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00192d4:	85 ff                	test   edi,edi
c00192d6:	7e 24                	jle    c00192fc <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00192d8:	31 f6                	xor    esi,esi
c00192da:	66 90                	xchg   ax,ax
c00192dc:	83 ec 0c             	sub    esp,0xc
c00192df:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00192e6:	46                   	inc    esi
c00192e7:	e8 77 0a ff ff       	call   c0009d63 <free>
c00192ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192ef:	83 c4 10             	add    esp,0x10
c00192f2:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00192f8:	7f e2                	jg     c00192dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00192fa:	66 90                	xchg   ax,ax
c00192fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0019306:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001930b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001930e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0019311:	d3 c0                	rol    eax,cl
c0019313:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001931a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001931d:	89 f7                	mov    edi,esi
c001931f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0019327:	0f 85 73 01 00 00    	jne    c00194a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001932d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0019333:	85 ed                	test   ebp,ebp
c0019335:	74 1d                	je     c0019354 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0019337:	83 ec 0c             	sub    esp,0xc
c001933a:	55                   	push   ebp
c001933b:	e8 66 ba ff ff       	call   c0014da6 <EnvVarContainer::~EnvVarContainer()>
c0019340:	59                   	pop    ecx
c0019341:	5e                   	pop    esi
c0019342:	6a 0c                	push   0xc
c0019344:	55                   	push   ebp
c0019345:	e8 14 3c ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001934a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	89 f7                	mov    edi,esi
c0019352:	66 90                	xchg   ax,ax
c0019354:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001935a:	85 c0                	test   eax,eax
c001935c:	0f 84 b2 00 00 00    	je     c0019414 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019362:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019365:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019369:	31 c9                	xor    ecx,ecx
c001936b:	eb 17                	jmp    c0019384 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001936d:	8d 76 00             	lea    esi,[esi+0x0]
c0019370:	41                   	inc    ecx
c0019371:	83 f9 10             	cmp    ecx,0x10
c0019374:	0f 84 9a 00 00 00    	je     c0019414 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001937a:	66 90                	xchg   ax,ax
c001937c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019382:	66 90                	xchg   ax,ax
c0019384:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001938b:	d3 fa                	sar    edx,cl
c001938d:	83 e2 01             	and    edx,0x1
c0019390:	74 de                	je     c0019370 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019392:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019395:	01 d2                	add    edx,edx
c0019397:	01 ca                	add    edx,ecx
c0019399:	8d 14 92             	lea    edx,[edx+edx*4]
c001939c:	01 d0                	add    eax,edx
c001939e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00193a4:	83 fd 07             	cmp    ebp,0x7
c00193a7:	75 c7                	jne    c0019370 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00193a9:	05 40 02 00 00       	add    eax,0x240
c00193ae:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00193b1:	83 fd ff             	cmp    ebp,0xffffffff
c00193b4:	0f 8c ee 00 00 00    	jl     c00194a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00193ba:	0f 84 ac 01 00 00    	je     c001956c <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00193c0:	85 ed                	test   ebp,ebp
c00193c2:	0f 84 90 01 00 00    	je     c0019558 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00193c8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00193ca:	75 a4                	jne    c0019370 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00193cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00193d2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193d6:	01 d0                	add    eax,edx
c00193d8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00193e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00193ee:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00193f5:	50                   	push   eax
c00193f6:	e8 21 fe ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019401:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019405:	89 f7                	mov    edi,esi
c0019407:	41                   	inc    ecx
c0019408:	83 f9 10             	cmp    ecx,0x10
c001940b:	0f 85 6b ff ff ff    	jne    c001937c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0019411:	8d 76 00             	lea    esi,[esi+0x0]
c0019414:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001941a:	85 c0                	test   eax,eax
c001941c:	74 62                	je     c0019480 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001941e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019424:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001942a:	74 54                	je     c0019480 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019434:	e8 fb a1 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019439:	c7 04 24 e4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e4
c0019440:	89 c7                	mov    edi,eax
c0019442:	e8 d1 a1 00 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	84 c0                	test   al,al
c001944c:	0f 84 ce 00 00 00    	je     c0019520 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019452:	66 90                	xchg   ax,ax
c0019454:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019457:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001945d:	85 d2                	test   edx,edx
c001945f:	74 0f                	je     c0019470 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019461:	83 ec 0c             	sub    esp,0xc
c0019464:	8b 02                	mov    eax,DWORD PTR [edx]
c0019466:	52                   	push   edx
c0019467:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001946a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001946d:	83 c4 10             	add    esp,0x10
c0019470:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001947a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001947d:	8d 76 00             	lea    esi,[esi+0x0]
c0019480:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0019486:	85 db                	test   ebx,ebx
c0019488:	74 16                	je     c00194a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001948a:	83 ec 0c             	sub    esp,0xc
c001948d:	53                   	push   ebx
c001948e:	e8 b1 2d ff ff       	call   c000c244 <VAS::~VAS()>
c0019493:	58                   	pop    eax
c0019494:	5a                   	pop    edx
c0019495:	6a 14                	push   0x14
c0019497:	53                   	push   ebx
c0019498:	e8 c1 3a ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001949d:	83 c4 10             	add    esp,0x10
c00194a0:	83 c4 1c             	add    esp,0x1c
c00194a3:	5b                   	pop    ebx
c00194a4:	5e                   	pop    esi
c00194a5:	5f                   	pop    edi
c00194a6:	5d                   	pop    ebp
c00194a7:	c3                   	ret    
c00194a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	68 50 6e 02 c0       	push   0xc0026e50
c00194b4:	e8 48 bb ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00194b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	89 f7                	mov    edi,esi
c00194c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194c5:	e9 a6 fe ff ff       	jmp    c0019370 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00194ca:	66 90                	xchg   ax,ax
c00194cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194d2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00194d8:	75 1e                	jne    c00194f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00194da:	83 ec 0c             	sub    esp,0xc
c00194dd:	68 b8 6e 02 c0       	push   0xc0026eb8
c00194e2:	e8 58 3b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00194e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194ee:	e8 65 fa ff ff       	call   c0018f58 <blockTask(TaskState)>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	66 90                	xchg   ax,ax
c00194f8:	83 ec 08             	sub    esp,0x8
c00194fb:	56                   	push   esi
c00194fc:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019501:	e8 ee a1 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019506:	c7 04 24 e4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e4
c001950d:	e8 22 a1 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019512:	83 c4 10             	add    esp,0x10
c0019515:	39 f8                	cmp    eax,edi
c0019517:	0f 84 37 ff ff ff    	je     c0019454 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019528:	e8 07 a1 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001952d:	c7 04 24 e4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1e4
c0019534:	89 c6                	mov    esi,eax
c0019536:	e8 01 a1 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	39 f3                	cmp    ebx,esi
c0019540:	74 b6                	je     c00194f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019542:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019545:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019548:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001954e:	75 a8                	jne    c00194f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019550:	e9 77 ff ff ff       	jmp    c00194cc <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019555:	8d 76 00             	lea    esi,[esi+0x0]
c0019558:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	68 84 6e 02 c0       	push   0xc0026e84
c0019564:	e9 4b ff ff ff       	jmp    c00194b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0019569:	8d 76 00             	lea    esi,[esi+0x0]
c001956c:	8b 36                	mov    esi,DWORD PTR [esi]
c001956e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019572:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019575:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019578:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001957e:	01 d7                	add    edi,edx
c0019580:	89 f8                	mov    eax,edi
c0019582:	e9 51 fe ff ff       	jmp    c00193d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0019587:	90                   	nop

c0019588 <cleanerTaskFunction(void*)>:
c0019588:	53                   	push   ebx
c0019589:	83 ec 08             	sub    esp,0x8
c001958c:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019591:	48                   	dec    eax
c0019592:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019597:	75 03                	jne    c001959c <cleanerTaskFunction(void*)+0x14>
c0019599:	fb                   	sti    
c001959a:	66 90                	xchg   ax,ax
c001959c:	fa                   	cli    
c001959d:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00195a2:	80 3d ac a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1ac,0x0
c00195a9:	8d 50 01             	lea    edx,[eax+0x1]
c00195ac:	89 15 c8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c8,edx
c00195b2:	0f 84 ac 00 00 00    	je     c0019664 <cleanerTaskFunction(void*)+0xdc>
c00195b8:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00195bd:	85 c0                	test   eax,eax
c00195bf:	75 03                	jne    c00195c4 <cleanerTaskFunction(void*)+0x3c>
c00195c1:	fb                   	sti    
c00195c2:	66 90                	xchg   ax,ax
c00195c4:	c6 05 ac a1 02 c0 00 	mov    BYTE PTR ds:0xc002a1ac,0x0
c00195cb:	fa                   	cli    
c00195cc:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00195d2:	ff 05 c4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c4
c00195d8:	fa                   	cli    
c00195d9:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00195df:	eb 2b                	jmp    c001960c <cleanerTaskFunction(void*)+0x84>
c00195e1:	8d 76 00             	lea    esi,[esi+0x0]
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	68 cc a1 02 c0       	push   0xc002a1cc
c00195ec:	e8 43 a0 00 00       	call   c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00195f1:	c7 04 24 cc a1 02 c0 	mov    DWORD PTR [esp],0xc002a1cc
c00195f8:	89 c3                	mov    ebx,eax
c00195fa:	e8 3d a0 00 00       	call   c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00195ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019602:	e8 b9 fc ff ff       	call   c00192c0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019607:	83 c4 10             	add    esp,0x10
c001960a:	66 90                	xchg   ax,ax
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	68 cc a1 02 c0       	push   0xc002a1cc
c0019614:	e8 ff 9f 00 00       	call   c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019619:	83 c4 10             	add    esp,0x10
c001961c:	84 c0                	test   al,al
c001961e:	74 c4                	je     c00195e4 <cleanerTaskFunction(void*)+0x5c>
c0019620:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019625:	48                   	dec    eax
c0019626:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001962b:	75 03                	jne    c0019630 <cleanerTaskFunction(void*)+0xa8>
c001962d:	fb                   	sti    
c001962e:	66 90                	xchg   ax,ax
c0019630:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0019635:	48                   	dec    eax
c0019636:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c001963b:	0f 85 4b ff ff ff    	jne    c001958c <cleanerTaskFunction(void*)+0x4>
c0019641:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c0019646:	85 c0                	test   eax,eax
c0019648:	0f 84 3e ff ff ff    	je     c001958c <cleanerTaskFunction(void*)+0x4>
c001964e:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0019658:	e8 03 f7 ff ff       	call   c0018d60 <schedule()>
c001965d:	e9 2a ff ff ff       	jmp    c001958c <cleanerTaskFunction(void*)+0x4>
c0019662:	66 90                	xchg   ax,ax
c0019664:	83 ec 0c             	sub    esp,0xc
c0019667:	6a 02                	push   0x2
c0019669:	e8 c2 f8 ff ff       	call   c0018f30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	e9 4e ff ff ff       	jmp    c00195c4 <cleanerTaskFunction(void*)+0x3c>
c0019676:	66 90                	xchg   ax,ax

c0019678 <terminateTask(int)>:
c0019678:	83 ec 14             	sub    esp,0x14
c001967b:	fa                   	cli    
c001967c:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019682:	ff 05 c4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c4
c0019688:	fa                   	cli    
c0019689:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001968f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019698:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001969b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196a0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00196a3:	50                   	push   eax
c00196a4:	68 cc a1 02 c0       	push   0xc002a1cc
c00196a9:	e8 46 a0 00 00       	call   c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00196ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00196bd:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00196c2:	85 c0                	test   eax,eax
c00196c4:	74 5e                	je     c0019724 <terminateTask(int)+0xac>
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	c6 05 ac a1 02 c0 01 	mov    BYTE PTR ds:0xc002a1ac,0x1
c00196d0:	50                   	push   eax
c00196d1:	e8 46 fb ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c00196d6:	83 c4 10             	add    esp,0x10
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00196e1:	48                   	dec    eax
c00196e2:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00196e7:	75 03                	jne    c00196ec <terminateTask(int)+0x74>
c00196e9:	fb                   	sti    
c00196ea:	66 90                	xchg   ax,ax
c00196ec:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c00196f1:	48                   	dec    eax
c00196f2:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c00196f7:	75 0b                	jne    c0019704 <terminateTask(int)+0x8c>
c00196f9:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c0019700:	75 36                	jne    c0019738 <terminateTask(int)+0xc0>
c0019702:	66 90                	xchg   ax,ax
c0019704:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019709:	48                   	dec    eax
c001970a:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c001970f:	75 03                	jne    c0019714 <terminateTask(int)+0x9c>
c0019711:	fb                   	sti    
c0019712:	66 90                	xchg   ax,ax
c0019714:	fa                   	cli    
c0019715:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001971b:	90                   	nop
c001971c:	e8 3f f6 ff ff       	call   c0018d60 <schedule()>
c0019721:	eb e1                	jmp    c0019704 <terminateTask(int)+0x8c>
c0019723:	90                   	nop
c0019724:	83 ec 0c             	sub    esp,0xc
c0019727:	68 b3 6d 02 c0       	push   0xc0026db3
c001972c:	e8 0e 39 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	eb a6                	jmp    c00196dc <terminateTask(int)+0x64>
c0019736:	66 90                	xchg   ax,ax
c0019738:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c0019742:	eb d8                	jmp    c001971c <terminateTask(int)+0xa4>

c0019744 <Thr::terminateFromIRQ(int)>:
c0019744:	83 ec 18             	sub    esp,0x18
c0019747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001974b:	e8 28 ff ff ff       	call   c0019678 <terminateTask(int)>

c0019750 <Semaphore::release()>:
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019757:	fa                   	cli    
c0019758:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c001975d:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019763:	8d 48 01             	lea    ecx,[eax+0x1]
c0019766:	89 0d c4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c4,ecx
c001976c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001976f:	85 c9                	test   ecx,ecx
c0019771:	74 41                	je     c00197b4 <Semaphore::release()+0x64>
c0019773:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019776:	83 ec 0c             	sub    esp,0xc
c0019779:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001977c:	51                   	push   ecx
c001977d:	e8 9a fa ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c0019782:	a1 c4 a1 02 c0       	mov    eax,ds:0xc002a1c4
c0019787:	83 c4 10             	add    esp,0x10
c001978a:	48                   	dec    eax
c001978b:	90                   	nop
c001978c:	a3 c4 a1 02 c0       	mov    ds:0xc002a1c4,eax
c0019791:	85 c0                	test   eax,eax
c0019793:	75 0b                	jne    c00197a0 <Semaphore::release()+0x50>
c0019795:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c001979a:	85 c0                	test   eax,eax
c001979c:	75 1e                	jne    c00197bc <Semaphore::release()+0x6c>
c001979e:	66 90                	xchg   ax,ax
c00197a0:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00197a5:	48                   	dec    eax
c00197a6:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00197ab:	75 03                	jne    c00197b0 <Semaphore::release()+0x60>
c00197ad:	fb                   	sti    
c00197ae:	66 90                	xchg   ax,ax
c00197b0:	83 c4 0c             	add    esp,0xc
c00197b3:	c3                   	ret    
c00197b4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00197b7:	eb d3                	jmp    c001978c <Semaphore::release()+0x3c>
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	c7 05 c0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1c0,0x0
c00197c6:	e8 95 f5 ff ff       	call   c0018d60 <schedule()>
c00197cb:	eb d3                	jmp    c00197a0 <Semaphore::release()+0x50>
c00197cd:	8d 76 00             	lea    esi,[esi+0x0]

c00197d0 <__static_initialization_and_destruction_0(int, int)>:
c00197d0:	83 ec 0c             	sub    esp,0xc
c00197d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00197d8:	0f 85 8e 00 00 00    	jne    c001986c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197de:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00197e6:	0f 85 80 00 00 00    	jne    c001986c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197ec:	83 ec 0c             	sub    esp,0xc
c00197ef:	68 e4 a1 02 c0       	push   0xc002a1e4
c00197f4:	e8 a7 a1 00 00       	call   c00239a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197f9:	83 c4 10             	add    esp,0x10
c00197fc:	83 ec 04             	sub    esp,0x4
c00197ff:	68 0c 7f 02 c0       	push   0xc0027f0c
c0019804:	68 e4 a1 02 c0       	push   0xc002a1e4
c0019809:	68 50 39 02 c0       	push   0xc0023950
c001980e:	e8 c5 36 ff ff       	call   c000ced8 <__cxa_atexit>
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	83 ec 0c             	sub    esp,0xc
c0019819:	68 d8 a1 02 c0       	push   0xc002a1d8
c001981e:	e8 7d a1 00 00       	call   c00239a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	83 ec 04             	sub    esp,0x4
c0019829:	68 0c 7f 02 c0       	push   0xc0027f0c
c001982e:	68 d8 a1 02 c0       	push   0xc002a1d8
c0019833:	68 50 39 02 c0       	push   0xc0023950
c0019838:	e8 9b 36 ff ff       	call   c000ced8 <__cxa_atexit>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	68 cc a1 02 c0       	push   0xc002a1cc
c0019848:	e8 53 a1 00 00       	call   c00239a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001984d:	83 c4 10             	add    esp,0x10
c0019850:	83 ec 04             	sub    esp,0x4
c0019853:	68 0c 7f 02 c0       	push   0xc0027f0c
c0019858:	68 cc a1 02 c0       	push   0xc002a1cc
c001985d:	68 50 39 02 c0       	push   0xc0023950
c0019862:	e8 71 36 ff ff       	call   c000ced8 <__cxa_atexit>
c0019867:	83 c4 10             	add    esp,0x10
c001986a:	66 90                	xchg   ax,ax
c001986c:	90                   	nop
c001986d:	83 c4 0c             	add    esp,0xc
c0019870:	c3                   	ret    
c0019871:	8d 76 00             	lea    esi,[esi+0x0]

c0019874 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019874:	83 ec 0c             	sub    esp,0xc
c0019877:	83 ec 08             	sub    esp,0x8
c001987a:	68 ff ff 00 00       	push   0xffff
c001987f:	6a 01                	push   0x1
c0019881:	e8 4a ff ff ff       	call   c00197d0 <__static_initialization_and_destruction_0(int, int)>
c0019886:	83 c4 10             	add    esp,0x10
c0019889:	83 c4 0c             	add    esp,0xc
c001988c:	c3                   	ret    

c001988d <Vm::inbv(unsigned short)>:
c001988d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019891:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019896:	75 06                	jne    c001989e <Vm::inbv(unsigned short)+0x11>
c0019898:	a0 2c a2 02 c0       	mov    al,ds:0xc002a22c
c001989d:	c3                   	ret    
c001989e:	ec                   	in     al,dx
c001989f:	c3                   	ret    

c00198a0 <Vm::outbv(unsigned short, unsigned char)>:
c00198a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198a8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00198ad:	75 25                	jne    c00198d4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00198af:	8b 0d 2c a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a22c
c00198b5:	8d 51 01             	lea    edx,[ecx+0x1]
c00198b8:	88 81 40 a2 02 c0    	mov    BYTE PTR [ecx-0x3ffd5dc0],al
c00198be:	89 15 2c a2 02 c0    	mov    DWORD PTR ds:0xc002a22c,edx
c00198c4:	83 fa 20             	cmp    edx,0x20
c00198c7:	75 0c                	jne    c00198d5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00198c9:	c7 05 2c a2 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a22c,0x1f
c00198d3:	c3                   	ret    
c00198d4:	ee                   	out    dx,al
c00198d5:	c3                   	ret    

c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>:
c00198d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198e0:	c1 e0 04             	shl    eax,0x4
c00198e3:	01 d0                	add    eax,edx
c00198e5:	c3                   	ret    

c00198e6 <Vm::getSegment(unsigned int)>:
c00198e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ea:	c1 e8 10             	shr    eax,0x10
c00198ed:	c3                   	ret    

c00198ee <Vm::getOffset(unsigned int)>:
c00198ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198f2:	c3                   	ret    

c00198f3 <Vm::mainloop2()>:
c00198f3:	83 ec 18             	sub    esp,0x18
c00198f6:	fa                   	cli    
c00198f7:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00198fd:	6a 02                	push   0x2
c00198ff:	c6 05 25 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a225,0x1
c0019906:	e8 25 f6 ff ff       	call   c0018f30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001990b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019910:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019914:	52                   	push   edx
c0019915:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019919:	52                   	push   edx
c001991a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001991e:	52                   	push   edx
c001991f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019923:	50                   	push   eax
c0019924:	e8 06 69 fe ff       	call   c000022f <goToVM86>
c0019929:	83 c4 2c             	add    esp,0x2c
c001992c:	c3                   	ret    

c001992d <Vm::mainVm8086Loop(void*)>:
c001992d:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019932:	48                   	dec    eax
c0019933:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019938:	75 01                	jne    c001993b <Vm::mainVm8086Loop(void*)+0xe>
c001993a:	fb                   	sti    
c001993b:	eb b6                	jmp    c00198f3 <Vm::mainloop2()>

c001993d <Vm::mainloop3(unsigned long)>:
c001993d:	83 ec 18             	sub    esp,0x18
c0019940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019944:	fa                   	cli    
c0019945:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c001994b:	6a 02                	push   0x2
c001994d:	c6 05 24 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a224,0x1
c0019954:	a3 20 a2 02 c0       	mov    ds:0xc002a220,eax
c0019959:	e8 d2 f5 ff ff       	call   c0018f30 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001995e:	83 c4 1c             	add    esp,0x1c
c0019961:	eb 90                	jmp    c00198f3 <Vm::mainloop2()>

c0019963 <Vm::initialise8086()>:
c0019963:	83 ec 0c             	sub    esp,0xc
c0019966:	68 80 00 00 00       	push   0x80
c001996b:	6a 00                	push   0x0
c001996d:	68 2d 99 01 c0       	push   0xc001992d
c0019972:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0019978:	e8 c7 f1 ff ff       	call   c0018b44 <Process::createThread(void (*)(void*), void*, int)>
c001997d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019984:	a3 28 a2 02 c0       	mov    ds:0xc002a228,eax
c0019989:	68 00 01 00 00       	push   0x100
c001998e:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c0019993:	6a 00                	push   0x0
c0019995:	6a 00                	push   0x0
c0019997:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001999d:	e8 14 2d ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00199a2:	83 c4 2c             	add    esp,0x2c
c00199a5:	c3                   	ret    

c00199a6 <Vm::finish8086()>:
c00199a6:	53                   	push   ebx
c00199a7:	83 ec 08             	sub    esp,0x8
c00199aa:	fa                   	cli    
c00199ab:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00199b1:	80 3d 24 a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a224,0x0
c00199b8:	75 15                	jne    c00199cf <Vm::finish8086()+0x29>
c00199ba:	e8 a1 f3 ff ff       	call   c0018d60 <schedule()>
c00199bf:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00199c4:	48                   	dec    eax
c00199c5:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00199ca:	75 de                	jne    c00199aa <Vm::finish8086()+0x4>
c00199cc:	fb                   	sti    
c00199cd:	eb db                	jmp    c00199aa <Vm::finish8086()+0x4>
c00199cf:	83 ec 0c             	sub    esp,0xc
c00199d2:	8b 1d 20 a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a220
c00199d8:	ff 35 28 a2 02 c0    	push   DWORD PTR ds:0xc002a228
c00199de:	c6 05 24 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a224,0x0
c00199e5:	e8 32 f8 ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c00199ea:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00199ef:	83 c4 10             	add    esp,0x10
c00199f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00199f5:	89 15 c8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c8,edx
c00199fb:	85 d2                	test   edx,edx
c00199fd:	75 01                	jne    c0019a00 <Vm::finish8086()+0x5a>
c00199ff:	fb                   	sti    
c0019a00:	89 d8                	mov    eax,ebx
c0019a02:	83 c4 08             	add    esp,0x8
c0019a05:	5b                   	pop    ebx
c0019a06:	c3                   	ret    

c0019a07 <Vm::getOutput8086(unsigned char*)>:
c0019a07:	57                   	push   edi
c0019a08:	8b 0d 2c a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a22c
c0019a0e:	56                   	push   esi
c0019a0f:	be 40 a2 02 c0       	mov    esi,0xc002a240
c0019a14:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019a18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a1a:	a1 2c a2 02 c0       	mov    eax,ds:0xc002a22c
c0019a1f:	5e                   	pop    esi
c0019a20:	c7 05 2c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a22c,0x0
c0019a2a:	5f                   	pop    edi
c0019a2b:	c3                   	ret    

c0019a2c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019a2c:	55                   	push   ebp
c0019a2d:	57                   	push   edi
c0019a2e:	56                   	push   esi
c0019a2f:	53                   	push   ebx
c0019a30:	83 ec 0c             	sub    esp,0xc
c0019a33:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019a37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019a3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019a3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019a43:	fa                   	cli    
c0019a44:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019a4a:	80 3d 25 a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a225,0x0
c0019a51:	75 15                	jne    c0019a68 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019a53:	e8 08 f3 ff ff       	call   c0018d60 <schedule()>
c0019a58:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019a5d:	48                   	dec    eax
c0019a5e:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019a63:	75 de                	jne    c0019a43 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a65:	fb                   	sti    
c0019a66:	eb db                	jmp    c0019a43 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a68:	a1 28 a2 02 c0       	mov    eax,ds:0xc002a228
c0019a6d:	c7 05 2c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a22c,0x0
c0019a77:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019a7b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019a7f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019a83:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019a87:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019a8b:	0f b7 ff             	movzx  edi,di
c0019a8e:	0f b7 f6             	movzx  esi,si
c0019a91:	50                   	push   eax
c0019a92:	6a 20                	push   0x20
c0019a94:	6a 00                	push   0x0
c0019a96:	68 40 a2 02 c0       	push   0xc002a240
c0019a9b:	e8 dc 6b fe ff       	call   c000067c <memset>
c0019aa0:	5a                   	pop    edx
c0019aa1:	59                   	pop    ecx
c0019aa2:	57                   	push   edi
c0019aa3:	56                   	push   esi
c0019aa4:	e8 2d fe ff ff       	call   c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	89 c7                	mov    edi,eax
c0019aae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ab2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ab8:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019abd:	c6 05 25 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a225,0x0
c0019ac4:	48                   	dec    eax
c0019ac5:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019aca:	75 01                	jne    c0019acd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019acc:	fb                   	sti    
c0019acd:	83 ec 0c             	sub    esp,0xc
c0019ad0:	ff 35 28 a2 02 c0    	push   DWORD PTR ds:0xc002a228
c0019ad6:	e8 41 f7 ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c0019adb:	83 c4 1c             	add    esp,0x1c
c0019ade:	b0 01                	mov    al,0x1
c0019ae0:	5b                   	pop    ebx
c0019ae1:	5e                   	pop    esi
c0019ae2:	5f                   	pop    edi
c0019ae3:	5d                   	pop    ebp
c0019ae4:	c3                   	ret    

c0019ae5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019ae5:	55                   	push   ebp
c0019ae6:	57                   	push   edi
c0019ae7:	56                   	push   esi
c0019ae8:	53                   	push   ebx
c0019ae9:	83 ec 2c             	sub    esp,0x2c
c0019aec:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019af0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019af4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019af8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019afc:	fa                   	cli    
c0019afd:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c0019b03:	0f b6 35 25 a2 02 c0 	movzx  esi,BYTE PTR ds:0xc002a225
c0019b0a:	89 f0                	mov    eax,esi
c0019b0c:	84 c0                	test   al,al
c0019b0e:	75 1d                	jne    c0019b2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019b10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019b14:	e8 47 f2 ff ff       	call   c0018d60 <schedule()>
c0019b19:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019b1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019b22:	48                   	dec    eax
c0019b23:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019b28:	75 d2                	jne    c0019afc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019b2a:	fb                   	sti    
c0019b2b:	eb cf                	jmp    c0019afc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019b2d:	a1 28 a2 02 c0       	mov    eax,ds:0xc002a228
c0019b32:	c7 05 2c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a22c,0x0
c0019b3c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019b40:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019b44:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019b48:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019b4c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019b50:	50                   	push   eax
c0019b51:	6a 20                	push   0x20
c0019b53:	6a 00                	push   0x0
c0019b55:	68 40 a2 02 c0       	push   0xc002a240
c0019b5a:	e8 1d 6b fe ff       	call   c000067c <memset>
c0019b5f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b66:	e8 e8 01 ff ff       	call   c0009d53 <malloc>
c0019b6b:	83 c4 0c             	add    esp,0xc
c0019b6e:	89 c3                	mov    ebx,eax
c0019b70:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c0019b76:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b7a:	50                   	push   eax
c0019b7b:	e8 2a 3a ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0019b80:	83 c4 10             	add    esp,0x10
c0019b83:	85 db                	test   ebx,ebx
c0019b85:	75 0a                	jne    c0019b91 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019b87:	83 ec 0c             	sub    esp,0xc
c0019b8a:	68 e0 6e 02 c0       	push   0xc0026ee0
c0019b8f:	eb 3e                	jmp    c0019bcf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b91:	50                   	push   eax
c0019b92:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019b96:	50                   	push   eax
c0019b97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b9b:	50                   	push   eax
c0019b9c:	53                   	push   ebx
c0019b9d:	e8 8e 3d ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c0019ba2:	83 c4 10             	add    esp,0x10
c0019ba5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019baa:	74 0a                	je     c0019bb6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019bac:	83 ec 0c             	sub    esp,0xc
c0019baf:	68 f4 6e 02 c0       	push   0xc0026ef4
c0019bb4:	eb 19                	jmp    c0019bcf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019bb6:	51                   	push   ecx
c0019bb7:	51                   	push   ecx
c0019bb8:	6a 01                	push   0x1
c0019bba:	53                   	push   ebx
c0019bbb:	e8 c4 3a ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0019bc0:	83 c4 10             	add    esp,0x10
c0019bc3:	85 c0                	test   eax,eax
c0019bc5:	74 24                	je     c0019beb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019bc7:	83 ec 0c             	sub    esp,0xc
c0019bca:	68 0d 6f 02 c0       	push   0xc0026f0d
c0019bcf:	e8 2d b4 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0019bd4:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	48                   	dec    eax
c0019bdd:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019be2:	85 c0                	test   eax,eax
c0019be4:	75 01                	jne    c0019be7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019be6:	fb                   	sti    
c0019be7:	31 f6                	xor    esi,esi
c0019be9:	eb 58                	jmp    c0019c43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019beb:	0f b7 ed             	movzx  ebp,bp
c0019bee:	50                   	push   eax
c0019bef:	0f b7 ff             	movzx  edi,di
c0019bf2:	50                   	push   eax
c0019bf3:	55                   	push   ebp
c0019bf4:	57                   	push   edi
c0019bf5:	e8 dc fc ff ff       	call   c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019bfa:	5a                   	pop    edx
c0019bfb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019bfd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c01:	51                   	push   ecx
c0019c02:	50                   	push   eax
c0019c03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c07:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c0b:	53                   	push   ebx
c0019c0c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019c0f:	83 c4 14             	add    esp,0x14
c0019c12:	53                   	push   ebx
c0019c13:	e8 ca 3a ff ff       	call   c000d6e2 <File::close()>
c0019c18:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c0019c1d:	83 c4 10             	add    esp,0x10
c0019c20:	48                   	dec    eax
c0019c21:	c6 05 25 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a225,0x0
c0019c28:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c0019c2d:	85 c0                	test   eax,eax
c0019c2f:	75 01                	jne    c0019c32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019c31:	fb                   	sti    
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	ff 35 28 a2 02 c0    	push   DWORD PTR ds:0xc002a228
c0019c3b:	e8 dc f5 ff ff       	call   c001921c <unblockTask(ThreadControlBlock*)>
c0019c40:	83 c4 10             	add    esp,0x10
c0019c43:	83 c4 2c             	add    esp,0x2c
c0019c46:	89 f0                	mov    eax,esi
c0019c48:	5b                   	pop    ebx
c0019c49:	5e                   	pop    esi
c0019c4a:	5f                   	pop    edi
c0019c4b:	5d                   	pop    ebp
c0019c4c:	c3                   	ret    

c0019c4d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019c4d:	57                   	push   edi
c0019c4e:	56                   	push   esi
c0019c4f:	53                   	push   ebx
c0019c50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c58:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c5c:	83 e8 06             	sub    eax,0x6
c0019c5f:	0f b7 c0             	movzx  eax,ax
c0019c62:	50                   	push   eax
c0019c63:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019c68:	50                   	push   eax
c0019c69:	e8 68 fc ff ff       	call   c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019c6e:	5a                   	pop    edx
c0019c6f:	5e                   	pop    esi
c0019c70:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019c73:	8d 56 fa             	lea    edx,[esi-0x6]
c0019c76:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019c7c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019c7f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019c82:	83 c2 02             	add    edx,0x2
c0019c85:	66 89 10             	mov    WORD PTR [eax],dx
c0019c88:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019c8b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019c8f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019c92:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019c96:	89 d6                	mov    esi,edx
c0019c98:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019c9e:	66 81 e6 ff fd       	and    si,0xfdff
c0019ca3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019ca7:	74 07                	je     c0019cb0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019ca9:	89 d6                	mov    esi,edx
c0019cab:	66 81 ce 00 02       	or     si,0x200
c0019cb0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019cb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cb9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019cbd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019cc5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019cc8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019cd0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019cd3:	5b                   	pop    ebx
c0019cd4:	5e                   	pop    esi
c0019cd5:	5f                   	pop    edi
c0019cd6:	c3                   	ret    

c0019cd7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019cd7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cdc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ce1:	c1 e0 04             	shl    eax,0x4
c0019ce4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019ce7:	c3                   	ret    

c0019ce8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019ce8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ced:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cf2:	c1 e0 04             	shl    eax,0x4
c0019cf5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019cf9:	c3                   	ret    

c0019cfa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019cfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d04:	c1 e0 04             	shl    eax,0x4
c0019d07:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019d0a:	c3                   	ret    

c0019d0b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019d0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d10:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d15:	c1 e0 04             	shl    eax,0x4
c0019d18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d1c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019d1f:	c3                   	ret    

c0019d20 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019d20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d2a:	c1 e0 04             	shl    eax,0x4
c0019d2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d31:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019d35:	c3                   	ret    

c0019d36 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019d36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d40:	c1 e0 04             	shl    eax,0x4
c0019d43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d47:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019d4a:	c3                   	ret    

c0019d4b <Vm::faultHandler(regs*)>:
c0019d4b:	55                   	push   ebp
c0019d4c:	57                   	push   edi
c0019d4d:	56                   	push   esi
c0019d4e:	53                   	push   ebx
c0019d4f:	83 ec 1c             	sub    esp,0x1c
c0019d52:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d56:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019d59:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019d5d:	0f b7 f8             	movzx  edi,ax
c0019d60:	52                   	push   edx
c0019d61:	0f b7 c0             	movzx  eax,ax
c0019d64:	50                   	push   eax
c0019d65:	e8 6c fb ff ff       	call   c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019d6a:	5a                   	pop    edx
c0019d6b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019d6e:	59                   	pop    ecx
c0019d6f:	89 c1                	mov    ecx,eax
c0019d71:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019d74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d81:	0f b7 c5             	movzx  eax,bp
c0019d84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019d8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d90:	e8 41 fb ff ff       	call   c00198d6 <Vm::realToLinear(unsigned short, unsigned short)>
c0019d95:	5e                   	pop    esi
c0019d96:	be 06 00 00 00       	mov    esi,0x6
c0019d9b:	5a                   	pop    edx
c0019d9c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019da1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019da6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019da9:	80 fa 9d             	cmp    dl,0x9d
c0019dac:	0f 84 2c 02 00 00    	je     c0019fde <Vm::faultHandler(regs*)+0x293>
c0019db2:	0f 87 91 00 00 00    	ja     c0019e49 <Vm::faultHandler(regs*)+0xfe>
c0019db8:	80 fa 66             	cmp    dl,0x66
c0019dbb:	0f 84 98 01 00 00    	je     c0019f59 <Vm::faultHandler(regs*)+0x20e>
c0019dc1:	77 47                	ja     c0019e0a <Vm::faultHandler(regs*)+0xbf>
c0019dc3:	80 fa 36             	cmp    dl,0x36
c0019dc6:	0f 84 80 01 00 00    	je     c0019f4c <Vm::faultHandler(regs*)+0x201>
c0019dcc:	77 1a                	ja     c0019de8 <Vm::faultHandler(regs*)+0x9d>
c0019dce:	80 fa 26             	cmp    dl,0x26
c0019dd1:	0f 84 4e 01 00 00    	je     c0019f25 <Vm::faultHandler(regs*)+0x1da>
c0019dd7:	80 fa 2e             	cmp    dl,0x2e
c0019dda:	0f 85 e2 05 00 00    	jne    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019de0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019de3:	31 f6                	xor    esi,esi
c0019de5:	41                   	inc    ecx
c0019de6:	eb be                	jmp    c0019da6 <Vm::faultHandler(regs*)+0x5b>
c0019de8:	80 fa 64             	cmp    dl,0x64
c0019deb:	0f 84 41 01 00 00    	je     c0019f32 <Vm::faultHandler(regs*)+0x1e7>
c0019df1:	0f 87 48 01 00 00    	ja     c0019f3f <Vm::faultHandler(regs*)+0x1f4>
c0019df7:	80 fa 3e             	cmp    dl,0x3e
c0019dfa:	0f 85 c2 05 00 00    	jne    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019e00:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e03:	be 01 00 00 00       	mov    esi,0x1
c0019e08:	eb db                	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019e0a:	80 fa 6d             	cmp    dl,0x6d
c0019e0d:	0f 84 ec 02 00 00    	je     c001a0ff <Vm::faultHandler(regs*)+0x3b4>
c0019e13:	77 17                	ja     c0019e2c <Vm::faultHandler(regs*)+0xe1>
c0019e15:	80 fa 67             	cmp    dl,0x67
c0019e18:	0f 84 48 01 00 00    	je     c0019f66 <Vm::faultHandler(regs*)+0x21b>
c0019e1e:	80 fa 6c             	cmp    dl,0x6c
c0019e21:	0f 84 69 02 00 00    	je     c001a090 <Vm::faultHandler(regs*)+0x345>
c0019e27:	e9 96 05 00 00       	jmp    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019e2c:	80 fa 6f             	cmp    dl,0x6f
c0019e2f:	0f 84 f4 03 00 00    	je     c001a229 <Vm::faultHandler(regs*)+0x4de>
c0019e35:	0f 82 59 03 00 00    	jb     c001a194 <Vm::faultHandler(regs*)+0x449>
c0019e3b:	80 fa 9c             	cmp    dl,0x9c
c0019e3e:	0f 84 2f 01 00 00    	je     c0019f73 <Vm::faultHandler(regs*)+0x228>
c0019e44:	e9 79 05 00 00       	jmp    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019e49:	80 fa ec             	cmp    dl,0xec
c0019e4c:	0f 84 14 05 00 00    	je     c001a366 <Vm::faultHandler(regs*)+0x61b>
c0019e52:	77 7b                	ja     c0019ecf <Vm::faultHandler(regs*)+0x184>
c0019e54:	80 fa e4             	cmp    dl,0xe4
c0019e57:	0f 84 93 04 00 00    	je     c001a2f0 <Vm::faultHandler(regs*)+0x5a5>
c0019e5d:	77 53                	ja     c0019eb2 <Vm::faultHandler(regs*)+0x167>
c0019e5f:	80 fa cd             	cmp    dl,0xcd
c0019e62:	0f 84 d9 01 00 00    	je     c001a041 <Vm::faultHandler(regs*)+0x2f6>
c0019e68:	80 fa cf             	cmp    dl,0xcf
c0019e6b:	0f 85 51 05 00 00    	jne    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019e71:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019e74:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019e77:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019e7b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019e7e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019e82:	81 ca 00 02 02 00    	or     edx,0x20200
c0019e88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019e8b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019e8f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019e95:	66 c1 e8 09          	shr    ax,0x9
c0019e99:	83 e0 01             	and    eax,0x1
c0019e9c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019e9f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ea2:	83 c0 06             	add    eax,0x6
c0019ea5:	25 ff ff 00 00       	and    eax,0xffff
c0019eaa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019ead:	e9 0c 05 00 00       	jmp    c001a3be <Vm::faultHandler(regs*)+0x673>
c0019eb2:	80 fa e6             	cmp    dl,0xe6
c0019eb5:	0f 84 7f 04 00 00    	je     c001a33a <Vm::faultHandler(regs*)+0x5ef>
c0019ebb:	0f 82 4b 04 00 00    	jb     c001a30c <Vm::faultHandler(regs*)+0x5c1>
c0019ec1:	80 fa e7             	cmp    dl,0xe7
c0019ec4:	0f 84 87 04 00 00    	je     c001a351 <Vm::faultHandler(regs*)+0x606>
c0019eca:	e9 f3 04 00 00       	jmp    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019ecf:	80 fa ef             	cmp    dl,0xef
c0019ed2:	0f 84 d1 04 00 00    	je     c001a3a9 <Vm::faultHandler(regs*)+0x65e>
c0019ed8:	77 28                	ja     c0019f02 <Vm::faultHandler(regs*)+0x1b7>
c0019eda:	80 fa ed             	cmp    dl,0xed
c0019edd:	0f 84 9f 04 00 00    	je     c001a382 <Vm::faultHandler(regs*)+0x637>
c0019ee3:	80 fa ee             	cmp    dl,0xee
c0019ee6:	0f 85 d6 04 00 00    	jne    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019eec:	50                   	push   eax
c0019eed:	50                   	push   eax
c0019eee:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019ef2:	50                   	push   eax
c0019ef3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019ef7:	50                   	push   eax
c0019ef8:	e8 a3 f9 ff ff       	call   c00198a0 <Vm::outbv(unsigned short, unsigned char)>
c0019efd:	e9 9f 04 00 00       	jmp    c001a3a1 <Vm::faultHandler(regs*)+0x656>
c0019f02:	80 fa fa             	cmp    dl,0xfa
c0019f05:	0f 84 69 01 00 00    	je     c001a074 <Vm::faultHandler(regs*)+0x329>
c0019f0b:	80 fa fb             	cmp    dl,0xfb
c0019f0e:	0f 84 6e 01 00 00    	je     c001a082 <Vm::faultHandler(regs*)+0x337>
c0019f14:	80 fa f3             	cmp    dl,0xf3
c0019f17:	0f 85 a5 04 00 00    	jne    c001a3c2 <Vm::faultHandler(regs*)+0x677>
c0019f1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f20:	e9 c0 fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f28:	be 02 00 00 00       	mov    esi,0x2
c0019f2d:	e9 b3 fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f35:	be 03 00 00 00       	mov    esi,0x3
c0019f3a:	e9 a6 fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f42:	be 04 00 00 00       	mov    esi,0x4
c0019f47:	e9 99 fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f4c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f4f:	be 05 00 00 00       	mov    esi,0x5
c0019f54:	e9 8c fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f59:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f5c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019f61:	e9 7f fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f66:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f69:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019f6e:	e9 72 fe ff ff       	jmp    c0019de5 <Vm::faultHandler(regs*)+0x9a>
c0019f73:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019f76:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019f7a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019f7f:	74 30                	je     c0019fb1 <Vm::faultHandler(regs*)+0x266>
c0019f81:	83 e9 04             	sub    ecx,0x4
c0019f84:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019f8a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f90:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f93:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f9c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019fa0:	0f 84 15 04 00 00    	je     c001a3bb <Vm::faultHandler(regs*)+0x670>
c0019fa6:	80 ce 02             	or     dh,0x2
c0019fa9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019fac:	e9 0a 04 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c0019fb1:	83 e9 02             	sub    ecx,0x2
c0019fb4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019fba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019fbd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019fc1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019fc7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019fcb:	74 05                	je     c0019fd2 <Vm::faultHandler(regs*)+0x287>
c0019fcd:	80 ce 02             	or     dh,0x2
c0019fd0:	eb 03                	jmp    c0019fd5 <Vm::faultHandler(regs*)+0x28a>
c0019fd2:	80 e6 fd             	and    dh,0xfd
c0019fd5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019fd9:	e9 dd 03 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c0019fde:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019fe3:	74 2a                	je     c001a00f <Vm::faultHandler(regs*)+0x2c4>
c0019fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fe7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019fed:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ff3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ff8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ffe:	c1 e8 09             	shr    eax,0x9
c001a001:	83 e0 01             	and    eax,0x1
c001a004:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a007:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a00a:	83 c0 04             	add    eax,0x4
c001a00d:	eb 25                	jmp    c001a034 <Vm::faultHandler(regs*)+0x2e9>
c001a00f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a012:	81 ca 00 02 02 00    	or     edx,0x20200
c001a018:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a01b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a01e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a024:	66 c1 e8 09          	shr    ax,0x9
c001a028:	83 e0 01             	and    eax,0x1
c001a02b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a02e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a031:	83 c0 02             	add    eax,0x2
c001a034:	25 ff ff 00 00       	and    eax,0xffff
c001a039:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a03c:	e9 7a 03 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a041:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a045:	3c ee                	cmp    al,0xee
c001a047:	75 10                	jne    c001a059 <Vm::faultHandler(regs*)+0x30e>
c001a049:	83 ec 0c             	sub    esp,0xc
c001a04c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a04f:	e8 e9 f8 ff ff       	call   c001993d <Vm::mainloop3(unsigned long)>
c001a054:	e9 4b 03 00 00       	jmp    c001a3a4 <Vm::faultHandler(regs*)+0x659>
c001a059:	83 ec 0c             	sub    esp,0xc
c001a05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a064:	51                   	push   ecx
c001a065:	50                   	push   eax
c001a066:	53                   	push   ebx
c001a067:	e8 e1 fb ff ff       	call   c0019c4d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a06c:	83 c4 20             	add    esp,0x20
c001a06f:	e9 4a 03 00 00       	jmp    c001a3be <Vm::faultHandler(regs*)+0x673>
c001a074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a079:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a07d:	e9 39 03 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a087:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a08b:	e9 2b 03 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a090:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a093:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a098:	74 2b                	je     c001a0c5 <Vm::faultHandler(regs*)+0x37a>
c001a09a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a0a1:	76 22                	jbe    c001a0c5 <Vm::faultHandler(regs*)+0x37a>
c001a0a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a0a7:	50                   	push   eax
c001a0a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a0ac:	50                   	push   eax
c001a0ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a0b1:	50                   	push   eax
c001a0b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a0b6:	50                   	push   eax
c001a0b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a0bb:	50                   	push   eax
c001a0bc:	6a 6c                	push   0x6c
c001a0be:	6a 6c                	push   0x6c
c001a0c0:	e9 b9 01 00 00       	jmp    c001a27e <Vm::faultHandler(regs*)+0x533>
c001a0c5:	83 ec 0c             	sub    esp,0xc
c001a0c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a0cc:	0f b7 f6             	movzx  esi,si
c001a0cf:	50                   	push   eax
c001a0d0:	e8 b8 f7 ff ff       	call   c001988d <Vm::inbv(unsigned short)>
c001a0d5:	83 c4 0c             	add    esp,0xc
c001a0d8:	0f b6 c0             	movzx  eax,al
c001a0db:	50                   	push   eax
c001a0dc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a0e0:	50                   	push   eax
c001a0e1:	56                   	push   esi
c001a0e2:	e8 24 fc ff ff       	call   c0019d0b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a0e7:	83 c4 10             	add    esp,0x10
c001a0ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0ed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0f1:	74 03                	je     c001a0f6 <Vm::faultHandler(regs*)+0x3ab>
c001a0f3:	48                   	dec    eax
c001a0f4:	eb 01                	jmp    c001a0f7 <Vm::faultHandler(regs*)+0x3ac>
c001a0f6:	40                   	inc    eax
c001a0f7:	0f b7 c0             	movzx  eax,ax
c001a0fa:	e9 8d 00 00 00       	jmp    c001a18c <Vm::faultHandler(regs*)+0x441>
c001a0ff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a102:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a105:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a10a:	74 29                	je     c001a135 <Vm::faultHandler(regs*)+0x3ea>
c001a10c:	3d ff ff 00 00       	cmp    eax,0xffff
c001a111:	76 22                	jbe    c001a135 <Vm::faultHandler(regs*)+0x3ea>
c001a113:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a117:	50                   	push   eax
c001a118:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a11c:	50                   	push   eax
c001a11d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a121:	50                   	push   eax
c001a122:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a126:	50                   	push   eax
c001a127:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a12b:	50                   	push   eax
c001a12c:	6a 6d                	push   0x6d
c001a12e:	6a 6d                	push   0x6d
c001a130:	e9 49 01 00 00       	jmp    c001a27e <Vm::faultHandler(regs*)+0x533>
c001a135:	0f b7 c8             	movzx  ecx,ax
c001a138:	0f b7 f6             	movzx  esi,si
c001a13b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a13e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a143:	74 20                	je     c001a165 <Vm::faultHandler(regs*)+0x41a>
c001a145:	ed                   	in     eax,dx
c001a146:	55                   	push   ebp
c001a147:	50                   	push   eax
c001a148:	51                   	push   ecx
c001a149:	56                   	push   esi
c001a14a:	e8 e7 fb ff ff       	call   c0019d36 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a14f:	83 c4 10             	add    esp,0x10
c001a152:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a155:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a159:	74 05                	je     c001a160 <Vm::faultHandler(regs*)+0x415>
c001a15b:	83 e8 04             	sub    eax,0x4
c001a15e:	eb 27                	jmp    c001a187 <Vm::faultHandler(regs*)+0x43c>
c001a160:	83 c0 04             	add    eax,0x4
c001a163:	eb 22                	jmp    c001a187 <Vm::faultHandler(regs*)+0x43c>
c001a165:	66 ed                	in     ax,dx
c001a167:	0f b7 c0             	movzx  eax,ax
c001a16a:	57                   	push   edi
c001a16b:	50                   	push   eax
c001a16c:	51                   	push   ecx
c001a16d:	56                   	push   esi
c001a16e:	e8 ad fb ff ff       	call   c0019d20 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a179:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a17d:	74 05                	je     c001a184 <Vm::faultHandler(regs*)+0x439>
c001a17f:	83 e8 02             	sub    eax,0x2
c001a182:	eb 03                	jmp    c001a187 <Vm::faultHandler(regs*)+0x43c>
c001a184:	83 c0 02             	add    eax,0x2
c001a187:	25 ff ff 00 00       	and    eax,0xffff
c001a18c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a18f:	e9 27 02 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a194:	8d 46 ff             	lea    eax,[esi-0x1]
c001a197:	3c 05                	cmp    al,0x5
c001a199:	77 24                	ja     c001a1bf <Vm::faultHandler(regs*)+0x474>
c001a19b:	0f b6 c0             	movzx  eax,al
c001a19e:	ff 24 85 80 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9080]
c001a1a5:	0f b7 fd             	movzx  edi,bp
c001a1a8:	eb 15                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x474>
c001a1aa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a1ae:	eb 0f                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x474>
c001a1b0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a1b4:	eb 09                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x474>
c001a1b6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a1ba:	eb 03                	jmp    c001a1bf <Vm::faultHandler(regs*)+0x474>
c001a1bc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a1bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a1c2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a1c7:	74 29                	je     c001a1f2 <Vm::faultHandler(regs*)+0x4a7>
c001a1c9:	3d ff ff 00 00       	cmp    eax,0xffff
c001a1ce:	76 22                	jbe    c001a1f2 <Vm::faultHandler(regs*)+0x4a7>
c001a1d0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a1d4:	50                   	push   eax
c001a1d5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a1d9:	50                   	push   eax
c001a1da:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a1de:	50                   	push   eax
c001a1df:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a1e3:	50                   	push   eax
c001a1e4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1e8:	50                   	push   eax
c001a1e9:	6a 6e                	push   0x6e
c001a1eb:	6a 6e                	push   0x6e
c001a1ed:	e9 8c 00 00 00       	jmp    c001a27e <Vm::faultHandler(regs*)+0x533>
c001a1f2:	0f b7 c0             	movzx  eax,ax
c001a1f5:	52                   	push   edx
c001a1f6:	52                   	push   edx
c001a1f7:	50                   	push   eax
c001a1f8:	57                   	push   edi
c001a1f9:	e8 d9 fa ff ff       	call   c0019cd7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a1fe:	59                   	pop    ecx
c001a1ff:	0f b6 c0             	movzx  eax,al
c001a202:	5e                   	pop    esi
c001a203:	50                   	push   eax
c001a204:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a208:	50                   	push   eax
c001a209:	e8 92 f6 ff ff       	call   c00198a0 <Vm::outbv(unsigned short, unsigned char)>
c001a20e:	83 c4 10             	add    esp,0x10
c001a211:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a214:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a218:	74 03                	je     c001a21d <Vm::faultHandler(regs*)+0x4d2>
c001a21a:	48                   	dec    eax
c001a21b:	eb 01                	jmp    c001a21e <Vm::faultHandler(regs*)+0x4d3>
c001a21d:	40                   	inc    eax
c001a21e:	0f b7 c0             	movzx  eax,ax
c001a221:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a224:	e9 92 01 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a229:	8d 46 ff             	lea    eax,[esi-0x1]
c001a22c:	3c 05                	cmp    al,0x5
c001a22e:	77 1f                	ja     c001a24f <Vm::faultHandler(regs*)+0x504>
c001a230:	0f b6 c0             	movzx  eax,al
c001a233:	ff 24 85 98 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9068]
c001a23a:	89 ef                	mov    edi,ebp
c001a23c:	eb 11                	jmp    c001a24f <Vm::faultHandler(regs*)+0x504>
c001a23e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a241:	eb 0c                	jmp    c001a24f <Vm::faultHandler(regs*)+0x504>
c001a243:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a246:	eb 07                	jmp    c001a24f <Vm::faultHandler(regs*)+0x504>
c001a248:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a24b:	eb 02                	jmp    c001a24f <Vm::faultHandler(regs*)+0x504>
c001a24d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a24f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a252:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a257:	74 37                	je     c001a290 <Vm::faultHandler(regs*)+0x545>
c001a259:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a25f:	76 2f                	jbe    c001a290 <Vm::faultHandler(regs*)+0x545>
c001a261:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a265:	50                   	push   eax
c001a266:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a26a:	50                   	push   eax
c001a26b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a26f:	50                   	push   eax
c001a270:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a274:	50                   	push   eax
c001a275:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a279:	50                   	push   eax
c001a27a:	6a 6f                	push   0x6f
c001a27c:	6a 6f                	push   0x6f
c001a27e:	68 26 6f 02 c0       	push   0xc0026f26
c001a283:	e8 b7 2d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001a288:	83 c4 20             	add    esp,0x20
c001a28b:	e9 86 01 00 00       	jmp    c001a416 <Vm::faultHandler(regs*)+0x6cb>
c001a290:	0f b7 d7             	movzx  edx,di
c001a293:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a296:	0f b7 c6             	movzx  eax,si
c001a299:	81 e1 00 04 00 00    	and    ecx,0x400
c001a29f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a2a2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2a7:	74 1d                	je     c001a2c6 <Vm::faultHandler(regs*)+0x57b>
c001a2a9:	55                   	push   ebp
c001a2aa:	55                   	push   ebp
c001a2ab:	50                   	push   eax
c001a2ac:	52                   	push   edx
c001a2ad:	e8 48 fa ff ff       	call   c0019cfa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	89 fa                	mov    edx,edi
c001a2b7:	ef                   	out    dx,eax
c001a2b8:	85 c9                	test   ecx,ecx
c001a2ba:	74 05                	je     c001a2c1 <Vm::faultHandler(regs*)+0x576>
c001a2bc:	83 ee 04             	sub    esi,0x4
c001a2bf:	eb 21                	jmp    c001a2e2 <Vm::faultHandler(regs*)+0x597>
c001a2c1:	83 c6 04             	add    esi,0x4
c001a2c4:	eb 1c                	jmp    c001a2e2 <Vm::faultHandler(regs*)+0x597>
c001a2c6:	55                   	push   ebp
c001a2c7:	55                   	push   ebp
c001a2c8:	50                   	push   eax
c001a2c9:	52                   	push   edx
c001a2ca:	e8 19 fa ff ff       	call   c0019ce8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a2cf:	83 c4 10             	add    esp,0x10
c001a2d2:	89 fa                	mov    edx,edi
c001a2d4:	66 ef                	out    dx,ax
c001a2d6:	85 c9                	test   ecx,ecx
c001a2d8:	74 05                	je     c001a2df <Vm::faultHandler(regs*)+0x594>
c001a2da:	83 ee 02             	sub    esi,0x2
c001a2dd:	eb 03                	jmp    c001a2e2 <Vm::faultHandler(regs*)+0x597>
c001a2df:	83 c6 02             	add    esi,0x2
c001a2e2:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a2e8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a2eb:	e9 cb 00 00 00       	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a2f0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2fe:	50                   	push   eax
c001a2ff:	e8 89 f5 ff ff       	call   c001988d <Vm::inbv(unsigned short)>
c001a304:	0f b6 c0             	movzx  eax,al
c001a307:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a30a:	eb 3f                	jmp    c001a34b <Vm::faultHandler(regs*)+0x600>
c001a30c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a311:	74 07                	je     c001a31a <Vm::faultHandler(regs*)+0x5cf>
c001a313:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a317:	ed                   	in     eax,dx
c001a318:	eb 14                	jmp    c001a32e <Vm::faultHandler(regs*)+0x5e3>
c001a31a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a31d:	66 31 f6             	xor    si,si
c001a320:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a323:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a327:	66 ed                	in     ax,dx
c001a329:	0f b7 c0             	movzx  eax,ax
c001a32c:	09 f0                	or     eax,esi
c001a32e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a331:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a335:	e9 84 00 00 00       	jmp    c001a3be <Vm::faultHandler(regs*)+0x673>
c001a33a:	52                   	push   edx
c001a33b:	52                   	push   edx
c001a33c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a340:	50                   	push   eax
c001a341:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a345:	50                   	push   eax
c001a346:	e8 55 f5 ff ff       	call   c00198a0 <Vm::outbv(unsigned short, unsigned char)>
c001a34b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a34f:	eb 53                	jmp    c001a3a4 <Vm::faultHandler(regs*)+0x659>
c001a351:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a354:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a358:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a35d:	74 03                	je     c001a362 <Vm::faultHandler(regs*)+0x617>
c001a35f:	ef                   	out    dx,eax
c001a360:	eb cf                	jmp    c001a331 <Vm::faultHandler(regs*)+0x5e6>
c001a362:	66 ef                	out    dx,ax
c001a364:	eb cb                	jmp    c001a331 <Vm::faultHandler(regs*)+0x5e6>
c001a366:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a36d:	83 ec 0c             	sub    esp,0xc
c001a370:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a374:	50                   	push   eax
c001a375:	e8 13 f5 ff ff       	call   c001988d <Vm::inbv(unsigned short)>
c001a37a:	0f b6 c0             	movzx  eax,al
c001a37d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a380:	eb 1f                	jmp    c001a3a1 <Vm::faultHandler(regs*)+0x656>
c001a382:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a385:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a38a:	74 03                	je     c001a38f <Vm::faultHandler(regs*)+0x644>
c001a38c:	ed                   	in     eax,dx
c001a38d:	eb 0d                	jmp    c001a39c <Vm::faultHandler(regs*)+0x651>
c001a38f:	66 ed                	in     ax,dx
c001a391:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a394:	0f b7 c0             	movzx  eax,ax
c001a397:	66 31 d2             	xor    dx,dx
c001a39a:	09 d0                	or     eax,edx
c001a39c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a39f:	eb 1a                	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a3a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	eb 15                	jmp    c001a3be <Vm::faultHandler(regs*)+0x673>
c001a3a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a3ac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a3af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a3b4:	74 03                	je     c001a3b9 <Vm::faultHandler(regs*)+0x66e>
c001a3b6:	ef                   	out    dx,eax
c001a3b7:	eb 02                	jmp    c001a3bb <Vm::faultHandler(regs*)+0x670>
c001a3b9:	66 ef                	out    dx,ax
c001a3bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a3be:	b0 01                	mov    al,0x1
c001a3c0:	eb 56                	jmp    c001a418 <Vm::faultHandler(regs*)+0x6cd>
c001a3c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a3c6:	50                   	push   eax
c001a3c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a3cb:	50                   	push   eax
c001a3cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a3d0:	50                   	push   eax
c001a3d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a3d5:	50                   	push   eax
c001a3d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a3da:	50                   	push   eax
c001a3db:	52                   	push   edx
c001a3dc:	52                   	push   edx
c001a3dd:	68 53 6f 02 c0       	push   0xc0026f53
c001a3e2:	e8 58 2c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001a3e7:	83 c4 20             	add    esp,0x20
c001a3ea:	83 ec 0c             	sub    esp,0xc
c001a3ed:	6a 60                	push   0x60
c001a3ef:	e8 99 f4 ff ff       	call   c001988d <Vm::inbv(unsigned short)>
c001a3f4:	83 c4 10             	add    esp,0x10
c001a3f7:	3c 1c                	cmp    al,0x1c
c001a3f9:	74 04                	je     c001a3ff <Vm::faultHandler(regs*)+0x6b4>
c001a3fb:	3c 5a                	cmp    al,0x5a
c001a3fd:	75 eb                	jne    c001a3ea <Vm::faultHandler(regs*)+0x69f>
c001a3ff:	3c 5a                	cmp    al,0x5a
c001a401:	74 04                	je     c001a407 <Vm::faultHandler(regs*)+0x6bc>
c001a403:	3c 1c                	cmp    al,0x1c
c001a405:	75 0f                	jne    c001a416 <Vm::faultHandler(regs*)+0x6cb>
c001a407:	83 ec 0c             	sub    esp,0xc
c001a40a:	6a 60                	push   0x60
c001a40c:	e8 7c f4 ff ff       	call   c001988d <Vm::inbv(unsigned short)>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	eb e9                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x6b4>
c001a416:	31 c0                	xor    eax,eax
c001a418:	83 c4 1c             	add    esp,0x1c
c001a41b:	5b                   	pop    ebx
c001a41c:	5e                   	pop    esi
c001a41d:	5f                   	pop    edi
c001a41e:	5d                   	pop    ebp
c001a41f:	c3                   	ret    

c001a420 <Vm::fpuInternalTo32(unsigned long long)>:
c001a420:	57                   	push   edi
c001a421:	56                   	push   esi
c001a422:	53                   	push   ebx
c001a423:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42b:	89 d6                	mov    esi,edx
c001a42d:	89 d7                	mov    edi,edx
c001a42f:	89 c1                	mov    ecx,eax
c001a431:	c1 ef 14             	shr    edi,0x14
c001a434:	89 d3                	mov    ebx,edx
c001a436:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a43c:	31 d2                	xor    edx,edx
c001a43e:	89 f8                	mov    eax,edi
c001a440:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a446:	bf ff 00 00 00       	mov    edi,0xff
c001a44b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a450:	83 d2 ff             	adc    edx,0xffffffff
c001a453:	39 c7                	cmp    edi,eax
c001a455:	bf 00 00 00 00       	mov    edi,0x0
c001a45a:	19 d7                	sbb    edi,edx
c001a45c:	72 16                	jb     c001a474 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a45e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a462:	c1 e0 17             	shl    eax,0x17
c001a465:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a46b:	09 f1                	or     ecx,esi
c001a46d:	09 c1                	or     ecx,eax
c001a46f:	89 cf                	mov    edi,ecx
c001a471:	eb 05                	jmp    c001a478 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a473:	90                   	nop
c001a474:	31 ff                	xor    edi,edi
c001a476:	66 90                	xchg   ax,ax
c001a478:	89 f8                	mov    eax,edi
c001a47a:	5b                   	pop    ebx
c001a47b:	5e                   	pop    esi
c001a47c:	5f                   	pop    edi
c001a47d:	c3                   	ret    

c001a47e <Vm::fpuInternalTo64(unsigned long long)>:
c001a47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a482:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a486:	c3                   	ret    

c001a487 <Vm::fpu32ToInternal(unsigned int)>:
c001a487:	57                   	push   edi
c001a488:	31 ff                	xor    edi,edi
c001a48a:	56                   	push   esi
c001a48b:	53                   	push   ebx
c001a48c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a490:	89 cb                	mov    ebx,ecx
c001a492:	89 ce                	mov    esi,ecx
c001a494:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a49a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a4a0:	c1 e9 17             	shr    ecx,0x17
c001a4a3:	89 f0                	mov    eax,esi
c001a4a5:	0f b6 d1             	movzx  edx,cl
c001a4a8:	81 c2 80 03 00 00    	add    edx,0x380
c001a4ae:	89 d1                	mov    ecx,edx
c001a4b0:	89 fa                	mov    edx,edi
c001a4b2:	c1 e1 14             	shl    ecx,0x14
c001a4b5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a4b9:	c1 e0 1d             	shl    eax,0x1d
c001a4bc:	89 d7                	mov    edi,edx
c001a4be:	89 c6                	mov    esi,eax
c001a4c0:	89 ca                	mov    edx,ecx
c001a4c2:	89 f0                	mov    eax,esi
c001a4c4:	09 fa                	or     edx,edi
c001a4c6:	09 da                	or     edx,ebx
c001a4c8:	5b                   	pop    ebx
c001a4c9:	5e                   	pop    esi
c001a4ca:	5f                   	pop    edi
c001a4cb:	c3                   	ret    

c001a4cc <Vm::fpu64ToInternal(unsigned long long)>:
c001a4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4d4:	c3                   	ret    

c001a4d5 <Vm::fpuFloatToLong(unsigned long long)>:
c001a4d5:	57                   	push   edi
c001a4d6:	31 c0                	xor    eax,eax
c001a4d8:	56                   	push   esi
c001a4d9:	31 d2                	xor    edx,edx
c001a4db:	53                   	push   ebx
c001a4dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4e4:	89 d9                	mov    ecx,ebx
c001a4e6:	c1 e9 14             	shr    ecx,0x14
c001a4e9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a4ef:	89 cf                	mov    edi,ecx
c001a4f1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a4f7:	78 37                	js     c001a530 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a4f9:	89 d9                	mov    ecx,ebx
c001a4fb:	89 f0                	mov    eax,esi
c001a4fd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a503:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a509:	89 ca                	mov    edx,ecx
c001a50b:	b9 34 00 00 00       	mov    ecx,0x34
c001a510:	29 f9                	sub    ecx,edi
c001a512:	0f ad d0             	shrd   eax,edx,cl
c001a515:	d3 fa                	sar    edx,cl
c001a517:	f6 c1 20             	test   cl,0x20
c001a51a:	74 08                	je     c001a524 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a51c:	89 d0                	mov    eax,edx
c001a51e:	c1 fa 1f             	sar    edx,0x1f
c001a521:	8d 76 00             	lea    esi,[esi+0x0]
c001a524:	85 db                	test   ebx,ebx
c001a526:	79 08                	jns    c001a530 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a528:	f7 d8                	neg    eax
c001a52a:	83 d2 00             	adc    edx,0x0
c001a52d:	f7 da                	neg    edx
c001a52f:	90                   	nop
c001a530:	5b                   	pop    ebx
c001a531:	5e                   	pop    esi
c001a532:	5f                   	pop    edi
c001a533:	c3                   	ret    

c001a534 <Vm::fpuULongToFloat(unsigned long long)>:
c001a534:	57                   	push   edi
c001a535:	31 c9                	xor    ecx,ecx
c001a537:	56                   	push   esi
c001a538:	53                   	push   ebx
c001a539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a53d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	0f ba e7 14          	bt     edi,0x14
c001a548:	72 0a                	jb     c001a554 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a54a:	01 f6                	add    esi,esi
c001a54c:	11 ff                	adc    edi,edi
c001a54e:	41                   	inc    ecx
c001a54f:	eb f3                	jmp    c001a544 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a551:	8d 76 00             	lea    esi,[esi+0x0]
c001a554:	89 fa                	mov    edx,edi
c001a556:	89 f0                	mov    eax,esi
c001a558:	bb 33 04 00 00       	mov    ebx,0x433
c001a55d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a563:	29 cb                	sub    ebx,ecx
c001a565:	89 d9                	mov    ecx,ebx
c001a567:	5b                   	pop    ebx
c001a568:	c1 e1 14             	shl    ecx,0x14
c001a56b:	5e                   	pop    esi
c001a56c:	09 ca                	or     edx,ecx
c001a56e:	5f                   	pop    edi
c001a56f:	c3                   	ret    

c001a570 <Vm::fpuLongToFloat(long long)>:
c001a570:	56                   	push   esi
c001a571:	31 c0                	xor    eax,eax
c001a573:	53                   	push   ebx
c001a574:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a578:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a57c:	39 c8                	cmp    eax,ecx
c001a57e:	19 d8                	sbb    eax,ebx
c001a580:	7d 06                	jge    c001a588 <Vm::fpuLongToFloat(long long)+0x18>
c001a582:	31 f6                	xor    esi,esi
c001a584:	eb 0e                	jmp    c001a594 <Vm::fpuLongToFloat(long long)+0x24>
c001a586:	66 90                	xchg   ax,ax
c001a588:	f7 d9                	neg    ecx
c001a58a:	be 01 00 00 00       	mov    esi,0x1
c001a58f:	83 d3 00             	adc    ebx,0x0
c001a592:	f7 db                	neg    ebx
c001a594:	31 c0                	xor    eax,eax
c001a596:	66 90                	xchg   ax,ax
c001a598:	0f ba e3 14          	bt     ebx,0x14
c001a59c:	72 0a                	jb     c001a5a8 <Vm::fpuLongToFloat(long long)+0x38>
c001a59e:	01 c9                	add    ecx,ecx
c001a5a0:	11 db                	adc    ebx,ebx
c001a5a2:	40                   	inc    eax
c001a5a3:	eb f3                	jmp    c001a598 <Vm::fpuLongToFloat(long long)+0x28>
c001a5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5a8:	ba 33 04 00 00       	mov    edx,0x433
c001a5ad:	29 c2                	sub    edx,eax
c001a5af:	89 c8                	mov    eax,ecx
c001a5b1:	c1 e2 14             	shl    edx,0x14
c001a5b4:	89 d9                	mov    ecx,ebx
c001a5b6:	89 f3                	mov    ebx,esi
c001a5b8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a5be:	09 ca                	or     edx,ecx
c001a5c0:	84 db                	test   bl,bl
c001a5c2:	74 08                	je     c001a5cc <Vm::fpuLongToFloat(long long)+0x5c>
c001a5c4:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a5ca:	66 90                	xchg   ax,ax
c001a5cc:	5b                   	pop    ebx
c001a5cd:	5e                   	pop    esi
c001a5ce:	c3                   	ret    

c001a5cf <Vm::fpuGet0()>:
c001a5cf:	31 c0                	xor    eax,eax
c001a5d1:	31 d2                	xor    edx,edx
c001a5d3:	c3                   	ret    

c001a5d4 <Vm::fpuGet1()>:
c001a5d4:	b8 01 00 00 00       	mov    eax,0x1
c001a5d9:	31 d2                	xor    edx,edx
c001a5db:	c3                   	ret    

c001a5dc <Vm::fpuGetPi()>:
c001a5dc:	b8 03 00 00 00       	mov    eax,0x3
c001a5e1:	31 d2                	xor    edx,edx
c001a5e3:	c3                   	ret    

c001a5e4 <Vm::fpuGetLog2E()>:
c001a5e4:	83 ec 18             	sub    esp,0x18
c001a5e7:	68 b0 6f 02 c0       	push   0xc0026fb0
c001a5ec:	e8 10 aa ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a5f1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5f6:	31 d2                	xor    edx,edx
c001a5f8:	83 c4 1c             	add    esp,0x1c
c001a5fb:	c3                   	ret    

c001a5fc <Vm::fpuGetLogE2()>:
c001a5fc:	83 ec 18             	sub    esp,0x18
c001a5ff:	68 bc 6f 02 c0       	push   0xc0026fbc
c001a604:	e8 f8 a9 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a609:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a60e:	31 d2                	xor    edx,edx
c001a610:	83 c4 1c             	add    esp,0x1c
c001a613:	c3                   	ret    

c001a614 <Vm::fpuGetLog210()>:
c001a614:	83 ec 18             	sub    esp,0x18
c001a617:	68 c8 6f 02 c0       	push   0xc0026fc8
c001a61c:	e8 e0 a9 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a621:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a626:	31 d2                	xor    edx,edx
c001a628:	83 c4 1c             	add    esp,0x1c
c001a62b:	c3                   	ret    

c001a62c <Vm::fpuGetLog102()>:
c001a62c:	83 ec 18             	sub    esp,0x18
c001a62f:	68 d5 6f 02 c0       	push   0xc0026fd5
c001a634:	e8 c8 a9 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a639:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a63e:	31 d2                	xor    edx,edx
c001a640:	83 c4 1c             	add    esp,0x1c
c001a643:	c3                   	ret    

c001a644 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a648:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a64c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a650:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a654:	0f 92 c0             	setb   al
c001a657:	c3                   	ret    

c001a658 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a658:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a660:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a664:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a668:	09 c2                	or     edx,eax
c001a66a:	0f 94 c0             	sete   al
c001a66d:	c3                   	ret    

c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a66e:	57                   	push   edi
c001a66f:	56                   	push   esi
c001a670:	53                   	push   ebx
c001a671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a675:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a679:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a67d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a681:	57                   	push   edi
c001a682:	56                   	push   esi
c001a683:	53                   	push   ebx
c001a684:	51                   	push   ecx
c001a685:	e8 ce ff ff ff       	call   c001a658 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a68a:	83 c4 10             	add    esp,0x10
c001a68d:	88 c2                	mov    dl,al
c001a68f:	31 c0                	xor    eax,eax
c001a691:	84 d2                	test   dl,dl
c001a693:	75 0f                	jne    c001a6a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a695:	57                   	push   edi
c001a696:	56                   	push   esi
c001a697:	53                   	push   ebx
c001a698:	51                   	push   ecx
c001a699:	e8 a6 ff ff ff       	call   c001a644 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a69e:	83 c4 10             	add    esp,0x10
c001a6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6a4:	83 e0 01             	and    eax,0x1
c001a6a7:	5b                   	pop    ebx
c001a6a8:	88 c1                	mov    cl,al
c001a6aa:	83 e2 01             	and    edx,0x1
c001a6ad:	a0 61 a2 02 c0       	mov    al,ds:0xc002a261
c001a6b2:	c1 e2 06             	shl    edx,0x6
c001a6b5:	83 e0 ba             	and    eax,0xffffffba
c001a6b8:	5e                   	pop    esi
c001a6b9:	09 c8                	or     eax,ecx
c001a6bb:	5f                   	pop    edi
c001a6bc:	09 d0                	or     eax,edx
c001a6be:	a2 61 a2 02 c0       	mov    ds:0xc002a261,al
c001a6c3:	c3                   	ret    

c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a6c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6cc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a6d0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a6d4:	c3                   	ret    

c001a6d5 <Vm::fpuAbs(unsigned long long)>:
c001a6d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6dd:	c3                   	ret    

c001a6de <Vm::fpuChs(unsigned long long)>:
c001a6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6e6:	f7 d8                	neg    eax
c001a6e8:	83 d2 00             	adc    edx,0x0
c001a6eb:	f7 da                	neg    edx
c001a6ed:	c3                   	ret    

c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a6ee:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a6f2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a6f7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a6fb:	eb c7                	jmp    c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a6fd:	53                   	push   ebx
c001a6fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a702:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a706:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a70a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a70e:	0f af ca             	imul   ecx,edx
c001a711:	0f af d8             	imul   ebx,eax
c001a714:	f7 e2                	mul    edx
c001a716:	01 d9                	add    ecx,ebx
c001a718:	5b                   	pop    ebx
c001a719:	01 ca                	add    edx,ecx
c001a71b:	c3                   	ret    

c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a71c:	83 ec 0c             	sub    esp,0xc
c001a71f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a723:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a727:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a72b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a72f:	e8 14 89 00 00       	call   c0023048 <__udivdi3>
c001a734:	83 c4 1c             	add    esp,0x1c
c001a737:	c3                   	ret    

c001a738 <Vm::fpuSquare(unsigned long long)>:
c001a738:	50                   	push   eax
c001a739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a73d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a741:	52                   	push   edx
c001a742:	50                   	push   eax
c001a743:	52                   	push   edx
c001a744:	50                   	push   eax
c001a745:	e8 b3 ff ff ff       	call   c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a74a:	83 c4 14             	add    esp,0x14
c001a74d:	c3                   	ret    

c001a74e <Vm::fpuGetReg(int)>:
c001a74e:	83 ec 0c             	sub    esp,0xc
c001a751:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a756:	76 10                	jbe    c001a768 <Vm::fpuGetReg(int)+0x1a>
c001a758:	83 ec 0c             	sub    esp,0xc
c001a75b:	68 e2 6f 02 c0       	push   0xc0026fe2
c001a760:	e8 9c a8 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	a0 61 a2 02 c0       	mov    al,ds:0xc002a261
c001a76d:	b9 08 00 00 00       	mov    ecx,0x8
c001a772:	c0 e8 03             	shr    al,0x3
c001a775:	83 e0 07             	and    eax,0x7
c001a778:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a77c:	99                   	cdq    
c001a77d:	f7 f9                	idiv   ecx
c001a77f:	8b 04 d5 64 a2 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5d9c]
c001a786:	8b 14 d5 68 a2 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5d98]
c001a78d:	83 c4 0c             	add    esp,0xc
c001a790:	c3                   	ret    

c001a791 <Vm::fpuSetReg(int, unsigned long long)>:
c001a791:	57                   	push   edi
c001a792:	56                   	push   esi
c001a793:	52                   	push   edx
c001a794:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a798:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a79c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a7a1:	76 11                	jbe    c001a7b4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a7a3:	83 ec 0c             	sub    esp,0xc
c001a7a6:	68 f5 6f 02 c0       	push   0xc0026ff5
c001a7ab:	e8 51 a8 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001a7b0:	83 c4 10             	add    esp,0x10
c001a7b3:	90                   	nop
c001a7b4:	a0 61 a2 02 c0       	mov    al,ds:0xc002a261
c001a7b9:	b9 08 00 00 00       	mov    ecx,0x8
c001a7be:	c0 e8 03             	shr    al,0x3
c001a7c1:	83 e0 07             	and    eax,0x7
c001a7c4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a7c8:	99                   	cdq    
c001a7c9:	f7 f9                	idiv   ecx
c001a7cb:	89 34 d5 64 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5d9c],esi
c001a7d2:	89 3c d5 68 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5d98],edi
c001a7d9:	58                   	pop    eax
c001a7da:	5e                   	pop    esi
c001a7db:	5f                   	pop    edi
c001a7dc:	c3                   	ret    

c001a7dd <Vm::fpuPush(unsigned long long)>:
c001a7dd:	a0 61 a2 02 c0       	mov    al,ds:0xc002a261
c001a7e2:	c0 e8 03             	shr    al,0x3
c001a7e5:	83 e0 07             	and    eax,0x7
c001a7e8:	83 c0 07             	add    eax,0x7
c001a7eb:	88 c2                	mov    dl,al
c001a7ed:	83 e0 07             	and    eax,0x7
c001a7f0:	83 e2 07             	and    edx,0x7
c001a7f3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a7fa:	8a 15 61 a2 02 c0    	mov    dl,BYTE PTR ds:0xc002a261
c001a800:	83 e2 c7             	and    edx,0xffffffc7
c001a803:	09 ca                	or     edx,ecx
c001a805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a809:	88 15 61 a2 02 c0    	mov    BYTE PTR ds:0xc002a261,dl
c001a80f:	89 0c c5 68 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5d98],ecx
c001a816:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a81a:	89 14 c5 64 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5d9c],edx
c001a821:	a1 a4 a2 02 c0       	mov    eax,ds:0xc002a2a4
c001a826:	83 f8 08             	cmp    eax,0x8
c001a829:	75 09                	jne    c001a834 <Vm::fpuPush(unsigned long long)+0x57>
c001a82b:	80 0d 60 a2 02 c0 40 	or     BYTE PTR ds:0xc002a260,0x40
c001a832:	c3                   	ret    
c001a833:	90                   	nop
c001a834:	40                   	inc    eax
c001a835:	a3 a4 a2 02 c0       	mov    ds:0xc002a2a4,eax
c001a83a:	c3                   	ret    

c001a83b <Vm::fpuPop()>:
c001a83b:	8a 0d 61 a2 02 c0    	mov    cl,BYTE PTR ds:0xc002a261
c001a841:	53                   	push   ebx
c001a842:	c0 e9 03             	shr    cl,0x3
c001a845:	8a 1d 61 a2 02 c0    	mov    bl,BYTE PTR ds:0xc002a261
c001a84b:	83 e1 07             	and    ecx,0x7
c001a84e:	83 e3 c7             	and    ebx,0xffffffc7
c001a851:	8b 04 cd 64 a2 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5d9c]
c001a858:	8b 14 cd 68 a2 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5d98]
c001a85f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a866:	83 e1 38             	and    ecx,0x38
c001a869:	09 d9                	or     ecx,ebx
c001a86b:	88 0d 61 a2 02 c0    	mov    BYTE PTR ds:0xc002a261,cl
c001a871:	8b 0d a4 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a2a4
c001a877:	85 c9                	test   ecx,ecx
c001a879:	74 09                	je     c001a884 <Vm::fpuPop()+0x49>
c001a87b:	49                   	dec    ecx
c001a87c:	89 0d a4 a2 02 c0    	mov    DWORD PTR ds:0xc002a2a4,ecx
c001a882:	eb 08                	jmp    c001a88c <Vm::fpuPop()+0x51>
c001a884:	80 0d 60 a2 02 c0 40 	or     BYTE PTR ds:0xc002a260,0x40
c001a88b:	90                   	nop
c001a88c:	5b                   	pop    ebx
c001a88d:	c3                   	ret    

c001a88e <Vm::x87Handler(regs*)>:
c001a88e:	55                   	push   ebp
c001a88f:	57                   	push   edi
c001a890:	56                   	push   esi
c001a891:	53                   	push   ebx
c001a892:	83 ec 1c             	sub    esp,0x1c
c001a895:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a899:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a89e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a8a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a8a9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a8ad:	50                   	push   eax
c001a8ae:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a8b2:	50                   	push   eax
c001a8b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8b7:	50                   	push   eax
c001a8b8:	53                   	push   ebx
c001a8b9:	e8 5c 9e ff ff       	call   c001471a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a8be:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a8c1:	83 c4 10             	add    esp,0x10
c001a8c4:	89 c6                	mov    esi,eax
c001a8c6:	80 fa d9             	cmp    dl,0xd9
c001a8c9:	0f 85 79 01 00 00    	jne    c001aa48 <Vm::x87Handler(regs*)+0x1ba>
c001a8cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a8d3:	8d 50 20             	lea    edx,[eax+0x20]
c001a8d6:	80 fa 0e             	cmp    dl,0xe
c001a8d9:	0f 87 a5 00 00 00    	ja     c001a984 <Vm::x87Handler(regs*)+0xf6>
c001a8df:	0f b6 d2             	movzx  edx,dl
c001a8e2:	ff 24 95 08 70 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8ff8]
c001a8e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ec:	e8 de fc ff ff       	call   c001a5cf <Vm::fpuGet0()>
c001a8f1:	eb 09                	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a8f3:	90                   	nop
c001a8f4:	e8 db fc ff ff       	call   c001a5d4 <Vm::fpuGet1()>
c001a8f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8fc:	57                   	push   edi
c001a8fd:	57                   	push   edi
c001a8fe:	66 90                	xchg   ax,ax
c001a900:	52                   	push   edx
c001a901:	50                   	push   eax
c001a902:	e8 d6 fe ff ff       	call   c001a7dd <Vm::fpuPush(unsigned long long)>
c001a907:	90                   	nop
c001a908:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a90c:	83 c4 10             	add    esp,0x10
c001a90f:	90                   	nop
c001a910:	b0 01                	mov    al,0x1
c001a912:	e9 89 0a 00 00       	jmp    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001a917:	90                   	nop
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	6a 00                	push   0x0
c001a91d:	e8 2c fe ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001a922:	59                   	pop    ecx
c001a923:	5e                   	pop    esi
c001a924:	52                   	push   edx
c001a925:	50                   	push   eax
c001a926:	e8 b3 fd ff ff       	call   c001a6de <Vm::fpuChs(unsigned long long)>
c001a92b:	eb 17                	jmp    c001a944 <Vm::x87Handler(regs*)+0xb6>
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	6a 00                	push   0x0
c001a935:	e8 14 fe ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001a93a:	5f                   	pop    edi
c001a93b:	5d                   	pop    ebp
c001a93c:	52                   	push   edx
c001a93d:	50                   	push   eax
c001a93e:	e8 92 fd ff ff       	call   c001a6d5 <Vm::fpuAbs(unsigned long long)>
c001a943:	90                   	nop
c001a944:	83 c4 0c             	add    esp,0xc
c001a947:	90                   	nop
c001a948:	52                   	push   edx
c001a949:	50                   	push   eax
c001a94a:	66 90                	xchg   ax,ax
c001a94c:	6a 00                	push   0x0
c001a94e:	66 90                	xchg   ax,ax
c001a950:	e8 3c fe ff ff       	call   c001a791 <Vm::fpuSetReg(int, unsigned long long)>
c001a955:	eb b1                	jmp    c001a908 <Vm::x87Handler(regs*)+0x7a>
c001a957:	90                   	nop
c001a958:	e8 b7 fc ff ff       	call   c001a614 <Vm::fpuGetLog210()>
c001a95d:	eb 9d                	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a95f:	90                   	nop
c001a960:	e8 7f fc ff ff       	call   c001a5e4 <Vm::fpuGetLog2E()>
c001a965:	eb 95                	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a967:	90                   	nop
c001a968:	e8 6f fc ff ff       	call   c001a5dc <Vm::fpuGetPi()>
c001a96d:	eb 8d                	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a96f:	90                   	nop
c001a970:	e8 b7 fc ff ff       	call   c001a62c <Vm::fpuGetLog102()>
c001a975:	eb 85                	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a977:	90                   	nop
c001a978:	e8 7f fc ff ff       	call   c001a5fc <Vm::fpuGetLogE2()>
c001a97d:	e9 7a ff ff ff       	jmp    c001a8fc <Vm::x87Handler(regs*)+0x6e>
c001a982:	66 90                	xchg   ax,ax
c001a984:	8d 50 40             	lea    edx,[eax+0x40]
c001a987:	80 fa 07             	cmp    dl,0x7
c001a98a:	77 18                	ja     c001a9a4 <Vm::x87Handler(regs*)+0x116>
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	2d c0 00 00 00       	sub    eax,0xc0
c001a994:	50                   	push   eax
c001a995:	e8 b4 fd ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001a99a:	59                   	pop    ecx
c001a99b:	5e                   	pop    esi
c001a99c:	e9 5f ff ff ff       	jmp    c001a900 <Vm::x87Handler(regs*)+0x72>
c001a9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9a4:	8d 50 38             	lea    edx,[eax+0x38]
c001a9a7:	80 fa 07             	cmp    dl,0x7
c001a9aa:	77 3c                	ja     c001a9e8 <Vm::x87Handler(regs*)+0x15a>
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	2d c8 00 00 00       	sub    eax,0xc8
c001a9b4:	50                   	push   eax
c001a9b5:	e8 94 fd ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001a9ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9c1:	89 c6                	mov    esi,eax
c001a9c3:	89 d7                	mov    edi,edx
c001a9c5:	e8 84 fd ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001a9ca:	83 c4 0c             	add    esp,0xc
c001a9cd:	52                   	push   edx
c001a9ce:	50                   	push   eax
c001a9cf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a9d3:	2d c8 00 00 00       	sub    eax,0xc8
c001a9d8:	50                   	push   eax
c001a9d9:	e8 b3 fd ff ff       	call   c001a791 <Vm::fpuSetReg(int, unsigned long long)>
c001a9de:	83 c4 0c             	add    esp,0xc
c001a9e1:	57                   	push   edi
c001a9e2:	56                   	push   esi
c001a9e3:	e9 64 ff ff ff       	jmp    c001a94c <Vm::x87Handler(regs*)+0xbe>
c001a9e8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9ec:	84 d2                	test   dl,dl
c001a9ee:	75 10                	jne    c001aa00 <Vm::x87Handler(regs*)+0x172>
c001a9f0:	83 ec 0c             	sub    esp,0xc
c001a9f3:	ff 36                	push   DWORD PTR [esi]
c001a9f5:	e8 8d fa ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001a9fa:	e9 c9 00 00 00       	jmp    c001aac8 <Vm::x87Handler(regs*)+0x23a>
c001a9ff:	90                   	nop
c001aa00:	80 fa 03             	cmp    dl,0x3
c001aa03:	75 13                	jne    c001aa18 <Vm::x87Handler(regs*)+0x18a>
c001aa05:	e8 31 fe ff ff       	call   c001a83b <Vm::fpuPop()>
c001aa0a:	55                   	push   ebp
c001aa0b:	55                   	push   ebp
c001aa0c:	52                   	push   edx
c001aa0d:	50                   	push   eax
c001aa0e:	e8 0d fa ff ff       	call   c001a420 <Vm::fpuInternalTo32(unsigned long long)>
c001aa13:	e9 90 00 00 00       	jmp    c001aaa8 <Vm::x87Handler(regs*)+0x21a>
c001aa18:	80 fa 05             	cmp    dl,0x5
c001aa1b:	75 0f                	jne    c001aa2c <Vm::x87Handler(regs*)+0x19e>
c001aa1d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001aa20:	66 a3 62 a2 02 c0    	mov    ds:0xc002a262,ax
c001aa26:	e9 ed 00 00 00       	jmp    c001ab18 <Vm::x87Handler(regs*)+0x28a>
c001aa2b:	90                   	nop
c001aa2c:	31 c0                	xor    eax,eax
c001aa2e:	80 fa 07             	cmp    dl,0x7
c001aa31:	0f 85 69 09 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001aa37:	66 a1 62 a2 02 c0    	mov    ax,ds:0xc002a262
c001aa3d:	66 89 06             	mov    WORD PTR [esi],ax
c001aa40:	e9 d3 00 00 00       	jmp    c001ab18 <Vm::x87Handler(regs*)+0x28a>
c001aa45:	8d 76 00             	lea    esi,[esi+0x0]
c001aa48:	80 fa d8             	cmp    dl,0xd8
c001aa4b:	0f 84 d3 00 00 00    	je     c001ab24 <Vm::x87Handler(regs*)+0x296>
c001aa51:	80 fa dc             	cmp    dl,0xdc
c001aa54:	0f 84 2a 02 00 00    	je     c001ac84 <Vm::x87Handler(regs*)+0x3f6>
c001aa5a:	80 fa de             	cmp    dl,0xde
c001aa5d:	0f 84 f1 02 00 00    	je     c001ad54 <Vm::x87Handler(regs*)+0x4c6>
c001aa63:	80 fa dd             	cmp    dl,0xdd
c001aa66:	0f 84 94 04 00 00    	je     c001af00 <Vm::x87Handler(regs*)+0x672>
c001aa6c:	80 fa da             	cmp    dl,0xda
c001aa6f:	0f 84 5f 05 00 00    	je     c001afd4 <Vm::x87Handler(regs*)+0x746>
c001aa75:	80 fa df             	cmp    dl,0xdf
c001aa78:	0f 84 aa 05 00 00    	je     c001b028 <Vm::x87Handler(regs*)+0x79a>
c001aa7e:	31 c0                	xor    eax,eax
c001aa80:	80 fa db             	cmp    dl,0xdb
c001aa83:	0f 85 17 09 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001aa89:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa8d:	80 fa 03             	cmp    dl,0x3
c001aa90:	0f 85 c2 06 00 00    	jne    c001b158 <Vm::x87Handler(regs*)+0x8ca>
c001aa96:	e8 a0 fd ff ff       	call   c001a83b <Vm::fpuPop()>
c001aa9b:	55                   	push   ebp
c001aa9c:	55                   	push   ebp
c001aa9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa0:	52                   	push   edx
c001aaa1:	50                   	push   eax
c001aaa2:	e8 2e fa ff ff       	call   c001a4d5 <Vm::fpuFloatToLong(unsigned long long)>
c001aaa7:	90                   	nop
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	89 06                	mov    DWORD PTR [esi],eax
c001aaad:	eb 69                	jmp    c001ab18 <Vm::x87Handler(regs*)+0x28a>
c001aaaf:	90                   	nop
c001aab0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aab4:	84 d2                	test   dl,dl
c001aab6:	0f 85 2c 06 00 00    	jne    c001b0e8 <Vm::x87Handler(regs*)+0x85a>
c001aabc:	57                   	push   edi
c001aabd:	57                   	push   edi
c001aabe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aac1:	ff 36                	push   DWORD PTR [esi]
c001aac3:	e8 04 fa ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001aac8:	5e                   	pop    esi
c001aac9:	5f                   	pop    edi
c001aaca:	52                   	push   edx
c001aacb:	50                   	push   eax
c001aacc:	e8 0c fd ff ff       	call   c001a7dd <Vm::fpuPush(unsigned long long)>
c001aad1:	8d 76 00             	lea    esi,[esi+0x0]
c001aad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aad8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aadb:	e9 2c fe ff ff       	jmp    c001a90c <Vm::x87Handler(regs*)+0x7e>
c001aae0:	80 fa 03             	cmp    dl,0x3
c001aae3:	0f 85 2b 07 00 00    	jne    c001b214 <Vm::x87Handler(regs*)+0x986>
c001aae9:	57                   	push   edi
c001aaea:	57                   	push   edi
c001aaeb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaee:	ff 36                	push   DWORD PTR [esi]
c001aaf0:	e8 d7 f9 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001aaf5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aafc:	89 c6                	mov    esi,eax
c001aafe:	89 d7                	mov    edi,edx
c001ab00:	e8 49 fc ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ab05:	57                   	push   edi
c001ab06:	56                   	push   esi
c001ab07:	52                   	push   edx
c001ab08:	50                   	push   eax
c001ab09:	e8 60 fb ff ff       	call   c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab0e:	83 c4 20             	add    esp,0x20
c001ab11:	e8 25 fd ff ff       	call   c001a83b <Vm::fpuPop()>
c001ab16:	66 90                	xchg   ax,ax
c001ab18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab1c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab1f:	e9 ec fd ff ff       	jmp    c001a910 <Vm::x87Handler(regs*)+0x82>
c001ab24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab28:	8d 50 40             	lea    edx,[eax+0x40]
c001ab2b:	80 fa 07             	cmp    dl,0x7
c001ab2e:	77 2c                	ja     c001ab5c <Vm::x87Handler(regs*)+0x2ce>
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	2d c0 00 00 00       	sub    eax,0xc0
c001ab38:	50                   	push   eax
c001ab39:	e8 10 fc ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ab3e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab45:	89 c6                	mov    esi,eax
c001ab47:	89 d7                	mov    edi,edx
c001ab49:	e8 00 fc ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ab4e:	57                   	push   edi
c001ab4f:	56                   	push   esi
c001ab50:	52                   	push   edx
c001ab51:	50                   	push   eax
c001ab52:	e8 6d fb ff ff       	call   c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab57:	eb 33                	jmp    c001ab8c <Vm::x87Handler(regs*)+0x2fe>
c001ab59:	8d 76 00             	lea    esi,[esi+0x0]
c001ab5c:	8d 50 38             	lea    edx,[eax+0x38]
c001ab5f:	80 fa 07             	cmp    dl,0x7
c001ab62:	77 30                	ja     c001ab94 <Vm::x87Handler(regs*)+0x306>
c001ab64:	83 ec 0c             	sub    esp,0xc
c001ab67:	2d c8 00 00 00       	sub    eax,0xc8
c001ab6c:	50                   	push   eax
c001ab6d:	e8 dc fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ab72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab79:	89 c6                	mov    esi,eax
c001ab7b:	89 d7                	mov    edi,edx
c001ab7d:	e8 cc fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ab82:	57                   	push   edi
c001ab83:	56                   	push   esi
c001ab84:	52                   	push   edx
c001ab85:	50                   	push   eax
c001ab86:	e8 72 fb ff ff       	call   c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab8b:	90                   	nop
c001ab8c:	83 c4 1c             	add    esp,0x1c
c001ab8f:	e9 b4 fd ff ff       	jmp    c001a948 <Vm::x87Handler(regs*)+0xba>
c001ab94:	8d 50 30             	lea    edx,[eax+0x30]
c001ab97:	80 fa 07             	cmp    dl,0x7
c001ab9a:	77 10                	ja     c001abac <Vm::x87Handler(regs*)+0x31e>
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	2d d0 00 00 00       	sub    eax,0xd0
c001aba4:	e9 c3 03 00 00       	jmp    c001af6c <Vm::x87Handler(regs*)+0x6de>
c001aba9:	8d 76 00             	lea    esi,[esi+0x0]
c001abac:	8d 50 28             	lea    edx,[eax+0x28]
c001abaf:	80 fa 07             	cmp    dl,0x7
c001abb2:	77 10                	ja     c001abc4 <Vm::x87Handler(regs*)+0x336>
c001abb4:	83 ec 0c             	sub    esp,0xc
c001abb7:	2d d8 00 00 00       	sub    eax,0xd8
c001abbc:	e9 e7 03 00 00       	jmp    c001afa8 <Vm::x87Handler(regs*)+0x71a>
c001abc1:	8d 76 00             	lea    esi,[esi+0x0]
c001abc4:	8d 50 20             	lea    edx,[eax+0x20]
c001abc7:	80 fa 07             	cmp    dl,0x7
c001abca:	77 1c                	ja     c001abe8 <Vm::x87Handler(regs*)+0x35a>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	2d e0 00 00 00       	sub    eax,0xe0
c001abd4:	50                   	push   eax
c001abd5:	e8 74 fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001abda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001abe1:	89 c6                	mov    esi,eax
c001abe3:	89 d7                	mov    edi,edx
c001abe5:	eb 25                	jmp    c001ac0c <Vm::x87Handler(regs*)+0x37e>
c001abe7:	90                   	nop
c001abe8:	8d 50 18             	lea    edx,[eax+0x18]
c001abeb:	80 fa 07             	cmp    dl,0x7
c001abee:	77 30                	ja     c001ac20 <Vm::x87Handler(regs*)+0x392>
c001abf0:	83 ec 0c             	sub    esp,0xc
c001abf3:	6a 00                	push   0x0
c001abf5:	e8 54 fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001abfa:	89 c6                	mov    esi,eax
c001abfc:	89 d7                	mov    edi,edx
c001abfe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac02:	2d e8 00 00 00       	sub    eax,0xe8
c001ac07:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac0a:	66 90                	xchg   ax,ax
c001ac0c:	e8 3d fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ac11:	57                   	push   edi
c001ac12:	56                   	push   esi
c001ac13:	52                   	push   edx
c001ac14:	50                   	push   eax
c001ac15:	e8 d4 fa ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ac1a:	e9 6d ff ff ff       	jmp    c001ab8c <Vm::x87Handler(regs*)+0x2fe>
c001ac1f:	90                   	nop
c001ac20:	8d 50 10             	lea    edx,[eax+0x10]
c001ac23:	80 fa 07             	cmp    dl,0x7
c001ac26:	77 1c                	ja     c001ac44 <Vm::x87Handler(regs*)+0x3b6>
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	2d f0 00 00 00       	sub    eax,0xf0
c001ac30:	50                   	push   eax
c001ac31:	e8 18 fb ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ac36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac3d:	89 c6                	mov    esi,eax
c001ac3f:	89 d7                	mov    edi,edx
c001ac41:	eb 25                	jmp    c001ac68 <Vm::x87Handler(regs*)+0x3da>
c001ac43:	90                   	nop
c001ac44:	3c f7                	cmp    al,0xf7
c001ac46:	0f 86 00 04 00 00    	jbe    c001b04c <Vm::x87Handler(regs*)+0x7be>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	6a 00                	push   0x0
c001ac51:	e8 f8 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ac56:	89 c6                	mov    esi,eax
c001ac58:	89 d7                	mov    edi,edx
c001ac5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac5e:	2d f8 00 00 00       	sub    eax,0xf8
c001ac63:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac66:	66 90                	xchg   ax,ax
c001ac68:	e8 e1 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ac6d:	57                   	push   edi
c001ac6e:	56                   	push   esi
c001ac6f:	52                   	push   edx
c001ac70:	50                   	push   eax
c001ac71:	e8 a6 fa ff ff       	call   c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac76:	83 c4 1c             	add    esp,0x1c
c001ac79:	52                   	push   edx
c001ac7a:	50                   	push   eax
c001ac7b:	6a 00                	push   0x0
c001ac7d:	e9 6a 02 00 00       	jmp    c001aeec <Vm::x87Handler(regs*)+0x65e>
c001ac82:	66 90                	xchg   ax,ax
c001ac84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac88:	8d 50 40             	lea    edx,[eax+0x40]
c001ac8b:	80 fa 07             	cmp    dl,0x7
c001ac8e:	77 38                	ja     c001acc8 <Vm::x87Handler(regs*)+0x43a>
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	2d c0 00 00 00       	sub    eax,0xc0
c001ac98:	50                   	push   eax
c001ac99:	e8 b0 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ac9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aca5:	89 c6                	mov    esi,eax
c001aca7:	89 d7                	mov    edi,edx
c001aca9:	e8 a0 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001acae:	57                   	push   edi
c001acaf:	56                   	push   esi
c001acb0:	52                   	push   edx
c001acb1:	50                   	push   eax
c001acb2:	e8 0d fa ff ff       	call   c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001acb7:	83 c4 1c             	add    esp,0x1c
c001acba:	52                   	push   edx
c001acbb:	50                   	push   eax
c001acbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acc0:	2d c0 00 00 00       	sub    eax,0xc0
c001acc5:	eb 41                	jmp    c001ad08 <Vm::x87Handler(regs*)+0x47a>
c001acc7:	90                   	nop
c001acc8:	8d 50 38             	lea    edx,[eax+0x38]
c001accb:	80 fa 07             	cmp    dl,0x7
c001acce:	77 40                	ja     c001ad10 <Vm::x87Handler(regs*)+0x482>
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	2d c8 00 00 00       	sub    eax,0xc8
c001acd8:	50                   	push   eax
c001acd9:	e8 70 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001acde:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ace5:	89 c6                	mov    esi,eax
c001ace7:	89 d7                	mov    edi,edx
c001ace9:	e8 60 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001acee:	57                   	push   edi
c001acef:	56                   	push   esi
c001acf0:	52                   	push   edx
c001acf1:	50                   	push   eax
c001acf2:	e8 06 fa ff ff       	call   c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001acf7:	83 c4 1c             	add    esp,0x1c
c001acfa:	52                   	push   edx
c001acfb:	50                   	push   eax
c001acfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad00:	2d c8 00 00 00       	sub    eax,0xc8
c001ad05:	8d 76 00             	lea    esi,[esi+0x0]
c001ad08:	50                   	push   eax
c001ad09:	e9 42 fc ff ff       	jmp    c001a950 <Vm::x87Handler(regs*)+0xc2>
c001ad0e:	66 90                	xchg   ax,ax
c001ad10:	83 c0 18             	add    eax,0x18
c001ad13:	3c 07                	cmp    al,0x7
c001ad15:	0f 87 6d 04 00 00    	ja     c001b188 <Vm::x87Handler(regs*)+0x8fa>
c001ad1b:	83 ec 0c             	sub    esp,0xc
c001ad1e:	6a 00                	push   0x0
c001ad20:	e8 29 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ad25:	89 c6                	mov    esi,eax
c001ad27:	89 d7                	mov    edi,edx
c001ad29:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad2d:	2d e8 00 00 00       	sub    eax,0xe8
c001ad32:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad35:	e8 14 fa ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ad3a:	57                   	push   edi
c001ad3b:	56                   	push   esi
c001ad3c:	52                   	push   edx
c001ad3d:	50                   	push   eax
c001ad3e:	e8 ab f9 ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad43:	83 c4 1c             	add    esp,0x1c
c001ad46:	52                   	push   edx
c001ad47:	50                   	push   eax
c001ad48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad4c:	2d e8 00 00 00       	sub    eax,0xe8
c001ad51:	eb b5                	jmp    c001ad08 <Vm::x87Handler(regs*)+0x47a>
c001ad53:	90                   	nop
c001ad54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad58:	8d 50 40             	lea    edx,[eax+0x40]
c001ad5b:	80 fa 07             	cmp    dl,0x7
c001ad5e:	77 3c                	ja     c001ad9c <Vm::x87Handler(regs*)+0x50e>
c001ad60:	83 ec 0c             	sub    esp,0xc
c001ad63:	2d c0 00 00 00       	sub    eax,0xc0
c001ad68:	50                   	push   eax
c001ad69:	e8 e0 f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ad6e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad75:	89 c6                	mov    esi,eax
c001ad77:	89 d7                	mov    edi,edx
c001ad79:	e8 d0 f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ad7e:	57                   	push   edi
c001ad7f:	56                   	push   esi
c001ad80:	52                   	push   edx
c001ad81:	50                   	push   eax
c001ad82:	e8 3d f9 ff ff       	call   c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad87:	83 c4 1c             	add    esp,0x1c
c001ad8a:	52                   	push   edx
c001ad8b:	50                   	push   eax
c001ad8c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad90:	2d c0 00 00 00       	sub    eax,0xc0
c001ad95:	e9 b2 01 00 00       	jmp    c001af4c <Vm::x87Handler(regs*)+0x6be>
c001ad9a:	66 90                	xchg   ax,ax
c001ad9c:	8d 50 20             	lea    edx,[eax+0x20]
c001ad9f:	80 fa 07             	cmp    dl,0x7
c001ada2:	77 3c                	ja     c001ade0 <Vm::x87Handler(regs*)+0x552>
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	2d e0 00 00 00       	sub    eax,0xe0
c001adac:	50                   	push   eax
c001adad:	e8 9c f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001adb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001adb9:	89 c6                	mov    esi,eax
c001adbb:	89 d7                	mov    edi,edx
c001adbd:	e8 8c f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001adc2:	57                   	push   edi
c001adc3:	56                   	push   esi
c001adc4:	52                   	push   edx
c001adc5:	50                   	push   eax
c001adc6:	e8 23 f9 ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001adcb:	83 c4 1c             	add    esp,0x1c
c001adce:	52                   	push   edx
c001adcf:	50                   	push   eax
c001add0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001add4:	2d e0 00 00 00       	sub    eax,0xe0
c001add9:	e9 6e 01 00 00       	jmp    c001af4c <Vm::x87Handler(regs*)+0x6be>
c001adde:	66 90                	xchg   ax,ax
c001ade0:	8d 50 18             	lea    edx,[eax+0x18]
c001ade3:	80 fa 07             	cmp    dl,0x7
c001ade6:	77 3c                	ja     c001ae24 <Vm::x87Handler(regs*)+0x596>
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	6a 00                	push   0x0
c001aded:	e8 5c f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001adf2:	89 c6                	mov    esi,eax
c001adf4:	89 d7                	mov    edi,edx
c001adf6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adfa:	2d e8 00 00 00       	sub    eax,0xe8
c001adff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae02:	e8 47 f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ae07:	57                   	push   edi
c001ae08:	56                   	push   esi
c001ae09:	52                   	push   edx
c001ae0a:	50                   	push   eax
c001ae0b:	e8 de f8 ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ae10:	83 c4 1c             	add    esp,0x1c
c001ae13:	52                   	push   edx
c001ae14:	50                   	push   eax
c001ae15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae19:	2d e8 00 00 00       	sub    eax,0xe8
c001ae1e:	e9 29 01 00 00       	jmp    c001af4c <Vm::x87Handler(regs*)+0x6be>
c001ae23:	90                   	nop
c001ae24:	8d 50 38             	lea    edx,[eax+0x38]
c001ae27:	80 fa 07             	cmp    dl,0x7
c001ae2a:	77 3c                	ja     c001ae68 <Vm::x87Handler(regs*)+0x5da>
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	2d c8 00 00 00       	sub    eax,0xc8
c001ae34:	50                   	push   eax
c001ae35:	e8 14 f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ae3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae41:	89 c6                	mov    esi,eax
c001ae43:	89 d7                	mov    edi,edx
c001ae45:	e8 04 f9 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ae4a:	57                   	push   edi
c001ae4b:	56                   	push   esi
c001ae4c:	52                   	push   edx
c001ae4d:	50                   	push   eax
c001ae4e:	e8 aa f8 ff ff       	call   c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ae53:	83 c4 1c             	add    esp,0x1c
c001ae56:	52                   	push   edx
c001ae57:	50                   	push   eax
c001ae58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae5c:	2d c8 00 00 00       	sub    eax,0xc8
c001ae61:	e9 82 00 00 00       	jmp    c001aee8 <Vm::x87Handler(regs*)+0x65a>
c001ae66:	66 90                	xchg   ax,ax
c001ae68:	3c f7                	cmp    al,0xf7
c001ae6a:	76 38                	jbe    c001aea4 <Vm::x87Handler(regs*)+0x616>
c001ae6c:	83 ec 0c             	sub    esp,0xc
c001ae6f:	6a 00                	push   0x0
c001ae71:	e8 d8 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ae76:	89 c6                	mov    esi,eax
c001ae78:	89 d7                	mov    edi,edx
c001ae7a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae7e:	2d f8 00 00 00       	sub    eax,0xf8
c001ae83:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae86:	e8 c3 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001ae8b:	57                   	push   edi
c001ae8c:	56                   	push   esi
c001ae8d:	52                   	push   edx
c001ae8e:	50                   	push   eax
c001ae8f:	e8 88 f8 ff ff       	call   c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae94:	83 c4 1c             	add    esp,0x1c
c001ae97:	52                   	push   edx
c001ae98:	50                   	push   eax
c001ae99:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae9d:	2d f8 00 00 00       	sub    eax,0xf8
c001aea2:	eb 44                	jmp    c001aee8 <Vm::x87Handler(regs*)+0x65a>
c001aea4:	8d 50 10             	lea    edx,[eax+0x10]
c001aea7:	80 fa 07             	cmp    dl,0x7
c001aeaa:	0f 87 6c 01 00 00    	ja     c001b01c <Vm::x87Handler(regs*)+0x78e>
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	2d f0 00 00 00       	sub    eax,0xf0
c001aeb8:	50                   	push   eax
c001aeb9:	e8 90 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001aebe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aec5:	89 c6                	mov    esi,eax
c001aec7:	89 d7                	mov    edi,edx
c001aec9:	e8 80 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001aece:	57                   	push   edi
c001aecf:	56                   	push   esi
c001aed0:	52                   	push   edx
c001aed1:	50                   	push   eax
c001aed2:	e8 45 f8 ff ff       	call   c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aed7:	83 c4 1c             	add    esp,0x1c
c001aeda:	52                   	push   edx
c001aedb:	50                   	push   eax
c001aedc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aee0:	2d f0 00 00 00       	sub    eax,0xf0
c001aee5:	8d 76 00             	lea    esi,[esi+0x0]
c001aee8:	50                   	push   eax
c001aee9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeec:	e8 a0 f8 ff ff       	call   c001a791 <Vm::fpuSetReg(int, unsigned long long)>
c001aef1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aef5:	e8 41 f9 ff ff       	call   c001a83b <Vm::fpuPop()>
c001aefa:	e9 0d fa ff ff       	jmp    c001a90c <Vm::x87Handler(regs*)+0x7e>
c001aeff:	90                   	nop
c001af00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af04:	8d 50 30             	lea    edx,[eax+0x30]
c001af07:	80 fa 07             	cmp    dl,0x7
c001af0a:	77 20                	ja     c001af2c <Vm::x87Handler(regs*)+0x69e>
c001af0c:	83 ec 0c             	sub    esp,0xc
c001af0f:	6a 00                	push   0x0
c001af11:	e8 38 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001af16:	83 c4 0c             	add    esp,0xc
c001af19:	52                   	push   edx
c001af1a:	50                   	push   eax
c001af1b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af1f:	2d d0 00 00 00       	sub    eax,0xd0
c001af24:	e9 df fd ff ff       	jmp    c001ad08 <Vm::x87Handler(regs*)+0x47a>
c001af29:	8d 76 00             	lea    esi,[esi+0x0]
c001af2c:	8d 50 28             	lea    edx,[eax+0x28]
c001af2f:	80 fa 07             	cmp    dl,0x7
c001af32:	77 28                	ja     c001af5c <Vm::x87Handler(regs*)+0x6ce>
c001af34:	83 ec 0c             	sub    esp,0xc
c001af37:	6a 00                	push   0x0
c001af39:	e8 10 f8 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001af3e:	83 c4 0c             	add    esp,0xc
c001af41:	52                   	push   edx
c001af42:	50                   	push   eax
c001af43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af47:	2d d8 00 00 00       	sub    eax,0xd8
c001af4c:	50                   	push   eax
c001af4d:	e8 3f f8 ff ff       	call   c001a791 <Vm::fpuSetReg(int, unsigned long long)>
c001af52:	e8 e4 f8 ff ff       	call   c001a83b <Vm::fpuPop()>
c001af57:	e9 ac f9 ff ff       	jmp    c001a908 <Vm::x87Handler(regs*)+0x7a>
c001af5c:	8d 50 20             	lea    edx,[eax+0x20]
c001af5f:	80 fa 07             	cmp    dl,0x7
c001af62:	77 30                	ja     c001af94 <Vm::x87Handler(regs*)+0x706>
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	2d e0 00 00 00       	sub    eax,0xe0
c001af6c:	50                   	push   eax
c001af6d:	e8 dc f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001af72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af79:	89 c6                	mov    esi,eax
c001af7b:	89 d7                	mov    edi,edx
c001af7d:	e8 cc f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001af82:	57                   	push   edi
c001af83:	56                   	push   esi
c001af84:	52                   	push   edx
c001af85:	50                   	push   eax
c001af86:	e8 e3 f6 ff ff       	call   c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af8b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001af8f:	e9 78 02 00 00       	jmp    c001b20c <Vm::x87Handler(regs*)+0x97e>
c001af94:	8d 50 18             	lea    edx,[eax+0x18]
c001af97:	80 fa 07             	cmp    dl,0x7
c001af9a:	0f 87 10 fb ff ff    	ja     c001aab0 <Vm::x87Handler(regs*)+0x222>
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	2d e8 00 00 00       	sub    eax,0xe8
c001afa8:	50                   	push   eax
c001afa9:	e8 a0 f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001afae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afb5:	89 c6                	mov    esi,eax
c001afb7:	89 d7                	mov    edi,edx
c001afb9:	e8 90 f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001afbe:	57                   	push   edi
c001afbf:	56                   	push   esi
c001afc0:	52                   	push   edx
c001afc1:	50                   	push   eax
c001afc2:	e8 a7 f6 ff ff       	call   c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001afc7:	83 c4 20             	add    esp,0x20
c001afca:	e8 6c f8 ff ff       	call   c001a83b <Vm::fpuPop()>
c001afcf:	eb 6f                	jmp    c001b040 <Vm::x87Handler(regs*)+0x7b2>
c001afd1:	8d 76 00             	lea    esi,[esi+0x0]
c001afd4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001afd8:	0f 85 22 01 00 00    	jne    c001b100 <Vm::x87Handler(regs*)+0x872>
c001afde:	66 90                	xchg   ax,ax
c001afe0:	83 ec 0c             	sub    esp,0xc
c001afe3:	6a 01                	push   0x1
c001afe5:	e8 64 f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001afea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aff1:	89 c6                	mov    esi,eax
c001aff3:	89 d7                	mov    edi,edx
c001aff5:	e8 54 f7 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001affa:	57                   	push   edi
c001affb:	56                   	push   esi
c001affc:	52                   	push   edx
c001affd:	50                   	push   eax
c001affe:	e8 6b f6 ff ff       	call   c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b003:	83 c4 20             	add    esp,0x20
c001b006:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b00a:	e8 2c f8 ff ff       	call   c001a83b <Vm::fpuPop()>
c001b00f:	e8 27 f8 ff ff       	call   c001a83b <Vm::fpuPop()>
c001b014:	e9 f7 f8 ff ff       	jmp    c001a910 <Vm::x87Handler(regs*)+0x82>
c001b019:	8d 76 00             	lea    esi,[esi+0x0]
c001b01c:	3c d9                	cmp    al,0xd9
c001b01e:	0f 85 e8 02 00 00    	jne    c001b30c <Vm::x87Handler(regs*)+0xa7e>
c001b024:	eb ba                	jmp    c001afe0 <Vm::x87Handler(regs*)+0x752>
c001b026:	66 90                	xchg   ax,ax
c001b028:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b02c:	0f 85 2a 03 00 00    	jne    c001b35c <Vm::x87Handler(regs*)+0xace>
c001b032:	0f b7 05 60 a2 02 c0 	movzx  eax,WORD PTR ds:0xc002a260
c001b039:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b03d:	8d 76 00             	lea    esi,[esi+0x0]
c001b040:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b044:	e9 c7 f8 ff ff       	jmp    c001a910 <Vm::x87Handler(regs*)+0x82>
c001b049:	8d 76 00             	lea    esi,[esi+0x0]
c001b04c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b050:	84 d2                	test   dl,dl
c001b052:	75 10                	jne    c001b064 <Vm::x87Handler(regs*)+0x7d6>
c001b054:	83 ec 0c             	sub    esp,0xc
c001b057:	ff 36                	push   DWORD PTR [esi]
c001b059:	e8 29 f4 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b05e:	e9 39 01 00 00       	jmp    c001b19c <Vm::x87Handler(regs*)+0x90e>
c001b063:	90                   	nop
c001b064:	80 fa 01             	cmp    dl,0x1
c001b067:	75 0f                	jne    c001b078 <Vm::x87Handler(regs*)+0x7ea>
c001b069:	83 ec 0c             	sub    esp,0xc
c001b06c:	ff 36                	push   DWORD PTR [esi]
c001b06e:	e8 14 f4 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b073:	e9 b4 02 00 00       	jmp    c001b32c <Vm::x87Handler(regs*)+0xa9e>
c001b078:	80 fa 04             	cmp    dl,0x4
c001b07b:	75 0f                	jne    c001b08c <Vm::x87Handler(regs*)+0x7fe>
c001b07d:	83 ec 0c             	sub    esp,0xc
c001b080:	ff 36                	push   DWORD PTR [esi]
c001b082:	e8 00 f4 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b087:	e9 9c 01 00 00       	jmp    c001b228 <Vm::x87Handler(regs*)+0x99a>
c001b08c:	80 fa 05             	cmp    dl,0x5
c001b08f:	75 1b                	jne    c001b0ac <Vm::x87Handler(regs*)+0x81e>
c001b091:	83 ec 0c             	sub    esp,0xc
c001b094:	6a 00                	push   0x0
c001b096:	e8 b3 f6 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b09b:	89 c7                	mov    edi,eax
c001b09d:	89 d5                	mov    ebp,edx
c001b09f:	58                   	pop    eax
c001b0a0:	ff 36                	push   DWORD PTR [esi]
c001b0a2:	e8 e0 f3 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b0a7:	e9 bc 01 00 00       	jmp    c001b268 <Vm::x87Handler(regs*)+0x9da>
c001b0ac:	80 fa 06             	cmp    dl,0x6
c001b0af:	75 0f                	jne    c001b0c0 <Vm::x87Handler(regs*)+0x832>
c001b0b1:	83 ec 0c             	sub    esp,0xc
c001b0b4:	ff 36                	push   DWORD PTR [esi]
c001b0b6:	e8 cc f3 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b0bb:	e9 cc 01 00 00       	jmp    c001b28c <Vm::x87Handler(regs*)+0x9fe>
c001b0c0:	31 c0                	xor    eax,eax
c001b0c2:	80 fa 07             	cmp    dl,0x7
c001b0c5:	0f 85 d5 02 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b0cb:	83 ec 0c             	sub    esp,0xc
c001b0ce:	6a 00                	push   0x0
c001b0d0:	e8 79 f6 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b0d5:	89 c7                	mov    edi,eax
c001b0d7:	89 d5                	mov    ebp,edx
c001b0d9:	58                   	pop    eax
c001b0da:	ff 36                	push   DWORD PTR [esi]
c001b0dc:	e8 a6 f3 ff ff       	call   c001a487 <Vm::fpu32ToInternal(unsigned int)>
c001b0e1:	e9 ee 01 00 00       	jmp    c001b2d4 <Vm::x87Handler(regs*)+0xa46>
c001b0e6:	66 90                	xchg   ax,ax
c001b0e8:	80 fa 03             	cmp    dl,0x3
c001b0eb:	0f 85 f7 01 00 00    	jne    c001b2e8 <Vm::x87Handler(regs*)+0xa5a>
c001b0f1:	e8 45 f7 ff ff       	call   c001a83b <Vm::fpuPop()>
c001b0f6:	51                   	push   ecx
c001b0f7:	51                   	push   ecx
c001b0f8:	e9 03 02 00 00       	jmp    c001b300 <Vm::x87Handler(regs*)+0xa72>
c001b0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b100:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b104:	80 fa 01             	cmp    dl,0x1
c001b107:	75 0b                	jne    c001b114 <Vm::x87Handler(regs*)+0x886>
c001b109:	57                   	push   edi
c001b10a:	57                   	push   edi
c001b10b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b10d:	e9 0e 02 00 00       	jmp    c001b320 <Vm::x87Handler(regs*)+0xa92>
c001b112:	66 90                	xchg   ax,ax
c001b114:	80 fa 04             	cmp    dl,0x4
c001b117:	75 13                	jne    c001b12c <Vm::x87Handler(regs*)+0x89e>
c001b119:	31 d2                	xor    edx,edx
c001b11b:	51                   	push   ecx
c001b11c:	51                   	push   ecx
c001b11d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b11f:	52                   	push   edx
c001b120:	50                   	push   eax
c001b121:	e8 4a f4 ff ff       	call   c001a570 <Vm::fpuLongToFloat(long long)>
c001b126:	e9 fd 00 00 00       	jmp    c001b228 <Vm::x87Handler(regs*)+0x99a>
c001b12b:	90                   	nop
c001b12c:	31 c0                	xor    eax,eax
c001b12e:	80 fa 07             	cmp    dl,0x7
c001b131:	0f 85 69 02 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b137:	83 ec 0c             	sub    esp,0xc
c001b13a:	6a 00                	push   0x0
c001b13c:	e8 0d f6 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b141:	89 c7                	mov    edi,eax
c001b143:	89 d5                	mov    ebp,edx
c001b145:	58                   	pop    eax
c001b146:	8b 06                	mov    eax,DWORD PTR [esi]
c001b148:	5a                   	pop    edx
c001b149:	31 d2                	xor    edx,edx
c001b14b:	52                   	push   edx
c001b14c:	50                   	push   eax
c001b14d:	e8 1e f4 ff ff       	call   c001a570 <Vm::fpuLongToFloat(long long)>
c001b152:	e9 7d 01 00 00       	jmp    c001b2d4 <Vm::x87Handler(regs*)+0xa46>
c001b157:	90                   	nop
c001b158:	84 d2                	test   dl,dl
c001b15a:	75 10                	jne    c001b16c <Vm::x87Handler(regs*)+0x8de>
c001b15c:	31 d2                	xor    edx,edx
c001b15e:	55                   	push   ebp
c001b15f:	55                   	push   ebp
c001b160:	8b 06                	mov    eax,DWORD PTR [esi]
c001b162:	52                   	push   edx
c001b163:	50                   	push   eax
c001b164:	e9 03 02 00 00       	jmp    c001b36c <Vm::x87Handler(regs*)+0xade>
c001b169:	8d 76 00             	lea    esi,[esi+0x0]
c001b16c:	31 c0                	xor    eax,eax
c001b16e:	80 fa 02             	cmp    dl,0x2
c001b171:	0f 85 29 02 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b177:	83 ec 0c             	sub    esp,0xc
c001b17a:	6a 00                	push   0x0
c001b17c:	e8 cd f5 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b181:	59                   	pop    ecx
c001b182:	5f                   	pop    edi
c001b183:	e9 18 f9 ff ff       	jmp    c001aaa0 <Vm::x87Handler(regs*)+0x212>
c001b188:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b18c:	84 d2                	test   dl,dl
c001b18e:	75 2c                	jne    c001b1bc <Vm::x87Handler(regs*)+0x92e>
c001b190:	50                   	push   eax
c001b191:	50                   	push   eax
c001b192:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b195:	ff 36                	push   DWORD PTR [esi]
c001b197:	e8 30 f3 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b19c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1a3:	89 c6                	mov    esi,eax
c001b1a5:	89 d7                	mov    edi,edx
c001b1a7:	e8 a2 f5 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b1ac:	57                   	push   edi
c001b1ad:	56                   	push   esi
c001b1ae:	52                   	push   edx
c001b1af:	50                   	push   eax
c001b1b0:	e8 0f f5 ff ff       	call   c001a6c4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b1b5:	e9 8e 01 00 00       	jmp    c001b348 <Vm::x87Handler(regs*)+0xaba>
c001b1ba:	66 90                	xchg   ax,ax
c001b1bc:	80 fa 01             	cmp    dl,0x1
c001b1bf:	75 13                	jne    c001b1d4 <Vm::x87Handler(regs*)+0x946>
c001b1c1:	50                   	push   eax
c001b1c2:	50                   	push   eax
c001b1c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1c6:	ff 36                	push   DWORD PTR [esi]
c001b1c8:	e8 ff f2 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b1cd:	e9 5a 01 00 00       	jmp    c001b32c <Vm::x87Handler(regs*)+0xa9e>
c001b1d2:	66 90                	xchg   ax,ax
c001b1d4:	80 fa 02             	cmp    dl,0x2
c001b1d7:	0f 85 03 f9 ff ff    	jne    c001aae0 <Vm::x87Handler(regs*)+0x252>
c001b1dd:	55                   	push   ebp
c001b1de:	55                   	push   ebp
c001b1df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1e2:	ff 36                	push   DWORD PTR [esi]
c001b1e4:	e8 e3 f2 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b1e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1f0:	89 c6                	mov    esi,eax
c001b1f2:	89 d7                	mov    edi,edx
c001b1f4:	e8 55 f5 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b1f9:	57                   	push   edi
c001b1fa:	56                   	push   esi
c001b1fb:	52                   	push   edx
c001b1fc:	50                   	push   eax
c001b1fd:	e8 6c f4 ff ff       	call   c001a66e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b206:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b209:	8d 76 00             	lea    esi,[esi+0x0]
c001b20c:	83 c4 20             	add    esp,0x20
c001b20f:	e9 fc f6 ff ff       	jmp    c001a910 <Vm::x87Handler(regs*)+0x82>
c001b214:	80 fa 04             	cmp    dl,0x4
c001b217:	75 2f                	jne    c001b248 <Vm::x87Handler(regs*)+0x9ba>
c001b219:	51                   	push   ecx
c001b21a:	51                   	push   ecx
c001b21b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b21e:	ff 36                	push   DWORD PTR [esi]
c001b220:	e8 a7 f2 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b225:	8d 76 00             	lea    esi,[esi+0x0]
c001b228:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b22f:	89 c6                	mov    esi,eax
c001b231:	89 d7                	mov    edi,edx
c001b233:	e8 16 f5 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b238:	57                   	push   edi
c001b239:	56                   	push   esi
c001b23a:	52                   	push   edx
c001b23b:	50                   	push   eax
c001b23c:	e8 ad f4 ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b241:	e9 02 01 00 00       	jmp    c001b348 <Vm::x87Handler(regs*)+0xaba>
c001b246:	66 90                	xchg   ax,ax
c001b248:	80 fa 05             	cmp    dl,0x5
c001b24b:	75 2b                	jne    c001b278 <Vm::x87Handler(regs*)+0x9ea>
c001b24d:	83 ec 0c             	sub    esp,0xc
c001b250:	6a 00                	push   0x0
c001b252:	e8 f7 f4 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b257:	89 c7                	mov    edi,eax
c001b259:	89 d5                	mov    ebp,edx
c001b25b:	58                   	pop    eax
c001b25c:	5a                   	pop    edx
c001b25d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b260:	ff 36                	push   DWORD PTR [esi]
c001b262:	e8 65 f2 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b267:	90                   	nop
c001b268:	83 c4 10             	add    esp,0x10
c001b26b:	55                   	push   ebp
c001b26c:	57                   	push   edi
c001b26d:	52                   	push   edx
c001b26e:	50                   	push   eax
c001b26f:	e8 7a f4 ff ff       	call   c001a6ee <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b274:	eb 6a                	jmp    c001b2e0 <Vm::x87Handler(regs*)+0xa52>
c001b276:	66 90                	xchg   ax,ax
c001b278:	80 fa 06             	cmp    dl,0x6
c001b27b:	75 2f                	jne    c001b2ac <Vm::x87Handler(regs*)+0xa1e>
c001b27d:	51                   	push   ecx
c001b27e:	51                   	push   ecx
c001b27f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b282:	ff 36                	push   DWORD PTR [esi]
c001b284:	e8 43 f2 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b289:	8d 76 00             	lea    esi,[esi+0x0]
c001b28c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b293:	89 c6                	mov    esi,eax
c001b295:	89 d7                	mov    edi,edx
c001b297:	e8 b2 f4 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b29c:	57                   	push   edi
c001b29d:	56                   	push   esi
c001b29e:	52                   	push   edx
c001b29f:	50                   	push   eax
c001b2a0:	e8 77 f4 ff ff       	call   c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b2a5:	e9 9e 00 00 00       	jmp    c001b348 <Vm::x87Handler(regs*)+0xaba>
c001b2aa:	66 90                	xchg   ax,ax
c001b2ac:	31 c0                	xor    eax,eax
c001b2ae:	80 fa 07             	cmp    dl,0x7
c001b2b1:	0f 85 e9 00 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	6a 00                	push   0x0
c001b2bc:	e8 8d f4 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b2c1:	89 c7                	mov    edi,eax
c001b2c3:	89 d5                	mov    ebp,edx
c001b2c5:	58                   	pop    eax
c001b2c6:	5a                   	pop    edx
c001b2c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b2ca:	ff 36                	push   DWORD PTR [esi]
c001b2cc:	e8 fb f1 ff ff       	call   c001a4cc <Vm::fpu64ToInternal(unsigned long long)>
c001b2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d4:	83 c4 10             	add    esp,0x10
c001b2d7:	55                   	push   ebp
c001b2d8:	57                   	push   edi
c001b2d9:	52                   	push   edx
c001b2da:	50                   	push   eax
c001b2db:	e8 3c f4 ff ff       	call   c001a71c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b2e0:	83 c4 0c             	add    esp,0xc
c001b2e3:	eb 67                	jmp    c001b34c <Vm::x87Handler(regs*)+0xabe>
c001b2e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2e8:	31 c0                	xor    eax,eax
c001b2ea:	80 fa 02             	cmp    dl,0x2
c001b2ed:	0f 85 ad 00 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b2f3:	83 ec 0c             	sub    esp,0xc
c001b2f6:	6a 00                	push   0x0
c001b2f8:	e8 51 f4 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b2fd:	59                   	pop    ecx
c001b2fe:	5f                   	pop    edi
c001b2ff:	90                   	nop
c001b300:	52                   	push   edx
c001b301:	50                   	push   eax
c001b302:	e8 77 f1 ff ff       	call   c001a47e <Vm::fpuInternalTo64(unsigned long long)>
c001b307:	e9 84 00 00 00       	jmp    c001b390 <Vm::x87Handler(regs*)+0xb02>
c001b30c:	31 c0                	xor    eax,eax
c001b30e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b313:	0f 85 87 00 00 00    	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b319:	50                   	push   eax
c001b31a:	50                   	push   eax
c001b31b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b31e:	66 90                	xchg   ax,ax
c001b320:	31 d2                	xor    edx,edx
c001b322:	52                   	push   edx
c001b323:	50                   	push   eax
c001b324:	e8 47 f2 ff ff       	call   c001a570 <Vm::fpuLongToFloat(long long)>
c001b329:	8d 76 00             	lea    esi,[esi+0x0]
c001b32c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b333:	89 c6                	mov    esi,eax
c001b335:	89 d7                	mov    edi,edx
c001b337:	e8 12 f4 ff ff       	call   c001a74e <Vm::fpuGetReg(int)>
c001b33c:	57                   	push   edi
c001b33d:	56                   	push   esi
c001b33e:	52                   	push   edx
c001b33f:	50                   	push   eax
c001b340:	e8 b8 f3 ff ff       	call   c001a6fd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	83 c4 1c             	add    esp,0x1c
c001b34b:	90                   	nop
c001b34c:	52                   	push   edx
c001b34d:	50                   	push   eax
c001b34e:	6a 00                	push   0x0
c001b350:	e8 3c f4 ff ff       	call   c001a791 <Vm::fpuSetReg(int, unsigned long long)>
c001b355:	e9 7a f7 ff ff       	jmp    c001aad4 <Vm::x87Handler(regs*)+0x246>
c001b35a:	66 90                	xchg   ax,ax
c001b35c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b360:	80 fa 05             	cmp    dl,0x5
c001b363:	75 13                	jne    c001b378 <Vm::x87Handler(regs*)+0xaea>
c001b365:	55                   	push   ebp
c001b366:	55                   	push   ebp
c001b367:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b36a:	ff 36                	push   DWORD PTR [esi]
c001b36c:	e8 c3 f1 ff ff       	call   c001a534 <Vm::fpuULongToFloat(unsigned long long)>
c001b371:	e9 52 f7 ff ff       	jmp    c001aac8 <Vm::x87Handler(regs*)+0x23a>
c001b376:	66 90                	xchg   ax,ax
c001b378:	31 c0                	xor    eax,eax
c001b37a:	80 fa 07             	cmp    dl,0x7
c001b37d:	75 21                	jne    c001b3a0 <Vm::x87Handler(regs*)+0xb12>
c001b37f:	e8 b7 f4 ff ff       	call   c001a83b <Vm::fpuPop()>
c001b384:	51                   	push   ecx
c001b385:	51                   	push   ecx
c001b386:	52                   	push   edx
c001b387:	50                   	push   eax
c001b388:	e8 48 f1 ff ff       	call   c001a4d5 <Vm::fpuFloatToLong(unsigned long long)>
c001b38d:	8d 76 00             	lea    esi,[esi+0x0]
c001b390:	83 c4 10             	add    esp,0x10
c001b393:	89 06                	mov    DWORD PTR [esi],eax
c001b395:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b398:	e9 7b f7 ff ff       	jmp    c001ab18 <Vm::x87Handler(regs*)+0x28a>
c001b39d:	8d 76 00             	lea    esi,[esi+0x0]
c001b3a0:	83 c4 1c             	add    esp,0x1c
c001b3a3:	5b                   	pop    ebx
c001b3a4:	5e                   	pop    esi
c001b3a5:	5f                   	pop    edi
c001b3a6:	5d                   	pop    ebp
c001b3a7:	c3                   	ret    

c001b3a8 <__static_initialization_and_destruction_0(int, int)>:
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b3b0:	75 1a                	jne    c001b3cc <__static_initialization_and_destruction_0(int, int)+0x24>
c001b3b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b3ba:	75 10                	jne    c001b3cc <__static_initialization_and_destruction_0(int, int)+0x24>
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	68 60 a2 02 c0       	push   0xc002a260
c001b3c4:	e8 23 86 00 00       	call   c00239ec <Vm::_FPUState::_FPUState()>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	90                   	nop
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	c3                   	ret    
c001b3d1:	8d 76 00             	lea    esi,[esi+0x0]

c001b3d4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	83 ec 08             	sub    esp,0x8
c001b3da:	68 ff ff 00 00       	push   0xffff
c001b3df:	6a 01                	push   0x1
c001b3e1:	e8 c2 ff ff ff       	call   c001b3a8 <__static_initialization_and_destruction_0(int, int)>
c001b3e6:	83 c4 10             	add    esp,0x10
c001b3e9:	83 c4 0c             	add    esp,0xc
c001b3ec:	c3                   	ret    
c001b3ed:	66 90                	xchg   ax,ax
c001b3ef:	90                   	nop

c001b3f0 <FAT::getName()>:
c001b3f0:	b8 44 70 02 c0       	mov    eax,0xc0027044
c001b3f5:	c3                   	ret    
c001b3f6:	66 90                	xchg   ax,ax

c001b3f8 <FAT::tell(void*, unsigned long long*)>:
c001b3f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b3fd:	75 09                	jne    c001b408 <FAT::tell(void*, unsigned long long*)+0x10>
c001b3ff:	b8 04 00 00 00       	mov    eax,0x4
c001b404:	c3                   	ret    
c001b405:	8d 76 00             	lea    esi,[esi+0x0]
c001b408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b40d:	75 09                	jne    c001b418 <FAT::tell(void*, unsigned long long*)+0x20>
c001b40f:	b8 04 00 00 00       	mov    eax,0x4
c001b414:	c3                   	ret    
c001b415:	8d 76 00             	lea    esi,[esi+0x0]
c001b418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b41c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b41f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b426:	89 01                	mov    DWORD PTR [ecx],eax
c001b428:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b42b:	b8 00 00 00 00       	mov    eax,0x0
c001b430:	c3                   	ret    
c001b431:	90                   	nop
c001b432:	66 90                	xchg   ax,ax

c001b434 <FAT::stat(void*, unsigned long long*)>:
c001b434:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b439:	75 09                	jne    c001b444 <FAT::stat(void*, unsigned long long*)+0x10>
c001b43b:	b8 04 00 00 00       	mov    eax,0x4
c001b440:	c3                   	ret    
c001b441:	8d 76 00             	lea    esi,[esi+0x0]
c001b444:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b449:	75 09                	jne    c001b454 <FAT::stat(void*, unsigned long long*)+0x20>
c001b44b:	b8 04 00 00 00       	mov    eax,0x4
c001b450:	c3                   	ret    
c001b451:	8d 76 00             	lea    esi,[esi+0x0]
c001b454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b458:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b45b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b45e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b462:	89 01                	mov    DWORD PTR [ecx],eax
c001b464:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b467:	b8 00 00 00 00       	mov    eax,0x0
c001b46c:	c3                   	ret    
c001b46d:	90                   	nop
c001b46e:	66 90                	xchg   ax,ax

c001b470 <FAT::~FAT()>:
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	ba 90 70 02 c0       	mov    edx,0xc0027090
c001b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47c:	89 10                	mov    DWORD PTR [eax],edx
c001b47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b482:	83 ec 0c             	sub    esp,0xc
c001b485:	50                   	push   eax
c001b486:	e8 ef 1e ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c001b48b:	83 c4 10             	add    esp,0x10
c001b48e:	90                   	nop
c001b48f:	83 c4 0c             	add    esp,0xc
c001b492:	c3                   	ret    
c001b493:	90                   	nop

c001b494 <FAT::~FAT()>:
c001b494:	83 ec 0c             	sub    esp,0xc
c001b497:	83 ec 0c             	sub    esp,0xc
c001b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b49e:	e8 cd ff ff ff       	call   c001b470 <FAT::~FAT()>
c001b4a3:	83 c4 10             	add    esp,0x10
c001b4a6:	83 ec 08             	sub    esp,0x8
c001b4a9:	6a 08                	push   0x8
c001b4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4af:	e8 aa 1a ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001b4b4:	83 c4 10             	add    esp,0x10
c001b4b7:	83 c4 0c             	add    esp,0xc
c001b4ba:	c3                   	ret    
c001b4bb:	90                   	nop

c001b4bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b4bc:	83 ec 1c             	sub    esp,0x1c
c001b4bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b4c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b4cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4cf:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b4d6:	83 f8 ff             	cmp    eax,0xffffffff
c001b4d9:	75 35                	jne    c001b510 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b4db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4df:	88 c2                	mov    dl,al
c001b4e1:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b4e6:	01 d0                	add    eax,edx
c001b4e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4ec:	8b 15 c0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2c0
c001b4f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4f6:	89 14 85 e0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d20],edx
c001b4fd:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b502:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b506:	89 14 85 60 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ca0],edx
c001b50d:	eb 19                	jmp    c001b528 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b50f:	90                   	nop
c001b510:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b514:	88 c2                	mov    dl,al
c001b516:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b51a:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b521:	01 d0                	add    eax,edx
c001b523:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b527:	90                   	nop
c001b528:	83 ec 04             	sub    esp,0x4
c001b52b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b52f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b533:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b537:	50                   	push   eax
c001b538:	e8 ed b6 fe ff       	call   c0006c2a <f_getlabel>
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b544:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b549:	75 09                	jne    c001b554 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b54b:	b8 00 00 00 00       	mov    eax,0x0
c001b550:	eb 0a                	jmp    c001b55c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b552:	66 90                	xchg   ax,ax
c001b554:	b8 01 00 00 00       	mov    eax,0x1
c001b559:	8d 76 00             	lea    esi,[esi+0x0]
c001b55c:	83 c4 1c             	add    esp,0x1c
c001b55f:	c3                   	ret    

c001b560 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b560:	57                   	push   edi
c001b561:	83 ec 58             	sub    esp,0x58
c001b564:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b56c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b570:	b9 0f 00 00 00       	mov    ecx,0xf
c001b575:	b8 00 00 00 00       	mov    eax,0x0
c001b57a:	fc                   	cld    
c001b57b:	89 d7                	mov    edi,edx
c001b57d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b57f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b583:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b58a:	83 f8 ff             	cmp    eax,0xffffffff
c001b58d:	75 35                	jne    c001b5c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b58f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b593:	88 c2                	mov    dl,al
c001b595:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b59a:	01 d0                	add    eax,edx
c001b59c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b5a0:	8b 15 c0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2c0
c001b5a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b5aa:	89 14 85 e0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d20],edx
c001b5b1:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b5b6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b5ba:	89 14 85 60 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ca0],edx
c001b5c1:	eb 19                	jmp    c001b5dc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b5c3:	90                   	nop
c001b5c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b5c8:	88 c2                	mov    dl,al
c001b5ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b5ce:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b5d5:	01 d0                	add    eax,edx
c001b5d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b5db:	90                   	nop
c001b5dc:	83 ec 08             	sub    esp,0x8
c001b5df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b5e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5e7:	50                   	push   eax
c001b5e8:	e8 8b 52 fe ff       	call   c0000878 <strcat>
c001b5ed:	83 c4 10             	add    esp,0x10
c001b5f0:	83 ec 0c             	sub    esp,0xc
c001b5f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5f7:	50                   	push   eax
c001b5f8:	e8 1b b8 fe ff       	call   c0006e18 <f_setlabel>
c001b5fd:	83 c4 10             	add    esp,0x10
c001b600:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b604:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b609:	75 09                	jne    c001b614 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b60b:	b8 00 00 00 00       	mov    eax,0x0
c001b610:	eb 0a                	jmp    c001b61c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b612:	66 90                	xchg   ax,ax
c001b614:	b8 01 00 00 00       	mov    eax,0x1
c001b619:	8d 76 00             	lea    esi,[esi+0x0]
c001b61c:	83 c4 58             	add    esp,0x58
c001b61f:	5f                   	pop    edi
c001b620:	c3                   	ret    
c001b621:	90                   	nop
c001b622:	66 90                	xchg   ax,ax

c001b624 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b624:	83 ec 2c             	sub    esp,0x2c
c001b627:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b62f:	83 ec 08             	sub    esp,0x8
c001b632:	68 68 70 02 c0       	push   0xc0027068
c001b637:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b63b:	e8 84 51 fe ff       	call   c00007c4 <strcmp>
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	85 c0                	test   eax,eax
c001b645:	0f 94 c0             	sete   al
c001b648:	84 c0                	test   al,al
c001b64a:	74 10                	je     c001b65c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b64c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b654:	e9 b3 00 00 00       	jmp    c001b70c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	83 ec 08             	sub    esp,0x8
c001b65f:	68 5a 70 02 c0       	push   0xc002705a
c001b664:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b668:	e8 57 51 fe ff       	call   c00007c4 <strcmp>
c001b66d:	83 c4 10             	add    esp,0x10
c001b670:	85 c0                	test   eax,eax
c001b672:	0f 94 c0             	sete   al
c001b675:	84 c0                	test   al,al
c001b677:	74 0f                	je     c001b688 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b679:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b681:	e9 86 00 00 00       	jmp    c001b70c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b686:	66 90                	xchg   ax,ax
c001b688:	83 ec 08             	sub    esp,0x8
c001b68b:	68 60 70 02 c0       	push   0xc0027060
c001b690:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b694:	e8 2b 51 fe ff       	call   c00007c4 <strcmp>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	85 c0                	test   eax,eax
c001b69e:	0f 94 c0             	sete   al
c001b6a1:	84 c0                	test   al,al
c001b6a3:	74 0b                	je     c001b6b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b6a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b6ad:	eb 5d                	jmp    c001b70c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6af:	90                   	nop
c001b6b0:	83 ec 08             	sub    esp,0x8
c001b6b3:	68 4c 41 02 c0       	push   0xc002414c
c001b6b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6bc:	e8 03 51 fe ff       	call   c00007c4 <strcmp>
c001b6c1:	83 c4 10             	add    esp,0x10
c001b6c4:	85 c0                	test   eax,eax
c001b6c6:	0f 94 c0             	sete   al
c001b6c9:	84 c0                	test   al,al
c001b6cb:	74 0b                	je     c001b6d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b6cd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b6d5:	eb 35                	jmp    c001b70c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6d7:	90                   	nop
c001b6d8:	83 ec 08             	sub    esp,0x8
c001b6db:	68 66 70 02 c0       	push   0xc0027066
c001b6e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6e4:	e8 db 50 fe ff       	call   c00007c4 <strcmp>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	85 c0                	test   eax,eax
c001b6ee:	0f 94 c0             	sete   al
c001b6f1:	84 c0                	test   al,al
c001b6f3:	74 0b                	je     c001b700 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b6f5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b6fd:	eb 0d                	jmp    c001b70c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6ff:	90                   	nop
c001b700:	b8 08 00 00 00       	mov    eax,0x8
c001b705:	e9 ea 00 00 00       	jmp    c001b7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b70a:	66 90                	xchg   ax,ax
c001b70c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b713:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b718:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b71c:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b723:	83 f8 ff             	cmp    eax,0xffffffff
c001b726:	75 34                	jne    c001b75c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b728:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b72c:	88 c2                	mov    dl,al
c001b72e:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b733:	01 d0                	add    eax,edx
c001b735:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b739:	8b 15 c0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2c0
c001b73f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b743:	89 14 85 e0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d20],edx
c001b74a:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b74f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b753:	89 14 85 60 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ca0],edx
c001b75a:	eb 18                	jmp    c001b774 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b75c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b760:	88 c2                	mov    dl,al
c001b762:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b766:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b76d:	01 d0                	add    eax,edx
c001b76f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b773:	90                   	nop
c001b774:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b778:	88 04 24             	mov    BYTE PTR [esp],al
c001b77b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b77f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b783:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b78b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b790:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b798:	83 ec 0c             	sub    esp,0xc
c001b79b:	68 00 20 00 00       	push   0x2000
c001b7a0:	e8 ae e5 fe ff       	call   c0009d53 <malloc>
c001b7a5:	83 c4 10             	add    esp,0x10
c001b7a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7ac:	68 00 20 00 00       	push   0x2000
c001b7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b7b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7b9:	50                   	push   eax
c001b7ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b7be:	50                   	push   eax
c001b7bf:	e8 d5 bc fe ff       	call   c0007499 <f_mkfs>
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b7cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b7d0:	75 0a                	jne    c001b7dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b7d2:	b8 00 00 00 00       	mov    eax,0x0
c001b7d7:	eb 1b                	jmp    c001b7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7dc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b7e1:	75 09                	jne    c001b7ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b7e3:	b8 09 00 00 00       	mov    eax,0x9
c001b7e8:	eb 0a                	jmp    c001b7f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b7ea:	66 90                	xchg   ax,ax
c001b7ec:	b8 01 00 00 00       	mov    eax,0x1
c001b7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f4:	83 c4 2c             	add    esp,0x2c
c001b7f7:	c3                   	ret    

c001b7f8 <FAT::tryMount(LogicalDisk*, int)>:
c001b7f8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b7fe:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b803:	83 f8 14             	cmp    eax,0x14
c001b806:	75 18                	jne    c001b820 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	68 6c 70 02 c0       	push   0xc002706c
c001b810:	e8 ec 97 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	b0 00                	mov    al,0x0
c001b81a:	e9 e9 01 00 00       	jmp    c001ba08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b81f:	90                   	nop
c001b820:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b827:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b82d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b833:	3d 00 02 00 00       	cmp    eax,0x200
c001b838:	74 0a                	je     c001b844 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b83a:	b0 00                	mov    al,0x0
c001b83c:	e9 c7 01 00 00       	jmp    c001ba08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b841:	8d 76 00             	lea    esi,[esi+0x0]
c001b844:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b84c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b853:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001b85a:	83 f8 ff             	cmp    eax,0xffffffff
c001b85d:	74 09                	je     c001b868 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b85f:	b0 01                	mov    al,0x1
c001b861:	e9 a2 01 00 00       	jmp    c001ba08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b866:	66 90                	xchg   ax,ax
c001b868:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b872:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b87a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b881:	88 c2                	mov    dl,al
c001b883:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b888:	01 d0                	add    eax,edx
c001b88a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b891:	8b 15 c0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2c0
c001b897:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b89e:	89 14 85 e0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d20],edx
c001b8a5:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b8aa:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b8b1:	89 14 85 60 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ca0],edx
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	68 54 02 00 00       	push   0x254
c001b8c0:	e8 8e e4 fe ff       	call   c0009d53 <malloc>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b8cf:	83 ec 04             	sub    esp,0x4
c001b8d2:	6a 00                	push   0x0
c001b8d4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b8db:	50                   	push   eax
c001b8dc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b8e3:	e8 39 95 fe ff       	call   c0004e21 <f_mount>
c001b8e8:	83 c4 10             	add    esp,0x10
c001b8eb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b8f2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b8fa:	74 1c                	je     c001b918 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b906:	e8 68 e4 fe ff       	call   c0009d73 <rfree>
c001b90b:	83 c4 10             	add    esp,0x10
c001b90e:	b0 00                	mov    al,0x0
c001b910:	e9 f3 00 00 00       	jmp    c001ba08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b915:	8d 76 00             	lea    esi,[esi+0x0]
c001b918:	83 ec 04             	sub    esp,0x4
c001b91b:	68 00 01 00 00       	push   0x100
c001b920:	6a 00                	push   0x0
c001b922:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b929:	50                   	push   eax
c001b92a:	e8 4d 4d fe ff       	call   c000067c <memset>
c001b92f:	83 c4 10             	add    esp,0x10
c001b932:	83 ec 08             	sub    esp,0x8
c001b935:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b93c:	50                   	push   eax
c001b93d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b944:	50                   	push   eax
c001b945:	e8 2e 4f fe ff       	call   c0000878 <strcat>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	83 ec 08             	sub    esp,0x8
c001b950:	68 7a 70 02 c0       	push   0xc002707a
c001b955:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b95c:	50                   	push   eax
c001b95d:	e8 16 4f fe ff       	call   c0000878 <strcat>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	83 ec 04             	sub    esp,0x4
c001b968:	6a 01                	push   0x1
c001b96a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b971:	50                   	push   eax
c001b972:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b976:	50                   	push   eax
c001b977:	e8 07 95 fe ff       	call   c0004e83 <f_open>
c001b97c:	83 c4 10             	add    esp,0x10
c001b97f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b986:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b98d:	85 c0                	test   eax,eax
c001b98f:	74 0b                	je     c001b99c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b991:	78 31                	js     c001b9c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b993:	83 e8 04             	sub    eax,0x4
c001b996:	83 f8 01             	cmp    eax,0x1
c001b999:	77 29                	ja     c001b9c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b99b:	90                   	nop
c001b99c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b9a4:	83 ec 0c             	sub    esp,0xc
c001b9a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b9ab:	50                   	push   eax
c001b9ac:	e8 24 a0 fe ff       	call   c00059d5 <f_close>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	90                   	nop
c001b9b5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b9bd:	74 41                	je     c001ba00 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b9bf:	eb 33                	jmp    c001b9f4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b9c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c4:	83 ec 0c             	sub    esp,0xc
c001b9c7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b9ce:	e8 a0 e3 fe ff       	call   c0009d73 <rfree>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	83 ec 04             	sub    esp,0x4
c001b9d9:	6a 00                	push   0x0
c001b9db:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b9e2:	50                   	push   eax
c001b9e3:	6a 00                	push   0x0
c001b9e5:	e8 37 94 fe ff       	call   c0004e21 <f_mount>
c001b9ea:	83 c4 10             	add    esp,0x10
c001b9ed:	b0 00                	mov    al,0x0
c001b9ef:	eb 17                	jmp    c001ba08 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f4:	a1 c0 a2 02 c0       	mov    eax,ds:0xc002a2c0
c001b9f9:	40                   	inc    eax
c001b9fa:	a3 c0 a2 02 c0       	mov    ds:0xc002a2c0,eax
c001b9ff:	90                   	nop
c001ba00:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ba07:	90                   	nop
c001ba08:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ba0e:	c3                   	ret    
c001ba0f:	90                   	nop

c001ba10 <FAT::allocateSwapfile(char const*, int)>:
c001ba10:	55                   	push   ebp
c001ba11:	57                   	push   edi
c001ba12:	56                   	push   esi
c001ba13:	53                   	push   ebx
c001ba14:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ba1a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ba25:	83 ec 0c             	sub    esp,0xc
c001ba28:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ba2f:	e8 1f e3 fe ff       	call   c0009d53 <malloc>
c001ba34:	83 c4 10             	add    esp,0x10
c001ba37:	89 c7                	mov    edi,eax
c001ba39:	a1 f0 a1 02 c0       	mov    eax,ds:0xc002a1f0
c001ba3e:	83 ec 04             	sub    esp,0x4
c001ba41:	50                   	push   eax
c001ba42:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ba49:	57                   	push   edi
c001ba4a:	e8 5b 1b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001ba4f:	83 c4 10             	add    esp,0x10
c001ba52:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ba59:	83 ec 04             	sub    esp,0x4
c001ba5c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ba60:	50                   	push   eax
c001ba61:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba65:	50                   	push   eax
c001ba66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba6d:	e8 be 1e ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ba7c:	c1 e0 14             	shl    eax,0x14
c001ba7f:	89 c7                	mov    edi,eax
c001ba81:	89 c5                	mov    ebp,eax
c001ba83:	c1 fd 1f             	sar    ebp,0x1f
c001ba86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba8e:	89 f9                	mov    ecx,edi
c001ba90:	31 c1                	xor    ecx,eax
c001ba92:	89 cb                	mov    ebx,ecx
c001ba94:	89 e9                	mov    ecx,ebp
c001ba96:	31 d1                	xor    ecx,edx
c001ba98:	89 ce                	mov    esi,ecx
c001ba9a:	89 f0                	mov    eax,esi
c001ba9c:	09 d8                	or     eax,ebx
c001ba9e:	0f 84 98 00 00 00    	je     c001bb3c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001baa4:	83 ec 0c             	sub    esp,0xc
c001baa7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001baae:	e8 49 1d ff ff       	call   c000d7fc <File::unlink()>
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	83 ec 08             	sub    esp,0x8
c001bab9:	6a 12                	push   0x12
c001babb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bac2:	e8 bd 1b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bad1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bad7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bade:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bae5:	c1 e0 14             	shl    eax,0x14
c001bae8:	99                   	cdq    
c001bae9:	6a 01                	push   0x1
c001baeb:	52                   	push   edx
c001baec:	50                   	push   eax
c001baed:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001baf4:	e8 8c b5 fe ff       	call   c0007085 <f_expand>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb03:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb05:	83 c0 10             	add    eax,0x10
c001bb08:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb0a:	83 ec 0c             	sub    esp,0xc
c001bb0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bb11:	52                   	push   edx
c001bb12:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bb16:	52                   	push   edx
c001bb17:	6a 00                	push   0x0
c001bb19:	68 00 04 00 00       	push   0x400
c001bb1e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bb25:	ff d0                	call   eax
c001bb27:	83 c4 20             	add    esp,0x20
c001bb2a:	83 ec 0c             	sub    esp,0xc
c001bb2d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb34:	e8 a9 1b ff ff       	call   c000d6e2 <File::close()>
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	83 ec 08             	sub    esp,0x8
c001bb3f:	6a 01                	push   0x1
c001bb41:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb48:	e8 37 1b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c001bb4d:	83 c4 10             	add    esp,0x10
c001bb50:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb57:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb59:	83 c0 0c             	add    eax,0xc
c001bb5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb5e:	83 ec 0c             	sub    esp,0xc
c001bb61:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bb65:	52                   	push   edx
c001bb66:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bb6a:	52                   	push   edx
c001bb6b:	6a 00                	push   0x0
c001bb6d:	6a 04                	push   0x4
c001bb6f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bb76:	ff d0                	call   eax
c001bb78:	83 c4 20             	add    esp,0x20
c001bb7b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb82:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bb88:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bb8f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bb96:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bb99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bb9c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bba3:	83 ec 0c             	sub    esp,0xc
c001bba6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bbad:	e8 30 1b ff ff       	call   c000d6e2 <File::close()>
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bbbc:	ba 00 00 00 00       	mov    edx,0x0
c001bbc1:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bbc7:	5b                   	pop    ebx
c001bbc8:	5e                   	pop    esi
c001bbc9:	5f                   	pop    edi
c001bbca:	5d                   	pop    ebp
c001bbcb:	c3                   	ret    

c001bbcc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bbcc:	57                   	push   edi
c001bbcd:	56                   	push   esi
c001bbce:	53                   	push   ebx
c001bbcf:	81 ec 50 02 00 00    	sub    esp,0x250
c001bbd5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bbdd:	74 0d                	je     c001bbec <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bbdf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bbe7:	75 0f                	jne    c001bbf8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbec:	b8 04 00 00 00       	mov    eax,0x4
c001bbf1:	e9 36 01 00 00       	jmp    c001bd2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bbf6:	66 90                	xchg   ax,ax
c001bbf8:	83 ec 08             	sub    esp,0x8
c001bbfb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bc02:	50                   	push   eax
c001bc03:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bc0a:	e8 d0 a3 fe ff       	call   c0005fdf <f_readdir>
c001bc0f:	83 c4 10             	add    esp,0x10
c001bc12:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bc19:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bc2a:	83 c0 1a             	add    eax,0x1a
c001bc2d:	50                   	push   eax
c001bc2e:	e8 65 4a fe ff       	call   c0000698 <strlen>
c001bc33:	83 c4 10             	add    esp,0x10
c001bc36:	ba 00 00 00 00       	mov    edx,0x0
c001bc3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bc43:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bc4a:	0f b6 c0             	movzx  eax,al
c001bc4d:	83 e0 10             	and    eax,0x10
c001bc50:	74 0a                	je     c001bc5c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bc52:	b8 02 00 00 00       	mov    eax,0x2
c001bc57:	eb 0b                	jmp    c001bc64 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bc59:	8d 76 00             	lea    esi,[esi+0x0]
c001bc5c:	b8 01 00 00 00       	mov    eax,0x1
c001bc61:	8d 76 00             	lea    esi,[esi+0x0]
c001bc64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc68:	83 ec 08             	sub    esp,0x8
c001bc6b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bc72:	83 c0 1a             	add    eax,0x1a
c001bc75:	50                   	push   eax
c001bc76:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc7a:	83 c0 10             	add    eax,0x10
c001bc7d:	50                   	push   eax
c001bc7e:	e8 b5 4a fe ff       	call   c0000738 <strcpy>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bc8d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bc94:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bc98:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bc9f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bca6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bcad:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bcb4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bcbb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bcc2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bcc9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bcd0:	89 c6                	mov    esi,eax
c001bcd2:	89 d7                	mov    edi,edx
c001bcd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcd6:	89 c8                	mov    eax,ecx
c001bcd8:	89 fa                	mov    edx,edi
c001bcda:	89 f3                	mov    ebx,esi
c001bcdc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bce3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bcea:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bcf1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bcf8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bcfe:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bd05:	84 c0                	test   al,al
c001bd07:	75 07                	jne    c001bd10 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bd09:	b8 07 00 00 00       	mov    eax,0x7
c001bd0e:	eb 1c                	jmp    c001bd2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bd10:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bd17:	85 c0                	test   eax,eax
c001bd19:	75 09                	jne    c001bd24 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bd1b:	b8 00 00 00 00       	mov    eax,0x0
c001bd20:	eb 0a                	jmp    c001bd2c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bd22:	66 90                	xchg   ax,ax
c001bd24:	b8 01 00 00 00       	mov    eax,0x1
c001bd29:	8d 76 00             	lea    esi,[esi+0x0]
c001bd2c:	81 c4 50 02 00 00    	add    esp,0x250
c001bd32:	5b                   	pop    ebx
c001bd33:	5e                   	pop    esi
c001bd34:	5f                   	pop    edi
c001bd35:	c3                   	ret    
c001bd36:	66 90                	xchg   ax,ax

c001bd38 <FAT::read(void*, unsigned long, void*, int*)>:
c001bd38:	83 ec 1c             	sub    esp,0x1c
c001bd3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd40:	74 0a                	je     c001bd4c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bd42:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd47:	75 0b                	jne    c001bd54 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bd49:	8d 76 00             	lea    esi,[esi+0x0]
c001bd4c:	b8 04 00 00 00       	mov    eax,0x4
c001bd51:	eb 41                	jmp    c001bd94 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd53:	90                   	nop
c001bd54:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd58:	50                   	push   eax
c001bd59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd65:	e8 55 95 fe ff       	call   c00052bf <f_read>
c001bd6a:	83 c4 10             	add    esp,0x10
c001bd6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd75:	89 c2                	mov    edx,eax
c001bd77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd7b:	89 10                	mov    DWORD PTR [eax],edx
c001bd7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd81:	85 c0                	test   eax,eax
c001bd83:	75 07                	jne    c001bd8c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bd85:	b8 00 00 00 00       	mov    eax,0x0
c001bd8a:	eb 08                	jmp    c001bd94 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd8c:	b8 01 00 00 00       	mov    eax,0x1
c001bd91:	8d 76 00             	lea    esi,[esi+0x0]
c001bd94:	83 c4 1c             	add    esp,0x1c
c001bd97:	c3                   	ret    

c001bd98 <FAT::write(void*, unsigned long, void*, int*)>:
c001bd98:	83 ec 1c             	sub    esp,0x1c
c001bd9b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bda0:	74 0a                	je     c001bdac <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bda2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bda7:	75 0b                	jne    c001bdb4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bda9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdac:	b8 04 00 00 00       	mov    eax,0x4
c001bdb1:	eb 41                	jmp    c001bdf4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bdb3:	90                   	nop
c001bdb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bdb8:	50                   	push   eax
c001bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bdc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdc5:	e8 75 97 fe ff       	call   c000553f <f_write>
c001bdca:	83 c4 10             	add    esp,0x10
c001bdcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdd5:	89 c2                	mov    edx,eax
c001bdd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bddb:	89 10                	mov    DWORD PTR [eax],edx
c001bddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bde1:	85 c0                	test   eax,eax
c001bde3:	75 07                	jne    c001bdec <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bde5:	b8 00 00 00 00       	mov    eax,0x0
c001bdea:	eb 08                	jmp    c001bdf4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bdec:	b8 01 00 00 00       	mov    eax,0x1
c001bdf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf4:	83 c4 1c             	add    esp,0x1c
c001bdf7:	c3                   	ret    

c001bdf8 <FAT::close(void*)>:
c001bdf8:	83 ec 1c             	sub    esp,0x1c
c001bdfb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001be00:	75 0a                	jne    c001be0c <FAT::close(void*)+0x14>
c001be02:	b8 04 00 00 00       	mov    eax,0x4
c001be07:	eb 3f                	jmp    c001be48 <FAT::close(void*)+0x50>
c001be09:	8d 76 00             	lea    esi,[esi+0x0]
c001be0c:	83 ec 0c             	sub    esp,0xc
c001be0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be13:	e8 bd 9b fe ff       	call   c00059d5 <f_close>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be1f:	83 ec 0c             	sub    esp,0xc
c001be22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be26:	e8 38 df fe ff       	call   c0009d63 <free>
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be32:	85 c0                	test   eax,eax
c001be34:	75 0a                	jne    c001be40 <FAT::close(void*)+0x48>
c001be36:	b8 00 00 00 00       	mov    eax,0x0
c001be3b:	eb 0b                	jmp    c001be48 <FAT::close(void*)+0x50>
c001be3d:	8d 76 00             	lea    esi,[esi+0x0]
c001be40:	b8 01 00 00 00       	mov    eax,0x1
c001be45:	8d 76 00             	lea    esi,[esi+0x0]
c001be48:	83 c4 1c             	add    esp,0x1c
c001be4b:	c3                   	ret    

c001be4c <FAT::closeDir(void*)>:
c001be4c:	83 ec 1c             	sub    esp,0x1c
c001be4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001be54:	75 0a                	jne    c001be60 <FAT::closeDir(void*)+0x14>
c001be56:	b8 04 00 00 00       	mov    eax,0x4
c001be5b:	eb 3f                	jmp    c001be9c <FAT::closeDir(void*)+0x50>
c001be5d:	8d 76 00             	lea    esi,[esi+0x0]
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be67:	e8 51 a1 fe ff       	call   c0005fbd <f_closedir>
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be73:	83 ec 0c             	sub    esp,0xc
c001be76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be7a:	e8 e4 de fe ff       	call   c0009d63 <free>
c001be7f:	83 c4 10             	add    esp,0x10
c001be82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be86:	85 c0                	test   eax,eax
c001be88:	75 0a                	jne    c001be94 <FAT::closeDir(void*)+0x48>
c001be8a:	b8 00 00 00 00       	mov    eax,0x0
c001be8f:	eb 0b                	jmp    c001be9c <FAT::closeDir(void*)+0x50>
c001be91:	8d 76 00             	lea    esi,[esi+0x0]
c001be94:	b8 01 00 00 00       	mov    eax,0x1
c001be99:	8d 76 00             	lea    esi,[esi+0x0]
c001be9c:	83 c4 1c             	add    esp,0x1c
c001be9f:	c3                   	ret    

c001bea0 <FAT::seek(void*, unsigned long long)>:
c001bea0:	83 ec 2c             	sub    esp,0x2c
c001bea3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001beab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001beaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001beb8:	75 0a                	jne    c001bec4 <FAT::seek(void*, unsigned long long)+0x24>
c001beba:	b8 04 00 00 00       	mov    eax,0x4
c001bebf:	eb 37                	jmp    c001bef8 <FAT::seek(void*, unsigned long long)+0x58>
c001bec1:	8d 76 00             	lea    esi,[esi+0x0]
c001bec4:	83 ec 04             	sub    esp,0x4
c001bec7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001becb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001becf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bed3:	e8 2c 9b fe ff       	call   c0005a04 <f_lseek>
c001bed8:	83 c4 10             	add    esp,0x10
c001bedb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bedf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bee3:	85 c0                	test   eax,eax
c001bee5:	75 09                	jne    c001bef0 <FAT::seek(void*, unsigned long long)+0x50>
c001bee7:	b8 00 00 00 00       	mov    eax,0x0
c001beec:	eb 0a                	jmp    c001bef8 <FAT::seek(void*, unsigned long long)+0x58>
c001beee:	66 90                	xchg   ax,ax
c001bef0:	b8 01 00 00 00       	mov    eax,0x1
c001bef5:	8d 76 00             	lea    esi,[esi+0x0]
c001bef8:	83 c4 2c             	add    esp,0x2c
c001befb:	c3                   	ret    

c001befc <fatWrapperReadDisk>:
c001befc:	83 ec 1c             	sub    esp,0x1c
c001beff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf1b:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c001bf22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf26:	83 ec 0c             	sub    esp,0xc
c001bf29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf2d:	52                   	push   edx
c001bf2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf36:	50                   	push   eax
c001bf37:	e8 68 49 ff ff       	call   c00108a4 <LogicalDisk::read(unsigned long long, int, void*)>
c001bf3c:	83 c4 20             	add    esp,0x20
c001bf3f:	83 c4 1c             	add    esp,0x1c
c001bf42:	c3                   	ret    
c001bf43:	90                   	nop

c001bf44 <fatWrapperWriteDisk>:
c001bf44:	83 ec 1c             	sub    esp,0x1c
c001bf47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf53:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf63:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c001bf6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf6e:	83 ec 0c             	sub    esp,0xc
c001bf71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf75:	52                   	push   edx
c001bf76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf7e:	50                   	push   eax
c001bf7f:	e8 8c 49 ff ff       	call   c0010910 <LogicalDisk::write(unsigned long long, int, void*)>
c001bf84:	83 c4 20             	add    esp,0x20
c001bf87:	83 c4 1c             	add    esp,0x1c
c001bf8a:	c3                   	ret    
c001bf8b:	90                   	nop

c001bf8c <fatWrapperIoctl>:
c001bf8c:	53                   	push   ebx
c001bf8d:	83 ec 28             	sub    esp,0x28
c001bf90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf98:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bf9c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bfa0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bfa5:	75 31                	jne    c001bfd8 <fatWrapperIoctl+0x4c>
c001bfa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bfaf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfb4:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c001bfbb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bfc1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bfc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfcb:	66 89 02             	mov    WORD PTR [edx],ax
c001bfce:	b8 00 00 00 00       	mov    eax,0x0
c001bfd3:	e9 bc 00 00 00       	jmp    c001c094 <fatWrapperIoctl+0x108>
c001bfd8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bfdd:	75 6d                	jne    c001c04c <fatWrapperIoctl+0xc0>
c001bfdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfe7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfec:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c001bff3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bff9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bfff:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c005:	89 c8                	mov    eax,ecx
c001c007:	89 da                	mov    edx,ebx
c001c009:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c00d:	c1 e0 0a             	shl    eax,0xa
c001c010:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c015:	8b 0c 8d 60 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6da0]
c001c01c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c022:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c028:	89 cb                	mov    ebx,ecx
c001c02a:	c1 fb 1f             	sar    ebx,0x1f
c001c02d:	53                   	push   ebx
c001c02e:	51                   	push   ecx
c001c02f:	52                   	push   edx
c001c030:	50                   	push   eax
c001c031:	e8 12 70 00 00       	call   c0023048 <__udivdi3>
c001c036:	83 c4 10             	add    esp,0x10
c001c039:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c03d:	89 01                	mov    DWORD PTR [ecx],eax
c001c03f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c042:	b8 00 00 00 00       	mov    eax,0x0
c001c047:	eb 4b                	jmp    c001c094 <fatWrapperIoctl+0x108>
c001c049:	8d 76 00             	lea    esi,[esi+0x0]
c001c04c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c051:	75 09                	jne    c001c05c <fatWrapperIoctl+0xd0>
c001c053:	b8 00 00 00 00       	mov    eax,0x0
c001c058:	eb 3a                	jmp    c001c094 <fatWrapperIoctl+0x108>
c001c05a:	66 90                	xchg   ax,ax
c001c05c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c061:	75 19                	jne    c001c07c <fatWrapperIoctl+0xf0>
c001c063:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c067:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c06b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c06f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c075:	b8 00 00 00 00       	mov    eax,0x0
c001c07a:	eb 18                	jmp    c001c094 <fatWrapperIoctl+0x108>
c001c07c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c081:	75 09                	jne    c001c08c <fatWrapperIoctl+0x100>
c001c083:	b8 00 00 00 00       	mov    eax,0x0
c001c088:	eb 0a                	jmp    c001c094 <fatWrapperIoctl+0x108>
c001c08a:	66 90                	xchg   ax,ax
c001c08c:	b8 04 00 00 00       	mov    eax,0x4
c001c091:	8d 76 00             	lea    esi,[esi+0x0]
c001c094:	83 c4 28             	add    esp,0x28
c001c097:	5b                   	pop    ebx
c001c098:	c3                   	ret    
c001c099:	90                   	nop
c001c09a:	66 90                	xchg   ax,ax

c001c09c <FAT::FAT()>:
c001c09c:	83 ec 1c             	sub    esp,0x1c
c001c09f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0a3:	83 ec 0c             	sub    esp,0xc
c001c0a6:	50                   	push   eax
c001c0a7:	e8 aa 12 ff ff       	call   c000d356 <Filesystem::Filesystem()>
c001c0ac:	83 c4 10             	add    esp,0x10
c001c0af:	ba 90 70 02 c0       	mov    edx,0xc0027090
c001c0b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0b8:	89 10                	mov    DWORD PTR [eax],edx
c001c0ba:	c7 05 c0 a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a2c0,0x0
c001c0c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c0cc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c0d1:	7f 15                	jg     c001c0e8 <FAT::FAT()+0x4c>
c001c0d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0d7:	c7 04 85 e0 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5d20],0xffffffff
c001c0e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c0e6:	eb e4                	jmp    c001c0cc <FAT::FAT()+0x30>
c001c0e8:	90                   	nop
c001c0e9:	83 c4 1c             	add    esp,0x1c
c001c0ec:	c3                   	ret    
c001c0ed:	90                   	nop
c001c0ee:	66 90                	xchg   ax,ax

c001c0f0 <FAT::fixFilepath(char*)>:
c001c0f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0f4:	8a 00                	mov    al,BYTE PTR [eax]
c001c0f6:	3c 40                	cmp    al,0x40
c001c0f8:	7e 2e                	jle    c001c128 <FAT::fixFilepath(char*)+0x38>
c001c0fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0fe:	8a 00                	mov    al,BYTE PTR [eax]
c001c100:	83 e8 41             	sub    eax,0x41
c001c103:	88 c2                	mov    dl,al
c001c105:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c109:	88 10                	mov    BYTE PTR [eax],dl
c001c10b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c10f:	8a 00                	mov    al,BYTE PTR [eax]
c001c111:	0f be c0             	movsx  eax,al
c001c114:	8b 04 85 e0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d20]
c001c11b:	83 c0 30             	add    eax,0x30
c001c11e:	88 c2                	mov    dl,al
c001c120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c124:	88 10                	mov    BYTE PTR [eax],dl
c001c126:	66 90                	xchg   ax,ax
c001c128:	90                   	nop
c001c129:	c3                   	ret    
c001c12a:	66 90                	xchg   ax,ax

c001c12c <FAT::open(char const*, void**, FileOpenMode)>:
c001c12c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c132:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c13a:	74 0c                	je     c001c148 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c13c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c144:	75 0e                	jne    c001c154 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c146:	66 90                	xchg   ax,ax
c001c148:	b8 04 00 00 00       	mov    eax,0x4
c001c14d:	e9 06 01 00 00       	jmp    c001c258 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c152:	66 90                	xchg   ax,ax
c001c154:	83 ec 08             	sub    esp,0x8
c001c157:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c15e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c162:	50                   	push   eax
c001c163:	e8 d0 45 fe ff       	call   c0000738 <strcpy>
c001c168:	83 c4 10             	add    esp,0x10
c001c16b:	83 ec 08             	sub    esp,0x8
c001c16e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c172:	50                   	push   eax
c001c173:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c17a:	e8 71 ff ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c17f:	83 c4 10             	add    esp,0x10
c001c182:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c18a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c191:	83 e0 01             	and    eax,0x1
c001c194:	74 0a                	je     c001c1a0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c196:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c19e:	66 90                	xchg   ax,ax
c001c1a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1a7:	83 e0 04             	and    eax,0x4
c001c1aa:	74 10                	je     c001c1bc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c1ac:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c1b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c1bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1c3:	83 e0 02             	and    eax,0x2
c001c1c6:	74 08                	je     c001c1d0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c1c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c1d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1d7:	83 e0 08             	and    eax,0x8
c001c1da:	74 08                	je     c001c1e4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c1dc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c1e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1eb:	83 e0 10             	and    eax,0x10
c001c1ee:	74 08                	je     c001c1f8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c1f0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c1f8:	83 ec 0c             	sub    esp,0xc
c001c1fb:	68 50 02 00 00       	push   0x250
c001c200:	e8 4e db fe ff       	call   c0009d53 <malloc>
c001c205:	83 c4 10             	add    esp,0x10
c001c208:	89 c2                	mov    edx,eax
c001c20a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c211:	89 10                	mov    DWORD PTR [eax],edx
c001c213:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c21b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c222:	8b 00                	mov    eax,DWORD PTR [eax]
c001c224:	83 ec 04             	sub    esp,0x4
c001c227:	52                   	push   edx
c001c228:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c22c:	52                   	push   edx
c001c22d:	50                   	push   eax
c001c22e:	e8 50 8c fe ff       	call   c0004e83 <f_open>
c001c233:	83 c4 10             	add    esp,0x10
c001c236:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c23d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c245:	74 09                	je     c001c250 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c247:	b8 01 00 00 00       	mov    eax,0x1
c001c24c:	eb 0a                	jmp    c001c258 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c24e:	66 90                	xchg   ax,ax
c001c250:	b8 00 00 00 00       	mov    eax,0x0
c001c255:	8d 76 00             	lea    esi,[esi+0x0]
c001c258:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c25e:	c3                   	ret    
c001c25f:	90                   	nop

c001c260 <FAT::openDir(char const*, void**)>:
c001c260:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c266:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c26e:	74 0c                	je     c001c27c <FAT::openDir(char const*, void**)+0x1c>
c001c270:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c278:	75 0e                	jne    c001c288 <FAT::openDir(char const*, void**)+0x28>
c001c27a:	66 90                	xchg   ax,ax
c001c27c:	b8 04 00 00 00       	mov    eax,0x4
c001c281:	e9 82 00 00 00       	jmp    c001c308 <FAT::openDir(char const*, void**)+0xa8>
c001c286:	66 90                	xchg   ax,ax
c001c288:	83 ec 08             	sub    esp,0x8
c001c28b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c292:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c296:	50                   	push   eax
c001c297:	e8 9c 44 fe ff       	call   c0000738 <strcpy>
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	83 ec 08             	sub    esp,0x8
c001c2a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c2a6:	50                   	push   eax
c001c2a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c2ae:	e8 3d fe ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	6a 4c                	push   0x4c
c001c2bb:	e8 93 da fe ff       	call   c0009d53 <malloc>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	89 c2                	mov    edx,eax
c001c2c5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c2cc:	89 10                	mov    DWORD PTR [eax],edx
c001c2ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c2d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2d7:	83 ec 08             	sub    esp,0x8
c001c2da:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c2de:	52                   	push   edx
c001c2df:	50                   	push   eax
c001c2e0:	e8 d6 9b fe ff       	call   c0005ebb <f_opendir>
c001c2e5:	83 c4 10             	add    esp,0x10
c001c2e8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c2ef:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c2f7:	74 07                	je     c001c300 <FAT::openDir(char const*, void**)+0xa0>
c001c2f9:	b8 01 00 00 00       	mov    eax,0x1
c001c2fe:	eb 08                	jmp    c001c308 <FAT::openDir(char const*, void**)+0xa8>
c001c300:	b8 00 00 00 00       	mov    eax,0x0
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c30e:	c3                   	ret    
c001c30f:	90                   	nop

c001c310 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c310:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c316:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c31e:	75 0c                	jne    c001c32c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c320:	b8 04 00 00 00       	mov    eax,0x4
c001c325:	e9 d2 00 00 00       	jmp    c001c3fc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c32a:	66 90                	xchg   ax,ax
c001c32c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c334:	75 0a                	jne    c001c340 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c336:	b8 04 00 00 00       	mov    eax,0x4
c001c33b:	e9 bc 00 00 00       	jmp    c001c3fc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c340:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c348:	75 0a                	jne    c001c354 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c34a:	b8 04 00 00 00       	mov    eax,0x4
c001c34f:	e9 a8 00 00 00       	jmp    c001c3fc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c354:	83 ec 08             	sub    esp,0x8
c001c357:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c35e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c365:	50                   	push   eax
c001c366:	e8 cd 43 fe ff       	call   c0000738 <strcpy>
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	83 ec 08             	sub    esp,0x8
c001c371:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c378:	50                   	push   eax
c001c379:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c380:	e8 6b fd ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c385:	83 c4 10             	add    esp,0x10
c001c388:	83 ec 08             	sub    esp,0x8
c001c38b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c38f:	50                   	push   eax
c001c390:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c397:	50                   	push   eax
c001c398:	e8 dd 9c fe ff       	call   c000607a <f_stat>
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c3a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c3ae:	85 c0                	test   eax,eax
c001c3b0:	74 0a                	je     c001c3bc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c3b2:	83 f8 04             	cmp    eax,0x4
c001c3b5:	74 35                	je     c001c3ec <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c3b7:	eb 3b                	jmp    c001c3f4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3bc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c3c0:	0f b6 c0             	movzx  eax,al
c001c3c3:	83 e0 10             	and    eax,0x10
c001c3c6:	0f 95 c2             	setne  dl
c001c3c9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c3d0:	88 10                	mov    BYTE PTR [eax],dl
c001c3d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c3d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3d9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c3e0:	89 01                	mov    DWORD PTR [ecx],eax
c001c3e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c3e5:	b8 00 00 00 00       	mov    eax,0x0
c001c3ea:	eb 10                	jmp    c001c3fc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3ec:	b8 02 00 00 00       	mov    eax,0x2
c001c3f1:	eb 09                	jmp    c001c3fc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3f3:	90                   	nop
c001c3f4:	b8 01 00 00 00       	mov    eax,0x1
c001c3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c3fc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c402:	c3                   	ret    
c001c403:	90                   	nop

c001c404 <FAT::unlink(char const*)>:
c001c404:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c40a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c412:	75 08                	jne    c001c41c <FAT::unlink(char const*)+0x18>
c001c414:	b8 04 00 00 00       	mov    eax,0x4
c001c419:	eb 61                	jmp    c001c47c <FAT::unlink(char const*)+0x78>
c001c41b:	90                   	nop
c001c41c:	83 ec 08             	sub    esp,0x8
c001c41f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c426:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c42a:	50                   	push   eax
c001c42b:	e8 08 43 fe ff       	call   c0000738 <strcpy>
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	83 ec 08             	sub    esp,0x8
c001c436:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c43a:	50                   	push   eax
c001c43b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c442:	e8 a9 fc ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	83 ec 0c             	sub    esp,0xc
c001c44d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c451:	50                   	push   eax
c001c452:	e8 75 9f fe ff       	call   c00063cc <f_unlink>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c461:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c468:	85 c0                	test   eax,eax
c001c46a:	75 08                	jne    c001c474 <FAT::unlink(char const*)+0x70>
c001c46c:	b8 00 00 00 00       	mov    eax,0x0
c001c471:	eb 09                	jmp    c001c47c <FAT::unlink(char const*)+0x78>
c001c473:	90                   	nop
c001c474:	b8 01 00 00 00       	mov    eax,0x1
c001c479:	8d 76 00             	lea    esi,[esi+0x0]
c001c47c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c482:	c3                   	ret    
c001c483:	90                   	nop

c001c484 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c484:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c48a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c491:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c498:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c49c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4a0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c4a8:	75 0a                	jne    c001c4b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c4aa:	b8 04 00 00 00       	mov    eax,0x4
c001c4af:	e9 30 01 00 00       	jmp    c001c5e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c4b4:	83 ec 08             	sub    esp,0x8
c001c4b7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c4be:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c4c2:	50                   	push   eax
c001c4c3:	e8 70 42 fe ff       	call   c0000738 <strcpy>
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	83 ec 08             	sub    esp,0x8
c001c4ce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c4d2:	50                   	push   eax
c001c4d3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c4da:	e8 11 fc ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c4df:	83 c4 10             	add    esp,0x10
c001c4e2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c4ea:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c4f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4f7:	83 e0 01             	and    eax,0x1
c001c4fa:	74 08                	je     c001c504 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c4fc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c504:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c509:	83 e0 02             	and    eax,0x2
c001c50c:	74 0a                	je     c001c518 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c50e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c516:	66 90                	xchg   ax,ax
c001c518:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c51d:	83 e0 04             	and    eax,0x4
c001c520:	74 0a                	je     c001c52c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c522:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c52a:	66 90                	xchg   ax,ax
c001c52c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c531:	83 e0 08             	and    eax,0x8
c001c534:	74 0a                	je     c001c540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c536:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c53e:	66 90                	xchg   ax,ax
c001c540:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c545:	83 e0 01             	and    eax,0x1
c001c548:	74 0a                	je     c001c554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c54a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c552:	66 90                	xchg   ax,ax
c001c554:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c559:	83 e0 02             	and    eax,0x2
c001c55c:	74 0a                	je     c001c568 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c55e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c566:	66 90                	xchg   ax,ax
c001c568:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c56d:	83 e0 04             	and    eax,0x4
c001c570:	74 0a                	je     c001c57c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c572:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c57a:	66 90                	xchg   ax,ax
c001c57c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c581:	83 e0 08             	and    eax,0x8
c001c584:	74 0a                	je     c001c590 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c586:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c58e:	66 90                	xchg   ax,ax
c001c590:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c597:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c59e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c5a6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c5ae:	83 ec 04             	sub    esp,0x4
c001c5b1:	52                   	push   edx
c001c5b2:	50                   	push   eax
c001c5b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c5b7:	50                   	push   eax
c001c5b8:	e8 b1 a4 fe ff       	call   c0006a6e <f_chmod>
c001c5bd:	83 c4 10             	add    esp,0x10
c001c5c0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c5c7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c5ce:	85 c0                	test   eax,eax
c001c5d0:	75 0a                	jne    c001c5dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c5d2:	b8 00 00 00 00       	mov    eax,0x0
c001c5d7:	eb 0b                	jmp    c001c5e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5dc:	b8 01 00 00 00       	mov    eax,0x1
c001c5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c5e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c5ea:	c3                   	ret    
c001c5eb:	90                   	nop

c001c5ec <FAT::rename(char const*, char const*)>:
c001c5ec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5f2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c5fa:	74 0c                	je     c001c608 <FAT::rename(char const*, char const*)+0x1c>
c001c5fc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c604:	75 0e                	jne    c001c614 <FAT::rename(char const*, char const*)+0x28>
c001c606:	66 90                	xchg   ax,ax
c001c608:	b8 04 00 00 00       	mov    eax,0x4
c001c60d:	e9 9e 00 00 00       	jmp    c001c6b0 <FAT::rename(char const*, char const*)+0xc4>
c001c612:	66 90                	xchg   ax,ax
c001c614:	83 ec 08             	sub    esp,0x8
c001c617:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c61e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c625:	50                   	push   eax
c001c626:	e8 0d 41 fe ff       	call   c0000738 <strcpy>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	83 ec 08             	sub    esp,0x8
c001c631:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c638:	50                   	push   eax
c001c639:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c640:	e8 ab fa ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c645:	83 c4 10             	add    esp,0x10
c001c648:	83 ec 08             	sub    esp,0x8
c001c64b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c652:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c656:	50                   	push   eax
c001c657:	e8 dc 40 fe ff       	call   c0000738 <strcpy>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	83 ec 08             	sub    esp,0x8
c001c662:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c666:	50                   	push   eax
c001c667:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c66e:	e8 7d fa ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	83 ec 08             	sub    esp,0x8
c001c679:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c67d:	50                   	push   eax
c001c67e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c685:	50                   	push   eax
c001c686:	e8 f0 a0 fe ff       	call   c000677b <f_rename>
c001c68b:	83 c4 10             	add    esp,0x10
c001c68e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c695:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c69c:	85 c0                	test   eax,eax
c001c69e:	75 08                	jne    c001c6a8 <FAT::rename(char const*, char const*)+0xbc>
c001c6a0:	b8 00 00 00 00       	mov    eax,0x0
c001c6a5:	eb 09                	jmp    c001c6b0 <FAT::rename(char const*, char const*)+0xc4>
c001c6a7:	90                   	nop
c001c6a8:	b8 01 00 00 00       	mov    eax,0x1
c001c6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c6b0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c6b6:	c3                   	ret    
c001c6b7:	90                   	nop

c001c6b8 <FAT::mkdir(char const*)>:
c001c6b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c6be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c6c6:	75 08                	jne    c001c6d0 <FAT::mkdir(char const*)+0x18>
c001c6c8:	b8 04 00 00 00       	mov    eax,0x4
c001c6cd:	eb 61                	jmp    c001c730 <FAT::mkdir(char const*)+0x78>
c001c6cf:	90                   	nop
c001c6d0:	83 ec 08             	sub    esp,0x8
c001c6d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6da:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6de:	50                   	push   eax
c001c6df:	e8 54 40 fe ff       	call   c0000738 <strcpy>
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	83 ec 08             	sub    esp,0x8
c001c6ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6ee:	50                   	push   eax
c001c6ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6f6:	e8 f5 f9 ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	83 ec 0c             	sub    esp,0xc
c001c701:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c705:	50                   	push   eax
c001c706:	e8 44 9e fe ff       	call   c000654f <f_mkdir>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c715:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c71c:	85 c0                	test   eax,eax
c001c71e:	75 08                	jne    c001c728 <FAT::mkdir(char const*)+0x70>
c001c720:	b8 00 00 00 00       	mov    eax,0x0
c001c725:	eb 09                	jmp    c001c730 <FAT::mkdir(char const*)+0x78>
c001c727:	90                   	nop
c001c728:	b8 01 00 00 00       	mov    eax,0x1
c001c72d:	8d 76 00             	lea    esi,[esi+0x0]
c001c730:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c736:	c3                   	ret    
c001c737:	90                   	nop

c001c738 <FAT::exists(char const*)>:
c001c738:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c73e:	83 ec 08             	sub    esp,0x8
c001c741:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c748:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c74c:	50                   	push   eax
c001c74d:	e8 e6 3f fe ff       	call   c0000738 <strcpy>
c001c752:	83 c4 10             	add    esp,0x10
c001c755:	83 ec 08             	sub    esp,0x8
c001c758:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c75c:	50                   	push   eax
c001c75d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c764:	e8 87 f9 ff ff       	call   c001c0f0 <FAT::fixFilepath(char*)>
c001c769:	83 c4 10             	add    esp,0x10
c001c76c:	83 ec 08             	sub    esp,0x8
c001c76f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c776:	50                   	push   eax
c001c777:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c77b:	50                   	push   eax
c001c77c:	e8 f9 98 fe ff       	call   c000607a <f_stat>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c78b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c792:	85 c0                	test   eax,eax
c001c794:	75 06                	jne    c001c79c <FAT::exists(char const*)+0x64>
c001c796:	b0 01                	mov    al,0x1
c001c798:	eb 06                	jmp    c001c7a0 <FAT::exists(char const*)+0x68>
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	b0 00                	mov    al,0x0
c001c79e:	66 90                	xchg   ax,ax
c001c7a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c7a6:	c3                   	ret    
c001c7a7:	90                   	nop

c001c7a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c7a8:	b8 08 00 00 00       	mov    eax,0x8
c001c7ad:	c3                   	ret    

c001c7ae <ISO9660::seek(void*, unsigned long long)>:
c001c7ae:	53                   	push   ebx
c001c7af:	b8 04 00 00 00       	mov    eax,0x4
c001c7b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c7c0:	85 d2                	test   edx,edx
c001c7c2:	74 17                	je     c001c7db <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c7c4:	89 c8                	mov    eax,ecx
c001c7c6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c7c9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c7cc:	b8 01 00 00 00       	mov    eax,0x1
c001c7d1:	73 08                	jae    c001c7db <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c7d3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c7d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c7d9:	31 c0                	xor    eax,eax
c001c7db:	5b                   	pop    ebx
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <ISO9660::tell(void*, unsigned long long*)>:
c001c7de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e6:	85 d2                	test   edx,edx
c001c7e8:	74 12                	je     c001c7fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7ea:	85 c0                	test   eax,eax
c001c7ec:	74 0e                	je     c001c7fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7ee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7f1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c7f4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c7f7:	89 10                	mov    DWORD PTR [eax],edx
c001c7f9:	31 c0                	xor    eax,eax
c001c7fb:	c3                   	ret    
c001c7fc:	b8 04 00 00 00       	mov    eax,0x4
c001c801:	c3                   	ret    

c001c802 <ISO9660::getName()>:
c001c802:	b8 f0 70 02 c0       	mov    eax,0xc00270f0
c001c807:	c3                   	ret    

c001c808 <ISO9660::stat(void*, unsigned long long*)>:
c001c808:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c80c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c810:	85 d2                	test   edx,edx
c001c812:	74 12                	je     c001c826 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c814:	85 c0                	test   eax,eax
c001c816:	74 0e                	je     c001c826 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c818:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c81b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c81e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c821:	89 10                	mov    DWORD PTR [eax],edx
c001c823:	31 c0                	xor    eax,eax
c001c825:	c3                   	ret    
c001c826:	b8 04 00 00 00       	mov    eax,0x4
c001c82b:	c3                   	ret    

c001c82c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c82c:	b8 01 00 00 00       	mov    eax,0x1
c001c831:	c3                   	ret    

c001c832 <ISO9660::unlink(char const*)>:
c001c832:	b8 01 00 00 00       	mov    eax,0x1
c001c837:	c3                   	ret    

c001c838 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c838:	b8 01 00 00 00       	mov    eax,0x1
c001c83d:	c3                   	ret    

c001c83e <ISO9660::rename(char const*, char const*)>:
c001c83e:	b8 01 00 00 00       	mov    eax,0x1
c001c843:	c3                   	ret    

c001c844 <ISO9660::mkdir(char const*)>:
c001c844:	b8 01 00 00 00       	mov    eax,0x1
c001c849:	c3                   	ret    

c001c84a <ISO9660::close(void*)>:
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	b8 04 00 00 00       	mov    eax,0x4
c001c852:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c856:	85 d2                	test   edx,edx
c001c858:	74 0e                	je     c001c868 <ISO9660::close(void*)+0x1e>
c001c85a:	83 ec 0c             	sub    esp,0xc
c001c85d:	52                   	push   edx
c001c85e:	e8 00 d5 fe ff       	call   c0009d63 <free>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	31 c0                	xor    eax,eax
c001c868:	83 c4 0c             	add    esp,0xc
c001c86b:	c3                   	ret    

c001c86c <ISO9660::closeDir(void*)>:
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	b8 04 00 00 00       	mov    eax,0x4
c001c874:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c878:	85 d2                	test   edx,edx
c001c87a:	74 0e                	je     c001c88a <ISO9660::closeDir(void*)+0x1e>
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	52                   	push   edx
c001c880:	e8 de d4 fe ff       	call   c0009d63 <free>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	31 c0                	xor    eax,eax
c001c88a:	83 c4 0c             	add    esp,0xc
c001c88d:	c3                   	ret    

c001c88e <ISO9660::~ISO9660()>:
c001c88e:	83 ec 0c             	sub    esp,0xc
c001c891:	ba 14 71 02 c0       	mov    edx,0xc0027114
c001c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89a:	89 10                	mov    DWORD PTR [eax],edx
c001c89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a0:	83 ec 0c             	sub    esp,0xc
c001c8a3:	50                   	push   eax
c001c8a4:	e8 d1 0a ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c001c8a9:	83 c4 10             	add    esp,0x10
c001c8ac:	90                   	nop
c001c8ad:	83 c4 0c             	add    esp,0xc
c001c8b0:	c3                   	ret    
c001c8b1:	90                   	nop

c001c8b2 <ISO9660::~ISO9660()>:
c001c8b2:	83 ec 0c             	sub    esp,0xc
c001c8b5:	83 ec 0c             	sub    esp,0xc
c001c8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8bc:	e8 cd ff ff ff       	call   c001c88e <ISO9660::~ISO9660()>
c001c8c1:	83 c4 10             	add    esp,0x10
c001c8c4:	83 ec 08             	sub    esp,0x8
c001c8c7:	6a 08                	push   0x8
c001c8c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8cd:	e8 8c 06 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001c8d2:	83 c4 10             	add    esp,0x10
c001c8d5:	83 c4 0c             	add    esp,0xc
c001c8d8:	c3                   	ret    

c001c8d9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c8d9:	55                   	push   ebp
c001c8da:	31 c9                	xor    ecx,ecx
c001c8dc:	57                   	push   edi
c001c8dd:	56                   	push   esi
c001c8de:	53                   	push   ebx
c001c8df:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c8e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c8e7:	89 eb                	mov    ebx,ebp
c001c8e9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c8ed:	39 ce                	cmp    esi,ecx
c001c8ef:	7e 17                	jle    c001c908 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c8f1:	31 d2                	xor    edx,edx
c001c8f3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c8f7:	7d 13                	jge    c001c90c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c8f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c8fd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c900:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c903:	75 0d                	jne    c001c912 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c905:	42                   	inc    edx
c001c906:	eb eb                	jmp    c001c8f3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c908:	31 c0                	xor    eax,eax
c001c90a:	eb 0a                	jmp    c001c916 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c90c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c910:	eb 04                	jmp    c001c916 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c912:	41                   	inc    ecx
c001c913:	43                   	inc    ebx
c001c914:	eb d7                	jmp    c001c8ed <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c916:	5b                   	pop    ebx
c001c917:	5e                   	pop    esi
c001c918:	5f                   	pop    edi
c001c919:	5d                   	pop    ebp
c001c91a:	c3                   	ret    

c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c91b:	57                   	push   edi
c001c91c:	56                   	push   esi
c001c91d:	53                   	push   ebx
c001c91e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c922:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c926:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c92a:	39 35 c0 a3 02 c0    	cmp    DWORD PTR ds:0xc002a3c0,esi
c001c930:	75 08                	jne    c001c93a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c932:	38 1d d4 86 02 c0    	cmp    BYTE PTR ds:0xc00286d4,bl
c001c938:	74 4a                	je     c001c984 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	31 d2                	xor    edx,edx
c001c93f:	68 e0 a3 02 c0       	push   0xc002a3e0
c001c944:	0f be c3             	movsx  eax,bl
c001c947:	6a 01                	push   0x1
c001c949:	52                   	push   edx
c001c94a:	56                   	push   esi
c001c94b:	ff 34 85 5c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ea4]
c001c952:	e8 4d 3f ff ff       	call   c00108a4 <LogicalDisk::read(unsigned long long, int, void*)>
c001c957:	83 c4 20             	add    esp,0x20
c001c95a:	85 c0                	test   eax,eax
c001c95c:	75 0e                	jne    c001c96c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c95e:	89 35 c0 a3 02 c0    	mov    DWORD PTR ds:0xc002a3c0,esi
c001c964:	88 1d d4 86 02 c0    	mov    BYTE PTR ds:0xc00286d4,bl
c001c96a:	eb 18                	jmp    c001c984 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c96c:	50                   	push   eax
c001c96d:	68 00 08 00 00       	push   0x800
c001c972:	6a 00                	push   0x0
c001c974:	57                   	push   edi
c001c975:	e8 02 3d fe ff       	call   c000067c <memset>
c001c97a:	83 c4 10             	add    esp,0x10
c001c97d:	b8 01 00 00 00       	mov    eax,0x1
c001c982:	eb 0e                	jmp    c001c992 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c984:	be e0 a3 02 c0       	mov    esi,0xc002a3e0
c001c989:	b9 00 08 00 00       	mov    ecx,0x800
c001c98e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c990:	31 c0                	xor    eax,eax
c001c992:	5b                   	pop    ebx
c001c993:	5e                   	pop    esi
c001c994:	5f                   	pop    edi
c001c995:	c3                   	ret    

c001c996 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c996:	81 ec 10 08 00 00    	sub    esp,0x810
c001c99c:	c7 05 c0 a3 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a3c0,0xdeadbeef
c001c9a6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c9ad:	83 c0 41             	add    eax,0x41
c001c9b0:	0f be c0             	movsx  eax,al
c001c9b3:	50                   	push   eax
c001c9b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c9b8:	50                   	push   eax
c001c9b9:	6a 10                	push   0x10
c001c9bb:	e8 5b ff ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c9c0:	83 c4 10             	add    esp,0x10
c001c9c3:	31 d2                	xor    edx,edx
c001c9c5:	85 c0                	test   eax,eax
c001c9c7:	75 24                	jne    c001c9ed <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9c9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c9ce:	75 1d                	jne    c001c9ed <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9d0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c9d5:	75 16                	jne    c001c9ed <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9d7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c9dc:	75 0f                	jne    c001c9ed <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9de:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c9e3:	75 08                	jne    c001c9ed <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9e5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c9ea:	0f 94 c2             	sete   dl
c001c9ed:	88 d0                	mov    al,dl
c001c9ef:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c9f5:	c3                   	ret    

c001c9f6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c9f6:	55                   	push   ebp
c001c9f7:	57                   	push   edi
c001c9f8:	56                   	push   esi
c001c9f9:	53                   	push   ebx
c001c9fa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001ca00:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001ca07:	85 ed                	test   ebp,ebp
c001ca09:	0f 84 da 01 00 00    	je     c001cbe9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ca0f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ca17:	0f 84 cc 01 00 00    	je     c001cbe9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ca1d:	b8 01 00 00 00       	mov    eax,0x1
c001ca22:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001ca26:	0f 85 c2 01 00 00    	jne    c001cbee <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ca2c:	31 d2                	xor    edx,edx
c001ca2e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001ca35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ca38:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ca3b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ca3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca45:	01 c8                	add    eax,ecx
c001ca47:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ca4a:	11 da                	adc    edx,ebx
c001ca4c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ca50:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ca54:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca58:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca5c:	19 d7                	sbb    edi,edx
c001ca5e:	72 11                	jb     c001ca71 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001ca60:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001ca63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001ca67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca6f:	eb 0c                	jmp    c001ca7d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ca71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ca75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca79:	29 ce                	sub    esi,ecx
c001ca7b:	19 df                	sbb    edi,ebx
c001ca7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ca83:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ca87:	c1 e0 0b             	shl    eax,0xb
c001ca8a:	01 c8                	add    eax,ecx
c001ca8c:	11 da                	adc    edx,ebx
c001ca8e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca95:	51                   	push   ecx
c001ca96:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ca9a:	50                   	push   eax
c001ca9b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ca9f:	53                   	push   ebx
c001caa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001caa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caa8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001caac:	50                   	push   eax
c001caad:	e8 69 fe ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cab2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001cab5:	b8 00 08 00 00       	mov    eax,0x800
c001caba:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cac0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cac4:	29 d0                	sub    eax,edx
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	89 f9                	mov    ecx,edi
c001cacb:	39 c6                	cmp    esi,eax
c001cacd:	83 d9 00             	sbb    ecx,0x0
c001cad0:	7d 1b                	jge    c001caed <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001cad2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cad7:	75 12                	jne    c001caeb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001cad9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cae0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cae6:	e9 fa 00 00 00       	jmp    c001cbe5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001caeb:	89 f0                	mov    eax,esi
c001caed:	01 d3                	add    ebx,edx
c001caef:	31 d2                	xor    edx,edx
c001caf1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001caf5:	39 c2                	cmp    edx,eax
c001caf7:	7d 14                	jge    c001cb0d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001caf9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cb00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb04:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cb07:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cb0a:	42                   	inc    edx
c001cb0b:	eb e8                	jmp    c001caf5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cb0d:	89 c2                	mov    edx,eax
c001cb0f:	85 c0                	test   eax,eax
c001cb11:	79 02                	jns    c001cb15 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cb13:	31 d2                	xor    edx,edx
c001cb15:	01 c2                	add    edx,eax
c001cb17:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001cb1a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001cb21:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cb25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cb29:	99                   	cdq    
c001cb2a:	01 c1                	add    ecx,eax
c001cb2c:	11 d3                	adc    ebx,edx
c001cb2e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cb32:	29 c6                	sub    esi,eax
c001cb34:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cb38:	19 d7                	sbb    edi,edx
c001cb3a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cb41:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cb46:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cb49:	b8 00 00 00 00       	mov    eax,0x0
c001cb4e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cb52:	7d 43                	jge    c001cb97 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cb54:	52                   	push   edx
c001cb55:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb59:	50                   	push   eax
c001cb5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb66:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cb6a:	50                   	push   eax
c001cb6b:	e8 ab fd ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb70:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cb78:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cb7d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cb85:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cb8d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cb92:	83 c4 10             	add    esp,0x10
c001cb95:	eb aa                	jmp    c001cb41 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cb97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb9b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cb9e:	74 2a                	je     c001cbca <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cba0:	50                   	push   eax
c001cba1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cba5:	50                   	push   eax
c001cba6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cbaa:	56                   	push   esi
c001cbab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cbaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbb3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cbb7:	51                   	push   ecx
c001cbb8:	e8 5e fd ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cbbd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cbd1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cbd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbd9:	89 18                	mov    DWORD PTR [eax],ebx
c001cbdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbdf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cbe2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cbe5:	31 c0                	xor    eax,eax
c001cbe7:	eb 05                	jmp    c001cbee <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cbe9:	b8 04 00 00 00       	mov    eax,0x4
c001cbee:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cbf4:	5b                   	pop    ebx
c001cbf5:	5e                   	pop    esi
c001cbf6:	5f                   	pop    edi
c001cbf7:	5d                   	pop    ebp
c001cbf8:	c3                   	ret    
c001cbf9:	90                   	nop

c001cbfa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cbfa:	55                   	push   ebp
c001cbfb:	57                   	push   edi
c001cbfc:	56                   	push   esi
c001cbfd:	53                   	push   ebx
c001cbfe:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cc04:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cc0b:	85 ed                	test   ebp,ebp
c001cc0d:	0f 84 51 02 00 00    	je     c001ce64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cc13:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cc1b:	0f 84 43 02 00 00    	je     c001ce64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cc21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cc24:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cc27:	75 0a                	jne    c001cc33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cc29:	b8 07 00 00 00       	mov    eax,0x7
c001cc2e:	e9 36 02 00 00       	jmp    c001ce69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cc33:	50                   	push   eax
c001cc34:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc38:	50                   	push   eax
c001cc39:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cc40:	53                   	push   ebx
c001cc41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc44:	c1 e0 0b             	shl    eax,0xb
c001cc47:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cc4a:	c1 e8 0b             	shr    eax,0xb
c001cc4d:	50                   	push   eax
c001cc4e:	e8 c8 fc ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc56:	83 c4 10             	add    esp,0x10
c001cc59:	89 c1                	mov    ecx,eax
c001cc5b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001cc5e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cc64:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001cc67:	84 db                	test   bl,bl
c001cc69:	0f 85 8b 00 00 00    	jne    c001ccfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001cc6f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001cc75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc78:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cc7e:	29 c6                	sub    esi,eax
c001cc80:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cc84:	89 f3                	mov    ebx,esi
c001cc86:	89 f1                	mov    ecx,esi
c001cc88:	c1 fb 1f             	sar    ebx,0x1f
c001cc8b:	01 f0                	add    eax,esi
c001cc8d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc90:	11 da                	adc    edx,ebx
c001cc92:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc95:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc99:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cc9c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cc9f:	89 d8                	mov    eax,ebx
c001cca1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cca5:	ba 00 00 00 00       	mov    edx,0x0
c001ccaa:	19 f8                	sbb    eax,edi
c001ccac:	b8 00 00 00 00       	mov    eax,0x0
c001ccb1:	73 08                	jae    c001ccbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001ccb3:	89 f0                	mov    eax,esi
c001ccb5:	89 fa                	mov    edx,edi
c001ccb7:	29 c8                	sub    eax,ecx
c001ccb9:	19 da                	sbb    edx,ebx
c001ccbb:	89 d7                	mov    edi,edx
c001ccbd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ccc0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ccc3:	09 c7                	or     edi,eax
c001ccc5:	0f 84 5e ff ff ff    	je     c001cc29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cccb:	57                   	push   edi
c001cccc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ccd0:	50                   	push   eax
c001ccd1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ccd8:	53                   	push   ebx
c001ccd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ccdc:	c1 e0 0b             	shl    eax,0xb
c001ccdf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cce3:	c1 e8 0b             	shr    eax,0xb
c001cce6:	50                   	push   eax
c001cce7:	e8 2f fc ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	25 ff 07 00 00       	and    eax,0x7ff
c001ccf7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ccfa:	31 ff                	xor    edi,edi
c001ccfc:	56                   	push   esi
c001ccfd:	6a 28                	push   0x28
c001ccff:	6a 00                	push   0x0
c001cd01:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cd05:	50                   	push   eax
c001cd06:	e8 71 39 fe ff       	call   c000067c <memset>
c001cd0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cd0e:	25 ff 07 00 00       	and    eax,0x7ff
c001cd13:	89 c6                	mov    esi,eax
c001cd15:	83 c6 21             	add    esi,0x21
c001cd18:	83 d7 00             	adc    edi,0x0
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	31 c9                	xor    ecx,ecx
c001cd20:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cd27:	83 f9 28             	cmp    ecx,0x28
c001cd2a:	88 04 24             	mov    BYTE PTR [esp],al
c001cd2d:	0f 94 c2             	sete   dl
c001cd30:	88 d0                	mov    al,dl
c001cd32:	ba ff 07 00 00       	mov    edx,0x7ff
c001cd37:	39 f2                	cmp    edx,esi
c001cd39:	ba 00 00 00 00       	mov    edx,0x0
c001cd3e:	19 fa                	sbb    edx,edi
c001cd40:	0f 92 c2             	setb   dl
c001cd43:	09 c2                	or     edx,eax
c001cd45:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cd49:	0f 94 c0             	sete   al
c001cd4c:	08 d0                	or     al,dl
c001cd4e:	75 16                	jne    c001cd66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd50:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cd54:	74 10                	je     c001cd66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd56:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cd59:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cd5d:	41                   	inc    ecx
c001cd5e:	83 c6 01             	add    esi,0x1
c001cd61:	83 d7 00             	adc    edi,0x0
c001cd64:	eb ba                	jmp    c001cd20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cd66:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cd6d:	83 ec 0c             	sub    esp,0xc
c001cd70:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cd74:	56                   	push   esi
c001cd75:	e8 1e 39 fe ff       	call   c0000698 <strlen>
c001cd7a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cd81:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd85:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cd8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cd90:	5a                   	pop    edx
c001cd91:	25 ff 07 00 00       	and    eax,0x7ff
c001cd96:	59                   	pop    ecx
c001cd97:	01 f8                	add    eax,edi
c001cd99:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cd9f:	83 e0 02             	and    eax,0x2
c001cda2:	3c 01                	cmp    al,0x1
c001cda4:	19 c0                	sbb    eax,eax
c001cda6:	83 c0 02             	add    eax,0x2
c001cda9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cdad:	56                   	push   esi
c001cdae:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cdb2:	50                   	push   eax
c001cdb3:	e8 80 39 fe ff       	call   c0000738 <strcpy>
c001cdb8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	84 c0                	test   al,al
c001cdc1:	75 21                	jne    c001cde4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cdc3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cdcb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdd3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cddb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cde2:	eb 28                	jmp    c001ce0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cde4:	fe c8                	dec    al
c001cde6:	75 24                	jne    c001ce0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cde8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cdf0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdf8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001ce00:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001ce07:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001ce0c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001ce10:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001ce17:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001ce1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce20:	0f b6 f3             	movzx  esi,bl
c001ce23:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001ce2a:	31 db                	xor    ebx,ebx
c001ce2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ce32:	89 df                	mov    edi,ebx
c001ce34:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001ce37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce3a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001ce3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ce40:	39 c6                	cmp    esi,eax
c001ce42:	19 d7                	sbb    edi,edx
c001ce44:	72 10                	jb     c001ce56 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ce46:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ce4d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001ce54:	eb 0a                	jmp    c001ce60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001ce56:	29 f0                	sub    eax,esi
c001ce58:	19 da                	sbb    edx,ebx
c001ce5a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce5d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce60:	31 c0                	xor    eax,eax
c001ce62:	eb 05                	jmp    c001ce69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce64:	b8 04 00 00 00       	mov    eax,0x4
c001ce69:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ce6f:	5b                   	pop    ebx
c001ce70:	5e                   	pop    esi
c001ce71:	5f                   	pop    edi
c001ce72:	5d                   	pop    ebp
c001ce73:	c3                   	ret    

c001ce74 <readRoot(unsigned int*, unsigned int*, char)>:
c001ce74:	57                   	push   edi
c001ce75:	56                   	push   esi
c001ce76:	81 ec 38 08 00 00    	sub    esp,0x838
c001ce7c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ce84:	50                   	push   eax
c001ce85:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ce89:	50                   	push   eax
c001ce8a:	6a 10                	push   0x10
c001ce8c:	e8 8a fa ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce91:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001ce98:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001ce9c:	b9 22 00 00 00       	mov    ecx,0x22
c001cea1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cea3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ceaa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ceae:	89 10                	mov    DWORD PTR [eax],edx
c001ceb0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ceb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cebb:	89 10                	mov    DWORD PTR [eax],edx
c001cebd:	81 c4 44 08 00 00    	add    esp,0x844
c001cec3:	b0 01                	mov    al,0x1
c001cec5:	5e                   	pop    esi
c001cec6:	5f                   	pop    edi
c001cec7:	c3                   	ret    

c001cec8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001cec8:	55                   	push   ebp
c001cec9:	57                   	push   edi
c001ceca:	56                   	push   esi
c001cecb:	53                   	push   ebx
c001cecc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ced2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ced9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001cee0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cee4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001cee8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ceec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cef0:	75 03                	jne    c001cef5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cef2:	83 c3 02             	add    ebx,0x2
c001cef5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001cef8:	75 03                	jne    c001cefd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001cefa:	43                   	inc    ebx
c001cefb:	eb f8                	jmp    c001cef5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cefd:	52                   	push   edx
c001cefe:	68 00 01 00 00       	push   0x100
c001cf03:	6a 00                	push   0x0
c001cf05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf09:	50                   	push   eax
c001cf0a:	e8 6d 37 fe ff       	call   c000067c <memset>
c001cf0f:	83 c4 10             	add    esp,0x10
c001cf12:	31 d2                	xor    edx,edx
c001cf14:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cf17:	84 c0                	test   al,al
c001cf19:	74 21                	je     c001cf3c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001cf1b:	3c 2f                	cmp    al,0x2f
c001cf1d:	75 0b                	jne    c001cf2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001cf1f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001cf23:	bd 01 00 00 00       	mov    ebp,0x1
c001cf28:	eb 14                	jmp    c001cf3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001cf2a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001cf2d:	80 f9 19             	cmp    cl,0x19
c001cf30:	77 03                	ja     c001cf35 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cf32:	83 e8 20             	sub    eax,0x20
c001cf35:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cf39:	42                   	inc    edx
c001cf3a:	eb d8                	jmp    c001cf14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001cf3c:	31 ed                	xor    ebp,ebp
c001cf3e:	83 ec 0c             	sub    esp,0xc
c001cf41:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cf48:	e8 06 ce fe ff       	call   c0009d53 <malloc>
c001cf4d:	89 c6                	mov    esi,eax
c001cf4f:	89 c2                	mov    edx,eax
c001cf51:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cf58:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cf5e:	c1 ef 0b             	shr    edi,0xb
c001cf61:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cf68:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cf74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf78:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cf7f:	74 29                	je     c001cfaa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cf81:	50                   	push   eax
c001cf82:	57                   	push   edi
c001cf83:	52                   	push   edx
c001cf84:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cf88:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cf8f:	e8 87 f9 ff ff       	call   c001c91b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf98:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001cf9f:	81 c2 00 08 00 00    	add    edx,0x800
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	eb ca                	jmp    c001cf74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cfaa:	83 ec 0c             	sub    esp,0xc
c001cfad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cfb1:	57                   	push   edi
c001cfb2:	e8 e1 36 fe ff       	call   c0000698 <strlen>
c001cfb7:	50                   	push   eax
c001cfb8:	57                   	push   edi
c001cfb9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cfc0:	56                   	push   esi
c001cfc1:	e8 13 f9 ff ff       	call   c001c8d9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001cfc6:	83 c4 20             	add    esp,0x20
c001cfc9:	85 c0                	test   eax,eax
c001cfcb:	75 13                	jne    c001cfe0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cfcd:	83 ec 0c             	sub    esp,0xc
c001cfd0:	56                   	push   esi
c001cfd1:	e8 8d cd fe ff       	call   c0009d63 <free>
c001cfd6:	83 c4 10             	add    esp,0x10
c001cfd9:	31 c0                	xor    eax,eax
c001cfdb:	e9 b3 00 00 00       	jmp    c001d093 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cfe0:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cfe4:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cfe8:	c1 e7 08             	shl    edi,0x8
c001cfeb:	c1 e2 10             	shl    edx,0x10
c001cfee:	09 d7                	or     edi,edx
c001cff0:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cff4:	09 d7                	or     edi,edx
c001cff6:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cffa:	c1 e2 18             	shl    edx,0x18
c001cffd:	09 d7                	or     edi,edx
c001cfff:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d003:	89 d1                	mov    ecx,edx
c001d005:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d009:	c1 e1 08             	shl    ecx,0x8
c001d00c:	c1 e2 10             	shl    edx,0x10
c001d00f:	09 ca                	or     edx,ecx
c001d011:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d015:	09 ca                	or     edx,ecx
c001d017:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d01b:	c1 e1 18             	shl    ecx,0x18
c001d01e:	09 ca                	or     edx,ecx
c001d020:	89 e9                	mov    ecx,ebp
c001d022:	84 c9                	test   cl,cl
c001d024:	74 3c                	je     c001d062 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d026:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d02a:	83 ec 0c             	sub    esp,0xc
c001d02d:	56                   	push   esi
c001d02e:	e8 30 cd fe ff       	call   c0009d63 <free>
c001d033:	83 c4 0c             	add    esp,0xc
c001d036:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d03d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d042:	50                   	push   eax
c001d043:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d04a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d055:	52                   	push   edx
c001d056:	57                   	push   edi
c001d057:	53                   	push   ebx
c001d058:	e8 6b fe ff ff       	call   c001cec8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d05d:	83 c4 20             	add    esp,0x20
c001d060:	eb 31                	jmp    c001d093 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d062:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d065:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d06c:	d0 e8                	shr    al,1
c001d06e:	89 3b                	mov    DWORD PTR [ebx],edi
c001d070:	83 e0 01             	and    eax,0x1
c001d073:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d07a:	83 ec 0c             	sub    esp,0xc
c001d07d:	89 13                	mov    DWORD PTR [ebx],edx
c001d07f:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d086:	89 03                	mov    DWORD PTR [ebx],eax
c001d088:	56                   	push   esi
c001d089:	e8 d5 cc fe ff       	call   c0009d63 <free>
c001d08e:	83 c4 10             	add    esp,0x10
c001d091:	b0 01                	mov    al,0x1
c001d093:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d099:	5b                   	pop    ebx
c001d09a:	5e                   	pop    esi
c001d09b:	5f                   	pop    edi
c001d09c:	5d                   	pop    ebp
c001d09d:	c3                   	ret    

c001d09e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d09e:	55                   	push   ebp
c001d09f:	57                   	push   edi
c001d0a0:	56                   	push   esi
c001d0a1:	53                   	push   ebx
c001d0a2:	83 ec 20             	sub    esp,0x20
c001d0a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d0a9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d0ad:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d0b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d0b9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d0c1:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d0c6:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d0cc:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d0d2:	57                   	push   edi
c001d0d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0d7:	50                   	push   eax
c001d0d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0dc:	50                   	push   eax
c001d0dd:	e8 92 fd ff ff       	call   c001ce74 <readRoot(unsigned int*, unsigned int*, char)>
c001d0e2:	5a                   	pop    edx
c001d0e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0e7:	e8 ac 35 fe ff       	call   c0000698 <strlen>
c001d0ec:	83 c4 10             	add    esp,0x10
c001d0ef:	83 f8 03             	cmp    eax,0x3
c001d0f2:	77 17                	ja     c001d10b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0f8:	89 03                	mov    DWORD PTR [ebx],eax
c001d0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0fe:	89 06                	mov    DWORD PTR [esi],eax
c001d100:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d107:	b0 01                	mov    al,0x1
c001d109:	eb 19                	jmp    c001d124 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d10b:	50                   	push   eax
c001d10c:	55                   	push   ebp
c001d10d:	57                   	push   edi
c001d10e:	56                   	push   esi
c001d10f:	53                   	push   ebx
c001d110:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d114:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d118:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d11c:	e8 a7 fd ff ff       	call   c001cec8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d121:	83 c4 20             	add    esp,0x20
c001d124:	83 c4 1c             	add    esp,0x1c
c001d127:	5b                   	pop    ebx
c001d128:	5e                   	pop    esi
c001d129:	5f                   	pop    edi
c001d12a:	5d                   	pop    ebp
c001d12b:	c3                   	ret    

c001d12c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d12c:	57                   	push   edi
c001d12d:	56                   	push   esi
c001d12e:	53                   	push   ebx
c001d12f:	83 ec 10             	sub    esp,0x10
c001d132:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d136:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d13a:	85 ff                	test   edi,edi
c001d13c:	0f 84 8b 00 00 00    	je     c001d1cd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d142:	85 f6                	test   esi,esi
c001d144:	0f 84 83 00 00 00    	je     c001d1cd <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d14a:	b8 03 00 00 00       	mov    eax,0x3
c001d14f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d154:	75 7c                	jne    c001d1d2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d156:	83 ec 0c             	sub    esp,0xc
c001d159:	6a 1c                	push   0x1c
c001d15b:	e8 f3 cb fe ff       	call   c0009d53 <malloc>
c001d160:	89 07                	mov    DWORD PTR [edi],eax
c001d162:	89 c3                	mov    ebx,eax
c001d164:	58                   	pop    eax
c001d165:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d169:	50                   	push   eax
c001d16a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d16d:	50                   	push   eax
c001d16e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d172:	50                   	push   eax
c001d173:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d177:	50                   	push   eax
c001d178:	56                   	push   esi
c001d179:	e8 20 ff ff ff       	call   c001d09e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d17e:	83 c4 20             	add    esp,0x20
c001d181:	84 c0                	test   al,al
c001d183:	74 07                	je     c001d18c <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d185:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d18a:	74 0b                	je     c001d197 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d18c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d190:	b8 01 00 00 00       	mov    eax,0x1
c001d195:	eb 3b                	jmp    c001d1d2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d19b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d19f:	89 03                	mov    DWORD PTR [ebx],eax
c001d1a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d1b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d1bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d1c4:	8a 06                	mov    al,BYTE PTR [esi]
c001d1c6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d1c9:	31 c0                	xor    eax,eax
c001d1cb:	eb 05                	jmp    c001d1d2 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d1cd:	b8 04 00 00 00       	mov    eax,0x4
c001d1d2:	83 c4 10             	add    esp,0x10
c001d1d5:	5b                   	pop    ebx
c001d1d6:	5e                   	pop    esi
c001d1d7:	5f                   	pop    edi
c001d1d8:	c3                   	ret    
c001d1d9:	90                   	nop

c001d1da <ISO9660::exists(char const*)>:
c001d1da:	83 ec 28             	sub    esp,0x28
c001d1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1e1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d1e5:	52                   	push   edx
c001d1e6:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d1e9:	52                   	push   edx
c001d1ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1ee:	52                   	push   edx
c001d1ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1f3:	52                   	push   edx
c001d1f4:	50                   	push   eax
c001d1f5:	e8 a4 fe ff ff       	call   c001d09e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d1fa:	83 c4 3c             	add    esp,0x3c
c001d1fd:	c3                   	ret    

c001d1fe <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d1fe:	56                   	push   esi
c001d1ff:	53                   	push   ebx
c001d200:	83 ec 14             	sub    esp,0x14
c001d203:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d207:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d20b:	85 db                	test   ebx,ebx
c001d20d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d211:	0f 94 c2             	sete   dl
c001d214:	85 f6                	test   esi,esi
c001d216:	0f 94 c0             	sete   al
c001d219:	08 c2                	or     dl,al
c001d21b:	75 68                	jne    c001d285 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d21d:	85 c9                	test   ecx,ecx
c001d21f:	74 64                	je     c001d285 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d221:	83 ec 0c             	sub    esp,0xc
c001d224:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d227:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d22b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d231:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d238:	50                   	push   eax
c001d239:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d23c:	50                   	push   eax
c001d23d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d241:	50                   	push   eax
c001d242:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d246:	50                   	push   eax
c001d247:	51                   	push   ecx
c001d248:	e8 51 fe ff ff       	call   c001d09e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d24d:	83 c4 20             	add    esp,0x20
c001d250:	ba 01 00 00 00       	mov    edx,0x1
c001d255:	84 c0                	test   al,al
c001d257:	74 31                	je     c001d28a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d259:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d25d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d264:	89 03                	mov    DWORD PTR [ebx],eax
c001d266:	ba 00 00 00 00       	mov    edx,0x0
c001d26b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d26f:	85 c0                	test   eax,eax
c001d271:	0f 95 06             	setne  BYTE PTR [esi]
c001d274:	74 14                	je     c001d28a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d276:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d27c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d283:	eb 05                	jmp    c001d28a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d285:	ba 04 00 00 00       	mov    edx,0x4
c001d28a:	83 c4 14             	add    esp,0x14
c001d28d:	89 d0                	mov    eax,edx
c001d28f:	5b                   	pop    ebx
c001d290:	5e                   	pop    esi
c001d291:	c3                   	ret    

c001d292 <ISO9660::openDir(char const*, void**)>:
c001d292:	57                   	push   edi
c001d293:	56                   	push   esi
c001d294:	53                   	push   ebx
c001d295:	83 ec 10             	sub    esp,0x10
c001d298:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d29c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d2a0:	85 ff                	test   edi,edi
c001d2a2:	74 7b                	je     c001d31f <ISO9660::openDir(char const*, void**)+0x8d>
c001d2a4:	85 f6                	test   esi,esi
c001d2a6:	74 77                	je     c001d31f <ISO9660::openDir(char const*, void**)+0x8d>
c001d2a8:	83 ec 0c             	sub    esp,0xc
c001d2ab:	6a 1c                	push   0x1c
c001d2ad:	e8 a1 ca fe ff       	call   c0009d53 <malloc>
c001d2b2:	89 07                	mov    DWORD PTR [edi],eax
c001d2b4:	89 c3                	mov    ebx,eax
c001d2b6:	58                   	pop    eax
c001d2b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d2bb:	50                   	push   eax
c001d2bc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d2bf:	50                   	push   eax
c001d2c0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2c4:	50                   	push   eax
c001d2c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2c9:	50                   	push   eax
c001d2ca:	56                   	push   esi
c001d2cb:	e8 ce fd ff ff       	call   c001d09e <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d2d0:	83 c4 20             	add    esp,0x20
c001d2d3:	84 c0                	test   al,al
c001d2d5:	74 07                	je     c001d2de <ISO9660::openDir(char const*, void**)+0x4c>
c001d2d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2dc:	75 0b                	jne    c001d2e9 <ISO9660::openDir(char const*, void**)+0x57>
c001d2de:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d2e2:	b8 01 00 00 00       	mov    eax,0x1
c001d2e7:	eb 3b                	jmp    c001d324 <ISO9660::openDir(char const*, void**)+0x92>
c001d2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2ed:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d2f1:	89 03                	mov    DWORD PTR [ebx],eax
c001d2f3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d2fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d305:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d30c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d30f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d316:	8a 06                	mov    al,BYTE PTR [esi]
c001d318:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d31b:	31 c0                	xor    eax,eax
c001d31d:	eb 05                	jmp    c001d324 <ISO9660::openDir(char const*, void**)+0x92>
c001d31f:	b8 04 00 00 00       	mov    eax,0x4
c001d324:	83 c4 10             	add    esp,0x10
c001d327:	5b                   	pop    ebx
c001d328:	5e                   	pop    esi
c001d329:	5f                   	pop    edi
c001d32a:	c3                   	ret    
c001d32b:	90                   	nop

c001d32c <ISO9660::ISO9660()>:
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d333:	83 ec 0c             	sub    esp,0xc
c001d336:	50                   	push   eax
c001d337:	e8 1a 00 ff ff       	call   c000d356 <Filesystem::Filesystem()>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	ba 14 71 02 c0       	mov    edx,0xc0027114
c001d344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d348:	89 10                	mov    DWORD PTR [eax],edx
c001d34a:	90                   	nop
c001d34b:	83 c4 0c             	add    esp,0xc
c001d34e:	c3                   	ret    
c001d34f:	90                   	nop

c001d350 <SoundCard::beginPlayback()>:
c001d350:	c7 44 24 04 74 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027174
c001d358:	e9 a4 7c ff ff       	jmp    c0015001 <Krnl::panic(char const*)>
c001d35d:	90                   	nop

c001d35e <SoundCard::stopPlayback()>:
c001d35e:	c7 44 24 04 a8 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc00271a8
c001d366:	e9 96 7c ff ff       	jmp    c0015001 <Krnl::panic(char const*)>
c001d36b:	90                   	nop

c001d36c <SoundCard::SoundCard(char const*)>:
c001d36c:	83 ec 1c             	sub    esp,0x1c
c001d36f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d373:	83 ec 08             	sub    esp,0x8
c001d376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d37a:	50                   	push   eax
c001d37b:	e8 36 14 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	ba 40 72 02 c0       	mov    edx,0xc0027240
c001d388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38c:	89 10                	mov    DWORD PTR [eax],edx
c001d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d392:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d3a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ab:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d3c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d3d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d3d9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d3de:	7f 19                	jg     c001d3f9 <SoundCard::SoundCard(char const*)+0x8d>
c001d3e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3e8:	83 c2 54             	add    edx,0x54
c001d3eb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d3f3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d3f7:	eb e0                	jmp    c001d3d9 <SoundCard::SoundCard(char const*)+0x6d>
c001d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d404:	90                   	nop
c001d405:	83 c4 1c             	add    esp,0x1c
c001d408:	c3                   	ret    
c001d409:	90                   	nop

c001d40a <SoundCard::~SoundCard()>:
c001d40a:	83 ec 0c             	sub    esp,0xc
c001d40d:	ba 40 72 02 c0       	mov    edx,0xc0027240
c001d412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d416:	89 10                	mov    DWORD PTR [eax],edx
c001d418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41c:	83 ec 0c             	sub    esp,0xc
c001d41f:	50                   	push   eax
c001d420:	e8 5b 10 ff ff       	call   c000e480 <Device::~Device()>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	90                   	nop
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	c3                   	ret    
c001d42d:	90                   	nop

c001d42e <SoundCard::~SoundCard()>:
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	83 ec 0c             	sub    esp,0xc
c001d434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d438:	e8 cd ff ff ff       	call   c001d40a <SoundCard::~SoundCard()>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	83 ec 08             	sub    esp,0x8
c001d443:	68 e8 01 00 00       	push   0x1e8
c001d448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d44c:	e8 0d fb fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001d451:	83 c4 10             	add    esp,0x10
c001d454:	83 c4 0c             	add    esp,0xc
c001d457:	c3                   	ret    

c001d458 <SoundCard::configureRates(int, int, int)>:
c001d458:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d45c:	31 c0                	xor    eax,eax
c001d45e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d465:	75 20                	jne    c001d487 <SoundCard::configureRates(int, int, int)+0x2f>
c001d467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d46b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d471:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d475:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d485:	b0 01                	mov    al,0x1
c001d487:	c3                   	ret    

c001d488 <SoundCard::getSamples16(int, short*)>:
c001d488:	55                   	push   ebp
c001d489:	57                   	push   edi
c001d48a:	31 ff                	xor    edi,edi
c001d48c:	56                   	push   esi
c001d48d:	53                   	push   ebx
c001d48e:	31 db                	xor    ebx,ebx
c001d490:	83 ec 18             	sub    esp,0x18
c001d493:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d497:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d49b:	68 db 71 02 c0       	push   0xc00271db
c001d4a0:	e8 9a fb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d4a5:	83 c4 0c             	add    esp,0xc
c001d4a8:	8d 04 36             	lea    eax,[esi+esi*1]
c001d4ab:	50                   	push   eax
c001d4ac:	6a 00                	push   0x0
c001d4ae:	55                   	push   ebp
c001d4af:	e8 c8 31 fe ff       	call   c000067c <memset>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bb:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d4c2:	85 c0                	test   eax,eax
c001d4c4:	74 1b                	je     c001d4e1 <SoundCard::getSamples16(int, short*)+0x59>
c001d4c6:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d4ca:	75 15                	jne    c001d4e1 <SoundCard::getSamples16(int, short*)+0x59>
c001d4cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d4d0:	55                   	push   ebp
c001d4d1:	56                   	push   esi
c001d4d2:	50                   	push   eax
c001d4d3:	e8 58 03 00 00       	call   c001d830 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d4d8:	83 c4 10             	add    esp,0x10
c001d4db:	39 c7                	cmp    edi,eax
c001d4dd:	7d 02                	jge    c001d4e1 <SoundCard::getSamples16(int, short*)+0x59>
c001d4df:	89 c7                	mov    edi,eax
c001d4e1:	43                   	inc    ebx
c001d4e2:	83 fb 20             	cmp    ebx,0x20
c001d4e5:	75 d0                	jne    c001d4b7 <SoundCard::getSamples16(int, short*)+0x2f>
c001d4e7:	83 c4 0c             	add    esp,0xc
c001d4ea:	89 f8                	mov    eax,edi
c001d4ec:	5b                   	pop    ebx
c001d4ed:	5e                   	pop    esi
c001d4ee:	5f                   	pop    edi
c001d4ef:	5d                   	pop    ebp
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <SoundCard::getSamples32(int, int*)>:
c001d4f2:	55                   	push   ebp
c001d4f3:	57                   	push   edi
c001d4f4:	31 ff                	xor    edi,edi
c001d4f6:	56                   	push   esi
c001d4f7:	31 f6                	xor    esi,esi
c001d4f9:	53                   	push   ebx
c001d4fa:	83 ec 10             	sub    esp,0x10
c001d4fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d501:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d505:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d509:	c1 e0 02             	shl    eax,0x2
c001d50c:	50                   	push   eax
c001d50d:	6a 00                	push   0x0
c001d50f:	55                   	push   ebp
c001d510:	e8 67 31 fe ff       	call   c000067c <memset>
c001d515:	83 c4 10             	add    esp,0x10
c001d518:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d51f:	85 c0                	test   eax,eax
c001d521:	74 1b                	je     c001d53e <SoundCard::getSamples32(int, int*)+0x4c>
c001d523:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d527:	75 15                	jne    c001d53e <SoundCard::getSamples32(int, int*)+0x4c>
c001d529:	53                   	push   ebx
c001d52a:	55                   	push   ebp
c001d52b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d52f:	50                   	push   eax
c001d530:	e8 f7 03 00 00       	call   c001d92c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	39 c6                	cmp    esi,eax
c001d53a:	7d 02                	jge    c001d53e <SoundCard::getSamples32(int, int*)+0x4c>
c001d53c:	89 c6                	mov    esi,eax
c001d53e:	47                   	inc    edi
c001d53f:	83 ff 20             	cmp    edi,0x20
c001d542:	75 d4                	jne    c001d518 <SoundCard::getSamples32(int, int*)+0x26>
c001d544:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d54a:	85 f6                	test   esi,esi
c001d54c:	75 0f                	jne    c001d55d <SoundCard::getSamples32(int, int*)+0x6b>
c001d54e:	84 c0                	test   al,al
c001d550:	74 1b                	je     c001d56d <SoundCard::getSamples32(int, int*)+0x7b>
c001d552:	83 ec 0c             	sub    esp,0xc
c001d555:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d557:	53                   	push   ebx
c001d558:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d55b:	eb 0d                	jmp    c001d56a <SoundCard::getSamples32(int, int*)+0x78>
c001d55d:	84 c0                	test   al,al
c001d55f:	75 0c                	jne    c001d56d <SoundCard::getSamples32(int, int*)+0x7b>
c001d561:	83 ec 0c             	sub    esp,0xc
c001d564:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d566:	53                   	push   ebx
c001d567:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	83 c4 0c             	add    esp,0xc
c001d570:	89 f0                	mov    eax,esi
c001d572:	5b                   	pop    ebx
c001d573:	5e                   	pop    esi
c001d574:	5f                   	pop    edi
c001d575:	5d                   	pop    ebp
c001d576:	c3                   	ret    
c001d577:	90                   	nop

c001d578 <SoundCard::addChannel(SoundPort*)>:
c001d578:	56                   	push   esi
c001d579:	53                   	push   ebx
c001d57a:	53                   	push   ebx
c001d57b:	31 db                	xor    ebx,ebx
c001d57d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d581:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d589:	74 27                	je     c001d5b2 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d58b:	43                   	inc    ebx
c001d58c:	83 fb 20             	cmp    ebx,0x20
c001d58f:	75 f0                	jne    c001d581 <SoundCard::addChannel(SoundPort*)+0x9>
c001d591:	83 ec 0c             	sub    esp,0xc
c001d594:	83 cb ff             	or     ebx,0xffffffff
c001d597:	68 01 72 02 c0       	push   0xc0027201
c001d59c:	e8 9e fa fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d5a1:	c7 04 24 fa 71 02 c0 	mov    DWORD PTR [esp],0xc00271fa
c001d5a8:	e8 54 7a ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	eb 1b                	jmp    c001d5cd <SoundCard::addChannel(SoundPort*)+0x55>
c001d5b2:	51                   	push   ecx
c001d5b3:	51                   	push   ecx
c001d5b4:	53                   	push   ebx
c001d5b5:	68 19 72 02 c0       	push   0xc0027219
c001d5ba:	e8 80 fa fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d5bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5c3:	83 c4 10             	add    esp,0x10
c001d5c6:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d5cd:	89 d8                	mov    eax,ebx
c001d5cf:	5a                   	pop    edx
c001d5d0:	5b                   	pop    ebx
c001d5d1:	5e                   	pop    esi
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <SoundCard::removeChannel(int)>:
c001d5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5dc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d5e7:	c3                   	ret    

c001d5e8 <SoundPort::SoundPort(int, int, int, int)>:
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d606:	89 10                	mov    DWORD PTR [eax],edx
c001d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d610:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d617:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d61b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d61e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d623:	75 13                	jne    c001d638 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d629:	8b 00                	mov    eax,DWORD PTR [eax]
c001d62b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d630:	01 c0                	add    eax,eax
c001d632:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d636:	66 90                	xchg   ax,ax
c001d638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d640:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d647:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d652:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d655:	c1 e0 02             	shl    eax,0x2
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	50                   	push   eax
c001d65c:	e8 f2 c6 fe ff       	call   c0009d53 <malloc>
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	89 c2                	mov    edx,eax
c001d666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d66d:	90                   	nop
c001d66e:	83 c4 0c             	add    esp,0xc
c001d671:	c3                   	ret    
c001d672:	66 90                	xchg   ax,ax

c001d674 <SoundPort::~SoundPort()>:
c001d674:	83 ec 0c             	sub    esp,0xc
c001d677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d67b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d67e:	85 c0                	test   eax,eax
c001d680:	74 1e                	je     c001d6a0 <SoundPort::~SoundPort()+0x2c>
c001d682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d686:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d689:	83 ec 0c             	sub    esp,0xc
c001d68c:	50                   	push   eax
c001d68d:	e8 d1 c6 fe ff       	call   c0009d63 <free>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d699:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d6a0:	90                   	nop
c001d6a1:	83 c4 0c             	add    esp,0xc
c001d6a4:	c3                   	ret    
c001d6a5:	90                   	nop
c001d6a6:	66 90                	xchg   ax,ax

c001d6a8 <SoundPort::unpause()>:
c001d6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d6b0:	c3                   	ret    
c001d6b1:	90                   	nop
c001d6b2:	66 90                	xchg   ax,ax

c001d6b4 <SoundPort::pause()>:
c001d6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d6bc:	c3                   	ret    
c001d6bd:	90                   	nop
c001d6be:	66 90                	xchg   ax,ax

c001d6c0 <SoundPort::getBufferUsed()>:
c001d6c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d6c7:	c3                   	ret    

c001d6c8 <SoundPort::getBufferSize()>:
c001d6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d6cf:	c3                   	ret    

c001d6d0 <SoundPort::buffer16(short*, int)>:
c001d6d0:	55                   	push   ebp
c001d6d1:	57                   	push   edi
c001d6d2:	56                   	push   esi
c001d6d3:	53                   	push   ebx
c001d6d4:	83 ec 1c             	sub    esp,0x1c
c001d6d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6db:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6df:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d6e2:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d6e5:	0f 84 85 00 00 00    	je     c001d770 <SoundPort::buffer16(short*, int)+0xa0>
c001d6eb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d6ef:	85 c9                	test   ecx,ecx
c001d6f1:	7e 7d                	jle    c001d770 <SoundPort::buffer16(short*, int)+0xa0>
c001d6f3:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d6f7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d6fa:	c1 e1 0f             	shl    ecx,0xf
c001d6fd:	8d 70 01             	lea    esi,[eax+0x1]
c001d700:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d703:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d706:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d709:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d70c:	74 6e                	je     c001d77c <SoundPort::buffer16(short*, int)+0xac>
c001d70e:	31 f6                	xor    esi,esi
c001d710:	eb 22                	jmp    c001d734 <SoundPort::buffer16(short*, int)+0x64>
c001d712:	66 90                	xchg   ax,ax
c001d714:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d719:	8d 79 01             	lea    edi,[ecx+0x1]
c001d71c:	c1 e3 0f             	shl    ebx,0xf
c001d71f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d722:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d725:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d728:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d72b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d72e:	74 1c                	je     c001d74c <SoundPort::buffer16(short*, int)+0x7c>
c001d730:	89 c6                	mov    esi,eax
c001d732:	66 90                	xchg   ax,ax
c001d734:	8d 46 01             	lea    eax,[esi+0x1]
c001d737:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d73b:	75 d7                	jne    c001d714 <SoundPort::buffer16(short*, int)+0x44>
c001d73d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d741:	83 c4 1c             	add    esp,0x1c
c001d744:	5b                   	pop    ebx
c001d745:	5e                   	pop    esi
c001d746:	5f                   	pop    edi
c001d747:	5d                   	pop    ebp
c001d748:	c3                   	ret    
c001d749:	8d 76 00             	lea    esi,[esi+0x0]
c001d74c:	8d 46 02             	lea    eax,[esi+0x2]
c001d74f:	90                   	nop
c001d750:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d754:	83 ec 0c             	sub    esp,0xc
c001d757:	68 6c 72 02 c0       	push   0xc002726c
c001d75c:	e8 de f8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d761:	83 c4 10             	add    esp,0x10
c001d764:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d768:	83 c4 1c             	add    esp,0x1c
c001d76b:	5b                   	pop    ebx
c001d76c:	5e                   	pop    esi
c001d76d:	5f                   	pop    edi
c001d76e:	5d                   	pop    ebp
c001d76f:	c3                   	ret    
c001d770:	83 c4 1c             	add    esp,0x1c
c001d773:	31 c0                	xor    eax,eax
c001d775:	5b                   	pop    ebx
c001d776:	5e                   	pop    esi
c001d777:	5f                   	pop    edi
c001d778:	5d                   	pop    ebp
c001d779:	c3                   	ret    
c001d77a:	66 90                	xchg   ax,ax
c001d77c:	b8 01 00 00 00       	mov    eax,0x1
c001d781:	eb cd                	jmp    c001d750 <SoundPort::buffer16(short*, int)+0x80>
c001d783:	90                   	nop

c001d784 <SoundPort::buffer32(int*, int)>:
c001d784:	55                   	push   ebp
c001d785:	57                   	push   edi
c001d786:	56                   	push   esi
c001d787:	53                   	push   ebx
c001d788:	83 ec 1c             	sub    esp,0x1c
c001d78b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d78f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d793:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d796:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d79a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d79e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7a1:	74 79                	je     c001d81c <SoundPort::buffer32(int*, int)+0x98>
c001d7a3:	85 c0                	test   eax,eax
c001d7a5:	7e 75                	jle    c001d81c <SoundPort::buffer32(int*, int)+0x98>
c001d7a7:	8d 71 01             	lea    esi,[ecx+0x1]
c001d7aa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d7ad:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d7b0:	8b 37                	mov    esi,DWORD PTR [edi]
c001d7b2:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d7b5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7b8:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7bb:	74 6b                	je     c001d828 <SoundPort::buffer32(int*, int)+0xa4>
c001d7bd:	31 f6                	xor    esi,esi
c001d7bf:	eb 1f                	jmp    c001d7e0 <SoundPort::buffer32(int*, int)+0x5c>
c001d7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d7c4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d7c7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d7ca:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d7cd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d7d0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d7d4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7d7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7da:	74 1c                	je     c001d7f8 <SoundPort::buffer32(int*, int)+0x74>
c001d7dc:	89 de                	mov    esi,ebx
c001d7de:	66 90                	xchg   ax,ax
c001d7e0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d7e3:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d7e7:	75 db                	jne    c001d7c4 <SoundPort::buffer32(int*, int)+0x40>
c001d7e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7ed:	83 c4 1c             	add    esp,0x1c
c001d7f0:	5b                   	pop    ebx
c001d7f1:	5e                   	pop    esi
c001d7f2:	5f                   	pop    edi
c001d7f3:	5d                   	pop    ebp
c001d7f4:	c3                   	ret    
c001d7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d7f8:	8d 46 02             	lea    eax,[esi+0x2]
c001d7fb:	90                   	nop
c001d7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d800:	83 ec 0c             	sub    esp,0xc
c001d803:	68 87 72 02 c0       	push   0xc0027287
c001d808:	e8 32 f8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d814:	83 c4 1c             	add    esp,0x1c
c001d817:	5b                   	pop    ebx
c001d818:	5e                   	pop    esi
c001d819:	5f                   	pop    edi
c001d81a:	5d                   	pop    ebp
c001d81b:	c3                   	ret    
c001d81c:	83 c4 1c             	add    esp,0x1c
c001d81f:	31 c0                	xor    eax,eax
c001d821:	5b                   	pop    ebx
c001d822:	5e                   	pop    esi
c001d823:	5f                   	pop    edi
c001d824:	5d                   	pop    ebp
c001d825:	c3                   	ret    
c001d826:	66 90                	xchg   ax,ax
c001d828:	b8 01 00 00 00       	mov    eax,0x1
c001d82d:	eb cd                	jmp    c001d7fc <SoundPort::buffer32(int*, int)+0x78>
c001d82f:	90                   	nop

c001d830 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d830:	57                   	push   edi
c001d831:	56                   	push   esi
c001d832:	53                   	push   ebx
c001d833:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d837:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d83b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d841:	39 03                	cmp    DWORD PTR [ebx],eax
c001d843:	74 13                	je     c001d858 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d845:	83 ec 0c             	sub    esp,0xc
c001d848:	68 dc 72 02 c0       	push   0xc00272dc
c001d84d:	e8 af 77 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d852:	83 c4 10             	add    esp,0x10
c001d855:	8d 76 00             	lea    esi,[esi+0x0]
c001d858:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d85e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d861:	74 11                	je     c001d874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d863:	83 ec 0c             	sub    esp,0xc
c001d866:	68 a2 72 02 c0       	push   0xc00272a2
c001d86b:	e8 91 77 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d870:	83 c4 10             	add    esp,0x10
c001d873:	90                   	nop
c001d874:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d87a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d87d:	74 11                	je     c001d890 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d87f:	83 ec 0c             	sub    esp,0xc
c001d882:	68 a2 72 02 c0       	push   0xc00272a2
c001d887:	e8 75 77 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d88c:	83 c4 10             	add    esp,0x10
c001d88f:	90                   	nop
c001d890:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d893:	89 c6                	mov    esi,eax
c001d895:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d899:	7e 05                	jle    c001d8a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d89b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d89f:	90                   	nop
c001d8a0:	85 f6                	test   esi,esi
c001d8a2:	7e 30                	jle    c001d8d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d8a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d8a8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d8ab:	31 c9                	xor    ecx,ecx
c001d8ad:	01 d7                	add    edi,edx
c001d8af:	90                   	nop
c001d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d8b3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d8b6:	85 c0                	test   eax,eax
c001d8b8:	79 06                	jns    c001d8c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d8ba:	05 ff 7f 00 00       	add    eax,0x7fff
c001d8bf:	90                   	nop
c001d8c0:	c1 f8 0f             	sar    eax,0xf
c001d8c3:	83 c1 04             	add    ecx,0x4
c001d8c6:	66 01 02             	add    WORD PTR [edx],ax
c001d8c9:	83 c2 02             	add    edx,0x2
c001d8cc:	39 d7                	cmp    edi,edx
c001d8ce:	75 e0                	jne    c001d8b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d8d0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d8d3:	90                   	nop
c001d8d4:	56                   	push   esi
c001d8d5:	89 c2                	mov    edx,eax
c001d8d7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d8de:	29 f2                	sub    edx,esi
c001d8e0:	52                   	push   edx
c001d8e1:	50                   	push   eax
c001d8e2:	68 fc 72 02 c0       	push   0xc00272fc
c001d8e7:	e8 53 f7 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d8ec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d8ef:	50                   	push   eax
c001d8f0:	01 f8                	add    eax,edi
c001d8f2:	50                   	push   eax
c001d8f3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8f6:	29 f0                	sub    eax,esi
c001d8f8:	c1 e0 02             	shl    eax,0x2
c001d8fb:	50                   	push   eax
c001d8fc:	68 2c 73 02 c0       	push   0xc002732c
c001d901:	e8 39 f7 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d906:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d909:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d90c:	83 c4 1c             	add    esp,0x1c
c001d90f:	01 d7                	add    edi,edx
c001d911:	29 f0                	sub    eax,esi
c001d913:	c1 e0 02             	shl    eax,0x2
c001d916:	50                   	push   eax
c001d917:	57                   	push   edi
c001d918:	52                   	push   edx
c001d919:	e8 96 2c fe ff       	call   c00005b4 <memmove>
c001d91e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	89 f0                	mov    eax,esi
c001d926:	5b                   	pop    ebx
c001d927:	5e                   	pop    esi
c001d928:	5f                   	pop    edi
c001d929:	c3                   	ret    
c001d92a:	66 90                	xchg   ax,ax

c001d92c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d92c:	57                   	push   edi
c001d92d:	56                   	push   esi
c001d92e:	53                   	push   ebx
c001d92f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d933:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d937:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d93b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d941:	39 06                	cmp    DWORD PTR [esi],eax
c001d943:	74 13                	je     c001d958 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	68 50 73 02 c0       	push   0xc0027350
c001d94d:	e8 af 76 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d952:	83 c4 10             	add    esp,0x10
c001d955:	8d 76 00             	lea    esi,[esi+0x0]
c001d958:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d95e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d961:	74 11                	je     c001d974 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d963:	83 ec 0c             	sub    esp,0xc
c001d966:	68 be 72 02 c0       	push   0xc00272be
c001d96b:	e8 91 76 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	90                   	nop
c001d974:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d97a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d97d:	74 11                	je     c001d990 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	68 be 72 02 c0       	push   0xc00272be
c001d987:	e8 75 76 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001d98c:	83 c4 10             	add    esp,0x10
c001d98f:	90                   	nop
c001d990:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d993:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d997:	7e 07                	jle    c001d9a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d999:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d99d:	8d 76 00             	lea    esi,[esi+0x0]
c001d9a0:	85 ff                	test   edi,edi
c001d9a2:	7e 1c                	jle    c001d9c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d9a4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d9ab:	31 c0                	xor    eax,eax
c001d9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d9b0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d9b3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d9b6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d9b9:	83 c0 04             	add    eax,0x4
c001d9bc:	39 c1                	cmp    ecx,eax
c001d9be:	75 f0                	jne    c001d9b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d9c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d9c3:	50                   	push   eax
c001d9c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d9c7:	29 f8                	sub    eax,edi
c001d9c9:	c1 e0 02             	shl    eax,0x2
c001d9cc:	50                   	push   eax
c001d9cd:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d9d0:	50                   	push   eax
c001d9d1:	52                   	push   edx
c001d9d2:	e8 dd 2b fe ff       	call   c00005b4 <memmove>
c001d9d7:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d9da:	83 c4 10             	add    esp,0x10
c001d9dd:	89 f8                	mov    eax,edi
c001d9df:	5b                   	pop    ebx
c001d9e0:	5e                   	pop    esi
c001d9e1:	5f                   	pop    edi
c001d9e2:	c3                   	ret    
c001d9e3:	90                   	nop

c001d9e4 <PCI::open(int, int, void*)>:
c001d9e4:	83 ec 18             	sub    esp,0x18
c001d9e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9f5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d9f7:	50                   	push   eax
c001d9f8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d9fb:	31 c0                	xor    eax,eax
c001d9fd:	83 c4 1c             	add    esp,0x1c
c001da00:	c3                   	ret    
c001da01:	90                   	nop

c001da02 <PCI::close(int, int, void*)>:
c001da02:	31 c0                	xor    eax,eax
c001da04:	c3                   	ret    
c001da05:	90                   	nop

c001da06 <PCI::PCI()>:
c001da06:	83 ec 0c             	sub    esp,0xc
c001da09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da0d:	83 ec 08             	sub    esp,0x8
c001da10:	68 6f 73 02 c0       	push   0xc002736f
c001da15:	50                   	push   eax
c001da16:	e8 fd 03 ff ff       	call   c000de18 <Bus::Bus(char const*)>
c001da1b:	83 c4 10             	add    esp,0x10
c001da1e:	ba 44 75 02 c0       	mov    edx,0xc0027544
c001da23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da27:	89 10                	mov    DWORD PTR [eax],edx
c001da29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da2d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001da37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da3b:	a3 e0 ab 02 c0       	mov    ds:0xc002abe0,eax
c001da40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da4a:	0f b6 d0             	movzx  edx,al
c001da4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da51:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001da58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da62:	0f b6 d0             	movzx  edx,al
c001da65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da69:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001da6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da78:	8d 50 01             	lea    edx,[eax+0x1]
c001da7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001da85:	0f b6 d0             	movzx  edx,al
c001da88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da8c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da90:	83 c9 c0             	or     ecx,0xffffffc0
c001da93:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da97:	90                   	nop
c001da98:	83 c4 0c             	add    esp,0xc
c001da9b:	c3                   	ret    

c001da9c <PCI::readBAR8(unsigned int, int)>:
c001da9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daa4:	f6 c2 01             	test   dl,0x1
c001daa7:	74 07                	je     c001dab0 <PCI::readBAR8(unsigned int, int)+0x14>
c001daa9:	83 e2 fc             	and    edx,0xfffffffc
c001daac:	01 c2                	add    edx,eax
c001daae:	ec                   	in     al,dx
c001daaf:	c3                   	ret    
c001dab0:	83 e2 f0             	and    edx,0xfffffff0
c001dab3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dab6:	c3                   	ret    
c001dab7:	90                   	nop

c001dab8 <PCI::readBAR16(unsigned int, int)>:
c001dab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dabc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dac0:	f6 c2 01             	test   dl,0x1
c001dac3:	74 08                	je     c001dacd <PCI::readBAR16(unsigned int, int)+0x15>
c001dac5:	83 e2 fc             	and    edx,0xfffffffc
c001dac8:	01 c2                	add    edx,eax
c001daca:	66 ed                	in     ax,dx
c001dacc:	c3                   	ret    
c001dacd:	83 e2 f0             	and    edx,0xfffffff0
c001dad0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dad4:	c3                   	ret    
c001dad5:	90                   	nop

c001dad6 <PCI::readBAR32(unsigned int, int)>:
c001dad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dade:	f6 c2 01             	test   dl,0x1
c001dae1:	74 07                	je     c001daea <PCI::readBAR32(unsigned int, int)+0x14>
c001dae3:	83 e2 fc             	and    edx,0xfffffffc
c001dae6:	01 c2                	add    edx,eax
c001dae8:	ed                   	in     eax,dx
c001dae9:	c3                   	ret    
c001daea:	83 e2 f0             	and    edx,0xfffffff0
c001daed:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001daf0:	c3                   	ret    
c001daf1:	90                   	nop

c001daf2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001daf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dafa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dafe:	f6 c2 01             	test   dl,0x1
c001db01:	74 07                	je     c001db0a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001db03:	83 e2 fc             	and    edx,0xfffffffc
c001db06:	01 ca                	add    edx,ecx
c001db08:	ee                   	out    dx,al
c001db09:	c3                   	ret    
c001db0a:	83 e2 f0             	and    edx,0xfffffff0
c001db0d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001db10:	c3                   	ret    
c001db11:	90                   	nop

c001db12 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001db12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db1e:	f6 c2 01             	test   dl,0x1
c001db21:	74 08                	je     c001db2b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001db23:	83 e2 fc             	and    edx,0xfffffffc
c001db26:	01 ca                	add    edx,ecx
c001db28:	66 ef                	out    dx,ax
c001db2a:	c3                   	ret    
c001db2b:	83 e2 f0             	and    edx,0xfffffff0
c001db2e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001db32:	c3                   	ret    
c001db33:	90                   	nop

c001db34 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001db34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db40:	f6 c2 01             	test   dl,0x1
c001db43:	74 07                	je     c001db4c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001db45:	83 e2 fc             	and    edx,0xfffffffc
c001db48:	01 ca                	add    edx,ecx
c001db4a:	ef                   	out    dx,eax
c001db4b:	c3                   	ret    
c001db4c:	83 e2 f0             	and    edx,0xfffffff0
c001db4f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001db52:	c3                   	ret    
c001db53:	90                   	nop

c001db54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db54:	55                   	push   ebp
c001db55:	57                   	push   edi
c001db56:	56                   	push   esi
c001db57:	53                   	push   ebx
c001db58:	83 ec 0c             	sub    esp,0xc
c001db5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001db63:	89 f0                	mov    eax,esi
c001db65:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001db69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db6d:	3c 07                	cmp    al,0x7
c001db6f:	76 10                	jbe    c001db81 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001db71:	83 ec 0c             	sub    esp,0xc
c001db74:	68 77 73 02 c0       	push   0xc0027377
c001db79:	e8 83 74 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	80 fb 0f             	cmp    bl,0xf
c001db84:	76 10                	jbe    c001db96 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001db86:	83 ec 0c             	sub    esp,0xc
c001db89:	68 a7 73 02 c0       	push   0xc00273a7
c001db8e:	e8 6e 74 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001db93:	83 c4 10             	add    esp,0x10
c001db96:	8d 04 36             	lea    eax,[esi+esi*1]
c001db99:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db9e:	83 c8 f0             	or     eax,0xfffffff0
c001dba1:	ee                   	out    dx,al
c001dba2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dba7:	89 e8                	mov    eax,ebp
c001dba9:	ee                   	out    dx,al
c001dbaa:	83 c4 0c             	add    esp,0xc
c001dbad:	89 d8                	mov    eax,ebx
c001dbaf:	66 81 e7 fc 00       	and    di,0xfc
c001dbb4:	5b                   	pop    ebx
c001dbb5:	c1 e0 08             	shl    eax,0x8
c001dbb8:	5e                   	pop    esi
c001dbb9:	09 f8                	or     eax,edi
c001dbbb:	5f                   	pop    edi
c001dbbc:	66 0d 00 c0          	or     ax,0xc000
c001dbc0:	5d                   	pop    ebp
c001dbc1:	c3                   	ret    

c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dbc2:	57                   	push   edi
c001dbc3:	56                   	push   esi
c001dbc4:	53                   	push   ebx
c001dbc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbcd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dbd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dbd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dbdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dbdf:	83 ff 01             	cmp    edi,0x1
c001dbe2:	75 3e                	jne    c001dc22 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001dbe4:	89 de                	mov    esi,ebx
c001dbe6:	0f b6 c0             	movzx  eax,al
c001dbe9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dbef:	c1 e0 10             	shl    eax,0x10
c001dbf2:	0f b6 c9             	movzx  ecx,cl
c001dbf5:	09 f0                	or     eax,esi
c001dbf7:	c1 e1 08             	shl    ecx,0x8
c001dbfa:	0f b6 d2             	movzx  edx,dl
c001dbfd:	09 c8                	or     eax,ecx
c001dbff:	c1 e2 0b             	shl    edx,0xb
c001dc02:	09 d0                	or     eax,edx
c001dc04:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dc09:	0d 00 00 00 80       	or     eax,0x80000000
c001dc0e:	ef                   	out    dx,eax
c001dc0f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dc14:	ed                   	in     eax,dx
c001dc15:	83 e3 02             	and    ebx,0x2
c001dc18:	0f b6 cb             	movzx  ecx,bl
c001dc1b:	c1 e1 03             	shl    ecx,0x3
c001dc1e:	d3 e8                	shr    eax,cl
c001dc20:	eb 43                	jmp    c001dc65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dc22:	83 ff 02             	cmp    edi,0x2
c001dc25:	75 2c                	jne    c001dc53 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001dc27:	83 ec 0c             	sub    esp,0xc
c001dc2a:	0f b6 c9             	movzx  ecx,cl
c001dc2d:	0f b6 d2             	movzx  edx,dl
c001dc30:	0f b6 fb             	movzx  edi,bl
c001dc33:	0f b6 c0             	movzx  eax,al
c001dc36:	57                   	push   edi
c001dc37:	51                   	push   ecx
c001dc38:	52                   	push   edx
c001dc39:	50                   	push   eax
c001dc3a:	56                   	push   esi
c001dc3b:	e8 14 ff ff ff       	call   c001db54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc40:	89 c2                	mov    edx,eax
c001dc42:	ed                   	in     eax,dx
c001dc43:	83 e3 02             	and    ebx,0x2
c001dc46:	83 c4 20             	add    esp,0x20
c001dc49:	0f b6 cb             	movzx  ecx,bl
c001dc4c:	c1 e1 03             	shl    ecx,0x3
c001dc4f:	d3 e8                	shr    eax,cl
c001dc51:	eb 12                	jmp    c001dc65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dc53:	83 ec 0c             	sub    esp,0xc
c001dc56:	68 d7 73 02 c0       	push   0xc00273d7
c001dc5b:	e8 a1 73 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001dc60:	83 c4 10             	add    esp,0x10
c001dc63:	31 c0                	xor    eax,eax
c001dc65:	5b                   	pop    ebx
c001dc66:	5e                   	pop    esi
c001dc67:	5f                   	pop    edi
c001dc68:	c3                   	ret    
c001dc69:	90                   	nop

c001dc6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dc6a:	83 ec 18             	sub    esp,0x18
c001dc6d:	6a 00                	push   0x0
c001dc6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc74:	50                   	push   eax
c001dc75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc7a:	50                   	push   eax
c001dc7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc80:	50                   	push   eax
c001dc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc85:	e8 38 ff ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc8a:	83 c4 2c             	add    esp,0x2c
c001dc8d:	c3                   	ret    

c001dc8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dc8e:	83 ec 18             	sub    esp,0x18
c001dc91:	6a 0e                	push   0xe
c001dc93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc98:	50                   	push   eax
c001dc99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc9e:	50                   	push   eax
c001dc9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dca4:	50                   	push   eax
c001dca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dca9:	e8 14 ff ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcae:	83 c4 2c             	add    esp,0x2c
c001dcb1:	0f b6 c0             	movzx  eax,al
c001dcb4:	c3                   	ret    
c001dcb5:	90                   	nop

c001dcb6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dcb6:	55                   	push   ebp
c001dcb7:	57                   	push   edi
c001dcb8:	56                   	push   esi
c001dcb9:	53                   	push   ebx
c001dcba:	83 ec 18             	sub    esp,0x18
c001dcbd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dcc2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dcc7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dccc:	6a 0a                	push   0xa
c001dcce:	56                   	push   esi
c001dccf:	55                   	push   ebp
c001dcd0:	57                   	push   edi
c001dcd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcd5:	e8 e8 fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcda:	83 c4 14             	add    esp,0x14
c001dcdd:	89 c3                	mov    ebx,eax
c001dcdf:	6a 0a                	push   0xa
c001dce1:	0f b6 db             	movzx  ebx,bl
c001dce4:	56                   	push   esi
c001dce5:	55                   	push   ebp
c001dce6:	57                   	push   edi
c001dce7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dceb:	e8 d2 fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcf0:	83 c4 2c             	add    esp,0x2c
c001dcf3:	25 00 ff 00 00       	and    eax,0xff00
c001dcf8:	09 d8                	or     eax,ebx
c001dcfa:	5b                   	pop    ebx
c001dcfb:	5e                   	pop    esi
c001dcfc:	5f                   	pop    edi
c001dcfd:	5d                   	pop    ebp
c001dcfe:	c3                   	ret    
c001dcff:	90                   	nop

c001dd00 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dd00:	83 ec 18             	sub    esp,0x18
c001dd03:	6a 08                	push   0x8
c001dd05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd0a:	50                   	push   eax
c001dd0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd10:	50                   	push   eax
c001dd11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd16:	50                   	push   eax
c001dd17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd1b:	e8 a2 fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd20:	83 c4 2c             	add    esp,0x2c
c001dd23:	0f b6 c4             	movzx  eax,ah
c001dd26:	c3                   	ret    
c001dd27:	90                   	nop

c001dd28 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dd28:	83 ec 18             	sub    esp,0x18
c001dd2b:	6a 08                	push   0x8
c001dd2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd32:	50                   	push   eax
c001dd33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd38:	50                   	push   eax
c001dd39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd3e:	50                   	push   eax
c001dd3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd43:	e8 7a fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd48:	83 c4 2c             	add    esp,0x2c
c001dd4b:	c3                   	ret    

c001dd4c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dd4c:	83 ec 18             	sub    esp,0x18
c001dd4f:	6a 3c                	push   0x3c
c001dd51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd56:	50                   	push   eax
c001dd57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd5c:	50                   	push   eax
c001dd5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd62:	50                   	push   eax
c001dd63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd67:	e8 56 fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd6c:	83 c4 2c             	add    esp,0x2c
c001dd6f:	c3                   	ret    

c001dd70 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dd70:	83 ec 18             	sub    esp,0x18
c001dd73:	6a 18                	push   0x18
c001dd75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd7a:	50                   	push   eax
c001dd7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd80:	50                   	push   eax
c001dd81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd86:	50                   	push   eax
c001dd87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd8b:	e8 32 fe ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd90:	83 c4 2c             	add    esp,0x2c
c001dd93:	0f b6 c4             	movzx  eax,ah
c001dd96:	c3                   	ret    
c001dd97:	90                   	nop

c001dd98 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd98:	55                   	push   ebp
c001dd99:	57                   	push   edi
c001dd9a:	56                   	push   esi
c001dd9b:	53                   	push   ebx
c001dd9c:	83 ec 28             	sub    esp,0x28
c001dd9f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dda3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dda8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ddad:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ddb2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ddb9:	8d 43 12             	lea    eax,[ebx+0x12]
c001ddbc:	83 c3 10             	add    ebx,0x10
c001ddbf:	0f b6 c0             	movzx  eax,al
c001ddc2:	0f b6 db             	movzx  ebx,bl
c001ddc5:	50                   	push   eax
c001ddc6:	51                   	push   ecx
c001ddc7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ddcb:	57                   	push   edi
c001ddcc:	55                   	push   ebp
c001ddcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddd1:	e8 ec fd ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddd6:	83 c4 14             	add    esp,0x14
c001ddd9:	89 c6                	mov    esi,eax
c001dddb:	53                   	push   ebx
c001dddc:	c1 e6 10             	shl    esi,0x10
c001dddf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dde3:	51                   	push   ecx
c001dde4:	57                   	push   edi
c001dde5:	55                   	push   ebp
c001dde6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddea:	e8 d3 fd ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddef:	83 c4 3c             	add    esp,0x3c
c001ddf2:	0f b7 c0             	movzx  eax,ax
c001ddf5:	5b                   	pop    ebx
c001ddf6:	09 f0                	or     eax,esi
c001ddf8:	5e                   	pop    esi
c001ddf9:	5f                   	pop    edi
c001ddfa:	5d                   	pop    ebp
c001ddfb:	c3                   	ret    

c001ddfc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ddfc:	55                   	push   ebp
c001ddfd:	57                   	push   edi
c001ddfe:	56                   	push   esi
c001ddff:	53                   	push   ebx
c001de00:	83 ec 0c             	sub    esp,0xc
c001de03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001de07:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001de0b:	89 f5                	mov    ebp,esi
c001de0d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001de13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001de1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de23:	83 f9 01             	cmp    ecx,0x1
c001de26:	75 5d                	jne    c001de85 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001de28:	0f b6 c8             	movzx  ecx,al
c001de2b:	0f b6 d2             	movzx  edx,dl
c001de2e:	c1 e1 10             	shl    ecx,0x10
c001de31:	c1 e2 0b             	shl    edx,0xb
c001de34:	89 f0                	mov    eax,esi
c001de36:	25 fc 00 00 00       	and    eax,0xfc
c001de3b:	09 c1                	or     ecx,eax
c001de3d:	89 e8                	mov    eax,ebp
c001de3f:	0f b6 c0             	movzx  eax,al
c001de42:	c1 e0 08             	shl    eax,0x8
c001de45:	09 c1                	or     ecx,eax
c001de47:	09 d1                	or     ecx,edx
c001de49:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de4e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001de54:	89 c8                	mov    eax,ecx
c001de56:	ef                   	out    dx,eax
c001de57:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de5c:	ed                   	in     eax,dx
c001de5d:	0f b7 db             	movzx  ebx,bx
c001de60:	83 e6 02             	and    esi,0x2
c001de63:	74 0a                	je     c001de6f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001de65:	0f b7 d0             	movzx  edx,ax
c001de68:	c1 e3 10             	shl    ebx,0x10
c001de6b:	09 d3                	or     ebx,edx
c001de6d:	eb 05                	jmp    c001de74 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001de6f:	66 31 c0             	xor    ax,ax
c001de72:	09 c3                	or     ebx,eax
c001de74:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de79:	89 c8                	mov    eax,ecx
c001de7b:	ef                   	out    dx,eax
c001de7c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de81:	89 d8                	mov    eax,ebx
c001de83:	eb 41                	jmp    c001dec6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de85:	83 f9 02             	cmp    ecx,0x2
c001de88:	75 45                	jne    c001decf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001de8a:	83 ec 0c             	sub    esp,0xc
c001de8d:	0f b6 d2             	movzx  edx,dl
c001de90:	89 f1                	mov    ecx,esi
c001de92:	0f b6 c0             	movzx  eax,al
c001de95:	0f b6 f1             	movzx  esi,cl
c001de98:	89 e9                	mov    ecx,ebp
c001de9a:	56                   	push   esi
c001de9b:	0f b6 c9             	movzx  ecx,cl
c001de9e:	51                   	push   ecx
c001de9f:	52                   	push   edx
c001dea0:	50                   	push   eax
c001dea1:	57                   	push   edi
c001dea2:	e8 ad fc ff ff       	call   c001db54 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dea7:	89 c2                	mov    edx,eax
c001dea9:	ed                   	in     eax,dx
c001deaa:	83 c4 20             	add    esp,0x20
c001dead:	0f b7 db             	movzx  ebx,bx
c001deb0:	f6 c2 02             	test   dl,0x2
c001deb3:	74 0c                	je     c001dec1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001deb5:	0f b7 c8             	movzx  ecx,ax
c001deb8:	89 d8                	mov    eax,ebx
c001deba:	c1 e0 10             	shl    eax,0x10
c001debd:	09 c8                	or     eax,ecx
c001debf:	eb 05                	jmp    c001dec6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dec1:	66 31 c0             	xor    ax,ax
c001dec4:	09 d8                	or     eax,ebx
c001dec6:	ef                   	out    dx,eax
c001dec7:	83 c4 0c             	add    esp,0xc
c001deca:	5b                   	pop    ebx
c001decb:	5e                   	pop    esi
c001decc:	5f                   	pop    edi
c001decd:	5d                   	pop    ebp
c001dece:	c3                   	ret    
c001decf:	c7 44 24 20 d7 73 02 c0 	mov    DWORD PTR [esp+0x20],0xc00273d7
c001ded7:	83 c4 0c             	add    esp,0xc
c001deda:	5b                   	pop    ebx
c001dedb:	5e                   	pop    esi
c001dedc:	5f                   	pop    edi
c001dedd:	5d                   	pop    ebp
c001dede:	e9 1e 71 ff ff       	jmp    c0015001 <Krnl::panic(char const*)>
c001dee3:	90                   	nop

c001dee4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001dee4:	55                   	push   ebp
c001dee5:	57                   	push   edi
c001dee6:	56                   	push   esi
c001dee7:	53                   	push   ebx
c001dee8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001deee:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001def5:	75 0f                	jne    c001df06 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001def7:	80 3d ec ab 02 c0 00 	cmp    BYTE PTR ds:0xc002abec,0x0
c001defe:	0f 85 fa 00 00 00    	jne    c001dffe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001df04:	eb 2f                	jmp    c001df35 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	68 dd 73 02 c0       	push   0xc00273dd
c001df0e:	e8 9a be fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001df13:	83 c4 10             	add    esp,0x10
c001df16:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001df1d:	75 d8                	jne    c001def7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001df1f:	e4 60                	in     al,0x60
c001df21:	3c 1c                	cmp    al,0x1c
c001df23:	74 04                	je     c001df29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001df25:	3c 5a                	cmp    al,0x5a
c001df27:	75 f6                	jne    c001df1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001df29:	e4 60                	in     al,0x60
c001df2b:	3c 5a                	cmp    al,0x5a
c001df2d:	74 fa                	je     c001df29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001df2f:	3c 1c                	cmp    al,0x1c
c001df31:	74 f6                	je     c001df29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001df33:	eb c2                	jmp    c001def7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001df35:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001df3c:	0f 85 86 00 00 00    	jne    c001dfc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001df42:	83 ec 0c             	sub    esp,0xc
c001df45:	68 14 01 00 00       	push   0x114
c001df4a:	e8 04 be fe ff       	call   c0009d53 <malloc>
c001df4f:	83 c4 0c             	add    esp,0xc
c001df52:	89 c3                	mov    ebx,eax
c001df54:	ff 35 f0 a1 02 c0    	push   DWORD PTR ds:0xc002a1f0
c001df5a:	68 f7 73 02 c0       	push   0xc00273f7
c001df5f:	50                   	push   eax
c001df60:	e8 45 f6 fe ff       	call   c000d5aa <File::File(char const*, Process*)>
c001df65:	5a                   	pop    edx
c001df66:	59                   	pop    ecx
c001df67:	6a 01                	push   0x1
c001df69:	53                   	push   ebx
c001df6a:	e8 15 f7 fe ff       	call   c000d684 <File::open(FileOpenMode)>
c001df6f:	83 c4 0c             	add    esp,0xc
c001df72:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001df76:	50                   	push   eax
c001df77:	8d 44 24 28          	lea    eax,[esp+0x28]
c001df7b:	50                   	push   eax
c001df7c:	53                   	push   ebx
c001df7d:	e8 ae f9 fe ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c001df82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df86:	40                   	inc    eax
c001df87:	89 04 24             	mov    DWORD PTR [esp],eax
c001df8a:	e8 c4 bd fe ff       	call   c0009d53 <malloc>
c001df8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df93:	a3 e8 ab 02 c0       	mov    ds:0xc002abe8,eax
c001df98:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001df9c:	5e                   	pop    esi
c001df9d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001df9f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001dfa3:	51                   	push   ecx
c001dfa4:	50                   	push   eax
c001dfa5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001dfa9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001dfad:	53                   	push   ebx
c001dfae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dfb1:	83 c4 14             	add    esp,0x14
c001dfb4:	53                   	push   ebx
c001dfb5:	e8 28 f7 fe ff       	call   c000d6e2 <File::close()>
c001dfba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfbe:	83 c4 10             	add    esp,0x10
c001dfc1:	a3 e4 ab 02 c0       	mov    ds:0xc002abe4,eax
c001dfc6:	eb 36                	jmp    c001dffe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001dfc8:	83 ec 0c             	sub    esp,0xc
c001dfcb:	68 10 74 02 c0       	push   0xc0027410
c001dfd0:	e8 d8 bd fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001dfdf:	0f 85 5d ff ff ff    	jne    c001df42 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dfe5:	e4 60                	in     al,0x60
c001dfe7:	3c 1c                	cmp    al,0x1c
c001dfe9:	74 04                	je     c001dfef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfeb:	3c 5a                	cmp    al,0x5a
c001dfed:	75 f6                	jne    c001dfe5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001dfef:	e4 60                	in     al,0x60
c001dff1:	3c 5a                	cmp    al,0x5a
c001dff3:	74 fa                	je     c001dfef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dff5:	3c 1c                	cmp    al,0x1c
c001dff7:	74 f6                	je     c001dfef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dff9:	e9 44 ff ff ff       	jmp    c001df42 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dffe:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e005:	75 0b                	jne    c001e012 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e007:	31 f6                	xor    esi,esi
c001e009:	31 db                	xor    ebx,ebx
c001e00b:	31 ed                	xor    ebp,ebp
c001e00d:	e9 a3 01 00 00       	jmp    c001e1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	68 22 74 02 c0       	push   0xc0027422
c001e01a:	e8 8e bd fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e01f:	8b 15 c0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc0
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	f6 c2 80             	test   dl,0x80
c001e02b:	74 0c                	je     c001e039 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e02d:	0f ba e2 0b          	bt     edx,0xb
c001e031:	72 1a                	jb     c001e04d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e033:	eb d2                	jmp    c001e007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e035:	3c 5a                	cmp    al,0x5a
c001e037:	74 0c                	je     c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e039:	e4 60                	in     al,0x60
c001e03b:	3c 1c                	cmp    al,0x1c
c001e03d:	75 f6                	jne    c001e035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e03f:	eb 04                	jmp    c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e041:	3c 1c                	cmp    al,0x1c
c001e043:	75 e8                	jne    c001e02d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e045:	e4 60                	in     al,0x60
c001e047:	3c 5a                	cmp    al,0x5a
c001e049:	74 fa                	je     c001e045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e04b:	eb f4                	jmp    c001e041 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e04d:	83 ec 0c             	sub    esp,0xc
c001e050:	68 27 74 02 c0       	push   0xc0027427
c001e055:	e8 53 bd fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e05a:	83 c4 10             	add    esp,0x10
c001e05d:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e064:	75 a1                	jne    c001e007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e066:	e4 60                	in     al,0x60
c001e068:	3c 5a                	cmp    al,0x5a
c001e06a:	74 04                	je     c001e070 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e06c:	3c 1c                	cmp    al,0x1c
c001e06e:	75 f6                	jne    c001e066 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e070:	e4 60                	in     al,0x60
c001e072:	3c 5a                	cmp    al,0x5a
c001e074:	74 fa                	je     c001e070 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e076:	3c 1c                	cmp    al,0x1c
c001e078:	74 f6                	je     c001e070 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e07a:	eb 8b                	jmp    c001e007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e07c:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e083:	0f 85 3d 01 00 00    	jne    c001e1c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e089:	a1 e8 ab 02 c0       	mov    eax,ds:0xc002abe8
c001e08e:	8d 7e 01             	lea    edi,[esi+0x1]
c001e091:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e094:	d4 40                	aam    0x40
c001e096:	d5 39                	aad    0x39
c001e098:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e09f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e0a3:	0f 85 53 01 00 00    	jne    c001e1fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e0a9:	8b 15 e8 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002abe8
c001e0af:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e0b2:	d4 40                	aam    0x40
c001e0b4:	d5 39                	aad    0x39
c001e0b6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0ba:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e0be:	d4 40                	aam    0x40
c001e0c0:	d5 39                	aad    0x39
c001e0c2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e0c6:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e0ca:	d4 40                	aam    0x40
c001e0cc:	d5 39                	aad    0x39
c001e0ce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e0d2:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e0d6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e0da:	3c 56                	cmp    al,0x56
c001e0dc:	74 49                	je     c001e127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e0de:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e0e2:	d4 40                	aam    0x40
c001e0e4:	d5 39                	aad    0x39
c001e0e6:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e0e9:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e0ed:	0f b6 c9             	movzx  ecx,cl
c001e0f0:	c1 e1 04             	shl    ecx,0x4
c001e0f3:	d4 40                	aam    0x40
c001e0f5:	d5 39                	aad    0x39
c001e0f7:	83 e8 30             	sub    eax,0x30
c001e0fa:	0f b6 c0             	movzx  eax,al
c001e0fd:	09 c1                	or     ecx,eax
c001e0ff:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e103:	c1 e1 04             	shl    ecx,0x4
c001e106:	d4 40                	aam    0x40
c001e108:	d5 39                	aad    0x39
c001e10a:	83 e8 30             	sub    eax,0x30
c001e10d:	0f b6 c0             	movzx  eax,al
c001e110:	09 c1                	or     ecx,eax
c001e112:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e116:	c1 e1 04             	shl    ecx,0x4
c001e119:	d4 40                	aam    0x40
c001e11b:	d5 39                	aad    0x39
c001e11d:	83 e8 30             	sub    eax,0x30
c001e120:	0f b6 c0             	movzx  eax,al
c001e123:	09 c8                	or     eax,ecx
c001e125:	89 c5                	mov    ebp,eax
c001e127:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e12b:	80 f9 44             	cmp    cl,0x44
c001e12e:	74 47                	je     c001e177 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e130:	88 c8                	mov    al,cl
c001e132:	d4 40                	aam    0x40
c001e134:	d5 39                	aad    0x39
c001e136:	83 e8 30             	sub    eax,0x30
c001e139:	0f b6 f8             	movzx  edi,al
c001e13c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e140:	c1 e7 04             	shl    edi,0x4
c001e143:	d4 40                	aam    0x40
c001e145:	d5 39                	aad    0x39
c001e147:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e14a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e14e:	0f b6 db             	movzx  ebx,bl
c001e151:	09 fb                	or     ebx,edi
c001e153:	c1 e3 04             	shl    ebx,0x4
c001e156:	d4 40                	aam    0x40
c001e158:	d5 39                	aad    0x39
c001e15a:	83 e8 30             	sub    eax,0x30
c001e15d:	0f b6 f8             	movzx  edi,al
c001e160:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e164:	09 fb                	or     ebx,edi
c001e166:	89 df                	mov    edi,ebx
c001e168:	c1 e7 04             	shl    edi,0x4
c001e16b:	d4 40                	aam    0x40
c001e16d:	d5 39                	aad    0x39
c001e16f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e172:	0f b6 db             	movzx  ebx,bl
c001e175:	09 fb                	or     ebx,edi
c001e177:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c001e17c:	83 c6 10             	add    esi,0x10
c001e17f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e183:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e187:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e18a:	3c 0a                	cmp    al,0xa
c001e18c:	0f 85 a0 00 00 00    	jne    c001e232 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e192:	3c 0a                	cmp    al,0xa
c001e194:	0f 94 c0             	sete   al
c001e197:	0f b6 c0             	movzx  eax,al
c001e19a:	01 c6                	add    esi,eax
c001e19c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e1a1:	0f 84 a2 00 00 00    	je     c001e249 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e1a7:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e1af:	0f 84 94 00 00 00    	je     c001e249 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e1b5:	39 35 e4 ab 02 c0    	cmp    DWORD PTR ds:0xc002abe4,esi
c001e1bb:	0f 8f bb fe ff ff    	jg     c001e07c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e1c1:	e9 e8 00 00 00       	jmp    c001e2ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	68 2e 74 02 c0       	push   0xc002742e
c001e1ce:	e8 da bb fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e1d3:	83 c4 10             	add    esp,0x10
c001e1d6:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e1dd:	0f 85 a6 fe ff ff    	jne    c001e089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1e3:	e4 60                	in     al,0x60
c001e1e5:	3c 5a                	cmp    al,0x5a
c001e1e7:	74 04                	je     c001e1ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1e9:	3c 1c                	cmp    al,0x1c
c001e1eb:	75 f6                	jne    c001e1e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e1ed:	e4 60                	in     al,0x60
c001e1ef:	3c 5a                	cmp    al,0x5a
c001e1f1:	74 fa                	je     c001e1ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1f3:	3c 1c                	cmp    al,0x1c
c001e1f5:	74 f6                	je     c001e1ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1f7:	e9 8d fe ff ff       	jmp    c001e089 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	68 36 74 02 c0       	push   0xc0027436
c001e204:	e8 a4 bb fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e213:	0f 85 90 fe ff ff    	jne    c001e0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e219:	e4 60                	in     al,0x60
c001e21b:	3c 5a                	cmp    al,0x5a
c001e21d:	74 04                	je     c001e223 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e21f:	3c 1c                	cmp    al,0x1c
c001e221:	75 f6                	jne    c001e219 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e223:	e4 60                	in     al,0x60
c001e225:	3c 5a                	cmp    al,0x5a
c001e227:	74 fa                	je     c001e223 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e229:	3c 1c                	cmp    al,0x1c
c001e22b:	74 f6                	je     c001e223 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e22d:	e9 77 fe ff ff       	jmp    c001e0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e232:	47                   	inc    edi
c001e233:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e237:	0f 84 55 ff ff ff    	je     c001e192 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e23d:	46                   	inc    esi
c001e23e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e241:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e244:	e9 3e ff ff ff       	jmp    c001e187 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e249:	80 f9 44             	cmp    cl,0x44
c001e24c:	74 0e                	je     c001e25c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e24e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e256:	0f 85 59 ff ff ff    	jne    c001e1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e25c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e260:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e264:	c1 e0 04             	shl    eax,0x4
c001e267:	83 ea 30             	sub    edx,0x30
c001e26a:	09 d0                	or     eax,edx
c001e26c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e273:	0f 85 3c ff ff ff    	jne    c001e1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e279:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e27d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e281:	c1 e2 04             	shl    edx,0x4
c001e284:	83 e8 30             	sub    eax,0x30
c001e287:	09 d0                	or     eax,edx
c001e289:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e290:	0f 85 1f ff ff ff    	jne    c001e1b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e296:	50                   	push   eax
c001e297:	50                   	push   eax
c001e298:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e29c:	50                   	push   eax
c001e29d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e2a4:	e8 8f 24 fe ff       	call   c0000738 <strcpy>
c001e2a9:	83 c4 10             	add    esp,0x10
c001e2ac:	eb 15                	jmp    c001e2c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e2ae:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e2b5:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e2c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e2c3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e2ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e2d0:	5b                   	pop    ebx
c001e2d1:	5e                   	pop    esi
c001e2d2:	5f                   	pop    edi
c001e2d3:	5d                   	pop    ebp
c001e2d4:	c3                   	ret    
c001e2d5:	90                   	nop

c001e2d6 <PCI::checkBus(unsigned char)>:
c001e2d6:	56                   	push   esi
c001e2d7:	53                   	push   ebx
c001e2d8:	31 db                	xor    ebx,ebx
c001e2da:	51                   	push   ecx
c001e2db:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e2e0:	52                   	push   edx
c001e2e1:	53                   	push   ebx
c001e2e2:	43                   	inc    ebx
c001e2e3:	56                   	push   esi
c001e2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2e8:	e8 bf 07 00 00       	call   c001eaac <PCI::checkDevice(unsigned char, unsigned char)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	83 fb 20             	cmp    ebx,0x20
c001e2f3:	75 eb                	jne    c001e2e0 <PCI::checkBus(unsigned char)+0xa>
c001e2f5:	58                   	pop    eax
c001e2f6:	5b                   	pop    ebx
c001e2f7:	5e                   	pop    esi
c001e2f8:	c3                   	ret    
c001e2f9:	90                   	nop

c001e2fa <PCI::foundDevice(PCIDeviceInfo)>:
c001e2fa:	55                   	push   ebp
c001e2fb:	57                   	push   edi
c001e2fc:	56                   	push   esi
c001e2fd:	53                   	push   ebx
c001e2fe:	83 ec 1c             	sub    esp,0x1c
c001e301:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e305:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e30b:	0f 84 20 04 00 00    	je     c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e311:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e318:	75 37                	jne    c001e351 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e31a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e31e:	66 81 f9 06 04       	cmp    cx,0x406
c001e323:	75 5b                	jne    c001e380 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e325:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e32a:	50                   	push   eax
c001e32b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e330:	50                   	push   eax
c001e331:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e336:	50                   	push   eax
c001e337:	53                   	push   ebx
c001e338:	e8 33 fa ff ff       	call   c001dd70 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e33d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e341:	0f b6 c0             	movzx  eax,al
c001e344:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e348:	83 c4 2c             	add    esp,0x2c
c001e34b:	5b                   	pop    ebx
c001e34c:	5e                   	pop    esi
c001e34d:	5f                   	pop    edi
c001e34e:	5d                   	pop    ebp
c001e34f:	eb 85                	jmp    c001e2d6 <PCI::checkBus(unsigned char)>
c001e351:	83 ec 0c             	sub    esp,0xc
c001e354:	68 3f 74 02 c0       	push   0xc002743f
c001e359:	e8 4f ba fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e35e:	83 c4 10             	add    esp,0x10
c001e361:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e368:	75 b0                	jne    c001e31a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e36a:	e4 60                	in     al,0x60
c001e36c:	3c 5a                	cmp    al,0x5a
c001e36e:	74 04                	je     c001e374 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e370:	3c 1c                	cmp    al,0x1c
c001e372:	75 f6                	jne    c001e36a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e374:	e4 60                	in     al,0x60
c001e376:	3c 5a                	cmp    al,0x5a
c001e378:	74 fa                	je     c001e374 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e37a:	3c 1c                	cmp    al,0x1c
c001e37c:	74 f6                	je     c001e374 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e37e:	eb 9a                	jmp    c001e31a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e380:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e386:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e38a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e38e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e392:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e396:	88 d0                	mov    al,dl
c001e398:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e39d:	74 3b                	je     c001e3da <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e39f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e3a3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e3a6:	85 d2                	test   edx,edx
c001e3a8:	74 24                	je     c001e3ce <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e3aa:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e3b0:	31 ef                	xor    edi,ebp
c001e3b2:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e3b8:	75 14                	jne    c001e3ce <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e3ba:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e3c0:	75 0c                	jne    c001e3ce <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e3c2:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e3c8:	0f 84 63 03 00 00    	je     c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e3ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e3d2:	8b 12                	mov    edx,DWORD PTR [edx]
c001e3d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3d8:	eb be                	jmp    c001e398 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e3da:	66 81 f9 01 06       	cmp    cx,0x601
c001e3df:	0f 85 81 01 00 00    	jne    c001e566 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e3e5:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e3ec:	75 25                	jne    c001e413 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e3ee:	83 ec 0c             	sub    esp,0xc
c001e3f1:	68 64 01 00 00       	push   0x164
c001e3f6:	e8 58 b9 fe ff       	call   c0009d53 <malloc>
c001e3fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3fe:	89 c5                	mov    ebp,eax
c001e400:	e8 b7 12 00 00       	call   c001f6bc <SATABus::SATABus()>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e40f:	74 4a                	je     c001e45b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e411:	eb 2f                	jmp    c001e442 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e413:	83 ec 0c             	sub    esp,0xc
c001e416:	68 4f 74 02 c0       	push   0xc002744f
c001e41b:	e8 8d b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e42a:	75 c2                	jne    c001e3ee <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e42c:	e4 60                	in     al,0x60
c001e42e:	3c 1c                	cmp    al,0x1c
c001e430:	74 04                	je     c001e436 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e432:	3c 5a                	cmp    al,0x5a
c001e434:	75 f6                	jne    c001e42c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e436:	e4 60                	in     al,0x60
c001e438:	3c 5a                	cmp    al,0x5a
c001e43a:	74 fa                	je     c001e436 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e43c:	3c 1c                	cmp    al,0x1c
c001e43e:	74 f6                	je     c001e436 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e440:	eb ac                	jmp    c001e3ee <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e442:	83 ec 0c             	sub    esp,0xc
c001e445:	68 55 74 02 c0       	push   0xc0027455
c001e44a:	e8 5e b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e459:	74 1b                	je     c001e476 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e45b:	50                   	push   eax
c001e45c:	50                   	push   eax
c001e45d:	55                   	push   ebp
c001e45e:	53                   	push   ebx
c001e45f:	e8 4e 01 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e464:	83 c4 10             	add    esp,0x10
c001e467:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e46e:	74 33                	je     c001e4a3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e470:	eb 18                	jmp    c001e48a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e472:	3c 1c                	cmp    al,0x1c
c001e474:	74 0c                	je     c001e482 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e476:	e4 60                	in     al,0x60
c001e478:	3c 5a                	cmp    al,0x5a
c001e47a:	75 f6                	jne    c001e472 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e47c:	eb 04                	jmp    c001e482 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e47e:	3c 1c                	cmp    al,0x1c
c001e480:	75 d9                	jne    c001e45b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e482:	e4 60                	in     al,0x60
c001e484:	3c 5a                	cmp    al,0x5a
c001e486:	74 fa                	je     c001e482 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e488:	eb f4                	jmp    c001e47e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e48a:	83 ec 0c             	sub    esp,0xc
c001e48d:	68 5d 74 02 c0       	push   0xc002745d
c001e492:	e8 16 b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e497:	83 c4 10             	add    esp,0x10
c001e49a:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e4a1:	74 29                	je     c001e4cc <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e4a3:	83 ec 2c             	sub    esp,0x2c
c001e4a6:	b9 09 00 00 00       	mov    ecx,0x9
c001e4ab:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e4af:	fc                   	cld    
c001e4b0:	89 e7                	mov    edi,esp
c001e4b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4b4:	55                   	push   ebp
c001e4b5:	e8 0a 00 ff ff       	call   c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e4ba:	83 c4 30             	add    esp,0x30
c001e4bd:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e4c4:	74 33                	je     c001e4f9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e4c6:	eb 18                	jmp    c001e4e0 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e4c8:	3c 1c                	cmp    al,0x1c
c001e4ca:	74 0c                	je     c001e4d8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4cc:	e4 60                	in     al,0x60
c001e4ce:	3c 5a                	cmp    al,0x5a
c001e4d0:	75 f6                	jne    c001e4c8 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e4d2:	eb 04                	jmp    c001e4d8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4d4:	3c 1c                	cmp    al,0x1c
c001e4d6:	75 cb                	jne    c001e4a3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e4d8:	e4 60                	in     al,0x60
c001e4da:	3c 5a                	cmp    al,0x5a
c001e4dc:	74 fa                	je     c001e4d8 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4de:	eb f4                	jmp    c001e4d4 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	68 65 74 02 c0       	push   0xc0027465
c001e4e8:	e8 c0 b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e4f7:	74 23                	je     c001e51c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e4f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e4fc:	6a 00                	push   0x0
c001e4fe:	6a 00                	push   0x0
c001e500:	6a 00                	push   0x0
c001e502:	55                   	push   ebp
c001e503:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e506:	83 c4 10             	add    esp,0x10
c001e509:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e510:	0f 84 1b 02 00 00    	je     c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e516:	eb 18                	jmp    c001e530 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e518:	3c 1c                	cmp    al,0x1c
c001e51a:	74 0c                	je     c001e528 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e51c:	e4 60                	in     al,0x60
c001e51e:	3c 5a                	cmp    al,0x5a
c001e520:	75 f6                	jne    c001e518 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e522:	eb 04                	jmp    c001e528 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e524:	3c 1c                	cmp    al,0x1c
c001e526:	75 d1                	jne    c001e4f9 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e528:	e4 60                	in     al,0x60
c001e52a:	3c 5a                	cmp    al,0x5a
c001e52c:	74 fa                	je     c001e528 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e52e:	eb f4                	jmp    c001e524 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e530:	83 ec 0c             	sub    esp,0xc
c001e533:	68 6d 74 02 c0       	push   0xc002746d
c001e538:	e8 70 b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e53d:	83 c4 10             	add    esp,0x10
c001e540:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e547:	0f 85 e4 01 00 00    	jne    c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e54d:	e4 60                	in     al,0x60
c001e54f:	3c 5a                	cmp    al,0x5a
c001e551:	74 04                	je     c001e557 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e553:	3c 1c                	cmp    al,0x1c
c001e555:	75 f6                	jne    c001e54d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e557:	e4 60                	in     al,0x60
c001e559:	3c 5a                	cmp    al,0x5a
c001e55b:	74 fa                	je     c001e557 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e55d:	3c 1c                	cmp    al,0x1c
c001e55f:	74 f6                	je     c001e557 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e561:	e9 cb 01 00 00       	jmp    c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e566:	66 81 f9 01 01       	cmp    cx,0x101
c001e56b:	0f 85 7a 01 00 00    	jne    c001e6eb <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e571:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e578:	75 25                	jne    c001e59f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e57a:	83 ec 0c             	sub    esp,0xc
c001e57d:	68 70 02 00 00       	push   0x270
c001e582:	e8 cc b7 fe ff       	call   c0009d53 <malloc>
c001e587:	89 04 24             	mov    DWORD PTR [esp],eax
c001e58a:	89 c5                	mov    ebp,eax
c001e58c:	e8 df 05 00 00       	call   c001eb70 <IDE::IDE()>
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e59b:	74 4a                	je     c001e5e7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e59d:	eb 2f                	jmp    c001e5ce <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e59f:	83 ec 0c             	sub    esp,0xc
c001e5a2:	68 75 74 02 c0       	push   0xc0027475
c001e5a7:	e8 01 b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e5ac:	83 c4 10             	add    esp,0x10
c001e5af:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e5b6:	75 c2                	jne    c001e57a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e5b8:	e4 60                	in     al,0x60
c001e5ba:	3c 5a                	cmp    al,0x5a
c001e5bc:	74 04                	je     c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e5be:	3c 1c                	cmp    al,0x1c
c001e5c0:	75 f6                	jne    c001e5b8 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e5c2:	e4 60                	in     al,0x60
c001e5c4:	3c 5a                	cmp    al,0x5a
c001e5c6:	74 fa                	je     c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e5c8:	3c 1c                	cmp    al,0x1c
c001e5ca:	74 f6                	je     c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e5cc:	eb ac                	jmp    c001e57a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	68 7c 74 02 c0       	push   0xc002747c
c001e5d6:	e8 d2 b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e5db:	83 c4 10             	add    esp,0x10
c001e5de:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e5e5:	74 1b                	je     c001e602 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e5e7:	57                   	push   edi
c001e5e8:	57                   	push   edi
c001e5e9:	55                   	push   ebp
c001e5ea:	53                   	push   ebx
c001e5eb:	e8 c2 ff fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e5f0:	83 c4 10             	add    esp,0x10
c001e5f3:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e5fa:	74 33                	je     c001e62f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e5fc:	eb 18                	jmp    c001e616 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e5fe:	3c 1c                	cmp    al,0x1c
c001e600:	74 0c                	je     c001e60e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e602:	e4 60                	in     al,0x60
c001e604:	3c 5a                	cmp    al,0x5a
c001e606:	75 f6                	jne    c001e5fe <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e608:	eb 04                	jmp    c001e60e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e60a:	3c 1c                	cmp    al,0x1c
c001e60c:	75 d9                	jne    c001e5e7 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e60e:	e4 60                	in     al,0x60
c001e610:	3c 5a                	cmp    al,0x5a
c001e612:	74 fa                	je     c001e60e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e614:	eb f4                	jmp    c001e60a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	68 83 74 02 c0       	push   0xc0027483
c001e61e:	e8 8a b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e62d:	74 29                	je     c001e658 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e62f:	83 ec 2c             	sub    esp,0x2c
c001e632:	b9 09 00 00 00       	mov    ecx,0x9
c001e637:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e63b:	fc                   	cld    
c001e63c:	89 e7                	mov    edi,esp
c001e63e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e640:	55                   	push   ebp
c001e641:	e8 7e fe fe ff       	call   c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e646:	83 c4 30             	add    esp,0x30
c001e649:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e650:	74 33                	je     c001e685 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e652:	eb 18                	jmp    c001e66c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e654:	3c 1c                	cmp    al,0x1c
c001e656:	74 0c                	je     c001e664 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e658:	e4 60                	in     al,0x60
c001e65a:	3c 5a                	cmp    al,0x5a
c001e65c:	75 f6                	jne    c001e654 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e65e:	eb 04                	jmp    c001e664 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e660:	3c 1c                	cmp    al,0x1c
c001e662:	75 cb                	jne    c001e62f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e664:	e4 60                	in     al,0x60
c001e666:	3c 5a                	cmp    al,0x5a
c001e668:	74 fa                	je     c001e664 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e66a:	eb f4                	jmp    c001e660 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e66c:	83 ec 0c             	sub    esp,0xc
c001e66f:	68 8a 74 02 c0       	push   0xc002748a
c001e674:	e8 34 b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e683:	74 23                	je     c001e6a8 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e685:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e688:	6a 00                	push   0x0
c001e68a:	6a 00                	push   0x0
c001e68c:	6a 00                	push   0x0
c001e68e:	55                   	push   ebp
c001e68f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e692:	83 c4 10             	add    esp,0x10
c001e695:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e69c:	0f 84 8f 00 00 00    	je     c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6a2:	eb 18                	jmp    c001e6bc <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e6a4:	3c 1c                	cmp    al,0x1c
c001e6a6:	74 0c                	je     c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e6a8:	e4 60                	in     al,0x60
c001e6aa:	3c 5a                	cmp    al,0x5a
c001e6ac:	75 f6                	jne    c001e6a4 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e6ae:	eb 04                	jmp    c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e6b0:	3c 1c                	cmp    al,0x1c
c001e6b2:	75 d1                	jne    c001e685 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e6b4:	e4 60                	in     al,0x60
c001e6b6:	3c 5a                	cmp    al,0x5a
c001e6b8:	74 fa                	je     c001e6b4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e6ba:	eb f4                	jmp    c001e6b0 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 91 74 02 c0       	push   0xc0027491
c001e6c4:	e8 e4 b6 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e6d3:	75 5c                	jne    c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6d5:	e4 60                	in     al,0x60
c001e6d7:	3c 5a                	cmp    al,0x5a
c001e6d9:	74 04                	je     c001e6df <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6db:	3c 1c                	cmp    al,0x1c
c001e6dd:	75 f6                	jne    c001e6d5 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e6df:	e4 60                	in     al,0x60
c001e6e1:	3c 5a                	cmp    al,0x5a
c001e6e3:	74 fa                	je     c001e6df <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6e5:	3c 1c                	cmp    al,0x1c
c001e6e7:	74 f6                	je     c001e6df <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6e9:	eb 46                	jmp    c001e731 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6eb:	83 ec 0c             	sub    esp,0xc
c001e6ee:	68 58 01 00 00       	push   0x158
c001e6f3:	e8 5b b6 fe ff       	call   c0009d53 <malloc>
c001e6f8:	89 c5                	mov    ebp,eax
c001e6fa:	58                   	pop    eax
c001e6fb:	5a                   	pop    edx
c001e6fc:	68 98 74 02 c0       	push   0xc0027498
c001e701:	55                   	push   ebp
c001e702:	e8 b5 01 ff ff       	call   c000e8bc <DriverlessDevice::DriverlessDevice(char const*)>
c001e707:	59                   	pop    ecx
c001e708:	5e                   	pop    esi
c001e709:	55                   	push   ebp
c001e70a:	53                   	push   ebx
c001e70b:	e8 a2 fe fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e710:	83 c4 10             	add    esp,0x10
c001e713:	b9 09 00 00 00       	mov    ecx,0x9
c001e718:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e71c:	fc                   	cld    
c001e71d:	89 fe                	mov    esi,edi
c001e71f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e721:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e725:	83 c4 1c             	add    esp,0x1c
c001e728:	5b                   	pop    ebx
c001e729:	5e                   	pop    esi
c001e72a:	5f                   	pop    edi
c001e72b:	5d                   	pop    ebp
c001e72c:	e9 93 fd fe ff       	jmp    c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e731:	83 c4 1c             	add    esp,0x1c
c001e734:	5b                   	pop    ebx
c001e735:	5e                   	pop    esi
c001e736:	5f                   	pop    edi
c001e737:	5d                   	pop    ebp
c001e738:	c3                   	ret    
c001e739:	90                   	nop

c001e73a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e73a:	55                   	push   ebp
c001e73b:	57                   	push   edi
c001e73c:	56                   	push   esi
c001e73d:	53                   	push   ebx
c001e73e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e744:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e74b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e752:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e756:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e75d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e761:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e768:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e76c:	68 b2 74 02 c0       	push   0xc00274b2
c001e771:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e775:	53                   	push   ebx
c001e776:	e8 bd 1f fe ff       	call   c0000738 <strcpy>
c001e77b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e780:	b2 64                	mov    dl,0x64
c001e782:	89 c8                	mov    eax,ecx
c001e784:	f6 f2                	div    dl
c001e786:	b2 0a                	mov    dl,0xa
c001e788:	83 c0 30             	add    eax,0x30
c001e78b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e78f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e793:	83 c4 10             	add    esp,0x10
c001e796:	89 c8                	mov    eax,ecx
c001e798:	f6 f2                	div    dl
c001e79a:	89 c1                	mov    ecx,eax
c001e79c:	0f b6 c0             	movzx  eax,al
c001e79f:	88 e9                	mov    cl,ch
c001e7a1:	f6 f2                	div    dl
c001e7a3:	88 e0                	mov    al,ah
c001e7a5:	83 c0 30             	add    eax,0x30
c001e7a8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e7ac:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e7b0:	8d 41 30             	lea    eax,[ecx+0x30]
c001e7b3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e7b7:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e7bb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e7c0:	f6 f2                	div    dl
c001e7c2:	89 c1                	mov    ecx,eax
c001e7c4:	0f b6 c0             	movzx  eax,al
c001e7c7:	88 e9                	mov    cl,ch
c001e7c9:	f6 f2                	div    dl
c001e7cb:	88 e0                	mov    al,ah
c001e7cd:	83 c0 30             	add    eax,0x30
c001e7d0:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e7d4:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e7d8:	8d 41 30             	lea    eax,[ecx+0x30]
c001e7db:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e7df:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e7e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e7e8:	f6 f2                	div    dl
c001e7ea:	89 c1                	mov    ecx,eax
c001e7ec:	0f b6 c0             	movzx  eax,al
c001e7ef:	88 e9                	mov    cl,ch
c001e7f1:	f6 f2                	div    dl
c001e7f3:	88 e0                	mov    al,ah
c001e7f5:	83 c0 30             	add    eax,0x30
c001e7f8:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e7ff:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e803:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e807:	8d 41 30             	lea    eax,[ecx+0x30]
c001e80a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e80e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e812:	74 29                	je     c001e83d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e814:	83 ec 0c             	sub    esp,0xc
c001e817:	53                   	push   ebx
c001e818:	e8 90 b5 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e827:	75 14                	jne    c001e83d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e829:	e4 60                	in     al,0x60
c001e82b:	3c 1c                	cmp    al,0x1c
c001e82d:	74 04                	je     c001e833 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e82f:	3c 5a                	cmp    al,0x5a
c001e831:	75 f6                	jne    c001e829 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e833:	e4 60                	in     al,0x60
c001e835:	3c 5a                	cmp    al,0x5a
c001e837:	74 fa                	je     c001e833 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e839:	3c 1c                	cmp    al,0x1c
c001e83b:	74 f6                	je     c001e833 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e83d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e842:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e847:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e84c:	83 ec 0c             	sub    esp,0xc
c001e84f:	6a 0c                	push   0xc
c001e851:	56                   	push   esi
c001e852:	53                   	push   ebx
c001e853:	57                   	push   edi
c001e854:	55                   	push   ebp
c001e855:	e8 68 f3 ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e85a:	83 c4 20             	add    esp,0x20
c001e85d:	56                   	push   esi
c001e85e:	53                   	push   ebx
c001e85f:	57                   	push   edi
c001e860:	55                   	push   ebp
c001e861:	e8 50 f4 ff ff       	call   c001dcb6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e866:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e86b:	56                   	push   esi
c001e86c:	53                   	push   ebx
c001e86d:	57                   	push   edi
c001e86e:	55                   	push   ebp
c001e86f:	e8 d8 f4 ff ff       	call   c001dd4c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e874:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e878:	83 c4 14             	add    esp,0x14
c001e87b:	6a 3c                	push   0x3c
c001e87d:	56                   	push   esi
c001e87e:	53                   	push   ebx
c001e87f:	57                   	push   edi
c001e880:	55                   	push   ebp
c001e881:	e8 3c f3 ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e886:	0f b6 c4             	movzx  eax,ah
c001e889:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e88d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e891:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e898:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001e89d:	83 c4 20             	add    esp,0x20
c001e8a0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e8a6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e8ad:	0f 84 38 01 00 00    	je     c001e9eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e8b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e8bb:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001e8c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e8ca:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e8d0:	0f 8e 15 01 00 00    	jle    c001e9eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e8d6:	50                   	push   eax
c001e8d7:	50                   	push   eax
c001e8d8:	68 cd 74 02 c0       	push   0xc00274cd
c001e8dd:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e8e1:	50                   	push   eax
c001e8e2:	e8 51 1e fe ff       	call   c0000738 <strcpy>
c001e8e7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e8eb:	b9 0a 00 00 00       	mov    ecx,0xa
c001e8f0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e8f4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e8f8:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e8fc:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e900:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e904:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e908:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e90c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e910:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e914:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e918:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e91c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e920:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e92b:	99                   	cdq    
c001e92c:	f7 f9                	idiv   ecx
c001e92e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e932:	99                   	cdq    
c001e933:	f7 f9                	idiv   ecx
c001e935:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e939:	83 c2 30             	add    edx,0x30
c001e93c:	83 c0 30             	add    eax,0x30
c001e93f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e943:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e947:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001e94e:	74 2d                	je     c001e97d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e957:	50                   	push   eax
c001e958:	e8 50 b4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e95d:	83 c4 10             	add    esp,0x10
c001e960:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001e967:	75 14                	jne    c001e97d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e969:	e4 60                	in     al,0x60
c001e96b:	3c 5a                	cmp    al,0x5a
c001e96d:	74 04                	je     c001e973 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e96f:	3c 1c                	cmp    al,0x1c
c001e971:	75 f6                	jne    c001e969 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e973:	e4 60                	in     al,0x60
c001e975:	3c 5a                	cmp    al,0x5a
c001e977:	74 fa                	je     c001e973 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e979:	3c 1c                	cmp    al,0x1c
c001e97b:	74 f6                	je     c001e973 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e97d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e981:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001e986:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e98c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e98f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e996:	39 d3                	cmp    ebx,edx
c001e998:	75 48                	jne    c001e9e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e99a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e9a1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e9a5:	75 3b                	jne    c001e9e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e9a7:	83 ec 0c             	sub    esp,0xc
c001e9aa:	68 fc 74 02 c0       	push   0xc00274fc
c001e9af:	e8 8b e6 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001e9b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e9b8:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c001e9bd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e9c3:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e9cb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e9cf:	50                   	push   eax
c001e9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e9d4:	53                   	push   ebx
c001e9d5:	68 21 75 02 c0       	push   0xc0027521
c001e9da:	e8 60 e6 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001e9df:	83 c4 20             	add    esp,0x20
c001e9e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e9e6:	e9 d0 fe ff ff       	jmp    c001e8bb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e9eb:	31 d2                	xor    edx,edx
c001e9ed:	83 ec 0c             	sub    esp,0xc
c001e9f0:	56                   	push   esi
c001e9f1:	53                   	push   ebx
c001e9f2:	57                   	push   edi
c001e9f3:	52                   	push   edx
c001e9f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e9f8:	55                   	push   ebp
c001e9f9:	e8 9a f3 ff ff       	call   c001dd98 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ea02:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ea09:	42                   	inc    edx
c001ea0a:	83 c4 20             	add    esp,0x20
c001ea0d:	83 fa 06             	cmp    edx,0x6
c001ea10:	75 db                	jne    c001e9ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ea12:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ea17:	83 ec 0c             	sub    esp,0xc
c001ea1a:	86 e0                	xchg   al,ah
c001ea1c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ea24:	6a 02                	push   0x2
c001ea26:	56                   	push   esi
c001ea27:	53                   	push   ebx
c001ea28:	57                   	push   edi
c001ea29:	55                   	push   ebp
c001ea2a:	e8 93 f1 ff ff       	call   c001dbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea2f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ea37:	83 c4 20             	add    esp,0x20
c001ea3a:	56                   	push   esi
c001ea3b:	53                   	push   ebx
c001ea3c:	57                   	push   edi
c001ea3d:	55                   	push   ebp
c001ea3e:	e8 bd f2 ff ff       	call   c001dd00 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ea43:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ea4a:	56                   	push   esi
c001ea4b:	53                   	push   ebx
c001ea4c:	57                   	push   edi
c001ea4d:	55                   	push   ebp
c001ea4e:	e8 17 f2 ff ff       	call   c001dc6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea53:	b9 09 00 00 00       	mov    ecx,0x9
c001ea58:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ea60:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ea64:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ea6b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea6f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ea76:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ea7a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ea81:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ea85:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	fc                   	cld    
c001ea90:	89 e7                	mov    edi,esp
c001ea92:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ea99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea9b:	55                   	push   ebp
c001ea9c:	e8 59 f8 ff ff       	call   c001e2fa <PCI::foundDevice(PCIDeviceInfo)>
c001eaa1:	81 c4 dc 00 00 00    	add    esp,0xdc
c001eaa7:	5b                   	pop    ebx
c001eaa8:	5e                   	pop    esi
c001eaa9:	5f                   	pop    edi
c001eaaa:	5d                   	pop    ebp
c001eaab:	c3                   	ret    

c001eaac <PCI::checkDevice(unsigned char, unsigned char)>:
c001eaac:	55                   	push   ebp
c001eaad:	57                   	push   edi
c001eaae:	56                   	push   esi
c001eaaf:	53                   	push   ebx
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eab7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001eabc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001eac1:	6a 00                	push   0x0
c001eac3:	56                   	push   esi
c001eac4:	57                   	push   edi
c001eac5:	55                   	push   ebp
c001eac6:	e8 9f f1 ff ff       	call   c001dc6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eacb:	6a 00                	push   0x0
c001eacd:	56                   	push   esi
c001eace:	57                   	push   edi
c001eacf:	55                   	push   ebp
c001ead0:	e8 65 fc ff ff       	call   c001e73a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ead5:	83 c4 20             	add    esp,0x20
c001ead8:	6a 00                	push   0x0
c001eada:	56                   	push   esi
c001eadb:	57                   	push   edi
c001eadc:	55                   	push   ebp
c001eadd:	e8 ac f1 ff ff       	call   c001dc8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eae2:	83 c4 10             	add    esp,0x10
c001eae5:	84 c0                	test   al,al
c001eae7:	79 27                	jns    c001eb10 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001eae9:	bb 01 00 00 00       	mov    ebx,0x1
c001eaee:	53                   	push   ebx
c001eaef:	56                   	push   esi
c001eaf0:	57                   	push   edi
c001eaf1:	55                   	push   ebp
c001eaf2:	e8 73 f1 ff ff       	call   c001dc6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	66 40                	inc    ax
c001eafc:	74 0c                	je     c001eb0a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001eafe:	53                   	push   ebx
c001eaff:	56                   	push   esi
c001eb00:	57                   	push   edi
c001eb01:	55                   	push   ebp
c001eb02:	e8 33 fc ff ff       	call   c001e73a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	43                   	inc    ebx
c001eb0b:	83 fb 08             	cmp    ebx,0x8
c001eb0e:	75 de                	jne    c001eaee <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001eb10:	83 c4 0c             	add    esp,0xc
c001eb13:	5b                   	pop    ebx
c001eb14:	5e                   	pop    esi
c001eb15:	5f                   	pop    edi
c001eb16:	5d                   	pop    ebp
c001eb17:	c3                   	ret    

c001eb18 <PCI::detect()>:
c001eb18:	56                   	push   esi
c001eb19:	53                   	push   ebx
c001eb1a:	53                   	push   ebx
c001eb1b:	31 db                	xor    ebx,ebx
c001eb1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb21:	6a 00                	push   0x0
c001eb23:	6a 00                	push   0x0
c001eb25:	6a 00                	push   0x0
c001eb27:	56                   	push   esi
c001eb28:	e8 61 f1 ff ff       	call   c001dc8e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eb2d:	83 c4 10             	add    esp,0x10
c001eb30:	a8 80                	test   al,0x80
c001eb32:	75 21                	jne    c001eb55 <PCI::detect()+0x3d>
c001eb34:	51                   	push   ecx
c001eb35:	51                   	push   ecx
c001eb36:	6a 00                	push   0x0
c001eb38:	56                   	push   esi
c001eb39:	e8 98 f7 ff ff       	call   c001e2d6 <PCI::checkBus(unsigned char)>
c001eb3e:	83 c4 10             	add    esp,0x10
c001eb41:	eb 24                	jmp    c001eb67 <PCI::detect()+0x4f>
c001eb43:	52                   	push   edx
c001eb44:	52                   	push   edx
c001eb45:	53                   	push   ebx
c001eb46:	43                   	inc    ebx
c001eb47:	56                   	push   esi
c001eb48:	e8 89 f7 ff ff       	call   c001e2d6 <PCI::checkBus(unsigned char)>
c001eb4d:	83 c4 10             	add    esp,0x10
c001eb50:	83 fb 08             	cmp    ebx,0x8
c001eb53:	74 12                	je     c001eb67 <PCI::detect()+0x4f>
c001eb55:	53                   	push   ebx
c001eb56:	6a 00                	push   0x0
c001eb58:	6a 00                	push   0x0
c001eb5a:	56                   	push   esi
c001eb5b:	e8 0a f1 ff ff       	call   c001dc6a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb60:	83 c4 10             	add    esp,0x10
c001eb63:	66 40                	inc    ax
c001eb65:	74 dc                	je     c001eb43 <PCI::detect()+0x2b>
c001eb67:	58                   	pop    eax
c001eb68:	5b                   	pop    ebx
c001eb69:	5e                   	pop    esi
c001eb6a:	c3                   	ret    
c001eb6b:	90                   	nop

c001eb6c <IDE::close(int, int, void*)>:
c001eb6c:	83 c8 ff             	or     eax,0xffffffff
c001eb6f:	c3                   	ret    

c001eb70 <IDE::IDE()>:
c001eb70:	83 ec 0c             	sub    esp,0xc
c001eb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb77:	83 ec 08             	sub    esp,0x8
c001eb7a:	68 68 75 02 c0       	push   0xc0027568
c001eb7f:	50                   	push   eax
c001eb80:	e8 db fd fe ff       	call   c000e960 <HardDiskController::HardDiskController(char const*)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	ba f8 75 02 c0       	mov    edx,0xc00275f8
c001eb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb91:	89 10                	mov    DWORD PTR [eax],edx
c001eb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb97:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb9e:	90                   	nop
c001eb9f:	83 c4 0c             	add    esp,0xc
c001eba2:	c3                   	ret    
c001eba3:	90                   	nop

c001eba4 <IDE::prepareInterrupt(unsigned char)>:
c001eba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eba9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ebad:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ebb5:	c3                   	ret    

c001ebb6 <selectDrive(unsigned char, unsigned char)>:
c001ebb6:	c3                   	ret    
c001ebb7:	90                   	nop

c001ebb8 <IDE::getBase(unsigned char)>:
c001ebb8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ebbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ebc9:	c3                   	ret    

c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ebca:	55                   	push   ebp
c001ebcb:	57                   	push   edi
c001ebcc:	56                   	push   esi
c001ebcd:	53                   	push   ebx
c001ebce:	83 ec 1c             	sub    esp,0x1c
c001ebd1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ebd5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ebd9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ebdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ebe0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ebe4:	80 f9 03             	cmp    cl,0x3
c001ebe7:	77 51                	ja     c001ec3a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ebe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebed:	0f b6 f2             	movzx  esi,dl
c001ebf0:	0f b6 db             	movzx  ebx,bl
c001ebf3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ebf6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ebfa:	83 ca 80             	or     edx,0xffffff80
c001ebfd:	0f b6 d2             	movzx  edx,dl
c001ec00:	52                   	push   edx
c001ec01:	6a 0c                	push   0xc
c001ec03:	56                   	push   esi
c001ec04:	57                   	push   edi
c001ec05:	e8 c0 ff ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec0a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ec0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec13:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ec17:	ee                   	out    dx,al
c001ec18:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ec1d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ec21:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ec25:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ec29:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ec31:	83 c4 2c             	add    esp,0x2c
c001ec34:	5b                   	pop    ebx
c001ec35:	5e                   	pop    esi
c001ec36:	5f                   	pop    edi
c001ec37:	5d                   	pop    ebp
c001ec38:	eb 90                	jmp    c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec3a:	80 fb 07             	cmp    bl,0x7
c001ec3d:	77 12                	ja     c001ec51 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ec3f:	0f b6 d2             	movzx  edx,dl
c001ec42:	0f b6 db             	movzx  ebx,bl
c001ec45:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ec4d:	89 da                	mov    edx,ebx
c001ec4f:	eb 2f                	jmp    c001ec80 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec51:	80 fb 0d             	cmp    bl,0xd
c001ec54:	77 13                	ja     c001ec69 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ec56:	0f b6 d2             	movzx  edx,dl
c001ec59:	0f b6 db             	movzx  ebx,bl
c001ec5c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ec63:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ec67:	eb 17                	jmp    c001ec80 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec69:	80 fb 15             	cmp    bl,0x15
c001ec6c:	77 13                	ja     c001ec81 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec6e:	0f b6 d2             	movzx  edx,dl
c001ec71:	0f b6 db             	movzx  ebx,bl
c001ec74:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ec7c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ec80:	ee                   	out    dx,al
c001ec81:	83 c4 1c             	add    esp,0x1c
c001ec84:	5b                   	pop    ebx
c001ec85:	5e                   	pop    esi
c001ec86:	5f                   	pop    edi
c001ec87:	5d                   	pop    ebp
c001ec88:	c3                   	ret    
c001ec89:	90                   	nop

c001ec8a <IDE::read(unsigned char, unsigned char)>:
c001ec8a:	55                   	push   ebp
c001ec8b:	57                   	push   edi
c001ec8c:	56                   	push   esi
c001ec8d:	53                   	push   ebx
c001ec8e:	83 ec 1c             	sub    esp,0x1c
c001ec91:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ec95:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec99:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ec9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eca0:	3c 03                	cmp    al,0x3
c001eca2:	77 43                	ja     c001ece7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001eca4:	0f b6 f2             	movzx  esi,dl
c001eca7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ecaa:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ecae:	83 c8 80             	or     eax,0xffffff80
c001ecb1:	0f b6 c0             	movzx  eax,al
c001ecb4:	50                   	push   eax
c001ecb5:	6a 0c                	push   0xc
c001ecb7:	56                   	push   esi
c001ecb8:	57                   	push   edi
c001ecb9:	e8 0c ff ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecbe:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ecc3:	0f b6 c3             	movzx  eax,bl
c001ecc6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ecca:	ec                   	in     al,dx
c001eccb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001eccf:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ecd4:	52                   	push   edx
c001ecd5:	6a 0c                	push   0xc
c001ecd7:	56                   	push   esi
c001ecd8:	57                   	push   edi
c001ecd9:	e8 ec fe ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecde:	83 c4 20             	add    esp,0x20
c001ece1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ece5:	eb 49                	jmp    c001ed30 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ece7:	80 fb 07             	cmp    bl,0x7
c001ecea:	77 12                	ja     c001ecfe <IDE::read(unsigned char, unsigned char)+0x74>
c001ecec:	0f b6 d2             	movzx  edx,dl
c001ecef:	0f b6 c3             	movzx  eax,bl
c001ecf2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ecfa:	89 c2                	mov    edx,eax
c001ecfc:	eb 31                	jmp    c001ed2f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ecfe:	80 fb 0d             	cmp    bl,0xd
c001ed01:	77 13                	ja     c001ed16 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ed03:	0f b6 d2             	movzx  edx,dl
c001ed06:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ed0d:	0f b6 d3             	movzx  edx,bl
c001ed10:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ed14:	eb 19                	jmp    c001ed2f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ed16:	31 c0                	xor    eax,eax
c001ed18:	80 fb 15             	cmp    bl,0x15
c001ed1b:	77 13                	ja     c001ed30 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ed1d:	0f b6 d2             	movzx  edx,dl
c001ed20:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ed28:	0f b6 d3             	movzx  edx,bl
c001ed2b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ed2f:	ec                   	in     al,dx
c001ed30:	83 c4 1c             	add    esp,0x1c
c001ed33:	5b                   	pop    ebx
c001ed34:	5e                   	pop    esi
c001ed35:	5f                   	pop    edi
c001ed36:	5d                   	pop    ebp
c001ed37:	c3                   	ret    

c001ed38 <IDE::waitInterrupt(unsigned char)>:
c001ed38:	55                   	push   ebp
c001ed39:	57                   	push   edi
c001ed3a:	56                   	push   esi
c001ed3b:	53                   	push   ebx
c001ed3c:	31 db                	xor    ebx,ebx
c001ed3e:	83 ec 0c             	sub    esp,0xc
c001ed41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ed45:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ed4a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ed52:	89 e8                	mov    eax,ebp
c001ed54:	84 c0                	test   al,al
c001ed56:	75 30                	jne    c001ed88 <IDE::waitInterrupt(unsigned char)+0x50>
c001ed58:	50                   	push   eax
c001ed59:	6a 0c                	push   0xc
c001ed5b:	56                   	push   esi
c001ed5c:	57                   	push   edi
c001ed5d:	e8 28 ff ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001ed62:	83 c4 10             	add    esp,0x10
c001ed65:	a8 01                	test   al,0x1
c001ed67:	75 27                	jne    c001ed90 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed69:	f6 c3 04             	test   bl,0x4
c001ed6c:	75 12                	jne    c001ed80 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed6e:	83 fb 32             	cmp    ebx,0x32
c001ed71:	7e 0d                	jle    c001ed80 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed73:	83 ec 0c             	sub    esp,0xc
c001ed76:	6a 64                	push   0x64
c001ed78:	e8 db a2 ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c001ed7d:	83 c4 10             	add    esp,0x10
c001ed80:	83 fb 3c             	cmp    ebx,0x3c
c001ed83:	74 0b                	je     c001ed90 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed85:	43                   	inc    ebx
c001ed86:	eb c2                	jmp    c001ed4a <IDE::waitInterrupt(unsigned char)+0x12>
c001ed88:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ed90:	83 c4 0c             	add    esp,0xc
c001ed93:	89 e8                	mov    eax,ebp
c001ed95:	5b                   	pop    ebx
c001ed96:	5e                   	pop    esi
c001ed97:	5f                   	pop    edi
c001ed98:	5d                   	pop    ebp
c001ed99:	c3                   	ret    

c001ed9a <ideChannel0IRQHandler(regs*, void*)>:
c001ed9a:	83 ec 10             	sub    esp,0x10
c001ed9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eda1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001eda8:	6a 07                	push   0x7
c001edaa:	6a 00                	push   0x0
c001edac:	50                   	push   eax
c001edad:	e8 d8 fe ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001edb2:	83 c4 1c             	add    esp,0x1c
c001edb5:	c3                   	ret    

c001edb6 <ideChannel1IRQHandler(regs*, void*)>:
c001edb6:	83 ec 10             	sub    esp,0x10
c001edb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001edbd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001edc4:	6a 07                	push   0x7
c001edc6:	6a 01                	push   0x1
c001edc8:	50                   	push   eax
c001edc9:	e8 bc fe ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001edce:	83 c4 1c             	add    esp,0x1c
c001edd1:	c3                   	ret    

c001edd2 <IDE::enableIRQs(unsigned char, bool)>:
c001edd2:	57                   	push   edi
c001edd3:	56                   	push   esi
c001edd4:	be 04 00 00 00       	mov    esi,0x4
c001edd9:	53                   	push   ebx
c001edda:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001eddf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ede3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ede8:	0f 94 c0             	sete   al
c001edeb:	d1 e0                	shl    eax,1
c001eded:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001edf4:	0f b6 c0             	movzx  eax,al
c001edf7:	50                   	push   eax
c001edf8:	6a 0c                	push   0xc
c001edfa:	57                   	push   edi
c001edfb:	53                   	push   ebx
c001edfc:	e8 c9 fd ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee01:	83 c4 10             	add    esp,0x10
c001ee04:	50                   	push   eax
c001ee05:	6a 0c                	push   0xc
c001ee07:	57                   	push   edi
c001ee08:	53                   	push   ebx
c001ee09:	e8 7c fe ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001ee0e:	83 c4 10             	add    esp,0x10
c001ee11:	4e                   	dec    esi
c001ee12:	75 f0                	jne    c001ee04 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ee14:	5b                   	pop    ebx
c001ee15:	5e                   	pop    esi
c001ee16:	5f                   	pop    edi
c001ee17:	c3                   	ret    

c001ee18 <IDE::open(int, int, void*)>:
c001ee18:	55                   	push   ebp
c001ee19:	57                   	push   edi
c001ee1a:	56                   	push   esi
c001ee1b:	53                   	push   ebx
c001ee1c:	83 ec 1c             	sub    esp,0x1c
c001ee1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ee23:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ee2c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ee35:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ee3c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ee43:	0f 85 b0 02 00 00    	jne    c001f0f9 <IDE::open(int, int, void*)+0x2e1>
c001ee49:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ee4f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ee53:	83 e0 7f             	and    eax,0x7f
c001ee56:	3c 05                	cmp    al,0x5
c001ee58:	74 04                	je     c001ee5e <IDE::open(int, int, void*)+0x46>
c001ee5a:	3c 0f                	cmp    al,0xf
c001ee5c:	75 32                	jne    c001ee90 <IDE::open(int, int, void*)+0x78>
c001ee5e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ee64:	83 e0 fc             	and    eax,0xfffffffc
c001ee67:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee6e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ee74:	83 e0 fc             	and    eax,0xfffffffc
c001ee77:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ee7e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ee84:	83 e0 fc             	and    eax,0xfffffffc
c001ee87:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee8e:	eb 14                	jmp    c001eea4 <IDE::open(int, int, void*)+0x8c>
c001ee90:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee9a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001eea4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eeab:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001eeb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eeb6:	89 c6                	mov    esi,eax
c001eeb8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eebd:	c1 e6 10             	shl    esi,0x10
c001eec0:	89 e8                	mov    eax,ebp
c001eec2:	89 fa                	mov    edx,edi
c001eec4:	c1 e0 0b             	shl    eax,0xb
c001eec7:	09 f0                	or     eax,esi
c001eec9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001eed0:	c1 e6 08             	shl    esi,0x8
c001eed3:	09 c6                	or     esi,eax
c001eed5:	89 f0                	mov    eax,esi
c001eed7:	0d 08 00 00 80       	or     eax,0x80000008
c001eedc:	ef                   	out    dx,eax
c001eedd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001eee2:	89 ca                	mov    edx,ecx
c001eee4:	ed                   	in     eax,dx
c001eee5:	c1 e8 10             	shr    eax,0x10
c001eee8:	3d ff ff 00 00       	cmp    eax,0xffff
c001eeed:	0f 84 f5 00 00 00    	je     c001efe8 <IDE::open(int, int, void*)+0x1d0>
c001eef3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001eef9:	89 fa                	mov    edx,edi
c001eefb:	89 f0                	mov    eax,esi
c001eefd:	ef                   	out    dx,eax
c001eefe:	b0 fe                	mov    al,0xfe
c001ef00:	89 ca                	mov    edx,ecx
c001ef02:	ee                   	out    dx,al
c001ef03:	89 f0                	mov    eax,esi
c001ef05:	89 fa                	mov    edx,edi
c001ef07:	ef                   	out    dx,eax
c001ef08:	89 ca                	mov    edx,ecx
c001ef0a:	ed                   	in     eax,dx
c001ef0b:	3c fe                	cmp    al,0xfe
c001ef0d:	0f 85 a9 00 00 00    	jne    c001efbc <IDE::open(int, int, void*)+0x1a4>
c001ef13:	8b 15 a8 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca8
c001ef19:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ef20:	74 33                	je     c001ef55 <IDE::open(int, int, void*)+0x13d>
c001ef22:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ef28:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ef2c:	40                   	inc    eax
c001ef2d:	83 ec 0c             	sub    esp,0xc
c001ef30:	0f b6 c0             	movzx  eax,al
c001ef33:	50                   	push   eax
c001ef34:	55                   	push   ebp
c001ef35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef39:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ef3f:	51                   	push   ecx
c001ef40:	e8 cb 35 ff ff       	call   c0012510 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ef45:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ef4a:	83 c4 1c             	add    esp,0x1c
c001ef4d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ef53:	eb 0a                	jmp    c001ef5f <IDE::open(int, int, void*)+0x147>
c001ef55:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ef5f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef66:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef6d:	c1 e1 10             	shl    ecx,0x10
c001ef70:	c1 e0 08             	shl    eax,0x8
c001ef73:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ef78:	09 c1                	or     ecx,eax
c001ef7a:	89 fa                	mov    edx,edi
c001ef7c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef83:	c1 e0 0b             	shl    eax,0xb
c001ef86:	09 c1                	or     ecx,eax
c001ef88:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef8e:	89 c8                	mov    eax,ecx
c001ef90:	ef                   	out    dx,eax
c001ef91:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef96:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ef9c:	89 f2                	mov    edx,esi
c001ef9e:	ee                   	out    dx,al
c001ef9f:	89 c8                	mov    eax,ecx
c001efa1:	89 fa                	mov    edx,edi
c001efa3:	ef                   	out    dx,eax
c001efa4:	89 f2                	mov    edx,esi
c001efa6:	ed                   	in     eax,dx
c001efa7:	0f b6 c0             	movzx  eax,al
c001efaa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001efb0:	74 46                	je     c001eff8 <IDE::open(int, int, void*)+0x1e0>
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	68 80 75 02 c0       	push   0xc0027580
c001efba:	eb 34                	jmp    c001eff0 <IDE::open(int, int, void*)+0x1d8>
c001efbc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001efc5:	75 17                	jne    c001efde <IDE::open(int, int, void*)+0x1c6>
c001efc7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001efcc:	74 07                	je     c001efd5 <IDE::open(int, int, void*)+0x1bd>
c001efce:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001efd3:	75 09                	jne    c001efde <IDE::open(int, int, void*)+0x1c6>
c001efd5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001efdc:	eb 1a                	jmp    c001eff8 <IDE::open(int, int, void*)+0x1e0>
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	68 88 75 02 c0       	push   0xc0027588
c001efe6:	eb 08                	jmp    c001eff0 <IDE::open(int, int, void*)+0x1d8>
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	68 b9 75 02 c0       	push   0xc00275b9
c001eff0:	e8 0c 60 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c001eff5:	83 c4 10             	add    esp,0x10
c001eff8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001efff:	79 1a                	jns    c001f01b <IDE::open(int, int, void*)+0x203>
c001f001:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f007:	83 e0 fc             	and    eax,0xfffffffc
c001f00a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f011:	83 c0 08             	add    eax,0x8
c001f014:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f01b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f021:	89 c2                	mov    edx,eax
c001f023:	83 e2 0f             	and    edx,0xf
c001f026:	66 83 fa 08          	cmp    dx,0x8
c001f02a:	75 0a                	jne    c001f036 <IDE::open(int, int, void*)+0x21e>
c001f02c:	83 e8 02             	sub    eax,0x2
c001f02f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f036:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f03c:	89 c2                	mov    edx,eax
c001f03e:	83 e2 0f             	and    edx,0xf
c001f041:	66 83 fa 08          	cmp    dx,0x8
c001f045:	75 0a                	jne    c001f051 <IDE::open(int, int, void*)+0x239>
c001f047:	83 e8 02             	sub    eax,0x2
c001f04a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f051:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f058:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f05f:	89 d0                	mov    eax,edx
c001f061:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f064:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f068:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f06c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001f06f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f074:	0f b6 c9             	movzx  ecx,cl
c001f077:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f07e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f081:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f085:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f089:	8d 50 02             	lea    edx,[eax+0x2]
c001f08c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f091:	0f b6 d2             	movzx  edx,dl
c001f094:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f09a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f09d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0a1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f0a5:	8d 48 03             	lea    ecx,[eax+0x3]
c001f0a8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f0ad:	0f b6 c9             	movzx  ecx,cl
c001f0b0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f0b6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f0b9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f0bd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f0c1:	8d 50 04             	lea    edx,[eax+0x4]
c001f0c4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f0ca:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f0cf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f0d6:	66 85 f6             	test   si,si
c001f0d9:	74 5b                	je     c001f136 <IDE::open(int, int, void*)+0x31e>
c001f0db:	0f b6 d2             	movzx  edx,dl
c001f0de:	83 c0 05             	add    eax,0x5
c001f0e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f0e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0e8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f0ec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f0f2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f0f7:	eb 3d                	jmp    c001f136 <IDE::open(int, int, void*)+0x31e>
c001f0f9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f0ff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f106:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f10d:	66 05 06 02          	add    ax,0x206
c001f111:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f118:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f11f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f126:	66 05 06 02          	add    ax,0x206
c001f12a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f131:	e9 e5 fe ff ff       	jmp    c001f01b <IDE::open(int, int, void*)+0x203>
c001f136:	50                   	push   eax
c001f137:	50                   	push   eax
c001f138:	6a 00                	push   0x0
c001f13a:	53                   	push   ebx
c001f13b:	e8 64 fa ff ff       	call   c001eba4 <IDE::prepareInterrupt(unsigned char)>
c001f140:	5a                   	pop    edx
c001f141:	59                   	pop    ecx
c001f142:	6a 01                	push   0x1
c001f144:	53                   	push   ebx
c001f145:	e8 5a fa ff ff       	call   c001eba4 <IDE::prepareInterrupt(unsigned char)>
c001f14a:	83 c4 0c             	add    esp,0xc
c001f14d:	6a 00                	push   0x0
c001f14f:	6a 00                	push   0x0
c001f151:	53                   	push   ebx
c001f152:	e8 7b fc ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c001f157:	83 c4 0c             	add    esp,0xc
c001f15a:	6a 00                	push   0x0
c001f15c:	6a 01                	push   0x1
c001f15e:	53                   	push   ebx
c001f15f:	e8 6e fc ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c001f164:	83 c4 10             	add    esp,0x10
c001f167:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f16e:	74 34                	je     c001f1a4 <IDE::open(int, int, void*)+0x38c>
c001f170:	83 ec 0c             	sub    esp,0xc
c001f173:	53                   	push   ebx
c001f174:	6a 01                	push   0x1
c001f176:	68 9a ed 01 c0       	push   0xc001ed9a
c001f17b:	6a 0e                	push   0xe
c001f17d:	53                   	push   ebx
c001f17e:	e8 a7 f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f183:	83 c4 14             	add    esp,0x14
c001f186:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f18c:	53                   	push   ebx
c001f18d:	6a 01                	push   0x1
c001f18f:	68 b6 ed 01 c0       	push   0xc001edb6
c001f194:	6a 0f                	push   0xf
c001f196:	53                   	push   ebx
c001f197:	e8 8e f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f19c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f1a2:	eb 38                	jmp    c001f1dc <IDE::open(int, int, void*)+0x3c4>
c001f1a4:	83 ec 0c             	sub    esp,0xc
c001f1a7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f1b1:	53                   	push   ebx
c001f1b2:	6a 00                	push   0x0
c001f1b4:	68 9a ed 01 c0       	push   0xc001ed9a
c001f1b9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f1bf:	53                   	push   ebx
c001f1c0:	e8 65 f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1c5:	83 c4 14             	add    esp,0x14
c001f1c8:	53                   	push   ebx
c001f1c9:	6a 00                	push   0x0
c001f1cb:	68 b6 ed 01 c0       	push   0xc001edb6
c001f1d0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f1d6:	53                   	push   ebx
c001f1d7:	e8 4e f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f1de:	83 c4 20             	add    esp,0x20
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	53                   	push   ebx
c001f1e5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f1e8:	83 c4 0c             	add    esp,0xc
c001f1eb:	6a 07                	push   0x7
c001f1ed:	6a 00                	push   0x0
c001f1ef:	53                   	push   ebx
c001f1f0:	e8 95 fa ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f1f5:	83 c4 0c             	add    esp,0xc
c001f1f8:	6a 07                	push   0x7
c001f1fa:	6a 01                	push   0x1
c001f1fc:	53                   	push   ebx
c001f1fd:	e8 88 fa ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f202:	83 c4 0c             	add    esp,0xc
c001f205:	6a 01                	push   0x1
c001f207:	6a 00                	push   0x0
c001f209:	53                   	push   ebx
c001f20a:	e8 c3 fb ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c001f20f:	83 c4 0c             	add    esp,0xc
c001f212:	6a 01                	push   0x1
c001f214:	6a 01                	push   0x1
c001f216:	53                   	push   ebx
c001f217:	e8 b6 fb ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c001f21c:	83 c4 2c             	add    esp,0x2c
c001f21f:	31 c0                	xor    eax,eax
c001f221:	5b                   	pop    ebx
c001f222:	5e                   	pop    esi
c001f223:	5f                   	pop    edi
c001f224:	5d                   	pop    ebp
c001f225:	c3                   	ret    

c001f226 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f226:	55                   	push   ebp
c001f227:	57                   	push   edi
c001f228:	56                   	push   esi
c001f229:	53                   	push   ebx
c001f22a:	83 ec 1c             	sub    esp,0x1c
c001f22d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f231:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f235:	8d 50 f8             	lea    edx,[eax-0x8]
c001f238:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f23c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f240:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f244:	80 fa 03             	cmp    dl,0x3
c001f247:	77 5d                	ja     c001f2a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f249:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f24d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f251:	0f b6 db             	movzx  ebx,bl
c001f254:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f257:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f25b:	83 ca 80             	or     edx,0xffffff80
c001f25e:	0f b6 d2             	movzx  edx,dl
c001f261:	52                   	push   edx
c001f262:	6a 0c                	push   0xc
c001f264:	53                   	push   ebx
c001f265:	56                   	push   esi
c001f266:	e8 5f f9 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f26b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f274:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f278:	0f b6 c0             	movzx  eax,al
c001f27b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f27f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f281:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f286:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f28a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f28e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f292:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f29a:	83 c4 2c             	add    esp,0x2c
c001f29d:	5b                   	pop    ebx
c001f29e:	5e                   	pop    esi
c001f29f:	5f                   	pop    edi
c001f2a0:	5d                   	pop    ebp
c001f2a1:	e9 24 f9 ff ff       	jmp    c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2a6:	3c 07                	cmp    al,0x7
c001f2a8:	77 10                	ja     c001f2ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f2aa:	0f b6 db             	movzx  ebx,bl
c001f2ad:	0f b6 d0             	movzx  edx,al
c001f2b0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f2b8:	eb 2d                	jmp    c001f2e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f2ba:	3c 0d                	cmp    al,0xd
c001f2bc:	77 13                	ja     c001f2d1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f2be:	0f b6 db             	movzx  ebx,bl
c001f2c1:	0f b6 c0             	movzx  eax,al
c001f2c4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f2cb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f2cf:	eb 16                	jmp    c001f2e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f2d1:	3c 15                	cmp    al,0x15
c001f2d3:	77 14                	ja     c001f2e9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f2d5:	0f b6 db             	movzx  ebx,bl
c001f2d8:	0f b6 c0             	movzx  eax,al
c001f2db:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f2e3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f2e7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f2e9:	83 c4 1c             	add    esp,0x1c
c001f2ec:	5b                   	pop    ebx
c001f2ed:	5e                   	pop    esi
c001f2ee:	5f                   	pop    edi
c001f2ef:	5d                   	pop    ebp
c001f2f0:	c3                   	ret    
c001f2f1:	90                   	nop

c001f2f2 <IDE::detect()>:
c001f2f2:	55                   	push   ebp
c001f2f3:	57                   	push   edi
c001f2f4:	56                   	push   esi
c001f2f5:	53                   	push   ebx
c001f2f6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f2fc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f303:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f30a:	0f 85 97 02 00 00    	jne    c001f5a7 <IDE::detect()+0x2b5>
c001f310:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f317:	31 f6                	xor    esi,esi
c001f319:	31 ed                	xor    ebp,ebp
c001f31b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f323:	89 e8                	mov    eax,ebp
c001f325:	c1 e0 06             	shl    eax,0x6
c001f328:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f330:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f334:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f338:	c1 e0 04             	shl    eax,0x4
c001f33b:	83 c8 a0             	or     eax,0xffffffa0
c001f33e:	0f b6 c0             	movzx  eax,al
c001f341:	50                   	push   eax
c001f342:	6a 06                	push   0x6
c001f344:	56                   	push   esi
c001f345:	53                   	push   ebx
c001f346:	e8 7f f8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f34b:	83 c4 0c             	add    esp,0xc
c001f34e:	6a 0c                	push   0xc
c001f350:	56                   	push   esi
c001f351:	53                   	push   ebx
c001f352:	e8 33 f9 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f357:	83 c4 0c             	add    esp,0xc
c001f35a:	6a 0c                	push   0xc
c001f35c:	56                   	push   esi
c001f35d:	53                   	push   ebx
c001f35e:	e8 27 f9 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f363:	83 c4 0c             	add    esp,0xc
c001f366:	6a 0c                	push   0xc
c001f368:	56                   	push   esi
c001f369:	53                   	push   ebx
c001f36a:	e8 1b f9 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f36f:	83 c4 0c             	add    esp,0xc
c001f372:	6a 0c                	push   0xc
c001f374:	56                   	push   esi
c001f375:	53                   	push   ebx
c001f376:	e8 0f f9 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f37b:	68 ec 00 00 00       	push   0xec
c001f380:	6a 07                	push   0x7
c001f382:	56                   	push   esi
c001f383:	53                   	push   ebx
c001f384:	e8 41 f8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f389:	83 c4 1c             	add    esp,0x1c
c001f38c:	6a 0c                	push   0xc
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	e8 f5 f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f395:	83 c4 0c             	add    esp,0xc
c001f398:	6a 0c                	push   0xc
c001f39a:	56                   	push   esi
c001f39b:	53                   	push   ebx
c001f39c:	e8 e9 f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f3a1:	83 c4 0c             	add    esp,0xc
c001f3a4:	6a 0c                	push   0xc
c001f3a6:	56                   	push   esi
c001f3a7:	53                   	push   ebx
c001f3a8:	e8 dd f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f3ad:	83 c4 0c             	add    esp,0xc
c001f3b0:	6a 0c                	push   0xc
c001f3b2:	56                   	push   esi
c001f3b3:	53                   	push   ebx
c001f3b4:	e8 d1 f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f3b9:	83 c4 0c             	add    esp,0xc
c001f3bc:	6a 0c                	push   0xc
c001f3be:	56                   	push   esi
c001f3bf:	53                   	push   ebx
c001f3c0:	e8 c5 f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f3c5:	83 c4 10             	add    esp,0x10
c001f3c8:	84 c0                	test   al,al
c001f3ca:	0f 84 5f 01 00 00    	je     c001f52f <IDE::detect()+0x23d>
c001f3d0:	31 ff                	xor    edi,edi
c001f3d2:	50                   	push   eax
c001f3d3:	6a 0c                	push   0xc
c001f3d5:	56                   	push   esi
c001f3d6:	53                   	push   ebx
c001f3d7:	e8 ae f8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f3dc:	83 c4 10             	add    esp,0x10
c001f3df:	a8 01                	test   al,0x1
c001f3e1:	0f 85 69 01 00 00    	jne    c001f550 <IDE::detect()+0x25e>
c001f3e7:	84 c0                	test   al,al
c001f3e9:	78 04                	js     c001f3ef <IDE::detect()+0xfd>
c001f3eb:	a8 08                	test   al,0x8
c001f3ed:	75 23                	jne    c001f412 <IDE::detect()+0x120>
c001f3ef:	47                   	inc    edi
c001f3f0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f3f6:	7e da                	jle    c001f3d2 <IDE::detect()+0xe0>
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	6a 32                	push   0x32
c001f3fd:	e8 56 9c ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c001f402:	83 c4 10             	add    esp,0x10
c001f405:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f40b:	75 c5                	jne    c001f3d2 <IDE::detect()+0xe0>
c001f40d:	e9 3e 01 00 00       	jmp    c001f550 <IDE::detect()+0x25e>
c001f412:	31 c9                	xor    ecx,ecx
c001f414:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f418:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f41c:	83 ec 0c             	sub    esp,0xc
c001f41f:	68 80 00 00 00       	push   0x80
c001f424:	57                   	push   edi
c001f425:	6a 00                	push   0x0
c001f427:	56                   	push   esi
c001f428:	53                   	push   ebx
c001f429:	e8 f8 fd ff ff       	call   c001f226 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f42e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f433:	89 e8                	mov    eax,ebp
c001f435:	89 d1                	mov    ecx,edx
c001f437:	c1 e0 06             	shl    eax,0x6
c001f43a:	01 d8                	add    eax,ebx
c001f43c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f443:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f44a:	89 f2                	mov    edx,esi
c001f44c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f452:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f456:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f45c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f460:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f467:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f46f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f476:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f47e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f484:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f48b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f491:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f495:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f499:	83 c4 20             	add    esp,0x20
c001f49c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f49f:	83 c0 02             	add    eax,0x2
c001f4a2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f4a8:	83 c7 02             	add    edi,0x2
c001f4ab:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f4ae:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f4b4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f4b8:	75 e2                	jne    c001f49c <IDE::detect()+0x1aa>
c001f4ba:	89 e8                	mov    eax,ebp
c001f4bc:	c1 e0 06             	shl    eax,0x6
c001f4bf:	01 d8                	add    eax,ebx
c001f4c1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f4c7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f4ce:	66 c1 ea 09          	shr    dx,0x9
c001f4d2:	83 e2 01             	and    edx,0x1
c001f4d5:	84 c9                	test   cl,cl
c001f4d7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f4dd:	75 22                	jne    c001f501 <IDE::detect()+0x20f>
c001f4df:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f4e6:	74 46                	je     c001f52e <IDE::detect()+0x23c>
c001f4e8:	83 ec 0c             	sub    esp,0xc
c001f4eb:	68 7c 01 00 00       	push   0x17c
c001f4f0:	e8 5e a8 fe ff       	call   c0009d53 <malloc>
c001f4f5:	89 c7                	mov    edi,eax
c001f4f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4fa:	e8 35 06 00 00       	call   c001fb34 <ATA::ATA()>
c001f4ff:	eb 17                	jmp    c001f518 <IDE::detect()+0x226>
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	68 84 01 00 00       	push   0x184
c001f509:	e8 45 a8 fe ff       	call   c0009d53 <malloc>
c001f50e:	89 c7                	mov    edi,eax
c001f510:	89 04 24             	mov    DWORD PTR [esp],eax
c001f513:	e8 a4 0c 00 00       	call   c00201bc <ATAPI::ATAPI()>
c001f518:	5a                   	pop    edx
c001f519:	59                   	pop    ecx
c001f51a:	57                   	push   edi
c001f51b:	53                   	push   ebx
c001f51c:	e8 91 f0 fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001f521:	8b 07                	mov    eax,DWORD PTR [edi]
c001f523:	53                   	push   ebx
c001f524:	55                   	push   ebp
c001f525:	6a 00                	push   0x0
c001f527:	57                   	push   edi
c001f528:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f52b:	83 c4 20             	add    esp,0x20
c001f52e:	45                   	inc    ebp
c001f52f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f534:	74 0d                	je     c001f543 <IDE::detect()+0x251>
c001f536:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f53e:	e9 e0 fd ff ff       	jmp    c001f323 <IDE::detect()+0x31>
c001f543:	4e                   	dec    esi
c001f544:	74 61                	je     c001f5a7 <IDE::detect()+0x2b5>
c001f546:	be 01 00 00 00       	mov    esi,0x1
c001f54b:	e9 cb fd ff ff       	jmp    c001f31b <IDE::detect()+0x29>
c001f550:	50                   	push   eax
c001f551:	6a 04                	push   0x4
c001f553:	56                   	push   esi
c001f554:	53                   	push   ebx
c001f555:	e8 30 f7 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f55a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f55e:	83 c4 0c             	add    esp,0xc
c001f561:	6a 05                	push   0x5
c001f563:	56                   	push   esi
c001f564:	53                   	push   ebx
c001f565:	e8 20 f7 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f56a:	83 c4 10             	add    esp,0x10
c001f56d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f571:	80 fa 14             	cmp    dl,0x14
c001f574:	75 04                	jne    c001f57a <IDE::detect()+0x288>
c001f576:	3c eb                	cmp    al,0xeb
c001f578:	eb 07                	jmp    c001f581 <IDE::detect()+0x28f>
c001f57a:	3c 96                	cmp    al,0x96
c001f57c:	75 b1                	jne    c001f52f <IDE::detect()+0x23d>
c001f57e:	80 fa 69             	cmp    dl,0x69
c001f581:	75 ac                	jne    c001f52f <IDE::detect()+0x23d>
c001f583:	68 a1 00 00 00       	push   0xa1
c001f588:	6a 07                	push   0x7
c001f58a:	56                   	push   esi
c001f58b:	53                   	push   ebx
c001f58c:	e8 39 f6 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f591:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f598:	e8 bb 9a ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c001f59d:	83 c4 10             	add    esp,0x10
c001f5a0:	b1 01                	mov    cl,0x1
c001f5a2:	e9 6d fe ff ff       	jmp    c001f414 <IDE::detect()+0x122>
c001f5a7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f5ad:	5b                   	pop    ebx
c001f5ae:	5e                   	pop    esi
c001f5af:	5f                   	pop    edi
c001f5b0:	5d                   	pop    ebp
c001f5b1:	c3                   	ret    

c001f5b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f5b2:	55                   	push   ebp
c001f5b3:	57                   	push   edi
c001f5b4:	56                   	push   esi
c001f5b5:	53                   	push   ebx
c001f5b6:	83 ec 1c             	sub    esp,0x1c
c001f5b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f5bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f5c1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f5c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f5c9:	88 c3                	mov    bl,al
c001f5cb:	84 c0                	test   al,al
c001f5cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5d1:	0f 84 81 00 00 00    	je     c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f5d7:	83 ec 0c             	sub    esp,0xc
c001f5da:	68 e3 75 02 c0       	push   0xc00275e3
c001f5df:	e8 5b da fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5eb:	3c 01                	cmp    al,0x1
c001f5ed:	74 63                	je     c001f652 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f5ef:	3c 02                	cmp    al,0x2
c001f5f1:	75 53                	jne    c001f646 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f5f3:	d1 e6                	shl    esi,1
c001f5f5:	09 ee                	or     esi,ebp
c001f5f7:	50                   	push   eax
c001f5f8:	89 f0                	mov    eax,esi
c001f5fa:	6a 01                	push   0x1
c001f5fc:	0f b6 f0             	movzx  esi,al
c001f5ff:	c1 e6 06             	shl    esi,0x6
c001f602:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f60a:	50                   	push   eax
c001f60b:	57                   	push   edi
c001f60c:	e8 79 f6 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f611:	83 c4 10             	add    esp,0x10
c001f614:	a8 01                	test   al,0x1
c001f616:	74 02                	je     c001f61a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f618:	b3 07                	mov    bl,0x7
c001f61a:	a8 02                	test   al,0x2
c001f61c:	74 02                	je     c001f620 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f61e:	b3 03                	mov    bl,0x3
c001f620:	a8 04                	test   al,0x4
c001f622:	74 02                	je     c001f626 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f624:	b3 14                	mov    bl,0x14
c001f626:	a8 08                	test   al,0x8
c001f628:	74 02                	je     c001f62c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f62a:	b3 03                	mov    bl,0x3
c001f62c:	a8 10                	test   al,0x10
c001f62e:	74 02                	je     c001f632 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f630:	b3 15                	mov    bl,0x15
c001f632:	a8 20                	test   al,0x20
c001f634:	74 02                	je     c001f638 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f636:	b3 03                	mov    bl,0x3
c001f638:	a8 40                	test   al,0x40
c001f63a:	74 02                	je     c001f63e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f63c:	b3 16                	mov    bl,0x16
c001f63e:	84 c0                	test   al,al
c001f640:	79 16                	jns    c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f642:	b3 0d                	mov    bl,0xd
c001f644:	eb 12                	jmp    c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f646:	3c 03                	cmp    al,0x3
c001f648:	74 0c                	je     c001f656 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f64a:	3c 04                	cmp    al,0x4
c001f64c:	75 0a                	jne    c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f64e:	b3 08                	mov    bl,0x8
c001f650:	eb 06                	jmp    c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f652:	b3 13                	mov    bl,0x13
c001f654:	eb 02                	jmp    c001f658 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f656:	b3 17                	mov    bl,0x17
c001f658:	83 c4 1c             	add    esp,0x1c
c001f65b:	88 d8                	mov    al,bl
c001f65d:	5b                   	pop    ebx
c001f65e:	5e                   	pop    esi
c001f65f:	5f                   	pop    edi
c001f660:	5d                   	pop    ebp
c001f661:	c3                   	ret    

c001f662 <IDE::polling(unsigned char, unsigned int)>:
c001f662:	57                   	push   edi
c001f663:	56                   	push   esi
c001f664:	53                   	push   ebx
c001f665:	bb 04 00 00 00       	mov    ebx,0x4
c001f66a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f66e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f673:	52                   	push   edx
c001f674:	6a 0c                	push   0xc
c001f676:	56                   	push   esi
c001f677:	57                   	push   edi
c001f678:	e8 0d f6 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f67d:	83 c4 10             	add    esp,0x10
c001f680:	4b                   	dec    ebx
c001f681:	75 f0                	jne    c001f673 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f683:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f688:	50                   	push   eax
c001f689:	6a 0c                	push   0xc
c001f68b:	56                   	push   esi
c001f68c:	57                   	push   edi
c001f68d:	e8 f8 f5 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001f692:	83 c4 10             	add    esp,0x10
c001f695:	a8 01                	test   al,0x1
c001f697:	75 17                	jne    c001f6b0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f699:	a8 20                	test   al,0x20
c001f69b:	75 0f                	jne    c001f6ac <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f69d:	4b                   	dec    ebx
c001f69e:	74 10                	je     c001f6b0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f6a0:	84 c0                	test   al,al
c001f6a2:	78 e4                	js     c001f688 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f6a4:	a8 08                	test   al,0x8
c001f6a6:	74 e0                	je     c001f688 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f6a8:	31 c0                	xor    eax,eax
c001f6aa:	eb 06                	jmp    c001f6b2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f6ac:	b0 01                	mov    al,0x1
c001f6ae:	eb 02                	jmp    c001f6b2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f6b0:	b0 02                	mov    al,0x2
c001f6b2:	5b                   	pop    ebx
c001f6b3:	5e                   	pop    esi
c001f6b4:	5f                   	pop    edi
c001f6b5:	c3                   	ret    

c001f6b6 <SATABus::close(int, int, void*)>:
c001f6b6:	31 c0                	xor    eax,eax
c001f6b8:	c3                   	ret    
c001f6b9:	90                   	nop

c001f6ba <SATABus::detect()>:
c001f6ba:	c3                   	ret    
c001f6bb:	90                   	nop

c001f6bc <SATABus::SATABus()>:
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c3:	83 ec 08             	sub    esp,0x8
c001f6c6:	68 1c 76 02 c0       	push   0xc002761c
c001f6cb:	50                   	push   eax
c001f6cc:	e8 8f f2 fe ff       	call   c000e960 <HardDiskController::HardDiskController(char const*)>
c001f6d1:	83 c4 10             	add    esp,0x10
c001f6d4:	ba b4 76 02 c0       	mov    edx,0xc00276b4
c001f6d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6dd:	89 10                	mov    DWORD PTR [eax],edx
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	6a 50                	push   0x50
c001f6e4:	e8 0c ae fe ff       	call   c000a4f5 <Phys::allocateContiguousPages(int)>
c001f6e9:	83 c4 10             	add    esp,0x10
c001f6ec:	89 c2                	mov    edx,eax
c001f6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	6a 50                	push   0x50
c001f6fd:	e8 17 c6 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c001f702:	83 c4 10             	add    esp,0x10
c001f705:	89 c2                	mov    edx,eax
c001f707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f711:	a1 d0 8d 02 c0       	mov    eax,ds:0xc0028dd0
c001f716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f71a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f724:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f72a:	83 ec 0c             	sub    esp,0xc
c001f72d:	6a 03                	push   0x3
c001f72f:	6a 50                	push   0x50
c001f731:	51                   	push   ecx
c001f732:	52                   	push   edx
c001f733:	50                   	push   eax
c001f734:	e8 7d cf fe ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f739:	83 c4 20             	add    esp,0x20
c001f73c:	90                   	nop
c001f73d:	83 c4 0c             	add    esp,0xc
c001f740:	c3                   	ret    
c001f741:	90                   	nop

c001f742 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f746:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f749:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f74c:	09 c2                	or     edx,eax
c001f74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f752:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f758:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f75a:	31 c0                	xor    eax,eax
c001f75c:	c1 e9 08             	shr    ecx,0x8
c001f75f:	83 e1 0f             	and    ecx,0xf
c001f762:	39 c8                	cmp    eax,ecx
c001f764:	74 0a                	je     c001f770 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f766:	f6 c2 01             	test   dl,0x1
c001f769:	74 08                	je     c001f773 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f76b:	d1 ea                	shr    edx,1
c001f76d:	40                   	inc    eax
c001f76e:	eb f2                	jmp    c001f762 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f770:	83 c8 ff             	or     eax,0xffffffff
c001f773:	c3                   	ret    

c001f774 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f774:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f778:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f77b:	89 c2                	mov    edx,eax
c001f77d:	c1 ea 08             	shr    edx,0x8
c001f780:	83 e2 0f             	and    edx,0xf
c001f783:	fe ca                	dec    dl
c001f785:	75 31                	jne    c001f7b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f787:	83 e0 0f             	and    eax,0xf
c001f78a:	3c 03                	cmp    al,0x3
c001f78c:	75 2a                	jne    c001f7b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f78e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f791:	b8 02 00 00 00       	mov    eax,0x2
c001f796:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f79c:	74 1c                	je     c001f7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f79e:	b8 04 00 00 00       	mov    eax,0x4
c001f7a3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f7a9:	74 0f                	je     c001f7ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f7ab:	31 c0                	xor    eax,eax
c001f7ad:	83 fa 03             	cmp    edx,0x3
c001f7b0:	0f 94 c0             	sete   al
c001f7b3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f7b7:	c3                   	ret    
c001f7b8:	31 c0                	xor    eax,eax
c001f7ba:	c3                   	ret    
c001f7bb:	90                   	nop

c001f7bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7c0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7c3:	0f ba e2 0f          	bt     edx,0xf
c001f7c7:	72 f7                	jb     c001f7c0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f7c9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7cc:	83 ca 10             	or     edx,0x10
c001f7cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7d2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7d5:	83 ca 01             	or     edx,0x1
c001f7d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7db:	c3                   	ret    

c001f7dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7e3:	83 e2 fe             	and    edx,0xfffffffe
c001f7e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7e9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7ec:	83 e2 ef             	and    edx,0xffffffef
c001f7ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7f5:	0f ba e2 0e          	bt     edx,0xe
c001f7f9:	72 f7                	jb     c001f7f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f7fb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7fe:	0f ba e2 0f          	bt     edx,0xf
c001f802:	72 ee                	jb     c001f7f2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f804:	c3                   	ret    
c001f805:	90                   	nop

c001f806 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f806:	55                   	push   ebp
c001f807:	57                   	push   edi
c001f808:	56                   	push   esi
c001f809:	53                   	push   ebx
c001f80a:	83 ec 1c             	sub    esp,0x1c
c001f80d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f811:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f815:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f819:	53                   	push   ebx
c001f81a:	89 fd                	mov    ebp,edi
c001f81c:	56                   	push   esi
c001f81d:	c1 e5 0a             	shl    ebp,0xa
c001f820:	e8 b7 ff ff ff       	call   c001f7dc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f825:	83 ec 0c             	sub    esp,0xc
c001f828:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f82e:	01 e8                	add    eax,ebp
c001f830:	89 03                	mov    DWORD PTR [ebx],eax
c001f832:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f834:	68 00 04 00 00       	push   0x400
c001f839:	6a 00                	push   0x0
c001f83b:	50                   	push   eax
c001f83c:	e8 3b 0e fe ff       	call   c000067c <memset>
c001f841:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f847:	89 fa                	mov    edx,edi
c001f849:	01 e8                	add    eax,ebp
c001f84b:	c1 e7 0d             	shl    edi,0xd
c001f84e:	89 03                	mov    DWORD PTR [ebx],eax
c001f850:	c1 e2 08             	shl    edx,0x8
c001f853:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f85a:	81 c2 00 80 00 00    	add    edx,0x8000
c001f860:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f864:	89 d0                	mov    eax,edx
c001f866:	83 c4 1c             	add    esp,0x1c
c001f869:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f86f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f872:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f875:	68 00 01 00 00       	push   0x100
c001f87a:	6a 00                	push   0x0
c001f87c:	50                   	push   eax
c001f87d:	e8 fa 0d fe ff       	call   c000067c <memset>
c001f882:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f886:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f88c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f892:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f896:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f899:	83 c4 10             	add    esp,0x10
c001f89c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f8a3:	31 ff                	xor    edi,edi
c001f8a5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f8ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f8b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f8bb:	83 c5 20             	add    ebp,0x20
c001f8be:	01 f8                	add    eax,edi
c001f8c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f8c3:	52                   	push   edx
c001f8c4:	68 00 01 00 00       	push   0x100
c001f8c9:	6a 00                	push   0x0
c001f8cb:	50                   	push   eax
c001f8cc:	e8 ab 0d fe ff       	call   c000067c <memset>
c001f8d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8d5:	83 c4 10             	add    esp,0x10
c001f8d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f8de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f8e5:	01 f8                	add    eax,edi
c001f8e7:	81 c7 00 01 00 00    	add    edi,0x100
c001f8ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f8f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f8f6:	75 b3                	jne    c001f8ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f8f8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f8fc:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f900:	83 c4 1c             	add    esp,0x1c
c001f903:	5b                   	pop    ebx
c001f904:	5e                   	pop    esi
c001f905:	5f                   	pop    edi
c001f906:	5d                   	pop    ebp
c001f907:	e9 b0 fe ff ff       	jmp    c001f7bc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f90c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f90c:	55                   	push   ebp
c001f90d:	57                   	push   edi
c001f90e:	56                   	push   esi
c001f90f:	53                   	push   ebx
c001f910:	83 ec 0c             	sub    esp,0xc
c001f913:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f917:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001f91e:	74 2d                	je     c001f94d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f920:	83 ec 0c             	sub    esp,0xc
c001f923:	68 40 76 02 c0       	push   0xc0027640
c001f928:	e8 80 a4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001f937:	75 14                	jne    c001f94d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f939:	e4 60                	in     al,0x60
c001f93b:	3c 1c                	cmp    al,0x1c
c001f93d:	74 04                	je     c001f943 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f93f:	3c 5a                	cmp    al,0x5a
c001f941:	75 f6                	jne    c001f939 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f943:	e4 60                	in     al,0x60
c001f945:	3c 5a                	cmp    al,0x5a
c001f947:	74 fa                	je     c001f943 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f949:	3c 1c                	cmp    al,0x1c
c001f94b:	74 f6                	je     c001f943 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f94d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f951:	31 db                	xor    ebx,ebx
c001f953:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f956:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f95c:	0f 84 78 01 00 00    	je     c001fada <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f962:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f966:	89 d8                	mov    eax,ebx
c001f968:	c1 e0 07             	shl    eax,0x7
c001f96b:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f972:	50                   	push   eax
c001f973:	50                   	push   eax
c001f974:	57                   	push   edi
c001f975:	56                   	push   esi
c001f976:	e8 f9 fd ff ff       	call   c001f774 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	83 f8 01             	cmp    eax,0x1
c001f981:	0f 85 19 01 00 00    	jne    c001faa0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f987:	50                   	push   eax
c001f988:	53                   	push   ebx
c001f989:	57                   	push   edi
c001f98a:	56                   	push   esi
c001f98b:	e8 76 fe ff ff       	call   c001f806 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f990:	83 c4 10             	add    esp,0x10
c001f993:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001f99a:	74 2d                	je     c001f9c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f99c:	83 ec 0c             	sub    esp,0xc
c001f99f:	68 55 76 02 c0       	push   0xc0027655
c001f9a4:	e8 04 a4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f9a9:	83 c4 10             	add    esp,0x10
c001f9ac:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001f9b3:	75 14                	jne    c001f9c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f9b5:	e4 60                	in     al,0x60
c001f9b7:	3c 1c                	cmp    al,0x1c
c001f9b9:	74 04                	je     c001f9bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f9bb:	3c 5a                	cmp    al,0x5a
c001f9bd:	75 f6                	jne    c001f9b5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f9bf:	e4 60                	in     al,0x60
c001f9c1:	3c 5a                	cmp    al,0x5a
c001f9c3:	74 fa                	je     c001f9bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f9c5:	3c 1c                	cmp    al,0x1c
c001f9c7:	74 f6                	je     c001f9bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f9c9:	83 ec 0c             	sub    esp,0xc
c001f9cc:	68 7c 01 00 00       	push   0x17c
c001f9d1:	e8 7d a3 fe ff       	call   c0009d53 <malloc>
c001f9d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9d9:	89 c7                	mov    edi,eax
c001f9db:	e8 14 10 00 00       	call   c00209f4 <SATA::SATA()>
c001f9e0:	83 c4 10             	add    esp,0x10
c001f9e3:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001f9ea:	74 2d                	je     c001fa19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f9ec:	83 ec 0c             	sub    esp,0xc
c001f9ef:	68 6a 76 02 c0       	push   0xc002766a
c001f9f4:	e8 b4 a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f9f9:	83 c4 10             	add    esp,0x10
c001f9fc:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001fa03:	75 14                	jne    c001fa19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fa05:	e4 60                	in     al,0x60
c001fa07:	3c 5a                	cmp    al,0x5a
c001fa09:	74 04                	je     c001fa0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fa0b:	3c 1c                	cmp    al,0x1c
c001fa0d:	75 f6                	jne    c001fa05 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fa0f:	e4 60                	in     al,0x60
c001fa11:	3c 5a                	cmp    al,0x5a
c001fa13:	74 fa                	je     c001fa0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fa15:	3c 1c                	cmp    al,0x1c
c001fa17:	74 f6                	je     c001fa0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fa19:	50                   	push   eax
c001fa1a:	50                   	push   eax
c001fa1b:	57                   	push   edi
c001fa1c:	56                   	push   esi
c001fa1d:	e8 90 eb fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001fa22:	83 c4 10             	add    esp,0x10
c001fa25:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001fa2c:	74 2d                	je     c001fa5b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	68 7f 76 02 c0       	push   0xc002767f
c001fa36:	e8 72 a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001fa45:	75 14                	jne    c001fa5b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fa47:	e4 60                	in     al,0x60
c001fa49:	3c 1c                	cmp    al,0x1c
c001fa4b:	74 04                	je     c001fa51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa4d:	3c 5a                	cmp    al,0x5a
c001fa4f:	75 f6                	jne    c001fa47 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fa51:	e4 60                	in     al,0x60
c001fa53:	3c 5a                	cmp    al,0x5a
c001fa55:	74 fa                	je     c001fa51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa57:	3c 1c                	cmp    al,0x1c
c001fa59:	74 f6                	je     c001fa51 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa5b:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa5d:	56                   	push   esi
c001fa5e:	6a 00                	push   0x0
c001fa60:	53                   	push   ebx
c001fa61:	57                   	push   edi
c001fa62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c001fa6f:	74 69                	je     c001fada <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa71:	83 ec 0c             	sub    esp,0xc
c001fa74:	68 94 76 02 c0       	push   0xc0027694
c001fa79:	e8 2f a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001fa7e:	83 c4 10             	add    esp,0x10
c001fa81:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c001fa88:	75 50                	jne    c001fada <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa8a:	e4 60                	in     al,0x60
c001fa8c:	3c 1c                	cmp    al,0x1c
c001fa8e:	74 04                	je     c001fa94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa90:	3c 5a                	cmp    al,0x5a
c001fa92:	75 f6                	jne    c001fa8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fa94:	e4 60                	in     al,0x60
c001fa96:	3c 5a                	cmp    al,0x5a
c001fa98:	74 fa                	je     c001fa94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa9a:	3c 1c                	cmp    al,0x1c
c001fa9c:	74 f6                	je     c001fa94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa9e:	eb 3a                	jmp    c001fada <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001faa0:	83 f8 04             	cmp    eax,0x4
c001faa3:	75 35                	jne    c001fada <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001faa5:	50                   	push   eax
c001faa6:	53                   	push   ebx
c001faa7:	57                   	push   edi
c001faa8:	56                   	push   esi
c001faa9:	e8 58 fd ff ff       	call   c001f806 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001faae:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fab5:	e8 99 a2 fe ff       	call   c0009d53 <malloc>
c001faba:	89 04 24             	mov    DWORD PTR [esp],eax
c001fabd:	89 c7                	mov    edi,eax
c001fabf:	e8 a6 17 00 00       	call   c002126a <SATAPI::SATAPI()>
c001fac4:	5a                   	pop    edx
c001fac5:	59                   	pop    ecx
c001fac6:	57                   	push   edi
c001fac7:	56                   	push   esi
c001fac8:	e8 e5 ea fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001facd:	8b 07                	mov    eax,DWORD PTR [edi]
c001facf:	56                   	push   esi
c001fad0:	6a 00                	push   0x0
c001fad2:	53                   	push   ebx
c001fad3:	57                   	push   edi
c001fad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fad7:	83 c4 20             	add    esp,0x20
c001fada:	d1 ed                	shr    ebp,1
c001fadc:	43                   	inc    ebx
c001fadd:	83 fb 20             	cmp    ebx,0x20
c001fae0:	0f 85 70 fe ff ff    	jne    c001f956 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fae6:	83 c4 0c             	add    esp,0xc
c001fae9:	5b                   	pop    ebx
c001faea:	5e                   	pop    esi
c001faeb:	5f                   	pop    edi
c001faec:	5d                   	pop    ebp
c001faed:	c3                   	ret    

c001faee <SATABus::open(int, int, void*)>:
c001faee:	83 ec 14             	sub    esp,0x14
c001faf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001faf5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001fafb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fb01:	52                   	push   edx
c001fb02:	50                   	push   eax
c001fb03:	e8 04 fe ff ff       	call   c001f90c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fb08:	31 c0                	xor    eax,eax
c001fb0a:	83 c4 1c             	add    esp,0x1c
c001fb0d:	c3                   	ret    

c001fb0e <ATA::close(int, int, void*)>:
c001fb0e:	83 ec 0c             	sub    esp,0xc
c001fb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb1b:	85 c0                	test   eax,eax
c001fb1d:	74 0c                	je     c001fb2b <ATA::close(int, int, void*)+0x1d>
c001fb1f:	83 ec 0c             	sub    esp,0xc
c001fb22:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb24:	50                   	push   eax
c001fb25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb28:	83 c4 10             	add    esp,0x10
c001fb2b:	31 c0                	xor    eax,eax
c001fb2d:	83 c4 0c             	add    esp,0xc
c001fb30:	c3                   	ret    
c001fb31:	90                   	nop

c001fb32 <ATA::powerSaving(PowerSavingLevel)>:
c001fb32:	c3                   	ret    
c001fb33:	90                   	nop

c001fb34 <ATA::ATA()>:
c001fb34:	83 ec 0c             	sub    esp,0xc
c001fb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3b:	83 ec 04             	sub    esp,0x4
c001fb3e:	68 00 02 00 00       	push   0x200
c001fb43:	68 23 78 02 c0       	push   0xc0027823
c001fb48:	50                   	push   eax
c001fb49:	e8 9c ee fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb4e:	83 c4 10             	add    esp,0x10
c001fb51:	ba 2c 77 02 c0       	mov    edx,0xc002772c
c001fb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5a:	89 10                	mov    DWORD PTR [eax],edx
c001fb5c:	90                   	nop
c001fb5d:	83 c4 0c             	add    esp,0xc
c001fb60:	c3                   	ret    
c001fb61:	90                   	nop

c001fb62 <ATA::flush(bool)>:
c001fb62:	53                   	push   ebx
c001fb63:	83 ec 08             	sub    esp,0x8
c001fb66:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb6f:	19 c0                	sbb    eax,eax
c001fb71:	83 e0 fd             	and    eax,0xfffffffd
c001fb74:	05 ea 00 00 00       	add    eax,0xea
c001fb79:	50                   	push   eax
c001fb7a:	6a 07                	push   0x7
c001fb7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb83:	50                   	push   eax
c001fb84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb8a:	e8 3b f0 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb8f:	83 c4 0c             	add    esp,0xc
c001fb92:	6a 00                	push   0x0
c001fb94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb9b:	50                   	push   eax
c001fb9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fba2:	e8 bb fa ff ff       	call   c001f662 <IDE::polling(unsigned char, unsigned int)>
c001fba7:	83 c4 18             	add    esp,0x18
c001fbaa:	5b                   	pop    ebx
c001fbab:	c3                   	ret    

c001fbac <ATA::readyForCommand()>:
c001fbac:	56                   	push   esi
c001fbad:	53                   	push   ebx
c001fbae:	53                   	push   ebx
c001fbaf:	31 db                	xor    ebx,ebx
c001fbb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbb5:	51                   	push   ecx
c001fbb6:	6a 0c                	push   0xc
c001fbb8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fbbf:	50                   	push   eax
c001fbc0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fbc6:	e8 bf f0 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	a8 88                	test   al,0x88
c001fbd0:	74 1f                	je     c001fbf1 <ATA::readyForCommand()+0x45>
c001fbd2:	43                   	inc    ebx
c001fbd3:	83 fb 63             	cmp    ebx,0x63
c001fbd6:	7e dd                	jle    c001fbb5 <ATA::readyForCommand()+0x9>
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	6a 0a                	push   0xa
c001fbdd:	e8 76 94 ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fbeb:	75 c8                	jne    c001fbb5 <ATA::readyForCommand()+0x9>
c001fbed:	31 c0                	xor    eax,eax
c001fbef:	eb 02                	jmp    c001fbf3 <ATA::readyForCommand()+0x47>
c001fbf1:	b0 01                	mov    al,0x1
c001fbf3:	5a                   	pop    edx
c001fbf4:	5b                   	pop    ebx
c001fbf5:	5e                   	pop    esi
c001fbf6:	c3                   	ret    
c001fbf7:	90                   	nop

c001fbf8 <ATA::access(unsigned long long, int, void*, bool)>:
c001fbf8:	55                   	push   ebp
c001fbf9:	57                   	push   edi
c001fbfa:	56                   	push   esi
c001fbfb:	53                   	push   ebx
c001fbfc:	83 ec 38             	sub    esp,0x38
c001fbff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fc03:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fc07:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fc0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fc0f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fc13:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fc17:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fc1b:	68 d8 76 02 c0       	push   0xc00276d8
c001fc20:	e8 1a d4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fc25:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fc2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc2f:	83 c4 10             	add    esp,0x10
c001fc32:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fc38:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc3c:	c1 e0 06             	shl    eax,0x6
c001fc3f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fc47:	74 5d                	je     c001fca6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fc49:	89 fa                	mov    edx,edi
c001fc4b:	89 f0                	mov    eax,esi
c001fc4d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fc51:	c1 ea 1c             	shr    edx,0x1c
c001fc54:	89 d1                	mov    ecx,edx
c001fc56:	09 c1                	or     ecx,eax
c001fc58:	74 25                	je     c001fc7f <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fc5a:	31 ed                	xor    ebp,ebp
c001fc5c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fc63:	89 fa                	mov    edx,edi
c001fc65:	89 f0                	mov    eax,esi
c001fc67:	0f ad d0             	shrd   eax,edx,cl
c001fc6a:	d3 ea                	shr    edx,cl
c001fc6c:	f6 c1 20             	test   cl,0x20
c001fc6f:	74 02                	je     c001fc73 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fc71:	89 d0                	mov    eax,edx
c001fc73:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc77:	45                   	inc    ebp
c001fc78:	83 fd 06             	cmp    ebp,0x6
c001fc7b:	75 df                	jne    c001fc5c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fc7d:	eb 76                	jmp    c001fcf5 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fc7f:	89 f0                	mov    eax,esi
c001fc81:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc86:	89 fa                	mov    edx,edi
c001fc88:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc8f:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc93:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc98:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc9c:	c1 ee 18             	shr    esi,0x18
c001fc9f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fca4:	eb 56                	jmp    c001fcfc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fca6:	6a 00                	push   0x0
c001fca8:	6a 3f                	push   0x3f
c001fcaa:	57                   	push   edi
c001fcab:	56                   	push   esi
c001fcac:	e8 97 34 00 00       	call   c0023148 <__umoddi3>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	40                   	inc    eax
c001fcb5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fcb9:	6a 00                	push   0x0
c001fcbb:	68 f0 03 00 00       	push   0x3f0
c001fcc0:	57                   	push   edi
c001fcc1:	56                   	push   esi
c001fcc2:	e8 81 33 00 00       	call   c0023048 <__udivdi3>
c001fcc7:	83 c4 10             	add    esp,0x10
c001fcca:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fccf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fcd6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fcdb:	6a 00                	push   0x0
c001fcdd:	6a 3f                	push   0x3f
c001fcdf:	57                   	push   edi
c001fce0:	56                   	push   esi
c001fce1:	e8 62 33 00 00       	call   c0023048 <__udivdi3>
c001fce6:	83 c4 10             	add    esp,0x10
c001fce9:	89 c6                	mov    esi,eax
c001fceb:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fcf0:	83 e6 0f             	and    esi,0xf
c001fcf3:	eb 07                	jmp    c001fcfc <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fcf5:	31 f6                	xor    esi,esi
c001fcf7:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fcfc:	bf 01 00 00 00       	mov    edi,0x1
c001fd01:	50                   	push   eax
c001fd02:	6a 00                	push   0x0
c001fd04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd0b:	50                   	push   eax
c001fd0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd10:	e8 bd f0 ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c001fd15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd18:	e8 8f fe ff ff       	call   c001fbac <ATA::readyForCommand()>
c001fd1d:	83 c4 10             	add    esp,0x10
c001fd20:	84 c0                	test   al,al
c001fd22:	0f 84 bc 02 00 00    	je     c001ffe4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fd28:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fd2e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fd34:	c1 e0 04             	shl    eax,0x4
c001fd37:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fd3e:	09 c6                	or     esi,eax
c001fd40:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd45:	75 05                	jne    c001fd4c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fd47:	83 ce a0             	or     esi,0xffffffa0
c001fd4a:	eb 03                	jmp    c001fd4f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fd4c:	83 ce e0             	or     esi,0xffffffe0
c001fd4f:	89 f0                	mov    eax,esi
c001fd51:	0f b6 f0             	movzx  esi,al
c001fd54:	56                   	push   esi
c001fd55:	6a 06                	push   0x6
c001fd57:	51                   	push   ecx
c001fd58:	52                   	push   edx
c001fd59:	e8 6c ee ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5e:	83 c4 10             	add    esp,0x10
c001fd61:	6a 00                	push   0x0
c001fd63:	6a 01                	push   0x1
c001fd65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd6c:	50                   	push   eax
c001fd6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd73:	e8 52 ee ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd78:	83 c4 10             	add    esp,0x10
c001fd7b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fd80:	75 6e                	jne    c001fdf0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fd82:	6a 00                	push   0x0
c001fd84:	6a 08                	push   0x8
c001fd86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd8d:	50                   	push   eax
c001fd8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd94:	e8 31 ee ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd99:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd9e:	50                   	push   eax
c001fd9f:	6a 09                	push   0x9
c001fda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda8:	50                   	push   eax
c001fda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdaf:	e8 16 ee ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb4:	83 c4 20             	add    esp,0x20
c001fdb7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fdbc:	50                   	push   eax
c001fdbd:	6a 0a                	push   0xa
c001fdbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc6:	50                   	push   eax
c001fdc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdcd:	e8 f8 ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdd2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fdd7:	50                   	push   eax
c001fdd8:	6a 0b                	push   0xb
c001fdda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fde1:	50                   	push   eax
c001fde2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde8:	e8 dd ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fded:	83 c4 20             	add    esp,0x20
c001fdf0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fdf5:	50                   	push   eax
c001fdf6:	6a 02                	push   0x2
c001fdf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdff:	50                   	push   eax
c001fe00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe06:	e8 bf ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe0b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fe10:	50                   	push   eax
c001fe11:	6a 03                	push   0x3
c001fe13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe1a:	50                   	push   eax
c001fe1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe21:	e8 a4 ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe26:	83 c4 20             	add    esp,0x20
c001fe29:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fe2e:	50                   	push   eax
c001fe2f:	6a 04                	push   0x4
c001fe31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe38:	50                   	push   eax
c001fe39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe3f:	e8 86 ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe44:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fe49:	50                   	push   eax
c001fe4a:	6a 05                	push   0x5
c001fe4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe53:	50                   	push   eax
c001fe54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe5a:	e8 6b ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe5f:	83 c4 20             	add    esp,0x20
c001fe62:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fe67:	0f 94 c0             	sete   al
c001fe6a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe6f:	74 09                	je     c001fe7a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fe71:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fe78:	eb 07                	jmp    c001fe81 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fe7a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fe81:	0f b6 c0             	movzx  eax,al
c001fe84:	50                   	push   eax
c001fe85:	6a 07                	push   0x7
c001fe87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe8e:	50                   	push   eax
c001fe8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe95:	e8 30 ed ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe9a:	c7 04 24 e5 76 02 c0 	mov    DWORD PTR [esp],0xc00276e5
c001fea1:	e8 99 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fea6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001feaa:	83 c4 10             	add    esp,0x10
c001fead:	85 f6                	test   esi,esi
c001feaf:	0f 84 f7 00 00 00    	je     c001ffac <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	68 e8 76 02 c0       	push   0xc00276e8
c001febd:	e8 7d d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fec2:	83 c4 0c             	add    esp,0xc
c001fec5:	6a 01                	push   0x1
c001fec7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fece:	50                   	push   eax
c001fecf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fed5:	e8 88 f7 ff ff       	call   c001f662 <IDE::polling(unsigned char, unsigned int)>
c001feda:	c7 04 24 eb 76 02 c0 	mov    DWORD PTR [esp],0xc00276eb
c001fee1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fee5:	e8 55 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001feea:	83 c4 10             	add    esp,0x10
c001feed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fef1:	84 c0                	test   al,al
c001fef3:	74 2b                	je     c001ff20 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001fef5:	0f b6 f8             	movzx  edi,al
c001fef8:	57                   	push   edi
c001fef9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ff00:	50                   	push   eax
c001ff01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff08:	50                   	push   eax
c001ff09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff0f:	e8 9e f6 ff ff       	call   c001f5b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ff14:	c7 04 24 ee 76 02 c0 	mov    DWORD PTR [esp],0xc00276ee
c001ff1b:	e9 bc 00 00 00       	jmp    c001ffdc <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ff20:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ff25:	74 50                	je     c001ff77 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001ff27:	83 ec 0c             	sub    esp,0xc
c001ff2a:	31 ed                	xor    ebp,ebp
c001ff2c:	68 f9 76 02 c0       	push   0xc00276f9
c001ff31:	e8 09 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ff36:	83 c4 10             	add    esp,0x10
c001ff39:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ff3d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ff41:	50                   	push   eax
c001ff42:	50                   	push   eax
c001ff43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff4a:	50                   	push   eax
c001ff4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff51:	e8 62 ec ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c001ff56:	89 c2                	mov    edx,eax
c001ff58:	89 f8                	mov    eax,edi
c001ff5a:	66 ef                	out    dx,ax
c001ff5c:	45                   	inc    ebp
c001ff5d:	83 c4 10             	add    esp,0x10
c001ff60:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ff66:	75 d1                	jne    c001ff39 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	68 fc 76 02 c0       	push   0xc00276fc
c001ff70:	e8 ca d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ff75:	eb 24                	jmp    c001ff9b <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ff77:	51                   	push   ecx
c001ff78:	51                   	push   ecx
c001ff79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff80:	50                   	push   eax
c001ff81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff87:	e8 2c ec ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c001ff8c:	b9 00 01 00 00       	mov    ecx,0x100
c001ff91:	89 c2                	mov    edx,eax
c001ff93:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff97:	fc                   	cld    
c001ff98:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff9b:	83 c4 10             	add    esp,0x10
c001ff9e:	4e                   	dec    esi
c001ff9f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ffa7:	e9 01 ff ff ff       	jmp    c001fead <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ffac:	31 ff                	xor    edi,edi
c001ffae:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ffb3:	74 2f                	je     c001ffe4 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	68 ff 76 02 c0       	push   0xc00276ff
c001ffbd:	e8 7d d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ffc2:	58                   	pop    eax
c001ffc3:	31 c0                	xor    eax,eax
c001ffc5:	5a                   	pop    edx
c001ffc6:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ffcb:	0f 94 c0             	sete   al
c001ffce:	50                   	push   eax
c001ffcf:	53                   	push   ebx
c001ffd0:	e8 8d fb ff ff       	call   c001fb62 <ATA::flush(bool)>
c001ffd5:	c7 04 24 02 77 02 c0 	mov    DWORD PTR [esp],0xc0027702
c001ffdc:	e8 5e d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	83 c4 2c             	add    esp,0x2c
c001ffe7:	89 f8                	mov    eax,edi
c001ffe9:	5b                   	pop    ebx
c001ffea:	5e                   	pop    esi
c001ffeb:	5f                   	pop    edi
c001ffec:	5d                   	pop    ebp
c001ffed:	c3                   	ret    

c001ffee <ATA::read(unsigned long long, int, void*)>:
c001ffee:	57                   	push   edi
c001ffef:	b8 04 00 00 00       	mov    eax,0x4
c001fff4:	56                   	push   esi
c001fff5:	53                   	push   ebx
c001fff6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fffa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fffe:	8d 7a ff             	lea    edi,[edx-0x1]
c0020001:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020005:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020009:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002000f:	77 25                	ja     c0020036 <ATA::read(unsigned long long, int, void*)+0x48>
c0020011:	b8 06 00 00 00       	mov    eax,0x6
c0020016:	85 f6                	test   esi,esi
c0020018:	74 1c                	je     c0020036 <ATA::read(unsigned long long, int, void*)+0x48>
c002001a:	50                   	push   eax
c002001b:	50                   	push   eax
c002001c:	6a 00                	push   0x0
c002001e:	56                   	push   esi
c002001f:	52                   	push   edx
c0020020:	53                   	push   ebx
c0020021:	51                   	push   ecx
c0020022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020026:	e8 cd fb ff ff       	call   c001fbf8 <ATA::access(unsigned long long, int, void*, bool)>
c002002b:	83 c4 20             	add    esp,0x20
c002002e:	85 c0                	test   eax,eax
c0020030:	0f 95 c0             	setne  al
c0020033:	0f b6 c0             	movzx  eax,al
c0020036:	5b                   	pop    ebx
c0020037:	5e                   	pop    esi
c0020038:	5f                   	pop    edi
c0020039:	c3                   	ret    

c002003a <ATA::write(unsigned long long, int, void*)>:
c002003a:	55                   	push   ebp
c002003b:	57                   	push   edi
c002003c:	56                   	push   esi
c002003d:	53                   	push   ebx
c002003e:	83 ec 18             	sub    esp,0x18
c0020041:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020045:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020049:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002004d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020051:	68 05 77 02 c0       	push   0xc0027705
c0020056:	e8 e4 cf fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002005b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002005e:	83 c4 10             	add    esp,0x10
c0020061:	b8 04 00 00 00       	mov    eax,0x4
c0020066:	81 fa fe 00 00 00    	cmp    edx,0xfe
c002006c:	77 25                	ja     c0020093 <ATA::write(unsigned long long, int, void*)+0x59>
c002006e:	b8 06 00 00 00       	mov    eax,0x6
c0020073:	85 f6                	test   esi,esi
c0020075:	74 1c                	je     c0020093 <ATA::write(unsigned long long, int, void*)+0x59>
c0020077:	50                   	push   eax
c0020078:	50                   	push   eax
c0020079:	6a 01                	push   0x1
c002007b:	56                   	push   esi
c002007c:	53                   	push   ebx
c002007d:	55                   	push   ebp
c002007e:	57                   	push   edi
c002007f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020083:	e8 70 fb ff ff       	call   c001fbf8 <ATA::access(unsigned long long, int, void*, bool)>
c0020088:	83 c4 20             	add    esp,0x20
c002008b:	85 c0                	test   eax,eax
c002008d:	0f 95 c0             	setne  al
c0020090:	0f b6 c0             	movzx  eax,al
c0020093:	83 c4 0c             	add    esp,0xc
c0020096:	5b                   	pop    ebx
c0020097:	5e                   	pop    esi
c0020098:	5f                   	pop    edi
c0020099:	5d                   	pop    ebp
c002009a:	c3                   	ret    
c002009b:	90                   	nop

c002009c <ATA::detectCHS()>:
c002009c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200a0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00200a6:	c1 e0 06             	shl    eax,0x6
c00200a9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00200af:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00200b9:	c7 44 24 04 11 77 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027711
c00200c1:	e9 3b 4f ff ff       	jmp    c0015001 <Krnl::panic(char const*)>

c00200c6 <ATA::open(int, int, void*)>:
c00200c6:	53                   	push   ebx
c00200c7:	83 ec 08             	sub    esp,0x8
c00200ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00200d6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200dc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200e2:	c1 e0 06             	shl    eax,0x6
c00200e5:	01 d0                	add    eax,edx
c00200e7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00200ee:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00200f4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00200fb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020105:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002010b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020112:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020119:	75 0c                	jne    c0020127 <ATA::open(int, int, void*)+0x61>
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	53                   	push   ebx
c002011f:	e8 78 ff ff ff       	call   c002009c <ATA::detectCHS()>
c0020124:	83 c4 10             	add    esp,0x10
c0020127:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002012d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020133:	c1 e0 06             	shl    eax,0x6
c0020136:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002013d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020147:	d1 e8                	shr    eax,1
c0020149:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002014f:	6a 04                	push   0x4
c0020151:	6a 0c                	push   0xc
c0020153:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002015a:	50                   	push   eax
c002015b:	52                   	push   edx
c002015c:	e8 69 ea ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020161:	90                   	nop
c0020162:	90                   	nop
c0020163:	6a 00                	push   0x0
c0020165:	6a 0c                	push   0xc
c0020167:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002016e:	50                   	push   eax
c002016f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020175:	e8 50 ea ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c002017a:	83 c4 14             	add    esp,0x14
c002017d:	53                   	push   ebx
c002017e:	e8 cf e8 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020183:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020186:	e8 1f 09 ff ff       	call   c0010aaa <createPartitionsForDisk(PhysicalDisk*)>
c002018b:	31 c0                	xor    eax,eax
c002018d:	83 c4 18             	add    esp,0x18
c0020190:	5b                   	pop    ebx
c0020191:	c3                   	ret    

c0020192 <ATAPI::write(unsigned long long, int, void*)>:
c0020192:	b8 03 00 00 00       	mov    eax,0x3
c0020197:	c3                   	ret    

c0020198 <ATAPI::close(int, int, void*)>:
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00201a5:	85 c0                	test   eax,eax
c00201a7:	74 0c                	je     c00201b5 <ATAPI::close(int, int, void*)+0x1d>
c00201a9:	83 ec 0c             	sub    esp,0xc
c00201ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00201ae:	50                   	push   eax
c00201af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00201b2:	83 c4 10             	add    esp,0x10
c00201b5:	31 c0                	xor    eax,eax
c00201b7:	83 c4 0c             	add    esp,0xc
c00201ba:	c3                   	ret    
c00201bb:	90                   	nop

c00201bc <ATAPI::ATAPI()>:
c00201bc:	83 ec 0c             	sub    esp,0xc
c00201bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c3:	83 ec 04             	sub    esp,0x4
c00201c6:	68 00 08 00 00       	push   0x800
c00201cb:	68 fd 79 02 c0       	push   0xc00279fd
c00201d0:	50                   	push   eax
c00201d1:	e8 14 e8 fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c00201d6:	83 c4 10             	add    esp,0x10
c00201d9:	ba 90 77 02 c0       	mov    edx,0xc0027790
c00201de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e2:	89 10                	mov    DWORD PTR [eax],edx
c00201e4:	90                   	nop
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	c3                   	ret    
c00201e9:	90                   	nop

c00201ea <ATAPI::readyForCommand()>:
c00201ea:	56                   	push   esi
c00201eb:	53                   	push   ebx
c00201ec:	53                   	push   ebx
c00201ed:	31 db                	xor    ebx,ebx
c00201ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00201f3:	51                   	push   ecx
c00201f4:	6a 0c                	push   0xc
c00201f6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00201fd:	50                   	push   eax
c00201fe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020204:	e8 81 ea ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	a8 88                	test   al,0x88
c002020e:	74 25                	je     c0020235 <ATAPI::readyForCommand()+0x4b>
c0020210:	43                   	inc    ebx
c0020211:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020217:	7e da                	jle    c00201f3 <ATAPI::readyForCommand()+0x9>
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	68 5e 01 00 00       	push   0x15e
c0020221:	e8 32 8e ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c0020226:	83 c4 10             	add    esp,0x10
c0020229:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002022f:	75 c2                	jne    c00201f3 <ATAPI::readyForCommand()+0x9>
c0020231:	31 c0                	xor    eax,eax
c0020233:	eb 02                	jmp    c0020237 <ATAPI::readyForCommand()+0x4d>
c0020235:	b0 01                	mov    al,0x1
c0020237:	5a                   	pop    edx
c0020238:	5b                   	pop    ebx
c0020239:	5e                   	pop    esi
c002023a:	c3                   	ret    
c002023b:	90                   	nop

c002023c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002023c:	55                   	push   ebp
c002023d:	57                   	push   edi
c002023e:	56                   	push   esi
c002023f:	53                   	push   ebx
c0020240:	83 ec 20             	sub    esp,0x20
c0020243:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020247:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002024b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002024f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020253:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020257:	6a 01                	push   0x1
c0020259:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020260:	50                   	push   eax
c0020261:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020267:	e8 66 eb ff ff       	call   c001edd2 <IDE::enableIRQs(unsigned char, bool)>
c002026c:	5e                   	pop    esi
c002026d:	58                   	pop    eax
c002026e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020275:	50                   	push   eax
c0020276:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002027c:	e8 23 e9 ff ff       	call   c001eba4 <IDE::prepareInterrupt(unsigned char)>
c0020281:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020284:	e8 61 ff ff ff       	call   c00201ea <ATAPI::readyForCommand()>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	84 c0                	test   al,al
c002028e:	75 0a                	jne    c002029a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020290:	bb 01 00 00 00       	mov    ebx,0x1
c0020295:	e9 57 02 00 00       	jmp    c00204f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002029a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00202a0:	c1 e0 04             	shl    eax,0x4
c00202a3:	0f b6 c0             	movzx  eax,al
c00202a6:	50                   	push   eax
c00202a7:	6a 06                	push   0x6
c00202a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202b0:	50                   	push   eax
c00202b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202b7:	e8 0e e9 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202bc:	6a 00                	push   0x0
c00202be:	6a 01                	push   0x1
c00202c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202c7:	50                   	push   eax
c00202c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202ce:	e8 f7 e8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202d3:	83 c4 20             	add    esp,0x20
c00202d6:	0f b6 c3             	movzx  eax,bl
c00202d9:	0f b6 df             	movzx  ebx,bh
c00202dc:	50                   	push   eax
c00202dd:	6a 04                	push   0x4
c00202df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202e6:	50                   	push   eax
c00202e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202ed:	e8 d8 e8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202f2:	53                   	push   ebx
c00202f3:	6a 05                	push   0x5
c00202f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202fc:	50                   	push   eax
c00202fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020303:	e8 c2 e8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020308:	83 c4 20             	add    esp,0x20
c002030b:	68 a0 00 00 00       	push   0xa0
c0020310:	6a 07                	push   0x7
c0020312:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020319:	50                   	push   eax
c002031a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020320:	e8 a5 e8 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020325:	83 c4 0c             	add    esp,0xc
c0020328:	6a 01                	push   0x1
c002032a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020331:	50                   	push   eax
c0020332:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020338:	e8 25 f3 ff ff       	call   c001f662 <IDE::polling(unsigned char, unsigned int)>
c002033d:	83 c4 10             	add    esp,0x10
c0020340:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020346:	84 c0                	test   al,al
c0020348:	74 23                	je     c002036d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002034a:	0f b6 d8             	movzx  ebx,al
c002034d:	0f b6 d2             	movzx  edx,dl
c0020350:	53                   	push   ebx
c0020351:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020358:	50                   	push   eax
c0020359:	52                   	push   edx
c002035a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020360:	e8 4d f2 ff ff       	call   c001f5b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	e9 84 01 00 00       	jmp    c00204f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002036d:	0f b6 d2             	movzx  edx,dl
c0020370:	53                   	push   ebx
c0020371:	53                   	push   ebx
c0020372:	52                   	push   edx
c0020373:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020379:	e8 3a e8 ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c002037e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020382:	b9 06 00 00 00       	mov    ecx,0x6
c0020387:	89 c2                	mov    edx,eax
c0020389:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002038c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020390:	83 c4 10             	add    esp,0x10
c0020393:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020399:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00203a0:	85 db                	test   ebx,ebx
c00203a2:	0f 84 ec 00 00 00    	je     c0020494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00203a8:	51                   	push   ecx
c00203a9:	51                   	push   ecx
c00203aa:	52                   	push   edx
c00203ab:	50                   	push   eax
c00203ac:	e8 87 e9 ff ff       	call   c001ed38 <IDE::waitInterrupt(unsigned char)>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	84 c0                	test   al,al
c00203b6:	0f 84 d4 fe ff ff    	je     c0020290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00203bc:	56                   	push   esi
c00203bd:	56                   	push   esi
c00203be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203c5:	50                   	push   eax
c00203c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203cc:	e8 d3 e7 ff ff       	call   c001eba4 <IDE::prepareInterrupt(unsigned char)>
c00203d1:	83 c4 0c             	add    esp,0xc
c00203d4:	6a 04                	push   0x4
c00203d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203dd:	50                   	push   eax
c00203de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203e4:	e8 a1 e8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c00203e9:	83 c4 0c             	add    esp,0xc
c00203ec:	89 c6                	mov    esi,eax
c00203ee:	6a 05                	push   0x5
c00203f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203f7:	50                   	push   eax
c00203f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203fe:	e8 87 e8 ff ff       	call   c001ec8a <IDE::read(unsigned char, unsigned char)>
c0020403:	89 f1                	mov    ecx,esi
c0020405:	0f b6 c0             	movzx  eax,al
c0020408:	0f b6 f1             	movzx  esi,cl
c002040b:	c1 e0 08             	shl    eax,0x8
c002040e:	09 c6                	or     esi,eax
c0020410:	d1 fe                	sar    esi,1
c0020412:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020416:	83 c4 10             	add    esp,0x10
c0020419:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002041e:	74 41                	je     c0020461 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020420:	31 c9                	xor    ecx,ecx
c0020422:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020428:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002042f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020433:	75 0a                	jne    c002043f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020435:	01 c9                	add    ecx,ecx
c0020437:	01 cd                	add    ebp,ecx
c0020439:	4b                   	dec    ebx
c002043a:	e9 54 ff ff ff       	jmp    c0020393 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002043f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020444:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020448:	51                   	push   ecx
c0020449:	51                   	push   ecx
c002044a:	52                   	push   edx
c002044b:	50                   	push   eax
c002044c:	e8 67 e7 ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c0020451:	89 c2                	mov    edx,eax
c0020453:	89 f0                	mov    eax,esi
c0020455:	66 ef                	out    dx,ax
c0020457:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	41                   	inc    ecx
c002045f:	eb c1                	jmp    c0020422 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020461:	31 f6                	xor    esi,esi
c0020463:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020469:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020470:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020474:	75 06                	jne    c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020476:	01 f6                	add    esi,esi
c0020478:	01 f5                	add    ebp,esi
c002047a:	eb bd                	jmp    c0020439 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002047c:	51                   	push   ecx
c002047d:	51                   	push   ecx
c002047e:	52                   	push   edx
c002047f:	50                   	push   eax
c0020480:	e8 33 e7 ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c0020485:	89 c2                	mov    edx,eax
c0020487:	66 ed                	in     ax,dx
c0020489:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002048e:	83 c4 10             	add    esp,0x10
c0020491:	46                   	inc    esi
c0020492:	eb cf                	jmp    c0020463 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020494:	51                   	push   ecx
c0020495:	51                   	push   ecx
c0020496:	52                   	push   edx
c0020497:	50                   	push   eax
c0020498:	e8 9b e8 ff ff       	call   c001ed38 <IDE::waitInterrupt(unsigned char)>
c002049d:	83 c4 10             	add    esp,0x10
c00204a0:	84 c0                	test   al,al
c00204a2:	0f 84 e8 fd ff ff    	je     c0020290 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00204a8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00204ad:	52                   	push   edx
c00204ae:	52                   	push   edx
c00204af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b6:	50                   	push   eax
c00204b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204bd:	e8 e2 e6 ff ff       	call   c001eba4 <IDE::prepareInterrupt(unsigned char)>
c00204c2:	83 c4 10             	add    esp,0x10
c00204c5:	50                   	push   eax
c00204c6:	50                   	push   eax
c00204c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204ce:	50                   	push   eax
c00204cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204d5:	e8 de e6 ff ff       	call   c001ebb8 <IDE::getBase(unsigned char)>
c00204da:	8d 50 07             	lea    edx,[eax+0x7]
c00204dd:	ec                   	in     al,dx
c00204de:	83 c4 10             	add    esp,0x10
c00204e1:	a8 88                	test   al,0x88
c00204e3:	74 0a                	je     c00204ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00204e5:	4b                   	dec    ebx
c00204e6:	75 dd                	jne    c00204c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00204e8:	bb 02 00 00 00       	mov    ebx,0x2
c00204ed:	eb 02                	jmp    c00204f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204ef:	31 db                	xor    ebx,ebx
c00204f1:	83 c4 1c             	add    esp,0x1c
c00204f4:	89 d8                	mov    eax,ebx
c00204f6:	5b                   	pop    ebx
c00204f7:	5e                   	pop    esi
c00204f8:	5f                   	pop    edi
c00204f9:	5d                   	pop    ebp
c00204fa:	c3                   	ret    
c00204fb:	90                   	nop

c00204fc <ATAPI::diskRemoved()>:
c00204fc:	53                   	push   ebx
c00204fd:	83 ec 14             	sub    esp,0x14
c0020500:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020504:	68 09 7a 02 c0       	push   0xc0027a09
c0020509:	e8 31 cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002050e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020515:	c7 04 24 5c 77 02 c0 	mov    DWORD PTR [esp],0xc002775c
c002051c:	e8 1e cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0020521:	58                   	pop    eax
c0020522:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020528:	e8 fd 02 ff ff       	call   c001082a <LogicalDisk::unmount()>
c002052d:	c7 04 24 6b 77 02 c0 	mov    DWORD PTR [esp],0xc002776b
c0020534:	e8 06 cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0020539:	5a                   	pop    edx
c002053a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020540:	e8 eb 0c ff ff       	call   c0011230 <VCache::writeWriteBuffer()>
c0020545:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002054b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002054f:	83 c4 18             	add    esp,0x18
c0020552:	5b                   	pop    ebx
c0020553:	e9 c8 0c ff ff       	jmp    c0011220 <VCache::invalidateReadBuffer()>

c0020558 <ATAPI::eject()>:
c0020558:	57                   	push   edi
c0020559:	b9 03 00 00 00       	mov    ecx,0x3
c002055e:	53                   	push   ebx
c002055f:	83 ec 14             	sub    esp,0x14
c0020562:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020566:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002056a:	fc                   	cld    
c002056b:	31 c0                	xor    eax,eax
c002056d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002056f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020574:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020579:	50                   	push   eax
c002057a:	50                   	push   eax
c002057b:	6a 00                	push   0x0
c002057d:	6a 00                	push   0x0
c002057f:	6a 00                	push   0x0
c0020581:	6a 02                	push   0x2
c0020583:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020587:	50                   	push   eax
c0020588:	53                   	push   ebx
c0020589:	e8 ae fc ff ff       	call   c002023c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002058e:	83 c4 14             	add    esp,0x14
c0020591:	53                   	push   ebx
c0020592:	e8 65 ff ff ff       	call   c00204fc <ATAPI::diskRemoved()>
c0020597:	83 c4 24             	add    esp,0x24
c002059a:	31 c0                	xor    eax,eax
c002059c:	5b                   	pop    ebx
c002059d:	5f                   	pop    edi
c002059e:	c3                   	ret    
c002059f:	90                   	nop

c00205a0 <ATAPI::diskInserted()>:
c00205a0:	83 ec 18             	sub    esp,0x18
c00205a3:	68 20 7a 02 c0       	push   0xc0027a20
c00205a8:	e8 92 ca fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00205ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205b1:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00205b8:	83 c4 1c             	add    esp,0x1c
c00205bb:	c3                   	ret    

c00205bc <ATAPI::detectMedia()>:
c00205bc:	56                   	push   esi
c00205bd:	53                   	push   ebx
c00205be:	83 ec 28             	sub    esp,0x28
c00205c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00205c5:	6a 0c                	push   0xc
c00205c7:	6a 00                	push   0x0
c00205c9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00205cd:	56                   	push   esi
c00205ce:	e8 a9 00 fe ff       	call   c000067c <memset>
c00205d3:	58                   	pop    eax
c00205d4:	5a                   	pop    edx
c00205d5:	6a 00                	push   0x0
c00205d7:	6a 00                	push   0x0
c00205d9:	6a 00                	push   0x0
c00205db:	6a 00                	push   0x0
c00205dd:	56                   	push   esi
c00205de:	53                   	push   ebx
c00205df:	e8 58 fc ff ff       	call   c002023c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205e4:	83 c4 1c             	add    esp,0x1c
c00205e7:	6a 0c                	push   0xc
c00205e9:	6a 00                	push   0x0
c00205eb:	56                   	push   esi
c00205ec:	e8 8b 00 fe ff       	call   c000067c <memset>
c00205f1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00205f6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00205fb:	59                   	pop    ecx
c00205fc:	58                   	pop    eax
c00205fd:	6a 01                	push   0x1
c00205ff:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020603:	50                   	push   eax
c0020604:	6a 00                	push   0x0
c0020606:	6a 12                	push   0x12
c0020608:	56                   	push   esi
c0020609:	53                   	push   ebx
c002060a:	e8 2d fc ff ff       	call   c002023c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002060f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020613:	83 c4 20             	add    esp,0x20
c0020616:	83 e0 7f             	and    eax,0x7f
c0020619:	3c 70                	cmp    al,0x70
c002061b:	74 15                	je     c0020632 <ATAPI::detectMedia()+0x76>
c002061d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020624:	75 0c                	jne    c0020632 <ATAPI::detectMedia()+0x76>
c0020626:	83 ec 0c             	sub    esp,0xc
c0020629:	53                   	push   ebx
c002062a:	e8 71 ff ff ff       	call   c00205a0 <ATAPI::diskInserted()>
c002062f:	83 c4 10             	add    esp,0x10
c0020632:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020636:	83 e0 0f             	and    eax,0xf
c0020639:	3c 02                	cmp    al,0x2
c002063b:	75 1b                	jne    c0020658 <ATAPI::detectMedia()+0x9c>
c002063d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020642:	75 2d                	jne    c0020671 <ATAPI::detectMedia()+0xb5>
c0020644:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002064b:	74 24                	je     c0020671 <ATAPI::detectMedia()+0xb5>
c002064d:	83 ec 0c             	sub    esp,0xc
c0020650:	53                   	push   ebx
c0020651:	e8 a6 fe ff ff       	call   c00204fc <ATAPI::diskRemoved()>
c0020656:	eb 16                	jmp    c002066e <ATAPI::detectMedia()+0xb2>
c0020658:	84 c0                	test   al,al
c002065a:	75 15                	jne    c0020671 <ATAPI::detectMedia()+0xb5>
c002065c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020663:	75 0c                	jne    c0020671 <ATAPI::detectMedia()+0xb5>
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	53                   	push   ebx
c0020669:	e8 32 ff ff ff       	call   c00205a0 <ATAPI::diskInserted()>
c002066e:	83 c4 10             	add    esp,0x10
c0020671:	83 c4 24             	add    esp,0x24
c0020674:	5b                   	pop    ebx
c0020675:	5e                   	pop    esi
c0020676:	c3                   	ret    
c0020677:	90                   	nop

c0020678 <ATAPI::open(int, int, void*)>:
c0020678:	56                   	push   esi
c0020679:	53                   	push   ebx
c002067a:	50                   	push   eax
c002067b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002067f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020683:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020687:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002068d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020693:	c1 e0 06             	shl    eax,0x6
c0020696:	01 d0                	add    eax,edx
c0020698:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002069f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00206a5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00206ac:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00206b6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00206bc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00206c3:	6a 04                	push   0x4
c00206c5:	6a 0c                	push   0xc
c00206c7:	51                   	push   ecx
c00206c8:	52                   	push   edx
c00206c9:	e8 fc e4 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206ce:	90                   	nop
c00206cf:	90                   	nop
c00206d0:	6a 00                	push   0x0
c00206d2:	6a 0c                	push   0xc
c00206d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206db:	50                   	push   eax
c00206dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206e2:	e8 e3 e4 ff ff       	call   c001ebca <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206e7:	83 c4 14             	add    esp,0x14
c00206ea:	68 74 01 00 00       	push   0x174
c00206ef:	e8 5f 96 fe ff       	call   c0009d53 <malloc>
c00206f4:	83 c4 0c             	add    esp,0xc
c00206f7:	89 c6                	mov    esi,eax
c00206f9:	6a 00                	push   0x0
c00206fb:	68 ff ff ff 7f       	push   0x7fffffff
c0020700:	6a 00                	push   0x0
c0020702:	6a 00                	push   0x0
c0020704:	53                   	push   ebx
c0020705:	68 e8 7a 02 c0       	push   0xc0027ae8
c002070a:	50                   	push   eax
c002070b:	e8 26 ff fe ff       	call   c0010636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020710:	83 c4 14             	add    esp,0x14
c0020713:	56                   	push   esi
c0020714:	e8 d3 ff fe ff       	call   c00106ec <LogicalDisk::assignDriveLetter()>
c0020719:	5a                   	pop    edx
c002071a:	0f be c0             	movsx  eax,al
c002071d:	59                   	pop    ecx
c002071e:	50                   	push   eax
c002071f:	68 79 77 02 c0       	push   0xc0027779
c0020724:	e8 16 c9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0020729:	58                   	pop    eax
c002072a:	5a                   	pop    edx
c002072b:	56                   	push   esi
c002072c:	53                   	push   ebx
c002072d:	e8 80 de fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c0020732:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020738:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002073b:	e8 12 e3 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020740:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020747:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002074a:	e8 6d fe ff ff       	call   c00205bc <ATAPI::detectMedia()>
c002074f:	83 c4 14             	add    esp,0x14
c0020752:	31 c0                	xor    eax,eax
c0020754:	5b                   	pop    ebx
c0020755:	5e                   	pop    esi
c0020756:	c3                   	ret    
c0020757:	90                   	nop

c0020758 <ATAPI::read(unsigned long long, int, void*)>:
c0020758:	55                   	push   ebp
c0020759:	57                   	push   edi
c002075a:	56                   	push   esi
c002075b:	53                   	push   ebx
c002075c:	83 ec 1c             	sub    esp,0x1c
c002075f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020763:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020767:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002076b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020772:	74 41                	je     c00207b5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020774:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020778:	b9 03 00 00 00       	mov    ecx,0x3
c002077d:	fc                   	cld    
c002077e:	31 c0                	xor    eax,eax
c0020780:	86 fb                	xchg   bl,bh
c0020782:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020784:	c1 c3 10             	rol    ebx,0x10
c0020787:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002078c:	89 e8                	mov    eax,ebp
c002078e:	86 fb                	xchg   bl,bh
c0020790:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020794:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020798:	50                   	push   eax
c0020799:	50                   	push   eax
c002079a:	55                   	push   ebp
c002079b:	c1 e5 0b             	shl    ebp,0xb
c002079e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00207a2:	6a 00                	push   0x0
c00207a4:	55                   	push   ebp
c00207a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00207a9:	50                   	push   eax
c00207aa:	56                   	push   esi
c00207ab:	e8 8c fa ff ff       	call   c002023c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207b0:	83 c4 20             	add    esp,0x20
c00207b3:	eb 1a                	jmp    c00207cf <ATAPI::read(unsigned long long, int, void*)+0x77>
c00207b5:	83 ec 0c             	sub    esp,0xc
c00207b8:	56                   	push   esi
c00207b9:	e8 fe fd ff ff       	call   c00205bc <ATAPI::detectMedia()>
c00207be:	83 c4 10             	add    esp,0x10
c00207c1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00207c8:	75 aa                	jne    c0020774 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00207ca:	b8 02 00 00 00       	mov    eax,0x2
c00207cf:	83 c4 1c             	add    esp,0x1c
c00207d2:	5b                   	pop    ebx
c00207d3:	5e                   	pop    esi
c00207d4:	5f                   	pop    edi
c00207d5:	5d                   	pop    ebp
c00207d6:	c3                   	ret    
c00207d7:	90                   	nop

c00207d8 <SATA::close(int, int, void*)>:
c00207d8:	83 ec 0c             	sub    esp,0xc
c00207db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00207e5:	85 c0                	test   eax,eax
c00207e7:	74 0c                	je     c00207f5 <SATA::close(int, int, void*)+0x1d>
c00207e9:	83 ec 0c             	sub    esp,0xc
c00207ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00207ee:	50                   	push   eax
c00207ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00207f2:	83 c4 10             	add    esp,0x10
c00207f5:	31 c0                	xor    eax,eax
c00207f7:	83 c4 0c             	add    esp,0xc
c00207fa:	c3                   	ret    
c00207fb:	90                   	nop

c00207fc <SATA::powerSaving(PowerSavingLevel)>:
c00207fc:	c3                   	ret    
c00207fd:	90                   	nop

c00207fe <SATA::open(int, int, void*)>:
c00207fe:	56                   	push   esi
c00207ff:	53                   	push   ebx
c0020800:	51                   	push   ecx
c0020801:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020805:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002080c:	74 2d                	je     c002083b <SATA::open(int, int, void*)+0x3d>
c002080e:	83 ec 0c             	sub    esp,0xc
c0020811:	68 c0 77 02 c0       	push   0xc00277c0
c0020816:	e8 92 95 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020825:	75 14                	jne    c002083b <SATA::open(int, int, void*)+0x3d>
c0020827:	e4 60                	in     al,0x60
c0020829:	3c 5a                	cmp    al,0x5a
c002082b:	74 04                	je     c0020831 <SATA::open(int, int, void*)+0x33>
c002082d:	3c 1c                	cmp    al,0x1c
c002082f:	75 f6                	jne    c0020827 <SATA::open(int, int, void*)+0x29>
c0020831:	e4 60                	in     al,0x60
c0020833:	3c 5a                	cmp    al,0x5a
c0020835:	74 fa                	je     c0020831 <SATA::open(int, int, void*)+0x33>
c0020837:	3c 1c                	cmp    al,0x1c
c0020839:	74 f6                	je     c0020831 <SATA::open(int, int, void*)+0x33>
c002083b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002083f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020849:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002084f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020859:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002085d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020867:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002086d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020874:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002087b:	74 2d                	je     c00208aa <SATA::open(int, int, void*)+0xac>
c002087d:	83 ec 0c             	sub    esp,0xc
c0020880:	68 cd 77 02 c0       	push   0xc00277cd
c0020885:	e8 23 95 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002088a:	83 c4 10             	add    esp,0x10
c002088d:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020894:	75 14                	jne    c00208aa <SATA::open(int, int, void*)+0xac>
c0020896:	e4 60                	in     al,0x60
c0020898:	3c 1c                	cmp    al,0x1c
c002089a:	74 04                	je     c00208a0 <SATA::open(int, int, void*)+0xa2>
c002089c:	3c 5a                	cmp    al,0x5a
c002089e:	75 f6                	jne    c0020896 <SATA::open(int, int, void*)+0x98>
c00208a0:	e4 60                	in     al,0x60
c00208a2:	3c 5a                	cmp    al,0x5a
c00208a4:	74 fa                	je     c00208a0 <SATA::open(int, int, void*)+0xa2>
c00208a6:	3c 1c                	cmp    al,0x1c
c00208a8:	74 f6                	je     c00208a0 <SATA::open(int, int, void*)+0xa2>
c00208aa:	e8 5b 9b fe ff       	call   c000a40a <Phys::allocatePage()>
c00208af:	89 c6                	mov    esi,eax
c00208b1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00208b7:	81 c6 00 10 00 00    	add    esi,0x1000
c00208bd:	e8 48 9b fe ff       	call   c000a40a <Phys::allocatePage()>
c00208c2:	39 c6                	cmp    esi,eax
c00208c4:	74 10                	je     c00208d6 <SATA::open(int, int, void*)+0xd8>
c00208c6:	83 ec 0c             	sub    esp,0xc
c00208c9:	68 da 77 02 c0       	push   0xc00277da
c00208ce:	e8 2e 47 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00208d3:	83 c4 10             	add    esp,0x10
c00208d6:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c00208dd:	74 2d                	je     c002090c <SATA::open(int, int, void*)+0x10e>
c00208df:	83 ec 0c             	sub    esp,0xc
c00208e2:	68 ee 77 02 c0       	push   0xc00277ee
c00208e7:	e8 c1 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00208ec:	83 c4 10             	add    esp,0x10
c00208ef:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c00208f6:	75 14                	jne    c002090c <SATA::open(int, int, void*)+0x10e>
c00208f8:	e4 60                	in     al,0x60
c00208fa:	3c 1c                	cmp    al,0x1c
c00208fc:	74 04                	je     c0020902 <SATA::open(int, int, void*)+0x104>
c00208fe:	3c 5a                	cmp    al,0x5a
c0020900:	75 f6                	jne    c00208f8 <SATA::open(int, int, void*)+0xfa>
c0020902:	e4 60                	in     al,0x60
c0020904:	3c 5a                	cmp    al,0x5a
c0020906:	74 fa                	je     c0020902 <SATA::open(int, int, void*)+0x104>
c0020908:	3c 1c                	cmp    al,0x1c
c002090a:	74 f6                	je     c0020902 <SATA::open(int, int, void*)+0x104>
c002090c:	83 ec 0c             	sub    esp,0xc
c002090f:	6a 02                	push   0x2
c0020911:	e8 03 b4 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0020916:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002091c:	6a 03                	push   0x3
c002091e:	50                   	push   eax
c002091f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020925:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c002092b:	e8 90 ba fe ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020930:	83 c4 20             	add    esp,0x20
c0020933:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002093a:	74 2d                	je     c0020969 <SATA::open(int, int, void*)+0x16b>
c002093c:	83 ec 0c             	sub    esp,0xc
c002093f:	68 fb 77 02 c0       	push   0xc00277fb
c0020944:	e8 64 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020953:	75 14                	jne    c0020969 <SATA::open(int, int, void*)+0x16b>
c0020955:	e4 60                	in     al,0x60
c0020957:	3c 1c                	cmp    al,0x1c
c0020959:	74 04                	je     c002095f <SATA::open(int, int, void*)+0x161>
c002095b:	3c 5a                	cmp    al,0x5a
c002095d:	75 f6                	jne    c0020955 <SATA::open(int, int, void*)+0x157>
c002095f:	e4 60                	in     al,0x60
c0020961:	3c 5a                	cmp    al,0x5a
c0020963:	74 fa                	je     c002095f <SATA::open(int, int, void*)+0x161>
c0020965:	3c 1c                	cmp    al,0x1c
c0020967:	74 f6                	je     c002095f <SATA::open(int, int, void*)+0x161>
c0020969:	83 ec 0c             	sub    esp,0xc
c002096c:	53                   	push   ebx
c002096d:	e8 e0 e0 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020972:	83 c4 10             	add    esp,0x10
c0020975:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002097c:	74 2d                	je     c00209ab <SATA::open(int, int, void*)+0x1ad>
c002097e:	83 ec 0c             	sub    esp,0xc
c0020981:	68 08 78 02 c0       	push   0xc0027808
c0020986:	e8 22 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020995:	75 14                	jne    c00209ab <SATA::open(int, int, void*)+0x1ad>
c0020997:	e4 60                	in     al,0x60
c0020999:	3c 1c                	cmp    al,0x1c
c002099b:	74 04                	je     c00209a1 <SATA::open(int, int, void*)+0x1a3>
c002099d:	3c 5a                	cmp    al,0x5a
c002099f:	75 f6                	jne    c0020997 <SATA::open(int, int, void*)+0x199>
c00209a1:	e4 60                	in     al,0x60
c00209a3:	3c 5a                	cmp    al,0x5a
c00209a5:	74 fa                	je     c00209a1 <SATA::open(int, int, void*)+0x1a3>
c00209a7:	3c 1c                	cmp    al,0x1c
c00209a9:	74 f6                	je     c00209a1 <SATA::open(int, int, void*)+0x1a3>
c00209ab:	83 ec 0c             	sub    esp,0xc
c00209ae:	53                   	push   ebx
c00209af:	e8 f6 00 ff ff       	call   c0010aaa <createPartitionsForDisk(PhysicalDisk*)>
c00209b4:	83 c4 10             	add    esp,0x10
c00209b7:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c00209be:	74 2d                	je     c00209ed <SATA::open(int, int, void*)+0x1ef>
c00209c0:	83 ec 0c             	sub    esp,0xc
c00209c3:	68 15 78 02 c0       	push   0xc0027815
c00209c8:	e8 e0 93 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00209cd:	83 c4 10             	add    esp,0x10
c00209d0:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c00209d7:	75 14                	jne    c00209ed <SATA::open(int, int, void*)+0x1ef>
c00209d9:	e4 60                	in     al,0x60
c00209db:	3c 1c                	cmp    al,0x1c
c00209dd:	74 04                	je     c00209e3 <SATA::open(int, int, void*)+0x1e5>
c00209df:	3c 5a                	cmp    al,0x5a
c00209e1:	75 f6                	jne    c00209d9 <SATA::open(int, int, void*)+0x1db>
c00209e3:	e4 60                	in     al,0x60
c00209e5:	3c 5a                	cmp    al,0x5a
c00209e7:	74 fa                	je     c00209e3 <SATA::open(int, int, void*)+0x1e5>
c00209e9:	3c 1c                	cmp    al,0x1c
c00209eb:	74 f6                	je     c00209e3 <SATA::open(int, int, void*)+0x1e5>
c00209ed:	5a                   	pop    edx
c00209ee:	31 c0                	xor    eax,eax
c00209f0:	5b                   	pop    ebx
c00209f1:	5e                   	pop    esi
c00209f2:	c3                   	ret    
c00209f3:	90                   	nop

c00209f4 <SATA::SATA()>:
c00209f4:	83 ec 0c             	sub    esp,0xc
c00209f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209fb:	83 ec 04             	sub    esp,0x4
c00209fe:	68 00 02 00 00       	push   0x200
c0020a03:	68 22 78 02 c0       	push   0xc0027822
c0020a08:	50                   	push   eax
c0020a09:	e8 dc df fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020a0e:	83 c4 10             	add    esp,0x10
c0020a11:	ba cc 79 02 c0       	mov    edx,0xc00279cc
c0020a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1a:	89 10                	mov    DWORD PTR [eax],edx
c0020a1c:	90                   	nop
c0020a1d:	83 c4 0c             	add    esp,0xc
c0020a20:	c3                   	ret    
c0020a21:	90                   	nop

c0020a22 <SATA::access(unsigned long long, int, void*, bool)>:
c0020a22:	55                   	push   ebp
c0020a23:	57                   	push   edi
c0020a24:	56                   	push   esi
c0020a25:	53                   	push   ebx
c0020a26:	83 ec 2c             	sub    esp,0x2c
c0020a29:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020a2d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a35:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020a3c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a44:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020a48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a4c:	75 19                	jne    c0020a67 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020a4e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020a53:	7e 41                	jle    c0020a96 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a55:	83 ec 0c             	sub    esp,0xc
c0020a58:	68 41 78 02 c0       	push   0xc0027841
c0020a5d:	e8 9f 45 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0020a62:	83 c4 10             	add    esp,0x10
c0020a65:	eb 2f                	jmp    c0020a96 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a67:	83 ec 0c             	sub    esp,0xc
c0020a6a:	68 32 78 02 c0       	push   0xc0027832
c0020a6f:	e8 39 93 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020a74:	83 c4 10             	add    esp,0x10
c0020a77:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020a7e:	75 ce                	jne    c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a80:	e4 60                	in     al,0x60
c0020a82:	3c 1c                	cmp    al,0x1c
c0020a84:	74 04                	je     c0020a8a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a86:	3c 5a                	cmp    al,0x5a
c0020a88:	75 f6                	jne    c0020a80 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020a8a:	e4 60                	in     al,0x60
c0020a8c:	3c 5a                	cmp    al,0x5a
c0020a8e:	74 fa                	je     c0020a8a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a90:	3c 1c                	cmp    al,0x1c
c0020a92:	74 f6                	je     c0020a8a <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a94:	eb b8                	jmp    c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a96:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020a9d:	75 29                	jne    c0020ac8 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020a9f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020aa5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020aab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020ab1:	8d 75 02             	lea    esi,[ebp+0x2]
c0020ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ab8:	c1 e6 07             	shl    esi,0x7
c0020abb:	01 c6                	add    esi,eax
c0020abd:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020ac4:	74 4a                	je     c0020b10 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020ac6:	eb 2f                	jmp    c0020af7 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020ac8:	83 ec 0c             	sub    esp,0xc
c0020acb:	68 7a 78 02 c0       	push   0xc002787a
c0020ad0:	e8 d8 92 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020adf:	75 be                	jne    c0020a9f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020ae1:	e4 60                	in     al,0x60
c0020ae3:	3c 1c                	cmp    al,0x1c
c0020ae5:	74 04                	je     c0020aeb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020ae7:	3c 5a                	cmp    al,0x5a
c0020ae9:	75 f6                	jne    c0020ae1 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020aeb:	e4 60                	in     al,0x60
c0020aed:	3c 5a                	cmp    al,0x5a
c0020aef:	74 fa                	je     c0020aeb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020af1:	3c 1c                	cmp    al,0x1c
c0020af3:	74 f6                	je     c0020aeb <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020af5:	eb a8                	jmp    c0020a9f <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020af7:	83 ec 0c             	sub    esp,0xc
c0020afa:	68 89 78 02 c0       	push   0xc0027889
c0020aff:	e8 a9 92 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020b04:	83 c4 10             	add    esp,0x10
c0020b07:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020b0e:	74 3d                	je     c0020b4d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020b10:	89 e8                	mov    eax,ebp
c0020b12:	c1 e0 07             	shl    eax,0x7
c0020b15:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b19:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b23:	52                   	push   edx
c0020b24:	52                   	push   edx
c0020b25:	56                   	push   esi
c0020b26:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020b2c:	e8 11 ec ff ff       	call   c001f742 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020b31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b35:	83 c4 10             	add    esp,0x10
c0020b38:	b8 01 00 00 00       	mov    eax,0x1
c0020b3d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020b42:	75 1d                	jne    c0020b61 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020b44:	e9 c8 04 00 00       	jmp    c0021011 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020b49:	3c 5a                	cmp    al,0x5a
c0020b4b:	74 0c                	je     c0020b59 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b4d:	e4 60                	in     al,0x60
c0020b4f:	3c 1c                	cmp    al,0x1c
c0020b51:	75 f6                	jne    c0020b49 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020b53:	eb 04                	jmp    c0020b59 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b55:	3c 1c                	cmp    al,0x1c
c0020b57:	75 b7                	jne    c0020b10 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020b59:	e4 60                	in     al,0x60
c0020b5b:	3c 5a                	cmp    al,0x5a
c0020b5d:	74 fa                	je     c0020b59 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b5f:	eb f4                	jmp    c0020b55 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020b61:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020b68:	74 3a                	je     c0020ba4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020b6a:	83 ec 0c             	sub    esp,0xc
c0020b6d:	68 98 78 02 c0       	push   0xc0027898
c0020b72:	e8 36 92 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020b81:	74 0d                	je     c0020b90 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020b83:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b88:	74 34                	je     c0020bbe <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020b8a:	eb 1f                	jmp    c0020bab <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020b8c:	3c 1c                	cmp    al,0x1c
c0020b8e:	74 0c                	je     c0020b9c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b90:	e4 60                	in     al,0x60
c0020b92:	3c 5a                	cmp    al,0x5a
c0020b94:	75 f6                	jne    c0020b8c <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020b96:	eb 04                	jmp    c0020b9c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b98:	3c 1c                	cmp    al,0x1c
c0020b9a:	75 e7                	jne    c0020b83 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020b9c:	e4 60                	in     al,0x60
c0020b9e:	3c 5a                	cmp    al,0x5a
c0020ba0:	74 fa                	je     c0020b9c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020ba2:	eb f4                	jmp    c0020b98 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020ba4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ba9:	74 1c                	je     c0020bc7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020bab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020baf:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020bb5:	c1 e1 09             	shl    ecx,0x9
c0020bb8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020bbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020bbe:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020bc5:	75 55                	jne    c0020c1c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020bc7:	8d 45 02             	lea    eax,[ebp+0x2]
c0020bca:	c1 e0 07             	shl    eax,0x7
c0020bcd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020bd1:	8b 38                	mov    edi,DWORD PTR [eax]
c0020bd3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020bd9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020bdf:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be9:	c1 e0 05             	shl    eax,0x5
c0020bec:	01 c7                	add    edi,eax
c0020bee:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020bf2:	83 e0 01             	and    eax,0x1
c0020bf5:	c1 e0 06             	shl    eax,0x6
c0020bf8:	88 c2                	mov    dl,al
c0020bfa:	8a 07                	mov    al,BYTE PTR [edi]
c0020bfc:	83 e0 bf             	and    eax,0xffffffbf
c0020bff:	09 d0                	or     eax,edx
c0020c01:	88 07                	mov    BYTE PTR [edi],al
c0020c03:	8b 07                	mov    eax,DWORD PTR [edi]
c0020c05:	25 e0 ff 00 00       	and    eax,0xffe0
c0020c0a:	0d 05 00 01 00       	or     eax,0x10005
c0020c0f:	89 07                	mov    DWORD PTR [edi],eax
c0020c11:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020c18:	74 4d                	je     c0020c67 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020c1a:	eb 32                	jmp    c0020c4e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020c1c:	83 ec 0c             	sub    esp,0xc
c0020c1f:	68 a7 78 02 c0       	push   0xc00278a7
c0020c24:	e8 84 91 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020c29:	83 c4 10             	add    esp,0x10
c0020c2c:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020c33:	75 92                	jne    c0020bc7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020c35:	e4 60                	in     al,0x60
c0020c37:	3c 1c                	cmp    al,0x1c
c0020c39:	74 04                	je     c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c3b:	3c 5a                	cmp    al,0x5a
c0020c3d:	75 f6                	jne    c0020c35 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020c3f:	e4 60                	in     al,0x60
c0020c41:	3c 5a                	cmp    al,0x5a
c0020c43:	74 fa                	je     c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c45:	3c 1c                	cmp    al,0x1c
c0020c47:	74 f6                	je     c0020c3f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c49:	e9 79 ff ff ff       	jmp    c0020bc7 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020c4e:	83 ec 0c             	sub    esp,0xc
c0020c51:	68 b6 78 02 c0       	push   0xc00278b6
c0020c56:	e8 52 91 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020c5b:	83 c4 10             	add    esp,0x10
c0020c5e:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020c65:	74 3b                	je     c0020ca2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020c67:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c6d:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020c73:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020c79:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020c7c:	50                   	push   eax
c0020c7d:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020c81:	83 c0 08             	add    eax,0x8
c0020c84:	c1 e0 04             	shl    eax,0x4
c0020c87:	50                   	push   eax
c0020c88:	6a 00                	push   0x0
c0020c8a:	56                   	push   esi
c0020c8b:	e8 ec f9 fd ff       	call   c000067c <memset>
c0020c90:	83 c4 10             	add    esp,0x10
c0020c93:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020c9a:	74 33                	je     c0020ccf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c9c:	eb 18                	jmp    c0020cb6 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020c9e:	3c 1c                	cmp    al,0x1c
c0020ca0:	74 0c                	je     c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ca2:	e4 60                	in     al,0x60
c0020ca4:	3c 5a                	cmp    al,0x5a
c0020ca6:	75 f6                	jne    c0020c9e <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020ca8:	eb 04                	jmp    c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020caa:	3c 1c                	cmp    al,0x1c
c0020cac:	75 b9                	jne    c0020c67 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020cae:	e4 60                	in     al,0x60
c0020cb0:	3c 5a                	cmp    al,0x5a
c0020cb2:	74 fa                	je     c0020cae <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020cb4:	eb f4                	jmp    c0020caa <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020cb6:	83 ec 0c             	sub    esp,0xc
c0020cb9:	68 c5 78 02 c0       	push   0xc00278c5
c0020cbe:	e8 ea 90 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020cc3:	83 c4 10             	add    esp,0x10
c0020cc6:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020ccd:	74 48                	je     c0020d17 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020ccf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020cd5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020cdb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020cdf:	c1 e0 09             	shl    eax,0x9
c0020ce2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ce6:	48                   	dec    eax
c0020ce7:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020cec:	89 c2                	mov    edx,eax
c0020cee:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020cf4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020cf9:	09 d0                	or     eax,edx
c0020cfb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020d01:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020d08:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020d0f:	74 33                	je     c0020d44 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020d11:	eb 18                	jmp    c0020d2b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020d13:	3c 1c                	cmp    al,0x1c
c0020d15:	74 0c                	je     c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020d17:	e4 60                	in     al,0x60
c0020d19:	3c 5a                	cmp    al,0x5a
c0020d1b:	75 f6                	jne    c0020d13 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020d1d:	eb 04                	jmp    c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020d1f:	3c 1c                	cmp    al,0x1c
c0020d21:	75 ac                	jne    c0020ccf <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020d23:	e4 60                	in     al,0x60
c0020d25:	3c 5a                	cmp    al,0x5a
c0020d27:	74 fa                	je     c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020d29:	eb f4                	jmp    c0020d1f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020d2b:	83 ec 0c             	sub    esp,0xc
c0020d2e:	68 d4 78 02 c0       	push   0xc00278d4
c0020d33:	e8 75 90 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020d38:	83 c4 10             	add    esp,0x10
c0020d3b:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020d42:	74 63                	je     c0020da7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020d44:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020d47:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020d4b:	66 25 00 7f          	and    ax,0x7f00
c0020d4f:	66 0d 27 80          	or     ax,0x8027
c0020d53:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020d58:	66 89 06             	mov    WORD PTR [esi],ax
c0020d5b:	19 c0                	sbb    eax,eax
c0020d5d:	83 e0 f0             	and    eax,0xfffffff0
c0020d60:	83 c0 35             	add    eax,0x35
c0020d63:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020d66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d6a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020d6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d72:	c1 e8 10             	shr    eax,0x10
c0020d75:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020d78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d7c:	c1 e8 18             	shr    eax,0x18
c0020d7f:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020d86:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020d89:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020d8d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020d90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d94:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020d97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020d9b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020d9f:	74 33                	je     c0020dd4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020da1:	eb 18                	jmp    c0020dbb <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020da3:	3c 1c                	cmp    al,0x1c
c0020da5:	74 0c                	je     c0020db3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020da7:	e4 60                	in     al,0x60
c0020da9:	3c 5a                	cmp    al,0x5a
c0020dab:	75 f6                	jne    c0020da3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020dad:	eb 04                	jmp    c0020db3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020daf:	3c 1c                	cmp    al,0x1c
c0020db1:	75 91                	jne    c0020d44 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020db3:	e4 60                	in     al,0x60
c0020db5:	3c 5a                	cmp    al,0x5a
c0020db7:	74 fa                	je     c0020db3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020db9:	eb f4                	jmp    c0020daf <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020dbb:	83 ec 0c             	sub    esp,0xc
c0020dbe:	68 e3 78 02 c0       	push   0xc00278e3
c0020dc3:	e8 e5 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020dc8:	83 c4 10             	add    esp,0x10
c0020dcb:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020dd2:	74 11                	je     c0020de5 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020dd4:	89 e8                	mov    eax,ebp
c0020dd6:	31 f6                	xor    esi,esi
c0020dd8:	c1 e0 07             	shl    eax,0x7
c0020ddb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ddf:	eb 21                	jmp    c0020e02 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020de1:	3c 1c                	cmp    al,0x1c
c0020de3:	74 0c                	je     c0020df1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020de5:	e4 60                	in     al,0x60
c0020de7:	3c 5a                	cmp    al,0x5a
c0020de9:	75 f6                	jne    c0020de1 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020deb:	eb 04                	jmp    c0020df1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020ded:	3c 1c                	cmp    al,0x1c
c0020def:	75 e3                	jne    c0020dd4 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020df1:	e4 60                	in     al,0x60
c0020df3:	3c 5a                	cmp    al,0x5a
c0020df5:	74 fa                	je     c0020df1 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020df7:	eb f4                	jmp    c0020ded <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020df9:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020dff:	74 0c                	je     c0020e0d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020e01:	46                   	inc    esi
c0020e02:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020e08:	80 e2 88             	and    dl,0x88
c0020e0b:	75 ec                	jne    c0020df9 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020e0d:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020e14:	74 3d                	je     c0020e53 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020e16:	83 ec 0c             	sub    esp,0xc
c0020e19:	68 f2 78 02 c0       	push   0xc00278f2
c0020e1e:	e8 8a 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020e23:	8b 15 c0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028cc0
c0020e29:	83 c4 10             	add    esp,0x10
c0020e2c:	f6 c2 80             	test   dl,0x80
c0020e2f:	74 0e                	je     c0020e3f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020e31:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020e37:	75 2f                	jne    c0020e68 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020e39:	eb 20                	jmp    c0020e5b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020e3b:	3c 1c                	cmp    al,0x1c
c0020e3d:	74 0c                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e3f:	e4 60                	in     al,0x60
c0020e41:	3c 5a                	cmp    al,0x5a
c0020e43:	75 f6                	jne    c0020e3b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020e45:	eb 04                	jmp    c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e47:	3c 1c                	cmp    al,0x1c
c0020e49:	75 e6                	jne    c0020e31 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020e4b:	e4 60                	in     al,0x60
c0020e4d:	3c 5a                	cmp    al,0x5a
c0020e4f:	74 fa                	je     c0020e4b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e51:	eb f4                	jmp    c0020e47 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020e53:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020e59:	75 13                	jne    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e5b:	83 ec 0c             	sub    esp,0xc
c0020e5e:	68 02 79 02 c0       	push   0xc0027902
c0020e63:	e9 d2 00 00 00       	jmp    c0020f3a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020e68:	0f ba e2 0b          	bt     edx,0xb
c0020e6c:	72 25                	jb     c0020e93 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020e6e:	be 01 00 00 00       	mov    esi,0x1
c0020e73:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e77:	89 e8                	mov    eax,ebp
c0020e79:	d3 e6                	shl    esi,cl
c0020e7b:	c1 e0 07             	shl    eax,0x7
c0020e7e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e82:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020e89:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020e8f:	74 4a                	je     c0020edb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e91:	eb 2f                	jmp    c0020ec2 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020e93:	83 ec 0c             	sub    esp,0xc
c0020e96:	68 10 79 02 c0       	push   0xc0027910
c0020e9b:	e8 0d 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020ea0:	83 c4 10             	add    esp,0x10
c0020ea3:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020eaa:	75 c2                	jne    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020eac:	e4 60                	in     al,0x60
c0020eae:	3c 5a                	cmp    al,0x5a
c0020eb0:	74 04                	je     c0020eb6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020eb2:	3c 1c                	cmp    al,0x1c
c0020eb4:	75 f6                	jne    c0020eac <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020eb6:	e4 60                	in     al,0x60
c0020eb8:	3c 5a                	cmp    al,0x5a
c0020eba:	74 fa                	je     c0020eb6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020ebc:	3c 1c                	cmp    al,0x1c
c0020ebe:	74 f6                	je     c0020eb6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020ec0:	eb ac                	jmp    c0020e6e <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020ec2:	83 ec 0c             	sub    esp,0xc
c0020ec5:	68 20 79 02 c0       	push   0xc0027920
c0020eca:	e8 de 8e fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020ecf:	83 c4 10             	add    esp,0x10
c0020ed2:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020ed9:	74 0f                	je     c0020eea <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020edb:	89 e8                	mov    eax,ebp
c0020edd:	c1 e0 07             	shl    eax,0x7
c0020ee0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ee4:	eb 24                	jmp    c0020f0a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020ee6:	3c 1c                	cmp    al,0x1c
c0020ee8:	74 0c                	je     c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020eea:	e4 60                	in     al,0x60
c0020eec:	3c 5a                	cmp    al,0x5a
c0020eee:	75 f6                	jne    c0020ee6 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020ef0:	eb 04                	jmp    c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020ef2:	3c 1c                	cmp    al,0x1c
c0020ef4:	75 e5                	jne    c0020edb <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020ef6:	e4 60                	in     al,0x60
c0020ef8:	3c 5a                	cmp    al,0x5a
c0020efa:	74 fa                	je     c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020efc:	eb f4                	jmp    c0020ef2 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020efe:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020f04:	0f ba e2 1e          	bt     edx,0x1e
c0020f08:	72 28                	jb     c0020f32 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020f0a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020f10:	85 d6                	test   esi,edx
c0020f12:	75 ea                	jne    c0020efe <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020f14:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020f1b:	75 2f                	jne    c0020f4c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020f1d:	89 e8                	mov    eax,ebp
c0020f1f:	c1 e0 07             	shl    eax,0x7
c0020f22:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020f26:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020f2c:	0f ba e0 1e          	bt     eax,0x1e
c0020f30:	73 49                	jae    c0020f7b <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020f32:	83 ec 0c             	sub    esp,0xc
c0020f35:	68 30 79 02 c0       	push   0xc0027930
c0020f3a:	e8 c2 40 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0020f3f:	83 c4 10             	add    esp,0x10
c0020f42:	b8 01 00 00 00       	mov    eax,0x1
c0020f47:	e9 c5 00 00 00       	jmp    c0021011 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020f4c:	83 ec 0c             	sub    esp,0xc
c0020f4f:	68 41 79 02 c0       	push   0xc0027941
c0020f54:	e8 54 8e fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020f59:	83 c4 10             	add    esp,0x10
c0020f5c:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020f63:	75 b8                	jne    c0020f1d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f65:	e4 60                	in     al,0x60
c0020f67:	3c 5a                	cmp    al,0x5a
c0020f69:	74 04                	je     c0020f6f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f6b:	3c 1c                	cmp    al,0x1c
c0020f6d:	75 f6                	jne    c0020f65 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020f6f:	e4 60                	in     al,0x60
c0020f71:	3c 5a                	cmp    al,0x5a
c0020f73:	74 fa                	je     c0020f6f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f75:	3c 1c                	cmp    al,0x1c
c0020f77:	74 f6                	je     c0020f6f <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f79:	eb a2                	jmp    c0020f1d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f7b:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020f82:	74 3a                	je     c0020fbe <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020f84:	83 ec 0c             	sub    esp,0xc
c0020f87:	68 51 79 02 c0       	push   0xc0027951
c0020f8c:	e8 1c 8e fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020f91:	83 c4 10             	add    esp,0x10
c0020f94:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020f9b:	74 0d                	je     c0020faa <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020f9d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020fa2:	75 31                	jne    c0020fd5 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020fa4:	eb 1f                	jmp    c0020fc5 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020fa6:	3c 1c                	cmp    al,0x1c
c0020fa8:	74 0c                	je     c0020fb6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020faa:	e4 60                	in     al,0x60
c0020fac:	3c 5a                	cmp    al,0x5a
c0020fae:	75 f6                	jne    c0020fa6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020fb0:	eb 04                	jmp    c0020fb6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020fb2:	3c 1c                	cmp    al,0x1c
c0020fb4:	75 e7                	jne    c0020f9d <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020fb6:	e4 60                	in     al,0x60
c0020fb8:	3c 5a                	cmp    al,0x5a
c0020fba:	74 fa                	je     c0020fb6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020fbc:	eb f4                	jmp    c0020fb2 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020fbe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020fc3:	75 19                	jne    c0020fde <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020fc5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020fcb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020fcf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fd5:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0020fdc:	75 04                	jne    c0020fe2 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020fde:	31 c0                	xor    eax,eax
c0020fe0:	eb 2f                	jmp    c0021011 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020fe2:	83 ec 0c             	sub    esp,0xc
c0020fe5:	68 61 79 02 c0       	push   0xc0027961
c0020fea:	e8 be 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020fef:	83 c4 10             	add    esp,0x10
c0020ff2:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0020ff9:	75 e3                	jne    c0020fde <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020ffb:	e4 60                	in     al,0x60
c0020ffd:	3c 1c                	cmp    al,0x1c
c0020fff:	74 04                	je     c0021005 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021001:	3c 5a                	cmp    al,0x5a
c0021003:	75 f6                	jne    c0020ffb <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0021005:	e4 60                	in     al,0x60
c0021007:	3c 5a                	cmp    al,0x5a
c0021009:	74 fa                	je     c0021005 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002100b:	3c 1c                	cmp    al,0x1c
c002100d:	74 f6                	je     c0021005 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002100f:	eb cd                	jmp    c0020fde <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021011:	83 c4 2c             	add    esp,0x2c
c0021014:	5b                   	pop    ebx
c0021015:	5e                   	pop    esi
c0021016:	5f                   	pop    edi
c0021017:	5d                   	pop    ebp
c0021018:	c3                   	ret    
c0021019:	90                   	nop

c002101a <SATA::read(unsigned long long, int, void*)>:
c002101a:	55                   	push   ebp
c002101b:	57                   	push   edi
c002101c:	56                   	push   esi
c002101d:	53                   	push   ebx
c002101e:	83 ec 0c             	sub    esp,0xc
c0021021:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021025:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021029:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002102d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021031:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0021038:	74 2d                	je     c0021067 <SATA::read(unsigned long long, int, void*)+0x4d>
c002103a:	83 ec 0c             	sub    esp,0xc
c002103d:	68 71 79 02 c0       	push   0xc0027971
c0021042:	e8 66 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0021047:	83 c4 10             	add    esp,0x10
c002104a:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0021051:	75 14                	jne    c0021067 <SATA::read(unsigned long long, int, void*)+0x4d>
c0021053:	e4 60                	in     al,0x60
c0021055:	3c 1c                	cmp    al,0x1c
c0021057:	74 04                	je     c002105d <SATA::read(unsigned long long, int, void*)+0x43>
c0021059:	3c 5a                	cmp    al,0x5a
c002105b:	75 f6                	jne    c0021053 <SATA::read(unsigned long long, int, void*)+0x39>
c002105d:	e4 60                	in     al,0x60
c002105f:	3c 5a                	cmp    al,0x5a
c0021061:	74 fa                	je     c002105d <SATA::read(unsigned long long, int, void*)+0x43>
c0021063:	3c 1c                	cmp    al,0x1c
c0021065:	74 f6                	je     c002105d <SATA::read(unsigned long long, int, void*)+0x43>
c0021067:	8d 53 ff             	lea    edx,[ebx-0x1]
c002106a:	b8 04 00 00 00       	mov    eax,0x4
c002106f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021075:	0f 87 96 00 00 00    	ja     c0021111 <SATA::read(unsigned long long, int, void*)+0xf7>
c002107b:	b8 06 00 00 00       	mov    eax,0x6
c0021080:	85 ed                	test   ebp,ebp
c0021082:	0f 84 89 00 00 00    	je     c0021111 <SATA::read(unsigned long long, int, void*)+0xf7>
c0021088:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002108f:	74 2d                	je     c00210be <SATA::read(unsigned long long, int, void*)+0xa4>
c0021091:	83 ec 0c             	sub    esp,0xc
c0021094:	68 7e 79 02 c0       	push   0xc002797e
c0021099:	e8 0f 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002109e:	83 c4 10             	add    esp,0x10
c00210a1:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c00210a8:	75 14                	jne    c00210be <SATA::read(unsigned long long, int, void*)+0xa4>
c00210aa:	e4 60                	in     al,0x60
c00210ac:	3c 5a                	cmp    al,0x5a
c00210ae:	74 04                	je     c00210b4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00210b0:	3c 1c                	cmp    al,0x1c
c00210b2:	75 f6                	jne    c00210aa <SATA::read(unsigned long long, int, void*)+0x90>
c00210b4:	e4 60                	in     al,0x60
c00210b6:	3c 5a                	cmp    al,0x5a
c00210b8:	74 fa                	je     c00210b4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00210ba:	3c 1c                	cmp    al,0x1c
c00210bc:	74 f6                	je     c00210b4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00210be:	50                   	push   eax
c00210bf:	50                   	push   eax
c00210c0:	6a 00                	push   0x0
c00210c2:	55                   	push   ebp
c00210c3:	53                   	push   ebx
c00210c4:	57                   	push   edi
c00210c5:	56                   	push   esi
c00210c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00210ca:	e8 53 f9 ff ff       	call   c0020a22 <SATA::access(unsigned long long, int, void*, bool)>
c00210cf:	83 c4 20             	add    esp,0x20
c00210d2:	89 c3                	mov    ebx,eax
c00210d4:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c00210db:	74 2d                	je     c002110a <SATA::read(unsigned long long, int, void*)+0xf0>
c00210dd:	83 ec 0c             	sub    esp,0xc
c00210e0:	68 8b 79 02 c0       	push   0xc002798b
c00210e5:	e8 c3 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00210ea:	83 c4 10             	add    esp,0x10
c00210ed:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c00210f4:	75 14                	jne    c002110a <SATA::read(unsigned long long, int, void*)+0xf0>
c00210f6:	e4 60                	in     al,0x60
c00210f8:	3c 5a                	cmp    al,0x5a
c00210fa:	74 04                	je     c0021100 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210fc:	3c 1c                	cmp    al,0x1c
c00210fe:	75 f6                	jne    c00210f6 <SATA::read(unsigned long long, int, void*)+0xdc>
c0021100:	e4 60                	in     al,0x60
c0021102:	3c 5a                	cmp    al,0x5a
c0021104:	74 fa                	je     c0021100 <SATA::read(unsigned long long, int, void*)+0xe6>
c0021106:	3c 1c                	cmp    al,0x1c
c0021108:	74 f6                	je     c0021100 <SATA::read(unsigned long long, int, void*)+0xe6>
c002110a:	31 c0                	xor    eax,eax
c002110c:	85 db                	test   ebx,ebx
c002110e:	0f 95 c0             	setne  al
c0021111:	83 c4 0c             	add    esp,0xc
c0021114:	5b                   	pop    ebx
c0021115:	5e                   	pop    esi
c0021116:	5f                   	pop    edi
c0021117:	5d                   	pop    ebp
c0021118:	c3                   	ret    
c0021119:	90                   	nop

c002111a <SATA::write(unsigned long long, int, void*)>:
c002111a:	55                   	push   ebp
c002111b:	57                   	push   edi
c002111c:	56                   	push   esi
c002111d:	53                   	push   ebx
c002111e:	83 ec 1c             	sub    esp,0x1c
c0021121:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021125:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021129:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002112d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021131:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0021138:	74 2d                	je     c0021167 <SATA::write(unsigned long long, int, void*)+0x4d>
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	68 98 79 02 c0       	push   0xc0027998
c0021142:	e8 66 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0021151:	75 14                	jne    c0021167 <SATA::write(unsigned long long, int, void*)+0x4d>
c0021153:	e4 60                	in     al,0x60
c0021155:	3c 1c                	cmp    al,0x1c
c0021157:	74 04                	je     c002115d <SATA::write(unsigned long long, int, void*)+0x43>
c0021159:	3c 5a                	cmp    al,0x5a
c002115b:	75 f6                	jne    c0021153 <SATA::write(unsigned long long, int, void*)+0x39>
c002115d:	e4 60                	in     al,0x60
c002115f:	3c 5a                	cmp    al,0x5a
c0021161:	74 fa                	je     c002115d <SATA::write(unsigned long long, int, void*)+0x43>
c0021163:	3c 1c                	cmp    al,0x1c
c0021165:	74 f6                	je     c002115d <SATA::write(unsigned long long, int, void*)+0x43>
c0021167:	8d 55 ff             	lea    edx,[ebp-0x1]
c002116a:	b8 04 00 00 00       	mov    eax,0x4
c002116f:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021175:	0f 87 bd 00 00 00    	ja     c0021238 <SATA::write(unsigned long long, int, void*)+0x11e>
c002117b:	b8 06 00 00 00       	mov    eax,0x6
c0021180:	85 db                	test   ebx,ebx
c0021182:	0f 84 b0 00 00 00    	je     c0021238 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021188:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c002118f:	74 2d                	je     c00211be <SATA::write(unsigned long long, int, void*)+0xa4>
c0021191:	83 ec 0c             	sub    esp,0xc
c0021194:	68 a6 79 02 c0       	push   0xc00279a6
c0021199:	e8 0f 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002119e:	83 c4 10             	add    esp,0x10
c00211a1:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c00211a8:	75 14                	jne    c00211be <SATA::write(unsigned long long, int, void*)+0xa4>
c00211aa:	e4 60                	in     al,0x60
c00211ac:	3c 1c                	cmp    al,0x1c
c00211ae:	74 04                	je     c00211b4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00211b0:	3c 5a                	cmp    al,0x5a
c00211b2:	75 f6                	jne    c00211aa <SATA::write(unsigned long long, int, void*)+0x90>
c00211b4:	e4 60                	in     al,0x60
c00211b6:	3c 5a                	cmp    al,0x5a
c00211b8:	74 fa                	je     c00211b4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00211ba:	3c 1c                	cmp    al,0x1c
c00211bc:	74 f6                	je     c00211b4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00211be:	c1 e5 09             	shl    ebp,0x9
c00211c1:	01 dd                	add    ebp,ebx
c00211c3:	89 f0                	mov    eax,esi
c00211c5:	89 fa                	mov    edx,edi
c00211c7:	83 c0 01             	add    eax,0x1
c00211ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211ce:	83 d2 00             	adc    edx,0x0
c00211d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211d5:	50                   	push   eax
c00211d6:	50                   	push   eax
c00211d7:	6a 01                	push   0x1
c00211d9:	53                   	push   ebx
c00211da:	81 c3 00 02 00 00    	add    ebx,0x200
c00211e0:	6a 01                	push   0x1
c00211e2:	57                   	push   edi
c00211e3:	56                   	push   esi
c00211e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00211e8:	e8 35 f8 ff ff       	call   c0020a22 <SATA::access(unsigned long long, int, void*, bool)>
c00211ed:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00211f1:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00211f5:	83 c4 20             	add    esp,0x20
c00211f8:	39 dd                	cmp    ebp,ebx
c00211fa:	75 c7                	jne    c00211c3 <SATA::write(unsigned long long, int, void*)+0xa9>
c00211fc:	f6 05 c1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028cc1,0x8
c0021203:	75 04                	jne    c0021209 <SATA::write(unsigned long long, int, void*)+0xef>
c0021205:	31 c0                	xor    eax,eax
c0021207:	eb 2f                	jmp    c0021238 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021209:	83 ec 0c             	sub    esp,0xc
c002120c:	68 b4 79 02 c0       	push   0xc00279b4
c0021211:	e8 97 8b fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0021216:	83 c4 10             	add    esp,0x10
c0021219:	f6 05 c0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028cc0,0x80
c0021220:	75 e3                	jne    c0021205 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021222:	e4 60                	in     al,0x60
c0021224:	3c 5a                	cmp    al,0x5a
c0021226:	74 04                	je     c002122c <SATA::write(unsigned long long, int, void*)+0x112>
c0021228:	3c 1c                	cmp    al,0x1c
c002122a:	75 f6                	jne    c0021222 <SATA::write(unsigned long long, int, void*)+0x108>
c002122c:	e4 60                	in     al,0x60
c002122e:	3c 5a                	cmp    al,0x5a
c0021230:	74 fa                	je     c002122c <SATA::write(unsigned long long, int, void*)+0x112>
c0021232:	3c 1c                	cmp    al,0x1c
c0021234:	74 f6                	je     c002122c <SATA::write(unsigned long long, int, void*)+0x112>
c0021236:	eb cd                	jmp    c0021205 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021238:	83 c4 1c             	add    esp,0x1c
c002123b:	5b                   	pop    ebx
c002123c:	5e                   	pop    esi
c002123d:	5f                   	pop    edi
c002123e:	5d                   	pop    ebp
c002123f:	c3                   	ret    

c0021240 <SATAPI::write(unsigned long long, int, void*)>:
c0021240:	b8 03 00 00 00       	mov    eax,0x3
c0021245:	c3                   	ret    

c0021246 <SATAPI::close(int, int, void*)>:
c0021246:	83 ec 0c             	sub    esp,0xc
c0021249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021253:	85 c0                	test   eax,eax
c0021255:	74 0c                	je     c0021263 <SATAPI::close(int, int, void*)+0x1d>
c0021257:	83 ec 0c             	sub    esp,0xc
c002125a:	8b 10                	mov    edx,DWORD PTR [eax]
c002125c:	50                   	push   eax
c002125d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021260:	83 c4 10             	add    esp,0x10
c0021263:	31 c0                	xor    eax,eax
c0021265:	83 c4 0c             	add    esp,0xc
c0021268:	c3                   	ret    
c0021269:	90                   	nop

c002126a <SATAPI::SATAPI()>:
c002126a:	83 ec 0c             	sub    esp,0xc
c002126d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021271:	83 ec 04             	sub    esp,0x4
c0021274:	68 00 08 00 00       	push   0x800
c0021279:	68 fc 79 02 c0       	push   0xc00279fc
c002127e:	50                   	push   eax
c002127f:	e8 66 d7 fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021284:	83 c4 10             	add    esp,0x10
c0021287:	ba 38 7b 02 c0       	mov    edx,0xc0027b38
c002128c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021290:	89 10                	mov    DWORD PTR [eax],edx
c0021292:	90                   	nop
c0021293:	83 c4 0c             	add    esp,0xc
c0021296:	c3                   	ret    
c0021297:	90                   	nop

c0021298 <SATAPI::diskRemoved()>:
c0021298:	53                   	push   ebx
c0021299:	83 ec 14             	sub    esp,0x14
c002129c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00212a0:	68 08 7a 02 c0       	push   0xc0027a08
c00212a5:	e8 95 bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00212aa:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00212b1:	c7 04 24 5c 77 02 c0 	mov    DWORD PTR [esp],0xc002775c
c00212b8:	e8 82 bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00212bd:	58                   	pop    eax
c00212be:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00212c4:	e8 61 f5 fe ff       	call   c001082a <LogicalDisk::unmount()>
c00212c9:	c7 04 24 6b 77 02 c0 	mov    DWORD PTR [esp],0xc002776b
c00212d0:	e8 6a bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00212d5:	5a                   	pop    edx
c00212d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212dc:	e8 4f ff fe ff       	call   c0011230 <VCache::writeWriteBuffer()>
c00212e1:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00212e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00212eb:	83 c4 18             	add    esp,0x18
c00212ee:	5b                   	pop    ebx
c00212ef:	e9 2c ff fe ff       	jmp    c0011220 <VCache::invalidateReadBuffer()>

c00212f4 <SATAPI::diskInserted()>:
c00212f4:	83 ec 18             	sub    esp,0x18
c00212f7:	68 1f 7a 02 c0       	push   0xc0027a1f
c00212fc:	e8 3e bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021305:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002130c:	83 c4 1c             	add    esp,0x1c
c002130f:	c3                   	ret    

c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021310:	55                   	push   ebp
c0021311:	57                   	push   edi
c0021312:	56                   	push   esi
c0021313:	53                   	push   ebx
c0021314:	83 ec 38             	sub    esp,0x38
c0021317:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002131b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c002131f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0021323:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021327:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002132b:	68 37 7a 02 c0       	push   0xc0027a37
c0021330:	e8 0a bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021335:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002133b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021341:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021345:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002134b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002134f:	c1 e0 07             	shl    eax,0x7
c0021352:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0021356:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002135a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021364:	5a                   	pop    edx
c0021365:	59                   	pop    ecx
c0021366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002136a:	8d 58 02             	lea    ebx,[eax+0x2]
c002136d:	c1 e3 07             	shl    ebx,0x7
c0021370:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0021374:	53                   	push   ebx
c0021375:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002137b:	e8 c2 e3 ff ff       	call   c001f742 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	b8 01 00 00 00       	mov    eax,0x1
c002138c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021391:	0f 84 04 02 00 00    	je     c002159b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021397:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002139d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002139f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00213a5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00213ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213af:	c1 e1 05             	shl    ecx,0x5
c00213b2:	01 c8                	add    eax,ecx
c00213b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00213b6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00213bc:	81 c9 25 00 01 00    	or     ecx,0x10025
c00213c2:	89 08                	mov    DWORD PTR [eax],ecx
c00213c4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00213ca:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00213d0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00213d6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00213d9:	8d 7b 40             	lea    edi,[ebx+0x40]
c00213dc:	50                   	push   eax
c00213dd:	68 90 00 00 00       	push   0x90
c00213e2:	6a 00                	push   0x0
c00213e4:	53                   	push   ebx
c00213e5:	e8 92 f2 fd ff       	call   c000067c <memset>
c00213ea:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00213ee:	b9 0c 00 00 00       	mov    ecx,0xc
c00213f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213f5:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00213fb:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00213ff:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021405:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021409:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002140d:	48                   	dec    eax
c002140e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021413:	89 c1                	mov    ecx,eax
c0021415:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002141b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021420:	09 c8                	or     eax,ecx
c0021422:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021428:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002142b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0021432:	66 25 00 7f          	and    ax,0x7f00
c0021436:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002143a:	66 0d 27 80          	or     ax,0x8027
c002143e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021442:	66 89 03             	mov    WORD PTR [ebx],ax
c0021445:	89 d0                	mov    eax,edx
c0021447:	c1 ea 18             	shr    edx,0x18
c002144a:	c1 e8 10             	shr    eax,0x10
c002144d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021450:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021453:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021457:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002145a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002145e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021461:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021465:	83 c4 10             	add    esp,0x10
c0021468:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002146c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021470:	31 c0                	xor    eax,eax
c0021472:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0021478:	80 e1 88             	and    cl,0x88
c002147b:	74 0a                	je     c0021487 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c002147d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021482:	74 0a                	je     c002148e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021484:	40                   	inc    eax
c0021485:	eb eb                	jmp    c0021472 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0021487:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002148c:	75 0f                	jne    c002149d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c002148e:	83 ec 0c             	sub    esp,0xc
c0021491:	68 02 79 02 c0       	push   0xc0027902
c0021496:	e8 66 3b ff ff       	call   c0015001 <Krnl::panic(char const*)>
c002149b:	eb 48                	jmp    c00214e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c002149d:	be 01 00 00 00       	mov    esi,0x1
c00214a2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00214a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00214aa:	d3 e6                	shl    esi,cl
c00214ac:	c1 e7 07             	shl    edi,0x7
c00214af:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00214b5:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c00214ba:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00214be:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00214c4:	85 c6                	test   esi,eax
c00214c6:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00214cc:	0f 84 96 00 00 00    	je     c0021568 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c00214d2:	0f ba e0 1e          	bt     eax,0x1e
c00214d6:	73 1a                	jae    c00214f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c00214d8:	83 ec 0c             	sub    esp,0xc
c00214db:	68 51 7a 02 c0       	push   0xc0027a51
c00214e0:	e8 5a bb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00214e5:	83 c4 10             	add    esp,0x10
c00214e8:	b8 01 00 00 00       	mov    eax,0x1
c00214ed:	e9 a9 00 00 00       	jmp    c002159b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c00214f2:	83 fb 0d             	cmp    ebx,0xd
c00214f5:	77 12                	ja     c0021509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00214f7:	83 ec 0c             	sub    esp,0xc
c00214fa:	68 c8 00 00 00       	push   0xc8
c00214ff:	e8 54 7b ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c0021504:	83 c4 10             	add    esp,0x10
c0021507:	eb 2a                	jmp    c0021533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021509:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002150f:	83 f8 0d             	cmp    eax,0xd
c0021512:	77 0a                	ja     c002151e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0021514:	83 ec 0c             	sub    esp,0xc
c0021517:	68 58 02 00 00       	push   0x258
c002151c:	eb 28                	jmp    c0021546 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c002151e:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021524:	83 f8 0d             	cmp    eax,0xd
c0021527:	77 0a                	ja     c0021533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021529:	83 ec 0c             	sub    esp,0xc
c002152c:	68 dc 05 00 00       	push   0x5dc
c0021531:	eb 13                	jmp    c0021546 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0021533:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0021539:	83 f8 0d             	cmp    eax,0xd
c002153c:	77 10                	ja     c002154e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c002153e:	83 ec 0c             	sub    esp,0xc
c0021541:	68 c4 09 00 00       	push   0x9c4
c0021546:	e8 0d 7b ff ff       	call   c0019058 <milliTenthSleep(unsigned int)>
c002154b:	83 c4 10             	add    esp,0x10
c002154e:	43                   	inc    ebx
c002154f:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0021555:	0f 85 63 ff ff ff    	jne    c00214be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c002155b:	83 ec 0c             	sub    esp,0xc
c002155e:	68 64 7a 02 c0       	push   0xc0027a64
c0021563:	e9 78 ff ff ff       	jmp    c00214e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0021568:	0f ba e0 1e          	bt     eax,0x1e
c002156c:	73 0d                	jae    c002157b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	68 78 7a 02 c0       	push   0xc0027a78
c0021576:	e9 65 ff ff ff       	jmp    c00214e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002157b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021580:	74 17                	je     c0021599 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021582:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0021587:	74 10                	je     c0021599 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021589:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002158f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021593:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0021597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021599:	31 c0                	xor    eax,eax
c002159b:	83 c4 2c             	add    esp,0x2c
c002159e:	5b                   	pop    ebx
c002159f:	5e                   	pop    esi
c00215a0:	5f                   	pop    edi
c00215a1:	5d                   	pop    ebp
c00215a2:	c3                   	ret    
c00215a3:	90                   	nop

c00215a4 <SATAPI::eject()>:
c00215a4:	57                   	push   edi
c00215a5:	b9 03 00 00 00       	mov    ecx,0x3
c00215aa:	53                   	push   ebx
c00215ab:	83 ec 14             	sub    esp,0x14
c00215ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00215b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00215b6:	fc                   	cld    
c00215b7:	31 c0                	xor    eax,eax
c00215b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00215bb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00215c0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00215c5:	50                   	push   eax
c00215c6:	6a 00                	push   0x0
c00215c8:	6a 00                	push   0x0
c00215ca:	6a 00                	push   0x0
c00215cc:	6a 00                	push   0x0
c00215ce:	6a 02                	push   0x2
c00215d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00215d4:	50                   	push   eax
c00215d5:	53                   	push   ebx
c00215d6:	e8 35 fd ff ff       	call   c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00215db:	83 c4 20             	add    esp,0x20
c00215de:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00215e5:	74 0c                	je     c00215f3 <SATAPI::eject()+0x4f>
c00215e7:	83 ec 0c             	sub    esp,0xc
c00215ea:	53                   	push   ebx
c00215eb:	e8 a8 fc ff ff       	call   c0021298 <SATAPI::diskRemoved()>
c00215f0:	83 c4 10             	add    esp,0x10
c00215f3:	83 c4 14             	add    esp,0x14
c00215f6:	31 c0                	xor    eax,eax
c00215f8:	5b                   	pop    ebx
c00215f9:	5f                   	pop    edi
c00215fa:	c3                   	ret    
c00215fb:	90                   	nop

c00215fc <SATAPI::detectMedia()>:
c00215fc:	56                   	push   esi
c00215fd:	53                   	push   ebx
c00215fe:	83 ec 30             	sub    esp,0x30
c0021601:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021605:	68 8d 7a 02 c0       	push   0xc0027a8d
c002160a:	e8 30 ba fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002160f:	83 c4 0c             	add    esp,0xc
c0021612:	6a 0c                	push   0xc
c0021614:	6a 00                	push   0x0
c0021616:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002161a:	56                   	push   esi
c002161b:	e8 5c f0 fd ff       	call   c000067c <memset>
c0021620:	83 c4 0c             	add    esp,0xc
c0021623:	6a 00                	push   0x0
c0021625:	6a 00                	push   0x0
c0021627:	6a 00                	push   0x0
c0021629:	6a 00                	push   0x0
c002162b:	6a 00                	push   0x0
c002162d:	56                   	push   esi
c002162e:	53                   	push   ebx
c002162f:	e8 dc fc ff ff       	call   c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021634:	83 c4 20             	add    esp,0x20
c0021637:	48                   	dec    eax
c0021638:	75 27                	jne    c0021661 <SATAPI::detectMedia()+0x65>
c002163a:	83 ec 0c             	sub    esp,0xc
c002163d:	68 a1 7a 02 c0       	push   0xc0027aa1
c0021642:	e8 f8 b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021651:	74 0e                	je     c0021661 <SATAPI::detectMedia()+0x65>
c0021653:	83 ec 0c             	sub    esp,0xc
c0021656:	53                   	push   ebx
c0021657:	e8 3c fc ff ff       	call   c0021298 <SATAPI::diskRemoved()>
c002165c:	e9 d1 00 00 00       	jmp    c0021732 <SATAPI::detectMedia()+0x136>
c0021661:	50                   	push   eax
c0021662:	6a 0c                	push   0xc
c0021664:	6a 00                	push   0x0
c0021666:	56                   	push   esi
c0021667:	e8 10 f0 fd ff       	call   c000067c <memset>
c002166c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021671:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021676:	83 c4 0c             	add    esp,0xc
c0021679:	6a 01                	push   0x1
c002167b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002167f:	50                   	push   eax
c0021680:	6a 00                	push   0x0
c0021682:	6a 00                	push   0x0
c0021684:	6a 12                	push   0x12
c0021686:	56                   	push   esi
c0021687:	53                   	push   ebx
c0021688:	e8 83 fc ff ff       	call   c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002168d:	83 c4 20             	add    esp,0x20
c0021690:	48                   	dec    eax
c0021691:	75 19                	jne    c00216ac <SATAPI::detectMedia()+0xb0>
c0021693:	83 ec 0c             	sub    esp,0xc
c0021696:	68 ab 7a 02 c0       	push   0xc0027aab
c002169b:	e8 9f b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00216a0:	83 c4 10             	add    esp,0x10
c00216a3:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216aa:	75 a7                	jne    c0021653 <SATAPI::detectMedia()+0x57>
c00216ac:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00216b0:	83 e0 7f             	and    eax,0x7f
c00216b3:	3c 70                	cmp    al,0x70
c00216b5:	74 25                	je     c00216dc <SATAPI::detectMedia()+0xe0>
c00216b7:	83 ec 0c             	sub    esp,0xc
c00216ba:	68 b5 7a 02 c0       	push   0xc0027ab5
c00216bf:	e8 7b b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00216c4:	83 c4 10             	add    esp,0x10
c00216c7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216ce:	75 0c                	jne    c00216dc <SATAPI::detectMedia()+0xe0>
c00216d0:	83 ec 0c             	sub    esp,0xc
c00216d3:	53                   	push   ebx
c00216d4:	e8 1b fc ff ff       	call   c00212f4 <SATAPI::diskInserted()>
c00216d9:	83 c4 10             	add    esp,0x10
c00216dc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00216e0:	83 e0 0f             	and    eax,0xf
c00216e3:	3c 02                	cmp    al,0x2
c00216e5:	75 25                	jne    c002170c <SATAPI::detectMedia()+0x110>
c00216e7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00216ec:	75 47                	jne    c0021735 <SATAPI::detectMedia()+0x139>
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	68 be 7a 02 c0       	push   0xc0027abe
c00216f6:	e8 44 b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00216fb:	83 c4 10             	add    esp,0x10
c00216fe:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021705:	74 2e                	je     c0021735 <SATAPI::detectMedia()+0x139>
c0021707:	e9 47 ff ff ff       	jmp    c0021653 <SATAPI::detectMedia()+0x57>
c002170c:	84 c0                	test   al,al
c002170e:	75 25                	jne    c0021735 <SATAPI::detectMedia()+0x139>
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	68 c7 7a 02 c0       	push   0xc0027ac7
c0021718:	e8 22 b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002171d:	83 c4 10             	add    esp,0x10
c0021720:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021727:	75 0c                	jne    c0021735 <SATAPI::detectMedia()+0x139>
c0021729:	83 ec 0c             	sub    esp,0xc
c002172c:	53                   	push   ebx
c002172d:	e8 c2 fb ff ff       	call   c00212f4 <SATAPI::diskInserted()>
c0021732:	83 c4 10             	add    esp,0x10
c0021735:	83 c4 24             	add    esp,0x24
c0021738:	5b                   	pop    ebx
c0021739:	5e                   	pop    esi
c002173a:	c3                   	ret    
c002173b:	90                   	nop

c002173c <SATAPI::open(int, int, void*)>:
c002173c:	56                   	push   esi
c002173d:	53                   	push   ebx
c002173e:	51                   	push   ecx
c002173f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021743:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021747:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021751:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021757:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021765:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002176f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021775:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002177c:	e8 89 8c fe ff       	call   c000a40a <Phys::allocatePage()>
c0021781:	89 c6                	mov    esi,eax
c0021783:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021789:	81 c6 00 10 00 00    	add    esi,0x1000
c002178f:	e8 76 8c fe ff       	call   c000a40a <Phys::allocatePage()>
c0021794:	39 c6                	cmp    esi,eax
c0021796:	74 10                	je     c00217a8 <SATAPI::open(int, int, void*)+0x6c>
c0021798:	83 ec 0c             	sub    esp,0xc
c002179b:	68 d1 7a 02 c0       	push   0xc0027ad1
c00217a0:	e8 5c 38 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00217a5:	83 c4 10             	add    esp,0x10
c00217a8:	83 ec 0c             	sub    esp,0xc
c00217ab:	6a 02                	push   0x2
c00217ad:	e8 67 a5 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c00217b2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00217b8:	6a 03                	push   0x3
c00217ba:	50                   	push   eax
c00217bb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00217c1:	ff 35 d0 8d 02 c0    	push   DWORD PTR ds:0xc0028dd0
c00217c7:	e8 f4 ab fe ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00217cc:	83 c4 14             	add    esp,0x14
c00217cf:	68 74 01 00 00       	push   0x174
c00217d4:	e8 7a 85 fe ff       	call   c0009d53 <malloc>
c00217d9:	83 c4 0c             	add    esp,0xc
c00217dc:	89 c6                	mov    esi,eax
c00217de:	6a 00                	push   0x0
c00217e0:	68 ff ff ff 7f       	push   0x7fffffff
c00217e5:	6a 00                	push   0x0
c00217e7:	6a 00                	push   0x0
c00217e9:	53                   	push   ebx
c00217ea:	68 e7 7a 02 c0       	push   0xc0027ae7
c00217ef:	50                   	push   eax
c00217f0:	e8 41 ee fe ff       	call   c0010636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00217f5:	83 c4 14             	add    esp,0x14
c00217f8:	56                   	push   esi
c00217f9:	e8 ee ee fe ff       	call   c00106ec <LogicalDisk::assignDriveLetter()>
c00217fe:	5a                   	pop    edx
c00217ff:	0f be c0             	movsx  eax,al
c0021802:	59                   	pop    ecx
c0021803:	50                   	push   eax
c0021804:	68 79 77 02 c0       	push   0xc0027779
c0021809:	e8 31 b8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002180e:	58                   	pop    eax
c002180f:	5a                   	pop    edx
c0021810:	56                   	push   esi
c0021811:	53                   	push   ebx
c0021812:	e8 9b cd fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c0021817:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002181d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021820:	e8 2d d2 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0021825:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002182c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002182f:	e8 c8 fd ff ff       	call   c00215fc <SATAPI::detectMedia()>
c0021834:	83 c4 14             	add    esp,0x14
c0021837:	31 c0                	xor    eax,eax
c0021839:	5b                   	pop    ebx
c002183a:	5e                   	pop    esi
c002183b:	c3                   	ret    

c002183c <SATAPI::read(unsigned long long, int, void*)>:
c002183c:	55                   	push   ebp
c002183d:	57                   	push   edi
c002183e:	56                   	push   esi
c002183f:	53                   	push   ebx
c0021840:	83 ec 48             	sub    esp,0x48
c0021843:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021847:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c002184b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c002184f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021857:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002185b:	68 f5 7a 02 c0       	push   0xc0027af5
c0021860:	e8 da b7 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021865:	83 c4 10             	add    esp,0x10
c0021868:	83 fb 04             	cmp    ebx,0x4
c002186b:	7e 10                	jle    c002187d <SATAPI::read(unsigned long long, int, void*)+0x41>
c002186d:	83 ec 0c             	sub    esp,0xc
c0021870:	68 06 7b 02 c0       	push   0xc0027b06
c0021875:	e8 87 37 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021881:	31 ed                	xor    ebp,ebp
c0021883:	b9 03 00 00 00       	mov    ecx,0x3
c0021888:	fc                   	cld    
c0021889:	89 e8                	mov    eax,ebp
c002188b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002188d:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021892:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021897:	50                   	push   eax
c0021898:	6a 00                	push   0x0
c002189a:	6a 00                	push   0x0
c002189c:	6a 00                	push   0x0
c002189e:	6a 00                	push   0x0
c00218a0:	6a 02                	push   0x2
c00218a2:	8d 44 24 30          	lea    eax,[esp+0x30]
c00218a6:	50                   	push   eax
c00218a7:	56                   	push   esi
c00218a8:	e8 63 fa ff ff       	call   c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00218ad:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00218b1:	89 e8                	mov    eax,ebp
c00218b3:	b9 03 00 00 00       	mov    ecx,0x3
c00218b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00218ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00218be:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c00218c2:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c00218c7:	86 e0                	xchg   al,ah
c00218c9:	c1 c0 10             	rol    eax,0x10
c00218cc:	86 e0                	xchg   al,ah
c00218ce:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00218d2:	83 c4 1c             	add    esp,0x1c
c00218d5:	53                   	push   ebx
c00218d6:	c1 e3 0b             	shl    ebx,0xb
c00218d9:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00218dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218e5:	53                   	push   ebx
c00218e6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00218ea:	50                   	push   eax
c00218eb:	56                   	push   esi
c00218ec:	e8 1f fa ff ff       	call   c0021310 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00218f1:	83 c4 20             	add    esp,0x20
c00218f4:	85 c0                	test   eax,eax
c00218f6:	74 14                	je     c002190c <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00218f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218fc:	83 ec 0c             	sub    esp,0xc
c00218ff:	56                   	push   esi
c0021900:	e8 f7 fc ff ff       	call   c00215fc <SATAPI::detectMedia()>
c0021905:	83 c4 10             	add    esp,0x10
c0021908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002190c:	83 c4 3c             	add    esp,0x3c
c002190f:	5b                   	pop    ebx
c0021910:	5e                   	pop    esi
c0021911:	5f                   	pop    edi
c0021912:	5d                   	pop    ebp
c0021913:	c3                   	ret    

c0021914 <AVX::open(int, int, void*)>:
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	e8 8c 11 00 00       	call   c0022aa8 <avxInit>
c002191c:	b8 00 00 00 00       	mov    eax,0x0
c0021921:	83 c4 0c             	add    esp,0xc
c0021924:	c3                   	ret    
c0021925:	90                   	nop
c0021926:	66 90                	xchg   ax,ax

c0021928 <AVX::close(int, int, void*)>:
c0021928:	83 ec 0c             	sub    esp,0xc
c002192b:	e8 79 11 00 00       	call   c0022aa9 <avxClose>
c0021930:	b8 00 00 00 00       	mov    eax,0x0
c0021935:	83 c4 0c             	add    esp,0xc
c0021938:	c3                   	ret    
c0021939:	90                   	nop
c002193a:	66 90                	xchg   ax,ax

c002193c <AVX::available()>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	e8 5c 11 00 00       	call   c0022aa0 <avxDetect>
c0021944:	85 c0                	test   eax,eax
c0021946:	0f 95 c0             	setne  al
c0021949:	83 c4 0c             	add    esp,0xc
c002194c:	c3                   	ret    
c002194d:	90                   	nop
c002194e:	66 90                	xchg   ax,ax

c0021950 <AVX::save(void*)>:
c0021950:	83 ec 0c             	sub    esp,0xc
c0021953:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021957:	83 ec 0c             	sub    esp,0xc
c002195a:	50                   	push   eax
c002195b:	e8 46 11 00 00       	call   c0022aa6 <avxSave>
c0021960:	83 c4 10             	add    esp,0x10
c0021963:	90                   	nop
c0021964:	83 c4 0c             	add    esp,0xc
c0021967:	c3                   	ret    

c0021968 <AVX::load(void*)>:
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002196f:	83 ec 0c             	sub    esp,0xc
c0021972:	50                   	push   eax
c0021973:	e8 2f 11 00 00       	call   c0022aa7 <avxLoad>
c0021978:	83 c4 10             	add    esp,0x10
c002197b:	90                   	nop
c002197c:	83 c4 0c             	add    esp,0xc
c002197f:	c3                   	ret    

c0021980 <AVX::AVX()>:
c0021980:	83 ec 0c             	sub    esp,0xc
c0021983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021987:	83 ec 08             	sub    esp,0x8
c002198a:	68 68 7b 02 c0       	push   0xc0027b68
c002198f:	50                   	push   eax
c0021990:	e8 33 d1 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021995:	83 c4 10             	add    esp,0x10
c0021998:	ba 78 7b 02 c0       	mov    edx,0xc0027b78
c002199d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a1:	89 10                	mov    DWORD PTR [eax],edx
c00219a3:	90                   	nop
c00219a4:	83 c4 0c             	add    esp,0xc
c00219a7:	c3                   	ret    

c00219a8 <MMX::available()>:
c00219a8:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00219ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00219b3:	83 e0 20             	and    eax,0x20
c00219b6:	84 c0                	test   al,al
c00219b8:	0f 95 c0             	setne  al
c00219bb:	c3                   	ret    

c00219bc <MMX::open(int, int, void*)>:
c00219bc:	83 ec 0c             	sub    esp,0xc
c00219bf:	e8 6d 11 00 00       	call   c0022b31 <x87Init>
c00219c4:	b8 00 00 00 00       	mov    eax,0x0
c00219c9:	83 c4 0c             	add    esp,0xc
c00219cc:	c3                   	ret    
c00219cd:	90                   	nop
c00219ce:	66 90                	xchg   ax,ax

c00219d0 <MMX::close(int, int, void*)>:
c00219d0:	83 ec 0c             	sub    esp,0xc
c00219d3:	e8 72 11 00 00       	call   c0022b4a <x87Close>
c00219d8:	b8 00 00 00 00       	mov    eax,0x0
c00219dd:	83 c4 0c             	add    esp,0xc
c00219e0:	c3                   	ret    
c00219e1:	90                   	nop
c00219e2:	66 90                	xchg   ax,ax

c00219e4 <MMX::save(void*)>:
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219eb:	83 ec 0c             	sub    esp,0xc
c00219ee:	50                   	push   eax
c00219ef:	e8 2d 11 00 00       	call   c0022b21 <x87Save>
c00219f4:	83 c4 10             	add    esp,0x10
c00219f7:	90                   	nop
c00219f8:	83 c4 0c             	add    esp,0xc
c00219fb:	c3                   	ret    

c00219fc <MMX::load(void*)>:
c00219fc:	83 ec 0c             	sub    esp,0xc
c00219ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a03:	83 ec 0c             	sub    esp,0xc
c0021a06:	50                   	push   eax
c0021a07:	e8 20 11 00 00       	call   c0022b2c <x87Load>
c0021a0c:	83 c4 10             	add    esp,0x10
c0021a0f:	90                   	nop
c0021a10:	83 c4 0c             	add    esp,0xc
c0021a13:	c3                   	ret    

c0021a14 <MMX::MMX()>:
c0021a14:	83 ec 0c             	sub    esp,0xc
c0021a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1b:	83 ec 08             	sub    esp,0x8
c0021a1e:	68 a8 7b 02 c0       	push   0xc0027ba8
c0021a23:	50                   	push   eax
c0021a24:	e8 9f d0 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021a29:	83 c4 10             	add    esp,0x10
c0021a2c:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c0021a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a35:	89 10                	mov    DWORD PTR [eax],edx
c0021a37:	90                   	nop
c0021a38:	83 c4 0c             	add    esp,0xc
c0021a3b:	c3                   	ret    

c0021a3c <SSE::open(int, int, void*)>:
c0021a3c:	83 ec 0c             	sub    esp,0xc
c0021a3f:	e8 a0 10 00 00       	call   c0022ae4 <sseInit>
c0021a44:	b8 00 00 00 00       	mov    eax,0x0
c0021a49:	83 c4 0c             	add    esp,0xc
c0021a4c:	c3                   	ret    
c0021a4d:	90                   	nop
c0021a4e:	66 90                	xchg   ax,ax

c0021a50 <SSE::close(int, int, void*)>:
c0021a50:	83 ec 0c             	sub    esp,0xc
c0021a53:	e8 9c 10 00 00       	call   c0022af4 <sseClose>
c0021a58:	b8 00 00 00 00       	mov    eax,0x0
c0021a5d:	83 c4 0c             	add    esp,0xc
c0021a60:	c3                   	ret    
c0021a61:	90                   	nop
c0021a62:	66 90                	xchg   ax,ax

c0021a64 <SSE::available()>:
c0021a64:	83 ec 1c             	sub    esp,0x1c
c0021a67:	e8 54 10 00 00       	call   c0022ac0 <absolutelyNoChanceInHell>
c0021a6c:	85 c0                	test   eax,eax
c0021a6e:	0f 95 c0             	setne  al
c0021a71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021a75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021a79:	83 c4 1c             	add    esp,0x1c
c0021a7c:	c3                   	ret    
c0021a7d:	90                   	nop
c0021a7e:	66 90                	xchg   ax,ax

c0021a80 <SSE::save(void*)>:
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a87:	83 ec 0c             	sub    esp,0xc
c0021a8a:	50                   	push   eax
c0021a8b:	e8 48 10 00 00       	call   c0022ad8 <sseSave>
c0021a90:	83 c4 10             	add    esp,0x10
c0021a93:	90                   	nop
c0021a94:	83 c4 0c             	add    esp,0xc
c0021a97:	c3                   	ret    

c0021a98 <SSE::load(void*)>:
c0021a98:	83 ec 0c             	sub    esp,0xc
c0021a9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	50                   	push   eax
c0021aa3:	e8 36 10 00 00       	call   c0022ade <sseLoad>
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	90                   	nop
c0021aac:	83 c4 0c             	add    esp,0xc
c0021aaf:	c3                   	ret    

c0021ab0 <SSE::SSE()>:
c0021ab0:	83 ec 0c             	sub    esp,0xc
c0021ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab7:	83 ec 08             	sub    esp,0x8
c0021aba:	68 e8 7b 02 c0       	push   0xc0027be8
c0021abf:	50                   	push   eax
c0021ac0:	e8 03 d0 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021ac5:	83 c4 10             	add    esp,0x10
c0021ac8:	ba f8 7b 02 c0       	mov    edx,0xc0027bf8
c0021acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad1:	89 10                	mov    DWORD PTR [eax],edx
c0021ad3:	90                   	nop
c0021ad4:	83 c4 0c             	add    esp,0xc
c0021ad7:	c3                   	ret    

c0021ad8 <x87::open(int, int, void*)>:
c0021ad8:	55                   	push   ebp
c0021ad9:	89 e5                	mov    ebp,esp
c0021adb:	83 ec 08             	sub    esp,0x8
c0021ade:	83 ec 0c             	sub    esp,0xc
c0021ae1:	68 28 7c 02 c0       	push   0xc0027c28
c0021ae6:	e8 54 b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021aeb:	83 c4 10             	add    esp,0x10
c0021aee:	e8 3e 10 00 00       	call   c0022b31 <x87Init>
c0021af3:	b8 00 00 00 00       	mov    eax,0x0
c0021af8:	c9                   	leave  
c0021af9:	c3                   	ret    

c0021afa <x87::close(int, int, void*)>:
c0021afa:	55                   	push   ebp
c0021afb:	89 e5                	mov    ebp,esp
c0021afd:	83 ec 08             	sub    esp,0x8
c0021b00:	e8 45 10 00 00       	call   c0022b4a <x87Close>
c0021b05:	b8 00 00 00 00       	mov    eax,0x0
c0021b0a:	c9                   	leave  
c0021b0b:	c3                   	ret    

c0021b0c <x87::available()>:
c0021b0c:	55                   	push   ebp
c0021b0d:	89 e5                	mov    ebp,esp
c0021b0f:	83 ec 08             	sub    esp,0x8
c0021b12:	e8 ef 0f 00 00       	call   c0022b06 <x87Detect>
c0021b17:	85 c0                	test   eax,eax
c0021b19:	0f 95 c0             	setne  al
c0021b1c:	c9                   	leave  
c0021b1d:	c3                   	ret    

c0021b1e <x87::save(void*)>:
c0021b1e:	55                   	push   ebp
c0021b1f:	89 e5                	mov    ebp,esp
c0021b21:	83 ec 18             	sub    esp,0x18
c0021b24:	0f 20 c0             	mov    eax,cr0
c0021b27:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021b2d:	83 ec 08             	sub    esp,0x8
c0021b30:	50                   	push   eax
c0021b31:	68 37 7c 02 c0       	push   0xc0027c37
c0021b36:	e8 04 b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b3b:	83 c4 10             	add    esp,0x10
c0021b3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b41:	83 ec 0c             	sub    esp,0xc
c0021b44:	50                   	push   eax
c0021b45:	e8 d7 0f 00 00       	call   c0022b21 <x87Save>
c0021b4a:	83 c4 10             	add    esp,0x10
c0021b4d:	83 ec 0c             	sub    esp,0xc
c0021b50:	68 55 7c 02 c0       	push   0xc0027c55
c0021b55:	e8 e5 b4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	90                   	nop
c0021b5e:	c9                   	leave  
c0021b5f:	c3                   	ret    

c0021b60 <x87::load(void*)>:
c0021b60:	55                   	push   ebp
c0021b61:	89 e5                	mov    ebp,esp
c0021b63:	83 ec 08             	sub    esp,0x8
c0021b66:	83 ec 0c             	sub    esp,0xc
c0021b69:	68 66 7c 02 c0       	push   0xc0027c66
c0021b6e:	e8 cc b4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b79:	83 ec 0c             	sub    esp,0xc
c0021b7c:	50                   	push   eax
c0021b7d:	e8 aa 0f 00 00       	call   c0022b2c <x87Load>
c0021b82:	83 c4 10             	add    esp,0x10
c0021b85:	83 ec 0c             	sub    esp,0xc
c0021b88:	68 77 7c 02 c0       	push   0xc0027c77
c0021b8d:	e8 ad b4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b92:	83 c4 10             	add    esp,0x10
c0021b95:	90                   	nop
c0021b96:	c9                   	leave  
c0021b97:	c3                   	ret    

c0021b98 <x87::x87()>:
c0021b98:	83 ec 0c             	sub    esp,0xc
c0021b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9f:	83 ec 08             	sub    esp,0x8
c0021ba2:	68 88 7c 02 c0       	push   0xc0027c88
c0021ba7:	50                   	push   eax
c0021ba8:	e8 1b cf fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021bad:	83 c4 10             	add    esp,0x10
c0021bb0:	ba 98 7c 02 c0       	mov    edx,0xc0027c98
c0021bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb9:	89 10                	mov    DWORD PTR [eax],edx
c0021bbb:	90                   	nop
c0021bbc:	83 c4 0c             	add    esp,0xc
c0021bbf:	c3                   	ret    

c0021bc0 <APIC::disable()>:
c0021bc0:	90                   	nop
c0021bc1:	c3                   	ret    

c0021bc2 <APIC::close(int, int, void*)>:
c0021bc2:	55                   	push   ebp
c0021bc3:	89 e5                	mov    ebp,esp
c0021bc5:	83 ec 08             	sub    esp,0x8
c0021bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bcd:	83 c0 3c             	add    eax,0x3c
c0021bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bd2:	83 ec 0c             	sub    esp,0xc
c0021bd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bd8:	ff d0                	call   eax
c0021bda:	83 c4 10             	add    esp,0x10
c0021bdd:	b8 00 00 00 00       	mov    eax,0x0
c0021be2:	c9                   	leave  
c0021be3:	c3                   	ret    

c0021be4 <IOAPIC::close(int, int, void*)>:
c0021be4:	b8 00 00 00 00       	mov    eax,0x0
c0021be9:	c3                   	ret    

c0021bea <APIC::io_wait()>:
c0021bea:	eb 00                	jmp    c0021bec <APIC::io_wait()+0x2>
c0021bec:	eb 00                	jmp    c0021bee <APIC::io_wait()+0x4>
c0021bee:	90                   	nop
c0021bef:	c3                   	ret    

c0021bf0 <APIC::getBase()>:
c0021bf0:	55                   	push   ebp
c0021bf1:	89 e5                	mov    ebp,esp
c0021bf3:	83 ec 18             	sub    esp,0x18
c0021bf6:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0021bfb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021c01:	83 e0 08             	and    eax,0x8
c0021c04:	84 c0                	test   al,al
c0021c06:	75 07                	jne    c0021c0f <APIC::getBase()+0x1f>
c0021c08:	b8 00 00 00 00       	mov    eax,0x0
c0021c0d:	eb 21                	jmp    c0021c30 <APIC::getBase()+0x40>
c0021c0f:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0021c14:	83 ec 08             	sub    esp,0x8
c0021c17:	6a 1b                	push   0x1b
c0021c19:	50                   	push   eax
c0021c1a:	e8 47 76 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021c25:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021c28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021c2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021c30:	c9                   	leave  
c0021c31:	c3                   	ret    

c0021c32 <APIC::eoi(unsigned char)>:
c0021c32:	55                   	push   ebp
c0021c33:	89 e5                	mov    ebp,esp
c0021c35:	83 ec 28             	sub    esp,0x28
c0021c38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021c3e:	83 ec 0c             	sub    esp,0xc
c0021c41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c44:	e8 a7 ff ff ff       	call   c0021bf0 <APIC::getBase()>
c0021c49:	83 c4 10             	add    esp,0x10
c0021c4c:	05 b0 00 00 00       	add    eax,0xb0
c0021c51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021c57:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021c5d:	90                   	nop
c0021c5e:	c9                   	leave  
c0021c5f:	c3                   	ret    

c0021c60 <APIC::open(int, int, void*)>:
c0021c60:	55                   	push   ebp
c0021c61:	89 e5                	mov    ebp,esp
c0021c63:	57                   	push   edi
c0021c64:	56                   	push   esi
c0021c65:	53                   	push   ebx
c0021c66:	83 ec 2c             	sub    esp,0x2c
c0021c69:	83 ec 0c             	sub    esp,0xc
c0021c6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c6f:	e8 7c ff ff ff       	call   c0021bf0 <APIC::getBase()>
c0021c74:	83 c4 10             	add    esp,0x10
c0021c77:	89 c2                	mov    edx,eax
c0021c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c7c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021c82:	0f b6 f8             	movzx  edi,al
c0021c85:	89 d0                	mov    eax,edx
c0021c87:	ba 00 00 00 00       	mov    edx,0x0
c0021c8c:	89 c1                	mov    ecx,eax
c0021c8e:	80 e5 ff             	and    ch,0xff
c0021c91:	89 cb                	mov    ebx,ecx
c0021c93:	0f b6 f2             	movzx  esi,dl
c0021c96:	89 d8                	mov    eax,ebx
c0021c98:	89 f2                	mov    edx,esi
c0021c9a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021c9d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021ca0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021ca4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021ca8:	83 e0 00             	and    eax,0x0
c0021cab:	09 d0                	or     eax,edx
c0021cad:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cb4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021cba:	8d 50 01             	lea    edx,[eax+0x1]
c0021cbd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021cc0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021cc6:	0f b6 d0             	movzx  edx,al
c0021cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ccc:	83 c2 08             	add    edx,0x8
c0021ccf:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021cd3:	0f b6 c9             	movzx  ecx,cl
c0021cd6:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021cdc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ce6:	e8 05 ff ff ff       	call   c0021bf0 <APIC::getBase()>
c0021ceb:	83 c4 10             	add    esp,0x10
c0021cee:	05 f0 00 00 00       	add    eax,0xf0
c0021cf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021cf6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cfb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021cfe:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021d05:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021d0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021d0f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021d12:	89 10                	mov    DWORD PTR [eax],edx
c0021d14:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021d1b:	a1 10 95 02 c0       	mov    eax,ds:0xc0029510
c0021d20:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021d23:	7d 7c                	jge    c0021da1 <APIC::open(int, int, void*)+0x141>
c0021d25:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021d28:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c0021d2f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021d32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021d35:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c0021d3c:	c1 e8 08             	shr    eax,0x8
c0021d3f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021d43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021d46:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c0021d4d:	c1 e8 18             	shr    eax,0x18
c0021d50:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021d53:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021d57:	75 40                	jne    c0021d99 <APIC::open(int, int, void*)+0x139>
c0021d59:	83 ec 0c             	sub    esp,0xc
c0021d5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d5f:	e8 8c fe ff ff       	call   c0021bf0 <APIC::getBase()>
c0021d64:	83 c4 10             	add    esp,0x10
c0021d67:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021d6b:	75 07                	jne    c0021d74 <APIC::open(int, int, void*)+0x114>
c0021d6d:	ba 60 03 00 00       	mov    edx,0x360
c0021d72:	eb 05                	jmp    c0021d79 <APIC::open(int, int, void*)+0x119>
c0021d74:	ba 50 03 00 00       	mov    edx,0x350
c0021d79:	01 d0                	add    eax,edx
c0021d7b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021d7e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d83:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021d86:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021d8d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021d91:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021d94:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021d97:	89 10                	mov    DWORD PTR [eax],edx
c0021d99:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021d9c:	e9 7a ff ff ff       	jmp    c0021d1b <APIC::open(int, int, void*)+0xbb>
c0021da1:	b8 00 00 00 00       	mov    eax,0x0
c0021da6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021da9:	5b                   	pop    ebx
c0021daa:	5e                   	pop    esi
c0021dab:	5f                   	pop    edi
c0021dac:	5d                   	pop    ebp
c0021dad:	c3                   	ret    

c0021dae <IOAPIC::IOAPIC()>:
c0021dae:	83 ec 0c             	sub    esp,0xc
c0021db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db5:	83 ec 08             	sub    esp,0x8
c0021db8:	68 c8 7c 02 c0       	push   0xc0027cc8
c0021dbd:	50                   	push   eax
c0021dbe:	e8 f3 c9 fe ff       	call   c000e7b6 <Device::Device(char const*)>
c0021dc3:	83 c4 10             	add    esp,0x10
c0021dc6:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c0021dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dcf:	89 10                	mov    DWORD PTR [eax],edx
c0021dd1:	90                   	nop
c0021dd2:	83 c4 0c             	add    esp,0xc
c0021dd5:	c3                   	ret    

c0021dd6 <APIC::APIC()>:
c0021dd6:	53                   	push   ebx
c0021dd7:	83 ec 18             	sub    esp,0x18
c0021dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dde:	83 ec 08             	sub    esp,0x8
c0021de1:	68 d0 7c 02 c0       	push   0xc0027cd0
c0021de6:	50                   	push   eax
c0021de7:	e8 f6 d0 fe ff       	call   c000eee2 <InterruptController::InterruptController(char const*)>
c0021dec:	83 c4 10             	add    esp,0x10
c0021def:	ba a8 7d 02 c0       	mov    edx,0xc0027da8
c0021df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021df8:	89 10                	mov    DWORD PTR [eax],edx
c0021dfa:	a0 40 ac 02 c0       	mov    al,ds:0xc002ac40
c0021dff:	83 f0 01             	xor    eax,0x1
c0021e02:	84 c0                	test   al,al
c0021e04:	0f 84 a1 00 00 00    	je     c0021eab <APIC::APIC()+0xd5>
c0021e0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021e0f:	a0 c0 95 02 c0       	mov    al,ds:0xc00295c0
c0021e14:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021e18:	0f 83 86 00 00 00    	jae    c0021ea4 <APIC::APIC()+0xce>
c0021e1e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021e26:	83 ec 0c             	sub    esp,0xc
c0021e29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021e2d:	e8 21 7f fe ff       	call   c0009d53 <malloc>
c0021e32:	83 c4 10             	add    esp,0x10
c0021e35:	89 c3                	mov    ebx,eax
c0021e37:	83 ec 0c             	sub    esp,0xc
c0021e3a:	53                   	push   ebx
c0021e3b:	e8 6e ff ff ff       	call   c0021dae <IOAPIC::IOAPIC()>
c0021e40:	83 c4 10             	add    esp,0x10
c0021e43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021e47:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e50:	89 14 85 20 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd53e0],edx
c0021e57:	a1 00 ac 02 c0       	mov    eax,ds:0xc002ac00
c0021e5c:	40                   	inc    eax
c0021e5d:	a3 00 ac 02 c0       	mov    ds:0xc002ac00,eax
c0021e62:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c0021e67:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021e6d:	83 ec 08             	sub    esp,0x8
c0021e70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021e74:	50                   	push   eax
c0021e75:	e8 38 c7 fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c0021e7a:	83 c4 10             	add    esp,0x10
c0021e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e81:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e83:	83 c0 08             	add    eax,0x8
c0021e86:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e88:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021e8d:	6a 00                	push   0x0
c0021e8f:	6a 00                	push   0x0
c0021e91:	52                   	push   edx
c0021e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e96:	ff d0                	call   eax
c0021e98:	83 c4 10             	add    esp,0x10
c0021e9b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021e9f:	e9 6b ff ff ff       	jmp    c0021e0f <APIC::APIC()+0x39>
c0021ea4:	c6 05 40 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac40,0x1
c0021eab:	90                   	nop
c0021eac:	83 c4 18             	add    esp,0x18
c0021eaf:	5b                   	pop    ebx
c0021eb0:	c3                   	ret    
c0021eb1:	90                   	nop

c0021eb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021eb2:	55                   	push   ebp
c0021eb3:	89 e5                	mov    ebp,esp
c0021eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021ebe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021ec1:	72 1d                	jb     c0021ee0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ec6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ecf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021ed5:	01 d0                	add    eax,edx
c0021ed7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021eda:	73 04                	jae    c0021ee0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021edc:	b0 01                	mov    al,0x1
c0021ede:	eb 02                	jmp    c0021ee2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021ee0:	b0 00                	mov    al,0x0
c0021ee2:	5d                   	pop    ebp
c0021ee3:	c3                   	ret    

c0021ee4 <IOAPIC::read(int)>:
c0021ee4:	55                   	push   ebp
c0021ee5:	89 e5                	mov    ebp,esp
c0021ee7:	83 ec 10             	sub    esp,0x10
c0021eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021ef3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021ef6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ef9:	0f b6 d0             	movzx  edx,al
c0021efc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021eff:	89 10                	mov    DWORD PTR [eax],edx
c0021f01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021f04:	83 c0 10             	add    eax,0x10
c0021f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f09:	c9                   	leave  
c0021f0a:	c3                   	ret    
c0021f0b:	90                   	nop

c0021f0c <IOAPIC::open(int, int, void*)>:
c0021f0c:	55                   	push   ebp
c0021f0d:	89 e5                	mov    ebp,esp
c0021f0f:	57                   	push   edi
c0021f10:	56                   	push   esi
c0021f11:	53                   	push   ebx
c0021f12:	83 ec 0c             	sub    esp,0xc
c0021f15:	83 ec 0c             	sub    esp,0xc
c0021f18:	68 fb 7c 02 c0       	push   0xc0027cfb
c0021f1d:	e8 1d b1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021f22:	83 c4 10             	add    esp,0x10
c0021f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021f2b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f3a:	8b 14 85 00 96 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a00]
c0021f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f4d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f53:	8b 14 85 80 96 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6980]
c0021f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f5d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f66:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f6f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f75:	0f b6 f8             	movzx  edi,al
c0021f78:	89 d0                	mov    eax,edx
c0021f7a:	ba 00 00 00 00       	mov    edx,0x0
c0021f7f:	89 c1                	mov    ecx,eax
c0021f81:	80 e5 ff             	and    ch,0xff
c0021f84:	89 cb                	mov    ebx,ecx
c0021f86:	0f b6 f2             	movzx  esi,dl
c0021f89:	89 d8                	mov    eax,ebx
c0021f8b:	89 f2                	mov    edx,esi
c0021f8d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f90:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021f93:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021f97:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021f9b:	83 e0 00             	and    eax,0x0
c0021f9e:	09 d0                	or     eax,edx
c0021fa0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fa7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021fad:	8d 50 01             	lea    edx,[eax+0x1]
c0021fb0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021fb3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021fb9:	0f b6 d0             	movzx  edx,al
c0021fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fbf:	83 c2 08             	add    edx,0x8
c0021fc2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021fc6:	0f b6 c9             	movzx  ecx,cl
c0021fc9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021fcf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021fd3:	83 ec 08             	sub    esp,0x8
c0021fd6:	6a 01                	push   0x1
c0021fd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fdb:	e8 04 ff ff ff       	call   c0021ee4 <IOAPIC::read(int)>
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	c1 f8 10             	sar    eax,0x10
c0021fe6:	0f b6 c0             	movzx  eax,al
c0021fe9:	8d 50 01             	lea    edx,[eax+0x1]
c0021fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fef:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021ff5:	b8 00 00 00 00       	mov    eax,0x0
c0021ffa:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021ffd:	5b                   	pop    ebx
c0021ffe:	5e                   	pop    esi
c0021fff:	5f                   	pop    edi
c0022000:	5d                   	pop    ebp
c0022001:	c3                   	ret    

c0022002 <IOAPIC::write(int, int)>:
c0022002:	55                   	push   ebp
c0022003:	89 e5                	mov    ebp,esp
c0022005:	83 ec 10             	sub    esp,0x10
c0022008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002200b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022011:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022017:	0f b6 d0             	movzx  edx,al
c002201a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002201d:	89 10                	mov    DWORD PTR [eax],edx
c002201f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022022:	8d 50 10             	lea    edx,[eax+0x10]
c0022025:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022028:	89 02                	mov    DWORD PTR [edx],eax
c002202a:	90                   	nop
c002202b:	c9                   	leave  
c002202c:	c3                   	ret    
c002202d:	90                   	nop

c002202e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002202e:	55                   	push   ebp
c002202f:	89 e5                	mov    ebp,esp
c0022031:	53                   	push   ebx
c0022032:	83 ec 2c             	sub    esp,0x2c
c0022035:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022038:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002203b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002203e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022041:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022044:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022047:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002204a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002204d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022050:	88 d8                	mov    al,bl
c0022052:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022055:	88 c8                	mov    al,cl
c0022057:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002205a:	88 d0                	mov    al,dl
c002205c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002205f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022063:	83 c0 08             	add    eax,0x8
c0022066:	01 c0                	add    eax,eax
c0022068:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002206b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002206f:	83 c0 08             	add    eax,0x8
c0022072:	01 c0                	add    eax,eax
c0022074:	40                   	inc    eax
c0022075:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022078:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002207b:	50                   	push   eax
c002207c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002207f:	e8 60 fe ff ff       	call   c0021ee4 <IOAPIC::read(int)>
c0022084:	83 c4 08             	add    esp,0x8
c0022087:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002208a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022091:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022094:	c1 e0 18             	shl    eax,0x18
c0022097:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002209a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002209d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00220a0:	52                   	push   edx
c00220a1:	50                   	push   eax
c00220a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220a5:	e8 58 ff ff ff       	call   c0022002 <IOAPIC::write(int, int)>
c00220aa:	83 c4 0c             	add    esp,0xc
c00220ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00220b0:	50                   	push   eax
c00220b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220b4:	e8 2b fe ff ff       	call   c0021ee4 <IOAPIC::read(int)>
c00220b9:	83 c4 08             	add    esp,0x8
c00220bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00220bf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00220c6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00220cd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00220d4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00220d8:	74 09                	je     c00220e3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00220da:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00220e1:	eb 07                	jmp    c00220ea <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00220e3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00220ea:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00220ee:	74 09                	je     c00220f9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00220f0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00220f7:	eb 07                	jmp    c0022100 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00220f9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0022100:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0022107:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002210b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002210e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022111:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022114:	52                   	push   edx
c0022115:	50                   	push   eax
c0022116:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022119:	e8 e4 fe ff ff       	call   c0022002 <IOAPIC::write(int, int)>
c002211e:	83 c4 0c             	add    esp,0xc
c0022121:	90                   	nop
c0022122:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0022125:	c9                   	leave  
c0022126:	c3                   	ret    
c0022127:	90                   	nop

c0022128 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022128:	55                   	push   ebp
c0022129:	89 e5                	mov    ebp,esp
c002212b:	57                   	push   edi
c002212c:	56                   	push   esi
c002212d:	53                   	push   ebx
c002212e:	83 ec 2c             	sub    esp,0x2c
c0022131:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022134:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022137:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002213b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002213f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022143:	74 5a                	je     c002219f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022145:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022149:	7f 44                	jg     c002218f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002214b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002214e:	05 a0 83 02 c0       	add    eax,0xc00283a0
c0022153:	8a 00                	mov    al,BYTE PTR [eax]
c0022155:	0f b6 c0             	movzx  eax,al
c0022158:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002215b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002215e:	66 8b 84 00 a0 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6a60]
c0022166:	0f b7 c0             	movzx  eax,ax
c0022169:	83 e0 02             	and    eax,0x2
c002216c:	85 c0                	test   eax,eax
c002216e:	74 04                	je     c0022174 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022170:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022174:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022177:	66 8b 84 00 a0 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6a60]
c002217f:	0f b7 c0             	movzx  eax,ax
c0022182:	83 e0 08             	and    eax,0x8
c0022185:	85 c0                	test   eax,eax
c0022187:	74 16                	je     c002219f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022189:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002218d:	eb 10                	jmp    c002219f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002218f:	83 ec 0c             	sub    esp,0xc
c0022192:	68 0c 7d 02 c0       	push   0xc0027d0c
c0022197:	e8 65 2e ff ff       	call   c0015001 <Krnl::panic(char const*)>
c002219c:	83 c4 10             	add    esp,0x10
c002219f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00221a3:	a1 00 ac 02 c0       	mov    eax,ds:0xc002ac00
c00221a8:	83 ec 08             	sub    esp,0x8
c00221ab:	50                   	push   eax
c00221ac:	68 44 7d 02 c0       	push   0xc0027d44
c00221b1:	e8 89 ae fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00221b6:	83 c4 10             	add    esp,0x10
c00221b9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00221c0:	a1 00 ac 02 c0       	mov    eax,ds:0xc002ac00
c00221c5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00221c8:	7d 67                	jge    c0022231 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00221ca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00221cd:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c00221d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00221d7:	83 ec 08             	sub    esp,0x8
c00221da:	52                   	push   edx
c00221db:	50                   	push   eax
c00221dc:	e8 d1 fc ff ff       	call   c0021eb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00221e1:	83 c4 10             	add    esp,0x10
c00221e4:	84 c0                	test   al,al
c00221e6:	74 44                	je     c002222c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00221e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00221eb:	8b 1c 85 20 ac 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd53e0]
c00221f2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00221f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00221f9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00221fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022200:	83 c0 20             	add    eax,0x20
c0022203:	0f b6 f0             	movzx  esi,al
c0022206:	b8 00 00 00 00       	mov    eax,0x0
c002220b:	99                   	cdq    
c002220c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002220f:	0f b6 c9             	movzx  ecx,cl
c0022212:	83 ec 04             	sub    esp,0x4
c0022215:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0022218:	57                   	push   edi
c0022219:	56                   	push   esi
c002221a:	52                   	push   edx
c002221b:	50                   	push   eax
c002221c:	51                   	push   ecx
c002221d:	53                   	push   ebx
c002221e:	e8 0b fe ff ff       	call   c002202e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022223:	83 c4 20             	add    esp,0x20
c0022226:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002222a:	eb 05                	jmp    c0022231 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002222c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002222f:	eb 8f                	jmp    c00221c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022231:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022234:	83 f0 01             	xor    eax,0x1
c0022237:	84 c0                	test   al,al
c0022239:	74 10                	je     c002224b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002223b:	83 ec 0c             	sub    esp,0xc
c002223e:	68 5b 7d 02 c0       	push   0xc0027d5b
c0022243:	e8 b9 2d ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0022248:	83 c4 10             	add    esp,0x10
c002224b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002224f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022256:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002225a:	7f 65                	jg     c00222c1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002225c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002225f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022262:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022269:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002226c:	01 ca                	add    edx,ecx
c002226e:	83 c2 54             	add    edx,0x54
c0022271:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022275:	85 c0                	test   eax,eax
c0022277:	75 43                	jne    c00222bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002227c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002227f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022286:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022289:	01 ca                	add    edx,ecx
c002228b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002228e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022291:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022298:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002229b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00222a2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00222a5:	01 ca                	add    edx,ecx
c00222a7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00222ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00222b0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00222b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00222b7:	83 e8 20             	sub    eax,0x20
c00222ba:	eb 1a                	jmp    c00222d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00222bc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00222bf:	eb 95                	jmp    c0022256 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00222c1:	83 ec 0c             	sub    esp,0xc
c00222c4:	68 68 7d 02 c0       	push   0xc0027d68
c00222c9:	e8 33 2d ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00222ce:	83 c4 10             	add    esp,0x10
c00222d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00222d6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00222d9:	5b                   	pop    ebx
c00222da:	5e                   	pop    esi
c00222db:	5f                   	pop    edi
c00222dc:	5d                   	pop    ebp
c00222dd:	c3                   	ret    

c00222de <PIC::disable()>:
c00222de:	55                   	push   ebp
c00222df:	89 e5                	mov    ebp,esp
c00222e1:	83 ec 10             	sub    esp,0x10
c00222e4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00222ea:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00222ee:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00222f1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00222f5:	ee                   	out    dx,al
c00222f6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00222fc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0022300:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022303:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022307:	ee                   	out    dx,al
c0022308:	90                   	nop
c0022309:	c9                   	leave  
c002230a:	c3                   	ret    
c002230b:	90                   	nop

c002230c <PIC::close(int, int, void*)>:
c002230c:	55                   	push   ebp
c002230d:	89 e5                	mov    ebp,esp
c002230f:	83 ec 08             	sub    esp,0x8
c0022312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022315:	8b 00                	mov    eax,DWORD PTR [eax]
c0022317:	83 c0 3c             	add    eax,0x3c
c002231a:	8b 00                	mov    eax,DWORD PTR [eax]
c002231c:	83 ec 0c             	sub    esp,0xc
c002231f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022322:	ff d0                	call   eax
c0022324:	83 c4 10             	add    esp,0x10
c0022327:	b8 00 00 00 00       	mov    eax,0x0
c002232c:	c9                   	leave  
c002232d:	c3                   	ret    

c002232e <PIC::PIC()>:
c002232e:	83 ec 0c             	sub    esp,0xc
c0022331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022335:	83 ec 08             	sub    esp,0x8
c0022338:	68 14 7e 02 c0       	push   0xc0027e14
c002233d:	50                   	push   eax
c002233e:	e8 9f cb fe ff       	call   c000eee2 <InterruptController::InterruptController(char const*)>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c002234b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234f:	89 10                	mov    DWORD PTR [eax],edx
c0022351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022355:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002235b:	0f b6 d0             	movzx  edx,al
c002235e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022362:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022373:	0f b6 d0             	movzx  edx,al
c0022376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002237f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022383:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022389:	8d 50 01             	lea    edx,[eax+0x1]
c002238c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022390:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022396:	0f b6 d0             	movzx  edx,al
c0022399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223a1:	83 e1 3f             	and    ecx,0x3f
c00223a4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223b2:	0f b6 d0             	movzx  edx,al
c00223b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00223c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ca:	0f b6 d0             	movzx  edx,al
c00223cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00223d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223e0:	8d 50 01             	lea    edx,[eax+0x1]
c00223e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223e7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223ed:	0f b6 d0             	movzx  edx,al
c00223f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223f8:	83 e1 3f             	and    ecx,0x3f
c00223fb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223ff:	90                   	nop
c0022400:	83 c4 0c             	add    esp,0xc
c0022403:	c3                   	ret    

c0022404 <PIC::ioWait()>:
c0022404:	eb 00                	jmp    c0022406 <PIC::ioWait()+0x2>
c0022406:	eb 00                	jmp    c0022408 <PIC::ioWait()+0x4>
c0022408:	90                   	nop
c0022409:	c3                   	ret    

c002240a <PIC::getIRQReg(int)>:
c002240a:	55                   	push   ebp
c002240b:	89 e5                	mov    ebp,esp
c002240d:	83 ec 10             	sub    esp,0x10
c0022410:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022413:	0f b6 c0             	movzx  eax,al
c0022416:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002241c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002241f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022422:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022426:	ee                   	out    dx,al
c0022427:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002242a:	0f b6 c0             	movzx  eax,al
c002242d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022433:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022436:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022439:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002243d:	ee                   	out    dx,al
c002243e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022444:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022448:	89 c2                	mov    edx,eax
c002244a:	ec                   	in     al,dx
c002244b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002244e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022451:	0f b6 c0             	movzx  eax,al
c0022454:	c1 e0 08             	shl    eax,0x8
c0022457:	89 c1                	mov    ecx,eax
c0022459:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002245f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022463:	89 c2                	mov    edx,eax
c0022465:	ec                   	in     al,dx
c0022466:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022469:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002246c:	0f b6 c0             	movzx  eax,al
c002246f:	09 c8                	or     eax,ecx
c0022471:	c9                   	leave  
c0022472:	c3                   	ret    
c0022473:	90                   	nop

c0022474 <PIC::eoi(unsigned char)>:
c0022474:	55                   	push   ebp
c0022475:	89 e5                	mov    ebp,esp
c0022477:	83 ec 14             	sub    esp,0x14
c002247a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002247d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022480:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022484:	75 1e                	jne    c00224a4 <PIC::eoi(unsigned char)+0x30>
c0022486:	6a 0b                	push   0xb
c0022488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002248b:	e8 7a ff ff ff       	call   c002240a <PIC::getIRQReg(int)>
c0022490:	83 c4 08             	add    esp,0x8
c0022493:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022497:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002249b:	25 80 00 00 00       	and    eax,0x80
c00224a0:	85 c0                	test   eax,eax
c00224a2:	74 5f                	je     c0022503 <PIC::eoi(unsigned char)+0x8f>
c00224a4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00224a8:	75 2d                	jne    c00224d7 <PIC::eoi(unsigned char)+0x63>
c00224aa:	6a 0b                	push   0xb
c00224ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00224af:	e8 56 ff ff ff       	call   c002240a <PIC::getIRQReg(int)>
c00224b4:	83 c4 08             	add    esp,0x8
c00224b7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00224bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224be:	66 85 c0             	test   ax,ax
c00224c1:	78 14                	js     c00224d7 <PIC::eoi(unsigned char)+0x63>
c00224c3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00224c9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00224cd:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00224d0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00224d4:	ee                   	out    dx,al
c00224d5:	eb 2d                	jmp    c0022504 <PIC::eoi(unsigned char)+0x90>
c00224d7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00224db:	76 12                	jbe    c00224ef <PIC::eoi(unsigned char)+0x7b>
c00224dd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00224e3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00224e7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00224ea:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00224ee:	ee                   	out    dx,al
c00224ef:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00224f5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00224f9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00224fc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022500:	ee                   	out    dx,al
c0022501:	eb 01                	jmp    c0022504 <PIC::eoi(unsigned char)+0x90>
c0022503:	90                   	nop
c0022504:	c9                   	leave  
c0022505:	c3                   	ret    

c0022506 <PIC::remap()>:
c0022506:	55                   	push   ebp
c0022507:	89 e5                	mov    ebp,esp
c0022509:	83 ec 48             	sub    esp,0x48
c002250c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022513:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002251a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022520:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022523:	89 c2                	mov    edx,eax
c0022525:	ec                   	in     al,dx
c0022526:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022529:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002252c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002252f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022535:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022538:	89 c2                	mov    edx,eax
c002253a:	ec                   	in     al,dx
c002253b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002253e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022541:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022544:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002254a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002254e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022551:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022554:	ee                   	out    dx,al
c0022555:	83 ec 0c             	sub    esp,0xc
c0022558:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002255b:	e8 a4 fe ff ff       	call   c0022404 <PIC::ioWait()>
c0022560:	83 c4 10             	add    esp,0x10
c0022563:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022569:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002256d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022570:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022573:	ee                   	out    dx,al
c0022574:	83 ec 0c             	sub    esp,0xc
c0022577:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002257a:	e8 85 fe ff ff       	call   c0022404 <PIC::ioWait()>
c002257f:	83 c4 10             	add    esp,0x10
c0022582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022585:	0f b6 c0             	movzx  eax,al
c0022588:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002258e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022591:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022594:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022597:	ee                   	out    dx,al
c0022598:	83 ec 0c             	sub    esp,0xc
c002259b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002259e:	e8 61 fe ff ff       	call   c0022404 <PIC::ioWait()>
c00225a3:	83 c4 10             	add    esp,0x10
c00225a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00225a9:	0f b6 c0             	movzx  eax,al
c00225ac:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00225b2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00225b5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00225b8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00225bb:	ee                   	out    dx,al
c00225bc:	83 ec 0c             	sub    esp,0xc
c00225bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225c2:	e8 3d fe ff ff       	call   c0022404 <PIC::ioWait()>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00225d0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00225d4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00225d7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00225da:	ee                   	out    dx,al
c00225db:	83 ec 0c             	sub    esp,0xc
c00225de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225e1:	e8 1e fe ff ff       	call   c0022404 <PIC::ioWait()>
c00225e6:	83 c4 10             	add    esp,0x10
c00225e9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00225ef:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00225f3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00225f6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00225f9:	ee                   	out    dx,al
c00225fa:	83 ec 0c             	sub    esp,0xc
c00225fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022600:	e8 ff fd ff ff       	call   c0022404 <PIC::ioWait()>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002260e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022612:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022615:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022618:	ee                   	out    dx,al
c0022619:	83 ec 0c             	sub    esp,0xc
c002261c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002261f:	e8 e0 fd ff ff       	call   c0022404 <PIC::ioWait()>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002262d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022631:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022634:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022637:	ee                   	out    dx,al
c0022638:	83 ec 0c             	sub    esp,0xc
c002263b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002263e:	e8 c1 fd ff ff       	call   c0022404 <PIC::ioWait()>
c0022643:	83 c4 10             	add    esp,0x10
c0022646:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002264a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022650:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022653:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022656:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022659:	ee                   	out    dx,al
c002265a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002265e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022664:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022667:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002266a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002266d:	ee                   	out    dx,al
c002266e:	90                   	nop
c002266f:	c9                   	leave  
c0022670:	c3                   	ret    
c0022671:	90                   	nop

c0022672 <PIC::open(int, int, void*)>:
c0022672:	55                   	push   ebp
c0022673:	89 e5                	mov    ebp,esp
c0022675:	83 ec 18             	sub    esp,0x18
c0022678:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002267e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022682:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022685:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022689:	ee                   	out    dx,al
c002268a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022690:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022694:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022697:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002269b:	ee                   	out    dx,al
c002269c:	83 ec 0c             	sub    esp,0xc
c002269f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226a2:	e8 5f fe ff ff       	call   c0022506 <PIC::remap()>
c00226a7:	83 c4 10             	add    esp,0x10
c00226aa:	b8 00 00 00 00       	mov    eax,0x0
c00226af:	c9                   	leave  
c00226b0:	c3                   	ret    
c00226b1:	66 90                	xchg   ax,ax
c00226b3:	90                   	nop

c00226b4 <APICTimer::close(int, int, void*)>:
c00226b4:	b8 00 00 00 00       	mov    eax,0x0
c00226b9:	c3                   	ret    
c00226ba:	66 90                	xchg   ax,ax

c00226bc <apicTimerHandler(regs*, void*)>:
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00226c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00226c5:	b8 10 27 00 00       	mov    eax,0x2710
c00226ca:	ba 00 00 00 00       	mov    edx,0x0
c00226cf:	f7 f1                	div    ecx
c00226d1:	83 ec 0c             	sub    esp,0xc
c00226d4:	50                   	push   eax
c00226d5:	e8 7b e7 fe ff       	call   c0010e55 <timerHandler(unsigned int)>
c00226da:	83 c4 10             	add    esp,0x10
c00226dd:	90                   	nop
c00226de:	83 c4 0c             	add    esp,0xc
c00226e1:	c3                   	ret    
c00226e2:	66 90                	xchg   ax,ax

c00226e4 <APICTimer::write(int)>:
c00226e4:	83 ec 1c             	sub    esp,0x1c
c00226e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226eb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00226ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00226f5:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00226fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022700:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022706:	83 ec 0c             	sub    esp,0xc
c0022709:	50                   	push   eax
c002270a:	e8 e1 f4 ff ff       	call   c0021bf0 <APIC::getBase()>
c002270f:	83 c4 10             	add    esp,0x10
c0022712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022716:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c002271b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002271f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022723:	05 e0 03 00 00       	add    eax,0x3e0
c0022728:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002272e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022732:	05 80 03 00 00       	add    eax,0x380
c0022737:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002273d:	fb                   	sti    
c002273e:	66 90                	xchg   ax,ax
c0022740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022744:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002274a:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c002274f:	39 c2                	cmp    edx,eax
c0022751:	76 05                	jbe    c0022758 <APICTimer::write(int)+0x74>
c0022753:	eb eb                	jmp    c0022740 <APICTimer::write(int)+0x5c>
c0022755:	8d 76 00             	lea    esi,[esi+0x0]
c0022758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002275c:	05 20 03 00 00       	add    eax,0x320
c0022761:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002276b:	05 90 03 00 00       	add    eax,0x390
c0022770:	8b 00                	mov    eax,DWORD PTR [eax]
c0022772:	f7 d0                	not    eax
c0022774:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022778:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002277c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022780:	ba 00 00 00 00       	mov    edx,0x0
c0022785:	f7 f1                	div    ecx
c0022787:	89 04 24             	mov    DWORD PTR [esp],eax
c002278a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002278e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022794:	0d 00 00 02 00       	or     eax,0x20000
c0022799:	89 c2                	mov    edx,eax
c002279b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002279f:	05 20 03 00 00       	add    eax,0x320
c00227a4:	89 10                	mov    DWORD PTR [eax],edx
c00227a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227aa:	05 e0 03 00 00       	add    eax,0x3e0
c00227af:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00227b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227b9:	05 80 03 00 00       	add    eax,0x380
c00227be:	89 c2                	mov    edx,eax
c00227c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00227c3:	89 02                	mov    DWORD PTR [edx],eax
c00227c5:	90                   	nop
c00227c6:	83 c4 1c             	add    esp,0x1c
c00227c9:	c3                   	ret    
c00227ca:	66 90                	xchg   ax,ax

c00227cc <APICTimer::open(int, int, void*)>:
c00227cc:	57                   	push   edi
c00227cd:	56                   	push   esi
c00227ce:	53                   	push   ebx
c00227cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00227d5:	83 c0 24             	add    eax,0x24
c00227d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00227da:	83 ec 08             	sub    esp,0x8
c00227dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227e5:	ff d0                	call   eax
c00227e7:	83 c4 10             	add    esp,0x10
c00227ea:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c00227ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00227f5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00227fb:	83 ec 0c             	sub    esp,0xc
c00227fe:	50                   	push   eax
c00227ff:	e8 ec f3 ff ff       	call   c0021bf0 <APIC::getBase()>
c0022804:	83 c4 10             	add    esp,0x10
c0022807:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022811:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022817:	0f b6 f8             	movzx  edi,al
c002281a:	89 d0                	mov    eax,edx
c002281c:	ba 00 00 00 00       	mov    edx,0x0
c0022821:	89 c1                	mov    ecx,eax
c0022823:	80 e5 ff             	and    ch,0xff
c0022826:	89 cb                	mov    ebx,ecx
c0022828:	0f b6 f2             	movzx  esi,dl
c002282b:	89 d8                	mov    eax,ebx
c002282d:	89 f2                	mov    edx,esi
c002282f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022833:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022836:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002283a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002283e:	83 e0 00             	and    eax,0x0
c0022841:	09 d0                	or     eax,edx
c0022843:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022851:	8d 50 01             	lea    edx,[eax+0x1]
c0022854:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022858:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002285e:	0f b6 d0             	movzx  edx,al
c0022861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022865:	83 c2 08             	add    edx,0x8
c0022868:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002286c:	0f b6 c9             	movzx  ecx,cl
c002286f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022875:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022881:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002288f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022895:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022899:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002289f:	83 ec 0c             	sub    esp,0xc
c00228a2:	51                   	push   ecx
c00228a3:	6a 01                	push   0x1
c00228a5:	68 bc 26 02 c0       	push   0xc00226bc
c00228aa:	52                   	push   edx
c00228ab:	50                   	push   eax
c00228ac:	e8 79 bc fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00228b1:	83 c4 20             	add    esp,0x20
c00228b4:	89 c2                	mov    edx,eax
c00228b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ba:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00228c0:	b8 00 00 00 00       	mov    eax,0x0
c00228c5:	5b                   	pop    ebx
c00228c6:	5e                   	pop    esi
c00228c7:	5f                   	pop    edi
c00228c8:	c3                   	ret    
c00228c9:	90                   	nop
c00228ca:	66 90                	xchg   ax,ax

c00228cc <APICTimer::APICTimer()>:
c00228cc:	83 ec 0c             	sub    esp,0xc
c00228cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d3:	83 ec 08             	sub    esp,0x8
c00228d6:	68 80 7e 02 c0       	push   0xc0027e80
c00228db:	50                   	push   eax
c00228dc:	e8 e3 e4 fe ff       	call   c0010dc4 <Timer::Timer(char const*)>
c00228e1:	83 c4 10             	add    esp,0x10
c00228e4:	ba 94 7e 02 c0       	mov    edx,0xc0027e94
c00228e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ed:	89 10                	mov    DWORD PTR [eax],edx
c00228ef:	90                   	nop
c00228f0:	83 c4 0c             	add    esp,0xc
c00228f3:	c3                   	ret    

c00228f4 <PIT::write(int)>:
c00228f4:	83 ec 10             	sub    esp,0x10
c00228f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00228fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00228ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022909:	a3 44 ac 02 c0       	mov    ds:0xc002ac44,eax
c002290e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022913:	99                   	cdq    
c0022914:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002291c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022923:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022928:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002292c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022931:	ee                   	out    dx,al
c0022932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022936:	0f b6 c0             	movzx  eax,al
c0022939:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022940:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022944:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022948:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002294d:	ee                   	out    dx,al
c002294e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022952:	c1 f8 08             	sar    eax,0x8
c0022955:	0f b6 c0             	movzx  eax,al
c0022958:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002295f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022963:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022967:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002296c:	ee                   	out    dx,al
c002296d:	90                   	nop
c002296e:	83 c4 10             	add    esp,0x10
c0022971:	c3                   	ret    
c0022972:	66 90                	xchg   ax,ax

c0022974 <pitHandler(regs*, void*)>:
c0022974:	83 ec 0c             	sub    esp,0xc
c0022977:	8b 0d 44 ac 02 c0    	mov    ecx,DWORD PTR ds:0xc002ac44
c002297d:	b8 10 27 00 00       	mov    eax,0x2710
c0022982:	99                   	cdq    
c0022983:	f7 f9                	idiv   ecx
c0022985:	83 ec 0c             	sub    esp,0xc
c0022988:	50                   	push   eax
c0022989:	e8 c7 e4 fe ff       	call   c0010e55 <timerHandler(unsigned int)>
c002298e:	83 c4 10             	add    esp,0x10
c0022991:	90                   	nop
c0022992:	83 c4 0c             	add    esp,0xc
c0022995:	c3                   	ret    
c0022996:	66 90                	xchg   ax,ax

c0022998 <PIT::open(int, int, void*)>:
c0022998:	83 ec 0c             	sub    esp,0xc
c002299b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299f:	8b 00                	mov    eax,DWORD PTR [eax]
c00229a1:	83 c0 24             	add    eax,0x24
c00229a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229a6:	83 ec 08             	sub    esp,0x8
c00229a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229b1:	ff d0                	call   eax
c00229b3:	83 c4 10             	add    esp,0x10
c00229b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ba:	83 ec 0c             	sub    esp,0xc
c00229bd:	6a 00                	push   0x0
c00229bf:	6a 01                	push   0x1
c00229c1:	68 74 29 02 c0       	push   0xc0022974
c00229c6:	6a 00                	push   0x0
c00229c8:	50                   	push   eax
c00229c9:	e8 5c bb fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229ce:	83 c4 20             	add    esp,0x20
c00229d1:	89 c2                	mov    edx,eax
c00229d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229dd:	b8 00 00 00 00       	mov    eax,0x0
c00229e2:	83 c4 0c             	add    esp,0xc
c00229e5:	c3                   	ret    
c00229e6:	66 90                	xchg   ax,ax

c00229e8 <PIT::close(int, int, void*)>:
c00229e8:	83 ec 0c             	sub    esp,0xc
c00229eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00229f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fd:	6a 01                	push   0x1
c00229ff:	68 74 29 02 c0       	push   0xc0022974
c0022a04:	6a 00                	push   0x0
c0022a06:	50                   	push   eax
c0022a07:	e8 68 bb fe ff       	call   c000e574 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022a0c:	83 c4 10             	add    esp,0x10
c0022a0f:	b8 00 00 00 00       	mov    eax,0x0
c0022a14:	83 c4 0c             	add    esp,0xc
c0022a17:	c3                   	ret    

c0022a18 <PIT::PIT()>:
c0022a18:	83 ec 0c             	sub    esp,0xc
c0022a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a1f:	83 ec 08             	sub    esp,0x8
c0022a22:	68 bc 7e 02 c0       	push   0xc0027ebc
c0022a27:	50                   	push   eax
c0022a28:	e8 97 e3 fe ff       	call   c0010dc4 <Timer::Timer(char const*)>
c0022a2d:	83 c4 10             	add    esp,0x10
c0022a30:	ba e4 7e 02 c0       	mov    edx,0xc0027ee4
c0022a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a39:	89 10                	mov    DWORD PTR [eax],edx
c0022a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a45:	0f b6 d0             	movzx  edx,al
c0022a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a5d:	0f b6 d0             	movzx  edx,al
c0022a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a64:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a73:	8d 50 01             	lea    edx,[eax+0x1]
c0022a76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a7a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a80:	0f b6 d0             	movzx  edx,al
c0022a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a87:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a8b:	83 e1 3f             	and    ecx,0x3f
c0022a8e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a92:	90                   	nop
c0022a93:	83 c4 0c             	add    esp,0xc
c0022a96:	c3                   	ret    
c0022a97:	66 90                	xchg   ax,ax
c0022a99:	66 90                	xchg   ax,ax
c0022a9b:	66 90                	xchg   ax,ax
c0022a9d:	66 90                	xchg   ax,ax
c0022a9f:	90                   	nop

c0022aa0 <avxDetect>:
c0022aa0:	b8 00 00 00 00       	mov    eax,0x0
c0022aa5:	c3                   	ret    

c0022aa6 <avxSave>:
c0022aa6:	c3                   	ret    

c0022aa7 <avxLoad>:
c0022aa7:	c3                   	ret    

c0022aa8 <avxInit>:
c0022aa8:	c3                   	ret    

c0022aa9 <avxClose>:
c0022aa9:	c3                   	ret    

c0022aaa <wouldSheSayYes>:
c0022aaa:	c3                   	ret    
c0022aab:	49                   	dec    ecx
c0022aac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022ab0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022ab4:	75 20                	jne    c0022ad6 <sseDetect.noSSE+0x1>
c0022ab6:	4e                   	dec    esi
c0022ab7:	79 61                	jns    c0022b1a <x87Detect+0x14>
c0022ab9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022abe:	66 90                	xchg   ax,ax

c0022ac0 <absolutelyNoChanceInHell>:
c0022ac0:	b8 01 00 00 00       	mov    eax,0x1
c0022ac5:	0f a2                	cpuid  
c0022ac7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022acd:	74 06                	je     c0022ad5 <sseDetect.noSSE>
c0022acf:	b8 01 00 00 00       	mov    eax,0x1
c0022ad4:	c3                   	ret    

c0022ad5 <sseDetect.noSSE>:
c0022ad5:	31 c0                	xor    eax,eax
c0022ad7:	c3                   	ret    

c0022ad8 <sseSave>:
c0022ad8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0022add:	c3                   	ret    

c0022ade <sseLoad>:
c0022ade:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022ae3:	c3                   	ret    

c0022ae4 <sseInit>:
c0022ae4:	e8 48 00 00 00       	call   c0022b31 <x87Init>
c0022ae9:	0f 20 e0             	mov    eax,cr4
c0022aec:	66 0d 00 06          	or     ax,0x600
c0022af0:	0f 22 e0             	mov    cr4,eax
c0022af3:	c3                   	ret    

c0022af4 <sseClose>:
c0022af4:	c3                   	ret    
c0022af5:	66 90                	xchg   ax,ax
c0022af7:	66 90                	xchg   ax,ax
c0022af9:	66 90                	xchg   ax,ax
c0022afb:	66 90                	xchg   ax,ax
c0022afd:	66 90                	xchg   ax,ax
c0022aff:	90                   	nop

c0022b00 <value_37F>:
c0022b00:	7f 03                	jg     c0022b05 <value_37A+0x1>

c0022b02 <value_37E>:
c0022b02:	7e 03                	jle    c0022b07 <x87Detect+0x1>

c0022b04 <value_37A>:
c0022b04:	7a 03                	jp     c0022b09 <x87Detect+0x3>

c0022b06 <x87Detect>:
c0022b06:	b8 01 00 00 00       	mov    eax,0x1
c0022b0b:	0f a2                	cpuid  
c0022b0d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022b13:	74 06                	je     c0022b1b <x87Detect.nox87>
c0022b15:	b8 01 00 00 00       	mov    eax,0x1
c0022b1a:	c3                   	ret    

c0022b1b <x87Detect.nox87>:
c0022b1b:	b8 00 00 00 00       	mov    eax,0x0
c0022b20:	c3                   	ret    

c0022b21 <x87Save>:
c0022b21:	55                   	push   ebp
c0022b22:	89 e5                	mov    ebp,esp
c0022b24:	dd 35 51 2b 02 c0    	fnsave ds:0xc0022b51
c0022b2a:	5d                   	pop    ebp
c0022b2b:	c3                   	ret    

c0022b2c <x87Load>:
c0022b2c:	55                   	push   ebp
c0022b2d:	89 e5                	mov    ebp,esp
c0022b2f:	5d                   	pop    ebp
c0022b30:	c3                   	ret    

c0022b31 <x87Init>:
c0022b31:	0f 20 c0             	mov    eax,cr0
c0022b34:	66 25 fb ff          	and    ax,0xfffb
c0022b38:	66 0d 22 00          	or     ax,0x22
c0022b3c:	0f 22 c0             	mov    cr0,eax
c0022b3f:	db e3                	fninit 
c0022b41:	0f 06                	clts   
c0022b43:	dd 35 51 2b 02 c0    	fnsave ds:0xc0022b51
c0022b49:	c3                   	ret    

c0022b4a <x87Close>:
c0022b4a:	c3                   	ret    
c0022b4b:	90                   	nop
c0022b4c:	90                   	nop
c0022b4d:	90                   	nop
c0022b4e:	90                   	nop
c0022b4f:	90                   	nop
	...

c0022b51 <fpuSaveArea>:
	...
c0022d51:	66 90                	xchg   ax,ax
c0022d53:	90                   	nop

c0022d54 <__do_global_ctors_aux>:
c0022d54:	a1 f0 3e 02 c0       	mov    eax,ds:0xc0023ef0
c0022d59:	83 f8 ff             	cmp    eax,0xffffffff
c0022d5c:	74 1a                	je     c0022d78 <__do_global_ctors_aux+0x24>
c0022d5e:	55                   	push   ebp
c0022d5f:	89 e5                	mov    ebp,esp
c0022d61:	53                   	push   ebx
c0022d62:	52                   	push   edx
c0022d63:	bb f0 3e 02 c0       	mov    ebx,0xc0023ef0
c0022d68:	ff d0                	call   eax
c0022d6a:	83 eb 04             	sub    ebx,0x4
c0022d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d6f:	83 f8 ff             	cmp    eax,0xffffffff
c0022d72:	75 f4                	jne    c0022d68 <__do_global_ctors_aux+0x14>
c0022d74:	58                   	pop    eax
c0022d75:	5b                   	pop    ebx
c0022d76:	5d                   	pop    ebp
c0022d77:	c3                   	ret    
c0022d78:	c3                   	ret    
c0022d79:	66 90                	xchg   ax,ax
c0022d7b:	90                   	nop

c0022d7c <__divdi3>:
c0022d7c:	55                   	push   ebp
c0022d7d:	57                   	push   edi
c0022d7e:	56                   	push   esi
c0022d7f:	53                   	push   ebx
c0022d80:	83 ec 1c             	sub    esp,0x1c
c0022d83:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022d87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d8b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022d8e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022d92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d9a:	85 db                	test   ebx,ebx
c0022d9c:	0f 88 8e 00 00 00    	js     c0022e30 <__divdi3+0xb4>
c0022da2:	89 dd                	mov    ebp,ebx
c0022da4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022dac:	89 d3                	mov    ebx,edx
c0022dae:	85 d2                	test   edx,edx
c0022db0:	79 0d                	jns    c0022dbf <__divdi3+0x43>
c0022db2:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022db6:	f7 d8                	neg    eax
c0022db8:	83 d2 00             	adc    edx,0x0
c0022dbb:	f7 da                	neg    edx
c0022dbd:	89 d3                	mov    ebx,edx
c0022dbf:	89 c7                	mov    edi,eax
c0022dc1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022dc4:	85 db                	test   ebx,ebx
c0022dc6:	75 48                	jne    c0022e10 <__divdi3+0x94>
c0022dc8:	39 ef                	cmp    edi,ebp
c0022dca:	76 24                	jbe    c0022df0 <__divdi3+0x74>
c0022dcc:	89 ea                	mov    edx,ebp
c0022dce:	f7 f7                	div    edi
c0022dd0:	89 c1                	mov    ecx,eax
c0022dd2:	31 f6                	xor    esi,esi
c0022dd4:	89 c8                	mov    eax,ecx
c0022dd6:	89 f2                	mov    edx,esi
c0022dd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ddc:	85 c9                	test   ecx,ecx
c0022dde:	74 07                	je     c0022de7 <__divdi3+0x6b>
c0022de0:	f7 d8                	neg    eax
c0022de2:	83 d2 00             	adc    edx,0x0
c0022de5:	f7 da                	neg    edx
c0022de7:	83 c4 1c             	add    esp,0x1c
c0022dea:	5b                   	pop    ebx
c0022deb:	5e                   	pop    esi
c0022dec:	5f                   	pop    edi
c0022ded:	5d                   	pop    ebp
c0022dee:	c3                   	ret    
c0022def:	90                   	nop
c0022df0:	85 ff                	test   edi,edi
c0022df2:	75 0b                	jne    c0022dff <__divdi3+0x83>
c0022df4:	b8 01 00 00 00       	mov    eax,0x1
c0022df9:	31 d2                	xor    edx,edx
c0022dfb:	f7 f3                	div    ebx
c0022dfd:	89 c7                	mov    edi,eax
c0022dff:	31 d2                	xor    edx,edx
c0022e01:	89 e8                	mov    eax,ebp
c0022e03:	f7 f7                	div    edi
c0022e05:	89 c6                	mov    esi,eax
c0022e07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022e0a:	f7 f7                	div    edi
c0022e0c:	89 c1                	mov    ecx,eax
c0022e0e:	eb c4                	jmp    c0022dd4 <__divdi3+0x58>
c0022e10:	39 eb                	cmp    ebx,ebp
c0022e12:	77 3c                	ja     c0022e50 <__divdi3+0xd4>
c0022e14:	0f bd f3             	bsr    esi,ebx
c0022e17:	83 f6 1f             	xor    esi,0x1f
c0022e1a:	75 40                	jne    c0022e5c <__divdi3+0xe0>
c0022e1c:	39 eb                	cmp    ebx,ebp
c0022e1e:	72 09                	jb     c0022e29 <__divdi3+0xad>
c0022e20:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022e23:	0f 87 97 00 00 00    	ja     c0022ec0 <__divdi3+0x144>
c0022e29:	b9 01 00 00 00       	mov    ecx,0x1
c0022e2e:	eb a4                	jmp    c0022dd4 <__divdi3+0x58>
c0022e30:	f7 d9                	neg    ecx
c0022e32:	83 d3 00             	adc    ebx,0x0
c0022e35:	f7 db                	neg    ebx
c0022e37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022e3a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022e3e:	89 dd                	mov    ebp,ebx
c0022e40:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022e48:	e9 5f ff ff ff       	jmp    c0022dac <__divdi3+0x30>
c0022e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0022e50:	31 f6                	xor    esi,esi
c0022e52:	31 c9                	xor    ecx,ecx
c0022e54:	e9 7b ff ff ff       	jmp    c0022dd4 <__divdi3+0x58>
c0022e59:	8d 76 00             	lea    esi,[esi+0x0]
c0022e5c:	b8 20 00 00 00       	mov    eax,0x20
c0022e61:	29 f0                	sub    eax,esi
c0022e63:	89 f1                	mov    ecx,esi
c0022e65:	d3 e3                	shl    ebx,cl
c0022e67:	89 fa                	mov    edx,edi
c0022e69:	88 c1                	mov    cl,al
c0022e6b:	d3 ea                	shr    edx,cl
c0022e6d:	09 da                	or     edx,ebx
c0022e6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e73:	89 f1                	mov    ecx,esi
c0022e75:	d3 e7                	shl    edi,cl
c0022e77:	89 eb                	mov    ebx,ebp
c0022e79:	88 c1                	mov    cl,al
c0022e7b:	d3 eb                	shr    ebx,cl
c0022e7d:	89 f1                	mov    ecx,esi
c0022e7f:	d3 e5                	shl    ebp,cl
c0022e81:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022e84:	88 c1                	mov    cl,al
c0022e86:	d3 ea                	shr    edx,cl
c0022e88:	09 d5                	or     ebp,edx
c0022e8a:	89 e8                	mov    eax,ebp
c0022e8c:	89 da                	mov    edx,ebx
c0022e8e:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022e92:	89 d3                	mov    ebx,edx
c0022e94:	89 c5                	mov    ebp,eax
c0022e96:	f7 e7                	mul    edi
c0022e98:	39 d3                	cmp    ebx,edx
c0022e9a:	72 18                	jb     c0022eb4 <__divdi3+0x138>
c0022e9c:	74 0a                	je     c0022ea8 <__divdi3+0x12c>
c0022e9e:	89 e9                	mov    ecx,ebp
c0022ea0:	31 f6                	xor    esi,esi
c0022ea2:	e9 2d ff ff ff       	jmp    c0022dd4 <__divdi3+0x58>
c0022ea7:	90                   	nop
c0022ea8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022eab:	89 f1                	mov    ecx,esi
c0022ead:	d3 e7                	shl    edi,cl
c0022eaf:	39 c7                	cmp    edi,eax
c0022eb1:	73 eb                	jae    c0022e9e <__divdi3+0x122>
c0022eb3:	90                   	nop
c0022eb4:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022eb7:	31 f6                	xor    esi,esi
c0022eb9:	e9 16 ff ff ff       	jmp    c0022dd4 <__divdi3+0x58>
c0022ebe:	66 90                	xchg   ax,ax
c0022ec0:	31 c9                	xor    ecx,ecx
c0022ec2:	e9 0d ff ff ff       	jmp    c0022dd4 <__divdi3+0x58>
c0022ec7:	90                   	nop

c0022ec8 <__moddi3>:
c0022ec8:	55                   	push   ebp
c0022ec9:	57                   	push   edi
c0022eca:	56                   	push   esi
c0022ecb:	53                   	push   ebx
c0022ecc:	83 ec 2c             	sub    esp,0x2c
c0022ecf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022ed3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022ed7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022edb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022edf:	85 db                	test   ebx,ebx
c0022ee1:	0f 88 85 00 00 00    	js     c0022f6c <__moddi3+0xa4>
c0022ee7:	89 de                	mov    esi,ebx
c0022ee9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022ef1:	89 d7                	mov    edi,edx
c0022ef3:	85 d2                	test   edx,edx
c0022ef5:	79 09                	jns    c0022f00 <__moddi3+0x38>
c0022ef7:	f7 d8                	neg    eax
c0022ef9:	83 d2 00             	adc    edx,0x0
c0022efc:	f7 da                	neg    edx
c0022efe:	89 d7                	mov    edi,edx
c0022f00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f04:	89 cd                	mov    ebp,ecx
c0022f06:	85 ff                	test   edi,edi
c0022f08:	75 52                	jne    c0022f5c <__moddi3+0x94>
c0022f0a:	89 c3                	mov    ebx,eax
c0022f0c:	39 f0                	cmp    eax,esi
c0022f0e:	76 24                	jbe    c0022f34 <__moddi3+0x6c>
c0022f10:	89 c8                	mov    eax,ecx
c0022f12:	89 f2                	mov    edx,esi
c0022f14:	f7 f3                	div    ebx
c0022f16:	89 d6                	mov    esi,edx
c0022f18:	89 f0                	mov    eax,esi
c0022f1a:	31 d2                	xor    edx,edx
c0022f1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f20:	85 c9                	test   ecx,ecx
c0022f22:	74 07                	je     c0022f2b <__moddi3+0x63>
c0022f24:	f7 d8                	neg    eax
c0022f26:	83 d2 00             	adc    edx,0x0
c0022f29:	f7 da                	neg    edx
c0022f2b:	83 c4 2c             	add    esp,0x2c
c0022f2e:	5b                   	pop    ebx
c0022f2f:	5e                   	pop    esi
c0022f30:	5f                   	pop    edi
c0022f31:	5d                   	pop    ebp
c0022f32:	c3                   	ret    
c0022f33:	90                   	nop
c0022f34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022f38:	85 db                	test   ebx,ebx
c0022f3a:	75 0d                	jne    c0022f49 <__moddi3+0x81>
c0022f3c:	b8 01 00 00 00       	mov    eax,0x1
c0022f41:	31 d2                	xor    edx,edx
c0022f43:	f7 f7                	div    edi
c0022f45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f49:	89 f0                	mov    eax,esi
c0022f4b:	31 d2                	xor    edx,edx
c0022f4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f51:	f7 f7                	div    edi
c0022f53:	89 e8                	mov    eax,ebp
c0022f55:	f7 f7                	div    edi
c0022f57:	89 d6                	mov    esi,edx
c0022f59:	eb bd                	jmp    c0022f18 <__moddi3+0x50>
c0022f5b:	90                   	nop
c0022f5c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022f60:	39 f7                	cmp    edi,esi
c0022f62:	76 20                	jbe    c0022f84 <__moddi3+0xbc>
c0022f64:	89 c8                	mov    eax,ecx
c0022f66:	89 f2                	mov    edx,esi
c0022f68:	eb b2                	jmp    c0022f1c <__moddi3+0x54>
c0022f6a:	66 90                	xchg   ax,ax
c0022f6c:	f7 d9                	neg    ecx
c0022f6e:	83 d3 00             	adc    ebx,0x0
c0022f71:	f7 db                	neg    ebx
c0022f73:	89 de                	mov    esi,ebx
c0022f75:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022f7d:	e9 6f ff ff ff       	jmp    c0022ef1 <__moddi3+0x29>
c0022f82:	66 90                	xchg   ax,ax
c0022f84:	0f bd c7             	bsr    eax,edi
c0022f87:	83 f0 1f             	xor    eax,0x1f
c0022f8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022f8e:	75 24                	jne    c0022fb4 <__moddi3+0xec>
c0022f90:	39 f7                	cmp    edi,esi
c0022f92:	72 06                	jb     c0022f9a <__moddi3+0xd2>
c0022f94:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022f98:	77 0c                	ja     c0022fa6 <__moddi3+0xde>
c0022f9a:	89 e9                	mov    ecx,ebp
c0022f9c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022fa0:	19 fe                	sbb    esi,edi
c0022fa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022fa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022faa:	89 f2                	mov    edx,esi
c0022fac:	e9 6b ff ff ff       	jmp    c0022f1c <__moddi3+0x54>
c0022fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0022fb4:	b8 20 00 00 00       	mov    eax,0x20
c0022fb9:	89 c2                	mov    edx,eax
c0022fbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022fbf:	29 da                	sub    edx,ebx
c0022fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022fc5:	88 d9                	mov    cl,bl
c0022fc7:	d3 e7                	shl    edi,cl
c0022fc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022fcd:	88 d1                	mov    cl,dl
c0022fcf:	d3 e8                	shr    eax,cl
c0022fd1:	09 c7                	or     edi,eax
c0022fd3:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022fd7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022fdb:	89 d8                	mov    eax,ebx
c0022fdd:	88 d9                	mov    cl,bl
c0022fdf:	d3 e7                	shl    edi,cl
c0022fe1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022fe5:	89 f3                	mov    ebx,esi
c0022fe7:	88 d1                	mov    cl,dl
c0022fe9:	d3 eb                	shr    ebx,cl
c0022feb:	89 c7                	mov    edi,eax
c0022fed:	88 c1                	mov    cl,al
c0022fef:	d3 e6                	shl    esi,cl
c0022ff1:	89 e8                	mov    eax,ebp
c0022ff3:	88 d1                	mov    cl,dl
c0022ff5:	d3 e8                	shr    eax,cl
c0022ff7:	09 f0                	or     eax,esi
c0022ff9:	89 f9                	mov    ecx,edi
c0022ffb:	d3 e5                	shl    ebp,cl
c0022ffd:	89 da                	mov    edx,ebx
c0022fff:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023003:	89 d3                	mov    ebx,edx
c0023005:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023009:	89 c6                	mov    esi,eax
c002300b:	89 d1                	mov    ecx,edx
c002300d:	39 d3                	cmp    ebx,edx
c002300f:	72 27                	jb     c0023038 <__moddi3+0x170>
c0023011:	74 21                	je     c0023034 <__moddi3+0x16c>
c0023013:	29 f5                	sub    ebp,esi
c0023015:	19 cb                	sbb    ebx,ecx
c0023017:	89 de                	mov    esi,ebx
c0023019:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002301d:	d3 e6                	shl    esi,cl
c002301f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023023:	89 f9                	mov    ecx,edi
c0023025:	d3 ed                	shr    ebp,cl
c0023027:	09 ee                	or     esi,ebp
c0023029:	89 f0                	mov    eax,esi
c002302b:	d3 eb                	shr    ebx,cl
c002302d:	89 da                	mov    edx,ebx
c002302f:	e9 e8 fe ff ff       	jmp    c0022f1c <__moddi3+0x54>
c0023034:	39 c5                	cmp    ebp,eax
c0023036:	73 db                	jae    c0023013 <__moddi3+0x14b>
c0023038:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002303c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023040:	89 d1                	mov    ecx,edx
c0023042:	89 c6                	mov    esi,eax
c0023044:	eb cd                	jmp    c0023013 <__moddi3+0x14b>
c0023046:	66 90                	xchg   ax,ax

c0023048 <__udivdi3>:
c0023048:	55                   	push   ebp
c0023049:	57                   	push   edi
c002304a:	56                   	push   esi
c002304b:	53                   	push   ebx
c002304c:	83 ec 1c             	sub    esp,0x1c
c002304f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023053:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023057:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002305b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002305f:	85 d2                	test   edx,edx
c0023061:	75 41                	jne    c00230a4 <__udivdi3+0x5c>
c0023063:	39 f7                	cmp    edi,esi
c0023065:	76 15                	jbe    c002307c <__udivdi3+0x34>
c0023067:	89 e8                	mov    eax,ebp
c0023069:	89 f2                	mov    edx,esi
c002306b:	f7 f7                	div    edi
c002306d:	31 db                	xor    ebx,ebx
c002306f:	89 da                	mov    edx,ebx
c0023071:	83 c4 1c             	add    esp,0x1c
c0023074:	5b                   	pop    ebx
c0023075:	5e                   	pop    esi
c0023076:	5f                   	pop    edi
c0023077:	5d                   	pop    ebp
c0023078:	c3                   	ret    
c0023079:	8d 76 00             	lea    esi,[esi+0x0]
c002307c:	89 f9                	mov    ecx,edi
c002307e:	85 ff                	test   edi,edi
c0023080:	75 0b                	jne    c002308d <__udivdi3+0x45>
c0023082:	b8 01 00 00 00       	mov    eax,0x1
c0023087:	31 d2                	xor    edx,edx
c0023089:	f7 f7                	div    edi
c002308b:	89 c1                	mov    ecx,eax
c002308d:	31 d2                	xor    edx,edx
c002308f:	89 f0                	mov    eax,esi
c0023091:	f7 f1                	div    ecx
c0023093:	89 c3                	mov    ebx,eax
c0023095:	89 e8                	mov    eax,ebp
c0023097:	f7 f1                	div    ecx
c0023099:	89 da                	mov    edx,ebx
c002309b:	83 c4 1c             	add    esp,0x1c
c002309e:	5b                   	pop    ebx
c002309f:	5e                   	pop    esi
c00230a0:	5f                   	pop    edi
c00230a1:	5d                   	pop    ebp
c00230a2:	c3                   	ret    
c00230a3:	90                   	nop
c00230a4:	39 f2                	cmp    edx,esi
c00230a6:	77 1c                	ja     c00230c4 <__udivdi3+0x7c>
c00230a8:	0f bd da             	bsr    ebx,edx
c00230ab:	83 f3 1f             	xor    ebx,0x1f
c00230ae:	75 24                	jne    c00230d4 <__udivdi3+0x8c>
c00230b0:	39 f2                	cmp    edx,esi
c00230b2:	72 08                	jb     c00230bc <__udivdi3+0x74>
c00230b4:	39 ef                	cmp    edi,ebp
c00230b6:	0f 87 84 00 00 00    	ja     c0023140 <__udivdi3+0xf8>
c00230bc:	b8 01 00 00 00       	mov    eax,0x1
c00230c1:	eb ac                	jmp    c002306f <__udivdi3+0x27>
c00230c3:	90                   	nop
c00230c4:	31 db                	xor    ebx,ebx
c00230c6:	31 c0                	xor    eax,eax
c00230c8:	89 da                	mov    edx,ebx
c00230ca:	83 c4 1c             	add    esp,0x1c
c00230cd:	5b                   	pop    ebx
c00230ce:	5e                   	pop    esi
c00230cf:	5f                   	pop    edi
c00230d0:	5d                   	pop    ebp
c00230d1:	c3                   	ret    
c00230d2:	66 90                	xchg   ax,ax
c00230d4:	b8 20 00 00 00       	mov    eax,0x20
c00230d9:	29 d8                	sub    eax,ebx
c00230db:	88 d9                	mov    cl,bl
c00230dd:	d3 e2                	shl    edx,cl
c00230df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00230e3:	89 fa                	mov    edx,edi
c00230e5:	88 c1                	mov    cl,al
c00230e7:	d3 ea                	shr    edx,cl
c00230e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230ed:	09 d1                	or     ecx,edx
c00230ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00230f3:	88 d9                	mov    cl,bl
c00230f5:	d3 e7                	shl    edi,cl
c00230f7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00230fb:	89 f7                	mov    edi,esi
c00230fd:	88 c1                	mov    cl,al
c00230ff:	d3 ef                	shr    edi,cl
c0023101:	88 d9                	mov    cl,bl
c0023103:	d3 e6                	shl    esi,cl
c0023105:	89 ea                	mov    edx,ebp
c0023107:	88 c1                	mov    cl,al
c0023109:	d3 ea                	shr    edx,cl
c002310b:	09 d6                	or     esi,edx
c002310d:	89 f0                	mov    eax,esi
c002310f:	89 fa                	mov    edx,edi
c0023111:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023115:	89 d7                	mov    edi,edx
c0023117:	89 c6                	mov    esi,eax
c0023119:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002311d:	39 d7                	cmp    edi,edx
c002311f:	72 13                	jb     c0023134 <__udivdi3+0xec>
c0023121:	74 09                	je     c002312c <__udivdi3+0xe4>
c0023123:	89 f0                	mov    eax,esi
c0023125:	31 db                	xor    ebx,ebx
c0023127:	e9 43 ff ff ff       	jmp    c002306f <__udivdi3+0x27>
c002312c:	88 d9                	mov    cl,bl
c002312e:	d3 e5                	shl    ebp,cl
c0023130:	39 c5                	cmp    ebp,eax
c0023132:	73 ef                	jae    c0023123 <__udivdi3+0xdb>
c0023134:	8d 46 ff             	lea    eax,[esi-0x1]
c0023137:	31 db                	xor    ebx,ebx
c0023139:	e9 31 ff ff ff       	jmp    c002306f <__udivdi3+0x27>
c002313e:	66 90                	xchg   ax,ax
c0023140:	31 c0                	xor    eax,eax
c0023142:	e9 28 ff ff ff       	jmp    c002306f <__udivdi3+0x27>
c0023147:	90                   	nop

c0023148 <__umoddi3>:
c0023148:	55                   	push   ebp
c0023149:	57                   	push   edi
c002314a:	56                   	push   esi
c002314b:	53                   	push   ebx
c002314c:	83 ec 1c             	sub    esp,0x1c
c002314f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023153:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023157:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002315b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002315f:	89 da                	mov    edx,ebx
c0023161:	85 c0                	test   eax,eax
c0023163:	75 37                	jne    c002319c <__umoddi3+0x54>
c0023165:	39 df                	cmp    edi,ebx
c0023167:	76 13                	jbe    c002317c <__umoddi3+0x34>
c0023169:	89 f0                	mov    eax,esi
c002316b:	f7 f7                	div    edi
c002316d:	89 d0                	mov    eax,edx
c002316f:	31 d2                	xor    edx,edx
c0023171:	83 c4 1c             	add    esp,0x1c
c0023174:	5b                   	pop    ebx
c0023175:	5e                   	pop    esi
c0023176:	5f                   	pop    edi
c0023177:	5d                   	pop    ebp
c0023178:	c3                   	ret    
c0023179:	8d 76 00             	lea    esi,[esi+0x0]
c002317c:	89 fd                	mov    ebp,edi
c002317e:	85 ff                	test   edi,edi
c0023180:	75 0b                	jne    c002318d <__umoddi3+0x45>
c0023182:	b8 01 00 00 00       	mov    eax,0x1
c0023187:	31 d2                	xor    edx,edx
c0023189:	f7 f7                	div    edi
c002318b:	89 c5                	mov    ebp,eax
c002318d:	89 d8                	mov    eax,ebx
c002318f:	31 d2                	xor    edx,edx
c0023191:	f7 f5                	div    ebp
c0023193:	89 f0                	mov    eax,esi
c0023195:	f7 f5                	div    ebp
c0023197:	89 d0                	mov    eax,edx
c0023199:	eb d4                	jmp    c002316f <__umoddi3+0x27>
c002319b:	90                   	nop
c002319c:	89 f1                	mov    ecx,esi
c002319e:	39 d8                	cmp    eax,ebx
c00231a0:	76 0a                	jbe    c00231ac <__umoddi3+0x64>
c00231a2:	89 f0                	mov    eax,esi
c00231a4:	83 c4 1c             	add    esp,0x1c
c00231a7:	5b                   	pop    ebx
c00231a8:	5e                   	pop    esi
c00231a9:	5f                   	pop    edi
c00231aa:	5d                   	pop    ebp
c00231ab:	c3                   	ret    
c00231ac:	0f bd e8             	bsr    ebp,eax
c00231af:	83 f5 1f             	xor    ebp,0x1f
c00231b2:	75 1c                	jne    c00231d0 <__umoddi3+0x88>
c00231b4:	39 d8                	cmp    eax,ebx
c00231b6:	72 04                	jb     c00231bc <__umoddi3+0x74>
c00231b8:	39 f7                	cmp    edi,esi
c00231ba:	77 08                	ja     c00231c4 <__umoddi3+0x7c>
c00231bc:	89 da                	mov    edx,ebx
c00231be:	29 fe                	sub    esi,edi
c00231c0:	19 c2                	sbb    edx,eax
c00231c2:	89 f1                	mov    ecx,esi
c00231c4:	89 c8                	mov    eax,ecx
c00231c6:	83 c4 1c             	add    esp,0x1c
c00231c9:	5b                   	pop    ebx
c00231ca:	5e                   	pop    esi
c00231cb:	5f                   	pop    edi
c00231cc:	5d                   	pop    ebp
c00231cd:	c3                   	ret    
c00231ce:	66 90                	xchg   ax,ax
c00231d0:	ba 20 00 00 00       	mov    edx,0x20
c00231d5:	29 ea                	sub    edx,ebp
c00231d7:	89 e9                	mov    ecx,ebp
c00231d9:	d3 e0                	shl    eax,cl
c00231db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00231df:	89 f8                	mov    eax,edi
c00231e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00231e5:	88 d1                	mov    cl,dl
c00231e7:	d3 e8                	shr    eax,cl
c00231e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00231ed:	09 c1                	or     ecx,eax
c00231ef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00231f3:	89 e9                	mov    ecx,ebp
c00231f5:	d3 e7                	shl    edi,cl
c00231f7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00231fb:	89 d8                	mov    eax,ebx
c00231fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023201:	88 d1                	mov    cl,dl
c0023203:	d3 e8                	shr    eax,cl
c0023205:	89 c7                	mov    edi,eax
c0023207:	89 e9                	mov    ecx,ebp
c0023209:	d3 e3                	shl    ebx,cl
c002320b:	89 f0                	mov    eax,esi
c002320d:	88 d1                	mov    cl,dl
c002320f:	d3 e8                	shr    eax,cl
c0023211:	09 d8                	or     eax,ebx
c0023213:	89 e9                	mov    ecx,ebp
c0023215:	d3 e6                	shl    esi,cl
c0023217:	89 f3                	mov    ebx,esi
c0023219:	89 fa                	mov    edx,edi
c002321b:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002321f:	89 d1                	mov    ecx,edx
c0023221:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023225:	89 c6                	mov    esi,eax
c0023227:	89 d7                	mov    edi,edx
c0023229:	39 d1                	cmp    ecx,edx
c002322b:	72 27                	jb     c0023254 <__umoddi3+0x10c>
c002322d:	74 21                	je     c0023250 <__umoddi3+0x108>
c002322f:	89 ca                	mov    edx,ecx
c0023231:	29 f3                	sub    ebx,esi
c0023233:	19 fa                	sbb    edx,edi
c0023235:	89 d0                	mov    eax,edx
c0023237:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002323b:	d3 e0                	shl    eax,cl
c002323d:	89 e9                	mov    ecx,ebp
c002323f:	d3 eb                	shr    ebx,cl
c0023241:	09 d8                	or     eax,ebx
c0023243:	d3 ea                	shr    edx,cl
c0023245:	83 c4 1c             	add    esp,0x1c
c0023248:	5b                   	pop    ebx
c0023249:	5e                   	pop    esi
c002324a:	5f                   	pop    edi
c002324b:	5d                   	pop    ebp
c002324c:	c3                   	ret    
c002324d:	8d 76 00             	lea    esi,[esi+0x0]
c0023250:	39 c3                	cmp    ebx,eax
c0023252:	73 db                	jae    c002322f <__umoddi3+0xe7>
c0023254:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023258:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002325c:	89 d7                	mov    edi,edx
c002325e:	89 c6                	mov    esi,eax
c0023260:	eb cd                	jmp    c002322f <__umoddi3+0xe7>

Disassembly of section .init:

c0023262 <_init>:
c0023262:	55                   	push   ebp
c0023263:	89 e5                	mov    ebp,esp
c0023265:	e8 ae ce fd ff       	call   c0000118 <frame_dummy>
c002326a:	e8 e5 fa ff ff       	call   c0022d54 <__do_global_ctors_aux>
c002326f:	5d                   	pop    ebp
c0023270:	c3                   	ret    

Disassembly of section .fini:

c0023271 <_fini>:
c0023271:	55                   	push   ebp
c0023272:	89 e5                	mov    ebp,esp
c0023274:	e8 2f ce fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0023279:	5d                   	pop    ebp
c002327a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002327c <Computer::~Computer()>:
c002327c:	83 ec 0c             	sub    esp,0xc
c002327f:	ba e0 49 02 c0       	mov    edx,0xc00249e0
c0023284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023288:	89 10                	mov    DWORD PTR [eax],edx
c002328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328e:	83 ec 0c             	sub    esp,0xc
c0023291:	50                   	push   eax
c0023292:	e8 e9 b1 fe ff       	call   c000e480 <Device::~Device()>
c0023297:	83 c4 10             	add    esp,0x10
c002329a:	90                   	nop
c002329b:	83 c4 0c             	add    esp,0xc
c002329e:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00232a0 <Computer::~Computer()>:
c00232a0:	83 ec 0c             	sub    esp,0xc
c00232a3:	83 ec 0c             	sub    esp,0xc
c00232a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232aa:	e8 cd ff ff ff       	call   c002327c <Computer::~Computer()>
c00232af:	83 c4 10             	add    esp,0x10
c00232b2:	83 ec 08             	sub    esp,0x8
c00232b5:	68 ec 01 00 00       	push   0x1ec
c00232ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232be:	e8 9b 9c fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	83 c4 0c             	add    esp,0xc
c00232c9:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00232ca <idleCommon()>:
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	fa                   	cli    
c00232ce:	ff 05 c8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1c8
c00232d4:	e8 87 5a ff ff       	call   c0018d60 <schedule()>
c00232d9:	a1 c8 a1 02 c0       	mov    eax,ds:0xc002a1c8
c00232de:	48                   	dec    eax
c00232df:	a3 c8 a1 02 c0       	mov    ds:0xc002a1c8,eax
c00232e4:	75 01                	jne    c00232e7 <idleCommon()+0x1d>
c00232e6:	fb                   	sti    
c00232e7:	83 c4 0c             	add    esp,0xc
c00232ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00232ec <LinkedList<UnixFile>::~LinkedList()>:
c00232ec:	90                   	nop
c00232ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00232ee <LinkedList<UnixFile>::LinkedList()>:
c00232ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00232f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023303:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023307:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002330e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023312:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002331c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023327:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002332e:	90                   	nop
c002332f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023330 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023330:	83 ec 0c             	sub    esp,0xc
c0023333:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023338:	75 10                	jne    c002334a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002333a:	83 ec 0c             	sub    esp,0xc
c002333d:	68 ac 4d 02 c0       	push   0xc0024dac
c0023342:	e8 ba 1c ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023347:	83 c4 10             	add    esp,0x10
c002334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334e:	8b 00                	mov    eax,DWORD PTR [eax]
c0023350:	85 c0                	test   eax,eax
c0023352:	74 34                	je     c0023388 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002335b:	85 c0                	test   eax,eax
c002335d:	74 29                	je     c0023388 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002335f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023363:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023366:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002336a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002336d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023371:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023375:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002337c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002337f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023386:	eb 65                	jmp    c00233ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002338c:	8b 00                	mov    eax,DWORD PTR [eax]
c002338e:	85 c0                	test   eax,eax
c0023390:	75 4b                	jne    c00233dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023399:	85 c0                	test   eax,eax
c002339b:	75 40                	jne    c00233dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002339d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233a5:	89 10                	mov    DWORD PTR [eax],edx
c00233a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00233b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233c7:	85 c0                	test   eax,eax
c00233c9:	74 22                	je     c00233ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00233cb:	83 ec 0c             	sub    esp,0xc
c00233ce:	68 ce 4d 02 c0       	push   0xc0024dce
c00233d3:	e8 29 1c ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00233d8:	83 c4 10             	add    esp,0x10
c00233db:	eb 10                	jmp    c00233ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00233dd:	83 ec 0c             	sub    esp,0xc
c00233e0:	68 d8 4d 02 c0       	push   0xc0024dd8
c00233e5:	e8 17 1c ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00233ea:	83 c4 10             	add    esp,0x10
c00233ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00233f4:	8d 50 01             	lea    edx,[eax+0x1]
c00233f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233fe:	90                   	nop
c00233ff:	83 c4 0c             	add    esp,0xc
c0023402:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0023404 <LinkedList<UnixFile>::getFirstElement()>:
c0023404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023408:	8b 00                	mov    eax,DWORD PTR [eax]
c002340a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002340c <LinkedList<UnixFile>::removeFirst()>:
c002340c:	83 ec 0c             	sub    esp,0xc
c002340f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023413:	8b 00                	mov    eax,DWORD PTR [eax]
c0023415:	85 c0                	test   eax,eax
c0023417:	75 12                	jne    c002342b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0023419:	83 ec 0c             	sub    esp,0xc
c002341c:	68 e4 4d 02 c0       	push   0xc0024de4
c0023421:	e8 db 1b ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023426:	83 c4 10             	add    esp,0x10
c0023429:	eb 7e                	jmp    c00234a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002342b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002342f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023432:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023435:	85 c0                	test   eax,eax
c0023437:	74 10                	je     c0023449 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023439:	83 ec 0c             	sub    esp,0xc
c002343c:	68 2f 4e 02 c0       	push   0xc0024e2f
c0023441:	e8 bb 1b ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023446:	83 c4 10             	add    esp,0x10
c0023449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344d:	8b 00                	mov    eax,DWORD PTR [eax]
c002344f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023452:	85 c0                	test   eax,eax
c0023454:	75 33                	jne    c0023489 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0023456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023464:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002346b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023472:	83 f8 01             	cmp    eax,0x1
c0023475:	74 21                	je     c0023498 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023477:	83 ec 0c             	sub    esp,0xc
c002347a:	68 08 4e 02 c0       	push   0xc0024e08
c002347f:	e8 7d 1b ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023484:	83 c4 10             	add    esp,0x10
c0023487:	eb 0f                	jmp    c0023498 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0023489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002348d:	8b 00                	mov    eax,DWORD PTR [eax]
c002348f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0023492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023496:	89 10                	mov    DWORD PTR [eax],edx
c0023498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002349c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002349f:	8d 50 ff             	lea    edx,[eax-0x1]
c00234a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00234a9:	83 c4 0c             	add    esp,0xc
c00234ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00234ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00234ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00234b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00234b6 <DriverlessDevice::~DriverlessDevice()>:
c00234b6:	ba 5c 56 02 c0       	mov    edx,0xc002565c
c00234bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00234bf:	89 10                	mov    DWORD PTR [eax],edx
c00234c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00234c5:	50                   	push   eax
c00234c6:	e8 b5 af fe ff       	call   c000e480 <Device::~Device()>
c00234cb:	83 c4 04             	add    esp,0x4
c00234ce:	90                   	nop
c00234cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00234d0 <DriverlessDevice::~DriverlessDevice()>:
c00234d0:	83 ec 0c             	sub    esp,0xc
c00234d3:	83 ec 0c             	sub    esp,0xc
c00234d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234da:	e8 d7 ff ff ff       	call   c00234b6 <DriverlessDevice::~DriverlessDevice()>
c00234df:	83 c4 10             	add    esp,0x10
c00234e2:	83 ec 08             	sub    esp,0x8
c00234e5:	68 58 01 00 00       	push   0x158
c00234ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ee:	e8 6b 9a fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00234f3:	83 c4 10             	add    esp,0x10
c00234f6:	83 c4 0c             	add    esp,0xc
c00234f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00234fa <LinkedList<Device>::addElement(Device*)>:
c00234fa:	83 ec 0c             	sub    esp,0xc
c00234fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023502:	75 10                	jne    c0023514 <LinkedList<Device>::addElement(Device*)+0x1a>
c0023504:	83 ec 0c             	sub    esp,0xc
c0023507:	68 ac 4d 02 c0       	push   0xc0024dac
c002350c:	e8 f0 1a ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023511:	83 c4 10             	add    esp,0x10
c0023514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023518:	8b 00                	mov    eax,DWORD PTR [eax]
c002351a:	85 c0                	test   eax,eax
c002351c:	74 3a                	je     c0023558 <LinkedList<Device>::addElement(Device*)+0x5e>
c002351e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023525:	85 c0                	test   eax,eax
c0023527:	74 2f                	je     c0023558 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023530:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023534:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002353a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023542:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023549:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002354c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0023556:	eb 68                	jmp    c00235c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355c:	8b 00                	mov    eax,DWORD PTR [eax]
c002355e:	85 c0                	test   eax,eax
c0023560:	75 4e                	jne    c00235b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023569:	85 c0                	test   eax,eax
c002356b:	75 43                	jne    c00235b0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002356d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023571:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023575:	89 10                	mov    DWORD PTR [eax],edx
c0023577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002357b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002357f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023589:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0023593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023597:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002359a:	85 c0                	test   eax,eax
c002359c:	74 22                	je     c00235c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002359e:	83 ec 0c             	sub    esp,0xc
c00235a1:	68 ce 4d 02 c0       	push   0xc0024dce
c00235a6:	e8 56 1a ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00235ab:	83 c4 10             	add    esp,0x10
c00235ae:	eb 10                	jmp    c00235c0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00235b0:	83 ec 0c             	sub    esp,0xc
c00235b3:	68 d8 4d 02 c0       	push   0xc0024dd8
c00235b8:	e8 44 1a ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00235bd:	83 c4 10             	add    esp,0x10
c00235c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235c7:	8d 50 01             	lea    edx,[eax+0x1]
c00235ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00235d1:	90                   	nop
c00235d2:	83 c4 0c             	add    esp,0xc
c00235d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00235d6 <LinkedList<Device>::LinkedList()>:
c00235d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00235e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00235eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00235f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023604:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002360b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002360f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023616:	90                   	nop
c0023617:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0023618 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0023618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002361c:	8b 00                	mov    eax,DWORD PTR [eax]
c002361e:	85 c0                	test   eax,eax
c0023620:	75 0e                	jne    c0023630 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023629:	85 c0                	test   eax,eax
c002362b:	75 03                	jne    c0023630 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002362d:	b0 01                	mov    al,0x1
c002362f:	c3                   	ret    
c0023630:	b0 00                	mov    al,0x0
c0023632:	90                   	nop
c0023633:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0023634 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0023634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023638:	8b 00                	mov    eax,DWORD PTR [eax]
c002363a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002363c <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002363c:	83 ec 0c             	sub    esp,0xc
c002363f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023643:	8b 00                	mov    eax,DWORD PTR [eax]
c0023645:	85 c0                	test   eax,eax
c0023647:	75 17                	jne    c0023660 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023649:	83 ec 0c             	sub    esp,0xc
c002364c:	68 e4 4d 02 c0       	push   0xc0024de4
c0023651:	e8 ab 19 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023656:	83 c4 10             	add    esp,0x10
c0023659:	e9 92 00 00 00       	jmp    c00236f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002365e:	66 90                	xchg   ax,ax
c0023660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023667:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002366a:	85 c0                	test   eax,eax
c002366c:	0f 95 c0             	setne  al
c002366f:	84 c0                	test   al,al
c0023671:	74 11                	je     c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0023673:	83 ec 0c             	sub    esp,0xc
c0023676:	68 2f 4e 02 c0       	push   0xc0024e2f
c002367b:	e8 81 19 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023680:	83 c4 10             	add    esp,0x10
c0023683:	90                   	nop
c0023684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023688:	8b 00                	mov    eax,DWORD PTR [eax]
c002368a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002368d:	85 c0                	test   eax,eax
c002368f:	0f 94 c0             	sete   al
c0023692:	84 c0                	test   al,al
c0023694:	74 36                	je     c00236cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0023696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00236a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00236ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236b2:	83 f8 01             	cmp    eax,0x1
c00236b5:	74 25                	je     c00236dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00236b7:	83 ec 0c             	sub    esp,0xc
c00236ba:	68 08 4e 02 c0       	push   0xc0024e08
c00236bf:	e8 3d 19 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00236c4:	83 c4 10             	add    esp,0x10
c00236c7:	eb 13                	jmp    c00236dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00236c9:	8d 76 00             	lea    esi,[esi+0x0]
c00236cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00236d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00236d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d9:	89 10                	mov    DWORD PTR [eax],edx
c00236db:	90                   	nop
c00236dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236e3:	8d 50 ff             	lea    edx,[eax-0x1]
c00236e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00236ed:	8d 76 00             	lea    esi,[esi+0x0]
c00236f0:	83 c4 0c             	add    esp,0xc
c00236f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00236f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00236f4:	83 ec 0c             	sub    esp,0xc
c00236f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00236fc:	75 12                	jne    c0023710 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00236fe:	83 ec 0c             	sub    esp,0xc
c0023701:	68 ac 4d 02 c0       	push   0xc0024dac
c0023706:	e8 f6 18 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c002370b:	83 c4 10             	add    esp,0x10
c002370e:	66 90                	xchg   ax,ax
c0023710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023714:	8b 00                	mov    eax,DWORD PTR [eax]
c0023716:	85 c0                	test   eax,eax
c0023718:	74 36                	je     c0023750 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002371a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002371e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023721:	85 c0                	test   eax,eax
c0023723:	74 2b                	je     c0023750 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0023725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023729:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002372c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023730:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0023733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023737:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002373b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002373e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023745:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002374c:	eb 6a                	jmp    c00237b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002374e:	66 90                	xchg   ax,ax
c0023750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023754:	8b 00                	mov    eax,DWORD PTR [eax]
c0023756:	85 c0                	test   eax,eax
c0023758:	75 4e                	jne    c00237a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002375a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002375e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023761:	85 c0                	test   eax,eax
c0023763:	75 43                	jne    c00237a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023769:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002376d:	89 10                	mov    DWORD PTR [eax],edx
c002376f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023773:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023777:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002377a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002377e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023781:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002378c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002378f:	85 c0                	test   eax,eax
c0023791:	74 25                	je     c00237b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023793:	83 ec 0c             	sub    esp,0xc
c0023796:	68 ce 4d 02 c0       	push   0xc0024dce
c002379b:	e8 61 18 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	eb 13                	jmp    c00237b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00237a5:	8d 76 00             	lea    esi,[esi+0x0]
c00237a8:	83 ec 0c             	sub    esp,0xc
c00237ab:	68 d8 4d 02 c0       	push   0xc0024dd8
c00237b0:	e8 4c 18 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00237b5:	83 c4 10             	add    esp,0x10
c00237b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00237bf:	8d 50 01             	lea    edx,[eax+0x1]
c00237c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00237c9:	90                   	nop
c00237ca:	83 c4 0c             	add    esp,0xc
c00237cd:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00237d0 <ACPI::~ACPI()>:
c00237d0:	83 ec 0c             	sub    esp,0xc
c00237d3:	ba 2c 61 02 c0       	mov    edx,0xc002612c
c00237d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237dc:	89 10                	mov    DWORD PTR [eax],edx
c00237de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237e2:	83 ec 0c             	sub    esp,0xc
c00237e5:	50                   	push   eax
c00237e6:	e8 95 ac fe ff       	call   c000e480 <Device::~Device()>
c00237eb:	83 c4 10             	add    esp,0x10
c00237ee:	90                   	nop
c00237ef:	83 c4 0c             	add    esp,0xc
c00237f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00237f4 <ACPI::~ACPI()>:
c00237f4:	83 ec 0c             	sub    esp,0xc
c00237f7:	83 ec 0c             	sub    esp,0xc
c00237fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237fe:	e8 cd ff ff ff       	call   c00237d0 <ACPI::~ACPI()>
c0023803:	83 c4 10             	add    esp,0x10
c0023806:	83 ec 08             	sub    esp,0x8
c0023809:	68 64 12 00 00       	push   0x1264
c002380e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023812:	e8 47 97 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023817:	83 c4 10             	add    esp,0x10
c002381a:	83 c4 0c             	add    esp,0xc
c002381d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0023820 <LinkedList<Device>::~LinkedList()>:
c0023820:	90                   	nop
c0023821:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0023824 <LinkedList<Device>::isEmpty()>:
c0023824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023828:	8b 00                	mov    eax,DWORD PTR [eax]
c002382a:	85 c0                	test   eax,eax
c002382c:	75 0e                	jne    c002383c <LinkedList<Device>::isEmpty()+0x18>
c002382e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023832:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023835:	85 c0                	test   eax,eax
c0023837:	75 03                	jne    c002383c <LinkedList<Device>::isEmpty()+0x18>
c0023839:	b0 01                	mov    al,0x1
c002383b:	c3                   	ret    
c002383c:	b0 00                	mov    al,0x0
c002383e:	90                   	nop
c002383f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023840 <LinkedList<Device>::getFirstElement()>:
c0023840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023844:	8b 00                	mov    eax,DWORD PTR [eax]
c0023846:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023848 <LinkedList<Device>::removeFirst()>:
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002384f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023851:	85 c0                	test   eax,eax
c0023853:	75 17                	jne    c002386c <LinkedList<Device>::removeFirst()+0x24>
c0023855:	83 ec 0c             	sub    esp,0xc
c0023858:	68 e4 4d 02 c0       	push   0xc0024de4
c002385d:	e8 9f 17 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c0023862:	83 c4 10             	add    esp,0x10
c0023865:	e9 92 00 00 00       	jmp    c00238fc <LinkedList<Device>::removeFirst()+0xb4>
c002386a:	66 90                	xchg   ax,ax
c002386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023870:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023873:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023879:	85 c0                	test   eax,eax
c002387b:	74 13                	je     c0023890 <LinkedList<Device>::removeFirst()+0x48>
c002387d:	83 ec 0c             	sub    esp,0xc
c0023880:	68 2f 4e 02 c0       	push   0xc0024e2f
c0023885:	e8 77 17 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c002388a:	83 c4 10             	add    esp,0x10
c002388d:	8d 76 00             	lea    esi,[esi+0x0]
c0023890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023894:	8b 00                	mov    eax,DWORD PTR [eax]
c0023896:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002389c:	85 c0                	test   eax,eax
c002389e:	75 34                	jne    c00238d4 <LinkedList<Device>::removeFirst()+0x8c>
c00238a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00238aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00238b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00238bc:	83 f8 01             	cmp    eax,0x1
c00238bf:	74 27                	je     c00238e8 <LinkedList<Device>::removeFirst()+0xa0>
c00238c1:	83 ec 0c             	sub    esp,0xc
c00238c4:	68 08 4e 02 c0       	push   0xc0024e08
c00238c9:	e8 33 17 ff ff       	call   c0015001 <Krnl::panic(char const*)>
c00238ce:	83 c4 10             	add    esp,0x10
c00238d1:	eb 15                	jmp    c00238e8 <LinkedList<Device>::removeFirst()+0xa0>
c00238d3:	90                   	nop
c00238d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00238da:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00238e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e4:	89 10                	mov    DWORD PTR [eax],edx
c00238e6:	66 90                	xchg   ax,ax
c00238e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00238ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00238f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00238f9:	8d 76 00             	lea    esi,[esi+0x0]
c00238fc:	83 c4 0c             	add    esp,0xc
c00238ff:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023900 <CPU::~CPU()>:
c0023900:	83 ec 0c             	sub    esp,0xc
c0023903:	ba bc 66 02 c0       	mov    edx,0xc00266bc
c0023908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002390c:	89 10                	mov    DWORD PTR [eax],edx
c002390e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023912:	83 ec 0c             	sub    esp,0xc
c0023915:	50                   	push   eax
c0023916:	e8 65 ab fe ff       	call   c000e480 <Device::~Device()>
c002391b:	83 c4 10             	add    esp,0x10
c002391e:	90                   	nop
c002391f:	83 c4 0c             	add    esp,0xc
c0023922:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0023924 <CPU::~CPU()>:
c0023924:	83 ec 0c             	sub    esp,0xc
c0023927:	83 ec 0c             	sub    esp,0xc
c002392a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002392e:	e8 cd ff ff ff       	call   c0023900 <CPU::~CPU()>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	83 ec 08             	sub    esp,0x8
c0023939:	68 98 11 00 00       	push   0x1198
c002393e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023942:	e8 17 96 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023947:	83 c4 10             	add    esp,0x10
c002394a:	83 c4 0c             	add    esp,0xc
c002394d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023950 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023950:	90                   	nop
c0023951:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0023954 <ThreadControlBlock::ThreadControlBlock()>:
c0023954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023958:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002395f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023963:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002396a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002396e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023979:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023984:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002398b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002398f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0023993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023997:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002399b:	90                   	nop
c002399c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00239a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00239a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00239aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00239b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00239c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00239ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00239d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00239e0:	90                   	nop
c00239e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00239e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00239e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00239eb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00239ec <Vm::_FPUState::_FPUState()>:
c00239ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239f0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00239f7:	90                   	nop
c00239f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00239fa <PCI::~PCI()>:
c00239fa:	83 ec 0c             	sub    esp,0xc
c00239fd:	ba 44 75 02 c0       	mov    edx,0xc0027544
c0023a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a06:	89 10                	mov    DWORD PTR [eax],edx
c0023a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a0c:	83 ec 0c             	sub    esp,0xc
c0023a0f:	50                   	push   eax
c0023a10:	e8 3b a4 fe ff       	call   c000de50 <Bus::~Bus()>
c0023a15:	83 c4 10             	add    esp,0x10
c0023a18:	90                   	nop
c0023a19:	83 c4 0c             	add    esp,0xc
c0023a1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023a1e <PCI::~PCI()>:
c0023a1e:	83 ec 0c             	sub    esp,0xc
c0023a21:	83 ec 0c             	sub    esp,0xc
c0023a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a28:	e8 cd ff ff ff       	call   c00239fa <PCI::~PCI()>
c0023a2d:	83 c4 10             	add    esp,0x10
c0023a30:	83 ec 08             	sub    esp,0x8
c0023a33:	68 5c 01 00 00       	push   0x15c
c0023a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a3c:	e8 1d 95 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023a41:	83 c4 10             	add    esp,0x10
c0023a44:	83 c4 0c             	add    esp,0xc
c0023a47:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023a48 <IDE::~IDE()>:
c0023a48:	83 ec 0c             	sub    esp,0xc
c0023a4b:	ba f8 75 02 c0       	mov    edx,0xc00275f8
c0023a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a54:	89 10                	mov    DWORD PTR [eax],edx
c0023a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a5a:	83 ec 0c             	sub    esp,0xc
c0023a5d:	50                   	push   eax
c0023a5e:	e8 35 af fe ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c0023a63:	83 c4 10             	add    esp,0x10
c0023a66:	90                   	nop
c0023a67:	83 c4 0c             	add    esp,0xc
c0023a6a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023a6c <IDE::~IDE()>:
c0023a6c:	83 ec 0c             	sub    esp,0xc
c0023a6f:	83 ec 0c             	sub    esp,0xc
c0023a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a76:	e8 cd ff ff ff       	call   c0023a48 <IDE::~IDE()>
c0023a7b:	83 c4 10             	add    esp,0x10
c0023a7e:	83 ec 08             	sub    esp,0x8
c0023a81:	68 70 02 00 00       	push   0x270
c0023a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a8a:	e8 cf 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023a8f:	83 c4 10             	add    esp,0x10
c0023a92:	83 c4 0c             	add    esp,0xc
c0023a95:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023a96 <SATABus::~SATABus()>:
c0023a96:	83 ec 0c             	sub    esp,0xc
c0023a99:	ba b4 76 02 c0       	mov    edx,0xc00276b4
c0023a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa2:	89 10                	mov    DWORD PTR [eax],edx
c0023aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa8:	83 ec 0c             	sub    esp,0xc
c0023aab:	50                   	push   eax
c0023aac:	e8 e7 ae fe ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c0023ab1:	83 c4 10             	add    esp,0x10
c0023ab4:	90                   	nop
c0023ab5:	83 c4 0c             	add    esp,0xc
c0023ab8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023aba <SATABus::~SATABus()>:
c0023aba:	83 ec 0c             	sub    esp,0xc
c0023abd:	83 ec 0c             	sub    esp,0xc
c0023ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ac4:	e8 cd ff ff ff       	call   c0023a96 <SATABus::~SATABus()>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	83 ec 08             	sub    esp,0x8
c0023acf:	68 64 01 00 00       	push   0x164
c0023ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ad8:	e8 81 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023add:	83 c4 10             	add    esp,0x10
c0023ae0:	83 c4 0c             	add    esp,0xc
c0023ae3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023ae4 <ATA::~ATA()>:
c0023ae4:	83 ec 0c             	sub    esp,0xc
c0023ae7:	ba 2c 77 02 c0       	mov    edx,0xc002772c
c0023aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af0:	89 10                	mov    DWORD PTR [eax],edx
c0023af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af6:	83 ec 0c             	sub    esp,0xc
c0023af9:	50                   	push   eax
c0023afa:	e8 7b af fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c0023aff:	83 c4 10             	add    esp,0x10
c0023b02:	90                   	nop
c0023b03:	83 c4 0c             	add    esp,0xc
c0023b06:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023b08 <ATA::~ATA()>:
c0023b08:	83 ec 0c             	sub    esp,0xc
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b12:	e8 cd ff ff ff       	call   c0023ae4 <ATA::~ATA()>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	83 ec 08             	sub    esp,0x8
c0023b1d:	68 7c 01 00 00       	push   0x17c
c0023b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b26:	e8 33 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023b2b:	83 c4 10             	add    esp,0x10
c0023b2e:	83 c4 0c             	add    esp,0xc
c0023b31:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023b32 <ATAPI::~ATAPI()>:
c0023b32:	83 ec 0c             	sub    esp,0xc
c0023b35:	ba 90 77 02 c0       	mov    edx,0xc0027790
c0023b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3e:	89 10                	mov    DWORD PTR [eax],edx
c0023b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b44:	83 ec 0c             	sub    esp,0xc
c0023b47:	50                   	push   eax
c0023b48:	e8 2d af fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c0023b4d:	83 c4 10             	add    esp,0x10
c0023b50:	90                   	nop
c0023b51:	83 c4 0c             	add    esp,0xc
c0023b54:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023b56 <ATAPI::~ATAPI()>:
c0023b56:	83 ec 0c             	sub    esp,0xc
c0023b59:	83 ec 0c             	sub    esp,0xc
c0023b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b60:	e8 cd ff ff ff       	call   c0023b32 <ATAPI::~ATAPI()>
c0023b65:	83 c4 10             	add    esp,0x10
c0023b68:	83 ec 08             	sub    esp,0x8
c0023b6b:	68 84 01 00 00       	push   0x184
c0023b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b74:	e8 e5 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023b79:	83 c4 10             	add    esp,0x10
c0023b7c:	83 c4 0c             	add    esp,0xc
c0023b7f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023b80 <SATA::~SATA()>:
c0023b80:	83 ec 0c             	sub    esp,0xc
c0023b83:	ba cc 79 02 c0       	mov    edx,0xc00279cc
c0023b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8c:	89 10                	mov    DWORD PTR [eax],edx
c0023b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b92:	83 ec 0c             	sub    esp,0xc
c0023b95:	50                   	push   eax
c0023b96:	e8 df ae fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c0023b9b:	83 c4 10             	add    esp,0x10
c0023b9e:	90                   	nop
c0023b9f:	83 c4 0c             	add    esp,0xc
c0023ba2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023ba4 <SATA::~SATA()>:
c0023ba4:	83 ec 0c             	sub    esp,0xc
c0023ba7:	83 ec 0c             	sub    esp,0xc
c0023baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bae:	e8 cd ff ff ff       	call   c0023b80 <SATA::~SATA()>
c0023bb3:	83 c4 10             	add    esp,0x10
c0023bb6:	83 ec 08             	sub    esp,0x8
c0023bb9:	68 7c 01 00 00       	push   0x17c
c0023bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bc2:	e8 97 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023bc7:	83 c4 10             	add    esp,0x10
c0023bca:	83 c4 0c             	add    esp,0xc
c0023bcd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023bce <SATAPI::~SATAPI()>:
c0023bce:	83 ec 0c             	sub    esp,0xc
c0023bd1:	ba 38 7b 02 c0       	mov    edx,0xc0027b38
c0023bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bda:	89 10                	mov    DWORD PTR [eax],edx
c0023bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be0:	83 ec 0c             	sub    esp,0xc
c0023be3:	50                   	push   eax
c0023be4:	e8 91 ae fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c0023be9:	83 c4 10             	add    esp,0x10
c0023bec:	90                   	nop
c0023bed:	83 c4 0c             	add    esp,0xc
c0023bf0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023bf2 <SATAPI::~SATAPI()>:
c0023bf2:	83 ec 0c             	sub    esp,0xc
c0023bf5:	83 ec 0c             	sub    esp,0xc
c0023bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bfc:	e8 cd ff ff ff       	call   c0023bce <SATAPI::~SATAPI()>
c0023c01:	83 c4 10             	add    esp,0x10
c0023c04:	83 ec 08             	sub    esp,0x8
c0023c07:	68 84 01 00 00       	push   0x184
c0023c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c10:	e8 49 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023c15:	83 c4 10             	add    esp,0x10
c0023c18:	83 c4 0c             	add    esp,0xc
c0023c1b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023c1c <AVX::~AVX()>:
c0023c1c:	83 ec 0c             	sub    esp,0xc
c0023c1f:	ba 78 7b 02 c0       	mov    edx,0xc0027b78
c0023c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c28:	89 10                	mov    DWORD PTR [eax],edx
c0023c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c2e:	83 ec 0c             	sub    esp,0xc
c0023c31:	50                   	push   eax
c0023c32:	e8 c9 ae fe ff       	call   c000eb00 <FPU::~FPU()>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	90                   	nop
c0023c3b:	83 c4 0c             	add    esp,0xc
c0023c3e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023c40 <AVX::~AVX()>:
c0023c40:	83 ec 0c             	sub    esp,0xc
c0023c43:	83 ec 0c             	sub    esp,0xc
c0023c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c4a:	e8 cd ff ff ff       	call   c0023c1c <AVX::~AVX()>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	83 ec 08             	sub    esp,0x8
c0023c55:	68 58 01 00 00       	push   0x158
c0023c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c5e:	e8 fb 92 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023c63:	83 c4 10             	add    esp,0x10
c0023c66:	83 c4 0c             	add    esp,0xc
c0023c69:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023c6c <MMX::~MMX()>:
c0023c6c:	83 ec 0c             	sub    esp,0xc
c0023c6f:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c0023c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c78:	89 10                	mov    DWORD PTR [eax],edx
c0023c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	50                   	push   eax
c0023c82:	e8 79 ae fe ff       	call   c000eb00 <FPU::~FPU()>
c0023c87:	83 c4 10             	add    esp,0x10
c0023c8a:	90                   	nop
c0023c8b:	83 c4 0c             	add    esp,0xc
c0023c8e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023c90 <MMX::~MMX()>:
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	83 ec 0c             	sub    esp,0xc
c0023c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c9a:	e8 cd ff ff ff       	call   c0023c6c <MMX::~MMX()>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	83 ec 08             	sub    esp,0x8
c0023ca5:	68 58 01 00 00       	push   0x158
c0023caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cae:	e8 ab 92 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023cb3:	83 c4 10             	add    esp,0x10
c0023cb6:	83 c4 0c             	add    esp,0xc
c0023cb9:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023cbc <SSE::~SSE()>:
c0023cbc:	83 ec 0c             	sub    esp,0xc
c0023cbf:	ba f8 7b 02 c0       	mov    edx,0xc0027bf8
c0023cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc8:	89 10                	mov    DWORD PTR [eax],edx
c0023cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cce:	83 ec 0c             	sub    esp,0xc
c0023cd1:	50                   	push   eax
c0023cd2:	e8 29 ae fe ff       	call   c000eb00 <FPU::~FPU()>
c0023cd7:	83 c4 10             	add    esp,0x10
c0023cda:	90                   	nop
c0023cdb:	83 c4 0c             	add    esp,0xc
c0023cde:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023ce0 <SSE::~SSE()>:
c0023ce0:	83 ec 0c             	sub    esp,0xc
c0023ce3:	83 ec 0c             	sub    esp,0xc
c0023ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cea:	e8 cd ff ff ff       	call   c0023cbc <SSE::~SSE()>
c0023cef:	83 c4 10             	add    esp,0x10
c0023cf2:	83 ec 08             	sub    esp,0x8
c0023cf5:	68 58 01 00 00       	push   0x158
c0023cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cfe:	e8 5b 92 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023d03:	83 c4 10             	add    esp,0x10
c0023d06:	83 c4 0c             	add    esp,0xc
c0023d09:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023d0a <x87::~x87()>:
c0023d0a:	83 ec 0c             	sub    esp,0xc
c0023d0d:	ba 98 7c 02 c0       	mov    edx,0xc0027c98
c0023d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d16:	89 10                	mov    DWORD PTR [eax],edx
c0023d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1c:	83 ec 0c             	sub    esp,0xc
c0023d1f:	50                   	push   eax
c0023d20:	e8 db ad fe ff       	call   c000eb00 <FPU::~FPU()>
c0023d25:	83 c4 10             	add    esp,0x10
c0023d28:	90                   	nop
c0023d29:	83 c4 0c             	add    esp,0xc
c0023d2c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023d2e <x87::~x87()>:
c0023d2e:	83 ec 0c             	sub    esp,0xc
c0023d31:	83 ec 0c             	sub    esp,0xc
c0023d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d38:	e8 cd ff ff ff       	call   c0023d0a <x87::~x87()>
c0023d3d:	83 c4 10             	add    esp,0x10
c0023d40:	83 ec 08             	sub    esp,0x8
c0023d43:	68 58 01 00 00       	push   0x158
c0023d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d4c:	e8 0d 92 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023d51:	83 c4 10             	add    esp,0x10
c0023d54:	83 c4 0c             	add    esp,0xc
c0023d57:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023d58 <IOAPIC::~IOAPIC()>:
c0023d58:	83 ec 0c             	sub    esp,0xc
c0023d5b:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c0023d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d64:	89 10                	mov    DWORD PTR [eax],edx
c0023d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6a:	83 ec 0c             	sub    esp,0xc
c0023d6d:	50                   	push   eax
c0023d6e:	e8 0d a7 fe ff       	call   c000e480 <Device::~Device()>
c0023d73:	83 c4 10             	add    esp,0x10
c0023d76:	90                   	nop
c0023d77:	83 c4 0c             	add    esp,0xc
c0023d7a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023d7c <IOAPIC::~IOAPIC()>:
c0023d7c:	83 ec 0c             	sub    esp,0xc
c0023d7f:	83 ec 0c             	sub    esp,0xc
c0023d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d86:	e8 cd ff ff ff       	call   c0023d58 <IOAPIC::~IOAPIC()>
c0023d8b:	83 c4 10             	add    esp,0x10
c0023d8e:	83 ec 08             	sub    esp,0x8
c0023d91:	68 68 01 00 00       	push   0x168
c0023d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d9a:	e8 bf 91 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023d9f:	83 c4 10             	add    esp,0x10
c0023da2:	83 c4 0c             	add    esp,0xc
c0023da5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023da6 <APIC::~APIC()>:
c0023da6:	83 ec 0c             	sub    esp,0xc
c0023da9:	ba a8 7d 02 c0       	mov    edx,0xc0027da8
c0023dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db2:	89 10                	mov    DWORD PTR [eax],edx
c0023db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db8:	83 ec 0c             	sub    esp,0xc
c0023dbb:	50                   	push   eax
c0023dbc:	e8 c7 b1 fe ff       	call   c000ef88 <InterruptController::~InterruptController()>
c0023dc1:	83 c4 10             	add    esp,0x10
c0023dc4:	90                   	nop
c0023dc5:	83 c4 0c             	add    esp,0xc
c0023dc8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023dca <APIC::~APIC()>:
c0023dca:	83 ec 0c             	sub    esp,0xc
c0023dcd:	83 ec 0c             	sub    esp,0xc
c0023dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dd4:	e8 cd ff ff ff       	call   c0023da6 <APIC::~APIC()>
c0023dd9:	83 c4 10             	add    esp,0x10
c0023ddc:	83 ec 08             	sub    esp,0x8
c0023ddf:	68 58 21 00 00       	push   0x2158
c0023de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023de8:	e8 71 91 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023ded:	83 c4 10             	add    esp,0x10
c0023df0:	83 c4 0c             	add    esp,0xc
c0023df3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023df4 <PIC::~PIC()>:
c0023df4:	83 ec 0c             	sub    esp,0xc
c0023df7:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c0023dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e00:	89 10                	mov    DWORD PTR [eax],edx
c0023e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e06:	83 ec 0c             	sub    esp,0xc
c0023e09:	50                   	push   eax
c0023e0a:	e8 79 b1 fe ff       	call   c000ef88 <InterruptController::~InterruptController()>
c0023e0f:	83 c4 10             	add    esp,0x10
c0023e12:	90                   	nop
c0023e13:	83 c4 0c             	add    esp,0xc
c0023e16:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023e18 <PIC::~PIC()>:
c0023e18:	83 ec 0c             	sub    esp,0xc
c0023e1b:	83 ec 0c             	sub    esp,0xc
c0023e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e22:	e8 cd ff ff ff       	call   c0023df4 <PIC::~PIC()>
c0023e27:	83 c4 10             	add    esp,0x10
c0023e2a:	83 ec 08             	sub    esp,0x8
c0023e2d:	68 58 21 00 00       	push   0x2158
c0023e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e36:	e8 23 91 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023e3b:	83 c4 10             	add    esp,0x10
c0023e3e:	83 c4 0c             	add    esp,0xc
c0023e41:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023e44 <APICTimer::~APICTimer()>:
c0023e44:	83 ec 0c             	sub    esp,0xc
c0023e47:	ba 94 7e 02 c0       	mov    edx,0xc0027e94
c0023e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e50:	89 10                	mov    DWORD PTR [eax],edx
c0023e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e56:	83 ec 0c             	sub    esp,0xc
c0023e59:	50                   	push   eax
c0023e5a:	e8 9d cf fe ff       	call   c0010dfc <Timer::~Timer()>
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	90                   	nop
c0023e63:	83 c4 0c             	add    esp,0xc
c0023e66:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023e68 <APICTimer::~APICTimer()>:
c0023e68:	83 ec 0c             	sub    esp,0xc
c0023e6b:	83 ec 0c             	sub    esp,0xc
c0023e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e72:	e8 cd ff ff ff       	call   c0023e44 <APICTimer::~APICTimer()>
c0023e77:	83 c4 10             	add    esp,0x10
c0023e7a:	83 ec 08             	sub    esp,0x8
c0023e7d:	68 60 01 00 00       	push   0x160
c0023e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e86:	e8 d3 90 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023e8b:	83 c4 10             	add    esp,0x10
c0023e8e:	83 c4 0c             	add    esp,0xc
c0023e91:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023e94 <PIT::~PIT()>:
c0023e94:	83 ec 0c             	sub    esp,0xc
c0023e97:	ba e4 7e 02 c0       	mov    edx,0xc0027ee4
c0023e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ea0:	89 10                	mov    DWORD PTR [eax],edx
c0023ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ea6:	83 ec 0c             	sub    esp,0xc
c0023ea9:	50                   	push   eax
c0023eaa:	e8 4d cf fe ff       	call   c0010dfc <Timer::~Timer()>
c0023eaf:	83 c4 10             	add    esp,0x10
c0023eb2:	90                   	nop
c0023eb3:	83 c4 0c             	add    esp,0xc
c0023eb6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023eb8 <PIT::~PIT()>:
c0023eb8:	83 ec 0c             	sub    esp,0xc
c0023ebb:	83 ec 0c             	sub    esp,0xc
c0023ebe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ec2:	e8 cd ff ff ff       	call   c0023e94 <PIT::~PIT()>
c0023ec7:	83 c4 10             	add    esp,0x10
c0023eca:	83 ec 08             	sub    esp,0x8
c0023ecd:	68 5c 01 00 00       	push   0x15c
c0023ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ed6:	e8 83 90 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023edb:	83 c4 10             	add    esp,0x10
c0023ede:	83 c4 0c             	add    esp,0xc
c0023ee1:	c3                   	ret    
