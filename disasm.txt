
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 04 41 02 c0       	mov    eax,0xc0024104
c0000025:	3d 04 41 02 c0       	cmp    eax,0xc0024104
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 04 41 02 c0       	push   0xc0024104
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 04 41 02 c0       	mov    eax,0xc0024104
c0000051:	2d 04 41 02 c0       	sub    eax,0xc0024104
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 04 41 02 c0       	push   0xc0024104
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c 03 02 c0       	mov    ebx,0xc002037c
c0000097:	81 eb 78 03 02 c0    	sub    ebx,0xc0020378
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 03 02 c0       	mov    esi,0xc0020378
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 04 41 02 c0       	push   0xc0024104
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 04 41 02 c0       	push   0xc0024104
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 c7 55 01 00       	call   c0015874 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a5 55 01 00       	call   c0015874 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b2 5a 01 00       	call   c0015da0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 71 61 01 00       	call   c0016468 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 27 12 01 00       	jmp    c00115a6 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc80],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc80],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc80],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc80],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc80],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 84 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb7c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 6e 7c 01 00       	jmp    c0019a10 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 98 7c 01 00       	jmp    c0019a50 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 b9 7c 01 00       	jmp    c0019a90 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 e0 05 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfa20]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 e0 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfa20]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 24 2d 02 c0       	mov    edx,0xc0022d24
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 9c 04 02 c0       	mov    edx,0xc002049c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 a2 04 02 c0       	mov    eax,0xc00204a2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 60 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfaa0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 ab 04 02 c0       	mov    eax,0xc00204ab
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 e0 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfa20]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 30 05 02 c0       	mov    eax,0xc0020530
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 20 05 02 c0       	mov    ebx,0xc0020520
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 00 05 02 c0       	mov    eax,0xc0020500
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 10 05 02 c0       	mov    eax,0xc0020510
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba b2 04 02 c0       	mov    edx,0xc00204b2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba be 04 02 c0       	mov    edx,0xc00204be
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba d2 04 02 c0       	mov    edx,0xc00204d2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 00 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020900
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 00 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020900
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 00 07 02 c0       	mov    eax,0xc0020700
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 40 06 02 c0       	mov    eax,0xc0020640
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 00 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa00]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 00 0a 02 c0       	push   0xc0020a00
c000611b:	e8 8c 42 01 00       	call   c001a3ac <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 0e 0a 02 c0       	push   0xc0020a0e
c0006153:	e8 54 42 01 00       	call   c001a3ac <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 bd 41 01 00       	call   c001a350 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 1d 0a 02 c0       	push   0xc0020a1d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 20 0a 02 c0       	push   0xc0020a20
c0006812:	e8 95 3b 01 00       	call   c001a3ac <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 a9 3b 01 00       	call   c001a3c8 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 25 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a25
c000682c:	e8 7b 3b 01 00       	call   c001a3ac <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 8b 3b 01 00       	call   c001a3c8 <iso_kprintfd>
c000683d:	c7 04 24 2b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a2b
c0006844:	e8 63 3b 01 00       	call   c001a3ac <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 73 3b 01 00       	call   c001a3c8 <iso_kprintfd>
c0006855:	c7 04 24 31 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a31
c000685c:	e8 4b 3b 01 00       	call   c001a3ac <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 5b 3b 01 00       	call   c001a3c8 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 1d 0a 02 c0       	push   0xc0020a1d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 3a 0a 02 c0       	push   0xc0020a3a
c0006a31:	e8 76 39 01 00       	call   c001a3ac <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 45 0a 02 c0       	push   0xc0020a45
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 4c 0a 02 c0       	push   0xc0020a4c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 53 0a 02 c0       	push   0xc0020a53
c0006b48:	e8 5f 38 01 00       	call   c001a3ac <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 5e 0a 02 c0       	push   0xc0020a5e
c0006b63:	e8 44 38 01 00       	call   c001a3ac <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 6a a1 00 00       	call   c0010ddc <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 ff 5d 00 00       	call   c000ca80 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 6f 0a 02 c0       	push   0xc0020a6f
c0006cb2:	e8 04 a2 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 88 0a 02 c0       	push   0xc0020a88
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 ed ee 00 00       	call   c0015bcc <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 fc f0 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 d8 68 01 c0       	push   0xc00168d8
c0006d03:	52                   	push   edx
c0006d04:	e8 e7 f0 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 84 0b 02 c0       	push   0xc0020b84
c0006d16:	e8 a0 a1 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 4d aa 00 00       	call   c0011774 <KeInitRand()>
c0006d27:	e8 cf ff 00 00       	call   c0016cfb <Vm::initialise8086()>
c0006d2c:	e8 a7 4a 00 00       	call   c000b7d8 <Fs::initVFS()>
c0006d31:	c7 04 24 95 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a95
c0006d38:	e8 7e a1 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 84 0b 02 c0       	push   0xc0020b84
c0006d5c:	e8 5a a1 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006d61:	e8 95 46 00 00       	call   c000b3fb <KeInitialiseSymlinks()>
c0006d66:	e8 b3 a6 00 00       	call   c001141e <KeLoadSystemEnv()>
c0006d6b:	e8 10 a9 00 00       	call   c0011680 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 af 0a 02 c0       	push   0xc0020aaf
c0006d7a:	68 b8 0a 02 c0       	push   0xc0020ab8
c0006d7f:	e8 64 d0 00 00       	call   c0013de8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 54 56 00 00       	call   c000c3e0 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 a8 0b 02 c0 	mov    DWORD PTR [esp],0xc0020ba8
c0006d93:	e8 23 a1 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 d4 5c 00 00       	call   c000ca7e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 c0 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ac0
c0006db1:	e8 05 a1 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 d1 0a 02 c0       	push   0xc0020ad1
c0006dc5:	e8 15 e8 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 3d ea 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 74 f4 00 00       	call   c0016254 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 ed 0a 02 c0       	push   0xc0020aed
c0006df5:	50                   	push   eax
c0006df6:	e8 ff 5c 00 00       	call   c000cafa <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba f4 0b 02 c0       	mov    edx,0xc0020bf4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 81 84 01 00       	call   c001f376 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 c1 93 00 00       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 9a 93 00 00       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 78 93 00 00       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 56 93 00 00       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 63 92 00 00       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 3e 92 00 00       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 e0 82 01 00       	call   c001f330 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 2e 7f 01 00       	call   c001efa0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 54 92 00 00       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 f6 0a 02 c0       	push   0xc0020af6
c00070e2:	e8 d4 a4 00 00       	call   c00115bb <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 fc 0a 02 c0       	push   0xc0020afc
c000711e:	e8 98 a4 00 00       	call   c00115bb <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 a1 8b 00 00       	jmp    c000fd0c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 02 0b 02 c0       	push   0xc0020b02
c00071c3:	0f 94 05 60 35 02 c0 	sete   BYTE PTR ds:0xc0023560
c00071ca:	e8 ec 9c 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 9b 86 00 00       	call   c000f880 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 6e 57 00 00       	call   c000c962 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 1a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b1a
c000720d:	e8 a9 9c 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 84 91 00 00       	call   c00103ac <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 2b 57 00 00       	call   c000c962 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 c8 0b 02 c0       	push   0xc0020bc8
c0007254:	e8 62 9c 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0007259:	e8 da 0c 01 00       	call   c0017f38 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 34 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b34
c0007265:	e8 51 9c 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 a6 ec 00 00       	call   c0015f1c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 4f 0b 02 c0       	push   0xc0020b4f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 60 0b 02 c0       	push   0xc0020b60
c00072ed:	e8 c9 a2 00 00       	call   c00115bb <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 6d 0b 02 c0       	push   0xc0020b6d
c0007302:	e8 b4 a2 00 00       	call   c00115bb <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 77 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b77
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 9a a2 00 00       	jmp    c00115bb <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 f1 06 01 00       	call   c0017c04 <HalSystemIdle()>
c0007513:	e8 1a 84 01 00       	call   c001f932 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 30 f0 01 c0       	push   0xc001f030
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 40 f0 01 c0       	push   0xc001f040
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 4a f0 01 c0       	push   0xc001f04a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 54 f0 01 c0       	push   0xc001f054
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 5e f0 01 c0       	push   0xc001f05e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 68 f0 01 c0       	push   0xc001f068
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 72 f0 01 c0       	push   0xc001f072
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 7c f0 01 c0       	push   0xc001f07c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 86 f0 01 c0       	push   0xc001f086
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 8e f0 01 c0       	push   0xc001f08e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 98 f0 01 c0       	push   0xc001f098
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 a0 f0 01 c0       	push   0xc001f0a0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 a8 f0 01 c0       	push   0xc001f0a8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 b0 f0 01 c0       	push   0xc001f0b0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ca f0 01 c0       	push   0xc001f0ca
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 d2 f0 01 c0       	push   0xc001f0d2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 dc f0 01 c0       	push   0xc001f0dc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 e6 f0 01 c0       	push   0xc001f0e6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 f0 f0 01 c0       	push   0xc001f0f0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 8a f1 01 c0       	push   0xc001f18a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 91 f1 01 c0       	push   0xc001f191
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 7c f1 01 c0       	push   0xc001f17c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 83 f1 01 c0       	push   0xc001f183
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 fa f0 01 c0       	push   0xc001f0fa
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 04 f1 01 c0       	push   0xc001f104
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 0e f1 01 c0       	push   0xc001f10e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 18 f1 01 c0       	push   0xc001f118
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 22 f1 01 c0       	push   0xc001f122
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 2c f1 01 c0       	push   0xc001f12c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 36 f1 01 c0       	push   0xc001f136
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 40 f1 01 c0       	push   0xc001f140
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 4a f1 01 c0       	push   0xc001f14a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 54 f1 01 c0       	push   0xc001f154
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 5e f1 01 c0       	push   0xc001f15e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 68 f1 01 c0       	push   0xc001f168
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 72 f1 01 c0       	push   0xc001f172
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 cc f2 01 c0       	push   0xc001f2cc
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 d6 f2 01 c0       	push   0xc001f2d6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 e0 f2 01 c0       	push   0xc001f2e0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ea f2 01 c0       	push   0xc001f2ea
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 f4 f2 01 c0       	push   0xc001f2f4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 fe f2 01 c0       	push   0xc001f2fe
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 08 f3 01 c0       	push   0xc001f308
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 12 f3 01 c0       	push   0xc001f312
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 86 f0 01 c0       	push   0xc001f086
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 54 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023554
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d 54 35 02 c0    	mov    edi,DWORD PTR ds:0xc0023554
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 54 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023554,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 54 35 02 c0       	mov    eax,ds:0xc0023554
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 18 0c 02 c0       	push   0xc0020c18
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 48 0c 02 c0       	push   0xc0020c48
c0007a27:	e8 8f 9b 00 00       	call   c00115bb <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 4d 0c 02 c0       	push   0xc0020c4d
c0007a3d:	e8 79 9b 00 00       	call   c00115bb <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 54 0c 02 c0       	push   0xc0020c54
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 d6 92 00 00       	call   c0010e3f <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 ff 91 00 00       	call   c0010d89 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 2a 7d 01 00       	call   c001f8ca <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 6c 0c 02 c0       	push   0xc0020c6c
c0007c31:	e8 85 99 00 00       	call   c00115bb <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 6c 0c 02 c0       	push   0xc0020c6c
c0007ca2:	e8 14 99 00 00       	call   c00115bb <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 58 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023558
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 58 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023558
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 58 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023558
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 11 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d11
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 0e 98 00 00       	jmp    c00115bb <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 94 0c 02 c0       	push   0xc0020c94
c0007e31:	e8 85 97 00 00       	call   c00115bb <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 27 0d 02 c0       	push   0xc0020d27
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 c4 0c 02 c0       	push   0xc0020cc4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 e8 0c 02 c0       	push   0xc0020ce8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 4d 0d 02 c0       	push   0xc0020d4d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 3f 0d 02 c0       	push   0xc0020d3f
c000813c:	e8 7a 94 00 00       	call   c00115bb <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ac 0d 02 c0       	mov    edx,0xc0020dac
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 69 0d 02 c0       	push   0xc0020d69
c0008311:	e8 a5 92 00 00       	call   c00115bb <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 e1 dc 00 00       	call   c0016040 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 b9 73 01 00       	call   c001f7b0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 86 0d 02 c0       	push   0xc0020d86
c000840c:	e8 aa 91 00 00       	call   c00115bb <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ac 0d 02 c0       	mov    edx,0xc0020dac
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba f4 0d 02 c0       	mov    edx,0xc0020df4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 46 53 00 00       	call   c000d83c <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 dc 08 01 00       	call   c0018df8 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 80 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca80]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 80 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca80]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 38 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 10 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbf0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 0e 06 01 00       	call   c0018c8c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 6b 06 01 00       	jmp    c0018d94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 c0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020dc0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 45 8e 00 00       	jmp    c00115bb <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 b4 3a 00 00       	jmp    c000c387 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ce 0d 02 c0       	mov    esi,0xc0020dce
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 72 01 01 00       	call   c0018d94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba f4 0d 02 c0       	mov    edx,0xc0020df4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 df 0d 02 c0       	push   0xc0020ddf
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 e5 0d 02 c0       	push   0xc0020de5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 c0 35 02 c0    	mov    DWORD PTR ds:0xc00235c0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 97 67 01 00       	call   c001f998 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba d8 0e 02 c0       	mov    edx,0xc0020ed8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 97 66 01 00       	call   c001fa6c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 8b 66 01 00       	call   c001fa74 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 91 65 01 00       	call   c001f998 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 94 0e 02 c0       	push   0xc0020e94
c000942c:	e8 8a 81 00 00       	call   c00115bb <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba d8 0e 02 c0       	mov    edx,0xc0020ed8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 96 65 01 00       	call   c001fa6c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 23 66 01 00       	call   c001fb16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 e1 63 01 00       	call   c001f956 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 50 35 02 c0       	push   0xc0023550
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 54 f9 01 c0       	push   0xc001f954
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 c8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235c8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d c8 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235c8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 c4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235c4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 c4 35 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00235c4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 ec 0e 02 c0       	push   0xc0020eec
c0009689:	e8 2d 7f 00 00       	call   c00115bb <KePanic(char const*)>
c000968e:	8b 35 c4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235c4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 c4 35 02 c0       	mov    eax,ds:0xc00235c4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 c4 35 02 c0       	mov    ds:0xc00235c4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 cc 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235cc
c000975f:	8b 0d d4 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235d4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d cc 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235cc
c000977a:	a1 d0 35 02 c0       	mov    eax,ds:0xc00235d0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d d0 35 02 c0    	cmp    DWORD PTR ds:0xc00235d0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 80 11 02 c0       	push   0xc0021180
c00097c0:	e8 f6 7d 00 00       	call   c00115bb <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 97 11 02 c0       	push   0xc0021197
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d d0 35 02 c0    	mov    DWORD PTR ds:0xc00235d0,ebx
c0009864:	c6 05 d8 35 02 c0 43 	mov    BYTE PTR ds:0xc00235d8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 d4 35 02 c0       	mov    ds:0xc00235d4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 cc 35 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00235cc,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 d0 35 02 c0       	mov    eax,ds:0xc00235d0
c0009896:	f7 35 cc 35 02 c0    	div    DWORD PTR ds:0xc00235cc
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 0c 0f 02 c0       	push   0xc0020f0c
c00098d1:	e8 e5 7c 00 00       	call   c00115bb <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ae 11 02 c0       	push   0xc00211ae
c00099a3:	e8 13 7c 00 00       	call   c00115bb <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 30 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f30
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 b0 7b 00 00       	jmp    c00115bb <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ca 11 02 c0       	push   0xc00211ca
c0009a18:	e8 9e 7b 00 00       	call   c00115bb <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 e6 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc00211e6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 54 7b 00 00       	jmp    c00115bb <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 54 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f54
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 78 0f 02 c0       	push   0xc0020f78
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 e0 0f 02 c0       	push   0xc0020fe0
c0009dad:	e8 09 78 00 00       	call   c00115bb <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 04 10 02 c0       	push   0xc0021004
c0009e99:	e8 1d 77 00 00       	call   c00115bb <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 30 10 02 c0       	push   0xc0021030
c0009fed:	e8 c9 75 00 00       	call   c00115bb <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 d2 29 00 00       	call   c000cbf6 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 00 12 02 c0       	push   0xc0021200
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 cc 35 02 c0       	mov    eax,ds:0xc00235cc
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 d8 35 02 c0 	movsx  eax,BYTE PTR ds:0xc00235d8
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 a6 3a 00 00       	call   c000ddb0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d cc 35 02 c0    	cmp    DWORD PTR ds:0xc00235cc,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 54 10 02 c0       	push   0xc0021054
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 0e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002120e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 31 12 02 c0       	push   0xc0021231
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 1f 12 02 c0       	push   0xc002121f
c000a3db:	e8 db 71 00 00       	call   c00115bb <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 31 12 02 c0       	push   0xc0021231
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 cc 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235cc
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 d8 35 02 c0 	movsx  eax,BYTE PTR ds:0xc00235d8
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 bd 38 00 00       	call   c000dd44 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 cc 35 02 c0    	cmp    DWORD PTR ds:0xc00235cc,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 44 12 02 c0       	push   0xc0021244
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 84 10 02 c0       	push   0xc0021084
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 a4 10 02 c0       	push   0xc00210a4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 04 11 02 c0 	mov    DWORD PTR [esp],0xc0021104
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 59 12 02 c0       	push   0xc0021259
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 6d 12 02 c0       	push   0xc002126d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 80 12 02 c0       	push   0xc0021280
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 8d 12 02 c0       	push   0xc002128d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 a6 12 02 c0       	push   0xc00212a6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 a6 12 02 c0       	push   0xc00212a6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ae 12 02 c0 	mov    DWORD PTR [esp],0xc00212ae
c000a7f8:	e8 be 6d 00 00       	call   c00115bb <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 c6 12 02 c0       	push   0xc00212c6
c000a80a:	e8 ac 6d 00 00       	call   c00115bb <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be cf 0d 02 c0       	mov    esi,0xc0020dcf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ce 0d 02 c0       	mov    al,ds:0xc0020dce
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 dc 12 02 c0 	jmp    DWORD PTR [eax*4-0x3ffded24]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 2c 14 02 c0       	push   0xc002142c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 40 14 02 c0       	push   0xc0021440
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 4a 14 02 c0       	push   0xc002144a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 54 14 02 c0       	push   0xc0021454
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 98 15 02 c0       	push   0xc0021598
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 5e 14 02 c0       	push   0xc002145e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 b8 15 02 c0       	push   0xc00215b8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 73 14 02 c0       	push   0xc0021473
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 8d 14 02 c0       	push   0xc002148d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 e0 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca20]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 e0 15 02 c0       	push   0xc00215e0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 98 15 02 c0       	push   0xc0021598
c000abb4:	e8 02 6a 00 00       	call   c00115bb <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 28 16 02 c0       	push   0xc0021628
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 28 16 02 c0       	push   0xc0021628
c000abe3:	e8 d3 69 00 00       	call   c00115bb <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 98 14 02 c0       	push   0xc0021498
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 98 14 02 c0       	push   0xc0021498
c000ac0f:	e8 a7 69 00 00       	call   c00115bb <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 b5 14 02 c0       	push   0xc00214b5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 b5 14 02 c0       	push   0xc00214b5
c000ac3b:	e8 7b 69 00 00       	call   c00115bb <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 48 16 02 c0       	push   0xc0021648
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 48 16 02 c0       	push   0xc0021648
c000ac67:	e8 4f 69 00 00       	call   c00115bb <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 6c 16 02 c0       	push   0xc002166c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 6c 16 02 c0       	push   0xc002166c
c000ac93:	e8 23 69 00 00       	call   c00115bb <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 d1 14 02 c0       	push   0xc00214d1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 d1 14 02 c0       	push   0xc00214d1
c000acbf:	e8 f7 68 00 00       	call   c00115bb <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 ed 14 02 c0       	push   0xc00214ed
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 ed 14 02 c0       	push   0xc00214ed
c000aceb:	e8 cb 68 00 00       	call   c00115bb <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 8c 16 02 c0       	push   0xc002168c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 8c 16 02 c0       	push   0xc002168c
c000ad17:	e8 9f 68 00 00       	call   c00115bb <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 b0 16 02 c0       	push   0xc00216b0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 b0 16 02 c0       	push   0xc00216b0
c000ad43:	e8 73 68 00 00       	call   c00115bb <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 cf 16 02 c0       	push   0xc00216cf
c000adba:	50                   	push   eax
c000adbb:	e8 2a 0d 00 00       	call   c000baea <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 ed 16 02 c0       	push   0xc00216ed
c000adcf:	e8 e7 67 00 00       	call   c00115bb <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 27 0d 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 07 17 02 c0       	push   0xc0021707
c000adf0:	e8 c6 67 00 00       	call   c00115bb <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 21 17 02 c0       	push   0xc0021721
c000ae37:	e8 7f 67 00 00       	call   c00115bb <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 3b 17 02 c0       	push   0xc002173b
c000ae67:	e8 4f 67 00 00       	call   c00115bb <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 eb 0c 00 00       	call   c000bb66 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 84 60 00 00       	call   c0010f3d <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 36 68 00 00       	call   c0011709 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1b             	shl    eax,0x1b
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 55 17 02 c0       	push   0xc0021755
c000af0c:	e8 aa 66 00 00       	call   c00115bb <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 d7 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 7b fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 3d 01 00 00    	je     c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afe3:	31 db                	xor    ebx,ebx
c000afe5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afeb:	7e 30                	jle    c000b01d <KiIsSymlinkRegistered(char const*)+0x68>
c000afed:	89 d8                	mov    eax,ebx
c000afef:	57                   	push   edi
c000aff0:	c1 e0 08             	shl    eax,0x8
c000aff3:	57                   	push   edi
c000aff4:	05 00 70 02 c0       	add    eax,0xc0027000
c000aff9:	50                   	push   eax
c000affa:	56                   	push   esi
c000affb:	e8 50 57 ff ff       	call   c0000750 <strcmp>
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	85 c0                	test   eax,eax
c000b005:	75 13                	jne    c000b01a <KiIsSymlinkRegistered(char const*)+0x65>
c000b007:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b00e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b015:	e9 06 01 00 00       	jmp    c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b01a:	43                   	inc    ebx
c000b01b:	eb c8                	jmp    c000afe5 <KiIsSymlinkRegistered(char const*)+0x30>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	68 14 01 00 00       	push   0x114
c000b025:	e8 8c ca ff ff       	call   c0007ab6 <malloc>
c000b02a:	83 c4 0c             	add    esp,0xc
c000b02d:	89 c3                	mov    ebx,eax
c000b02f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b035:	68 cf 16 02 c0       	push   0xc00216cf
c000b03a:	50                   	push   eax
c000b03b:	e8 aa 0a 00 00       	call   c000baea <File::File(char const*, Process*)>
c000b040:	83 c4 10             	add    esp,0x10
c000b043:	85 db                	test   ebx,ebx
c000b045:	75 12                	jne    c000b059 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	68 5e 17 02 c0       	push   0xc002175e
c000b04f:	e8 67 65 00 00       	call   c00115bb <KePanic(char const*)>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 10                	jmp    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b059:	83 ec 0c             	sub    esp,0xc
c000b05c:	53                   	push   ebx
c000b05d:	e8 6a 0d 00 00       	call   c000bdcc <File::exists()>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	84 c0                	test   al,al
c000b067:	74 de                	je     c000b047 <KiIsSymlinkRegistered(char const*)+0x92>
c000b069:	51                   	push   ecx
c000b06a:	51                   	push   ecx
c000b06b:	6a 01                	push   0x1
c000b06d:	53                   	push   ebx
c000b06e:	e8 95 0a 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	85 c0                	test   eax,eax
c000b078:	74 10                	je     c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	68 79 17 02 c0       	push   0xc0021779
c000b082:	e8 34 65 00 00       	call   c00115bb <KePanic(char const*)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b093:	55                   	push   ebp
c000b094:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b098:	57                   	push   edi
c000b099:	6a 00                	push   0x0
c000b09b:	68 00 01 00 00       	push   0x100
c000b0a0:	53                   	push   ebx
c000b0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0a4:	83 c4 20             	add    esp,0x20
c000b0a7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0af:	75 57                	jne    c000b108 <KiIsSymlinkRegistered(char const*)+0x153>
c000b0b1:	83 ec 0c             	sub    esp,0xc
c000b0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b6:	55                   	push   ebp
c000b0b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0bb:	52                   	push   edx
c000b0bc:	6a 00                	push   0x0
c000b0be:	6a 08                	push   0x8
c000b0c0:	53                   	push   ebx
c000b0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c4:	83 c4 20             	add    esp,0x20
c000b0c7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0cc:	75 3a                	jne    c000b108 <KiIsSymlinkRegistered(char const*)+0x153>
c000b0ce:	52                   	push   edx
c000b0cf:	52                   	push   edx
c000b0d0:	57                   	push   edi
c000b0d1:	56                   	push   esi
c000b0d2:	e8 79 56 ff ff       	call   c0000750 <strcmp>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	75 ac                	jne    c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0de:	50                   	push   eax
c000b0df:	50                   	push   eax
c000b0e0:	57                   	push   edi
c000b0e1:	68 94 17 02 c0       	push   0xc0021794
c000b0e6:	e8 5a f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ee:	e8 73 0a 00 00       	call   c000bb66 <File::close()>
c000b0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	eb 18                	jmp    c000b120 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	53                   	push   ebx
c000b10c:	e8 55 0a 00 00       	call   c000bb66 <File::close()>
c000b111:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b113:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b116:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	31 c0                	xor    eax,eax
c000b11e:	31 d2                	xor    edx,edx
c000b120:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b126:	5b                   	pop    ebx
c000b127:	5e                   	pop    esi
c000b128:	5f                   	pop    edi
c000b129:	5d                   	pop    ebp
c000b12a:	c3                   	ret    

c000b12b <KeDereferenceSymlink(char const*, char*)>:
c000b12b:	55                   	push   ebp
c000b12c:	57                   	push   edi
c000b12d:	56                   	push   esi
c000b12e:	53                   	push   ebx
c000b12f:	83 ec 48             	sub    esp,0x48
c000b132:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b136:	56                   	push   esi
c000b137:	e8 79 fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b13c:	83 c4 10             	add    esp,0x10
c000b13f:	89 c7                	mov    edi,eax
c000b141:	89 d0                	mov    eax,edx
c000b143:	09 f8                	or     eax,edi
c000b145:	75 07                	jne    c000b14e <KeDereferenceSymlink(char const*, char*)+0x23>
c000b147:	31 c0                	xor    eax,eax
c000b149:	e9 69 01 00 00       	jmp    c000b2b7 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b14e:	83 ec 0c             	sub    esp,0xc
c000b151:	89 d5                	mov    ebp,edx
c000b153:	68 14 01 00 00       	push   0x114
c000b158:	e8 59 c9 ff ff       	call   c0007ab6 <malloc>
c000b15d:	83 c4 0c             	add    esp,0xc
c000b160:	89 c3                	mov    ebx,eax
c000b162:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b168:	56                   	push   esi
c000b169:	50                   	push   eax
c000b16a:	e8 7b 09 00 00       	call   c000baea <File::File(char const*, Process*)>
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	85 db                	test   ebx,ebx
c000b174:	0f 84 1f 01 00 00    	je     c000b299 <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b17a:	52                   	push   edx
c000b17b:	52                   	push   edx
c000b17c:	6a 01                	push   0x1
c000b17e:	53                   	push   ebx
c000b17f:	e8 84 09 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	85 c0                	test   eax,eax
c000b189:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18b:	74 09                	je     c000b196 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b18d:	83 ec 0c             	sub    esp,0xc
c000b190:	53                   	push   ebx
c000b191:	e9 fd 00 00 00       	jmp    c000b293 <KeDereferenceSymlink(char const*, char*)+0x168>
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b19d:	56                   	push   esi
c000b19e:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1a2:	52                   	push   edx
c000b1a3:	6a 00                	push   0x0
c000b1a5:	6a 08                	push   0x8
c000b1a7:	53                   	push   ebx
c000b1a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1ab:	83 c4 20             	add    esp,0x20
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 cf 00 00 00    	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1b6:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1bb:	0f 85 c4 00 00 00    	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1c1:	83 ec 0c             	sub    esp,0xc
c000b1c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c6:	56                   	push   esi
c000b1c7:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1cb:	52                   	push   edx
c000b1cc:	6a 00                	push   0x0
c000b1ce:	6a 08                	push   0x8
c000b1d0:	53                   	push   ebx
c000b1d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1d4:	83 c4 20             	add    esp,0x20
c000b1d7:	85 c0                	test   eax,eax
c000b1d9:	0f 85 a6 00 00 00    	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1df:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1e4:	0f 85 9b 00 00 00    	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1ea:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1ee:	0f 85 53 ff ff ff    	jne    c000b147 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1f4:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1f8:	0f 85 49 ff ff ff    	jne    c000b147 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b206:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b20e:	50                   	push   eax
c000b20f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b213:	50                   	push   eax
c000b214:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b218:	50                   	push   eax
c000b219:	53                   	push   ebx
c000b21a:	e8 eb 0b 00 00       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b227:	75 5c                	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b229:	31 c9                	xor    ecx,ecx
c000b22b:	bf 0f 00 00 00       	mov    edi,0xf
c000b230:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b234:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b238:	39 c7                	cmp    edi,eax
c000b23a:	89 cf                	mov    edi,ecx
c000b23c:	19 d7                	sbb    edi,edx
c000b23e:	73 45                	jae    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b240:	83 c0 f0             	add    eax,0xfffffff0
c000b243:	bf ff 00 00 00       	mov    edi,0xff
c000b248:	83 d2 ff             	adc    edx,0xffffffff
c000b24b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b24f:	39 c7                	cmp    edi,eax
c000b251:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b255:	19 d1                	sbb    ecx,edx
c000b257:	72 40                	jb     c000b299 <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b259:	83 ec 0c             	sub    esp,0xc
c000b25c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b25e:	56                   	push   esi
c000b25f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b263:	52                   	push   edx
c000b264:	50                   	push   eax
c000b265:	53                   	push   ebx
c000b266:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b269:	83 c4 20             	add    esp,0x20
c000b26c:	85 c0                	test   eax,eax
c000b26e:	75 15                	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b270:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b274:	89 c7                	mov    edi,eax
c000b276:	c1 ff 1f             	sar    edi,0x1f
c000b279:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b27d:	75 06                	jne    c000b285 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b27f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b283:	74 19                	je     c000b29e <KeDereferenceSymlink(char const*, char*)+0x173>
c000b285:	83 ec 0c             	sub    esp,0xc
c000b288:	53                   	push   ebx
c000b289:	e8 d8 08 00 00       	call   c000bb66 <File::close()>
c000b28e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b293:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	83 c8 ff             	or     eax,0xffffffff
c000b29c:	eb 19                	jmp    c000b2b7 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	53                   	push   ebx
c000b2a2:	e8 bf 08 00 00       	call   c000bb66 <File::close()>
c000b2a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	b8 01 00 00 00       	mov    eax,0x1
c000b2b7:	83 c4 3c             	add    esp,0x3c
c000b2ba:	5b                   	pop    ebx
c000b2bb:	5e                   	pop    esi
c000b2bc:	5f                   	pop    edi
c000b2bd:	5d                   	pop    ebp
c000b2be:	c3                   	ret    

c000b2bf <KeCreateSymlink(char const*, char const*)>:
c000b2bf:	55                   	push   ebp
c000b2c0:	57                   	push   edi
c000b2c1:	56                   	push   esi
c000b2c2:	53                   	push   ebx
c000b2c3:	83 ec 38             	sub    esp,0x38
c000b2c6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b2ca:	68 14 01 00 00       	push   0x114
c000b2cf:	e8 e2 c7 ff ff       	call   c0007ab6 <malloc>
c000b2d4:	6a 00                	push   0x0
c000b2d6:	89 c3                	mov    ebx,eax
c000b2d8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2e2:	50                   	push   eax
c000b2e3:	e8 24 07 00 00       	call   c000ba0c <File::File(char const*, Process*, bool)>
c000b2e8:	83 c4 20             	add    esp,0x20
c000b2eb:	b8 01 00 00 00       	mov    eax,0x1
c000b2f0:	85 db                	test   ebx,ebx
c000b2f2:	0f 84 fb 00 00 00    	je     c000b3f3 <KeCreateSymlink(char const*, char const*)+0x134>
c000b2f8:	52                   	push   edx
c000b2f9:	52                   	push   edx
c000b2fa:	6a 12                	push   0x12
c000b2fc:	53                   	push   ebx
c000b2fd:	e8 06 08 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000b302:	83 c4 10             	add    esp,0x10
c000b305:	85 c0                	test   eax,eax
c000b307:	74 0b                	je     c000b314 <KeCreateSymlink(char const*, char const*)+0x55>
c000b309:	83 ec 0c             	sub    esp,0xc
c000b30c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b30e:	53                   	push   ebx
c000b30f:	e9 d4 00 00 00       	jmp    c000b3e8 <KeCreateSymlink(char const*, char const*)+0x129>
c000b314:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b318:	be ab 17 02 c0       	mov    esi,0xc00217ab
c000b31d:	b9 09 00 00 00       	mov    ecx,0x9
c000b322:	fc                   	cld    
c000b323:	83 ec 0c             	sub    esp,0xc
c000b326:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b328:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b32c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b32e:	56                   	push   esi
c000b32f:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b333:	52                   	push   edx
c000b334:	6a 00                	push   0x0
c000b336:	6a 08                	push   0x8
c000b338:	53                   	push   ebx
c000b339:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b33c:	83 c4 20             	add    esp,0x20
c000b33f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b344:	0f 85 90 00 00 00    	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b34a:	85 c0                	test   eax,eax
c000b34c:	0f 85 88 00 00 00    	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b352:	e8 6e fb ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b357:	83 ec 0c             	sub    esp,0xc
c000b35a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b35e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b362:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b364:	56                   	push   esi
c000b365:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b369:	52                   	push   edx
c000b36a:	6a 00                	push   0x0
c000b36c:	6a 08                	push   0x8
c000b36e:	53                   	push   ebx
c000b36f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b372:	83 c4 20             	add    esp,0x20
c000b375:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b37a:	75 5e                	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b37c:	85 c0                	test   eax,eax
c000b37e:	75 5a                	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b380:	83 ec 0c             	sub    esp,0xc
c000b383:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b385:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b388:	55                   	push   ebp
c000b389:	e8 e2 51 ff ff       	call   c0000570 <strlen>
c000b38e:	89 34 24             	mov    DWORD PTR [esp],esi
c000b391:	31 d2                	xor    edx,edx
c000b393:	55                   	push   ebp
c000b394:	52                   	push   edx
c000b395:	50                   	push   eax
c000b396:	53                   	push   ebx
c000b397:	ff d7                	call   edi
c000b399:	83 c4 14             	add    esp,0x14
c000b39c:	89 c6                	mov    esi,eax
c000b39e:	55                   	push   ebp
c000b39f:	e8 cc 51 ff ff       	call   c0000570 <strlen>
c000b3a4:	83 c4 10             	add    esp,0x10
c000b3a7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3ab:	75 2d                	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ad:	85 f6                	test   esi,esi
c000b3af:	75 29                	jne    c000b3da <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3b1:	50                   	push   eax
c000b3b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3ba:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b3be:	e8 6f fb ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b3c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c6:	e8 9b 07 00 00       	call   c000bb66 <File::close()>
c000b3cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	31 c0                	xor    eax,eax
c000b3d8:	eb 19                	jmp    c000b3f3 <KeCreateSymlink(char const*, char const*)+0x134>
c000b3da:	83 ec 0c             	sub    esp,0xc
c000b3dd:	53                   	push   ebx
c000b3de:	e8 83 07 00 00       	call   c000bb66 <File::close()>
c000b3e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	b8 01 00 00 00       	mov    eax,0x1
c000b3f3:	83 c4 2c             	add    esp,0x2c
c000b3f6:	5b                   	pop    ebx
c000b3f7:	5e                   	pop    esi
c000b3f8:	5f                   	pop    edi
c000b3f9:	5d                   	pop    ebp
c000b3fa:	c3                   	ret    

c000b3fb <KeInitialiseSymlinks()>:
c000b3fb:	57                   	push   edi
c000b3fc:	56                   	push   esi
c000b3fd:	53                   	push   ebx
c000b3fe:	81 ec 14 01 00 00    	sub    esp,0x114
c000b404:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b40e:	68 00 20 00 00       	push   0x2000
c000b413:	6a 00                	push   0x0
c000b415:	68 00 74 02 c0       	push   0xc0027400
c000b41a:	e8 d1 50 ff ff       	call   c00004f0 <memset>
c000b41f:	5f                   	pop    edi
c000b420:	58                   	pop    eax
c000b421:	6a 00                	push   0x0
c000b423:	68 9f ae 00 c0       	push   0xc000ae9f
c000b428:	e8 7b 59 00 00       	call   c0010da8 <KeRegisterAtexit(void (*)(void*), void*)>
c000b42d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b434:	e8 7d c6 ff ff       	call   c0007ab6 <malloc>
c000b439:	83 c4 0c             	add    esp,0xc
c000b43c:	89 c3                	mov    ebx,eax
c000b43e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b444:	68 cf 16 02 c0       	push   0xc00216cf
c000b449:	50                   	push   eax
c000b44a:	e8 9b 06 00 00       	call   c000baea <File::File(char const*, Process*)>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	85 db                	test   ebx,ebx
c000b454:	75 10                	jne    c000b466 <KeInitialiseSymlinks()+0x6b>
c000b456:	83 ec 0c             	sub    esp,0xc
c000b459:	68 b4 17 02 c0       	push   0xc00217b4
c000b45e:	e8 58 61 00 00       	call   c00115bb <KePanic(char const*)>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	53                   	push   ebx
c000b46a:	e8 5d 09 00 00       	call   c000bdcc <File::exists()>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	84 c0                	test   al,al
c000b474:	75 3a                	jne    c000b4b0 <KeInitialiseSymlinks()+0xb5>
c000b476:	56                   	push   esi
c000b477:	56                   	push   esi
c000b478:	6a 12                	push   0x12
c000b47a:	53                   	push   ebx
c000b47b:	e8 88 06 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	85 c0                	test   eax,eax
c000b485:	74 10                	je     c000b497 <KeInitialiseSymlinks()+0x9c>
c000b487:	83 ec 0c             	sub    esp,0xc
c000b48a:	68 d1 17 02 c0       	push   0xc00217d1
c000b48f:	e8 27 61 00 00       	call   c00115bb <KePanic(char const*)>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	83 ec 0c             	sub    esp,0xc
c000b49a:	53                   	push   ebx
c000b49b:	e8 c6 06 00 00       	call   c000bb66 <File::close()>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	85 db                	test   ebx,ebx
c000b4a5:	0f 84 a5 00 00 00    	je     c000b550 <KeInitialiseSymlinks()+0x155>
c000b4ab:	e9 94 00 00 00       	jmp    c000b544 <KeInitialiseSymlinks()+0x149>
c000b4b0:	51                   	push   ecx
c000b4b1:	51                   	push   ecx
c000b4b2:	6a 01                	push   0x1
c000b4b4:	53                   	push   ebx
c000b4b5:	e8 4e 06 00 00       	call   c000bb08 <File::open(FileOpenMode)>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	85 c0                	test   eax,eax
c000b4bf:	74 10                	je     c000b4d1 <KeInitialiseSymlinks()+0xd6>
c000b4c1:	83 ec 0c             	sub    esp,0xc
c000b4c4:	68 ee 17 02 c0       	push   0xc00217ee
c000b4c9:	e8 ed 60 00 00       	call   c00115bb <KePanic(char const*)>
c000b4ce:	83 c4 10             	add    esp,0x10
c000b4d1:	83 ec 0c             	sub    esp,0xc
c000b4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4d6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b4da:	57                   	push   edi
c000b4db:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b4df:	56                   	push   esi
c000b4e0:	6a 00                	push   0x0
c000b4e2:	68 00 01 00 00       	push   0x100
c000b4e7:	53                   	push   ebx
c000b4e8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4eb:	83 c4 20             	add    esp,0x20
c000b4ee:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b4f6:	75 40                	jne    c000b538 <KeInitialiseSymlinks()+0x13d>
c000b4f8:	83 ec 0c             	sub    esp,0xc
c000b4fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fd:	57                   	push   edi
c000b4fe:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b502:	52                   	push   edx
c000b503:	6a 00                	push   0x0
c000b505:	6a 08                	push   0x8
c000b507:	53                   	push   ebx
c000b508:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b50b:	83 c4 20             	add    esp,0x20
c000b50e:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b513:	75 23                	jne    c000b538 <KeInitialiseSymlinks()+0x13d>
c000b515:	52                   	push   edx
c000b516:	52                   	push   edx
c000b517:	56                   	push   esi
c000b518:	68 09 18 02 c0       	push   0xc0021809
c000b51d:	e8 23 f4 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b522:	89 f0                	mov    eax,esi
c000b524:	e8 7b f9 ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b529:	ba 01 00 00 00       	mov    edx,0x1
c000b52e:	0f b7 c0             	movzx  eax,ax
c000b531:	e8 34 f8 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b536:	eb 96                	jmp    c000b4ce <KeInitialiseSymlinks()+0xd3>
c000b538:	83 ec 0c             	sub    esp,0xc
c000b53b:	53                   	push   ebx
c000b53c:	e8 25 06 00 00       	call   c000bb66 <File::close()>
c000b541:	83 c4 10             	add    esp,0x10
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b549:	53                   	push   ebx
c000b54a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b54d:	83 c4 10             	add    esp,0x10
c000b550:	50                   	push   eax
c000b551:	50                   	push   eax
c000b552:	68 41 18 02 c0       	push   0xc0021841
c000b557:	68 4f 18 02 c0       	push   0xc002184f
c000b55c:	e8 5e fd ff ff       	call   c000b2bf <KeCreateSymlink(char const*, char const*)>
c000b561:	81 c4 20 01 00 00    	add    esp,0x120
c000b567:	5b                   	pop    ebx
c000b568:	5e                   	pop    esi
c000b569:	5f                   	pop    edi
c000b56a:	c3                   	ret    
c000b56b:	90                   	nop

c000b56c <File::read(unsigned long long, void*, int*)>:
c000b56c:	53                   	push   ebx
c000b56d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b571:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b575:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b57c:	83 f8 19             	cmp    eax,0x19
c000b57f:	77 35                	ja     c000b5b6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b581:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b588:	85 c0                	test   eax,eax
c000b58a:	74 2a                	je     c000b5b6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b58c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b592:	85 c0                	test   eax,eax
c000b594:	74 20                	je     c000b5b6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b596:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b59a:	74 21                	je     c000b5bd <File::read(unsigned long long, void*, int*)+0x51>
c000b59c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b59e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5a2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b0:	5b                   	pop    ebx
c000b5b1:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5b4:	ff e0                	jmp    eax
c000b5b6:	b8 0b 00 00 00       	mov    eax,0xb
c000b5bb:	eb 05                	jmp    c000b5c2 <File::read(unsigned long long, void*, int*)+0x56>
c000b5bd:	b8 05 00 00 00       	mov    eax,0x5
c000b5c2:	5b                   	pop    ebx
c000b5c3:	c3                   	ret    

c000b5c4 <File::write(unsigned long long, void*, int*)>:
c000b5c4:	53                   	push   ebx
c000b5c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5cd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5d4:	83 f8 19             	cmp    eax,0x19
c000b5d7:	77 35                	ja     c000b60e <File::write(unsigned long long, void*, int*)+0x4a>
c000b5d9:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5e0:	85 c0                	test   eax,eax
c000b5e2:	74 2a                	je     c000b60e <File::write(unsigned long long, void*, int*)+0x4a>
c000b5e4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ea:	85 c0                	test   eax,eax
c000b5ec:	74 20                	je     c000b60e <File::write(unsigned long long, void*, int*)+0x4a>
c000b5ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5f2:	74 21                	je     c000b615 <File::write(unsigned long long, void*, int*)+0x51>
c000b5f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5f6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5fa:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b604:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b608:	5b                   	pop    ebx
c000b609:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b60c:	ff e0                	jmp    eax
c000b60e:	b8 0b 00 00 00       	mov    eax,0xb
c000b613:	eb 05                	jmp    c000b61a <File::write(unsigned long long, void*, int*)+0x56>
c000b615:	b8 05 00 00 00       	mov    eax,0x5
c000b61a:	5b                   	pop    ebx
c000b61b:	c3                   	ret    

c000b61c <Directory::read(unsigned long long, void*, int*)>:
c000b61c:	53                   	push   ebx
c000b61d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b621:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b625:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b62c:	83 f8 19             	cmp    eax,0x19
c000b62f:	77 35                	ja     c000b666 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b631:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b638:	85 c0                	test   eax,eax
c000b63a:	74 2a                	je     c000b666 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b63c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b642:	85 c0                	test   eax,eax
c000b644:	74 20                	je     c000b666 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b646:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b64a:	74 21                	je     c000b66d <Directory::read(unsigned long long, void*, int*)+0x51>
c000b64c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b64e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b652:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b658:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b660:	5b                   	pop    ebx
c000b661:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b664:	ff e0                	jmp    eax
c000b666:	b8 0b 00 00 00       	mov    eax,0xb
c000b66b:	eb 05                	jmp    c000b672 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b66d:	b8 05 00 00 00       	mov    eax,0x5
c000b672:	5b                   	pop    ebx
c000b673:	c3                   	ret    

c000b674 <Directory::write(unsigned long long, void*, int*)>:
c000b674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b678:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b67f:	b8 0b 00 00 00       	mov    eax,0xb
c000b684:	83 fa 19             	cmp    edx,0x19
c000b687:	77 18                	ja     c000b6a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b689:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b690:	85 d2                	test   edx,edx
c000b692:	74 0d                	je     c000b6a1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b694:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b69b:	19 c0                	sbb    eax,eax
c000b69d:	83 e0 0a             	and    eax,0xa
c000b6a0:	40                   	inc    eax
c000b6a1:	c3                   	ret    

c000b6a2 <File::isAtty()>:
c000b6a2:	31 c0                	xor    eax,eax
c000b6a4:	c3                   	ret    
c000b6a5:	90                   	nop

c000b6a6 <Directory::isAtty()>:
c000b6a6:	31 c0                	xor    eax,eax
c000b6a8:	c3                   	ret    
c000b6a9:	90                   	nop

c000b6aa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6aa:	b8 0a 00 00 00       	mov    eax,0xa
c000b6af:	c3                   	ret    

c000b6b0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6b0:	b8 0a 00 00 00       	mov    eax,0xa
c000b6b5:	c3                   	ret    

c000b6b6 <Filesystem::allocateSwapfile(char const*, int)>:
c000b6b6:	31 c0                	xor    eax,eax
c000b6b8:	31 d2                	xor    edx,edx
c000b6ba:	c3                   	ret    
c000b6bb:	90                   	nop

c000b6bc <File::~File()>:
c000b6bc:	83 ec 0c             	sub    esp,0xc
c000b6bf:	ba 08 19 02 c0       	mov    edx,0xc0021908
c000b6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6c8:	89 10                	mov    DWORD PTR [eax],edx
c000b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ce:	83 ec 0c             	sub    esp,0xc
c000b6d1:	50                   	push   eax
c000b6d2:	e8 cd dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	90                   	nop
c000b6db:	83 c4 0c             	add    esp,0xc
c000b6de:	c3                   	ret    
c000b6df:	90                   	nop

c000b6e0 <File::~File()>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	83 ec 0c             	sub    esp,0xc
c000b6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ea:	e8 cd ff ff ff       	call   c000b6bc <File::~File()>
c000b6ef:	83 c4 10             	add    esp,0x10
c000b6f2:	83 ec 08             	sub    esp,0x8
c000b6f5:	68 14 01 00 00       	push   0x114
c000b6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fe:	e8 15 f1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b703:	83 c4 10             	add    esp,0x10
c000b706:	83 c4 0c             	add    esp,0xc
c000b709:	c3                   	ret    

c000b70a <Directory::~Directory()>:
c000b70a:	83 ec 0c             	sub    esp,0xc
c000b70d:	ba 24 19 02 c0       	mov    edx,0xc0021924
c000b712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b716:	89 10                	mov    DWORD PTR [eax],edx
c000b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	50                   	push   eax
c000b720:	e8 7f dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	90                   	nop
c000b729:	83 c4 0c             	add    esp,0xc
c000b72c:	c3                   	ret    
c000b72d:	90                   	nop

c000b72e <Directory::~Directory()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	83 ec 0c             	sub    esp,0xc
c000b734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b738:	e8 cd ff ff ff       	call   c000b70a <Directory::~Directory()>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	83 ec 08             	sub    esp,0x8
c000b743:	68 14 01 00 00       	push   0x114
c000b748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b74c:	e8 c7 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <Filesystem::Filesystem()>:
c000b758:	ba 9c 18 02 c0       	mov    edx,0xc002189c
c000b75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b761:	89 10                	mov    DWORD PTR [eax],edx
c000b763:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b76d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b774:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b779:	90                   	nop
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <Filesystem::~Filesystem()>:
c000b77c:	ba 9c 18 02 c0       	mov    edx,0xc002189c
c000b781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b785:	89 10                	mov    DWORD PTR [eax],edx
c000b787:	90                   	nop
c000b788:	c3                   	ret    
c000b789:	90                   	nop

c000b78a <Filesystem::~Filesystem()>:
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b791:	e8 e6 ff ff ff       	call   c000b77c <Filesystem::~Filesystem()>
c000b796:	83 c4 04             	add    esp,0x4
c000b799:	83 ec 08             	sub    esp,0x8
c000b79c:	6a 08                	push   0x8
c000b79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a2:	e8 71 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	83 c4 0c             	add    esp,0xc
c000b7ad:	c3                   	ret    

c000b7ae <Fs::getcwd(Process*, char*, int)>:
c000b7ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7b2:	31 c0                	xor    eax,eax
c000b7b4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7b7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7bb:	7d 15                	jge    c000b7d2 <Fs::getcwd(Process*, char*, int)+0x24>
c000b7bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7c1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7c8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7cb:	84 c9                	test   cl,cl
c000b7cd:	74 06                	je     c000b7d5 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7cf:	40                   	inc    eax
c000b7d0:	eb e2                	jmp    c000b7b4 <Fs::getcwd(Process*, char*, int)+0x6>
c000b7d2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7d5:	31 c0                	xor    eax,eax
c000b7d7:	c3                   	ret    

c000b7d8 <Fs::initVFS()>:
c000b7d8:	83 ec 18             	sub    esp,0x18
c000b7db:	6a 08                	push   0x8
c000b7dd:	e8 d4 c2 ff ff       	call   c0007ab6 <malloc>
c000b7e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7e5:	e8 c2 e3 00 00       	call   c0019bac <FAT::FAT()>
c000b7ea:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b7f1:	e8 c0 c2 ff ff       	call   c0007ab6 <malloc>
c000b7f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7f9:	e8 da f2 00 00       	call   c001aad8 <ISO9660::ISO9660()>
c000b7fe:	83 c4 1c             	add    esp,0x1c
c000b801:	c3                   	ret    

c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b802:	55                   	push   ebp
c000b803:	57                   	push   edi
c000b804:	56                   	push   esi
c000b805:	53                   	push   ebx
c000b806:	81 ec 10 04 00 00    	sub    esp,0x410
c000b80c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b813:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b81a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b822:	68 00 04 00 00       	push   0x400
c000b827:	6a 00                	push   0x0
c000b829:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b82d:	57                   	push   edi
c000b82e:	e8 bd 4c ff ff       	call   c00004f0 <memset>
c000b833:	83 c4 10             	add    esp,0x10
c000b836:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b83a:	75 0b                	jne    c000b847 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b83c:	50                   	push   eax
c000b83d:	50                   	push   eax
c000b83e:	55                   	push   ebp
c000b83f:	57                   	push   edi
c000b840:	e8 fb 4d ff ff       	call   c0000640 <strcpy>
c000b845:	eb 51                	jmp    c000b898 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b847:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b84b:	83 f8 5c             	cmp    eax,0x5c
c000b84e:	74 05                	je     c000b855 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b850:	83 f8 2f             	cmp    eax,0x2f
c000b853:	75 1e                	jne    c000b873 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b855:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b85c:	8a 00                	mov    al,BYTE PTR [eax]
c000b85e:	3c 60                	cmp    al,0x60
c000b860:	7e 03                	jle    c000b865 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b862:	83 e8 20             	sub    eax,0x20
c000b865:	88 04 24             	mov    BYTE PTR [esp],al
c000b868:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b86f:	50                   	push   eax
c000b870:	50                   	push   eax
c000b871:	eb 1e                	jmp    c000b891 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b873:	50                   	push   eax
c000b874:	50                   	push   eax
c000b875:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b87c:	57                   	push   edi
c000b87d:	e8 be 4d ff ff       	call   c0000640 <strcpy>
c000b882:	58                   	pop    eax
c000b883:	5a                   	pop    edx
c000b884:	68 43 28 02 c0       	push   0xc0022843
c000b889:	57                   	push   edi
c000b88a:	e8 b1 4f ff ff       	call   c0000840 <strcat>
c000b88f:	59                   	pop    ecx
c000b890:	58                   	pop    eax
c000b891:	55                   	push   ebp
c000b892:	57                   	push   edi
c000b893:	e8 a8 4f ff ff       	call   c0000840 <strcat>
c000b898:	83 c4 10             	add    esp,0x10
c000b89b:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b89e:	3c 60                	cmp    al,0x60
c000b8a0:	7e 03                	jle    c000b8a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8a2:	83 e8 20             	sub    eax,0x20
c000b8a5:	88 04 24             	mov    BYTE PTR [esp],al
c000b8a8:	88 06                	mov    BYTE PTR [esi],al
c000b8aa:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8b1:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b8b7:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b8bb:	bf 03 00 00 00       	mov    edi,0x3
c000b8c0:	b8 03 00 00 00       	mov    eax,0x3
c000b8c5:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b8c9:	89 e9                	mov    ecx,ebp
c000b8cb:	85 ed                	test   ebp,ebp
c000b8cd:	0f 84 97 00 00 00    	je     c000b96a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b8d3:	8d 57 01             	lea    edx,[edi+0x1]
c000b8d6:	83 fd 5c             	cmp    ebp,0x5c
c000b8d9:	74 05                	je     c000b8e0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b8db:	83 fd 2f             	cmp    ebp,0x2f
c000b8de:	75 12                	jne    c000b8f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8e0:	89 c5                	mov    ebp,eax
c000b8e2:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b8e7:	74 09                	je     c000b8f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8e9:	40                   	inc    eax
c000b8ea:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b8ee:	89 d7                	mov    edi,edx
c000b8f0:	eb d3                	jmp    c000b8c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b8f2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b8f7:	0f be e9             	movsx  ebp,cl
c000b8fa:	75 5e                	jne    c000b95a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b8fc:	83 fd 2e             	cmp    ebp,0x2e
c000b8ff:	75 59                	jne    c000b95a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b901:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b905:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b90a:	74 18                	je     c000b924 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b90c:	83 fd 2e             	cmp    ebp,0x2e
c000b90f:	74 53                	je     c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b911:	89 fa                	mov    edx,edi
c000b913:	42                   	inc    edx
c000b914:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b918:	83 f9 2f             	cmp    ecx,0x2f
c000b91b:	74 f6                	je     c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b91d:	83 f9 5c             	cmp    ecx,0x5c
c000b920:	74 f1                	je     c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b922:	eb ca                	jmp    c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b924:	83 fd 2e             	cmp    ebp,0x2e
c000b927:	74 3b                	je     c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b929:	83 f8 03             	cmp    eax,0x3
c000b92c:	74 c0                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b92e:	42                   	inc    edx
c000b92f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b933:	83 f9 5c             	cmp    ecx,0x5c
c000b936:	74 f6                	je     c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b938:	83 f9 2f             	cmp    ecx,0x2f
c000b93b:	74 f1                	je     c000b92e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b93d:	48                   	dec    eax
c000b93e:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b942:	75 06                	jne    c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b944:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b948:	eb f3                	jmp    c000b93d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b94a:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b94e:	74 07                	je     c000b957 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b950:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b954:	48                   	dec    eax
c000b955:	eb f3                	jmp    c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b957:	40                   	inc    eax
c000b958:	eb 94                	jmp    c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b95a:	83 fd 5c             	cmp    ebp,0x5c
c000b95d:	74 8f                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b95f:	83 fd 2f             	cmp    ebp,0x2f
c000b962:	74 8a                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b964:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b967:	40                   	inc    eax
c000b968:	eb 84                	jmp    c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b96a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b96e:	83 ec 0c             	sub    esp,0xc
c000b971:	56                   	push   esi
c000b972:	e8 f9 4b ff ff       	call   c0000570 <strlen>
c000b977:	83 c4 10             	add    esp,0x10
c000b97a:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b97f:	74 17                	je     c000b998 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b981:	83 ec 0c             	sub    esp,0xc
c000b984:	56                   	push   esi
c000b985:	e8 e6 4b ff ff       	call   c0000570 <strlen>
c000b98a:	83 c4 10             	add    esp,0x10
c000b98d:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b992:	74 04                	je     c000b998 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b994:	31 ff                	xor    edi,edi
c000b996:	eb 4c                	jmp    c000b9e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b998:	83 ec 0c             	sub    esp,0xc
c000b99b:	56                   	push   esi
c000b99c:	e8 cf 4b ff ff       	call   c0000570 <strlen>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9a9:	74 e9                	je     c000b994 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b9ab:	83 ec 0c             	sub    esp,0xc
c000b9ae:	56                   	push   esi
c000b9af:	e8 bc 4b ff ff       	call   c0000570 <strlen>
c000b9b4:	83 c4 10             	add    esp,0x10
c000b9b7:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b9bc:	eb b0                	jmp    c000b96e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b9be:	50                   	push   eax
c000b9bf:	50                   	push   eax
c000b9c0:	56                   	push   esi
c000b9c1:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b9c5:	55                   	push   ebp
c000b9c6:	e8 75 4c ff ff       	call   c0000640 <strcpy>
c000b9cb:	5a                   	pop    edx
c000b9cc:	59                   	pop    ecx
c000b9cd:	56                   	push   esi
c000b9ce:	55                   	push   ebp
c000b9cf:	e8 57 f7 ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c000b9d4:	83 c4 10             	add    esp,0x10
c000b9d7:	48                   	dec    eax
c000b9d8:	75 27                	jne    c000ba01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b9da:	8d 47 01             	lea    eax,[edi+0x1]
c000b9dd:	83 ff 14             	cmp    edi,0x14
c000b9e0:	74 08                	je     c000b9ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b9e2:	89 c7                	mov    edi,eax
c000b9e4:	85 db                	test   ebx,ebx
c000b9e6:	75 d6                	jne    c000b9be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b9e8:	eb 17                	jmp    c000ba01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b9ea:	83 ec 0c             	sub    esp,0xc
c000b9ed:	bf 15 00 00 00       	mov    edi,0x15
c000b9f2:	68 6d 18 02 c0       	push   0xc002186d
c000b9f7:	e8 bf 5b 00 00       	call   c00115bb <KePanic(char const*)>
c000b9fc:	83 c4 10             	add    esp,0x10
c000b9ff:	eb e3                	jmp    c000b9e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba01:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba07:	5b                   	pop    ebx
c000ba08:	5e                   	pop    esi
c000ba09:	5f                   	pop    edi
c000ba0a:	5d                   	pop    ebp
c000ba0b:	c3                   	ret    

c000ba0c <File::File(char const*, Process*, bool)>:
c000ba0c:	83 ec 1c             	sub    esp,0x1c
c000ba0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1b:	83 ec 08             	sub    esp,0x8
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 98 d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	ba 08 19 02 c0       	mov    edx,0xc0021908
c000ba2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba32:	89 10                	mov    DWORD PTR [eax],edx
c000ba34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba39:	85 c0                	test   eax,eax
c000ba3b:	74 0f                	je     c000ba4c <File::File(char const*, Process*, bool)+0x40>
c000ba3d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba42:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba46:	74 04                	je     c000ba4c <File::File(char const*, Process*, bool)+0x40>
c000ba48:	b0 01                	mov    al,0x1
c000ba4a:	eb 02                	jmp    c000ba4e <File::File(char const*, Process*, bool)+0x42>
c000ba4c:	b0 00                	mov    al,0x0
c000ba4e:	0f b6 c0             	movzx  eax,al
c000ba51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba55:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba5f:	83 c2 0d             	add    edx,0xd
c000ba62:	50                   	push   eax
c000ba63:	51                   	push   ecx
c000ba64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba68:	52                   	push   edx
c000ba69:	e8 94 fd ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba6e:	83 c4 10             	add    esp,0x10
c000ba71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba75:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ba78:	83 e8 41             	sub    eax,0x41
c000ba7b:	88 c2                	mov    dl,al
c000ba7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba81:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ba87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ba8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba93:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba99:	0f b6 c0             	movzx  eax,al
c000ba9c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baa3:	85 c0                	test   eax,eax
c000baa5:	74 3e                	je     c000bae5 <File::File(char const*, Process*, bool)+0xd9>
c000baa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baab:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bab1:	0f b6 c0             	movzx  eax,al
c000bab4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000babb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bac1:	85 c0                	test   eax,eax
c000bac3:	75 20                	jne    c000bae5 <File::File(char const*, Process*, bool)+0xd9>
c000bac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bacf:	0f b6 c0             	movzx  eax,al
c000bad2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bad9:	83 ec 0c             	sub    esp,0xc
c000badc:	50                   	push   eax
c000badd:	e8 a0 21 00 00       	call   c000dc82 <LogicalDisk::mount()>
c000bae2:	83 c4 10             	add    esp,0x10
c000bae5:	90                   	nop
c000bae6:	83 c4 1c             	add    esp,0x1c
c000bae9:	c3                   	ret    

c000baea <File::File(char const*, Process*)>:
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	6a 01                	push   0x1
c000baef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafb:	e8 0c ff ff ff       	call   c000ba0c <File::File(char const*, Process*, bool)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	90                   	nop
c000bb04:	83 c4 0c             	add    esp,0xc
c000bb07:	c3                   	ret    

c000bb08 <File::open(FileOpenMode)>:
c000bb08:	53                   	push   ebx
c000bb09:	b8 0b 00 00 00       	mov    eax,0xb
c000bb0e:	83 ec 08             	sub    esp,0x8
c000bb11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb15:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb1c:	83 fa 19             	cmp    edx,0x19
c000bb1f:	77 40                	ja     c000bb61 <File::open(FileOpenMode)+0x59>
c000bb21:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb28:	85 d2                	test   edx,edx
c000bb2a:	74 35                	je     c000bb61 <File::open(FileOpenMode)+0x59>
c000bb2c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb32:	85 d2                	test   edx,edx
c000bb34:	74 2b                	je     c000bb61 <File::open(FileOpenMode)+0x59>
c000bb36:	b8 06 00 00 00       	mov    eax,0x6
c000bb3b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb3f:	75 20                	jne    c000bb61 <File::open(FileOpenMode)+0x59>
c000bb41:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb43:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4d:	51                   	push   ecx
c000bb4e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb51:	51                   	push   ecx
c000bb52:	52                   	push   edx
c000bb53:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	85 c0                	test   eax,eax
c000bb5b:	75 04                	jne    c000bb61 <File::open(FileOpenMode)+0x59>
c000bb5d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb61:	83 c4 08             	add    esp,0x8
c000bb64:	5b                   	pop    ebx
c000bb65:	c3                   	ret    

c000bb66 <File::close()>:
c000bb66:	53                   	push   ebx
c000bb67:	b8 0b 00 00 00       	mov    eax,0xb
c000bb6c:	83 ec 08             	sub    esp,0x8
c000bb6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb73:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb7a:	83 f9 19             	cmp    ecx,0x19
c000bb7d:	77 41                	ja     c000bbc0 <File::close()+0x5a>
c000bb7f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bb86:	85 db                	test   ebx,ebx
c000bb88:	74 36                	je     c000bbc0 <File::close()+0x5a>
c000bb8a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bb91:	74 2d                	je     c000bbc0 <File::close()+0x5a>
c000bb93:	b8 05 00 00 00       	mov    eax,0x5
c000bb98:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb9c:	74 22                	je     c000bbc0 <File::close()+0x5a>
c000bb9e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bba2:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bba9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbaf:	53                   	push   ebx
c000bbb0:	53                   	push   ebx
c000bbb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbb9:	50                   	push   eax
c000bbba:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbbd:	83 c4 10             	add    esp,0x10
c000bbc0:	83 c4 08             	add    esp,0x8
c000bbc3:	5b                   	pop    ebx
c000bbc4:	c3                   	ret    
c000bbc5:	90                   	nop

c000bbc6 <File::seek(unsigned long long)>:
c000bbc6:	56                   	push   esi
c000bbc7:	53                   	push   ebx
c000bbc8:	b8 0b 00 00 00       	mov    eax,0xb
c000bbcd:	51                   	push   ecx
c000bbce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbd2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bbd6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bbdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbe1:	83 fa 19             	cmp    edx,0x19
c000bbe4:	77 31                	ja     c000bc17 <File::seek(unsigned long long)+0x51>
c000bbe6:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbed:	85 d2                	test   edx,edx
c000bbef:	74 26                	je     c000bc17 <File::seek(unsigned long long)+0x51>
c000bbf1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbf7:	85 d2                	test   edx,edx
c000bbf9:	74 1c                	je     c000bc17 <File::seek(unsigned long long)+0x51>
c000bbfb:	b8 05 00 00 00       	mov    eax,0x5
c000bc00:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc04:	74 11                	je     c000bc17 <File::seek(unsigned long long)+0x51>
c000bc06:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc08:	53                   	push   ebx
c000bc09:	51                   	push   ecx
c000bc0a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc10:	52                   	push   edx
c000bc11:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc14:	83 c4 10             	add    esp,0x10
c000bc17:	5a                   	pop    edx
c000bc18:	5b                   	pop    ebx
c000bc19:	5e                   	pop    esi
c000bc1a:	c3                   	ret    
c000bc1b:	90                   	nop

c000bc1c <File::truncate(unsigned long long)>:
c000bc1c:	56                   	push   esi
c000bc1d:	53                   	push   ebx
c000bc1e:	b8 0b 00 00 00       	mov    eax,0xb
c000bc23:	51                   	push   ecx
c000bc24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc2c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc37:	83 fa 19             	cmp    edx,0x19
c000bc3a:	77 31                	ja     c000bc6d <File::truncate(unsigned long long)+0x51>
c000bc3c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc43:	85 d2                	test   edx,edx
c000bc45:	74 26                	je     c000bc6d <File::truncate(unsigned long long)+0x51>
c000bc47:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc4d:	85 d2                	test   edx,edx
c000bc4f:	74 1c                	je     c000bc6d <File::truncate(unsigned long long)+0x51>
c000bc51:	b8 05 00 00 00       	mov    eax,0x5
c000bc56:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc5a:	74 11                	je     c000bc6d <File::truncate(unsigned long long)+0x51>
c000bc5c:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc5e:	53                   	push   ebx
c000bc5f:	51                   	push   ecx
c000bc60:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc66:	52                   	push   edx
c000bc67:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc6a:	83 c4 10             	add    esp,0x10
c000bc6d:	5a                   	pop    edx
c000bc6e:	5b                   	pop    ebx
c000bc6f:	5e                   	pop    esi
c000bc70:	c3                   	ret    
c000bc71:	90                   	nop

c000bc72 <File::tell(unsigned long long*)>:
c000bc72:	83 ec 0c             	sub    esp,0xc
c000bc75:	b8 0b 00 00 00       	mov    eax,0xb
c000bc7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc7e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bc85:	83 fa 19             	cmp    edx,0x19
c000bc88:	77 34                	ja     c000bcbe <File::tell(unsigned long long*)+0x4c>
c000bc8a:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc91:	85 d2                	test   edx,edx
c000bc93:	74 29                	je     c000bcbe <File::tell(unsigned long long*)+0x4c>
c000bc95:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc9b:	85 d2                	test   edx,edx
c000bc9d:	74 1f                	je     c000bcbe <File::tell(unsigned long long*)+0x4c>
c000bc9f:	b8 05 00 00 00       	mov    eax,0x5
c000bca4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bca8:	74 14                	je     c000bcbe <File::tell(unsigned long long*)+0x4c>
c000bcaa:	50                   	push   eax
c000bcab:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcb1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bcb7:	52                   	push   edx
c000bcb8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bcbb:	83 c4 10             	add    esp,0x10
c000bcbe:	83 c4 0c             	add    esp,0xc
c000bcc1:	c3                   	ret    

c000bcc2 <File::rewind()>:
c000bcc2:	83 ec 10             	sub    esp,0x10
c000bcc5:	6a 00                	push   0x0
c000bcc7:	6a 00                	push   0x0
c000bcc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccd:	e8 f4 fe ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c000bcd2:	83 c4 1c             	add    esp,0x1c
c000bcd5:	c3                   	ret    

c000bcd6 <File::unlink()>:
c000bcd6:	83 ec 0c             	sub    esp,0xc
c000bcd9:	b8 0b 00 00 00       	mov    eax,0xb
c000bcde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bce2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bce9:	83 f9 19             	cmp    ecx,0x19
c000bcec:	77 2f                	ja     c000bd1d <File::unlink()+0x47>
c000bcee:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bcf5:	85 c9                	test   ecx,ecx
c000bcf7:	74 24                	je     c000bd1d <File::unlink()+0x47>
c000bcf9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bcff:	85 c9                	test   ecx,ecx
c000bd01:	74 1a                	je     c000bd1d <File::unlink()+0x47>
c000bd03:	b8 06 00 00 00       	mov    eax,0x6
c000bd08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd0c:	75 0f                	jne    c000bd1d <File::unlink()+0x47>
c000bd0e:	83 c2 0d             	add    edx,0xd
c000bd11:	50                   	push   eax
c000bd12:	50                   	push   eax
c000bd13:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd15:	52                   	push   edx
c000bd16:	51                   	push   ecx
c000bd17:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd1a:	83 c4 10             	add    esp,0x10
c000bd1d:	83 c4 0c             	add    esp,0xc
c000bd20:	c3                   	ret    
c000bd21:	90                   	nop

c000bd22 <File::rename(char const*)>:
c000bd22:	83 ec 0c             	sub    esp,0xc
c000bd25:	b8 0b 00 00 00       	mov    eax,0xb
c000bd2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd35:	83 f9 19             	cmp    ecx,0x19
c000bd38:	77 32                	ja     c000bd6c <File::rename(char const*)+0x4a>
c000bd3a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd41:	85 c9                	test   ecx,ecx
c000bd43:	74 27                	je     c000bd6c <File::rename(char const*)+0x4a>
c000bd45:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd4b:	85 c9                	test   ecx,ecx
c000bd4d:	74 1d                	je     c000bd6c <File::rename(char const*)+0x4a>
c000bd4f:	b8 06 00 00 00       	mov    eax,0x6
c000bd54:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd58:	75 12                	jne    c000bd6c <File::rename(char const*)+0x4a>
c000bd5a:	83 c2 0d             	add    edx,0xd
c000bd5d:	50                   	push   eax
c000bd5e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd64:	52                   	push   edx
c000bd65:	51                   	push   ecx
c000bd66:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd69:	83 c4 10             	add    esp,0x10
c000bd6c:	83 c4 0c             	add    esp,0xc
c000bd6f:	c3                   	ret    

c000bd70 <File::chfatattr(unsigned char, unsigned char)>:
c000bd70:	57                   	push   edi
c000bd71:	b8 0b 00 00 00       	mov    eax,0xb
c000bd76:	56                   	push   esi
c000bd77:	53                   	push   ebx
c000bd78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd87:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd8b:	83 f9 19             	cmp    ecx,0x19
c000bd8e:	77 37                	ja     c000bdc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd90:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd97:	85 c9                	test   ecx,ecx
c000bd99:	74 2c                	je     c000bdc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd9b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bda1:	85 c9                	test   ecx,ecx
c000bda3:	74 22                	je     c000bdc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bda5:	b8 06 00 00 00       	mov    eax,0x6
c000bdaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdae:	75 17                	jne    c000bdc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdb0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdb2:	89 f0                	mov    eax,esi
c000bdb4:	83 c2 0d             	add    edx,0xd
c000bdb7:	0f b6 f0             	movzx  esi,al
c000bdba:	0f b6 db             	movzx  ebx,bl
c000bdbd:	56                   	push   esi
c000bdbe:	53                   	push   ebx
c000bdbf:	52                   	push   edx
c000bdc0:	51                   	push   ecx
c000bdc1:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bdc4:	83 c4 10             	add    esp,0x10
c000bdc7:	5b                   	pop    ebx
c000bdc8:	5e                   	pop    esi
c000bdc9:	5f                   	pop    edi
c000bdca:	c3                   	ret    
c000bdcb:	90                   	nop

c000bdcc <File::exists()>:
c000bdcc:	83 ec 0c             	sub    esp,0xc
c000bdcf:	31 c0                	xor    eax,eax
c000bdd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bddc:	83 f9 19             	cmp    ecx,0x19
c000bddf:	77 24                	ja     c000be05 <File::exists()+0x39>
c000bde1:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bde8:	85 c9                	test   ecx,ecx
c000bdea:	74 19                	je     c000be05 <File::exists()+0x39>
c000bdec:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf2:	85 c9                	test   ecx,ecx
c000bdf4:	74 0f                	je     c000be05 <File::exists()+0x39>
c000bdf6:	83 c2 0d             	add    edx,0xd
c000bdf9:	50                   	push   eax
c000bdfa:	50                   	push   eax
c000bdfb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdfd:	52                   	push   edx
c000bdfe:	51                   	push   ecx
c000bdff:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	83 c4 0c             	add    esp,0xc
c000be08:	c3                   	ret    
c000be09:	90                   	nop

c000be0a <File::stat(unsigned long long*, bool*)>:
c000be0a:	56                   	push   esi
c000be0b:	53                   	push   ebx
c000be0c:	50                   	push   eax
c000be0d:	b8 0b 00 00 00       	mov    eax,0xb
c000be12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be16:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be25:	83 f9 19             	cmp    ecx,0x19
c000be28:	77 3d                	ja     c000be67 <File::stat(unsigned long long*, bool*)+0x5d>
c000be2a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be31:	85 c9                	test   ecx,ecx
c000be33:	74 32                	je     c000be67 <File::stat(unsigned long long*, bool*)+0x5d>
c000be35:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be3b:	85 c9                	test   ecx,ecx
c000be3d:	74 28                	je     c000be67 <File::stat(unsigned long long*, bool*)+0x5d>
c000be3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be41:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be45:	74 13                	je     c000be5a <File::stat(unsigned long long*, bool*)+0x50>
c000be47:	83 ec 04             	sub    esp,0x4
c000be4a:	56                   	push   esi
c000be4b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be51:	51                   	push   ecx
c000be52:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be58:	eb 0a                	jmp    c000be64 <File::stat(unsigned long long*, bool*)+0x5a>
c000be5a:	53                   	push   ebx
c000be5b:	83 c2 0d             	add    edx,0xd
c000be5e:	56                   	push   esi
c000be5f:	52                   	push   edx
c000be60:	51                   	push   ecx
c000be61:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be64:	83 c4 10             	add    esp,0x10
c000be67:	5a                   	pop    edx
c000be68:	5b                   	pop    ebx
c000be69:	5e                   	pop    esi
c000be6a:	c3                   	ret    

c000be6b <Fs::setcwd(Process*, char*)>:
c000be6b:	55                   	push   ebp
c000be6c:	57                   	push   edi
c000be6d:	56                   	push   esi
c000be6e:	53                   	push   ebx
c000be6f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000be75:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000be7c:	6a 00                	push   0x0
c000be7e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000be84:	57                   	push   edi
c000be85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000be8c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000be90:	56                   	push   esi
c000be91:	e8 6c f9 ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be96:	89 34 24             	mov    DWORD PTR [esp],esi
c000be99:	e8 d2 46 ff ff       	call   c0000570 <strlen>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	83 f8 02             	cmp    eax,0x2
c000bea4:	77 15                	ja     c000bebb <Fs::setcwd(Process*, char*)+0x50>
c000bea6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000beab:	83 eb 41             	sub    ebx,0x41
c000beae:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000beb5:	85 c0                	test   eax,eax
c000beb7:	75 1c                	jne    c000bed5 <Fs::setcwd(Process*, char*)+0x6a>
c000beb9:	eb 2f                	jmp    c000beea <Fs::setcwd(Process*, char*)+0x7f>
c000bebb:	83 ec 0c             	sub    esp,0xc
c000bebe:	56                   	push   esi
c000bebf:	e8 ac 46 ff ff       	call   c0000570 <strlen>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	83 f8 03             	cmp    eax,0x3
c000beca:	75 57                	jne    c000bf23 <Fs::setcwd(Process*, char*)+0xb8>
c000becc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bed1:	75 50                	jne    c000bf23 <Fs::setcwd(Process*, char*)+0xb8>
c000bed3:	eb d1                	jmp    c000bea6 <Fs::setcwd(Process*, char*)+0x3b>
c000bed5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bedc:	75 0c                	jne    c000beea <Fs::setcwd(Process*, char*)+0x7f>
c000bede:	83 ec 0c             	sub    esp,0xc
c000bee1:	50                   	push   eax
c000bee2:	e8 9b 1d 00 00       	call   c000dc82 <LogicalDisk::mount()>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	b8 03 00 00 00       	mov    eax,0x3
c000beef:	83 fb 19             	cmp    ebx,0x19
c000bef2:	0f 87 c6 00 00 00    	ja     c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bef8:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000beff:	b8 05 00 00 00       	mov    eax,0x5
c000bf04:	85 d2                	test   edx,edx
c000bf06:	0f 84 b2 00 00 00    	je     c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bf0c:	b8 06 00 00 00       	mov    eax,0x6
c000bf11:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf18:	0f 85 92 00 00 00    	jne    c000bfb0 <Fs::setcwd(Process*, char*)+0x145>
c000bf1e:	e9 9b 00 00 00       	jmp    c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bf23:	83 ec 0c             	sub    esp,0xc
c000bf26:	68 14 01 00 00       	push   0x114
c000bf2b:	e8 86 bb ff ff       	call   c0007ab6 <malloc>
c000bf30:	83 c4 0c             	add    esp,0xc
c000bf33:	89 c3                	mov    ebx,eax
c000bf35:	55                   	push   ebp
c000bf36:	56                   	push   esi
c000bf37:	50                   	push   eax
c000bf38:	e8 ad fb ff ff       	call   c000baea <File::File(char const*, Process*)>
c000bf3d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf42:	83 c4 0c             	add    esp,0xc
c000bf45:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf49:	50                   	push   eax
c000bf4a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf4e:	50                   	push   eax
c000bf4f:	53                   	push   ebx
c000bf50:	e8 b5 fe ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	83 f8 02             	cmp    eax,0x2
c000bf5b:	74 27                	je     c000bf84 <Fs::setcwd(Process*, char*)+0x119>
c000bf5d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf62:	75 1c                	jne    c000bf80 <Fs::setcwd(Process*, char*)+0x115>
c000bf64:	b8 02 00 00 00       	mov    eax,0x2
c000bf69:	85 db                	test   ebx,ebx
c000bf6b:	74 51                	je     c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bf6d:	83 ec 0c             	sub    esp,0xc
c000bf70:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf72:	53                   	push   ebx
c000bf73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf76:	83 c4 10             	add    esp,0x10
c000bf79:	b8 02 00 00 00       	mov    eax,0x2
c000bf7e:	eb 3e                	jmp    c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bf80:	85 c0                	test   eax,eax
c000bf82:	74 1c                	je     c000bfa0 <Fs::setcwd(Process*, char*)+0x135>
c000bf84:	b8 01 00 00 00       	mov    eax,0x1
c000bf89:	85 db                	test   ebx,ebx
c000bf8b:	74 31                	je     c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf92:	53                   	push   ebx
c000bf93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf96:	83 c4 10             	add    esp,0x10
c000bf99:	b8 01 00 00 00       	mov    eax,0x1
c000bf9e:	eb 1e                	jmp    c000bfbe <Fs::setcwd(Process*, char*)+0x153>
c000bfa0:	85 db                	test   ebx,ebx
c000bfa2:	74 0c                	je     c000bfb0 <Fs::setcwd(Process*, char*)+0x145>
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfa9:	53                   	push   ebx
c000bfaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfad:	83 c4 10             	add    esp,0x10
c000bfb0:	50                   	push   eax
c000bfb1:	50                   	push   eax
c000bfb2:	56                   	push   esi
c000bfb3:	57                   	push   edi
c000bfb4:	e8 87 46 ff ff       	call   c0000640 <strcpy>
c000bfb9:	83 c4 10             	add    esp,0x10
c000bfbc:	31 c0                	xor    eax,eax
c000bfbe:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bfc4:	5b                   	pop    ebx
c000bfc5:	5e                   	pop    esi
c000bfc6:	5f                   	pop    edi
c000bfc7:	5d                   	pop    ebp
c000bfc8:	c3                   	ret    
c000bfc9:	90                   	nop

c000bfca <Directory::Directory(char const*, Process*)>:
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd1:	83 ec 08             	sub    esp,0x8
c000bfd4:	6a 00                	push   0x0
c000bfd6:	50                   	push   eax
c000bfd7:	e8 e2 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	ba 24 19 02 c0       	mov    edx,0xc0021924
c000bfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe8:	89 10                	mov    DWORD PTR [eax],edx
c000bfea:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bfef:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bff3:	0f 95 c0             	setne  al
c000bff6:	0f b6 c0             	movzx  eax,al
c000bff9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bffd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c003:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c007:	83 c2 0d             	add    edx,0xd
c000c00a:	50                   	push   eax
c000c00b:	51                   	push   ecx
c000c00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c010:	52                   	push   edx
c000c011:	e8 ec f7 ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c016:	83 c4 10             	add    esp,0x10
c000c019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c01d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c020:	83 e8 41             	sub    eax,0x41
c000c023:	88 c2                	mov    dl,al
c000c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c029:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c033:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c041:	0f b6 c0             	movzx  eax,al
c000c044:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c04b:	85 c0                	test   eax,eax
c000c04d:	74 3e                	je     c000c08d <Directory::Directory(char const*, Process*)+0xc3>
c000c04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c053:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c059:	0f b6 c0             	movzx  eax,al
c000c05c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c063:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c069:	85 c0                	test   eax,eax
c000c06b:	75 20                	jne    c000c08d <Directory::Directory(char const*, Process*)+0xc3>
c000c06d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c071:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c077:	0f b6 c0             	movzx  eax,al
c000c07a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c081:	83 ec 0c             	sub    esp,0xc
c000c084:	50                   	push   eax
c000c085:	e8 f8 1b 00 00       	call   c000dc82 <LogicalDisk::mount()>
c000c08a:	83 c4 10             	add    esp,0x10
c000c08d:	90                   	nop
c000c08e:	83 c4 0c             	add    esp,0xc
c000c091:	c3                   	ret    

c000c092 <Directory::open()>:
c000c092:	53                   	push   ebx
c000c093:	b8 0b 00 00 00       	mov    eax,0xb
c000c098:	83 ec 08             	sub    esp,0x8
c000c09b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c09f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0a6:	83 fa 19             	cmp    edx,0x19
c000c0a9:	77 3d                	ja     c000c0e8 <Directory::open()+0x56>
c000c0ab:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0b2:	85 d2                	test   edx,edx
c000c0b4:	74 32                	je     c000c0e8 <Directory::open()+0x56>
c000c0b6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0bc:	85 d2                	test   edx,edx
c000c0be:	74 28                	je     c000c0e8 <Directory::open()+0x56>
c000c0c0:	b8 06 00 00 00       	mov    eax,0x6
c000c0c5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0c9:	75 1d                	jne    c000c0e8 <Directory::open()+0x56>
c000c0cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0d1:	50                   	push   eax
c000c0d2:	8b 02                	mov    eax,DWORD PTR [edx]
c000c0d4:	51                   	push   ecx
c000c0d5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c0d8:	51                   	push   ecx
c000c0d9:	52                   	push   edx
c000c0da:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c0dd:	83 c4 10             	add    esp,0x10
c000c0e0:	85 c0                	test   eax,eax
c000c0e2:	75 04                	jne    c000c0e8 <Directory::open()+0x56>
c000c0e4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c0e8:	83 c4 08             	add    esp,0x8
c000c0eb:	5b                   	pop    ebx
c000c0ec:	c3                   	ret    
c000c0ed:	90                   	nop

c000c0ee <Directory::close()>:
c000c0ee:	53                   	push   ebx
c000c0ef:	b8 0b 00 00 00       	mov    eax,0xb
c000c0f4:	83 ec 08             	sub    esp,0x8
c000c0f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c102:	83 f9 19             	cmp    ecx,0x19
c000c105:	77 41                	ja     c000c148 <Directory::close()+0x5a>
c000c107:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c10e:	85 db                	test   ebx,ebx
c000c110:	74 36                	je     c000c148 <Directory::close()+0x5a>
c000c112:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c119:	74 2d                	je     c000c148 <Directory::close()+0x5a>
c000c11b:	b8 05 00 00 00       	mov    eax,0x5
c000c120:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c124:	74 22                	je     c000c148 <Directory::close()+0x5a>
c000c126:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c12a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c131:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c137:	53                   	push   ebx
c000c138:	53                   	push   ebx
c000c139:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c13b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c141:	50                   	push   eax
c000c142:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c145:	83 c4 10             	add    esp,0x10
c000c148:	83 c4 08             	add    esp,0x8
c000c14b:	5b                   	pop    ebx
c000c14c:	c3                   	ret    
c000c14d:	90                   	nop

c000c14e <Directory::unlink()>:
c000c14e:	83 ec 0c             	sub    esp,0xc
c000c151:	b8 0b 00 00 00       	mov    eax,0xb
c000c156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c15a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c161:	83 f9 19             	cmp    ecx,0x19
c000c164:	77 2f                	ja     c000c195 <Directory::unlink()+0x47>
c000c166:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c16d:	85 c9                	test   ecx,ecx
c000c16f:	74 24                	je     c000c195 <Directory::unlink()+0x47>
c000c171:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c177:	85 c9                	test   ecx,ecx
c000c179:	74 1a                	je     c000c195 <Directory::unlink()+0x47>
c000c17b:	b8 06 00 00 00       	mov    eax,0x6
c000c180:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c184:	75 0f                	jne    c000c195 <Directory::unlink()+0x47>
c000c186:	83 c2 0d             	add    edx,0xd
c000c189:	50                   	push   eax
c000c18a:	50                   	push   eax
c000c18b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c18d:	52                   	push   edx
c000c18e:	51                   	push   ecx
c000c18f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c192:	83 c4 10             	add    esp,0x10
c000c195:	83 c4 0c             	add    esp,0xc
c000c198:	c3                   	ret    
c000c199:	90                   	nop

c000c19a <Directory::rename(char const*)>:
c000c19a:	83 ec 0c             	sub    esp,0xc
c000c19d:	b8 0b 00 00 00       	mov    eax,0xb
c000c1a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1ad:	83 f9 19             	cmp    ecx,0x19
c000c1b0:	77 32                	ja     c000c1e4 <Directory::rename(char const*)+0x4a>
c000c1b2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1b9:	85 c9                	test   ecx,ecx
c000c1bb:	74 27                	je     c000c1e4 <Directory::rename(char const*)+0x4a>
c000c1bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1c3:	85 c9                	test   ecx,ecx
c000c1c5:	74 1d                	je     c000c1e4 <Directory::rename(char const*)+0x4a>
c000c1c7:	b8 06 00 00 00       	mov    eax,0x6
c000c1cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1d0:	75 12                	jne    c000c1e4 <Directory::rename(char const*)+0x4a>
c000c1d2:	83 c2 0d             	add    edx,0xd
c000c1d5:	50                   	push   eax
c000c1d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1dc:	52                   	push   edx
c000c1dd:	51                   	push   ecx
c000c1de:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c1e1:	83 c4 10             	add    esp,0x10
c000c1e4:	83 c4 0c             	add    esp,0xc
c000c1e7:	c3                   	ret    

c000c1e8 <Directory::exists()>:
c000c1e8:	83 ec 0c             	sub    esp,0xc
c000c1eb:	31 c0                	xor    eax,eax
c000c1ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1f1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f8:	83 f9 19             	cmp    ecx,0x19
c000c1fb:	77 24                	ja     c000c221 <Directory::exists()+0x39>
c000c1fd:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c204:	85 c9                	test   ecx,ecx
c000c206:	74 19                	je     c000c221 <Directory::exists()+0x39>
c000c208:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c20e:	85 c9                	test   ecx,ecx
c000c210:	74 0f                	je     c000c221 <Directory::exists()+0x39>
c000c212:	83 c2 0d             	add    edx,0xd
c000c215:	50                   	push   eax
c000c216:	50                   	push   eax
c000c217:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c219:	52                   	push   edx
c000c21a:	51                   	push   ecx
c000c21b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	83 c4 0c             	add    esp,0xc
c000c224:	c3                   	ret    
c000c225:	90                   	nop

c000c226 <Directory::read(dirent*)>:
c000c226:	83 ec 1c             	sub    esp,0x1c
c000c229:	b8 0b 00 00 00       	mov    eax,0xb
c000c22e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c232:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c239:	83 f9 19             	cmp    ecx,0x19
c000c23c:	77 30                	ja     c000c26e <Directory::read(dirent*)+0x48>
c000c23e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c245:	85 c9                	test   ecx,ecx
c000c247:	74 25                	je     c000c26e <Directory::read(dirent*)+0x48>
c000c249:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c250:	74 1c                	je     c000c26e <Directory::read(dirent*)+0x48>
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	8b 02                	mov    eax,DWORD PTR [edx]
c000c257:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c25b:	51                   	push   ecx
c000c25c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c260:	6a 00                	push   0x0
c000c262:	68 10 01 00 00       	push   0x110
c000c267:	52                   	push   edx
c000c268:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c26b:	83 c4 20             	add    esp,0x20
c000c26e:	83 c4 1c             	add    esp,0x1c
c000c271:	c3                   	ret    

c000c272 <Directory::create()>:
c000c272:	83 ec 0c             	sub    esp,0xc
c000c275:	b8 0b 00 00 00       	mov    eax,0xb
c000c27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c27e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c285:	83 f9 19             	cmp    ecx,0x19
c000c288:	77 2f                	ja     c000c2b9 <Directory::create()+0x47>
c000c28a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c291:	85 c9                	test   ecx,ecx
c000c293:	74 24                	je     c000c2b9 <Directory::create()+0x47>
c000c295:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c29b:	85 c9                	test   ecx,ecx
c000c29d:	74 1a                	je     c000c2b9 <Directory::create()+0x47>
c000c29f:	b8 06 00 00 00       	mov    eax,0x6
c000c2a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2a8:	75 0f                	jne    c000c2b9 <Directory::create()+0x47>
c000c2aa:	83 c2 0d             	add    edx,0xd
c000c2ad:	50                   	push   eax
c000c2ae:	50                   	push   eax
c000c2af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2b1:	52                   	push   edx
c000c2b2:	51                   	push   ecx
c000c2b3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	83 c4 0c             	add    esp,0xc
c000c2bc:	c3                   	ret    
c000c2bd:	90                   	nop

c000c2be <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2be:	b8 0a 00 00 00       	mov    eax,0xa
c000c2c3:	c3                   	ret    

c000c2c4 <Bus::Bus(char const*)>:
c000c2c4:	83 ec 0c             	sub    esp,0xc
c000c2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2cb:	83 ec 08             	sub    esp,0x8
c000c2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2d2:	50                   	push   eax
c000c2d3:	e8 22 08 00 00       	call   c000cafa <Device::Device(char const*)>
c000c2d8:	83 c4 10             	add    esp,0x10
c000c2db:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000c2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e4:	89 10                	mov    DWORD PTR [eax],edx
c000c2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ea:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c2f4:	90                   	nop
c000c2f5:	83 c4 0c             	add    esp,0xc
c000c2f8:	c3                   	ret    
c000c2f9:	90                   	nop
c000c2fa:	66 90                	xchg   ax,ax

c000c2fc <Bus::~Bus()>:
c000c2fc:	83 ec 0c             	sub    esp,0xc
c000c2ff:	ba 40 19 02 c0       	mov    edx,0xc0021940
c000c304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c308:	89 10                	mov    DWORD PTR [eax],edx
c000c30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c30e:	83 ec 0c             	sub    esp,0xc
c000c311:	50                   	push   eax
c000c312:	e8 4d 05 00 00       	call   c000c864 <Device::~Device()>
c000c317:	83 c4 10             	add    esp,0x10
c000c31a:	90                   	nop
c000c31b:	83 c4 0c             	add    esp,0xc
c000c31e:	c3                   	ret    
c000c31f:	90                   	nop

c000c320 <Bus::~Bus()>:
c000c320:	83 ec 0c             	sub    esp,0xc
c000c323:	83 ec 0c             	sub    esp,0xc
c000c326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32a:	e8 cd ff ff ff       	call   c000c2fc <Bus::~Bus()>
c000c32f:	83 c4 10             	add    esp,0x10
c000c332:	83 ec 08             	sub    esp,0x8
c000c335:	68 58 01 00 00       	push   0x158
c000c33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c33e:	e8 d5 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	83 c4 0c             	add    esp,0xc
c000c349:	c3                   	ret    

c000c34a <beepThread(void*)>:
c000c34a:	83 ec 0c             	sub    esp,0xc
c000c34d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c356:	48                   	dec    eax
c000c357:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c35c:	75 01                	jne    c000c35f <beepThread(void*)+0x15>
c000c35e:	fb                   	sti    
c000c35f:	83 ec 0c             	sub    esp,0xc
c000c362:	6b c2 0a             	imul   eax,edx,0xa
c000c365:	50                   	push   eax
c000c366:	e8 05 a0 00 00       	call   c0016370 <milliTenthSleep(unsigned int)>
c000c36b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c372:	e8 54 bf 00 00       	call   c00182cb <HalMakeBeep(int)>
c000c377:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c37f:	83 c4 1c             	add    esp,0x1c
c000c382:	e9 cd 9e 00 00       	jmp    c0016254 <blockTask(TaskState)>

c000c387 <Krnl::beep(int, int, bool)>:
c000c387:	56                   	push   esi
c000c388:	53                   	push   ebx
c000c389:	83 ec 10             	sub    esp,0x10
c000c38c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c398:	e8 2e bf 00 00       	call   c00182cb <HalMakeBeep(int)>
c000c39d:	83 c4 10             	add    esp,0x10
c000c3a0:	89 f0                	mov    eax,esi
c000c3a2:	84 c0                	test   al,al
c000c3a4:	74 1e                	je     c000c3c4 <Krnl::beep(int, int, bool)+0x3d>
c000c3a6:	83 ec 0c             	sub    esp,0xc
c000c3a9:	6b db 0a             	imul   ebx,ebx,0xa
c000c3ac:	53                   	push   ebx
c000c3ad:	e8 be 9f 00 00       	call   c0016370 <milliTenthSleep(unsigned int)>
c000c3b2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3ba:	83 c4 14             	add    esp,0x14
c000c3bd:	5b                   	pop    ebx
c000c3be:	5e                   	pop    esi
c000c3bf:	e9 07 bf 00 00       	jmp    c00182cb <HalMakeBeep(int)>
c000c3c4:	68 e6 00 00 00       	push   0xe6
c000c3c9:	53                   	push   ebx
c000c3ca:	68 4a c3 00 c0       	push   0xc000c34a
c000c3cf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3d5:	e8 16 9a 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c000c3da:	83 c4 14             	add    esp,0x14
c000c3dd:	5b                   	pop    ebx
c000c3de:	5e                   	pop    esi
c000c3df:	c3                   	ret    

c000c3e0 <User::loadClockSettings(int)>:
c000c3e0:	53                   	push   ebx
c000c3e1:	83 ec 14             	sub    esp,0x14
c000c3e4:	68 14 01 00 00       	push   0x114
c000c3e9:	e8 c8 b6 ff ff       	call   c0007ab6 <malloc>
c000c3ee:	83 c4 0c             	add    esp,0xc
c000c3f1:	89 c3                	mov    ebx,eax
c000c3f3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3f9:	68 64 19 02 c0       	push   0xc0021964
c000c3fe:	50                   	push   eax
c000c3ff:	e8 e6 f6 ff ff       	call   c000baea <File::File(char const*, Process*)>
c000c404:	58                   	pop    eax
c000c405:	5a                   	pop    edx
c000c406:	6a 01                	push   0x1
c000c408:	53                   	push   ebx
c000c409:	e8 fa f6 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c000c40e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c411:	e8 50 f7 ff ff       	call   c000bb66 <File::close()>
c000c416:	83 c4 10             	add    esp,0x10
c000c419:	85 db                	test   ebx,ebx
c000c41b:	74 0f                	je     c000c42c <User::loadClockSettings(int)+0x4c>
c000c41d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c41f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c423:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c426:	83 c4 08             	add    esp,0x8
c000c429:	5b                   	pop    ebx
c000c42a:	ff e0                	jmp    eax
c000c42c:	83 c4 08             	add    esp,0x8
c000c42f:	5b                   	pop    ebx
c000c430:	c3                   	ret    
c000c431:	90                   	nop

c000c432 <Clock::Clock(char const*)>:
c000c432:	83 ec 0c             	sub    esp,0xc
c000c435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c439:	83 ec 08             	sub    esp,0x8
c000c43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c440:	50                   	push   eax
c000c441:	e8 b4 06 00 00       	call   c000cafa <Device::Device(char const*)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	89 10                	mov    DWORD PTR [eax],edx
c000c454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c458:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c462:	90                   	nop
c000c463:	83 c4 0c             	add    esp,0xc
c000c466:	c3                   	ret    
c000c467:	90                   	nop

c000c468 <Clock::~Clock()>:
c000c468:	83 ec 0c             	sub    esp,0xc
c000c46b:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000c470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c474:	89 10                	mov    DWORD PTR [eax],edx
c000c476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47a:	83 ec 0c             	sub    esp,0xc
c000c47d:	50                   	push   eax
c000c47e:	e8 e1 03 00 00       	call   c000c864 <Device::~Device()>
c000c483:	83 c4 10             	add    esp,0x10
c000c486:	90                   	nop
c000c487:	83 c4 0c             	add    esp,0xc
c000c48a:	c3                   	ret    
c000c48b:	90                   	nop

c000c48c <Clock::~Clock()>:
c000c48c:	83 ec 0c             	sub    esp,0xc
c000c48f:	83 ec 0c             	sub    esp,0xc
c000c492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c496:	e8 cd ff ff ff       	call   c000c468 <Clock::~Clock()>
c000c49b:	83 c4 10             	add    esp,0x10
c000c49e:	83 ec 08             	sub    esp,0x8
c000c4a1:	68 58 01 00 00       	push   0x158
c000c4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4aa:	e8 69 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	83 c4 0c             	add    esp,0xc
c000c4b5:	c3                   	ret    

c000c4b6 <Clock::timeInSecondsLocal()>:
c000c4b6:	53                   	push   ebx
c000c4b7:	83 ec 14             	sub    esp,0x14
c000c4ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4be:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4c0:	50                   	push   eax
c000c4c1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4c4:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4cb:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4d1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4d7:	89 cb                	mov    ebx,ecx
c000c4d9:	c1 fb 1f             	sar    ebx,0x1f
c000c4dc:	01 c8                	add    eax,ecx
c000c4de:	11 da                	adc    edx,ebx
c000c4e0:	83 c4 10             	add    esp,0x10
c000c4e3:	31 c9                	xor    ecx,ecx
c000c4e5:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c4ec:	74 05                	je     c000c4f3 <Clock::timeInSecondsLocal()+0x3d>
c000c4ee:	b9 08 07 00 00       	mov    ecx,0x708
c000c4f3:	31 db                	xor    ebx,ebx
c000c4f5:	01 c8                	add    eax,ecx
c000c4f7:	11 da                	adc    edx,ebx
c000c4f9:	83 c4 08             	add    esp,0x8
c000c4fc:	5b                   	pop    ebx
c000c4fd:	c3                   	ret    

c000c4fe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c4fe:	57                   	push   edi
c000c4ff:	56                   	push   esi
c000c500:	53                   	push   ebx
c000c501:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c505:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c509:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c50b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c50f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c512:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c519:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c51f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c525:	99                   	cdq    
c000c526:	29 c6                	sub    esi,eax
c000c528:	19 d7                	sbb    edi,edx
c000c52a:	89 f0                	mov    eax,esi
c000c52c:	89 fa                	mov    edx,edi
c000c52e:	31 f6                	xor    esi,esi
c000c530:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c537:	74 05                	je     c000c53e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c539:	be 08 07 00 00       	mov    esi,0x708
c000c53e:	31 ff                	xor    edi,edi
c000c540:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c544:	29 f0                	sub    eax,esi
c000c546:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c54a:	19 fa                	sbb    edx,edi
c000c54c:	89 d8                	mov    eax,ebx
c000c54e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c552:	5b                   	pop    ebx
c000c553:	5e                   	pop    esi
c000c554:	5f                   	pop    edi
c000c555:	ff e0                	jmp    eax

c000c557 <datetimeToSeconds(datetime_t)>:
c000c557:	55                   	push   ebp
c000c558:	57                   	push   edi
c000c559:	56                   	push   esi
c000c55a:	53                   	push   ebx
c000c55b:	83 ec 0c             	sub    esp,0xc
c000c55e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c562:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c566:	89 d6                	mov    esi,edx
c000c568:	0f b6 c7             	movzx  eax,bh
c000c56b:	c1 ee 10             	shr    esi,0x10
c000c56e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c571:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c577:	0f b6 ce             	movzx  ecx,dh
c000c57a:	89 df                	mov    edi,ebx
c000c57c:	49                   	dec    ecx
c000c57d:	c1 ef 10             	shr    edi,0x10
c000c580:	0f b6 db             	movzx  ebx,bl
c000c583:	89 f8                	mov    eax,edi
c000c585:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c58b:	0f b6 f8             	movzx  edi,al
c000c58e:	0f b6 d2             	movzx  edx,dl
c000c591:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c595:	01 d8                	add    eax,ebx
c000c597:	0f b7 de             	movzx  ebx,si
c000c59a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c59d:	c1 f8 1f             	sar    eax,0x1f
c000c5a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5a4:	0f b6 c1             	movzx  eax,cl
c000c5a7:	8b 0c 85 c0 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde640]
c000c5ae:	83 f8 01             	cmp    eax,0x1
c000c5b1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c5b5:	76 27                	jbe    c000c5de <datetimeToSeconds(datetime_t)+0x87>
c000c5b7:	83 e6 03             	and    esi,0x3
c000c5ba:	75 22                	jne    c000c5de <datetimeToSeconds(datetime_t)+0x87>
c000c5bc:	31 d2                	xor    edx,edx
c000c5be:	be 64 00 00 00       	mov    esi,0x64
c000c5c3:	89 d8                	mov    eax,ebx
c000c5c5:	f7 f6                	div    esi
c000c5c7:	85 d2                	test   edx,edx
c000c5c9:	75 12                	jne    c000c5dd <datetimeToSeconds(datetime_t)+0x86>
c000c5cb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5d1:	be 90 01 00 00       	mov    esi,0x190
c000c5d6:	99                   	cdq    
c000c5d7:	f7 fe                	idiv   esi
c000c5d9:	85 d2                	test   edx,edx
c000c5db:	75 01                	jne    c000c5de <datetimeToSeconds(datetime_t)+0x87>
c000c5dd:	41                   	inc    ecx
c000c5de:	83 fb 46             	cmp    ebx,0x46
c000c5e1:	76 48                	jbe    c000c62b <datetimeToSeconds(datetime_t)+0xd4>
c000c5e3:	be 46 00 00 00       	mov    esi,0x46
c000c5e8:	bf 64 00 00 00       	mov    edi,0x64
c000c5ed:	bd 90 01 00 00       	mov    ebp,0x190
c000c5f2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c5f7:	f7 c6 03 00 00 00    	test   esi,0x3
c000c5fd:	75 23                	jne    c000c622 <datetimeToSeconds(datetime_t)+0xcb>
c000c5ff:	89 f0                	mov    eax,esi
c000c601:	99                   	cdq    
c000c602:	f7 ff                	idiv   edi
c000c604:	b8 6e 01 00 00       	mov    eax,0x16e
c000c609:	85 d2                	test   edx,edx
c000c60b:	75 15                	jne    c000c622 <datetimeToSeconds(datetime_t)+0xcb>
c000c60d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c613:	99                   	cdq    
c000c614:	f7 fd                	idiv   ebp
c000c616:	83 fa 01             	cmp    edx,0x1
c000c619:	19 c0                	sbb    eax,eax
c000c61b:	f7 d0                	not    eax
c000c61d:	05 6e 01 00 00       	add    eax,0x16e
c000c622:	01 c1                	add    ecx,eax
c000c624:	46                   	inc    esi
c000c625:	39 de                	cmp    esi,ebx
c000c627:	7c c9                	jl     c000c5f2 <datetimeToSeconds(datetime_t)+0x9b>
c000c629:	eb 34                	jmp    c000c65f <datetimeToSeconds(datetime_t)+0x108>
c000c62b:	74 32                	je     c000c65f <datetimeToSeconds(datetime_t)+0x108>
c000c62d:	b8 45 00 00 00       	mov    eax,0x45
c000c632:	89 c2                	mov    edx,eax
c000c634:	83 e2 03             	and    edx,0x3
c000c637:	39 d8                	cmp    eax,ebx
c000c639:	7e 0f                	jle    c000c64a <datetimeToSeconds(datetime_t)+0xf3>
c000c63b:	83 fa 01             	cmp    edx,0x1
c000c63e:	19 d2                	sbb    edx,edx
c000c640:	48                   	dec    eax
c000c641:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c648:	eb e8                	jmp    c000c632 <datetimeToSeconds(datetime_t)+0xdb>
c000c64a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c64f:	85 d2                	test   edx,edx
c000c651:	75 0a                	jne    c000c65d <datetimeToSeconds(datetime_t)+0x106>
c000c653:	83 fb 01             	cmp    ebx,0x1
c000c656:	19 c0                	sbb    eax,eax
c000c658:	05 6e 01 00 00       	add    eax,0x16e
c000c65d:	29 c1                	sub    ecx,eax
c000c65f:	b8 80 51 01 00       	mov    eax,0x15180
c000c664:	f7 e9                	imul   ecx
c000c666:	03 04 24             	add    eax,DWORD PTR [esp]
c000c669:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c66d:	83 c4 0c             	add    esp,0xc
c000c670:	5b                   	pop    ebx
c000c671:	5e                   	pop    esi
c000c672:	5f                   	pop    edi
c000c673:	5d                   	pop    ebp
c000c674:	c3                   	ret    
c000c675:	90                   	nop

c000c676 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c676:	57                   	push   edi
c000c677:	56                   	push   esi
c000c678:	53                   	push   ebx
c000c679:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c67d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c67f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c682:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c686:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c68a:	e8 c8 fe ff ff       	call   c000c557 <datetimeToSeconds(datetime_t)>
c000c68f:	59                   	pop    ecx
c000c690:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c697:	5b                   	pop    ebx
c000c698:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c69e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6a4:	89 cb                	mov    ebx,ecx
c000c6a6:	c1 fb 1f             	sar    ebx,0x1f
c000c6a9:	29 c8                	sub    eax,ecx
c000c6ab:	19 da                	sbb    edx,ebx
c000c6ad:	31 c9                	xor    ecx,ecx
c000c6af:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6b6:	74 05                	je     c000c6bd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6b8:	b9 08 07 00 00       	mov    ecx,0x708
c000c6bd:	31 db                	xor    ebx,ebx
c000c6bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6c3:	29 c8                	sub    eax,ecx
c000c6c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6c9:	19 da                	sbb    edx,ebx
c000c6cb:	89 f8                	mov    eax,edi
c000c6cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6d1:	5b                   	pop    ebx
c000c6d2:	5e                   	pop    esi
c000c6d3:	5f                   	pop    edi
c000c6d4:	ff e0                	jmp    eax

c000c6d6 <secondsToDatetime(unsigned long long)>:
c000c6d6:	55                   	push   ebp
c000c6d7:	57                   	push   edi
c000c6d8:	56                   	push   esi
c000c6d9:	53                   	push   ebx
c000c6da:	83 ec 1c             	sub    esp,0x1c
c000c6dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c6e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c6e5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c6e9:	6a 00                	push   0x0
c000c6eb:	68 80 51 01 00       	push   0x15180
c000c6f0:	55                   	push   ebp
c000c6f1:	57                   	push   edi
c000c6f2:	e8 b9 2f 01 00       	call   c001f6b0 <__udivdi3>
c000c6f7:	83 c4 10             	add    esp,0x10
c000c6fa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c704:	6a 00                	push   0x0
c000c706:	68 80 51 01 00       	push   0x15180
c000c70b:	55                   	push   ebp
c000c70c:	57                   	push   edi
c000c70d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c712:	e8 99 30 01 00       	call   c001f7b0 <__umoddi3>
c000c717:	83 c4 10             	add    esp,0x10
c000c71a:	99                   	cdq    
c000c71b:	f7 ff                	idiv   edi
c000c71d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c722:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c725:	89 d0                	mov    eax,edx
c000c727:	99                   	cdq    
c000c728:	f7 ff                	idiv   edi
c000c72a:	85 db                	test   ebx,ebx
c000c72c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c72f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c732:	79 11                	jns    c000c745 <secondsToDatetime(unsigned long long)+0x6f>
c000c734:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c738:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c73e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c743:	eb 07                	jmp    c000c74c <secondsToDatetime(unsigned long long)+0x76>
c000c745:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c74a:	89 d8                	mov    eax,ebx
c000c74c:	bf b4 05 00 00       	mov    edi,0x5b4
c000c751:	99                   	cdq    
c000c752:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c757:	f7 f9                	idiv   ecx
c000c759:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c75e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c762:	31 d2                	xor    edx,edx
c000c764:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c76c:	01 c3                	add    ebx,eax
c000c76e:	89 d8                	mov    eax,ebx
c000c770:	f7 f1                	div    ecx
c000c772:	31 d2                	xor    edx,edx
c000c774:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c777:	89 d8                	mov    eax,ebx
c000c779:	f7 f7                	div    edi
c000c77b:	31 d2                	xor    edx,edx
c000c77d:	29 c1                	sub    ecx,eax
c000c77f:	89 d8                	mov    eax,ebx
c000c781:	f7 f5                	div    ebp
c000c783:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c788:	29 c1                	sub    ecx,eax
c000c78a:	31 d2                	xor    edx,edx
c000c78c:	89 c8                	mov    eax,ecx
c000c78e:	f7 f5                	div    ebp
c000c790:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c799:	31 d2                	xor    edx,edx
c000c79b:	89 c8                	mov    eax,ecx
c000c79d:	f7 f5                	div    ebp
c000c79f:	31 d2                	xor    edx,edx
c000c7a1:	01 c3                	add    ebx,eax
c000c7a3:	89 c8                	mov    eax,ecx
c000c7a5:	f7 f7                	div    edi
c000c7a7:	bf 99 00 00 00       	mov    edi,0x99
c000c7ac:	29 c3                	sub    ebx,eax
c000c7ae:	31 d2                	xor    edx,edx
c000c7b0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7b8:	29 c3                	sub    ebx,eax
c000c7ba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7bd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7c0:	bb 05 00 00 00       	mov    ebx,0x5
c000c7c5:	83 c1 02             	add    ecx,0x2
c000c7c8:	89 c8                	mov    eax,ecx
c000c7ca:	f7 f7                	div    edi
c000c7cc:	31 d2                	xor    edx,edx
c000c7ce:	89 c7                	mov    edi,eax
c000c7d0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c7d6:	83 c0 02             	add    eax,0x2
c000c7d9:	f7 f3                	div    ebx
c000c7db:	89 eb                	mov    ebx,ebp
c000c7dd:	29 c3                	sub    ebx,eax
c000c7df:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c7e5:	88 1e                	mov    BYTE PTR [esi],bl
c000c7e7:	19 c0                	sbb    eax,eax
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	83 e0 0c             	and    eax,0xc
c000c7ee:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c7f2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c7fa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c7fe:	83 f9 01             	cmp    ecx,0x1
c000c801:	0f 96 c2             	setbe  dl
c000c804:	41                   	inc    ecx
c000c805:	01 d0                	add    eax,edx
c000c807:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c80a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c80e:	83 c4 1c             	add    esp,0x1c
c000c811:	89 f0                	mov    eax,esi
c000c813:	5b                   	pop    ebx
c000c814:	5e                   	pop    esi
c000c815:	5f                   	pop    edi
c000c816:	5d                   	pop    ebp
c000c817:	c2 04 00             	ret    0x4

c000c81a <Clock::timeInDatetimeLocal()>:
c000c81a:	53                   	push   ebx
c000c81b:	83 ec 14             	sub    esp,0x14
c000c81e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c822:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c826:	e8 8b fc ff ff       	call   c000c4b6 <Clock::timeInSecondsLocal()>
c000c82b:	83 c4 0c             	add    esp,0xc
c000c82e:	52                   	push   edx
c000c82f:	50                   	push   eax
c000c830:	53                   	push   ebx
c000c831:	e8 a0 fe ff ff       	call   c000c6d6 <secondsToDatetime(unsigned long long)>
c000c836:	89 d8                	mov    eax,ebx
c000c838:	83 c4 14             	add    esp,0x14
c000c83b:	5b                   	pop    ebx
c000c83c:	c2 04 00             	ret    0x4
c000c83f:	90                   	nop

c000c840 <Device::hibernate()>:
c000c840:	c3                   	ret    
c000c841:	90                   	nop

c000c842 <Device::wake()>:
c000c842:	c3                   	ret    
c000c843:	90                   	nop

c000c844 <Device::detect()>:
c000c844:	c3                   	ret    
c000c845:	90                   	nop

c000c846 <Device::disableLegacy()>:
c000c846:	c3                   	ret    
c000c847:	90                   	nop

c000c848 <Device::powerSaving(PowerSavingLevel)>:
c000c848:	c3                   	ret    
c000c849:	90                   	nop

c000c84a <DriverlessDevice::close(int, int, void*)>:
c000c84a:	31 c0                	xor    eax,eax
c000c84c:	c3                   	ret    
c000c84d:	90                   	nop

c000c84e <DriverlessDevice::detect()>:
c000c84e:	c3                   	ret    
c000c84f:	90                   	nop

c000c850 <DriverlessDevice::open(int, int, void*)>:
c000c850:	83 ec 18             	sub    esp,0x18
c000c853:	68 f0 19 02 c0       	push   0xc00219f0
c000c858:	e8 5e 4d 00 00       	call   c00115bb <KePanic(char const*)>
c000c85d:	83 c8 ff             	or     eax,0xffffffff
c000c860:	83 c4 1c             	add    esp,0x1c
c000c863:	c3                   	ret    

c000c864 <Device::~Device()>:
c000c864:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000c869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c86d:	89 10                	mov    DWORD PTR [eax],edx
c000c86f:	90                   	nop
c000c870:	c3                   	ret    
c000c871:	90                   	nop

c000c872 <Device::~Device()>:
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c879:	e8 e6 ff ff ff       	call   c000c864 <Device::~Device()>
c000c87e:	83 c4 04             	add    esp,0x4
c000c881:	83 ec 08             	sub    esp,0x8
c000c884:	68 58 01 00 00       	push   0x158
c000c889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88d:	e8 86 df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	83 c4 0c             	add    esp,0xc
c000c898:	c3                   	ret    
c000c899:	90                   	nop

c000c89a <Device::findAndLoadDriver()>:
c000c89a:	c7 44 24 04 0e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a0e
c000c8a2:	e9 9e e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c8a7:	90                   	nop

c000c8a8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8a8:	57                   	push   edi
c000c8a9:	b9 09 00 00 00       	mov    ecx,0x9
c000c8ae:	56                   	push   esi
c000c8af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8b3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8b7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8c1:	81 c7 18 01 00 00    	add    edi,0x118
c000c8c7:	fc                   	cld    
c000c8c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8ca:	5e                   	pop    esi
c000c8cb:	5f                   	pop    edi
c000c8cc:	c3                   	ret    
c000c8cd:	90                   	nop

c000c8ce <Device::preOpenACPI(void*, char*, char*)>:
c000c8ce:	57                   	push   edi
c000c8cf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c8d4:	56                   	push   esi
c000c8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8dd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c8e7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c8ed:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8f9:	b9 0e 00 00 00       	mov    ecx,0xe
c000c8fe:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c904:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c90a:	5e                   	pop    esi
c000c90b:	5f                   	pop    edi
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c90e:	53                   	push   ebx
c000c90f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c913:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c917:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c91b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c91f:	0f b6 c0             	movzx  eax,al
c000c922:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c926:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c92a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c92e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c932:	5b                   	pop    ebx
c000c933:	e9 a8 05 00 00       	jmp    c000cee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c938 <Device::getParent()>:
c000c938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c93c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c948:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c94c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c951:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c955:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c959:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c95d:	e9 e6 06 00 00       	jmp    c000d048 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c962 <Device::addChild(Device*)>:
c000c962:	53                   	push   ebx
c000c963:	83 ec 08             	sub    esp,0x8
c000c966:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c96e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c974:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c97a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c97c:	85 d2                	test   edx,edx
c000c97e:	74 04                	je     c000c984 <Device::addChild(Device*)+0x22>
c000c980:	89 d3                	mov    ebx,edx
c000c982:	eb f6                	jmp    c000c97a <Device::addChild(Device*)+0x18>
c000c984:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c987:	83 ec 0c             	sub    esp,0xc
c000c98a:	6a 08                	push   0x8
c000c98c:	e8 25 b1 ff ff       	call   c0007ab6 <malloc>
c000c991:	89 03                	mov    DWORD PTR [ebx],eax
c000c993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c999:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9a0:	83 c4 18             	add    esp,0x18
c000c9a3:	5b                   	pop    ebx
c000c9a4:	c3                   	ret    
c000c9a5:	90                   	nop

c000c9a6 <Device::removeAllChildren()>:
c000c9a6:	56                   	push   esi
c000c9a7:	53                   	push   ebx
c000c9a8:	52                   	push   edx
c000c9a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9b6:	74 17                	je     c000c9cf <Device::removeAllChildren()+0x29>
c000c9b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9bb:	85 c0                	test   eax,eax
c000c9bd:	74 0c                	je     c000c9cb <Device::removeAllChildren()+0x25>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9c4:	50                   	push   eax
c000c9c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9cd:	eb e4                	jmp    c000c9b3 <Device::removeAllChildren()+0xd>
c000c9cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9e8:	58                   	pop    eax
c000c9e9:	5b                   	pop    ebx
c000c9ea:	5e                   	pop    esi
c000c9eb:	c3                   	ret    

c000c9ec <Device::hibernateAll()>:
c000c9ec:	53                   	push   ebx
c000c9ed:	83 ec 14             	sub    esp,0x14
c000c9f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9f6:	53                   	push   ebx
c000c9f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c9fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca06:	74 0f                	je     c000ca17 <Device::hibernateAll()+0x2b>
c000ca08:	83 ec 0c             	sub    esp,0xc
c000ca0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca0e:	e8 d9 ff ff ff       	call   c000c9ec <Device::hibernateAll()>
c000ca13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca15:	eb e9                	jmp    c000ca00 <Device::hibernateAll()+0x14>
c000ca17:	83 c4 08             	add    esp,0x8
c000ca1a:	5b                   	pop    ebx
c000ca1b:	c3                   	ret    

c000ca1c <Device::wakeAll()>:
c000ca1c:	53                   	push   ebx
c000ca1d:	83 ec 14             	sub    esp,0x14
c000ca20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca24:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca26:	53                   	push   ebx
c000ca27:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca2a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca36:	74 0f                	je     c000ca47 <Device::wakeAll()+0x2b>
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca3e:	e8 d9 ff ff ff       	call   c000ca1c <Device::wakeAll()>
c000ca43:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca45:	eb e9                	jmp    c000ca30 <Device::wakeAll()+0x14>
c000ca47:	83 c4 08             	add    esp,0x8
c000ca4a:	5b                   	pop    ebx
c000ca4b:	c3                   	ret    

c000ca4c <Device::detectAll()>:
c000ca4c:	53                   	push   ebx
c000ca4d:	83 ec 14             	sub    esp,0x14
c000ca50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca54:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca56:	53                   	push   ebx
c000ca57:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca5a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca66:	74 0f                	je     c000ca77 <Device::detectAll()+0x2b>
c000ca68:	83 ec 0c             	sub    esp,0xc
c000ca6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca6e:	e8 d9 ff ff ff       	call   c000ca4c <Device::detectAll()>
c000ca73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca75:	eb e9                	jmp    c000ca60 <Device::detectAll()+0x14>
c000ca77:	83 c4 08             	add    esp,0x8
c000ca7a:	5b                   	pop    ebx
c000ca7b:	c3                   	ret    

c000ca7c <Device::disableLegacyAll()>:
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <Device::loadDriversForAll()>:
c000ca7e:	c3                   	ret    
c000ca7f:	90                   	nop

c000ca80 <Device::closeAll()>:
c000ca80:	53                   	push   ebx
c000ca81:	83 ec 08             	sub    esp,0x8
c000ca84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8a:	6a 00                	push   0x0
c000ca8c:	6a 00                	push   0x0
c000ca8e:	6a 00                	push   0x0
c000ca90:	53                   	push   ebx
c000ca91:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ca94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca9a:	83 c4 10             	add    esp,0x10
c000ca9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa0:	74 0f                	je     c000cab1 <Device::closeAll()+0x31>
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa8:	e8 d3 ff ff ff       	call   c000ca80 <Device::closeAll()>
c000caad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caaf:	eb e9                	jmp    c000ca9a <Device::closeAll()+0x1a>
c000cab1:	83 c4 08             	add    esp,0x8
c000cab4:	5b                   	pop    ebx
c000cab5:	c3                   	ret    

c000cab6 <Device::powerSavingAll(PowerSavingLevel)>:
c000cab6:	56                   	push   esi
c000cab7:	53                   	push   ebx
c000cab8:	83 ec 0c             	sub    esp,0xc
c000cabb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cabf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac5:	56                   	push   esi
c000cac6:	53                   	push   ebx
c000cac7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000caca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cad0:	83 c4 10             	add    esp,0x10
c000cad3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad6:	74 0f                	je     c000cae7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cad8:	52                   	push   edx
c000cad9:	52                   	push   edx
c000cada:	56                   	push   esi
c000cadb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cade:	e8 d3 ff ff ff       	call   c000cab6 <Device::powerSavingAll(PowerSavingLevel)>
c000cae3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae5:	eb e9                	jmp    c000cad0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cae7:	58                   	pop    eax
c000cae8:	5b                   	pop    ebx
c000cae9:	5e                   	pop    esi
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <Device::setName(char const*)>:
c000caec:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000caf4:	e9 47 3b ff ff       	jmp    c0000640 <strcpy>
c000caf9:	90                   	nop

c000cafa <Device::Device(char const*)>:
c000cafa:	83 ec 1c             	sub    esp,0x1c
c000cafd:	ba 50 1a 02 c0       	mov    edx,0xc0021a50
c000cb02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb06:	89 10                	mov    DWORD PTR [eax],edx
c000cb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb0c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb1a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb28:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb36:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb40:	83 ec 08             	sub    esp,0x8
c000cb43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	e8 9c ff ff ff       	call   c000caec <Device::setName(char const*)>
c000cb50:	83 c4 10             	add    esp,0x10
c000cb53:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb5b:	83 ec 0c             	sub    esp,0xc
c000cb5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb62:	e8 4f af ff ff       	call   c0007ab6 <malloc>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb7b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb85:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb95:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbbc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cbf0:	90                   	nop
c000cbf1:	83 c4 1c             	add    esp,0x1c
c000cbf4:	c3                   	ret    
c000cbf5:	90                   	nop

c000cbf6 <Device::getName()>:
c000cbf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbfa:	05 d0 00 00 00       	add    eax,0xd0
c000cbff:	c3                   	ret    

c000cc00 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc00:	83 ec 0c             	sub    esp,0xc
c000cc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc07:	83 ec 08             	sub    esp,0x8
c000cc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc0e:	50                   	push   eax
c000cc0f:	e8 e6 fe ff ff       	call   c000cafa <Device::Device(char const*)>
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c000cc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc20:	89 10                	mov    DWORD PTR [eax],edx
c000cc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc26:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc30:	90                   	nop
c000cc31:	83 c4 0c             	add    esp,0xc
c000cc34:	c3                   	ret    
c000cc35:	90                   	nop

c000cc36 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc36:	57                   	push   edi
c000cc37:	56                   	push   esi
c000cc38:	53                   	push   ebx
c000cc39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc3d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc45:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc4b:	75 0c                	jne    c000cc59 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc4d:	52                   	push   edx
c000cc4e:	52                   	push   edx
c000cc4f:	53                   	push   ebx
c000cc50:	56                   	push   esi
c000cc51:	e8 0c 2f 01 00       	call   c001fb62 <LinkedList<Device>::addElement(Device*)>
c000cc56:	83 c4 10             	add    esp,0x10
c000cc59:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc62:	74 12                	je     c000cc76 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc64:	50                   	push   eax
c000cc65:	57                   	push   edi
c000cc66:	56                   	push   esi
c000cc67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc6a:	e8 c7 ff ff ff       	call   c000cc36 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc71:	83 c4 10             	add    esp,0x10
c000cc74:	eb e9                	jmp    c000cc5f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cc76:	5b                   	pop    ebx
c000cc77:	5e                   	pop    esi
c000cc78:	5f                   	pop    edi
c000cc79:	c3                   	ret    

c000cc7a <getDevicesOfType(DeviceType)>:
c000cc7a:	53                   	push   ebx
c000cc7b:	83 ec 14             	sub    esp,0x14
c000cc7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cc82:	53                   	push   ebx
c000cc83:	e8 b6 2f 01 00       	call   c001fc3e <LinkedList<Device>::LinkedList()>
c000cc88:	83 c4 0c             	add    esp,0xc
c000cc8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc8f:	53                   	push   ebx
c000cc90:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cc96:	e8 9b ff ff ff       	call   c000cc36 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc9b:	89 d8                	mov    eax,ebx
c000cc9d:	83 c4 18             	add    esp,0x18
c000cca0:	5b                   	pop    ebx
c000cca1:	c2 04 00             	ret    0x4

c000cca4 <HardDiskController::HardDiskController(char const*)>:
c000cca4:	83 ec 0c             	sub    esp,0xc
c000cca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccab:	83 ec 08             	sub    esp,0x8
c000ccae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb2:	50                   	push   eax
c000ccb3:	e8 42 fe ff ff       	call   c000cafa <Device::Device(char const*)>
c000ccb8:	83 c4 10             	add    esp,0x10
c000ccbb:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000ccc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc4:	89 10                	mov    DWORD PTR [eax],edx
c000ccc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccca:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ccd4:	90                   	nop
c000ccd5:	83 c4 0c             	add    esp,0xc
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop
c000ccda:	66 90                	xchg   ax,ax

c000ccdc <HardDiskController::~HardDiskController()>:
c000ccdc:	83 ec 0c             	sub    esp,0xc
c000ccdf:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c000cce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce8:	89 10                	mov    DWORD PTR [eax],edx
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	83 ec 0c             	sub    esp,0xc
c000ccf1:	50                   	push   eax
c000ccf2:	e8 6d fb ff ff       	call   c000c864 <Device::~Device()>
c000ccf7:	83 c4 10             	add    esp,0x10
c000ccfa:	90                   	nop
c000ccfb:	83 c4 0c             	add    esp,0xc
c000ccfe:	c3                   	ret    
c000ccff:	90                   	nop

c000cd00 <HardDiskController::~HardDiskController()>:
c000cd00:	83 ec 0c             	sub    esp,0xc
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd0a:	e8 cd ff ff ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	83 ec 08             	sub    esp,0x8
c000cd15:	68 58 01 00 00       	push   0x158
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 f5 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	83 c4 0c             	add    esp,0xc
c000cd29:	c3                   	ret    

c000cd2a <PhysicalDisk::eject()>:
c000cd2a:	83 c8 ff             	or     eax,0xffffffff
c000cd2d:	c3                   	ret    

c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd2e:	83 ec 0c             	sub    esp,0xc
c000cd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd35:	83 ec 08             	sub    esp,0x8
c000cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd3c:	50                   	push   eax
c000cd3d:	e8 b8 fd ff ff       	call   c000cafa <Device::Device(char const*)>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000cd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4e:	89 10                	mov    DWORD PTR [eax],edx
c000cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cd90:	90                   	nop
c000cd91:	83 c4 0c             	add    esp,0xc
c000cd94:	c3                   	ret    
c000cd95:	90                   	nop

c000cd96 <PhysicalDisk::startCache()>:
c000cd96:	56                   	push   esi
c000cd97:	53                   	push   ebx
c000cd98:	83 ec 10             	sub    esp,0x10
c000cd9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd9f:	6a 44                	push   0x44
c000cda1:	e8 10 ad ff ff       	call   c0007ab6 <malloc>
c000cda6:	89 c6                	mov    esi,eax
c000cda8:	58                   	pop    eax
c000cda9:	5a                   	pop    edx
c000cdaa:	53                   	push   ebx
c000cdab:	56                   	push   esi
c000cdac:	e8 7b 17 00 00       	call   c000e52c <VCache::VCache(PhysicalDisk*)>
c000cdb1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cdb7:	83 c4 14             	add    esp,0x14
c000cdba:	5b                   	pop    ebx
c000cdbb:	5e                   	pop    esi
c000cdbc:	c3                   	ret    
c000cdbd:	90                   	nop

c000cdbe <PhysicalDisk::~PhysicalDisk()>:
c000cdbe:	83 ec 0c             	sub    esp,0xc
c000cdc1:	ba d4 1a 02 c0       	mov    edx,0xc0021ad4
c000cdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdca:	89 10                	mov    DWORD PTR [eax],edx
c000cdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	50                   	push   eax
c000cdd4:	e8 8b fa ff ff       	call   c000c864 <Device::~Device()>
c000cdd9:	83 c4 10             	add    esp,0x10
c000cddc:	90                   	nop
c000cddd:	83 c4 0c             	add    esp,0xc
c000cde0:	c3                   	ret    
c000cde1:	90                   	nop

c000cde2 <PhysicalDisk::~PhysicalDisk()>:
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	83 ec 0c             	sub    esp,0xc
c000cde8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdec:	e8 cd ff ff ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c000cdf1:	83 c4 10             	add    esp,0x10
c000cdf4:	83 ec 08             	sub    esp,0x8
c000cdf7:	68 6c 01 00 00       	push   0x16c
c000cdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce00:	e8 13 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	83 c4 0c             	add    esp,0xc
c000ce0b:	c3                   	ret    

c000ce0c <int_handler>:
c000ce0c:	55                   	push   ebp
c000ce0d:	57                   	push   edi
c000ce0e:	56                   	push   esi
c000ce0f:	53                   	push   ebx
c000ce10:	83 ec 0c             	sub    esp,0xc
c000ce13:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce17:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce1e:	74 0b                	je     c000ce2b <int_handler+0x1f>
c000ce20:	fa                   	cli    
c000ce21:	f4                   	hlt    
c000ce22:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce29:	75 f5                	jne    c000ce20 <int_handler+0x14>
c000ce2b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce2e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce31:	83 f8 17             	cmp    eax,0x17
c000ce34:	76 40                	jbe    c000ce76 <int_handler+0x6a>
c000ce36:	c1 e6 04             	shl    esi,0x4
c000ce39:	31 db                	xor    ebx,ebx
c000ce3b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce41:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce47:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 13                	je     c000ce62 <int_handler+0x56>
c000ce4f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce52:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce56:	74 2c                	je     c000ce84 <int_handler+0x78>
c000ce58:	83 ec 08             	sub    esp,0x8
c000ce5b:	52                   	push   edx
c000ce5c:	57                   	push   edi
c000ce5d:	ff d0                	call   eax
c000ce5f:	83 c4 10             	add    esp,0x10
c000ce62:	83 c3 01             	add    ebx,0x1
c000ce65:	83 fb 04             	cmp    ebx,0x4
c000ce68:	75 dd                	jne    c000ce47 <int_handler+0x3b>
c000ce6a:	83 c4 0c             	add    esp,0xc
c000ce6d:	31 c0                	xor    eax,eax
c000ce6f:	5b                   	pop    ebx
c000ce70:	31 d2                	xor    edx,edx
c000ce72:	5e                   	pop    esi
c000ce73:	5f                   	pop    edi
c000ce74:	5d                   	pop    ebp
c000ce75:	c3                   	ret    
c000ce76:	83 ec 0c             	sub    esp,0xc
c000ce79:	50                   	push   eax
c000ce7a:	e8 89 b4 00 00       	call   c0018308 <HalEndOfInterrupt(int)>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	eb b2                	jmp    c000ce36 <int_handler+0x2a>
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	52                   	push   edx
c000ce88:	57                   	push   edi
c000ce89:	ff d0                	call   eax
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	83 c4 0c             	add    esp,0xc
c000ce91:	5b                   	pop    ebx
c000ce92:	5e                   	pop    esi
c000ce93:	5f                   	pop    edi
c000ce94:	5d                   	pop    ebp
c000ce95:	c3                   	ret    

c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ce96:	56                   	push   esi
c000ce97:	31 c0                	xor    eax,eax
c000ce99:	53                   	push   ebx
c000ce9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ce9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cea2:	89 ca                	mov    edx,ecx
c000cea4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cea8:	c1 e2 04             	shl    edx,0x4
c000ceab:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000ceb3:	74 17                	je     c000cecc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ceb5:	83 c0 01             	add    eax,0x1
c000ceb8:	83 f8 04             	cmp    eax,0x4
c000cebb:	75 ee                	jne    c000ceab <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cebd:	c7 44 24 0c 04 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b04
c000cec5:	5b                   	pop    ebx
c000cec6:	5e                   	pop    esi
c000cec7:	e9 ef 46 00 00       	jmp    c00115bb <KePanic(char const*)>
c000cecc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cecf:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000ced6:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cedd:	5b                   	pop    ebx
c000cede:	5e                   	pop    esi
c000cedf:	c3                   	ret    

c000cee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cee0:	57                   	push   edi
c000cee1:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cee7:	56                   	push   esi
c000cee8:	53                   	push   ebx
c000cee9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ceed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cef1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cef8:	74 54                	je     c000cf4e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cefa:	89 c7                	mov    edi,eax
c000cefc:	84 c0                	test   al,al
c000cefe:	74 1d                	je     c000cf1d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf00:	83 fe 0f             	cmp    esi,0xf
c000cf03:	0f 8f d5 00 00 00    	jg     c000cfde <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf09:	0f b6 b6 08 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc9f8]
c000cf10:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf18:	d1 ef                	shr    edi,1
c000cf1a:	83 e7 01             	and    edi,0x1
c000cf1d:	83 ec 08             	sub    esp,0x8
c000cf20:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf25:	31 db                	xor    ebx,ebx
c000cf27:	50                   	push   eax
c000cf28:	68 11 1b 02 c0       	push   0xc0021b11
c000cf2d:	e8 13 da ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf3a:	85 c0                	test   eax,eax
c000cf3c:	7f 55                	jg     c000cf93 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cf3e:	83 ec 0c             	sub    esp,0xc
c000cf41:	68 28 1b 02 c0       	push   0xc0021b28
c000cf46:	e8 70 46 00 00       	call   c00115bb <KePanic(char const*)>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	8d 7e 20             	lea    edi,[esi+0x20]
c000cf51:	89 f8                	mov    eax,edi
c000cf53:	31 d2                	xor    edx,edx
c000cf55:	c1 e0 04             	shl    eax,0x4
c000cf58:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf5f:	85 c9                	test   ecx,ecx
c000cf61:	0f 84 8e 00 00 00    	je     c000cff5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cf67:	83 c2 01             	add    edx,0x1
c000cf6a:	83 fa 04             	cmp    edx,0x4
c000cf6d:	75 e9                	jne    c000cf58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf6f:	83 ec 0c             	sub    esp,0xc
c000cf72:	68 7c 1b 02 c0       	push   0xc0021b7c
c000cf77:	e8 3f 46 00 00       	call   c00115bb <KePanic(char const*)>
c000cf7c:	83 c4 10             	add    esp,0x10
c000cf7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf84:	5b                   	pop    ebx
c000cf85:	5e                   	pop    esi
c000cf86:	5f                   	pop    edi
c000cf87:	c3                   	ret    
c000cf88:	83 c3 01             	add    ebx,0x1
c000cf8b:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cf91:	7e ab                	jle    c000cf3e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cf93:	83 ec 08             	sub    esp,0x8
c000cf96:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000cf9d:	56                   	push   esi
c000cf9e:	50                   	push   eax
c000cf9f:	e8 ee 1a 01 00       	call   c001ea92 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cfa4:	83 c4 10             	add    esp,0x10
c000cfa7:	84 c0                	test   al,al
c000cfa9:	74 dd                	je     c000cf88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cfab:	83 ec 04             	sub    esp,0x4
c000cfae:	89 f8                	mov    eax,edi
c000cfb0:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfb7:	0f b6 f8             	movzx  edi,al
c000cfba:	57                   	push   edi
c000cfbb:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfbe:	6a 00                	push   0x0
c000cfc0:	89 f8                	mov    eax,edi
c000cfc2:	0f b6 c0             	movzx  eax,al
c000cfc5:	50                   	push   eax
c000cfc6:	89 f0                	mov    eax,esi
c000cfc8:	6a 00                	push   0x0
c000cfca:	0f b6 c0             	movzx  eax,al
c000cfcd:	6a 00                	push   0x0
c000cfcf:	50                   	push   eax
c000cfd0:	53                   	push   ebx
c000cfd1:	e8 28 1c 01 00       	call   c001ebfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cfd6:	83 c4 20             	add    esp,0x20
c000cfd9:	e9 73 ff ff ff       	jmp    c000cf51 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cfde:	83 ec 0c             	sub    esp,0xc
c000cfe1:	31 ff                	xor    edi,edi
c000cfe3:	68 44 1b 02 c0       	push   0xc0021b44
c000cfe8:	e8 ce 45 00 00       	call   c00115bb <KePanic(char const*)>
c000cfed:	83 c4 10             	add    esp,0x10
c000cff0:	e9 28 ff ff ff       	jmp    c000cf1d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cff5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cff8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cffc:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d003:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d007:	5b                   	pop    ebx
c000d008:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d00f:	89 f0                	mov    eax,esi
c000d011:	5e                   	pop    esi
c000d012:	5f                   	pop    edi
c000d013:	c3                   	ret    

c000d014 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d018:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d01c:	c1 e0 04             	shl    eax,0x4
c000d01f:	8d 50 10             	lea    edx,[eax+0x10]
c000d022:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d028:	74 08                	je     c000d032 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d02a:	83 c0 04             	add    eax,0x4
c000d02d:	39 d0                	cmp    eax,edx
c000d02f:	75 f1                	jne    c000d022 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d031:	c3                   	ret    
c000d032:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d03c:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d046:	eb e2                	jmp    c000d02a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d048 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d048:	53                   	push   ebx
c000d049:	83 ec 08             	sub    esp,0x8
c000d04c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d050:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d055:	74 0e                	je     c000d065 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d057:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d05c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d063:	75 37                	jne    c000d09c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d069:	83 c0 20             	add    eax,0x20
c000d06c:	c1 e0 04             	shl    eax,0x4
c000d06f:	8d 50 10             	lea    edx,[eax+0x10]
c000d072:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d078:	74 0c                	je     c000d086 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d07a:	83 c0 04             	add    eax,0x4
c000d07d:	39 d0                	cmp    eax,edx
c000d07f:	75 f1                	jne    c000d072 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d081:	83 c4 08             	add    esp,0x8
c000d084:	5b                   	pop    ebx
c000d085:	c3                   	ret    
c000d086:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d090:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d09a:	eb de                	jmp    c000d07a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d09c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d0a1:	7f 11                	jg     c000d0b4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a7:	0f b6 80 08 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9f8]
c000d0ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0b2:	eb b1                	jmp    c000d065 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	68 35 1b 02 c0       	push   0xc0021b35
c000d0bc:	e8 fa 44 00 00       	call   c00115bb <KePanic(char const*)>
c000d0c1:	83 c4 10             	add    esp,0x10
c000d0c4:	eb 9f                	jmp    c000d065 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d0c6 <setupINTS()>:
c000d0c6:	31 c0                	xor    eax,eax
c000d0c8:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0d2:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0dc:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d0e6:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d0f0:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d0fa:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d104:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d10e:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d118:	83 c0 10             	add    eax,0x10
c000d11b:	3d 00 10 00 00       	cmp    eax,0x1000
c000d120:	75 a6                	jne    c000d0c8 <setupINTS()+0x2>
c000d122:	c3                   	ret    

c000d123 <convertLegacyIRQNumber(int)>:
c000d123:	83 ec 0c             	sub    esp,0xc
c000d126:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d130:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d137:	74 0c                	je     c000d145 <convertLegacyIRQNumber(int)+0x22>
c000d139:	83 f8 0f             	cmp    eax,0xf
c000d13c:	7f 0b                	jg     c000d149 <convertLegacyIRQNumber(int)+0x26>
c000d13e:	0f b6 80 08 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9f8]
c000d145:	83 c4 0c             	add    esp,0xc
c000d148:	c3                   	ret    
c000d149:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d14d:	83 ec 0c             	sub    esp,0xc
c000d150:	68 44 1b 02 c0       	push   0xc0021b44
c000d155:	e8 61 44 00 00       	call   c00115bb <KePanic(char const*)>
c000d15a:	83 c4 10             	add    esp,0x10
c000d15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d161:	83 c4 0c             	add    esp,0xc
c000d164:	c3                   	ret    
c000d165:	90                   	nop

c000d166 <startGUI(void*)>:
c000d166:	55                   	push   ebp
c000d167:	89 e5                	mov    ebp,esp
c000d169:	53                   	push   ebx
c000d16a:	83 ec 04             	sub    esp,0x4
c000d16d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d172:	83 e8 01             	sub    eax,0x1
c000d175:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d17a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d17f:	85 c0                	test   eax,eax
c000d181:	75 01                	jne    c000d184 <startGUI(void*)+0x1e>
c000d183:	fb                   	sti    
c000d184:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d18a:	83 ec 08             	sub    esp,0x8
c000d18d:	6a 01                	push   0x1
c000d18f:	68 a1 1b 02 c0       	push   0xc0021ba1
c000d194:	e8 46 84 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	83 ec 08             	sub    esp,0x8
c000d19f:	53                   	push   ebx
c000d1a0:	50                   	push   eax
c000d1a1:	e8 6a 86 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c000d1a6:	83 c4 10             	add    esp,0x10
c000d1a9:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1af:	83 ec 08             	sub    esp,0x8
c000d1b2:	6a 01                	push   0x1
c000d1b4:	68 bb 1b 02 c0       	push   0xc0021bbb
c000d1b9:	e8 21 84 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c000d1be:	83 c4 10             	add    esp,0x10
c000d1c1:	83 ec 08             	sub    esp,0x8
c000d1c4:	53                   	push   ebx
c000d1c5:	50                   	push   eax
c000d1c6:	e8 45 86 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c000d1cb:	83 c4 10             	add    esp,0x10
c000d1ce:	90                   	nop
c000d1cf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1d2:	c9                   	leave  
c000d1d3:	c3                   	ret    

c000d1d4 <startGUIVESA(void*)>:
c000d1d4:	55                   	push   ebp
c000d1d5:	89 e5                	mov    ebp,esp
c000d1d7:	53                   	push   ebx
c000d1d8:	83 ec 04             	sub    esp,0x4
c000d1db:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e0:	83 e8 01             	sub    eax,0x1
c000d1e3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1ed:	85 c0                	test   eax,eax
c000d1ef:	75 01                	jne    c000d1f2 <startGUIVESA(void*)+0x1e>
c000d1f1:	fb                   	sti    
c000d1f2:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1f8:	83 ec 08             	sub    esp,0x8
c000d1fb:	6a 01                	push   0x1
c000d1fd:	68 d9 1b 02 c0       	push   0xc0021bd9
c000d202:	e8 d8 83 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c000d207:	83 c4 10             	add    esp,0x10
c000d20a:	83 ec 08             	sub    esp,0x8
c000d20d:	53                   	push   ebx
c000d20e:	50                   	push   eax
c000d20f:	e8 fc 85 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c000d214:	83 c4 10             	add    esp,0x10
c000d217:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d21d:	83 ec 08             	sub    esp,0x8
c000d220:	6a 01                	push   0x1
c000d222:	68 bb 1b 02 c0       	push   0xc0021bbb
c000d227:	e8 b3 83 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c000d22c:	83 c4 10             	add    esp,0x10
c000d22f:	83 ec 08             	sub    esp,0x8
c000d232:	53                   	push   ebx
c000d233:	50                   	push   eax
c000d234:	e8 d7 85 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	90                   	nop
c000d23d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d240:	c9                   	leave  
c000d241:	c3                   	ret    

c000d242 <sendKeyToTerminal(unsigned char)>:
c000d242:	55                   	push   ebp
c000d243:	89 e5                	mov    ebp,esp
c000d245:	83 ec 28             	sub    esp,0x28
c000d248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d24e:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d253:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d257:	83 ec 08             	sub    esp,0x8
c000d25a:	52                   	push   edx
c000d25b:	50                   	push   eax
c000d25c:	e8 55 bb ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d261:	83 c4 10             	add    esp,0x10
c000d264:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d268:	83 f8 0a             	cmp    eax,0xa
c000d26b:	74 16                	je     c000d283 <sendKeyToTerminal(unsigned char)+0x41>
c000d26d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d271:	83 f8 03             	cmp    eax,0x3
c000d274:	74 0d                	je     c000d283 <sendKeyToTerminal(unsigned char)+0x41>
c000d276:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d27a:	83 f8 1c             	cmp    eax,0x1c
c000d27d:	0f 85 97 00 00 00    	jne    c000d31a <sendKeyToTerminal(unsigned char)+0xd8>
c000d283:	fa                   	cli    
c000d284:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d289:	83 c0 01             	add    eax,0x1
c000d28c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d291:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d296:	83 c0 01             	add    eax,0x1
c000d299:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d29e:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2a6:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2b0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2b4:	74 1f                	je     c000d2d5 <sendKeyToTerminal(unsigned char)+0x93>
c000d2b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2c5:	83 ec 0c             	sub    esp,0xc
c000d2c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2cb:	e8 88 92 00 00       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c000d2d0:	83 c4 10             	add    esp,0x10
c000d2d3:	eb db                	jmp    c000d2b0 <sendKeyToTerminal(unsigned char)+0x6e>
c000d2d5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2da:	83 e8 01             	sub    eax,0x1
c000d2dd:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2e2:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2e7:	85 c0                	test   eax,eax
c000d2e9:	75 18                	jne    c000d303 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2eb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d2f0:	85 c0                	test   eax,eax
c000d2f2:	74 0f                	je     c000d303 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2f4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d2fe:	e8 3d 8d 00 00       	call   c0016040 <schedule()>
c000d303:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d308:	83 e8 01             	sub    eax,0x1
c000d30b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d310:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d315:	85 c0                	test   eax,eax
c000d317:	75 01                	jne    c000d31a <sendKeyToTerminal(unsigned char)+0xd8>
c000d319:	fb                   	sti    
c000d31a:	90                   	nop
c000d31b:	c9                   	leave  
c000d31c:	c3                   	ret    

c000d31d <sendKeyboardToken(KeyboardToken)>:
c000d31d:	55                   	push   ebp
c000d31e:	89 e5                	mov    ebp,esp
c000d320:	83 ec 18             	sub    esp,0x18
c000d323:	e8 e3 42 00 00       	call   c001160b <KeUserIOReceived()>
c000d328:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d32e:	0f b7 c0             	movzx  eax,ax
c000d331:	83 f2 01             	xor    edx,0x1
c000d334:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d33a:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d33f:	85 c0                	test   eax,eax
c000d341:	74 24                	je     c000d367 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d343:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d349:	83 ec 04             	sub    esp,0x4
c000d34c:	68 40 b4 02 c0       	push   0xc002b440
c000d351:	83 ec 08             	sub    esp,0x8
c000d354:	89 e2                	mov    edx,esp
c000d356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d359:	89 02                	mov    DWORD PTR [edx],eax
c000d35b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d35e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d362:	ff d1                	call   ecx
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d36b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d36e:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d373:	0f b6 d2             	movzx  edx,dl
c000d376:	0f b6 c0             	movzx  eax,al
c000d379:	39 c2                	cmp    edx,eax
c000d37b:	74 1c                	je     c000d399 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d37d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d380:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d385:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d38a:	0f b6 c0             	movzx  eax,al
c000d38d:	83 ec 0c             	sub    esp,0xc
c000d390:	50                   	push   eax
c000d391:	e8 6c b1 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d396:	83 c4 10             	add    esp,0x10
c000d399:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d39c:	0f b6 c0             	movzx  eax,al
c000d39f:	85 c0                	test   eax,eax
c000d3a1:	0f 84 da 00 00 00    	je     c000d481 <sendKeyboardToken(KeyboardToken)+0x164>
c000d3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3aa:	0f b7 c0             	movzx  eax,ax
c000d3ad:	3d 18 03 00 00       	cmp    eax,0x318
c000d3b2:	75 06                	jne    c000d3ba <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3b4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3bd:	0f b7 c0             	movzx  eax,ax
c000d3c0:	3d 19 03 00 00       	cmp    eax,0x319
c000d3c5:	75 06                	jne    c000d3cd <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3c7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d0:	0f b7 c0             	movzx  eax,ax
c000d3d3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d3d8:	75 06                	jne    c000d3e0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d3da:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d3e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e3:	0f b7 c0             	movzx  eax,ax
c000d3e6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d3eb:	75 06                	jne    c000d3f3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d3ed:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f6:	0f b7 c0             	movzx  eax,ax
c000d3f9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d3fe:	75 06                	jne    c000d406 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d400:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d409:	0f b7 c0             	movzx  eax,ax
c000d40c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d411:	75 06                	jne    c000d419 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d413:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41c:	0f b7 c0             	movzx  eax,ax
c000d41f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d424:	75 06                	jne    c000d42c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d426:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42f:	0f b7 c0             	movzx  eax,ax
c000d432:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d437:	75 06                	jne    c000d43f <sendKeyboardToken(KeyboardToken)+0x122>
c000d439:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d442:	0f b7 c0             	movzx  eax,ax
c000d445:	3d 20 03 00 00       	cmp    eax,0x320
c000d44a:	75 06                	jne    c000d452 <sendKeyboardToken(KeyboardToken)+0x135>
c000d44c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d455:	0f b7 c0             	movzx  eax,ax
c000d458:	3d 21 03 00 00       	cmp    eax,0x321
c000d45d:	75 06                	jne    c000d465 <sendKeyboardToken(KeyboardToken)+0x148>
c000d45f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d468:	0f b7 c0             	movzx  eax,ax
c000d46b:	3d 22 03 00 00       	cmp    eax,0x322
c000d470:	0f 85 f1 00 00 00    	jne    c000d567 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d476:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d47c:	e9 e6 00 00 00       	jmp    c000d567 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d484:	0f b7 c0             	movzx  eax,ax
c000d487:	3d 18 03 00 00       	cmp    eax,0x318
c000d48c:	75 0a                	jne    c000d498 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d48e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d494:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49b:	0f b7 c0             	movzx  eax,ax
c000d49e:	3d 19 03 00 00       	cmp    eax,0x319
c000d4a3:	75 0a                	jne    c000d4af <sendKeyboardToken(KeyboardToken)+0x192>
c000d4a5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4ab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b2:	0f b7 c0             	movzx  eax,ax
c000d4b5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4ba:	75 0a                	jne    c000d4c6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4bc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c9:	0f b7 c0             	movzx  eax,ax
c000d4cc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4d1:	75 0a                	jne    c000d4dd <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4d3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d4d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e0:	0f b7 c0             	movzx  eax,ax
c000d4e3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4e8:	75 0a                	jne    c000d4f4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d4ea:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d4f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f7:	0f b7 c0             	movzx  eax,ax
c000d4fa:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4ff:	75 0a                	jne    c000d50b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d501:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d507:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50e:	0f b7 c0             	movzx  eax,ax
c000d511:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d516:	75 0a                	jne    c000d522 <sendKeyboardToken(KeyboardToken)+0x205>
c000d518:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d51e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d525:	0f b7 c0             	movzx  eax,ax
c000d528:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d52d:	75 0a                	jne    c000d539 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d52f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d535:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53c:	0f b7 c0             	movzx  eax,ax
c000d53f:	3d 20 03 00 00       	cmp    eax,0x320
c000d544:	75 0a                	jne    c000d550 <sendKeyboardToken(KeyboardToken)+0x233>
c000d546:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d54c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d553:	0f b7 c0             	movzx  eax,ax
c000d556:	3d 21 03 00 00       	cmp    eax,0x321
c000d55b:	75 0a                	jne    c000d567 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d55d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d563:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56a:	0f b7 c0             	movzx  eax,ax
c000d56d:	3d 00 02 00 00       	cmp    eax,0x200
c000d572:	75 2f                	jne    c000d5a3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d574:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d579:	83 f0 01             	xor    eax,0x1
c000d57c:	0f b6 c0             	movzx  eax,al
c000d57f:	85 c0                	test   eax,eax
c000d581:	74 20                	je     c000d5a3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d583:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d588:	6a 01                	push   0x1
c000d58a:	6a 00                	push   0x0
c000d58c:	68 66 d1 00 c0       	push   0xc000d166
c000d591:	50                   	push   eax
c000d592:	e8 59 88 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c000d597:	83 c4 10             	add    esp,0x10
c000d59a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5a1:	eb 3a                	jmp    c000d5dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a6:	0f b7 c0             	movzx  eax,ax
c000d5a9:	3d 01 02 00 00       	cmp    eax,0x201
c000d5ae:	75 2d                	jne    c000d5dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5b0:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5b5:	83 f0 01             	xor    eax,0x1
c000d5b8:	0f b6 c0             	movzx  eax,al
c000d5bb:	85 c0                	test   eax,eax
c000d5bd:	74 1e                	je     c000d5dd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5bf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5c4:	6a 01                	push   0x1
c000d5c6:	6a 00                	push   0x0
c000d5c8:	68 d4 d1 00 c0       	push   0xc000d1d4
c000d5cd:	50                   	push   eax
c000d5ce:	e8 1d 88 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c000d5d3:	83 c4 10             	add    esp,0x10
c000d5d6:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e0:	0f b7 c0             	movzx  eax,ax
c000d5e3:	3d 25 03 00 00       	cmp    eax,0x325
c000d5e8:	75 06                	jne    c000d5f0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d5ea:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f3:	0f b7 c0             	movzx  eax,ax
c000d5f6:	3d 24 03 00 00       	cmp    eax,0x324
c000d5fb:	75 06                	jne    c000d603 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d5fd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d606:	0f b7 c0             	movzx  eax,ax
c000d609:	3d 23 03 00 00       	cmp    eax,0x323
c000d60e:	75 06                	jne    c000d616 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d610:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d619:	0f b7 c0             	movzx  eax,ax
c000d61c:	3d 26 03 00 00       	cmp    eax,0x326
c000d621:	75 06                	jne    c000d629 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d623:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d62c:	0f b7 c0             	movzx  eax,ax
c000d62f:	3d 27 03 00 00       	cmp    eax,0x327
c000d634:	75 06                	jne    c000d63c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d636:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d63c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63f:	0f b7 c0             	movzx  eax,ax
c000d642:	3d 22 03 00 00       	cmp    eax,0x322
c000d647:	75 06                	jne    c000d64f <sendKeyboardToken(KeyboardToken)+0x332>
c000d649:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d64f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d653:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d656:	83 f0 01             	xor    eax,0x1
c000d659:	0f b6 c0             	movzx  eax,al
c000d65c:	85 c0                	test   eax,eax
c000d65e:	74 7c                	je     c000d6dc <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d660:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d665:	0f b6 c0             	movzx  eax,al
c000d668:	85 c0                	test   eax,eax
c000d66a:	74 43                	je     c000d6af <sendKeyboardToken(KeyboardToken)+0x392>
c000d66c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d670:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d674:	85 c0                	test   eax,eax
c000d676:	74 2b                	je     c000d6a3 <sendKeyboardToken(KeyboardToken)+0x386>
c000d678:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d67e:	89 d0                	mov    eax,edx
c000d680:	c1 e0 02             	shl    eax,0x2
c000d683:	01 d0                	add    eax,edx
c000d685:	01 c0                	add    eax,eax
c000d687:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68f:	0f b7 c0             	movzx  eax,ax
c000d692:	8d 50 d0             	lea    edx,[eax-0x30]
c000d695:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d69a:	01 d0                	add    eax,edx
c000d69c:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6a1:	eb 71                	jmp    c000d714 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6a3:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6ad:	eb 65                	jmp    c000d714 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6af:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6b4:	85 c0                	test   eax,eax
c000d6b6:	74 18                	je     c000d6d0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6b8:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6bd:	0f b6 c0             	movzx  eax,al
c000d6c0:	83 ec 0c             	sub    esp,0xc
c000d6c3:	50                   	push   eax
c000d6c4:	e8 79 fb ff ff       	call   c000d242 <sendKeyToTerminal(unsigned char)>
c000d6c9:	83 c4 10             	add    esp,0x10
c000d6cc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6d0:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6da:	eb 38                	jmp    c000d714 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6df:	0f b7 c0             	movzx  eax,ax
c000d6e2:	3d 01 01 00 00       	cmp    eax,0x101
c000d6e7:	75 2b                	jne    c000d714 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6e9:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6ee:	85 c0                	test   eax,eax
c000d6f0:	74 18                	je     c000d70a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d6f2:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6f7:	0f b6 c0             	movzx  eax,al
c000d6fa:	83 ec 0c             	sub    esp,0xc
c000d6fd:	50                   	push   eax
c000d6fe:	e8 3f fb ff ff       	call   c000d242 <sendKeyToTerminal(unsigned char)>
c000d703:	83 c4 10             	add    esp,0x10
c000d706:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d70a:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d714:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d717:	83 f0 01             	xor    eax,0x1
c000d71a:	0f b6 c0             	movzx  eax,al
c000d71d:	85 c0                	test   eax,eax
c000d71f:	74 5a                	je     c000d77b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d721:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d724:	83 f0 01             	xor    eax,0x1
c000d727:	0f b6 c0             	movzx  eax,al
c000d72a:	85 c0                	test   eax,eax
c000d72c:	74 4d                	je     c000d77b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d72e:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d733:	83 f0 01             	xor    eax,0x1
c000d736:	0f b6 c0             	movzx  eax,al
c000d739:	85 c0                	test   eax,eax
c000d73b:	74 3e                	je     c000d77b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d740:	0f b7 c0             	movzx  eax,ax
c000d743:	83 f8 1f             	cmp    eax,0x1f
c000d746:	76 0b                	jbe    c000d753 <sendKeyboardToken(KeyboardToken)+0x436>
c000d748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d74b:	0f b7 c0             	movzx  eax,ax
c000d74e:	83 f8 7e             	cmp    eax,0x7e
c000d751:	76 16                	jbe    c000d769 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d756:	0f b7 c0             	movzx  eax,ax
c000d759:	83 f8 0a             	cmp    eax,0xa
c000d75c:	74 0b                	je     c000d769 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d761:	0f b7 c0             	movzx  eax,ax
c000d764:	83 f8 08             	cmp    eax,0x8
c000d767:	75 12                	jne    c000d77b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76c:	0f b6 c0             	movzx  eax,al
c000d76f:	83 ec 0c             	sub    esp,0xc
c000d772:	50                   	push   eax
c000d773:	e8 ca fa ff ff       	call   c000d242 <sendKeyToTerminal(unsigned char)>
c000d778:	83 c4 10             	add    esp,0x10
c000d77b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d77e:	83 f0 01             	xor    eax,0x1
c000d781:	0f b6 c0             	movzx  eax,al
c000d784:	85 c0                	test   eax,eax
c000d786:	74 5d                	je     c000d7e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d788:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d78b:	83 f0 01             	xor    eax,0x1
c000d78e:	0f b6 c0             	movzx  eax,al
c000d791:	85 c0                	test   eax,eax
c000d793:	74 50                	je     c000d7e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d795:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d79a:	0f b6 c0             	movzx  eax,al
c000d79d:	85 c0                	test   eax,eax
c000d79f:	74 44                	je     c000d7e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a4:	0f b7 c0             	movzx  eax,ax
c000d7a7:	83 f8 3f             	cmp    eax,0x3f
c000d7aa:	76 39                	jbe    c000d7e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7af:	0f b7 c0             	movzx  eax,ax
c000d7b2:	83 f8 7f             	cmp    eax,0x7f
c000d7b5:	77 2e                	ja     c000d7e5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ba:	88 c2                	mov    dl,al
c000d7bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7bf:	0f b7 c0             	movzx  eax,ax
c000d7c2:	83 f8 5f             	cmp    eax,0x5f
c000d7c5:	76 04                	jbe    c000d7cb <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7c7:	b0 20                	mov    al,0x20
c000d7c9:	eb 02                	jmp    c000d7cd <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7cb:	b0 00                	mov    al,0x0
c000d7cd:	89 d1                	mov    ecx,edx
c000d7cf:	29 c1                	sub    ecx,eax
c000d7d1:	89 c8                	mov    eax,ecx
c000d7d3:	83 e8 40             	sub    eax,0x40
c000d7d6:	0f b6 c0             	movzx  eax,al
c000d7d9:	83 ec 0c             	sub    esp,0xc
c000d7dc:	50                   	push   eax
c000d7dd:	e8 60 fa ff ff       	call   c000d242 <sendKeyToTerminal(unsigned char)>
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e8:	0f b7 c0             	movzx  eax,ax
c000d7eb:	3d 00 03 00 00       	cmp    eax,0x300
c000d7f0:	75 12                	jne    c000d804 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7f2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7f5:	83 f0 01             	xor    eax,0x1
c000d7f8:	0f b6 c0             	movzx  eax,al
c000d7fb:	85 c0                	test   eax,eax
c000d7fd:	74 05                	je     c000d804 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7ff:	e8 ff ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d804:	90                   	nop
c000d805:	c9                   	leave  
c000d806:	c3                   	ret    

c000d807 <clearInternalKeybuffer(VgaText*)>:
c000d807:	55                   	push   ebp
c000d808:	89 e5                	mov    ebp,esp
c000d80a:	83 ec 08             	sub    esp,0x8
c000d80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d810:	05 02 01 00 00       	add    eax,0x102
c000d815:	83 ec 0c             	sub    esp,0xc
c000d818:	50                   	push   eax
c000d819:	e8 52 2d ff ff       	call   c0000570 <strlen>
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d824:	81 c2 02 01 00 00    	add    edx,0x102
c000d82a:	83 ec 04             	sub    esp,0x4
c000d82d:	50                   	push   eax
c000d82e:	6a 00                	push   0x0
c000d830:	52                   	push   edx
c000d831:	e8 ba 2c ff ff       	call   c00004f0 <memset>
c000d836:	83 c4 10             	add    esp,0x10
c000d839:	90                   	nop
c000d83a:	c9                   	leave  
c000d83b:	c3                   	ret    

c000d83c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d83c:	55                   	push   ebp
c000d83d:	89 e5                	mov    ebp,esp
c000d83f:	83 ec 18             	sub    esp,0x18
c000d842:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d847:	85 c0                	test   eax,eax
c000d849:	74 2a                	je     c000d875 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d84b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d851:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d857:	83 ec 04             	sub    esp,0x4
c000d85a:	68 40 b4 02 c0       	push   0xc002b440
c000d85f:	83 ec 08             	sub    esp,0x8
c000d862:	89 e2                	mov    edx,esp
c000d864:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d867:	89 02                	mov    DWORD PTR [edx],eax
c000d869:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d86c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d870:	ff d1                	call   ecx
c000d872:	83 c4 10             	add    esp,0x10
c000d875:	fb                   	sti    
c000d876:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d87d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d881:	0f 84 0d 01 00 00    	je     c000d994 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d890:	0f be c0             	movsx  eax,al
c000d893:	85 c0                	test   eax,eax
c000d895:	75 2c                	jne    c000d8c3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d897:	fa                   	cli    
c000d898:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d89d:	83 c0 01             	add    eax,0x1
c000d8a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8a5:	e8 96 87 00 00       	call   c0016040 <schedule()>
c000d8aa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8af:	83 e8 01             	sub    eax,0x1
c000d8b2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8b7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8bc:	85 c0                	test   eax,eax
c000d8be:	75 c7                	jne    c000d887 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8c0:	fb                   	sti    
c000d8c1:	eb c4                	jmp    c000d887 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8c6:	8d 50 01             	lea    edx,[eax+0x1]
c000d8c9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8cf:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d8d5:	88 10                	mov    BYTE PTR [eax],dl
c000d8d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8da:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8e0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d8e3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d8e7:	83 f8 03             	cmp    eax,0x3
c000d8ea:	75 1e                	jne    c000d90a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d8ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d8f6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d8fc:	83 ec 08             	sub    esp,0x8
c000d8ff:	6a 02                	push   0x2
c000d901:	50                   	push   eax
c000d902:	e8 57 41 00 00       	call   c0011a5e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d90e:	83 f8 1c             	cmp    eax,0x1c
c000d911:	75 1e                	jne    c000d931 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d913:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d918:	8b 00                	mov    eax,DWORD PTR [eax]
c000d91a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d91d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d923:	83 ec 08             	sub    esp,0x8
c000d926:	6a 09                	push   0x9
c000d928:	50                   	push   eax
c000d929:	e8 30 41 00 00       	call   c0011a5e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d934:	05 02 01 00 00       	add    eax,0x102
c000d939:	83 ec 0c             	sub    esp,0xc
c000d93c:	50                   	push   eax
c000d93d:	e8 2e 2c ff ff       	call   c0000570 <strlen>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d948:	81 c2 02 01 00 00    	add    edx,0x102
c000d94e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d951:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d954:	81 c2 02 01 00 00    	add    edx,0x102
c000d95a:	83 ec 04             	sub    esp,0x4
c000d95d:	50                   	push   eax
c000d95e:	51                   	push   ecx
c000d95f:	52                   	push   edx
c000d960:	e8 6b 2a ff ff       	call   c00003d0 <memmove>
c000d965:	83 c4 10             	add    esp,0x10
c000d968:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d96c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d970:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d974:	83 f8 0a             	cmp    eax,0xa
c000d977:	74 16                	je     c000d98f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d979:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97d:	83 f8 03             	cmp    eax,0x3
c000d980:	74 0d                	je     c000d98f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d982:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d986:	83 f8 1c             	cmp    eax,0x1c
c000d989:	0f 85 ee fe ff ff    	jne    c000d87d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d98f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d992:	eb 03                	jmp    c000d997 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d994:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d997:	c9                   	leave  
c000d998:	c3                   	ret    
c000d999:	90                   	nop

c000d99a <Keyboard::Keyboard(char const*)>:
c000d99a:	83 ec 0c             	sub    esp,0xc
c000d99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a1:	83 ec 08             	sub    esp,0x8
c000d9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a8:	50                   	push   eax
c000d9a9:	e8 4c f1 ff ff       	call   c000cafa <Device::Device(char const*)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c000d9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ba:	89 10                	mov    DWORD PTR [eax],edx
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9ca:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9d1:	90                   	nop
c000d9d2:	83 c4 0c             	add    esp,0xc
c000d9d5:	c3                   	ret    

c000d9d6 <Keyboard::~Keyboard()>:
c000d9d6:	83 ec 0c             	sub    esp,0xc
c000d9d9:	ba fc 1b 02 c0       	mov    edx,0xc0021bfc
c000d9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e2:	89 10                	mov    DWORD PTR [eax],edx
c000d9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e8:	83 ec 0c             	sub    esp,0xc
c000d9eb:	50                   	push   eax
c000d9ec:	e8 73 ee ff ff       	call   c000c864 <Device::~Device()>
c000d9f1:	83 c4 10             	add    esp,0x10
c000d9f4:	90                   	nop
c000d9f5:	83 c4 0c             	add    esp,0xc
c000d9f8:	c3                   	ret    
c000d9f9:	90                   	nop

c000d9fa <Keyboard::~Keyboard()>:
c000d9fa:	83 ec 0c             	sub    esp,0xc
c000d9fd:	83 ec 0c             	sub    esp,0xc
c000da00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da04:	e8 cd ff ff ff       	call   c000d9d6 <Keyboard::~Keyboard()>
c000da09:	83 c4 10             	add    esp,0x10
c000da0c:	83 ec 08             	sub    esp,0x8
c000da0f:	68 5c 01 00 00       	push   0x15c
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	e8 fb cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da1d:	83 c4 10             	add    esp,0x10
c000da20:	83 c4 0c             	add    esp,0xc
c000da23:	c3                   	ret    

c000da24 <LogicalDisk::close(int, int, void*)>:
c000da24:	83 c8 ff             	or     eax,0xffffffff
c000da27:	c3                   	ret    

c000da28 <LogicalDisk::~LogicalDisk()>:
c000da28:	83 ec 0c             	sub    esp,0xc
c000da2b:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000da30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da34:	89 10                	mov    DWORD PTR [eax],edx
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	83 ec 0c             	sub    esp,0xc
c000da3d:	50                   	push   eax
c000da3e:	e8 21 ee ff ff       	call   c000c864 <Device::~Device()>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	90                   	nop
c000da47:	83 c4 0c             	add    esp,0xc
c000da4a:	c3                   	ret    
c000da4b:	90                   	nop

c000da4c <LogicalDisk::~LogicalDisk()>:
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	83 ec 0c             	sub    esp,0xc
c000da52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da56:	e8 cd ff ff ff       	call   c000da28 <LogicalDisk::~LogicalDisk()>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	83 ec 08             	sub    esp,0x8
c000da61:	68 78 01 00 00       	push   0x178
c000da66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6a:	e8 a9 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	83 c4 0c             	add    esp,0xc
c000da75:	c3                   	ret    

c000da76 <LogicalDisk::open(int, int, void*)>:
c000da76:	83 ec 18             	sub    esp,0x18
c000da79:	68 28 1c 02 c0       	push   0xc0021c28
c000da7e:	e8 38 3b 00 00       	call   c00115bb <KePanic(char const*)>
c000da83:	83 c8 ff             	or     eax,0xffffffff
c000da86:	83 c4 1c             	add    esp,0x1c
c000da89:	c3                   	ret    

c000da8a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000da8a:	53                   	push   ebx
c000da8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da97:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000da9d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000daa3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000daa9:	77 10                	ja     c000dabb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000daab:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dab1:	89 d3                	mov    ebx,edx
c000dab3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dab9:	72 05                	jb     c000dac0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dabb:	83 c8 ff             	or     eax,0xffffffff
c000dabe:	89 c2                	mov    edx,eax
c000dac0:	5b                   	pop    ebx
c000dac1:	c3                   	ret    

c000dac2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dac2:	56                   	push   esi
c000dac3:	83 c8 ff             	or     eax,0xffffffff
c000dac6:	53                   	push   ebx
c000dac7:	89 c2                	mov    edx,eax
c000dac9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dacd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dad1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dad5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dadb:	77 27                	ja     c000db04 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dadd:	89 d8                	mov    eax,ebx
c000dadf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dae5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000daeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000daf0:	89 c2                	mov    edx,eax
c000daf2:	73 10                	jae    c000db04 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000daf4:	89 c8                	mov    eax,ecx
c000daf6:	89 da                	mov    edx,ebx
c000daf8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dafe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db04:	5b                   	pop    ebx
c000db05:	5e                   	pop    esi
c000db06:	c3                   	ret    
c000db07:	90                   	nop

c000db08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db08:	83 ec 1c             	sub    esp,0x1c
c000db0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000db22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2e:	83 ec 08             	sub    esp,0x8
c000db31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db35:	50                   	push   eax
c000db36:	e8 bf ef ff ff       	call   c000cafa <Device::Device(char const*)>
c000db3b:	83 c4 10             	add    esp,0x10
c000db3e:	ba 74 1c 02 c0       	mov    edx,0xc0021c74
c000db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db47:	89 10                	mov    DWORD PTR [eax],edx
c000db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db4d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000db78:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db84:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000db8a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000db90:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000db97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000db9b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dba1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dbaf:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dbc3:	90                   	nop
c000dbc4:	83 c4 1c             	add    esp,0x1c
c000dbc7:	c3                   	ret    

c000dbc8 <LogicalDisk::assignDriveLetter()>:
c000dbc8:	55                   	push   ebp
c000dbc9:	57                   	push   edi
c000dbca:	56                   	push   esi
c000dbcb:	53                   	push   ebx
c000dbcc:	83 ec 14             	sub    esp,0x14
c000dbcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbd3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dbd9:	b0 41                	mov    al,0x41
c000dbdb:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dbe1:	84 d2                	test   dl,dl
c000dbe3:	75 02                	jne    c000dbe7 <LogicalDisk::assignDriveLetter()+0x1f>
c000dbe5:	b0 43                	mov    al,0x43
c000dbe7:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dbed:	0f b6 ca             	movzx  ecx,dl
c000dbf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dbf4:	0f be e8             	movsx  ebp,al
c000dbf7:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dbfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc01:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc05:	3c 43                	cmp    al,0x43
c000dc07:	75 10                	jne    c000dc19 <LogicalDisk::assignDriveLetter()+0x51>
c000dc09:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc10:	75 5a                	jne    c000dc6c <LogicalDisk::assignDriveLetter()+0xa4>
c000dc12:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc17:	75 53                	jne    c000dc6c <LogicalDisk::assignDriveLetter()+0xa4>
c000dc19:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc1c:	ba 01 00 00 00       	mov    edx,0x1
c000dc21:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc24:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc27:	d3 e2                	shl    edx,cl
c000dc29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc2d:	89 d7                	mov    edi,edx
c000dc2f:	89 d6                	mov    esi,edx
c000dc31:	c1 ff 1f             	sar    edi,0x1f
c000dc34:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc38:	21 f9                	and    ecx,edi
c000dc3a:	09 d1                	or     ecx,edx
c000dc3c:	75 2e                	jne    c000dc6c <LogicalDisk::assignDriveLetter()+0xa4>
c000dc3e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc46:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc4c:	09 f2                	or     edx,esi
c000dc4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc51:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc57:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc62:	09 fa                	or     edx,edi
c000dc64:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc6a:	eb 0d                	jmp    c000dc79 <LogicalDisk::assignDriveLetter()+0xb1>
c000dc6c:	8d 50 01             	lea    edx,[eax+0x1]
c000dc6f:	45                   	inc    ebp
c000dc70:	88 d0                	mov    al,dl
c000dc72:	80 fa 5b             	cmp    dl,0x5b
c000dc75:	75 8e                	jne    c000dc05 <LogicalDisk::assignDriveLetter()+0x3d>
c000dc77:	31 c0                	xor    eax,eax
c000dc79:	83 c4 14             	add    esp,0x14
c000dc7c:	5b                   	pop    ebx
c000dc7d:	5e                   	pop    esi
c000dc7e:	5f                   	pop    edi
c000dc7f:	5d                   	pop    ebp
c000dc80:	c3                   	ret    
c000dc81:	90                   	nop

c000dc82 <LogicalDisk::mount()>:
c000dc82:	56                   	push   esi
c000dc83:	53                   	push   ebx
c000dc84:	53                   	push   ebx
c000dc85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc89:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dc8f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dc99:	85 db                	test   ebx,ebx
c000dc9b:	74 27                	je     c000dcc4 <LogicalDisk::mount()+0x42>
c000dc9d:	51                   	push   ecx
c000dc9e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dca5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dca7:	83 e8 41             	sub    eax,0x41
c000dcaa:	50                   	push   eax
c000dcab:	56                   	push   esi
c000dcac:	53                   	push   ebx
c000dcad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	84 c0                	test   al,al
c000dcb5:	74 08                	je     c000dcbf <LogicalDisk::mount()+0x3d>
c000dcb7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dcbd:	eb 07                	jmp    c000dcc6 <LogicalDisk::mount()+0x44>
c000dcbf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dcc2:	eb d5                	jmp    c000dc99 <LogicalDisk::mount()+0x17>
c000dcc4:	31 c0                	xor    eax,eax
c000dcc6:	5a                   	pop    edx
c000dcc7:	5b                   	pop    ebx
c000dcc8:	5e                   	pop    esi
c000dcc9:	c3                   	ret    

c000dcca <LogicalDisk::unmount()>:
c000dcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcce:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcd8:	c3                   	ret    
c000dcd9:	90                   	nop

c000dcda <LogicalDisk::eject()>:
c000dcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcde:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dce4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dce6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcea:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dced:	90                   	nop

c000dcee <LogicalDisk::unassignDriveLetter()>:
c000dcee:	57                   	push   edi
c000dcef:	56                   	push   esi
c000dcf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dcf4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dcfb:	85 c9                	test   ecx,ecx
c000dcfd:	75 0f                	jne    c000dd0e <LogicalDisk::unassignDriveLetter()+0x20>
c000dcff:	c7 44 24 0c 4c 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c4c
c000dd07:	5e                   	pop    esi
c000dd08:	5f                   	pop    edi
c000dd09:	e9 ad 38 00 00       	jmp    c00115bb <KePanic(char const*)>
c000dd0e:	83 e9 41             	sub    ecx,0x41
c000dd11:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd18:	b8 01 00 00 00       	mov    eax,0x1
c000dd1d:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd28:	d3 e0                	shl    eax,cl
c000dd2a:	89 c7                	mov    edi,eax
c000dd2c:	f7 d0                	not    eax
c000dd2e:	c1 ff 1f             	sar    edi,0x1f
c000dd31:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd37:	89 fe                	mov    esi,edi
c000dd39:	f7 d6                	not    esi
c000dd3b:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd41:	5e                   	pop    esi
c000dd42:	5f                   	pop    edi
c000dd43:	c3                   	ret    

c000dd44 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd44:	57                   	push   edi
c000dd45:	56                   	push   esi
c000dd46:	53                   	push   ebx
c000dd47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd57:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd5d:	77 41                	ja     c000dda0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd5f:	99                   	cdq    
c000dd60:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd66:	01 c8                	add    eax,ecx
c000dd68:	11 da                	adc    edx,ebx
c000dd6a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd70:	19 d7                	sbb    edi,edx
c000dd72:	72 33                	jb     c000dda7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dd74:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dd7a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dd80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dd84:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dd88:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dd8e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dd94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd98:	5b                   	pop    ebx
c000dd99:	5e                   	pop    esi
c000dd9a:	5f                   	pop    edi
c000dd9b:	e9 c6 0a 00 00       	jmp    c000e866 <VCache::read(unsigned long long, int, void*)>
c000dda0:	b8 05 00 00 00       	mov    eax,0x5
c000dda5:	eb 05                	jmp    c000ddac <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dda7:	b8 07 00 00 00       	mov    eax,0x7
c000ddac:	5b                   	pop    ebx
c000ddad:	5e                   	pop    esi
c000ddae:	5f                   	pop    edi
c000ddaf:	c3                   	ret    

c000ddb0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ddb0:	57                   	push   edi
c000ddb1:	56                   	push   esi
c000ddb2:	53                   	push   ebx
c000ddb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddbb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddc3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddc9:	77 41                	ja     c000de0c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddcb:	99                   	cdq    
c000ddcc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddd2:	01 c8                	add    eax,ecx
c000ddd4:	11 da                	adc    edx,ebx
c000ddd6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dddc:	19 d7                	sbb    edi,edx
c000ddde:	72 33                	jb     c000de13 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dde0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dde6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddf0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddf4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de04:	5b                   	pop    ebx
c000de05:	5e                   	pop    esi
c000de06:	5f                   	pop    edi
c000de07:	e9 6c 09 00 00       	jmp    c000e778 <VCache::write(unsigned long long, int, void*)>
c000de0c:	b8 05 00 00 00       	mov    eax,0x5
c000de11:	eb 05                	jmp    c000de18 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de13:	b8 07 00 00 00       	mov    eax,0x7
c000de18:	5b                   	pop    ebx
c000de19:	5e                   	pop    esi
c000de1a:	5f                   	pop    edi
c000de1b:	c3                   	ret    

c000de1c <Mouse::Mouse(char const*)>:
c000de1c:	83 ec 0c             	sub    esp,0xc
c000de1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de23:	83 ec 08             	sub    esp,0x8
c000de26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2a:	50                   	push   eax
c000de2b:	e8 ca ec ff ff       	call   c000cafa <Device::Device(char const*)>
c000de30:	83 c4 10             	add    esp,0x10
c000de33:	ba a0 1c 02 c0       	mov    edx,0xc0021ca0
c000de38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3c:	89 10                	mov    DWORD PTR [eax],edx
c000de3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de42:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de4c:	90                   	nop
c000de4d:	83 c4 0c             	add    esp,0xc
c000de50:	c3                   	ret    
c000de51:	90                   	nop
c000de52:	66 90                	xchg   ax,ax

c000de54 <Mouse::~Mouse()>:
c000de54:	83 ec 0c             	sub    esp,0xc
c000de57:	ba a0 1c 02 c0       	mov    edx,0xc0021ca0
c000de5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de60:	89 10                	mov    DWORD PTR [eax],edx
c000de62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de66:	83 ec 0c             	sub    esp,0xc
c000de69:	50                   	push   eax
c000de6a:	e8 f5 e9 ff ff       	call   c000c864 <Device::~Device()>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	90                   	nop
c000de73:	83 c4 0c             	add    esp,0xc
c000de76:	c3                   	ret    
c000de77:	90                   	nop

c000de78 <Mouse::~Mouse()>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de82:	e8 cd ff ff ff       	call   c000de54 <Mouse::~Mouse()>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	83 ec 08             	sub    esp,0x8
c000de8d:	68 58 01 00 00       	push   0x158
c000de92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de96:	e8 7d c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	83 c4 0c             	add    esp,0xc
c000dea1:	c3                   	ret    

c000dea2 <NIC::getMAC()>:
c000dea2:	31 c0                	xor    eax,eax
c000dea4:	31 d2                	xor    edx,edx
c000dea6:	c3                   	ret    
c000dea7:	90                   	nop

c000dea8 <NIC::write(int, unsigned char*, int*)>:
c000dea8:	b8 01 00 00 00       	mov    eax,0x1
c000dead:	c3                   	ret    

c000deae <NIC::NIC(char const*)>:
c000deae:	83 ec 0c             	sub    esp,0xc
c000deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb5:	83 ec 08             	sub    esp,0x8
c000deb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000debc:	50                   	push   eax
c000debd:	e8 38 ec ff ff       	call   c000cafa <Device::Device(char const*)>
c000dec2:	83 c4 10             	add    esp,0x10
c000dec5:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c000deca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dece:	89 10                	mov    DWORD PTR [eax],edx
c000ded0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dede:	90                   	nop
c000dedf:	83 c4 0c             	add    esp,0xc
c000dee2:	c3                   	ret    
c000dee3:	90                   	nop

c000dee4 <NIC::~NIC()>:
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c000deec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def0:	89 10                	mov    DWORD PTR [eax],edx
c000def2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	50                   	push   eax
c000defa:	e8 65 e9 ff ff       	call   c000c864 <Device::~Device()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	90                   	nop
c000df03:	83 c4 0c             	add    esp,0xc
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <NIC::~NIC()>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df12:	e8 cd ff ff ff       	call   c000dee4 <NIC::~NIC()>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	83 ec 08             	sub    esp,0x8
c000df1d:	68 58 01 00 00       	push   0x158
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 ed c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 c4 0c             	add    esp,0xc
c000df31:	c3                   	ret    

c000df32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df32:	55                   	push   ebp
c000df33:	57                   	push   edi
c000df34:	56                   	push   esi
c000df35:	53                   	push   ebx
c000df36:	81 ec 28 01 00 00    	sub    esp,0x128
c000df3c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000df43:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000df4a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000df51:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000df58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df60:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df67:	e8 8a ec ff ff       	call   c000cbf6 <Device::getName()>
c000df6c:	5a                   	pop    edx
c000df6d:	59                   	pop    ecx
c000df6e:	50                   	push   eax
c000df6f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df73:	55                   	push   ebp
c000df74:	e8 c7 26 ff ff       	call   c0000640 <strcpy>
c000df79:	5b                   	pop    ebx
c000df7a:	58                   	pop    eax
c000df7b:	68 f8 1c 02 c0       	push   0xc0021cf8
c000df80:	55                   	push   ebp
c000df81:	e8 ba 28 ff ff       	call   c0000840 <strcat>
c000df86:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000df8d:	e8 24 9b ff ff       	call   c0007ab6 <malloc>
c000df92:	83 c4 0c             	add    esp,0xc
c000df95:	89 c3                	mov    ebx,eax
c000df97:	57                   	push   edi
c000df98:	56                   	push   esi
c000df99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfa1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dfa8:	55                   	push   ebp
c000dfa9:	50                   	push   eax
c000dfaa:	e8 59 fb ff ff       	call   c000db08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfaf:	83 c4 14             	add    esp,0x14
c000dfb2:	53                   	push   ebx
c000dfb3:	e8 10 fc ff ff       	call   c000dbc8 <LogicalDisk::assignDriveLetter()>
c000dfb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfbb:	e8 c2 fc ff ff       	call   c000dc82 <LogicalDisk::mount()>
c000dfc0:	58                   	pop    eax
c000dfc1:	5a                   	pop    edx
c000dfc2:	53                   	push   ebx
c000dfc3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfca:	e8 93 e9 ff ff       	call   c000c962 <Device::addChild(Device*)>
c000dfcf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dfd5:	5b                   	pop    ebx
c000dfd6:	5e                   	pop    esi
c000dfd7:	5f                   	pop    edi
c000dfd8:	5d                   	pop    ebp
c000dfd9:	c3                   	ret    

c000dfda <createPartitionsForDisk(PhysicalDisk*)>:
c000dfda:	55                   	push   ebp
c000dfdb:	57                   	push   edi
c000dfdc:	56                   	push   esi
c000dfdd:	53                   	push   ebx
c000dfde:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dfe4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dfeb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dff1:	3d 00 02 00 00       	cmp    eax,0x200
c000dff6:	74 27                	je     c000e01f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dff8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dffe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e004:	83 ec 10             	sub    esp,0x10
c000e007:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e00b:	99                   	cdq    
c000e00c:	c1 e6 0a             	shl    esi,0xa
c000e00f:	52                   	push   edx
c000e010:	89 fd                	mov    ebp,edi
c000e012:	50                   	push   eax
c000e013:	55                   	push   ebp
c000e014:	56                   	push   esi
c000e015:	e8 96 16 01 00       	call   c001f6b0 <__udivdi3>
c000e01a:	e9 b9 00 00 00       	jmp    c000e0d8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e01f:	83 ec 0c             	sub    esp,0xc
c000e022:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e024:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e028:	56                   	push   esi
c000e029:	6a 01                	push   0x1
c000e02b:	6a 00                	push   0x0
c000e02d:	6a 00                	push   0x0
c000e02f:	53                   	push   ebx
c000e030:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e033:	83 c4 20             	add    esp,0x20
c000e036:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e03e:	75 0a                	jne    c000e04a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e040:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e048:	74 2c                	je     c000e076 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e04a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e050:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e056:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e05c:	83 ec 10             	sub    esp,0x10
c000e05f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e063:	89 f7                	mov    edi,esi
c000e065:	c1 e0 0a             	shl    eax,0xa
c000e068:	c1 ff 1f             	sar    edi,0x1f
c000e06b:	57                   	push   edi
c000e06c:	56                   	push   esi
c000e06d:	52                   	push   edx
c000e06e:	50                   	push   eax
c000e06f:	e8 3c 16 01 00       	call   c001f6b0 <__udivdi3>
c000e074:	eb 62                	jmp    c000e0d8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e076:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e07d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e084:	89 cf                	mov    edi,ecx
c000e086:	83 e2 7f             	and    edx,0x7f
c000e089:	83 e7 7f             	and    edi,0x7f
c000e08c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e093:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e096:	83 e0 7f             	and    eax,0x7f
c000e099:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e09c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0a3:	83 e0 7f             	and    eax,0x7f
c000e0a6:	01 d0                	add    eax,edx
c000e0a8:	89 c5                	mov    ebp,eax
c000e0aa:	84 c0                	test   al,al
c000e0ac:	74 41                	je     c000e0ef <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0c0:	83 ec 10             	sub    esp,0x10
c000e0c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0c7:	89 f7                	mov    edi,esi
c000e0c9:	c1 e0 0a             	shl    eax,0xa
c000e0cc:	c1 ff 1f             	sar    edi,0x1f
c000e0cf:	57                   	push   edi
c000e0d0:	56                   	push   esi
c000e0d1:	52                   	push   edx
c000e0d2:	50                   	push   eax
c000e0d3:	e8 d8 15 01 00       	call   c001f6b0 <__udivdi3>
c000e0d8:	83 c4 14             	add    esp,0x14
c000e0db:	52                   	push   edx
c000e0dc:	50                   	push   eax
c000e0dd:	6a 00                	push   0x0
c000e0df:	6a 00                	push   0x0
c000e0e1:	53                   	push   ebx
c000e0e2:	e8 4b fe ff ff       	call   c000df32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0e7:	83 c4 20             	add    esp,0x20
c000e0ea:	e9 73 01 00 00       	jmp    c000e262 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e0ef:	89 f0                	mov    eax,esi
c000e0f1:	31 c9                	xor    ecx,ecx
c000e0f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e0fa:	75 02                	jne    c000e0fe <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e0fc:	89 cd                	mov    ebp,ecx
c000e0fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e105:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e10c:	c1 e2 08             	shl    edx,0x8
c000e10f:	c1 e6 10             	shl    esi,0x10
c000e112:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e11a:	09 f2                	or     edx,esi
c000e11c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e124:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e12b:	83 c0 10             	add    eax,0x10
c000e12e:	09 f2                	or     edx,esi
c000e130:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e137:	c1 e6 18             	shl    esi,0x18
c000e13a:	09 f2                	or     edx,esi
c000e13c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e143:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e147:	c1 e6 10             	shl    esi,0x10
c000e14a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e151:	c1 e2 08             	shl    edx,0x8
c000e154:	09 f2                	or     edx,esi
c000e156:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e15d:	09 f2                	or     edx,esi
c000e15f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e166:	c1 e6 18             	shl    esi,0x18
c000e169:	09 f2                	or     edx,esi
c000e16b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e16f:	41                   	inc    ecx
c000e170:	83 f9 04             	cmp    ecx,0x4
c000e173:	0f 85 7a ff ff ff    	jne    c000e0f3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e17d:	83 f0 01             	xor    eax,0x1
c000e180:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e184:	75 4f                	jne    c000e1d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e18a:	83 f0 01             	xor    eax,0x1
c000e18d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e191:	75 42                	jne    c000e1d5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e193:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e19b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1a3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1a9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1af:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1b9:	89 f7                	mov    edi,esi
c000e1bb:	c1 e0 0a             	shl    eax,0xa
c000e1be:	c1 ff 1f             	sar    edi,0x1f
c000e1c1:	57                   	push   edi
c000e1c2:	56                   	push   esi
c000e1c3:	52                   	push   edx
c000e1c4:	50                   	push   eax
c000e1c5:	e8 e6 14 01 00       	call   c001f6b0 <__udivdi3>
c000e1ca:	83 c4 10             	add    esp,0x10
c000e1cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e1d5:	89 e8                	mov    eax,ebp
c000e1d7:	0f b6 e8             	movzx  ebp,al
c000e1da:	85 ed                	test   ebp,ebp
c000e1dc:	74 50                	je     c000e22e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e1de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e1e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e1ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1f6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e1fa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e1fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e202:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e206:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e20a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e20e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e212:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e216:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e21a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e21e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e222:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e226:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e22a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e22e:	31 ed                	xor    ebp,ebp
c000e230:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e234:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e238:	89 f8                	mov    eax,edi
c000e23a:	09 f0                	or     eax,esi
c000e23c:	74 1e                	je     c000e25c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e23e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e242:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e246:	89 d1                	mov    ecx,edx
c000e248:	09 c1                	or     ecx,eax
c000e24a:	74 10                	je     c000e25c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e24c:	83 ec 0c             	sub    esp,0xc
c000e24f:	57                   	push   edi
c000e250:	56                   	push   esi
c000e251:	52                   	push   edx
c000e252:	50                   	push   eax
c000e253:	53                   	push   ebx
c000e254:	e8 d9 fc ff ff       	call   c000df32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e259:	83 c4 20             	add    esp,0x20
c000e25c:	45                   	inc    ebp
c000e25d:	83 fd 04             	cmp    ebp,0x4
c000e260:	75 ce                	jne    c000e230 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e262:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e268:	5b                   	pop    ebx
c000e269:	5e                   	pop    esi
c000e26a:	5f                   	pop    edi
c000e26b:	5d                   	pop    ebp
c000e26c:	c3                   	ret    
c000e26d:	66 90                	xchg   ax,ax
c000e26f:	90                   	nop

c000e270 <Serial::Serial(char const*)>:
c000e270:	83 ec 0c             	sub    esp,0xc
c000e273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e277:	83 ec 08             	sub    esp,0x8
c000e27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27e:	50                   	push   eax
c000e27f:	e8 76 e8 ff ff       	call   c000cafa <Device::Device(char const*)>
c000e284:	83 c4 10             	add    esp,0x10
c000e287:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000e28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e290:	89 10                	mov    DWORD PTR [eax],edx
c000e292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e296:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2a0:	90                   	nop
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop
c000e2a6:	66 90                	xchg   ax,ax

c000e2a8 <Serial::~Serial()>:
c000e2a8:	83 ec 0c             	sub    esp,0xc
c000e2ab:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c000e2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b4:	89 10                	mov    DWORD PTR [eax],edx
c000e2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ba:	83 ec 0c             	sub    esp,0xc
c000e2bd:	50                   	push   eax
c000e2be:	e8 a1 e5 ff ff       	call   c000c864 <Device::~Device()>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	90                   	nop
c000e2c7:	83 c4 0c             	add    esp,0xc
c000e2ca:	c3                   	ret    
c000e2cb:	90                   	nop

c000e2cc <Serial::~Serial()>:
c000e2cc:	83 ec 0c             	sub    esp,0xc
c000e2cf:	83 ec 0c             	sub    esp,0xc
c000e2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d6:	e8 cd ff ff ff       	call   c000e2a8 <Serial::~Serial()>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	83 ec 08             	sub    esp,0x8
c000e2e1:	68 58 01 00 00       	push   0x158
c000e2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ea:	e8 29 c5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	83 c4 0c             	add    esp,0xc
c000e2f5:	c3                   	ret    
c000e2f6:	66 90                	xchg   ax,ax

c000e2f8 <Timer::Timer(char const*)>:
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2ff:	83 ec 08             	sub    esp,0x8
c000e302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e306:	50                   	push   eax
c000e307:	e8 ee e7 ff ff       	call   c000cafa <Device::Device(char const*)>
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c000e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e318:	89 10                	mov    DWORD PTR [eax],edx
c000e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e328:	90                   	nop
c000e329:	83 c4 0c             	add    esp,0xc
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop
c000e32e:	66 90                	xchg   ax,ax

c000e330 <Timer::~Timer()>:
c000e330:	83 ec 0c             	sub    esp,0xc
c000e333:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c000e338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33c:	89 10                	mov    DWORD PTR [eax],edx
c000e33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e342:	83 ec 0c             	sub    esp,0xc
c000e345:	50                   	push   eax
c000e346:	e8 19 e5 ff ff       	call   c000c864 <Device::~Device()>
c000e34b:	83 c4 10             	add    esp,0x10
c000e34e:	90                   	nop
c000e34f:	83 c4 0c             	add    esp,0xc
c000e352:	c3                   	ret    
c000e353:	90                   	nop

c000e354 <Timer::~Timer()>:
c000e354:	83 ec 0c             	sub    esp,0xc
c000e357:	83 ec 0c             	sub    esp,0xc
c000e35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35e:	e8 cd ff ff ff       	call   c000e330 <Timer::~Timer()>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	83 ec 08             	sub    esp,0x8
c000e369:	68 5c 01 00 00       	push   0x15c
c000e36e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e372:	e8 a1 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e377:	83 c4 10             	add    esp,0x10
c000e37a:	83 c4 0c             	add    esp,0xc
c000e37d:	c3                   	ret    

c000e37e <Timer::read()>:
c000e37e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e382:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e388:	c3                   	ret    

c000e389 <setupTimer(int)>:
c000e389:	53                   	push   ebx
c000e38a:	83 ec 14             	sub    esp,0x14
c000e38d:	68 5c 01 00 00       	push   0x15c
c000e392:	e8 1f 97 ff ff       	call   c0007ab6 <malloc>
c000e397:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39a:	89 c3                	mov    ebx,eax
c000e39c:	e8 7b 0b 01 00       	call   c001ef1c <PIT::PIT()>
c000e3a1:	58                   	pop    eax
c000e3a2:	5a                   	pop    edx
c000e3a3:	53                   	push   ebx
c000e3a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3aa:	e8 b3 e5 ff ff       	call   c000c962 <Device::addChild(Device*)>
c000e3af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3b1:	6a 00                	push   0x0
c000e3b3:	6a 00                	push   0x0
c000e3b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3b9:	53                   	push   ebx
c000e3ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3bd:	89 d8                	mov    eax,ebx
c000e3bf:	83 c4 28             	add    esp,0x28
c000e3c2:	5b                   	pop    ebx
c000e3c3:	c3                   	ret    

c000e3c4 <timerHandler(unsigned int)>:
c000e3c4:	56                   	push   esi
c000e3c5:	53                   	push   ebx
c000e3c6:	51                   	push   ecx
c000e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cb:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3d1:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e3d8:	0f 84 4a 01 00 00    	je     c000e528 <timerHandler(unsigned int)+0x164>
c000e3de:	fa                   	cli    
c000e3df:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e3e5:	83 ec 0c             	sub    esp,0xc
c000e3e8:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e3ee:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e3f3:	e8 88 18 01 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	84 c0                	test   al,al
c000e3fd:	0f 85 a1 00 00 00    	jne    c000e4a4 <timerHandler(unsigned int)+0xe0>
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e40b:	e8 8c 18 01 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e410:	83 c4 10             	add    esp,0x10
c000e413:	89 c6                	mov    esi,eax
c000e415:	8d 76 00             	lea    esi,[esi+0x0]
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e420:	e8 77 18 01 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e425:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e42c:	89 c3                	mov    ebx,eax
c000e42e:	e8 71 18 01 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e433:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e43f:	77 23                	ja     c000e464 <timerHandler(unsigned int)+0xa0>
c000e441:	83 ec 0c             	sub    esp,0xc
c000e444:	53                   	push   ebx
c000e445:	e8 0e 81 00 00       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c000e44a:	83 c4 10             	add    esp,0x10
c000e44d:	39 de                	cmp    esi,ebx
c000e44f:	75 27                	jne    c000e478 <timerHandler(unsigned int)+0xb4>
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e459:	e8 3e 18 01 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e45e:	89 c6                	mov    esi,eax
c000e460:	eb 12                	jmp    c000e474 <timerHandler(unsigned int)+0xb0>
c000e462:	66 90                	xchg   ax,ax
c000e464:	52                   	push   edx
c000e465:	52                   	push   edx
c000e466:	53                   	push   ebx
c000e467:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e46c:	e8 ef 18 01 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e471:	8d 76 00             	lea    esi,[esi+0x0]
c000e474:	83 c4 10             	add    esp,0x10
c000e477:	90                   	nop
c000e478:	83 ec 0c             	sub    esp,0xc
c000e47b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e480:	e8 fb 17 01 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e485:	83 c4 10             	add    esp,0x10
c000e488:	84 c0                	test   al,al
c000e48a:	75 18                	jne    c000e4a4 <timerHandler(unsigned int)+0xe0>
c000e48c:	83 ec 0c             	sub    esp,0xc
c000e48f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e494:	e8 03 18 01 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e499:	83 c4 10             	add    esp,0x10
c000e49c:	39 f0                	cmp    eax,esi
c000e49e:	0f 85 74 ff ff ff    	jne    c000e418 <timerHandler(unsigned int)+0x54>
c000e4a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4a9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4ad:	74 41                	je     c000e4f0 <timerHandler(unsigned int)+0x12c>
c000e4af:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4b6:	74 38                	je     c000e4f0 <timerHandler(unsigned int)+0x12c>
c000e4b8:	fa                   	cli    
c000e4b9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4bf:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4ca:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4d3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e4d6:	72 08                	jb     c000e4e0 <timerHandler(unsigned int)+0x11c>
c000e4d8:	e8 63 7b 00 00       	call   c0016040 <schedule()>
c000e4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e4e5:	48                   	dec    eax
c000e4e6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e4eb:	75 03                	jne    c000e4f0 <timerHandler(unsigned int)+0x12c>
c000e4ed:	fb                   	sti    
c000e4ee:	66 90                	xchg   ax,ax
c000e4f0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e4f5:	48                   	dec    eax
c000e4f6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e4fb:	75 1b                	jne    c000e518 <timerHandler(unsigned int)+0x154>
c000e4fd:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e504:	74 12                	je     c000e518 <timerHandler(unsigned int)+0x154>
c000e506:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e510:	e8 2b 7b 00 00       	call   c0016040 <schedule()>
c000e515:	8d 76 00             	lea    esi,[esi+0x0]
c000e518:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e51d:	48                   	dec    eax
c000e51e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e523:	75 03                	jne    c000e528 <timerHandler(unsigned int)+0x164>
c000e525:	fb                   	sti    
c000e526:	66 90                	xchg   ax,ax
c000e528:	58                   	pop    eax
c000e529:	5b                   	pop    ebx
c000e52a:	5e                   	pop    esi
c000e52b:	c3                   	ret    

c000e52c <VCache::VCache(PhysicalDisk*)>:
c000e52c:	53                   	push   ebx
c000e52d:	83 ec 18             	sub    esp,0x18
c000e530:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c000e535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e539:	89 10                	mov    DWORD PTR [eax],edx
c000e53b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e53f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e54a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e555:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e55c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e567:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e56e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e579:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e584:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e58c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e593:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5bd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5c5:	83 ec 0c             	sub    esp,0xc
c000e5c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5cc:	e8 e5 94 ff ff       	call   c0007ab6 <malloc>
c000e5d1:	83 c4 10             	add    esp,0x10
c000e5d4:	89 c3                	mov    ebx,eax
c000e5d6:	83 ec 0c             	sub    esp,0xc
c000e5d9:	53                   	push   ebx
c000e5da:	e8 fd 77 00 00       	call   c0015ddc <Mutex::Mutex()>
c000e5df:	83 c4 10             	add    esp,0x10
c000e5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e5ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e603:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e610:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e614:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e61a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e620:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e624:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e627:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e62a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e62e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e632:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e636:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e63c:	05 00 02 00 00       	add    eax,0x200
c000e641:	c1 e0 03             	shl    eax,0x3
c000e644:	83 ec 0c             	sub    esp,0xc
c000e647:	50                   	push   eax
c000e648:	e8 69 94 ff ff       	call   c0007ab6 <malloc>
c000e64d:	83 c4 10             	add    esp,0x10
c000e650:	89 c2                	mov    edx,eax
c000e652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e656:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e668:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e66c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e670:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e676:	89 d0                	mov    eax,edx
c000e678:	c1 e0 02             	shl    eax,0x2
c000e67b:	01 d0                	add    eax,edx
c000e67d:	c1 e0 04             	shl    eax,0x4
c000e680:	83 ec 0c             	sub    esp,0xc
c000e683:	50                   	push   eax
c000e684:	e8 2d 94 ff ff       	call   c0007ab6 <malloc>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	89 c2                	mov    edx,eax
c000e68e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e692:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e695:	90                   	nop
c000e696:	83 c4 18             	add    esp,0x18
c000e699:	5b                   	pop    ebx
c000e69a:	c3                   	ret    
c000e69b:	90                   	nop

c000e69c <VCache::invalidateReadBuffer()>:
c000e69c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6aa:	c3                   	ret    
c000e6ab:	90                   	nop

c000e6ac <VCache::writeWriteBuffer()>:
c000e6ac:	53                   	push   ebx
c000e6ad:	83 ec 08             	sub    esp,0x8
c000e6b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6b8:	74 1e                	je     c000e6d8 <VCache::writeWriteBuffer()+0x2c>
c000e6ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6bd:	83 ec 0c             	sub    esp,0xc
c000e6c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6cb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6ce:	50                   	push   eax
c000e6cf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6d2:	83 c4 20             	add    esp,0x20
c000e6d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6d8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e6df:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e6e6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e6ea:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e6f1:	83 c4 08             	add    esp,0x8
c000e6f4:	5b                   	pop    ebx
c000e6f5:	c3                   	ret    
c000e6f6:	66 90                	xchg   ax,ax

c000e6f8 <VCache::~VCache()>:
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c000e700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e704:	89 10                	mov    DWORD PTR [eax],edx
c000e706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e70d:	0f b6 c0             	movzx  eax,al
c000e710:	85 c0                	test   eax,eax
c000e712:	74 10                	je     c000e724 <VCache::~VCache()+0x2c>
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e71b:	e8 8c ff ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c000e720:	83 c4 10             	add    esp,0x10
c000e723:	90                   	nop
c000e724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e728:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e72b:	83 ec 0c             	sub    esp,0xc
c000e72e:	50                   	push   eax
c000e72f:	e8 92 93 ff ff       	call   c0007ac6 <free>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e73b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e73e:	83 ec 0c             	sub    esp,0xc
c000e741:	50                   	push   eax
c000e742:	e8 7f 93 ff ff       	call   c0007ac6 <free>
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	90                   	nop
c000e74b:	83 c4 0c             	add    esp,0xc
c000e74e:	c3                   	ret    
c000e74f:	90                   	nop

c000e750 <VCache::~VCache()>:
c000e750:	83 ec 0c             	sub    esp,0xc
c000e753:	83 ec 0c             	sub    esp,0xc
c000e756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75a:	e8 99 ff ff ff       	call   c000e6f8 <VCache::~VCache()>
c000e75f:	83 c4 10             	add    esp,0x10
c000e762:	83 ec 08             	sub    esp,0x8
c000e765:	6a 44                	push   0x44
c000e767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e76b:	e8 a8 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e770:	83 c4 10             	add    esp,0x10
c000e773:	83 c4 0c             	add    esp,0xc
c000e776:	c3                   	ret    
c000e777:	90                   	nop

c000e778 <VCache::write(unsigned long long, int, void*)>:
c000e778:	55                   	push   ebp
c000e779:	57                   	push   edi
c000e77a:	56                   	push   esi
c000e77b:	53                   	push   ebx
c000e77c:	83 ec 1c             	sub    esp,0x1c
c000e77f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e783:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e787:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e78b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e78f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e793:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e797:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e79b:	74 07                	je     c000e7a4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e79d:	53                   	push   ebx
c000e79e:	e8 f9 fe ff ff       	call   c000e69c <VCache::invalidateReadBuffer()>
c000e7a3:	58                   	pop    eax
c000e7a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7a8:	74 62                	je     c000e80c <VCache::write(unsigned long long, int, void*)+0x94>
c000e7aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e7b1:	99                   	cdq    
c000e7b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7b6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7b9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7bc:	31 c1                	xor    ecx,eax
c000e7be:	89 d0                	mov    eax,edx
c000e7c0:	89 ca                	mov    edx,ecx
c000e7c2:	31 e8                	xor    eax,ebp
c000e7c4:	09 c2                	or     edx,eax
c000e7c6:	75 38                	jne    c000e800 <VCache::write(unsigned long long, int, void*)+0x88>
c000e7c8:	83 ff 01             	cmp    edi,0x1
c000e7cb:	75 33                	jne    c000e800 <VCache::write(unsigned long long, int, void*)+0x88>
c000e7cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7d4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e7da:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e7dd:	0f af c8             	imul   ecx,eax
c000e7e0:	01 cf                	add    edi,ecx
c000e7e2:	89 c1                	mov    ecx,eax
c000e7e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7e9:	40                   	inc    eax
c000e7ea:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e7ed:	83 f8 50             	cmp    eax,0x50
c000e7f0:	75 6a                	jne    c000e85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e7f2:	83 ec 0c             	sub    esp,0xc
c000e7f5:	53                   	push   ebx
c000e7f6:	e8 b1 fe ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c000e7fb:	83 c4 10             	add    esp,0x10
c000e7fe:	eb 5c                	jmp    c000e85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	53                   	push   ebx
c000e804:	e8 a3 fe ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c000e809:	83 c4 10             	add    esp,0x10
c000e80c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e80f:	83 ff 4f             	cmp    edi,0x4f
c000e812:	7f 20                	jg     c000e834 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e814:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e817:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e81b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e81e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e821:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e825:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e828:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e82e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e830:	eb 2a                	jmp    c000e85c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e832:	66 90                	xchg   ax,ax
c000e834:	8b 10                	mov    edx,DWORD PTR [eax]
c000e836:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e83a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e83e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e842:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e846:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e84a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e84e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e851:	83 c4 1c             	add    esp,0x1c
c000e854:	5b                   	pop    ebx
c000e855:	5e                   	pop    esi
c000e856:	5f                   	pop    edi
c000e857:	5d                   	pop    ebp
c000e858:	ff e0                	jmp    eax
c000e85a:	66 90                	xchg   ax,ax
c000e85c:	83 c4 1c             	add    esp,0x1c
c000e85f:	31 c0                	xor    eax,eax
c000e861:	5b                   	pop    ebx
c000e862:	5e                   	pop    esi
c000e863:	5f                   	pop    edi
c000e864:	5d                   	pop    ebp
c000e865:	c3                   	ret    

c000e866 <VCache::read(unsigned long long, int, void*)>:
c000e866:	55                   	push   ebp
c000e867:	57                   	push   edi
c000e868:	56                   	push   esi
c000e869:	53                   	push   ebx
c000e86a:	83 ec 1c             	sub    esp,0x1c
c000e86d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e875:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e879:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e87d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e881:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e885:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e889:	74 0d                	je     c000e898 <VCache::read(unsigned long long, int, void*)+0x32>
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	57                   	push   edi
c000e88f:	e8 18 fe ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	90                   	nop
c000e898:	83 fd 01             	cmp    ebp,0x1
c000e89b:	0f 85 93 00 00 00    	jne    c000e934 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8a7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8ae:	0f 85 80 00 00 00    	jne    c000e934 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8b4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e8b7:	89 e9                	mov    ecx,ebp
c000e8b9:	f7 d9                	neg    ecx
c000e8bb:	89 c8                	mov    eax,ecx
c000e8bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e8c1:	c1 f8 1f             	sar    eax,0x1f
c000e8c4:	21 d9                	and    ecx,ebx
c000e8c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8ca:	89 c8                	mov    eax,ecx
c000e8cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8d0:	21 f1                	and    ecx,esi
c000e8d2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e8d6:	89 ca                	mov    edx,ecx
c000e8d8:	74 2e                	je     c000e908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8da:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e8dd:	75 29                	jne    c000e908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8df:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e8e2:	75 24                	jne    c000e908 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8e7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ed:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e8f0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e8f3:	21 f3                	and    ebx,esi
c000e8f5:	0f af d9             	imul   ebx,ecx
c000e8f8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e8fb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e8ff:	89 de                	mov    esi,ebx
c000e901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e903:	31 c0                	xor    eax,eax
c000e905:	eb 61                	jmp    c000e968 <VCache::read(unsigned long long, int, void*)+0x102>
c000e907:	90                   	nop
c000e908:	83 ec 0c             	sub    esp,0xc
c000e90b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e90f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e913:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e916:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e919:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e91b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e91e:	55                   	push   ebp
c000e91f:	52                   	push   edx
c000e920:	50                   	push   eax
c000e921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e925:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e928:	83 c4 20             	add    esp,0x20
c000e92b:	85 c0                	test   eax,eax
c000e92d:	75 39                	jne    c000e968 <VCache::read(unsigned long long, int, void*)+0x102>
c000e92f:	eb b3                	jmp    c000e8e4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e931:	8d 76 00             	lea    esi,[esi+0x0]
c000e934:	83 ec 0c             	sub    esp,0xc
c000e937:	57                   	push   edi
c000e938:	e8 5f fd ff ff       	call   c000e69c <VCache::invalidateReadBuffer()>
c000e93d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e940:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e944:	8b 10                	mov    edx,DWORD PTR [eax]
c000e946:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e94a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e94e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e952:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e956:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e95a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e95d:	83 c4 2c             	add    esp,0x2c
c000e960:	5b                   	pop    ebx
c000e961:	5e                   	pop    esi
c000e962:	5f                   	pop    edi
c000e963:	5d                   	pop    ebp
c000e964:	ff e0                	jmp    eax
c000e966:	66 90                	xchg   ax,ax
c000e968:	83 c4 1c             	add    esp,0x1c
c000e96b:	5b                   	pop    ebx
c000e96c:	5e                   	pop    esi
c000e96d:	5f                   	pop    edi
c000e96e:	5d                   	pop    ebp
c000e96f:	c3                   	ret    

c000e970 <Video::putrect(int, int, int, int, unsigned int)>:
c000e970:	55                   	push   ebp
c000e971:	57                   	push   edi
c000e972:	56                   	push   esi
c000e973:	53                   	push   ebx
c000e974:	83 ec 1c             	sub    esp,0x1c
c000e977:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e97b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e97f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e983:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e98b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e98f:	01 df                	add    edi,ebx
c000e991:	39 fb                	cmp    ebx,edi
c000e993:	7d 1f                	jge    c000e9b4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e995:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e999:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e99d:	7d 12                	jge    c000e9b1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e99f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9a5:	53                   	push   ebx
c000e9a6:	55                   	push   ebp
c000e9a7:	45                   	inc    ebp
c000e9a8:	56                   	push   esi
c000e9a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9ac:	83 c4 10             	add    esp,0x10
c000e9af:	eb e8                	jmp    c000e999 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9b1:	43                   	inc    ebx
c000e9b2:	eb dd                	jmp    c000e991 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9b4:	83 c4 1c             	add    esp,0x1c
c000e9b7:	5b                   	pop    ebx
c000e9b8:	5e                   	pop    esi
c000e9b9:	5f                   	pop    edi
c000e9ba:	5d                   	pop    ebp
c000e9bb:	c3                   	ret    

c000e9bc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9bc:	55                   	push   ebp
c000e9bd:	57                   	push   edi
c000e9be:	31 ff                	xor    edi,edi
c000e9c0:	56                   	push   esi
c000e9c1:	53                   	push   ebx
c000e9c2:	83 ec 1c             	sub    esp,0x1c
c000e9c5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9cd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e9d4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e9d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9dd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e9e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9e5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e9e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9ec:	01 f9                	add    ecx,edi
c000e9ee:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e9f2:	7d 2f                	jge    c000ea23 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e9f4:	31 f6                	xor    esi,esi
c000e9f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9fa:	01 f2                	add    edx,esi
c000e9fc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea00:	7d 1a                	jge    c000ea1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea05:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea08:	46                   	inc    esi
c000ea09:	51                   	push   ecx
c000ea0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea0e:	52                   	push   edx
c000ea0f:	55                   	push   ebp
c000ea10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea13:	83 c4 10             	add    esp,0x10
c000ea16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea1a:	eb da                	jmp    c000e9f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea1c:	47                   	inc    edi
c000ea1d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea21:	eb c5                	jmp    c000e9e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea23:	83 c4 1c             	add    esp,0x1c
c000ea26:	5b                   	pop    ebx
c000ea27:	5e                   	pop    esi
c000ea28:	5f                   	pop    edi
c000ea29:	5d                   	pop    ebp
c000ea2a:	c3                   	ret    
c000ea2b:	90                   	nop

c000ea2c <Video::blit(unsigned int*, int, int, int, int)>:
c000ea2c:	55                   	push   ebp
c000ea2d:	57                   	push   edi
c000ea2e:	56                   	push   esi
c000ea2f:	53                   	push   ebx
c000ea30:	83 ec 1c             	sub    esp,0x1c
c000ea33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea3b:	85 c0                	test   eax,eax
c000ea3d:	79 02                	jns    c000ea41 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ea3f:	31 c0                	xor    eax,eax
c000ea41:	c1 e0 02             	shl    eax,0x2
c000ea44:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ea48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea50:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ea54:	39 d8                	cmp    eax,ebx
c000ea56:	7e 49                	jle    c000eaa1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea58:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea5e:	7c 41                	jl     c000eaa1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea60:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea68:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea6c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ea70:	39 f9                	cmp    ecx,edi
c000ea72:	7e 22                	jle    c000ea96 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ea74:	83 c5 04             	add    ebp,0x4
c000ea77:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ea7d:	7c 14                	jl     c000ea93 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ea7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea81:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ea84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea8c:	56                   	push   esi
c000ea8d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ea90:	83 c4 10             	add    esp,0x10
c000ea93:	47                   	inc    edi
c000ea94:	eb d2                	jmp    c000ea68 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ea96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9a:	43                   	inc    ebx
c000ea9b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ea9f:	eb ab                	jmp    c000ea4c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eaa1:	83 c4 1c             	add    esp,0x1c
c000eaa4:	5b                   	pop    ebx
c000eaa5:	5e                   	pop    esi
c000eaa6:	5f                   	pop    edi
c000eaa7:	5d                   	pop    ebp
c000eaa8:	c3                   	ret    
c000eaa9:	90                   	nop

c000eaaa <Video::clearScreen(unsigned int)>:
c000eaaa:	57                   	push   edi
c000eaab:	56                   	push   esi
c000eaac:	53                   	push   ebx
c000eaad:	31 db                	xor    ebx,ebx
c000eaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eab3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eab9:	7e 1f                	jle    c000eada <Video::clearScreen(unsigned int)+0x30>
c000eabb:	31 ff                	xor    edi,edi
c000eabd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eac3:	7e 12                	jle    c000ead7 <Video::clearScreen(unsigned int)+0x2d>
c000eac5:	8b 06                	mov    eax,DWORD PTR [esi]
c000eac7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eacb:	53                   	push   ebx
c000eacc:	57                   	push   edi
c000eacd:	47                   	inc    edi
c000eace:	56                   	push   esi
c000eacf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	eb e6                	jmp    c000eabd <Video::clearScreen(unsigned int)+0x13>
c000ead7:	43                   	inc    ebx
c000ead8:	eb d9                	jmp    c000eab3 <Video::clearScreen(unsigned int)+0x9>
c000eada:	5b                   	pop    ebx
c000eadb:	5e                   	pop    esi
c000eadc:	5f                   	pop    edi
c000eadd:	c3                   	ret    

c000eade <Video::putpixel(int, int, unsigned int)>:
c000eade:	c7 44 24 04 88 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d88
c000eae6:	e9 d0 2a 00 00       	jmp    c00115bb <KePanic(char const*)>
c000eaeb:	90                   	nop

c000eaec <Video::readPixelApprox(int, int)>:
c000eaec:	83 ec 18             	sub    esp,0x18
c000eaef:	68 a9 1d 02 c0       	push   0xc0021da9
c000eaf4:	e8 c2 2a 00 00       	call   c00115bb <KePanic(char const*)>
c000eaf9:	31 c0                	xor    eax,eax
c000eafb:	83 c4 1c             	add    esp,0x1c
c000eafe:	c3                   	ret    
c000eaff:	90                   	nop

c000eb00 <Video::Video(char const*)>:
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb07:	83 ec 08             	sub    esp,0x8
c000eb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0e:	50                   	push   eax
c000eb0f:	e8 e6 df ff ff       	call   c000cafa <Device::Device(char const*)>
c000eb14:	83 c4 10             	add    esp,0x10
c000eb17:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c000eb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb20:	89 10                	mov    DWORD PTR [eax],edx
c000eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb26:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb30:	90                   	nop
c000eb31:	83 c4 0c             	add    esp,0xc
c000eb34:	c3                   	ret    
c000eb35:	90                   	nop

c000eb36 <Video::~Video()>:
c000eb36:	83 ec 0c             	sub    esp,0xc
c000eb39:	ba 24 1e 02 c0       	mov    edx,0xc0021e24
c000eb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb42:	89 10                	mov    DWORD PTR [eax],edx
c000eb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb48:	83 ec 0c             	sub    esp,0xc
c000eb4b:	50                   	push   eax
c000eb4c:	e8 13 dd ff ff       	call   c000c864 <Device::~Device()>
c000eb51:	83 c4 10             	add    esp,0x10
c000eb54:	90                   	nop
c000eb55:	83 c4 0c             	add    esp,0xc
c000eb58:	c3                   	ret    
c000eb59:	90                   	nop

c000eb5a <Video::~Video()>:
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	83 ec 0c             	sub    esp,0xc
c000eb60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb64:	e8 cd ff ff ff       	call   c000eb36 <Video::~Video()>
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	83 ec 08             	sub    esp,0x8
c000eb6f:	68 64 01 00 00       	push   0x164
c000eb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb78:	e8 9b bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000eb7d:	83 c4 10             	add    esp,0x10
c000eb80:	83 c4 0c             	add    esp,0xc
c000eb83:	c3                   	ret    

c000eb84 <Video::isMonochrome()>:
c000eb84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb88:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000eb8e:	c3                   	ret    
c000eb8f:	90                   	nop

c000eb90 <Video::getWidth()>:
c000eb90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb94:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000eb9a:	c3                   	ret    
c000eb9b:	90                   	nop

c000eb9c <Video::getHeight()>:
c000eb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000eba6:	c3                   	ret    
c000eba7:	90                   	nop

c000eba8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000eba8:	55                   	push   ebp
c000eba9:	57                   	push   edi
c000ebaa:	56                   	push   esi
c000ebab:	53                   	push   ebx
c000ebac:	83 ec 2c             	sub    esp,0x2c
c000ebaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ebb7:	83 f8 01             	cmp    eax,0x1
c000ebba:	19 c9                	sbb    ecx,ecx
c000ebbc:	31 db                	xor    ebx,ebx
c000ebbe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebc2:	89 cd                	mov    ebp,ecx
c000ebc4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebcc:	f7 d5                	not    ebp
c000ebce:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ebd4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ebd8:	01 d8                	add    eax,ebx
c000ebda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebde:	56                   	push   esi
c000ebdf:	e8 b8 ff ff ff       	call   c000eb9c <Video::getHeight()>
c000ebe4:	59                   	pop    ecx
c000ebe5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ebe9:	7e 70                	jle    c000ec5b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ebeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ebef:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ebf3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ebf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebfa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ebfe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec09:	89 f8                	mov    eax,edi
c000ec0b:	83 c0 20             	add    eax,0x20
c000ec0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec12:	56                   	push   esi
c000ec13:	e8 78 ff ff ff       	call   c000eb90 <Video::getWidth()>
c000ec18:	5a                   	pop    edx
c000ec19:	39 c7                	cmp    edi,eax
c000ec1b:	7d 34                	jge    c000ec51 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec1d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec22:	74 05                	je     c000ec29 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec24:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec26:	55                   	push   ebp
c000ec27:	eb 0d                	jmp    c000ec36 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec29:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec2e:	74 12                	je     c000ec42 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec30:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec3a:	57                   	push   edi
c000ec3b:	56                   	push   esi
c000ec3c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec3f:	83 c4 10             	add    esp,0x10
c000ec42:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec46:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec4a:	47                   	inc    edi
c000ec4b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ec4f:	75 c1                	jne    c000ec12 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec51:	43                   	inc    ebx
c000ec52:	83 fb 20             	cmp    ebx,0x20
c000ec55:	0f 85 79 ff ff ff    	jne    c000ebd4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec5b:	83 c4 2c             	add    esp,0x2c
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	5d                   	pop    ebp
c000ec62:	c3                   	ret    
c000ec63:	90                   	nop

c000ec64 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec64:	55                   	push   ebp
c000ec65:	57                   	push   edi
c000ec66:	56                   	push   esi
c000ec67:	53                   	push   ebx
c000ec68:	83 ec 28             	sub    esp,0x28
c000ec6b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec6f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec73:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ec77:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ec7b:	c1 e6 08             	shl    esi,0x8
c000ec7e:	01 c6                	add    esi,eax
c000ec80:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ec84:	c1 e0 08             	shl    eax,0x8
c000ec87:	01 d0                	add    eax,edx
c000ec89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec91:	0f af c6             	imul   eax,esi
c000ec94:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ec9b:	50                   	push   eax
c000ec9c:	e8 15 8e ff ff       	call   c0007ab6 <malloc>
c000eca1:	83 c4 10             	add    esp,0x10
c000eca4:	89 c7                	mov    edi,eax
c000eca6:	85 c0                	test   eax,eax
c000eca8:	75 10                	jne    c000ecba <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecaa:	83 ec 0c             	sub    esp,0xc
c000ecad:	68 d4 1d 02 c0       	push   0xc0021dd4
c000ecb2:	e8 04 29 00 00       	call   c00115bb <KePanic(char const*)>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ecbe:	ba 12 00 00 00       	mov    edx,0x12
c000ecc3:	85 c0                	test   eax,eax
c000ecc5:	74 11                	je     c000ecd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ecc7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eccb:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eccf:	c1 fa 03             	sar    edx,0x3
c000ecd2:	0f af d1             	imul   edx,ecx
c000ecd5:	83 c2 12             	add    edx,0x12
c000ecd8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ecdc:	74 04                	je     c000ece2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ecde:	85 f6                	test   esi,esi
c000ece0:	75 12                	jne    c000ecf4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	68 e4 1d 02 c0       	push   0xc0021de4
c000ecea:	e8 56 bc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ecef:	e9 b8 00 00 00       	jmp    c000edac <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ecf4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ecf8:	83 f9 02             	cmp    ecx,0x2
c000ecfb:	0f 85 96 00 00 00    	jne    c000ed97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed01:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed06:	75 0e                	jne    c000ed16 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed08:	85 c0                	test   eax,eax
c000ed0a:	75 0a                	jne    c000ed16 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed0c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed0f:	83 e8 18             	sub    eax,0x18
c000ed12:	a8 f7                	test   al,0xf7
c000ed14:	74 0a                	je     c000ed20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed16:	83 ec 0c             	sub    esp,0xc
c000ed19:	68 f9 1d 02 c0       	push   0xc0021df9
c000ed1e:	eb 7f                	jmp    c000ed9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed28:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed30:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ed34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed3c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed40:	75 0c                	jne    c000ed4e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed42:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ed47:	c1 e0 18             	shl    eax,0x18
c000ed4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed4e:	45                   	inc    ebp
c000ed4f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed54:	c1 e1 10             	shl    ecx,0x10
c000ed57:	89 c8                	mov    eax,ecx
c000ed59:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed5e:	c1 e1 08             	shl    ecx,0x8
c000ed61:	09 c1                	or     ecx,eax
c000ed63:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed67:	09 c1                	or     ecx,eax
c000ed69:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed6d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ed71:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ed75:	c1 f8 03             	sar    eax,0x3
c000ed78:	01 c2                	add    edx,eax
c000ed7a:	89 e8                	mov    eax,ebp
c000ed7c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ed80:	39 c6                	cmp    esi,eax
c000ed82:	7f b0                	jg     c000ed34 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ed84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed8c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ed8f:	7e 22                	jle    c000edb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ed91:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ed95:	eb 99                	jmp    c000ed30 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ed97:	50                   	push   eax
c000ed98:	50                   	push   eax
c000ed99:	51                   	push   ecx
c000ed9a:	68 07 1e 02 c0       	push   0xc0021e07
c000ed9f:	e8 a1 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eda4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eda7:	e8 1a 8d ff ff       	call   c0007ac6 <free>
c000edac:	83 c4 10             	add    esp,0x10
c000edaf:	31 ff                	xor    edi,edi
c000edb1:	eb 0f                	jmp    c000edc2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000edb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edb7:	89 30                	mov    DWORD PTR [eax],esi
c000edb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edbd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000edc0:	89 30                	mov    DWORD PTR [eax],esi
c000edc2:	83 c4 1c             	add    esp,0x1c
c000edc5:	89 f8                	mov    eax,edi
c000edc7:	5b                   	pop    ebx
c000edc8:	5e                   	pop    esi
c000edc9:	5f                   	pop    edi
c000edca:	5d                   	pop    ebp
c000edcb:	c3                   	ret    

c000edcc <Video::putTGA(int, int, unsigned char*, int)>:
c000edcc:	55                   	push   ebp
c000edcd:	57                   	push   edi
c000edce:	56                   	push   esi
c000edcf:	53                   	push   ebx
c000edd0:	83 ec 28             	sub    esp,0x28
c000edd3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000edd7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eddb:	50                   	push   eax
c000eddc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ede0:	50                   	push   eax
c000ede1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ede5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ede9:	56                   	push   esi
c000edea:	e8 75 fe ff ff       	call   c000ec64 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000edef:	83 c4 20             	add    esp,0x20
c000edf2:	85 c0                	test   eax,eax
c000edf4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000edf8:	74 35                	je     c000ee2f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000edfa:	89 c7                	mov    edi,eax
c000edfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee00:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee04:	39 d8                	cmp    eax,ebx
c000ee06:	7e 27                	jle    c000ee2f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee10:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee14:	39 e8                	cmp    eax,ebp
c000ee16:	7e 14                	jle    c000ee2c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee18:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee1a:	83 c7 04             	add    edi,0x4
c000ee1d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee20:	53                   	push   ebx
c000ee21:	55                   	push   ebp
c000ee22:	45                   	inc    ebp
c000ee23:	56                   	push   esi
c000ee24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee27:	83 c4 10             	add    esp,0x10
c000ee2a:	eb e0                	jmp    c000ee0c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee2c:	43                   	inc    ebx
c000ee2d:	eb cd                	jmp    c000edfc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee2f:	83 c4 1c             	add    esp,0x1c
c000ee32:	5b                   	pop    ebx
c000ee33:	5e                   	pop    esi
c000ee34:	5f                   	pop    edi
c000ee35:	5d                   	pop    ebp
c000ee36:	c3                   	ret    
c000ee37:	90                   	nop

c000ee38 <ACPI::close(int, int, void*)>:
c000ee38:	83 ec 1c             	sub    esp,0x1c
c000ee3b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee43:	74 0b                	je     c000ee50 <ACPI::close(int, int, void*)+0x18>
c000ee45:	b8 00 00 00 00       	mov    eax,0x0
c000ee4a:	e9 99 00 00 00       	jmp    c000eee8 <ACPI::close(int, int, void*)+0xb0>
c000ee4f:	90                   	nop
c000ee50:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee55:	75 29                	jne    c000ee80 <ACPI::close(int, int, void*)+0x48>
c000ee57:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee5c:	85 c0                	test   eax,eax
c000ee5e:	74 08                	je     c000ee68 <ACPI::close(int, int, void*)+0x30>
c000ee60:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee65:	ff d0                	call   eax
c000ee67:	90                   	nop
c000ee68:	83 ec 0c             	sub    esp,0xc
c000ee6b:	68 68 1e 02 c0       	push   0xc0021e68
c000ee70:	e8 46 27 00 00       	call   c00115bb <KePanic(char const*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ee7d:	eb 69                	jmp    c000eee8 <ACPI::close(int, int, void*)+0xb0>
c000ee7f:	90                   	nop
c000ee80:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ee85:	75 59                	jne    c000eee0 <ACPI::close(int, int, void*)+0xa8>
c000ee87:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ee8c:	85 c0                	test   eax,eax
c000ee8e:	74 08                	je     c000ee98 <ACPI::close(int, int, void*)+0x60>
c000ee90:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ee95:	ff d0                	call   eax
c000ee97:	90                   	nop
c000ee98:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ee9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eea0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eea5:	83 e0 02             	and    eax,0x2
c000eea8:	74 1e                	je     c000eec8 <ACPI::close(int, int, void*)+0x90>
c000eeaa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eeb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeb5:	89 c2                	mov    edx,eax
c000eeb7:	ec                   	in     al,dx
c000eeb8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eebc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eec0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eec4:	eb da                	jmp    c000eea0 <ACPI::close(int, int, void*)+0x68>
c000eec6:	66 90                	xchg   ax,ax
c000eec8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eecf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eed4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eedc:	ee                   	out    dx,al
c000eedd:	8d 76 00             	lea    esi,[esi+0x0]
c000eee0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eee5:	8d 76 00             	lea    esi,[esi+0x0]
c000eee8:	83 c4 1c             	add    esp,0x1c
c000eeeb:	c3                   	ret    

c000eeec <findRSDP()>:
c000eeec:	83 ec 1c             	sub    esp,0x1c
c000eeef:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eef4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eefa:	83 e0 04             	and    eax,0x4
c000eefd:	0f b6 c0             	movzx  eax,al
c000ef00:	85 c0                	test   eax,eax
c000ef02:	75 08                	jne    c000ef0c <findRSDP()+0x20>
c000ef04:	b8 00 00 00 00       	mov    eax,0x0
c000ef09:	eb 75                	jmp    c000ef80 <findRSDP()+0x94>
c000ef0b:	90                   	nop
c000ef0c:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef11:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef16:	7f 1c                	jg     c000ef34 <findRSDP()+0x48>
c000ef18:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef1d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef23:	83 e2 fb             	and    edx,0xfffffffb
c000ef26:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef2c:	b8 00 00 00 00       	mov    eax,0x0
c000ef31:	eb 4d                	jmp    c000ef80 <findRSDP()+0x94>
c000ef33:	90                   	nop
c000ef34:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef3c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef44:	77 32                	ja     c000ef78 <findRSDP()+0x8c>
c000ef46:	83 ec 04             	sub    esp,0x4
c000ef49:	6a 08                	push   0x8
c000ef4b:	68 03 1f 02 c0       	push   0xc0021f03
c000ef50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef54:	e8 27 14 ff ff       	call   c0000380 <memcmp>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	85 c0                	test   eax,eax
c000ef5e:	0f 94 c0             	sete   al
c000ef61:	0f b6 c0             	movzx  eax,al
c000ef64:	85 c0                	test   eax,eax
c000ef66:	74 08                	je     c000ef70 <findRSDP()+0x84>
c000ef68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef6c:	eb 12                	jmp    c000ef80 <findRSDP()+0x94>
c000ef6e:	66 90                	xchg   ax,ax
c000ef70:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ef75:	eb c5                	jmp    c000ef3c <findRSDP()+0x50>
c000ef77:	90                   	nop
c000ef78:	b8 00 00 00 00       	mov    eax,0x0
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 c4 1c             	add    esp,0x1c
c000ef83:	c3                   	ret    

c000ef84 <loadACPITables(unsigned char*)>:
c000ef84:	57                   	push   edi
c000ef85:	56                   	push   esi
c000ef86:	53                   	push   ebx
c000ef87:	83 ec 60             	sub    esp,0x60
c000ef8a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef8f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef95:	83 e0 04             	and    eax,0x4
c000ef98:	0f b6 c0             	movzx  eax,al
c000ef9b:	85 c0                	test   eax,eax
c000ef9d:	0f 84 41 02 00 00    	je     c000f1e4 <loadACPITables(unsigned char*)+0x260>
c000efa3:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efa8:	0f b6 c0             	movzx  eax,al
c000efab:	85 c0                	test   eax,eax
c000efad:	74 79                	je     c000f028 <loadACPITables(unsigned char*)+0xa4>
c000efaf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efb3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efbe:	83 e8 24             	sub    eax,0x24
c000efc1:	c1 e8 03             	shr    eax,0x3
c000efc4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efc8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000efd0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000efd4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000efd8:	0f 8d ba 00 00 00    	jge    c000f098 <loadACPITables(unsigned char*)+0x114>
c000efde:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efe2:	83 c0 24             	add    eax,0x24
c000efe5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000efe9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000efed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eff1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000eff5:	c1 e0 03             	shl    eax,0x3
c000eff8:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000effc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f000:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f003:	8b 00                	mov    eax,DWORD PTR [eax]
c000f005:	89 c1                	mov    ecx,eax
c000f007:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f00c:	8d 50 01             	lea    edx,[eax+0x1]
c000f00f:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f015:	89 ca                	mov    edx,ecx
c000f017:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f01e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f023:	eb ab                	jmp    c000efd0 <loadACPITables(unsigned char*)+0x4c>
c000f025:	8d 76 00             	lea    esi,[esi+0x0]
c000f028:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f02c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f030:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f037:	83 e8 24             	sub    eax,0x24
c000f03a:	c1 e8 02             	shr    eax,0x2
c000f03d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f041:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f050:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f054:	7d 42                	jge    c000f098 <loadACPITables(unsigned char*)+0x114>
c000f056:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f05a:	83 c0 24             	add    eax,0x24
c000f05d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f061:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f065:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f069:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f06d:	c1 e0 02             	shl    eax,0x2
c000f070:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f078:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f07a:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f07f:	8d 50 01             	lea    edx,[eax+0x1]
c000f082:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f088:	89 ca                	mov    edx,ecx
c000f08a:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f091:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f096:	eb b4                	jmp    c000f04c <loadACPITables(unsigned char*)+0xc8>
c000f098:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0a0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0a5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0a9:	0f 8d 39 01 00 00    	jge    c000f1e8 <loadACPITables(unsigned char*)+0x264>
c000f0af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0b3:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ca:	25 ff 0f 00 00       	and    eax,0xfff
c000f0cf:	89 c6                	mov    esi,eax
c000f0d1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f0d7:	83 ec 0c             	sub    esp,0xc
c000f0da:	6a 01                	push   0x1
c000f0dc:	e8 2c a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f0e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0ee:	83 ec 0c             	sub    esp,0xc
c000f0f1:	6a 01                	push   0x1
c000f0f3:	6a 01                	push   0x1
c000f0f5:	50                   	push   eax
c000f0f6:	52                   	push   edx
c000f0f7:	53                   	push   ebx
c000f0f8:	e8 1d ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0fd:	83 c4 20             	add    esp,0x20
c000f100:	09 f0                	or     eax,esi
c000f102:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f106:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f10a:	c1 e0 03             	shl    eax,0x3
c000f10d:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f11e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f12a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f12e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f132:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f136:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f13a:	89 c6                	mov    esi,eax
c000f13c:	89 d7                	mov    edi,edx
c000f13e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f140:	89 c8                	mov    eax,ecx
c000f142:	89 fa                	mov    edx,edi
c000f144:	89 f3                	mov    ebx,esi
c000f146:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f14a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f159:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f15d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f161:	05 00 10 00 00       	add    eax,0x1000
c000f166:	c1 e8 0c             	shr    eax,0xc
c000f169:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f16d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f171:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f179:	25 ff 0f 00 00       	and    eax,0xfff
c000f17e:	89 c6                	mov    esi,eax
c000f180:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f186:	83 ec 0c             	sub    esp,0xc
c000f189:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f18d:	e8 7b a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f192:	83 c4 10             	add    esp,0x10
c000f195:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f199:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f19f:	83 ec 0c             	sub    esp,0xc
c000f1a2:	6a 01                	push   0x1
c000f1a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1a8:	50                   	push   eax
c000f1a9:	52                   	push   edx
c000f1aa:	53                   	push   ebx
c000f1ab:	e8 6a ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1b0:	83 c4 20             	add    esp,0x20
c000f1b3:	09 f0                	or     eax,esi
c000f1b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1bd:	83 ec 0c             	sub    esp,0xc
c000f1c0:	50                   	push   eax
c000f1c1:	e8 65 a7 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f1c6:	83 c4 10             	add    esp,0x10
c000f1c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1d1:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1d8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f1dd:	e9 be fe ff ff       	jmp    c000f0a0 <loadACPITables(unsigned char*)+0x11c>
c000f1e2:	66 90                	xchg   ax,ax
c000f1e4:	90                   	nop
c000f1e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f1e8:	83 c4 60             	add    esp,0x60
c000f1eb:	5b                   	pop    ebx
c000f1ec:	5e                   	pop    esi
c000f1ed:	5f                   	pop    edi
c000f1ee:	c3                   	ret    
c000f1ef:	90                   	nop

c000f1f0 <findRSDT(unsigned char*)>:
c000f1f0:	57                   	push   edi
c000f1f1:	56                   	push   esi
c000f1f2:	53                   	push   ebx
c000f1f3:	83 ec 50             	sub    esp,0x50
c000f1f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f1fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f201:	83 e0 04             	and    eax,0x4
c000f204:	0f b6 c0             	movzx  eax,al
c000f207:	85 c0                	test   eax,eax
c000f209:	75 0d                	jne    c000f218 <findRSDT(unsigned char*)+0x28>
c000f20b:	b8 00 00 00 00       	mov    eax,0x0
c000f210:	e9 2b 01 00 00       	jmp    c000f340 <findRSDT(unsigned char*)+0x150>
c000f215:	8d 76 00             	lea    esi,[esi+0x0]
c000f218:	89 e0                	mov    eax,esp
c000f21a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f21e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f222:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f226:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f22e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f232:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f23a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f23e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f242:	89 c6                	mov    esi,eax
c000f244:	89 d7                	mov    edi,edx
c000f246:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f248:	89 c8                	mov    eax,ecx
c000f24a:	89 fa                	mov    edx,edi
c000f24c:	89 f3                	mov    ebx,esi
c000f24e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f252:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f256:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f25a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f25e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f262:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f26a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f26e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f272:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f27e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f282:	25 ff 0f 00 00       	and    eax,0xfff
c000f287:	89 c6                	mov    esi,eax
c000f289:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f28f:	83 ec 0c             	sub    esp,0xc
c000f292:	6a 02                	push   0x2
c000f294:	e8 74 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f299:	83 c4 10             	add    esp,0x10
c000f29c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2a6:	83 ec 0c             	sub    esp,0xc
c000f2a9:	6a 01                	push   0x1
c000f2ab:	6a 02                	push   0x2
c000f2ad:	50                   	push   eax
c000f2ae:	52                   	push   edx
c000f2af:	53                   	push   ebx
c000f2b0:	e8 65 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2b5:	83 c4 20             	add    esp,0x20
c000f2b8:	09 f0                	or     eax,esi
c000f2ba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2c2:	25 ff 0f 00 00       	and    eax,0xfff
c000f2c7:	89 c6                	mov    esi,eax
c000f2c9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2cf:	83 ec 0c             	sub    esp,0xc
c000f2d2:	6a 02                	push   0x2
c000f2d4:	e8 34 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2d9:	83 c4 10             	add    esp,0x10
c000f2dc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f2e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2e6:	83 ec 0c             	sub    esp,0xc
c000f2e9:	6a 01                	push   0x1
c000f2eb:	6a 02                	push   0x2
c000f2ed:	50                   	push   eax
c000f2ee:	52                   	push   edx
c000f2ef:	53                   	push   ebx
c000f2f0:	e8 25 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2f5:	83 c4 20             	add    esp,0x20
c000f2f8:	09 f0                	or     eax,esi
c000f2fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2fe:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f303:	85 c0                	test   eax,eax
c000f305:	75 11                	jne    c000f318 <findRSDT(unsigned char*)+0x128>
c000f307:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f30e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f312:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f316:	eb 24                	jmp    c000f33c <findRSDT(unsigned char*)+0x14c>
c000f318:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f31d:	83 f8 02             	cmp    eax,0x2
c000f320:	75 12                	jne    c000f334 <findRSDT(unsigned char*)+0x144>
c000f322:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f329:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f32d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f331:	eb 09                	jmp    c000f33c <findRSDT(unsigned char*)+0x14c>
c000f333:	90                   	nop
c000f334:	b8 00 00 00 00       	mov    eax,0x0
c000f339:	eb 05                	jmp    c000f340 <findRSDT(unsigned char*)+0x150>
c000f33b:	90                   	nop
c000f33c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f340:	83 c4 50             	add    esp,0x50
c000f343:	5b                   	pop    ebx
c000f344:	5e                   	pop    esi
c000f345:	5f                   	pop    edi
c000f346:	c3                   	ret    
c000f347:	90                   	nop

c000f348 <findDataTable(unsigned char*, char*)>:
c000f348:	83 ec 1c             	sub    esp,0x1c
c000f34b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f350:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f356:	83 e0 04             	and    eax,0x4
c000f359:	0f b6 c0             	movzx  eax,al
c000f35c:	85 c0                	test   eax,eax
c000f35e:	75 08                	jne    c000f368 <findDataTable(unsigned char*, char*)+0x20>
c000f360:	b8 00 00 00 00       	mov    eax,0x0
c000f365:	eb 5d                	jmp    c000f3c4 <findDataTable(unsigned char*, char*)+0x7c>
c000f367:	90                   	nop
c000f368:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f370:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f375:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f379:	7d 41                	jge    c000f3bc <findDataTable(unsigned char*, char*)+0x74>
c000f37b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f37f:	c1 e0 03             	shl    eax,0x3
c000f382:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f387:	83 ec 04             	sub    esp,0x4
c000f38a:	6a 04                	push   0x4
c000f38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f390:	50                   	push   eax
c000f391:	e8 ea 0f ff ff       	call   c0000380 <memcmp>
c000f396:	83 c4 10             	add    esp,0x10
c000f399:	85 c0                	test   eax,eax
c000f39b:	0f 94 c0             	sete   al
c000f39e:	0f b6 c0             	movzx  eax,al
c000f3a1:	85 c0                	test   eax,eax
c000f3a3:	74 0f                	je     c000f3b4 <findDataTable(unsigned char*, char*)+0x6c>
c000f3a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3a9:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3b0:	eb 12                	jmp    c000f3c4 <findDataTable(unsigned char*, char*)+0x7c>
c000f3b2:	66 90                	xchg   ax,ax
c000f3b4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3b9:	eb b5                	jmp    c000f370 <findDataTable(unsigned char*, char*)+0x28>
c000f3bb:	90                   	nop
c000f3bc:	b8 00 00 00 00       	mov    eax,0x0
c000f3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c4:	83 c4 1c             	add    esp,0x1c
c000f3c7:	c3                   	ret    

c000f3c8 <scanMADT()>:
c000f3c8:	53                   	push   ebx
c000f3c9:	83 ec 38             	sub    esp,0x38
c000f3cc:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3d1:	25 00 04 00 00       	and    eax,0x400
c000f3d6:	74 14                	je     c000f3ec <scanMADT()+0x24>
c000f3d8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3dd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f3e3:	83 e2 fb             	and    edx,0xfffffffb
c000f3e6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f3ec:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3f1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3f7:	83 e0 04             	and    eax,0x4
c000f3fa:	0f b6 c0             	movzx  eax,al
c000f3fd:	85 c0                	test   eax,eax
c000f3ff:	0f 84 6b 04 00 00    	je     c000f870 <scanMADT()+0x4a8>
c000f405:	e8 e2 fa ff ff       	call   c000eeec <findRSDP()>
c000f40a:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f40f:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f414:	85 c0                	test   eax,eax
c000f416:	75 1c                	jne    c000f434 <scanMADT()+0x6c>
c000f418:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f41d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f423:	83 e2 fb             	and    edx,0xfffffffb
c000f426:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f42c:	e9 47 04 00 00       	jmp    c000f878 <scanMADT()+0x4b0>
c000f431:	8d 76 00             	lea    esi,[esi+0x0]
c000f434:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f439:	83 ec 0c             	sub    esp,0xc
c000f43c:	50                   	push   eax
c000f43d:	e8 ae fd ff ff       	call   c000f1f0 <findRSDT(unsigned char*)>
c000f442:	83 c4 10             	add    esp,0x10
c000f445:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f44a:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f44f:	85 c0                	test   eax,eax
c000f451:	75 19                	jne    c000f46c <scanMADT()+0xa4>
c000f453:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f458:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f45e:	83 e2 fb             	and    edx,0xfffffffb
c000f461:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f467:	e9 0c 04 00 00       	jmp    c000f878 <scanMADT()+0x4b0>
c000f46c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f471:	83 ec 0c             	sub    esp,0xc
c000f474:	50                   	push   eax
c000f475:	e8 0a fb ff ff       	call   c000ef84 <loadACPITables(unsigned char*)>
c000f47a:	83 c4 10             	add    esp,0x10
c000f47d:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f482:	83 ec 08             	sub    esp,0x8
c000f485:	68 0c 1f 02 c0       	push   0xc0021f0c
c000f48a:	50                   	push   eax
c000f48b:	e8 b8 fe ff ff       	call   c000f348 <findDataTable(unsigned char*, char*)>
c000f490:	83 c4 10             	add    esp,0x10
c000f493:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f497:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f49c:	75 1a                	jne    c000f4b8 <scanMADT()+0xf0>
c000f49e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4a3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4a9:	83 e2 fe             	and    edx,0xfffffffe
c000f4ac:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4b2:	e9 c1 03 00 00       	jmp    c000f878 <scanMADT()+0x4b0>
c000f4b7:	90                   	nop
c000f4b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4c7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4cb:	0f 87 a7 03 00 00    	ja     c000f878 <scanMADT()+0x4b0>
c000f4d1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f4d9:	0f 87 99 03 00 00    	ja     c000f878 <scanMADT()+0x4b0>
c000f4df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4eb:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4fa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f502:	8d 50 01             	lea    edx,[eax+0x1]
c000f505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f509:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f50d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f511:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f515:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f51a:	83 f8 02             	cmp    eax,0x2
c000f51d:	0f 86 51 03 00 00    	jbe    c000f874 <scanMADT()+0x4ac>
c000f523:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f528:	85 c0                	test   eax,eax
c000f52a:	75 58                	jne    c000f584 <scanMADT()+0x1bc>
c000f52c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f530:	8d 50 01             	lea    edx,[eax+0x1]
c000f533:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f537:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f53d:	0f b6 d2             	movzx  edx,dl
c000f540:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f544:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f548:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f54e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f552:	8d 50 01             	lea    edx,[eax+0x1]
c000f555:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f559:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f55f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f562:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f568:	0f b6 d2             	movzx  edx,dl
c000f56b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f56f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f573:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f579:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f57e:	e9 d9 02 00 00       	jmp    c000f85c <scanMADT()+0x494>
c000f583:	90                   	nop
c000f584:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f589:	83 f8 01             	cmp    eax,0x1
c000f58c:	0f 85 1a 01 00 00    	jne    c000f6ac <scanMADT()+0x2e4>
c000f592:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f596:	8d 50 01             	lea    edx,[eax+0x1]
c000f599:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f59d:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5a3:	0f b6 d2             	movzx  edx,dl
c000f5a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5aa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5ae:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5b4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c1:	01 d0                	add    eax,edx
c000f5c3:	83 c0 2c             	add    eax,0x2c
c000f5c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c8:	0f b6 d0             	movzx  edx,al
c000f5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5cf:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5da:	0f b6 c0             	movzx  eax,al
c000f5dd:	c1 e0 08             	shl    eax,0x8
c000f5e0:	89 d1                	mov    ecx,edx
c000f5e2:	09 c1                	or     ecx,eax
c000f5e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e8:	8d 50 02             	lea    edx,[eax+0x2]
c000f5eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5ef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f5f3:	0f b6 c0             	movzx  eax,al
c000f5f6:	c1 e0 10             	shl    eax,0x10
c000f5f9:	09 c1                	or     ecx,eax
c000f5fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ff:	8d 50 03             	lea    edx,[eax+0x3]
c000f602:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f606:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f60a:	0f b6 c0             	movzx  eax,al
c000f60d:	c1 e0 18             	shl    eax,0x18
c000f610:	09 c1                	or     ecx,eax
c000f612:	89 ca                	mov    edx,ecx
c000f614:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f619:	0f b6 c0             	movzx  eax,al
c000f61c:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f623:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f628:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f62c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f630:	01 d0                	add    eax,edx
c000f632:	83 c0 2c             	add    eax,0x2c
c000f635:	8a 00                	mov    al,BYTE PTR [eax]
c000f637:	0f b6 d0             	movzx  edx,al
c000f63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f645:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f649:	0f b6 c0             	movzx  eax,al
c000f64c:	c1 e0 08             	shl    eax,0x8
c000f64f:	89 d1                	mov    ecx,edx
c000f651:	09 c1                	or     ecx,eax
c000f653:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f657:	8d 50 02             	lea    edx,[eax+0x2]
c000f65a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f65e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f662:	0f b6 c0             	movzx  eax,al
c000f665:	c1 e0 10             	shl    eax,0x10
c000f668:	09 c1                	or     ecx,eax
c000f66a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66e:	8d 50 03             	lea    edx,[eax+0x3]
c000f671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f675:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f679:	0f b6 c0             	movzx  eax,al
c000f67c:	c1 e0 18             	shl    eax,0x18
c000f67f:	09 c1                	or     ecx,eax
c000f681:	89 ca                	mov    edx,ecx
c000f683:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f688:	0f b6 c0             	movzx  eax,al
c000f68b:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f692:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f697:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f69c:	83 c0 01             	add    eax,0x1
c000f69f:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6a4:	e9 b3 01 00 00       	jmp    c000f85c <scanMADT()+0x494>
c000f6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6b1:	83 f8 02             	cmp    eax,0x2
c000f6b4:	0f 85 ea 00 00 00    	jne    c000f7a4 <scanMADT()+0x3dc>
c000f6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6be:	8d 50 01             	lea    edx,[eax+0x1]
c000f6c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6cd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d5:	8d 50 01             	lea    edx,[eax+0x1]
c000f6d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6e0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6e4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f6e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f0:	01 d0                	add    eax,edx
c000f6f2:	83 c0 2c             	add    eax,0x2c
c000f6f5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6f7:	0f b6 d0             	movzx  edx,al
c000f6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6fe:	8d 48 01             	lea    ecx,[eax+0x1]
c000f701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f705:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f709:	0f b6 c0             	movzx  eax,al
c000f70c:	c1 e0 08             	shl    eax,0x8
c000f70f:	89 d1                	mov    ecx,edx
c000f711:	09 c1                	or     ecx,eax
c000f713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f717:	8d 50 02             	lea    edx,[eax+0x2]
c000f71a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f71e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f722:	0f b6 c0             	movzx  eax,al
c000f725:	c1 e0 10             	shl    eax,0x10
c000f728:	09 c1                	or     ecx,eax
c000f72a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f72e:	8d 50 03             	lea    edx,[eax+0x3]
c000f731:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f735:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f739:	0f b6 c0             	movzx  eax,al
c000f73c:	c1 e0 18             	shl    eax,0x18
c000f73f:	09 c8                	or     eax,ecx
c000f741:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f745:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f74a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f752:	01 d0                	add    eax,edx
c000f754:	83 c0 2c             	add    eax,0x2c
c000f757:	8a 00                	mov    al,BYTE PTR [eax]
c000f759:	0f b6 c0             	movzx  eax,al
c000f75c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f760:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f763:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f767:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f76b:	0f b6 d2             	movzx  edx,dl
c000f76e:	c1 e2 08             	shl    edx,0x8
c000f771:	09 d0                	or     eax,edx
c000f773:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f778:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f77d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f782:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f786:	88 90 08 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc9f8],dl
c000f78c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f791:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f796:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f79e:	e9 b9 00 00 00       	jmp    c000f85c <scanMADT()+0x494>
c000f7a3:	90                   	nop
c000f7a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7a9:	83 f8 04             	cmp    eax,0x4
c000f7ac:	0f 85 9a 00 00 00    	jne    c000f84c <scanMADT()+0x484>
c000f7b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7b6:	8d 50 01             	lea    edx,[eax+0x1]
c000f7b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7c5:	0f b6 c0             	movzx  eax,al
c000f7c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7d4:	01 d0                	add    eax,edx
c000f7d6:	83 c0 2c             	add    eax,0x2c
c000f7d9:	8a 00                	mov    al,BYTE PTR [eax]
c000f7db:	0f b6 d0             	movzx  edx,al
c000f7de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7ed:	0f b6 c0             	movzx  eax,al
c000f7f0:	c1 e0 08             	shl    eax,0x8
c000f7f3:	09 d0                	or     eax,edx
c000f7f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7f9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f802:	8d 50 01             	lea    edx,[eax+0x1]
c000f805:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f809:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f80d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f811:	0f b6 c0             	movzx  eax,al
c000f814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f81c:	c1 e0 08             	shl    eax,0x8
c000f81f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f823:	89 c1                	mov    ecx,eax
c000f825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f829:	c1 e0 18             	shl    eax,0x18
c000f82c:	89 c3                	mov    ebx,eax
c000f82e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f833:	8d 50 01             	lea    edx,[eax+0x1]
c000f836:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f83c:	09 d9                	or     ecx,ebx
c000f83e:	89 ca                	mov    edx,ecx
c000f840:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f847:	eb 13                	jmp    c000f85c <scanMADT()+0x494>
c000f849:	8d 76 00             	lea    esi,[esi+0x0]
c000f84c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f851:	83 f8 05             	cmp    eax,0x5
c000f854:	75 06                	jne    c000f85c <scanMADT()+0x494>
c000f856:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f85b:	90                   	nop
c000f85c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f861:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f865:	01 d0                	add    eax,edx
c000f867:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f86b:	e9 50 fc ff ff       	jmp    c000f4c0 <scanMADT()+0xf8>
c000f870:	90                   	nop
c000f871:	eb 05                	jmp    c000f878 <scanMADT()+0x4b0>
c000f873:	90                   	nop
c000f874:	90                   	nop
c000f875:	8d 76 00             	lea    esi,[esi+0x0]
c000f878:	83 c4 38             	add    esp,0x38
c000f87b:	5b                   	pop    ebx
c000f87c:	c3                   	ret    
c000f87d:	90                   	nop
c000f87e:	66 90                	xchg   ax,ax

c000f880 <ACPI::ACPI()>:
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f887:	83 ec 08             	sub    esp,0x8
c000f88a:	68 11 1f 02 c0       	push   0xc0021f11
c000f88f:	50                   	push   eax
c000f890:	e8 65 d2 ff ff       	call   c000cafa <Device::Device(char const*)>
c000f895:	83 c4 10             	add    esp,0x10
c000f898:	ba 64 20 02 c0       	mov    edx,0xc0022064
c000f89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a1:	89 10                	mov    DWORD PTR [eax],edx
c000f8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8ca:	e8 f9 fa ff ff       	call   c000f3c8 <scanMADT()>
c000f8cf:	90                   	nop
c000f8d0:	83 c4 0c             	add    esp,0xc
c000f8d3:	c3                   	ret    

c000f8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f8d4:	83 ec 2c             	sub    esp,0x2c
c000f8d7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f8db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f8df:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f8e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f8e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f8ec:	88 d0                	mov    al,dl
c000f8ee:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f8f2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8f7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f8ff:	90                   	nop
c000f900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f904:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f90a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f90e:	0f 8d b0 00 00 00    	jge    c000f9c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f91c:	83 c2 2a             	add    edx,0x2a
c000f91f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f923:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f928:	0f b7 c0             	movzx  eax,ax
c000f92b:	39 c2                	cmp    edx,eax
c000f92d:	0f 85 85 00 00 00    	jne    c000f9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f933:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f937:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f93b:	83 c2 2a             	add    edx,0x2a
c000f93e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f942:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f947:	0f b6 c0             	movzx  eax,al
c000f94a:	39 c2                	cmp    edx,eax
c000f94c:	75 6a                	jne    c000f9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f94e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f953:	85 c0                	test   eax,eax
c000f955:	74 3d                	je     c000f994 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f95b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f95f:	83 c2 2a             	add    edx,0x2a
c000f962:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f966:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f96a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f96d:	39 c2                	cmp    edx,eax
c000f96f:	74 13                	je     c000f984 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	68 8c 1e 02 c0       	push   0xc0021e8c
c000f979:	e8 3d 1c 00 00       	call   c00115bb <KePanic(char const*)>
c000f97e:	83 c4 10             	add    esp,0x10
c000f981:	8d 76 00             	lea    esi,[esi+0x0]
c000f984:	83 ec 0c             	sub    esp,0xc
c000f987:	68 16 1f 02 c0       	push   0xc0021f16
c000f98c:	e8 2a 1c 00 00       	call   c00115bb <KePanic(char const*)>
c000f991:	83 c4 10             	add    esp,0x10
c000f994:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f99c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9a0:	83 c2 2a             	add    edx,0x2a
c000f9a3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9a7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9a9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9ac:	89 01                	mov    DWORD PTR [ecx],eax
c000f9ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9b1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9b6:	66 90                	xchg   ax,ax
c000f9b8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9bd:	e9 3e ff ff ff       	jmp    c000f900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9c2:	66 90                	xchg   ax,ax
c000f9c4:	90                   	nop
c000f9c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9c9:	83 c4 2c             	add    esp,0x2c
c000f9cc:	c2 04 00             	ret    0x4
c000f9cf:	90                   	nop

c000f9d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9d0:	83 ec 1c             	sub    esp,0x1c
c000f9d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f9db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f9df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f9e4:	88 c8                	mov    al,cl
c000f9e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f9ea:	88 d0                	mov    al,dl
c000f9ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9f4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9fe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa01:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa05:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa17:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa27:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa2d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa31:	83 c0 01             	add    eax,0x1
c000fa34:	88 c1                	mov    cl,al
c000fa36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa3a:	83 c2 2a             	add    edx,0x2a
c000fa3d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa45:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa4f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa52:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa56:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa5e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa64:	8d 50 01             	lea    edx,[eax+0x1]
c000fa67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa6b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa75:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa7b:	3d 00 02 00 00       	cmp    eax,0x200
c000fa80:	75 12                	jne    c000fa94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fa82:	83 ec 0c             	sub    esp,0xc
c000fa85:	68 25 1f 02 c0       	push   0xc0021f25
c000fa8a:	e8 2c 1b 00 00       	call   c00115bb <KePanic(char const*)>
c000fa8f:	83 c4 10             	add    esp,0x10
c000fa92:	66 90                	xchg   ax,ax
c000fa94:	90                   	nop
c000fa95:	83 c4 1c             	add    esp,0x1c
c000fa98:	c3                   	ret    
c000fa99:	90                   	nop
c000fa9a:	66 90                	xchg   ax,ax

c000fa9c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fa9c:	b8 00 00 00 00       	mov    eax,0x0
c000faa1:	c3                   	ret    
c000faa2:	66 90                	xchg   ax,ax

c000faa4 <ACPI::detectPCI()>:
c000faa4:	53                   	push   ebx
c000faa5:	83 ec 28             	sub    esp,0x28
c000faa8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000faad:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fab2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fab7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fabd:	83 e0 04             	and    eax,0x4
c000fac0:	0f b6 c0             	movzx  eax,al
c000fac3:	85 c0                	test   eax,eax
c000fac5:	74 2d                	je     c000faf4 <ACPI::detectPCI()+0x50>
c000fac7:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000facc:	83 ec 08             	sub    esp,0x8
c000facf:	68 42 1f 02 c0       	push   0xc0021f42
c000fad4:	50                   	push   eax
c000fad5:	e8 6e f8 ff ff       	call   c000f348 <findDataTable(unsigned char*, char*)>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fae1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fae6:	74 0c                	je     c000faf4 <ACPI::detectPCI()+0x50>
c000fae8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faed:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000faf2:	66 90                	xchg   ax,ax
c000faf4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fafc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb00:	8a 00                	mov    al,BYTE PTR [eax]
c000fb02:	0f b6 c0             	movzx  eax,al
c000fb05:	83 f8 01             	cmp    eax,0x1
c000fb08:	75 0e                	jne    c000fb18 <ACPI::detectPCI()+0x74>
c000fb0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb0f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb14:	eb 2e                	jmp    c000fb44 <ACPI::detectPCI()+0xa0>
c000fb16:	66 90                	xchg   ax,ax
c000fb18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb1c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb1e:	0f b6 c0             	movzx  eax,al
c000fb21:	83 f8 02             	cmp    eax,0x2
c000fb24:	75 1e                	jne    c000fb44 <ACPI::detectPCI()+0xa0>
c000fb26:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb2b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb30:	85 c0                	test   eax,eax
c000fb32:	74 10                	je     c000fb44 <ACPI::detectPCI()+0xa0>
c000fb34:	83 ec 0c             	sub    esp,0xc
c000fb37:	68 bc 1e 02 c0       	push   0xc0021ebc
c000fb3c:	e8 7a 1a 00 00       	call   c00115bb <KePanic(char const*)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb48:	83 f0 01             	xor    eax,0x1
c000fb4b:	0f b6 c0             	movzx  eax,al
c000fb4e:	85 c0                	test   eax,eax
c000fb50:	74 46                	je     c000fb98 <ACPI::detectPCI()+0xf4>
c000fb52:	e8 d9 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb5b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb60:	75 0e                	jne    c000fb70 <ACPI::detectPCI()+0xcc>
c000fb62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb67:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb6c:	eb 2a                	jmp    c000fb98 <ACPI::detectPCI()+0xf4>
c000fb6e:	66 90                	xchg   ax,ax
c000fb70:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fb75:	75 21                	jne    c000fb98 <ACPI::detectPCI()+0xf4>
c000fb77:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb7c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb81:	85 c0                	test   eax,eax
c000fb83:	74 13                	je     c000fb98 <ACPI::detectPCI()+0xf4>
c000fb85:	83 ec 0c             	sub    esp,0xc
c000fb88:	68 bc 1e 02 c0       	push   0xc0021ebc
c000fb8d:	e8 29 1a 00 00       	call   c00115bb <KePanic(char const*)>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	8d 76 00             	lea    esi,[esi+0x0]
c000fb98:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fb9d:	85 c0                	test   eax,eax
c000fb9f:	0f 84 87 00 00 00    	je     c000fc2c <ACPI::detectPCI()+0x188>
c000fba5:	83 ec 0c             	sub    esp,0xc
c000fba8:	68 47 1f 02 c0       	push   0xc0021f47
c000fbad:	e8 09 13 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbbd:	83 ec 0c             	sub    esp,0xc
c000fbc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbc4:	e8 ed 7e ff ff       	call   c0007ab6 <malloc>
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	89 c3                	mov    ebx,eax
c000fbce:	83 ec 0c             	sub    esp,0xc
c000fbd1:	53                   	push   ebx
c000fbd2:	e8 41 b5 00 00       	call   c001b118 <PCI::PCI()>
c000fbd7:	83 c4 10             	add    esp,0x10
c000fbda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fbde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbe2:	83 ec 08             	sub    esp,0x8
c000fbe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbe9:	50                   	push   eax
c000fbea:	e8 73 cd ff ff       	call   c000c962 <Device::addChild(Device*)>
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbf6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbf8:	83 c0 08             	add    eax,0x8
c000fbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbfd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc02:	85 d2                	test   edx,edx
c000fc04:	74 0a                	je     c000fc10 <ACPI::detectPCI()+0x16c>
c000fc06:	ba 01 00 00 00       	mov    edx,0x1
c000fc0b:	eb 0b                	jmp    c000fc18 <ACPI::detectPCI()+0x174>
c000fc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc10:	ba 02 00 00 00       	mov    edx,0x2
c000fc15:	8d 76 00             	lea    esi,[esi+0x0]
c000fc18:	6a 00                	push   0x0
c000fc1a:	6a 00                	push   0x0
c000fc1c:	52                   	push   edx
c000fc1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc21:	ff d0                	call   eax
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	e9 91 00 00 00       	jmp    c000fcbc <ACPI::detectPCI()+0x218>
c000fc2b:	90                   	nop
c000fc2c:	83 ec 0c             	sub    esp,0xc
c000fc2f:	68 5f 1f 02 c0       	push   0xc0021f5f
c000fc34:	e8 82 12 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc43:	83 ec 0c             	sub    esp,0xc
c000fc46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc4a:	e8 67 7e ff ff       	call   c0007ab6 <malloc>
c000fc4f:	83 c4 10             	add    esp,0x10
c000fc52:	89 c3                	mov    ebx,eax
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	53                   	push   ebx
c000fc58:	e8 55 c0 00 00       	call   c001bcb2 <IDE::IDE()>
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc68:	83 ec 08             	sub    esp,0x8
c000fc6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc6f:	50                   	push   eax
c000fc70:	e8 ed cc ff ff       	call   c000c962 <Device::addChild(Device*)>
c000fc75:	83 c4 10             	add    esp,0x10
c000fc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc7c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fc86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc8a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fc93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc97:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fca0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca6:	83 c0 08             	add    eax,0x8
c000fca9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcab:	6a 00                	push   0x0
c000fcad:	6a 00                	push   0x0
c000fcaf:	6a 00                	push   0x0
c000fcb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcb5:	ff d0                	call   eax
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	66 90                	xchg   ax,ax
c000fcbc:	90                   	nop
c000fcbd:	83 c4 28             	add    esp,0x28
c000fcc0:	5b                   	pop    ebx
c000fcc1:	c3                   	ret    
c000fcc2:	66 90                	xchg   ax,ax

c000fcc4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fcc4:	83 ec 1c             	sub    esp,0x1c
c000fcc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fccb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fcce:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcd2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcd7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fcdc:	83 ec 08             	sub    esp,0x8
c000fcdf:	52                   	push   edx
c000fce0:	50                   	push   eax
c000fce1:	e8 92 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fced:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcf2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fcf7:	83 ec 04             	sub    esp,0x4
c000fcfa:	6a 01                	push   0x1
c000fcfc:	52                   	push   edx
c000fcfd:	50                   	push   eax
c000fcfe:	e8 8f 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	90                   	nop
c000fd07:	83 c4 1c             	add    esp,0x1c
c000fd0a:	c3                   	ret    
c000fd0b:	90                   	nop

c000fd0c <ACPI::sleep()>:
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd14:	85 c0                	test   eax,eax
c000fd16:	74 08                	je     c000fd20 <ACPI::sleep()+0x14>
c000fd18:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd1d:	ff d0                	call   eax
c000fd1f:	90                   	nop
c000fd20:	90                   	nop
c000fd21:	83 c4 0c             	add    esp,0xc
c000fd24:	c3                   	ret    
c000fd25:	90                   	nop
c000fd26:	66 90                	xchg   ax,ax

c000fd28 <ACPI::open(int, int, void*)>:
c000fd28:	57                   	push   edi
c000fd29:	56                   	push   esi
c000fd2a:	53                   	push   ebx
c000fd2b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fd31:	83 ec 0c             	sub    esp,0xc
c000fd34:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fd3b:	e8 64 fd ff ff       	call   c000faa4 <ACPI::detectPCI()>
c000fd40:	83 c4 10             	add    esp,0x10
c000fd43:	83 ec 0c             	sub    esp,0xc
c000fd46:	68 e4 1e 02 c0       	push   0xc0021ee4
c000fd4b:	e8 6b 11 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000fd50:	83 c4 10             	add    esp,0x10
c000fd53:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd58:	8a 00                	mov    al,BYTE PTR [eax]
c000fd5a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fd61:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fd69:	83 f8 01             	cmp    eax,0x1
c000fd6c:	75 12                	jne    c000fd80 <ACPI::open(int, int, void*)+0x58>
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	68 4f 18 02 c0       	push   0xc002184f
c000fd76:	e8 ea 4d 00 00       	call   c0014b65 <Thr::loadKernelSymbolTable(char const*)>
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	eb 34                	jmp    c000fdb4 <ACPI::open(int, int, void*)+0x8c>
c000fd80:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fd88:	3d bb 00 00 00       	cmp    eax,0xbb
c000fd8d:	75 15                	jne    c000fda4 <ACPI::open(int, int, void*)+0x7c>
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	68 74 1f 02 c0       	push   0xc0021f74
c000fd97:	e8 c9 4d 00 00       	call   c0014b65 <Thr::loadKernelSymbolTable(char const*)>
c000fd9c:	83 c4 10             	add    esp,0x10
c000fd9f:	eb 13                	jmp    c000fdb4 <ACPI::open(int, int, void*)+0x8c>
c000fda1:	8d 76 00             	lea    esi,[esi+0x0]
c000fda4:	83 ec 0c             	sub    esp,0xc
c000fda7:	68 92 1f 02 c0       	push   0xc0021f92
c000fdac:	e8 0a 18 00 00       	call   c00115bb <KePanic(char const*)>
c000fdb1:	83 c4 10             	add    esp,0x10
c000fdb4:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fdbc:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fdc7:	83 ec 0c             	sub    esp,0xc
c000fdca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fdd1:	e8 e0 7c ff ff       	call   c0007ab6 <malloc>
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	89 c3                	mov    ebx,eax
c000fddb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fde0:	83 ec 04             	sub    esp,0x4
c000fde3:	50                   	push   eax
c000fde4:	68 ac 1f 02 c0       	push   0xc0021fac
c000fde9:	53                   	push   ebx
c000fdea:	e8 fb bc ff ff       	call   c000baea <File::File(char const*, Process*)>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fdf9:	83 ec 08             	sub    esp,0x8
c000fdfc:	6a 01                	push   0x1
c000fdfe:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe05:	e8 fe bc ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe14:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe1c:	75 16                	jne    c000fe34 <ACPI::open(int, int, void*)+0x10c>
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe28:	e8 39 bd ff ff       	call   c000bb66 <File::close()>
c000fe2d:	83 c4 10             	add    esp,0x10
c000fe30:	eb 0a                	jmp    c000fe3c <ACPI::open(int, int, void*)+0x114>
c000fe32:	66 90                	xchg   ax,ax
c000fe34:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fe3c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fe44:	74 1e                	je     c000fe64 <ACPI::open(int, int, void*)+0x13c>
c000fe46:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fe4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4f:	83 c0 08             	add    eax,0x8
c000fe52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe54:	83 ec 0c             	sub    esp,0xc
c000fe57:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe5e:	ff d0                	call   eax
c000fe60:	83 c4 10             	add    esp,0x10
c000fe63:	90                   	nop
c000fe64:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fe6b:	83 f0 01             	xor    eax,0x1
c000fe6e:	0f b6 c0             	movzx  eax,al
c000fe71:	85 c0                	test   eax,eax
c000fe73:	74 43                	je     c000feb8 <ACPI::open(int, int, void*)+0x190>
c000fe75:	83 ec 0c             	sub    esp,0xc
c000fe78:	68 ca 1f 02 c0       	push   0xc0021fca
c000fe7d:	e8 39 10 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000fe82:	83 c4 10             	add    esp,0x10
c000fe85:	83 ec 04             	sub    esp,0x4
c000fe88:	6a 0c                	push   0xc
c000fe8a:	68 e5 1f 02 c0       	push   0xc0021fe5
c000fe8f:	68 f6 1f 02 c0       	push   0xc0021ff6
c000fe94:	e8 4f 3f 00 00       	call   c0013de8 <Reg::readIntWithDefault(char*, char*, int)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fea3:	83 ec 0c             	sub    esp,0xc
c000fea6:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fead:	e8 8a 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000feb2:	83 c4 10             	add    esp,0x10
c000feb5:	8d 76 00             	lea    esi,[esi+0x0]
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	68 95 0a 02 c0       	push   0xc0020a95
c000fec0:	e8 f6 0f 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fecf:	83 ec 08             	sub    esp,0x8
c000fed2:	6a 13                	push   0x13
c000fed4:	50                   	push   eax
c000fed5:	e8 a0 cd ff ff       	call   c000cc7a <getDevicesOfType(DeviceType)>
c000feda:	83 c4 0c             	add    esp,0xc
c000fedd:	8d 76 00             	lea    esi,[esi+0x0]
c000fee0:	83 ec 0c             	sub    esp,0xc
c000fee3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000feea:	50                   	push   eax
c000feeb:	e8 a0 ff 00 00       	call   c001fe90 <LinkedList<Device>::isEmpty()>
c000fef0:	83 c4 10             	add    esp,0x10
c000fef3:	83 f0 01             	xor    eax,0x1
c000fef6:	0f b6 c0             	movzx  eax,al
c000fef9:	85 c0                	test   eax,eax
c000fefb:	0f 84 47 01 00 00    	je     c0010048 <ACPI::open(int, int, void*)+0x320>
c000ff01:	83 ec 0c             	sub    esp,0xc
c000ff04:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff0b:	50                   	push   eax
c000ff0c:	e8 9b ff 00 00       	call   c001feac <LinkedList<Device>::getFirstElement()>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff1b:	83 ec 0c             	sub    esp,0xc
c000ff1e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff25:	50                   	push   eax
c000ff26:	e8 89 ff 00 00       	call   c001feb4 <LinkedList<Device>::removeFirst()>
c000ff2b:	83 c4 10             	add    esp,0x10
c000ff2e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ff35:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ff3c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ff43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff47:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ff4d:	ba 09 00 00 00       	mov    edx,0x9
c000ff52:	fc                   	cld    
c000ff53:	89 c7                	mov    edi,eax
c000ff55:	89 de                	mov    esi,ebx
c000ff57:	89 d1                	mov    ecx,edx
c000ff59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff5b:	83 ec 08             	sub    esp,0x8
c000ff5e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ff62:	50                   	push   eax
c000ff63:	83 ec 24             	sub    esp,0x24
c000ff66:	89 e0                	mov    eax,esp
c000ff68:	89 c3                	mov    ebx,eax
c000ff6a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ff6e:	ba 09 00 00 00       	mov    edx,0x9
c000ff73:	89 df                	mov    edi,ebx
c000ff75:	89 c6                	mov    esi,eax
c000ff77:	89 d1                	mov    ecx,edx
c000ff79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff7b:	e8 82 b6 00 00       	call   c001b602 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ff80:	83 c4 30             	add    esp,0x30
c000ff83:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ff8a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ff92:	0f 84 48 ff ff ff    	je     c000fee0 <ACPI::open(int, int, void*)+0x1b8>
c000ff98:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ffa3:	83 ec 0c             	sub    esp,0xc
c000ffa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ffad:	e8 04 7b ff ff       	call   c0007ab6 <malloc>
c000ffb2:	83 c4 10             	add    esp,0x10
c000ffb5:	89 c3                	mov    ebx,eax
c000ffb7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ffbc:	83 ec 04             	sub    esp,0x4
c000ffbf:	50                   	push   eax
c000ffc0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ffc7:	53                   	push   ebx
c000ffc8:	e8 1d bb ff ff       	call   c000baea <File::File(char const*, Process*)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ffd7:	83 ec 0c             	sub    esp,0xc
c000ffda:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ffe1:	e8 e6 bd ff ff       	call   c000bdcc <File::exists()>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	0f b6 c0             	movzx  eax,al
c000ffec:	85 c0                	test   eax,eax
c000ffee:	74 28                	je     c0010018 <ACPI::open(int, int, void*)+0x2f0>
c000fff0:	83 ec 08             	sub    esp,0x8
c000fff3:	6a 01                	push   0x1
c000fff5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fffc:	e8 de 55 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c0010001:	83 c4 10             	add    esp,0x10
c0010004:	83 ec 08             	sub    esp,0x8
c0010007:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001000e:	50                   	push   eax
c001000f:	e8 fc 57 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c0010014:	83 c4 10             	add    esp,0x10
c0010017:	90                   	nop
c0010018:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010020:	0f 84 ba fe ff ff    	je     c000fee0 <ACPI::open(int, int, void*)+0x1b8>
c0010026:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001002d:	8b 00                	mov    eax,DWORD PTR [eax]
c001002f:	83 c0 08             	add    eax,0x8
c0010032:	8b 00                	mov    eax,DWORD PTR [eax]
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001003e:	ff d0                	call   eax
c0010040:	83 c4 10             	add    esp,0x10
c0010043:	e9 98 fe ff ff       	jmp    c000fee0 <ACPI::open(int, int, void*)+0x1b8>
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010052:	50                   	push   eax
c0010053:	e8 34 fe 00 00       	call   c001fe8c <LinkedList<Device>::~LinkedList()>
c0010058:	83 c4 10             	add    esp,0x10
c001005b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010061:	83 ec 08             	sub    esp,0x8
c0010064:	6a 01                	push   0x1
c0010066:	68 fd 1f 02 c0       	push   0xc0021ffd
c001006b:	e8 6f 55 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	83 ec 08             	sub    esp,0x8
c0010076:	53                   	push   ebx
c0010077:	50                   	push   eax
c0010078:	e8 93 57 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010085:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001008b:	83 e0 04             	and    eax,0x4
c001008e:	0f b6 c0             	movzx  eax,al
c0010091:	85 c0                	test   eax,eax
c0010093:	0f 84 1b 01 00 00    	je     c00101b4 <ACPI::open(int, int, void*)+0x48c>
c0010099:	83 ec 0c             	sub    esp,0xc
c001009c:	68 1a 20 02 c0       	push   0xc002201a
c00100a1:	e8 15 0e 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c00100a6:	83 c4 10             	add    esp,0x10
c00100a9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00100be:	e8 f3 79 ff ff       	call   c0007ab6 <malloc>
c00100c3:	83 c4 10             	add    esp,0x10
c00100c6:	89 c3                	mov    ebx,eax
c00100c8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100cd:	83 ec 04             	sub    esp,0x4
c00100d0:	50                   	push   eax
c00100d1:	68 37 20 02 c0       	push   0xc0022037
c00100d6:	53                   	push   ebx
c00100d7:	e8 0e ba ff ff       	call   c000baea <File::File(char const*, Process*)>
c00100dc:	83 c4 10             	add    esp,0x10
c00100df:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00100e6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00100ee:	74 20                	je     c0010110 <ACPI::open(int, int, void*)+0x3e8>
c00100f0:	83 ec 0c             	sub    esp,0xc
c00100f3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00100fa:	e8 cd bc ff ff       	call   c000bdcc <File::exists()>
c00100ff:	83 c4 10             	add    esp,0x10
c0010102:	0f b6 c0             	movzx  eax,al
c0010105:	85 c0                	test   eax,eax
c0010107:	74 07                	je     c0010110 <ACPI::open(int, int, void*)+0x3e8>
c0010109:	b0 01                	mov    al,0x1
c001010b:	eb 07                	jmp    c0010114 <ACPI::open(int, int, void*)+0x3ec>
c001010d:	8d 76 00             	lea    esi,[esi+0x0]
c0010110:	b0 00                	mov    al,0x0
c0010112:	66 90                	xchg   ax,ax
c0010114:	0f b6 c0             	movzx  eax,al
c0010117:	85 c0                	test   eax,eax
c0010119:	74 25                	je     c0010140 <ACPI::open(int, int, void*)+0x418>
c001011b:	83 ec 08             	sub    esp,0x8
c001011e:	6a 01                	push   0x1
c0010120:	68 37 20 02 c0       	push   0xc0022037
c0010125:	e8 b5 54 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c001012a:	83 c4 10             	add    esp,0x10
c001012d:	83 ec 08             	sub    esp,0x8
c0010130:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010137:	50                   	push   eax
c0010138:	e8 d3 56 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c001013d:	83 c4 10             	add    esp,0x10
c0010140:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010148:	74 2a                	je     c0010174 <ACPI::open(int, int, void*)+0x44c>
c001014a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010152:	74 20                	je     c0010174 <ACPI::open(int, int, void*)+0x44c>
c0010154:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001015b:	8b 00                	mov    eax,DWORD PTR [eax]
c001015d:	83 c0 08             	add    eax,0x8
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	83 ec 0c             	sub    esp,0xc
c0010165:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001016c:	ff d0                	call   eax
c001016e:	83 c4 10             	add    esp,0x10
c0010171:	8d 76 00             	lea    esi,[esi+0x0]
c0010174:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010179:	83 ec 08             	sub    esp,0x8
c001017c:	68 54 20 02 c0       	push   0xc0022054
c0010181:	50                   	push   eax
c0010182:	e8 c1 f1 ff ff       	call   c000f348 <findDataTable(unsigned char*, char*)>
c0010187:	83 c4 10             	add    esp,0x10
c001018a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010191:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010199:	74 19                	je     c00101b4 <ACPI::open(int, int, void*)+0x48c>
c001019b:	83 ec 08             	sub    esp,0x8
c001019e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00101a5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00101ac:	e8 13 fb ff ff       	call   c000fcc4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101b1:	83 c4 10             	add    esp,0x10
c00101b4:	b8 00 00 00 00       	mov    eax,0x0
c00101b9:	81 c4 70 01 00 00    	add    esp,0x170
c00101bf:	5b                   	pop    ebx
c00101c0:	5e                   	pop    esi
c00101c1:	5f                   	pop    edi
c00101c2:	c3                   	ret    
c00101c3:	90                   	nop

c00101c4 <CPU::close(int, int, void*)>:
c00101c4:	31 c0                	xor    eax,eax
c00101c6:	c3                   	ret    
c00101c7:	90                   	nop

c00101c8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101c8:	60                   	pusha  
c00101c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00101d5:	9c                   	pushf  
c00101d6:	fa                   	cli    
c00101d7:	0f 09                	wbinvd 
c00101d9:	0f 30                	wrmsr  
c00101db:	9d                   	popf   
c00101dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101e0:	89 02                	mov    DWORD PTR [edx],eax
c00101e2:	61                   	popa   
c00101e3:	c3                   	ret    

c00101e4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00101e4:	60                   	pusha  
c00101e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101e9:	9c                   	pushf  
c00101ea:	fa                   	cli    
c00101eb:	0f 09                	wbinvd 
c00101ed:	31 c0                	xor    eax,eax
c00101ef:	31 d2                	xor    edx,edx
c00101f1:	0f 32                	rdmsr  
c00101f3:	9d                   	popf   
c00101f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101f8:	89 02                	mov    DWORD PTR [edx],eax
c00101fa:	61                   	popa   
c00101fb:	c3                   	ret    

c00101fc <CPU::AMD_K6_writeback(int, int, int)>:
c00101fc:	56                   	push   esi
c00101fd:	53                   	push   ebx
c00101fe:	83 ec 10             	sub    esp,0x10
c0010201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010205:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001020a:	75 5d                	jne    c0010269 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001020c:	83 f8 08             	cmp    eax,0x8
c001020f:	75 09                	jne    c001021a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010211:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010216:	7e 13                	jle    c001022b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010218:	eb 30                	jmp    c001024a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001021a:	83 f8 06             	cmp    eax,0x6
c001021d:	7c 4a                	jl     c0010269 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001021f:	83 f8 07             	cmp    eax,0x7
c0010222:	7e 07                	jle    c001022b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010224:	83 f8 09             	cmp    eax,0x9
c0010227:	74 21                	je     c001024a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010229:	eb 3e                	jmp    c0010269 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001022b:	89 e6                	mov    esi,esp
c001022d:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010233:	56                   	push   esi
c0010234:	c1 eb 15             	shr    ebx,0x15
c0010237:	68 82 00 00 c0       	push   0xc0000082
c001023c:	83 e3 7e             	and    ebx,0x7e
c001023f:	e8 a0 ff ff ff       	call   c00101e4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010244:	56                   	push   esi
c0010245:	6a 00                	push   0x0
c0010247:	53                   	push   ebx
c0010248:	eb 12                	jmp    c001025c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001024a:	89 e3                	mov    ebx,esp
c001024c:	53                   	push   ebx
c001024d:	68 82 00 00 c0       	push   0xc0000082
c0010252:	e8 8d ff ff ff       	call   c00101e4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010257:	53                   	push   ebx
c0010258:	6a 00                	push   0x0
c001025a:	6a 00                	push   0x0
c001025c:	68 82 00 00 c0       	push   0xc0000082
c0010261:	e8 62 ff ff ff       	call   c00101c8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010266:	83 c4 18             	add    esp,0x18
c0010269:	83 c4 10             	add    esp,0x10
c001026c:	5b                   	pop    ebx
c001026d:	5e                   	pop    esi
c001026e:	c3                   	ret    
c001026f:	90                   	nop

c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010270:	55                   	push   ebp
c0010271:	57                   	push   edi
c0010272:	56                   	push   esi
c0010273:	53                   	push   ebx
c0010274:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010278:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001027c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010280:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010284:	39 05 18 36 02 c0    	cmp    DWORD PTR ds:0xc0023618,eax
c001028a:	75 23                	jne    c00102af <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001028c:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010291:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010295:	89 06                	mov    DWORD PTR [esi],eax
c0010297:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001029c:	89 07                	mov    DWORD PTR [edi],eax
c001029e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102a6:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102ab:	89 02                	mov    DWORD PTR [edx],eax
c00102ad:	eb 3f                	jmp    c00102ee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102af:	31 c9                	xor    ecx,ecx
c00102b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102b5:	0f a2                	cpuid  
c00102b7:	89 06                	mov    DWORD PTR [esi],eax
c00102b9:	89 1f                	mov    DWORD PTR [edi],ebx
c00102bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102bf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102c2:	89 10                	mov    DWORD PTR [eax],edx
c00102c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102c8:	a3 18 36 02 c0       	mov    ds:0xc0023618,eax
c00102cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00102cf:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00102d4:	8b 07                	mov    eax,DWORD PTR [edi]
c00102d6:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00102db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102de:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00102e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00102e9:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00102ee:	5b                   	pop    ebx
c00102ef:	5e                   	pop    esi
c00102f0:	5f                   	pop    edi
c00102f1:	5d                   	pop    ebp
c00102f2:	c3                   	ret    
c00102f3:	90                   	nop

c00102f4 <CPU::cpuidCheckEDX(unsigned int)>:
c00102f4:	83 ec 10             	sub    esp,0x10
c00102f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102fb:	50                   	push   eax
c00102fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010300:	50                   	push   eax
c0010301:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010305:	50                   	push   eax
c0010306:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001030a:	50                   	push   eax
c001030b:	6a 01                	push   0x1
c001030d:	e8 5e ff ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010312:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010316:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001031a:	0f 95 c0             	setne  al
c001031d:	83 c4 24             	add    esp,0x24
c0010320:	c3                   	ret    
c0010321:	90                   	nop

c0010322 <CPU::cpuidCheckECX(unsigned int)>:
c0010322:	83 ec 10             	sub    esp,0x10
c0010325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010329:	50                   	push   eax
c001032a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001032e:	50                   	push   eax
c001032f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010333:	50                   	push   eax
c0010334:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010338:	50                   	push   eax
c0010339:	6a 01                	push   0x1
c001033b:	e8 30 ff ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010340:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010344:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010348:	0f 95 c0             	setne  al
c001034b:	83 c4 24             	add    esp,0x24
c001034e:	c3                   	ret    
c001034f:	90                   	nop

c0010350 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010350:	83 ec 10             	sub    esp,0x10
c0010353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010357:	50                   	push   eax
c0010358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035c:	50                   	push   eax
c001035d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010361:	50                   	push   eax
c0010362:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010366:	50                   	push   eax
c0010367:	6a 07                	push   0x7
c0010369:	e8 02 ff ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001036e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010372:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010376:	0f 95 c0             	setne  al
c0010379:	83 c4 24             	add    esp,0x24
c001037c:	c3                   	ret    
c001037d:	90                   	nop

c001037e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001037e:	83 ec 10             	sub    esp,0x10
c0010381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010385:	50                   	push   eax
c0010386:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038a:	50                   	push   eax
c001038b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038f:	50                   	push   eax
c0010390:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010394:	50                   	push   eax
c0010395:	6a 07                	push   0x7
c0010397:	e8 d4 fe ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001039c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103a4:	0f 95 c0             	setne  al
c00103a7:	83 c4 24             	add    esp,0x24
c00103aa:	c3                   	ret    
c00103ab:	90                   	nop

c00103ac <CPU::CPU()>:
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103b3:	83 ec 08             	sub    esp,0x8
c00103b6:	68 79 21 02 c0       	push   0xc0022179
c00103bb:	50                   	push   eax
c00103bc:	e8 39 c7 ff ff       	call   c000cafa <Device::Device(char const*)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	ba 0c 22 02 c0       	mov    edx,0xc002220c
c00103c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103cd:	89 10                	mov    DWORD PTR [eax],edx
c00103cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103d3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00103dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e1:	05 78 01 00 00       	add    eax,0x178
c00103e6:	83 ec 0c             	sub    esp,0xc
c00103e9:	50                   	push   eax
c00103ea:	e8 6d 6f ff ff       	call   c000735c <GDT::GDT()>
c00103ef:	83 c4 10             	add    esp,0x10
c00103f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f6:	05 7c 09 00 00       	add    eax,0x97c
c00103fb:	83 ec 0c             	sub    esp,0xc
c00103fe:	50                   	push   eax
c00103ff:	e8 a8 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040b:	05 7c 11 00 00       	add    eax,0x117c
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	50                   	push   eax
c0010414:	e8 2b 8b ff ff       	call   c0008f44 <TSS::TSS()>
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010420:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010435:	90                   	nop
c0010436:	83 c4 0c             	add    esp,0xc
c0010439:	c3                   	ret    

c001043a <CPU::displayFeatures()>:
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <CPU::detectFeatures()>:
c001043c:	55                   	push   ebp
c001043d:	57                   	push   edi
c001043e:	56                   	push   esi
c001043f:	53                   	push   ebx
c0010440:	83 ec 30             	sub    esp,0x30
c0010443:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010447:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010451:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010458:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001045e:	6a 0d                	push   0xd
c0010460:	6a 00                	push   0x0
c0010462:	55                   	push   ebp
c0010463:	e8 88 00 ff ff       	call   c00004f0 <memset>
c0010468:	83 c4 10             	add    esp,0x10
c001046b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010470:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010477:	0f 84 db 05 00 00    	je     c0010a58 <CPU::detectFeatures()+0x61c>
c001047d:	83 ec 0c             	sub    esp,0xc
c0010480:	89 ef                	mov    edi,ebp
c0010482:	6a 10                	push   0x10
c0010484:	e8 6b fe ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0010489:	83 e0 01             	and    eax,0x1
c001048c:	8d 14 00             	lea    edx,[eax+eax*1]
c001048f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010495:	83 e0 fd             	and    eax,0xfffffffd
c0010498:	09 d0                	or     eax,edx
c001049a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104a0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104a7:	e8 48 fe ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c00104ac:	83 e0 01             	and    eax,0x1
c00104af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104b6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104bc:	83 e0 fb             	and    eax,0xfffffffb
c00104bf:	09 d0                	or     eax,edx
c00104c1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104ce:	e8 21 fe ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c00104d3:	83 e0 01             	and    eax,0x1
c00104d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00104dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e3:	83 e0 f7             	and    eax,0xfffffff7
c00104e6:	09 d0                	or     eax,edx
c00104e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104ee:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00104f5:	e8 fa fd ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c00104fa:	83 e0 01             	and    eax,0x1
c00104fd:	c1 e0 04             	shl    eax,0x4
c0010500:	89 c2                	mov    edx,eax
c0010502:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010508:	83 e0 ef             	and    eax,0xffffffef
c001050b:	09 d0                	or     eax,edx
c001050d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010513:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001051a:	e8 d5 fd ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c001051f:	83 e0 01             	and    eax,0x1
c0010522:	c1 e0 05             	shl    eax,0x5
c0010525:	89 c2                	mov    edx,eax
c0010527:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052d:	83 e0 df             	and    eax,0xffffffdf
c0010530:	09 d0                	or     eax,edx
c0010532:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010538:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001053f:	e8 b0 fd ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0010544:	83 e0 01             	and    eax,0x1
c0010547:	8d 14 00             	lea    edx,[eax+eax*1]
c001054a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010550:	83 e0 fd             	and    eax,0xfffffffd
c0010553:	09 d0                	or     eax,edx
c0010555:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001055b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010562:	e8 8d fd ff ff       	call   c00102f4 <CPU::cpuidCheckEDX(unsigned int)>
c0010567:	83 e0 01             	and    eax,0x1
c001056a:	c1 e0 06             	shl    eax,0x6
c001056d:	89 c2                	mov    edx,eax
c001056f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010575:	83 e0 bf             	and    eax,0xffffffbf
c0010578:	09 d0                	or     eax,edx
c001057a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010580:	58                   	pop    eax
c0010581:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010585:	50                   	push   eax
c0010586:	8d 44 24 28          	lea    eax,[esp+0x28]
c001058a:	50                   	push   eax
c001058b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001058f:	56                   	push   esi
c0010590:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010594:	50                   	push   eax
c0010595:	6a 00                	push   0x0
c0010597:	e8 d4 fc ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001059c:	b8 04 00 00 00       	mov    eax,0x4
c00105a1:	89 c1                	mov    ecx,eax
c00105a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105a5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105ab:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105af:	89 c1                	mov    ecx,eax
c00105b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105b3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105b9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105bd:	89 c1                	mov    ecx,eax
c00105bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c1:	83 c4 18             	add    esp,0x18
c00105c4:	68 88 20 02 c0       	push   0xc0022088
c00105c9:	55                   	push   ebp
c00105ca:	e8 81 01 ff ff       	call   c0000750 <strcmp>
c00105cf:	83 c4 10             	add    esp,0x10
c00105d2:	85 c0                	test   eax,eax
c00105d4:	75 0f                	jne    c00105e5 <CPU::detectFeatures()+0x1a9>
c00105d6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00105e0:	e9 22 02 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00105e5:	50                   	push   eax
c00105e6:	50                   	push   eax
c00105e7:	68 95 20 02 c0       	push   0xc0022095
c00105ec:	55                   	push   ebp
c00105ed:	e8 5e 01 ff ff       	call   c0000750 <strcmp>
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	85 c0                	test   eax,eax
c00105f7:	74 dd                	je     c00105d6 <CPU::detectFeatures()+0x19a>
c00105f9:	50                   	push   eax
c00105fa:	50                   	push   eax
c00105fb:	68 a2 20 02 c0       	push   0xc00220a2
c0010600:	55                   	push   ebp
c0010601:	e8 4a 01 ff ff       	call   c0000750 <strcmp>
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	85 c0                	test   eax,eax
c001060b:	74 2a                	je     c0010637 <CPU::detectFeatures()+0x1fb>
c001060d:	50                   	push   eax
c001060e:	50                   	push   eax
c001060f:	68 af 20 02 c0       	push   0xc00220af
c0010614:	55                   	push   ebp
c0010615:	e8 36 01 ff ff       	call   c0000750 <strcmp>
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	85 c0                	test   eax,eax
c001061f:	74 16                	je     c0010637 <CPU::detectFeatures()+0x1fb>
c0010621:	50                   	push   eax
c0010622:	50                   	push   eax
c0010623:	68 bc 20 02 c0       	push   0xc00220bc
c0010628:	55                   	push   ebp
c0010629:	e8 22 01 ff ff       	call   c0000750 <strcmp>
c001062e:	83 c4 10             	add    esp,0x10
c0010631:	85 c0                	test   eax,eax
c0010633:	74 48                	je     c001067d <CPU::detectFeatures()+0x241>
c0010635:	eb 0f                	jmp    c0010646 <CPU::detectFeatures()+0x20a>
c0010637:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010641:	e9 c1 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c0010646:	50                   	push   eax
c0010647:	50                   	push   eax
c0010648:	68 c9 20 02 c0       	push   0xc00220c9
c001064d:	55                   	push   ebp
c001064e:	e8 fd 00 ff ff       	call   c0000750 <strcmp>
c0010653:	83 c4 10             	add    esp,0x10
c0010656:	85 c0                	test   eax,eax
c0010658:	74 23                	je     c001067d <CPU::detectFeatures()+0x241>
c001065a:	57                   	push   edi
c001065b:	57                   	push   edi
c001065c:	68 d6 20 02 c0       	push   0xc00220d6
c0010661:	55                   	push   ebp
c0010662:	e8 e9 00 ff ff       	call   c0000750 <strcmp>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	85 c0                	test   eax,eax
c001066c:	75 1e                	jne    c001068c <CPU::detectFeatures()+0x250>
c001066e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010678:	e9 8a 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c001067d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010687:	e9 7b 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c001068c:	56                   	push   esi
c001068d:	56                   	push   esi
c001068e:	68 e3 20 02 c0       	push   0xc00220e3
c0010693:	55                   	push   ebp
c0010694:	e8 b7 00 ff ff       	call   c0000750 <strcmp>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	85 c0                	test   eax,eax
c001069e:	75 0f                	jne    c00106af <CPU::detectFeatures()+0x273>
c00106a0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106aa:	e9 58 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00106af:	51                   	push   ecx
c00106b0:	51                   	push   ecx
c00106b1:	68 a2 20 02 c0       	push   0xc00220a2
c00106b6:	55                   	push   ebp
c00106b7:	e8 94 00 ff ff       	call   c0000750 <strcmp>
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	85 c0                	test   eax,eax
c00106c1:	75 0f                	jne    c00106d2 <CPU::detectFeatures()+0x296>
c00106c3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106cd:	e9 35 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00106d2:	52                   	push   edx
c00106d3:	52                   	push   edx
c00106d4:	68 f0 20 02 c0       	push   0xc00220f0
c00106d9:	55                   	push   ebp
c00106da:	e8 71 00 ff ff       	call   c0000750 <strcmp>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	85 c0                	test   eax,eax
c00106e4:	75 0f                	jne    c00106f5 <CPU::detectFeatures()+0x2b9>
c00106e6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00106f0:	e9 12 01 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00106f5:	50                   	push   eax
c00106f6:	50                   	push   eax
c00106f7:	68 fd 20 02 c0       	push   0xc00220fd
c00106fc:	55                   	push   ebp
c00106fd:	e8 4e 00 ff ff       	call   c0000750 <strcmp>
c0010702:	83 c4 10             	add    esp,0x10
c0010705:	85 c0                	test   eax,eax
c0010707:	75 0f                	jne    c0010718 <CPU::detectFeatures()+0x2dc>
c0010709:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010713:	e9 ef 00 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c0010718:	50                   	push   eax
c0010719:	50                   	push   eax
c001071a:	68 0a 21 02 c0       	push   0xc002210a
c001071f:	55                   	push   ebp
c0010720:	e8 2b 00 ff ff       	call   c0000750 <strcmp>
c0010725:	83 c4 10             	add    esp,0x10
c0010728:	85 c0                	test   eax,eax
c001072a:	75 0f                	jne    c001073b <CPU::detectFeatures()+0x2ff>
c001072c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010736:	e9 cc 00 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c001073b:	50                   	push   eax
c001073c:	50                   	push   eax
c001073d:	68 17 21 02 c0       	push   0xc0022117
c0010742:	55                   	push   ebp
c0010743:	e8 08 00 ff ff       	call   c0000750 <strcmp>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	85 c0                	test   eax,eax
c001074d:	75 0f                	jne    c001075e <CPU::detectFeatures()+0x322>
c001074f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010759:	e9 a9 00 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c001075e:	50                   	push   eax
c001075f:	50                   	push   eax
c0010760:	68 24 21 02 c0       	push   0xc0022124
c0010765:	55                   	push   ebp
c0010766:	e8 e5 ff fe ff       	call   c0000750 <strcmp>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	85 c0                	test   eax,eax
c0010770:	75 0f                	jne    c0010781 <CPU::detectFeatures()+0x345>
c0010772:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001077c:	e9 86 00 00 00       	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c0010781:	50                   	push   eax
c0010782:	50                   	push   eax
c0010783:	68 31 21 02 c0       	push   0xc0022131
c0010788:	55                   	push   ebp
c0010789:	e8 c2 ff fe ff       	call   c0000750 <strcmp>
c001078e:	83 c4 10             	add    esp,0x10
c0010791:	85 c0                	test   eax,eax
c0010793:	75 0c                	jne    c00107a1 <CPU::detectFeatures()+0x365>
c0010795:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001079f:	eb 66                	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00107a1:	50                   	push   eax
c00107a2:	50                   	push   eax
c00107a3:	68 3e 21 02 c0       	push   0xc002213e
c00107a8:	55                   	push   ebp
c00107a9:	e8 a2 ff fe ff       	call   c0000750 <strcmp>
c00107ae:	83 c4 10             	add    esp,0x10
c00107b1:	85 c0                	test   eax,eax
c00107b3:	75 0c                	jne    c00107c1 <CPU::detectFeatures()+0x385>
c00107b5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107bf:	eb 46                	jmp    c0010807 <CPU::detectFeatures()+0x3cb>
c00107c1:	57                   	push   edi
c00107c2:	57                   	push   edi
c00107c3:	68 4b 21 02 c0       	push   0xc002214b
c00107c8:	55                   	push   ebp
c00107c9:	e8 82 ff fe ff       	call   c0000750 <strcmp>
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	85 c0                	test   eax,eax
c00107d3:	74 e0                	je     c00107b5 <CPU::detectFeatures()+0x379>
c00107d5:	56                   	push   esi
c00107d6:	56                   	push   esi
c00107d7:	68 58 21 02 c0       	push   0xc0022158
c00107dc:	55                   	push   ebp
c00107dd:	e8 6e ff fe ff       	call   c0000750 <strcmp>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	85 c0                	test   eax,eax
c00107e7:	74 cc                	je     c00107b5 <CPU::detectFeatures()+0x379>
c00107e9:	51                   	push   ecx
c00107ea:	51                   	push   ecx
c00107eb:	68 65 21 02 c0       	push   0xc0022165
c00107f0:	55                   	push   ebp
c00107f1:	e8 5a ff fe ff       	call   c0000750 <strcmp>
c00107f6:	83 c4 10             	add    esp,0x10
c00107f9:	85 c0                	test   eax,eax
c00107fb:	74 b8                	je     c00107b5 <CPU::detectFeatures()+0x379>
c00107fd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010807:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001080c:	0f 86 be 00 00 00    	jbe    c00108d0 <CPU::detectFeatures()+0x494>
c0010812:	83 ec 0c             	sub    esp,0xc
c0010815:	68 80 00 00 00       	push   0x80
c001081a:	e8 31 fb ff ff       	call   c0010350 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001081f:	83 e0 01             	and    eax,0x1
c0010822:	c1 e0 06             	shl    eax,0x6
c0010825:	89 c2                	mov    edx,eax
c0010827:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001082d:	83 e0 bf             	and    eax,0xffffffbf
c0010830:	09 d0                	or     eax,edx
c0010832:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010838:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001083f:	e8 0c fb ff ff       	call   c0010350 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010844:	83 e0 01             	and    eax,0x1
c0010847:	c1 e0 04             	shl    eax,0x4
c001084a:	89 c2                	mov    edx,eax
c001084c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010852:	83 e0 ef             	and    eax,0xffffffef
c0010855:	09 d0                	or     eax,edx
c0010857:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001085d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010864:	e8 e7 fa ff ff       	call   c0010350 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010869:	89 c2                	mov    edx,eax
c001086b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010871:	c1 e2 07             	shl    edx,0x7
c0010874:	83 e0 7f             	and    eax,0x7f
c0010877:	09 d0                	or     eax,edx
c0010879:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001087f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010886:	e8 f3 fa ff ff       	call   c001037e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001088b:	83 e0 01             	and    eax,0x1
c001088e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010895:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001089b:	83 e0 f7             	and    eax,0xfffffff7
c001089e:	09 d0                	or     eax,edx
c00108a0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108a6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108ad:	e8 cc fa ff ff       	call   c001037e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108b2:	83 c4 10             	add    esp,0x10
c00108b5:	83 e0 01             	and    eax,0x1
c00108b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108bf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108c5:	83 e0 fb             	and    eax,0xfffffffb
c00108c8:	09 d0                	or     eax,edx
c00108ca:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108d0:	83 ec 0c             	sub    esp,0xc
c00108d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108d7:	50                   	push   eax
c00108d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00108dc:	50                   	push   eax
c00108dd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00108e1:	57                   	push   edi
c00108e2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00108e6:	56                   	push   esi
c00108e7:	6a 01                	push   0x1
c00108e9:	e8 82 f9 ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00108ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108f2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00108f8:	89 c1                	mov    ecx,eax
c00108fa:	83 e2 f0             	and    edx,0xfffffff0
c00108fd:	83 e1 0f             	and    ecx,0xf
c0010900:	09 ca                	or     edx,ecx
c0010902:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010908:	89 c2                	mov    edx,eax
c001090a:	c1 ea 04             	shr    edx,0x4
c001090d:	83 e2 0f             	and    edx,0xf
c0010910:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010914:	89 d1                	mov    ecx,edx
c0010916:	83 c4 20             	add    esp,0x20
c0010919:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001091f:	c1 e1 06             	shl    ecx,0x6
c0010922:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010928:	09 ca                	or     edx,ecx
c001092a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010931:	89 c2                	mov    edx,eax
c0010933:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010939:	c1 ea 08             	shr    edx,0x8
c001093c:	83 e1 3f             	and    ecx,0x3f
c001093f:	83 e2 0f             	and    edx,0xf
c0010942:	89 d5                	mov    ebp,edx
c0010944:	83 e5 03             	and    ebp,0x3
c0010947:	c1 e5 06             	shl    ebp,0x6
c001094a:	09 e9                	or     ecx,ebp
c001094c:	89 d5                	mov    ebp,edx
c001094e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010954:	c1 ed 02             	shr    ebp,0x2
c0010957:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001095d:	83 e1 c0             	and    ecx,0xffffffc0
c0010960:	09 e9                	or     ecx,ebp
c0010962:	89 c5                	mov    ebp,eax
c0010964:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001096a:	c1 ed 08             	shr    ebp,0x8
c001096d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010973:	83 e5 30             	and    ebp,0x30
c0010976:	83 e1 cf             	and    ecx,0xffffffcf
c0010979:	09 e9                	or     ecx,ebp
c001097b:	83 fa 06             	cmp    edx,0x6
c001097e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010984:	74 05                	je     c001098b <CPU::detectFeatures()+0x54f>
c0010986:	83 fa 0f             	cmp    edx,0xf
c0010989:	75 64                	jne    c00109ef <CPU::detectFeatures()+0x5b3>
c001098b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010991:	89 c1                	mov    ecx,eax
c0010993:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010999:	c1 e9 10             	shr    ecx,0x10
c001099c:	c1 e1 04             	shl    ecx,0x4
c001099f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109a3:	0f b6 c9             	movzx  ecx,cl
c00109a6:	c1 e1 06             	shl    ecx,0x6
c00109a9:	09 e9                	or     ecx,ebp
c00109ab:	83 fa 0f             	cmp    edx,0xf
c00109ae:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109b5:	75 38                	jne    c00109ef <CPU::detectFeatures()+0x5b3>
c00109b7:	c1 e8 14             	shr    eax,0x14
c00109ba:	83 c0 0f             	add    eax,0xf
c00109bd:	0f b6 c0             	movzx  eax,al
c00109c0:	89 c2                	mov    edx,eax
c00109c2:	c1 e8 02             	shr    eax,0x2
c00109c5:	83 e2 03             	and    edx,0x3
c00109c8:	89 d1                	mov    ecx,edx
c00109ca:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109d0:	c1 e1 06             	shl    ecx,0x6
c00109d3:	83 e2 3f             	and    edx,0x3f
c00109d6:	09 ca                	or     edx,ecx
c00109d8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00109de:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00109e4:	83 e2 c0             	and    edx,0xffffffc0
c00109e7:	09 d0                	or     eax,edx
c00109e9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00109ef:	83 ec 0c             	sub    esp,0xc
c00109f2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109f8:	83 c8 07             	or     eax,0x7
c00109fb:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a01:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a05:	50                   	push   eax
c0010a06:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a0a:	55                   	push   ebp
c0010a0b:	57                   	push   edi
c0010a0c:	56                   	push   esi
c0010a0d:	68 00 00 00 80       	push   0x80000000
c0010a12:	e8 59 f8 ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a17:	83 c4 20             	add    esp,0x20
c0010a1a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a22:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a26:	76 1e                	jbe    c0010a46 <CPU::detectFeatures()+0x60a>
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	50                   	push   eax
c0010a2c:	55                   	push   ebp
c0010a2d:	57                   	push   edi
c0010a2e:	56                   	push   esi
c0010a2f:	68 01 00 00 80       	push   0x80000001
c0010a34:	e8 37 f8 ff ff       	call   c0010270 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a39:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a43:	83 c4 20             	add    esp,0x20
c0010a46:	52                   	push   edx
c0010a47:	52                   	push   edx
c0010a48:	68 71 21 02 c0       	push   0xc0022171
c0010a4d:	53                   	push   ebx
c0010a4e:	e8 99 c0 ff ff       	call   c000caec <Device::setName(char const*)>
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	eb 69                	jmp    c0010ac1 <CPU::detectFeatures()+0x685>
c0010a58:	50                   	push   eax
c0010a59:	50                   	push   eax
c0010a5a:	68 d6 20 02 c0       	push   0xc00220d6
c0010a5f:	55                   	push   ebp
c0010a60:	e8 db fb fe ff       	call   c0000640 <strcpy>
c0010a65:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a6f:	e8 4f f7 fe ff       	call   c00001c3 <is486>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	85 c0                	test   eax,eax
c0010a79:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a7f:	74 1f                	je     c0010aa0 <CPU::detectFeatures()+0x664>
c0010a81:	83 c8 07             	or     eax,0x7
c0010a84:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a8a:	0f 20 c0             	mov    eax,cr0
c0010a8d:	83 e0 14             	and    eax,0x14
c0010a90:	83 f8 04             	cmp    eax,0x4
c0010a93:	75 10                	jne    c0010aa5 <CPU::detectFeatures()+0x669>
c0010a95:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a9b:	83 e0 fd             	and    eax,0xfffffffd
c0010a9e:	eb 1b                	jmp    c0010abb <CPU::detectFeatures()+0x67f>
c0010aa0:	83 e0 f8             	and    eax,0xfffffff8
c0010aa3:	eb df                	jmp    c0010a84 <CPU::detectFeatures()+0x648>
c0010aa5:	e8 f4 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010aaa:	83 e0 01             	and    eax,0x1
c0010aad:	8d 14 00             	lea    edx,[eax+eax*1]
c0010ab0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ab6:	83 e0 fd             	and    eax,0xfffffffd
c0010ab9:	09 d0                	or     eax,edx
c0010abb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010ac1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010ac8:	74 17                	je     c0010ae1 <CPU::detectFeatures()+0x6a5>
c0010aca:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010ad0:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010ad6:	83 c8 10             	or     eax,0x10
c0010ad9:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010adf:	eb 20                	jmp    c0010b01 <CPU::detectFeatures()+0x6c5>
c0010ae1:	e8 b8 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010ae6:	83 e0 01             	and    eax,0x1
c0010ae9:	8d 14 00             	lea    edx,[eax+eax*1]
c0010aec:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010af2:	83 e0 fd             	and    eax,0xfffffffd
c0010af5:	09 d0                	or     eax,edx
c0010af7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010afd:	a8 02                	test   al,0x2
c0010aff:	75 c9                	jne    c0010aca <CPU::detectFeatures()+0x68e>
c0010b01:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b08:	83 c4 2c             	add    esp,0x2c
c0010b0b:	5b                   	pop    ebx
c0010b0c:	5e                   	pop    esi
c0010b0d:	5f                   	pop    edi
c0010b0e:	5d                   	pop    ebp
c0010b0f:	c3                   	ret    

c0010b10 <CPU::setupSMEP()>:
c0010b10:	0f 20 e0             	mov    eax,cr4
c0010b13:	0d 00 00 10 00       	or     eax,0x100000
c0010b18:	0f 22 e0             	mov    cr4,eax
c0010b1b:	c3                   	ret    

c0010b1c <CPU::setupUMIP()>:
c0010b1c:	0f 20 e0             	mov    eax,cr4
c0010b1f:	80 cc 08             	or     ah,0x8
c0010b22:	0f 22 e0             	mov    cr4,eax
c0010b25:	c3                   	ret    

c0010b26 <CPU::setupTSC()>:
c0010b26:	0f 20 e0             	mov    eax,cr4
c0010b29:	83 c8 04             	or     eax,0x4
c0010b2c:	0f 22 e0             	mov    cr4,eax
c0010b2f:	c3                   	ret    

c0010b30 <CPU::setupLargePages()>:
c0010b30:	0f 20 e0             	mov    eax,cr4
c0010b33:	83 c8 10             	or     eax,0x10
c0010b36:	0f 22 e0             	mov    cr4,eax
c0010b39:	c3                   	ret    

c0010b3a <CPU::setupPAT()>:
c0010b3a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b3f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b46:	74 2c                	je     c0010b74 <CPU::setupPAT()+0x3a>
c0010b48:	53                   	push   ebx
c0010b49:	83 ec 10             	sub    esp,0x10
c0010b4c:	68 77 02 00 00       	push   0x277
c0010b51:	50                   	push   eax
c0010b52:	e8 69 65 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010b57:	83 e2 f8             	and    edx,0xfffffff8
c0010b5a:	83 ca 01             	or     edx,0x1
c0010b5d:	52                   	push   edx
c0010b5e:	50                   	push   eax
c0010b5f:	68 77 02 00 00       	push   0x277
c0010b64:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b6a:	e8 7d 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b6f:	83 c4 28             	add    esp,0x28
c0010b72:	5b                   	pop    ebx
c0010b73:	c3                   	ret    
c0010b74:	c3                   	ret    
c0010b75:	90                   	nop

c0010b76 <CPU::setupMTRR()>:
c0010b76:	c3                   	ret    
c0010b77:	90                   	nop

c0010b78 <CPU::setupGlobalPages()>:
c0010b78:	0f 20 e0             	mov    eax,cr4
c0010b7b:	0c 80                	or     al,0x80
c0010b7d:	0f 22 e0             	mov    cr4,eax
c0010b80:	c3                   	ret    
c0010b81:	90                   	nop

c0010b82 <CPU::allowUsermodeDataAccess()>:
c0010b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b86:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b8d:	74 03                	je     c0010b92 <CPU::allowUsermodeDataAccess()+0x10>
c0010b8f:	0f 01 cb             	stac   
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <CPU::prohibitUsermodeDataAccess()>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010b9f:	74 03                	je     c0010ba4 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010ba1:	0f 01 ca             	clac   
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <CPU::setupSMAP()>:
c0010ba6:	0f 20 e0             	mov    eax,cr4
c0010ba9:	0d 00 00 20 00       	or     eax,0x200000
c0010bae:	0f 22 e0             	mov    cr4,eax
c0010bb1:	eb e1                	jmp    c0010b94 <CPU::prohibitUsermodeDataAccess()>
c0010bb3:	90                   	nop

c0010bb4 <CPU::setupFeatures()>:
c0010bb4:	53                   	push   ebx
c0010bb5:	83 ec 08             	sub    esp,0x8
c0010bb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bbc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010bc3:	74 18                	je     c0010bdd <CPU::setupFeatures()+0x29>
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	68 7d 21 02 c0       	push   0xc002217d
c0010bcd:	e8 73 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bd5:	e8 42 ff ff ff       	call   c0010b1c <CPU::setupUMIP()>
c0010bda:	83 c4 10             	add    esp,0x10
c0010bdd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010be4:	74 18                	je     c0010bfe <CPU::setupFeatures()+0x4a>
c0010be6:	83 ec 0c             	sub    esp,0xc
c0010be9:	68 87 21 02 c0       	push   0xc0022187
c0010bee:	e8 52 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bf6:	e8 2b ff ff ff       	call   c0010b26 <CPU::setupTSC()>
c0010bfb:	83 c4 10             	add    esp,0x10
c0010bfe:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c05:	74 18                	je     c0010c1f <CPU::setupFeatures()+0x6b>
c0010c07:	83 ec 0c             	sub    esp,0xc
c0010c0a:	68 90 21 02 c0       	push   0xc0022190
c0010c0f:	e8 31 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c17:	e8 14 ff ff ff       	call   c0010b30 <CPU::setupLargePages()>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c26:	74 18                	je     c0010c40 <CPU::setupFeatures()+0x8c>
c0010c28:	83 ec 0c             	sub    esp,0xc
c0010c2b:	68 99 21 02 c0       	push   0xc0022199
c0010c30:	e8 10 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c38:	e8 3b ff ff ff       	call   c0010b78 <CPU::setupGlobalPages()>
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c47:	74 18                	je     c0010c61 <CPU::setupFeatures()+0xad>
c0010c49:	83 ec 0c             	sub    esp,0xc
c0010c4c:	68 ab 21 02 c0       	push   0xc00221ab
c0010c51:	e8 ef 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c59:	e8 dc fe ff ff       	call   c0010b3a <CPU::setupPAT()>
c0010c5e:	83 c4 10             	add    esp,0x10
c0010c61:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c68:	74 11                	je     c0010c7b <CPU::setupFeatures()+0xc7>
c0010c6a:	c7 44 24 10 b4 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc00221b4
c0010c72:	83 c4 08             	add    esp,0x8
c0010c75:	5b                   	pop    ebx
c0010c76:	e9 ca 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010c7b:	83 c4 08             	add    esp,0x8
c0010c7e:	5b                   	pop    ebx
c0010c7f:	c3                   	ret    

c0010c80 <CPU::open(int, int, void*)>:
c0010c80:	55                   	push   ebp
c0010c81:	57                   	push   edi
c0010c82:	56                   	push   esi
c0010c83:	53                   	push   ebx
c0010c84:	83 ec 18             	sub    esp,0x18
c0010c87:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010c8f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010c93:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010c99:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010c9f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010ca5:	50                   	push   eax
c0010ca6:	e8 13 67 ff ff       	call   c00073be <GDT::setup()>
c0010cab:	83 c4 0c             	add    esp,0xc
c0010cae:	6a 00                	push   0x0
c0010cb0:	68 ef be ad de       	push   0xdeadbeef
c0010cb5:	55                   	push   ebp
c0010cb6:	e8 cd 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010cbb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010cbe:	e8 a5 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010cc3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010cc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ccc:	e8 51 69 ff ff       	call   c0007622 <IDT::setup()>
c0010cd1:	b8 00 04 00 00       	mov    eax,0x400
c0010cd6:	0f 23 f8             	mov    db7,eax
c0010cd9:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010ce3:	e8 d7 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010ce8:	83 c4 10             	add    esp,0x10
c0010ceb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010cf1:	85 f6                	test   esi,esi
c0010cf3:	89 38                	mov    DWORD PTR [eax],edi
c0010cf5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010cfb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010cfe:	74 10                	je     c0010d10 <CPU::open(int, int, void*)+0x90>
c0010d00:	50                   	push   eax
c0010d01:	50                   	push   eax
c0010d02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d08:	56                   	push   esi
c0010d09:	e8 a0 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d0e:	eb 0d                	jmp    c0010d1d <CPU::open(int, int, void*)+0x9d>
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	68 be 21 02 c0       	push   0xc00221be
c0010d18:	e8 9e 08 00 00       	call   c00115bb <KePanic(char const*)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	68 cc 21 02 c0       	push   0xc00221cc
c0010d28:	e8 8e 01 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0010d2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d30:	e8 07 f7 ff ff       	call   c001043c <CPU::detectFeatures()>
c0010d35:	c7 04 24 ef 21 02 c0 	mov    DWORD PTR [esp],0xc00221ef
c0010d3c:	e8 7a 01 00 00       	call   c0010ebb <KeSetBootMessage(char const*)>
c0010d41:	e8 cf 73 00 00       	call   c0018115 <HalInitialise()>
c0010d46:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d4b:	83 e0 10             	and    eax,0x10
c0010d4e:	83 f8 01             	cmp    eax,0x1
c0010d51:	19 c0                	sbb    eax,eax
c0010d53:	83 e0 46             	and    eax,0x46
c0010d56:	83 c0 1e             	add    eax,0x1e
c0010d59:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d5c:	e8 28 d6 ff ff       	call   c000e389 <setupTimer(int)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d6a:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d71:	74 0c                	je     c0010d7f <CPU::open(int, int, void*)+0xff>
c0010d73:	83 ec 0c             	sub    esp,0xc
c0010d76:	53                   	push   ebx
c0010d77:	e8 38 fe ff ff       	call   c0010bb4 <CPU::setupFeatures()>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	83 c4 0c             	add    esp,0xc
c0010d82:	31 c0                	xor    eax,eax
c0010d84:	5b                   	pop    ebx
c0010d85:	5e                   	pop    esi
c0010d86:	5f                   	pop    edi
c0010d87:	5d                   	pop    ebp
c0010d88:	c3                   	ret    

c0010d89 <KeInitialiseAtexit()>:
c0010d89:	83 ec 10             	sub    esp,0x10
c0010d8c:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010d96:	6a 60                	push   0x60
c0010d98:	6a 00                	push   0x0
c0010d9a:	68 20 be 02 c0       	push   0xc002be20
c0010d9f:	e8 4c f7 fe ff       	call   c00004f0 <memset>
c0010da4:	83 c4 1c             	add    esp,0x1c
c0010da7:	c3                   	ret    

c0010da8 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010da8:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010db1:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010db8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010dbc:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010dc3:	40                   	inc    eax
c0010dc4:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010dc9:	83 f8 17             	cmp    eax,0x17
c0010dcc:	7e 0d                	jle    c0010ddb <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010dce:	c7 44 24 04 30 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022230
c0010dd6:	e9 e0 07 00 00       	jmp    c00115bb <KePanic(char const*)>
c0010ddb:	c3                   	ret    

c0010ddc <KeExecuteAtexit()>:
c0010ddc:	53                   	push   ebx
c0010ddd:	31 db                	xor    ebx,ebx
c0010ddf:	83 ec 08             	sub    esp,0x8
c0010de2:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010de8:	7e 50                	jle    c0010e3a <KeExecuteAtexit()+0x5e>
c0010dea:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010df1:	85 c0                	test   eax,eax
c0010df3:	74 42                	je     c0010e37 <KeExecuteAtexit()+0x5b>
c0010df5:	51                   	push   ecx
c0010df6:	50                   	push   eax
c0010df7:	53                   	push   ebx
c0010df8:	68 49 22 02 c0       	push   0xc0022249
c0010dfd:	e8 43 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e02:	58                   	pop    eax
c0010e03:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e0a:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e11:	c7 04 24 6b 22 02 c0 	mov    DWORD PTR [esp],0xc002226b
c0010e18:	e8 28 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e1d:	c7 04 24 cb 33 02 c0 	mov    DWORD PTR [esp],0xc00233cb
c0010e24:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e2f:	e8 11 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	43                   	inc    ebx
c0010e38:	eb a8                	jmp    c0010de2 <KeExecuteAtexit()+0x6>
c0010e3a:	83 c4 08             	add    esp,0x8
c0010e3d:	5b                   	pop    ebx
c0010e3e:	c3                   	ret    

c0010e3f <KeDisplaySplashScreen()>:
c0010e3f:	55                   	push   ebp
c0010e40:	bd 05 00 00 00       	mov    ebp,0x5
c0010e45:	57                   	push   edi
c0010e46:	bf 0a 00 00 00       	mov    edi,0xa
c0010e4b:	56                   	push   esi
c0010e4c:	31 f6                	xor    esi,esi
c0010e4e:	53                   	push   ebx
c0010e4f:	31 db                	xor    ebx,ebx
c0010e51:	83 ec 0c             	sub    esp,0xc
c0010e54:	0f b6 96 20 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc9e0]
c0010e5b:	89 d0                	mov    eax,edx
c0010e5d:	85 d2                	test   edx,edx
c0010e5f:	74 52                	je     c0010eb3 <KeDisplaySplashScreen()+0x74>
c0010e61:	80 bb 56 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc9aa],0xdb
c0010e68:	75 13                	jne    c0010e7d <KeDisplaySplashScreen()+0x3e>
c0010e6a:	0f b6 8b 55 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc9ab]
c0010e71:	83 e1 fe             	and    ecx,0xfffffffe
c0010e74:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010e7a:	75 01                	jne    c0010e7d <KeDisplaySplashScreen()+0x3e>
c0010e7c:	47                   	inc    edi
c0010e7d:	83 fa 0d             	cmp    edx,0xd
c0010e80:	74 28                	je     c0010eaa <KeDisplaySplashScreen()+0x6b>
c0010e82:	83 fa 0a             	cmp    edx,0xa
c0010e85:	75 0a                	jne    c0010e91 <KeDisplaySplashScreen()+0x52>
c0010e87:	45                   	inc    ebp
c0010e88:	bf 0a 00 00 00       	mov    edi,0xa
c0010e8d:	31 db                	xor    ebx,ebx
c0010e8f:	eb 19                	jmp    c0010eaa <KeDisplaySplashScreen()+0x6b>
c0010e91:	83 ec 0c             	sub    esp,0xc
c0010e94:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010e97:	55                   	push   ebp
c0010e98:	0f be c0             	movsx  eax,al
c0010e9b:	52                   	push   edx
c0010e9c:	43                   	inc    ebx
c0010e9d:	6a 00                	push   0x0
c0010e9f:	6a 0e                	push   0xe
c0010ea1:	50                   	push   eax
c0010ea2:	e8 ed 7e 00 00       	call   c0018d94 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ea7:	83 c4 20             	add    esp,0x20
c0010eaa:	46                   	inc    esi
c0010eab:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010eb1:	75 a1                	jne    c0010e54 <KeDisplaySplashScreen()+0x15>
c0010eb3:	83 c4 0c             	add    esp,0xc
c0010eb6:	5b                   	pop    ebx
c0010eb7:	5e                   	pop    esi
c0010eb8:	5f                   	pop    edi
c0010eb9:	5d                   	pop    ebp
c0010eba:	c3                   	ret    

c0010ebb <KeSetBootMessage(char const*)>:
c0010ebb:	57                   	push   edi
c0010ebc:	56                   	push   esi
c0010ebd:	53                   	push   ebx
c0010ebe:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ec4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010ecb:	68 9e 00 00 00       	push   0x9e
c0010ed0:	6a 00                	push   0x0
c0010ed2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010ed6:	56                   	push   esi
c0010ed7:	e8 14 f6 fe ff       	call   c00004f0 <memset>
c0010edc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010edf:	e8 8c f6 fe ff       	call   c0000570 <strlen>
c0010ee4:	ba 50 00 00 00       	mov    edx,0x50
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	29 c2                	sub    edx,eax
c0010eee:	31 c9                	xor    ecx,ecx
c0010ef0:	83 e2 fe             	and    edx,0xfffffffe
c0010ef3:	01 f2                	add    edx,esi
c0010ef5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010efa:	84 c0                	test   al,al
c0010efc:	74 0a                	je     c0010f08 <KeSetBootMessage(char const*)+0x4d>
c0010efe:	80 cc 0f             	or     ah,0xf
c0010f01:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f05:	41                   	inc    ecx
c0010f06:	eb ed                	jmp    c0010ef5 <KeSetBootMessage(char const*)+0x3a>
c0010f08:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f0d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f14:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f1a:	5b                   	pop    ebx
c0010f1b:	5e                   	pop    esi
c0010f1c:	5f                   	pop    edi
c0010f1d:	c3                   	ret    
c0010f1e:	66 90                	xchg   ax,ax

c0010f20 <Krnl::handlePowerButton()>:
c0010f20:	83 ec 0c             	sub    esp,0xc
c0010f23:	e8 ee 06 00 00       	call   c0011616 <KeHandlePowerButton()>
c0010f28:	90                   	nop
c0010f29:	83 c4 0c             	add    esp,0xc
c0010f2c:	c3                   	ret    
c0010f2d:	8d 76 00             	lea    esi,[esi+0x0]

c0010f30 <Krnl::handleSleepButton()>:
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	e8 13 07 00 00       	call   c001164b <KeHandleSleepButton()>
c0010f38:	90                   	nop
c0010f39:	83 c4 0c             	add    esp,0xc
c0010f3c:	c3                   	ret    

c0010f3d <KeCalculateCRC32(unsigned char*, int)>:
c0010f3d:	53                   	push   ebx
c0010f3e:	83 c8 ff             	or     eax,0xffffffff
c0010f41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f49:	01 cb                	add    ebx,ecx
c0010f4b:	39 d9                	cmp    ecx,ebx
c0010f4d:	74 15                	je     c0010f64 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f4f:	41                   	inc    ecx
c0010f50:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f53:	31 c2                	xor    edx,eax
c0010f55:	c1 e8 08             	shr    eax,0x8
c0010f58:	0f b6 d2             	movzx  edx,dl
c0010f5b:	33 04 95 80 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc880]
c0010f62:	eb e7                	jmp    c0010f4b <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f64:	f7 d0                	not    eax
c0010f66:	5b                   	pop    ebx
c0010f67:	c3                   	ret    

c0010f68 <EnvVarContainer::getEnv(char const*)>:
c0010f68:	57                   	push   edi
c0010f69:	56                   	push   esi
c0010f6a:	53                   	push   ebx
c0010f6b:	31 db                	xor    ebx,ebx
c0010f6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f71:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f73:	7e 2b                	jle    c0010fa0 <EnvVarContainer::getEnv(char const*)+0x38>
c0010f75:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010f7c:	50                   	push   eax
c0010f7d:	50                   	push   eax
c0010f7e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f81:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010f84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010f88:	e8 c3 f7 fe ff       	call   c0000750 <strcmp>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	85 c0                	test   eax,eax
c0010f92:	75 09                	jne    c0010f9d <EnvVarContainer::getEnv(char const*)+0x35>
c0010f94:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010f97:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010f9b:	eb 05                	jmp    c0010fa2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010f9d:	43                   	inc    ebx
c0010f9e:	eb d1                	jmp    c0010f71 <EnvVarContainer::getEnv(char const*)+0x9>
c0010fa0:	31 c0                	xor    eax,eax
c0010fa2:	5b                   	pop    ebx
c0010fa3:	5e                   	pop    esi
c0010fa4:	5f                   	pop    edi
c0010fa5:	c3                   	ret    

c0010fa6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fa6:	55                   	push   ebp
c0010fa7:	57                   	push   edi
c0010fa8:	56                   	push   esi
c0010fa9:	53                   	push   ebx
c0010faa:	83 ec 28             	sub    esp,0x28
c0010fad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fb1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010fb5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fb9:	56                   	push   esi
c0010fba:	e8 b1 f5 fe ff       	call   c0000570 <strlen>
c0010fbf:	40                   	inc    eax
c0010fc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fc3:	e8 ee 6a ff ff       	call   c0007ab6 <malloc>
c0010fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010fcf:	e8 9c f5 fe ff       	call   c0000570 <strlen>
c0010fd4:	40                   	inc    eax
c0010fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fd8:	e8 d9 6a ff ff       	call   c0007ab6 <malloc>
c0010fdd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fe4:	e8 87 f5 fe ff       	call   c0000570 <strlen>
c0010fe9:	83 c4 0c             	add    esp,0xc
c0010fec:	40                   	inc    eax
c0010fed:	50                   	push   eax
c0010fee:	6a 00                	push   0x0
c0010ff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ff4:	e8 f7 f4 fe ff       	call   c00004f0 <memset>
c0010ff9:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ffc:	e8 6f f5 fe ff       	call   c0000570 <strlen>
c0011001:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011005:	8d 48 01             	lea    ecx,[eax+0x1]
c0011008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001100a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001100d:	89 de                	mov    esi,ebx
c001100f:	e8 5c f5 fe ff       	call   c0000570 <strlen>
c0011014:	83 c4 0c             	add    esp,0xc
c0011017:	40                   	inc    eax
c0011018:	50                   	push   eax
c0011019:	6a 00                	push   0x0
c001101b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001101f:	e8 cc f4 fe ff       	call   c00004f0 <memset>
c0011024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011027:	e8 44 f5 fe ff       	call   c0000570 <strlen>
c001102c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011030:	8d 48 01             	lea    ecx,[eax+0x1]
c0011033:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011035:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011038:	40                   	inc    eax
c0011039:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001103c:	c1 e0 03             	shl    eax,0x3
c001103f:	5a                   	pop    edx
c0011040:	59                   	pop    ecx
c0011041:	50                   	push   eax
c0011042:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011045:	e8 58 6a ff ff       	call   c0007aa2 <realloc>
c001104a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001104e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011051:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011054:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011058:	b9 08 00 00 00       	mov    ecx,0x8
c001105d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001105f:	83 c4 2c             	add    esp,0x2c
c0011062:	5b                   	pop    ebx
c0011063:	5e                   	pop    esi
c0011064:	5f                   	pop    edi
c0011065:	5d                   	pop    ebp
c0011066:	c3                   	ret    
c0011067:	90                   	nop

c0011068 <EnvVarContainer::deleteEnv(char const*)>:
c0011068:	c3                   	ret    
c0011069:	90                   	nop

c001106a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001106a:	55                   	push   ebp
c001106b:	57                   	push   edi
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	81 ec 38 01 00 00    	sub    esp,0x138
c0011074:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001107b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011082:	68 14 01 00 00       	push   0x114
c0011087:	e8 2a 6a ff ff       	call   c0007ab6 <malloc>
c001108c:	83 c4 0c             	add    esp,0xc
c001108f:	89 c3                	mov    ebx,eax
c0011091:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011094:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001109b:	50                   	push   eax
c001109c:	e8 49 aa ff ff       	call   c000baea <File::File(char const*, Process*)>
c00110a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a4:	e8 23 ad ff ff       	call   c000bdcc <File::exists()>
c00110a9:	83 c4 10             	add    esp,0x10
c00110ac:	84 c0                	test   al,al
c00110ae:	75 31                	jne    c00110e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110b0:	50                   	push   eax
c00110b1:	50                   	push   eax
c00110b2:	6a 12                	push   0x12
c00110b4:	53                   	push   ebx
c00110b5:	e8 4e aa ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c00110ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110bc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00110c2:	e8 a9 f4 fe ff       	call   c0000570 <strlen>
c00110c7:	5a                   	pop    edx
c00110c8:	31 d2                	xor    edx,edx
c00110ca:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00110ce:	51                   	push   ecx
c00110cf:	56                   	push   esi
c00110d0:	52                   	push   edx
c00110d1:	50                   	push   eax
c00110d2:	53                   	push   ebx
c00110d3:	ff d7                	call   edi
c00110d5:	83 c4 14             	add    esp,0x14
c00110d8:	53                   	push   ebx
c00110d9:	e8 88 aa ff ff       	call   c000bb66 <File::close()>
c00110de:	83 c4 10             	add    esp,0x10
c00110e1:	56                   	push   esi
c00110e2:	31 f6                	xor    esi,esi
c00110e4:	68 00 01 00 00       	push   0x100
c00110e9:	6a 00                	push   0x0
c00110eb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00110ef:	50                   	push   eax
c00110f0:	e8 fb f3 fe ff       	call   c00004f0 <memset>
c00110f5:	5f                   	pop    edi
c00110f6:	58                   	pop    eax
c00110f7:	6a 01                	push   0x1
c00110f9:	53                   	push   ebx
c00110fa:	e8 09 aa ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001110a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011112:	83 ec 0c             	sub    esp,0xc
c0011115:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011117:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001111b:	51                   	push   ecx
c001111c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011120:	52                   	push   edx
c0011121:	6a 00                	push   0x0
c0011123:	6a 01                	push   0x1
c0011125:	53                   	push   ebx
c0011126:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011129:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001112e:	83 c4 20             	add    esp,0x20
c0011131:	89 c2                	mov    edx,eax
c0011133:	85 c0                	test   eax,eax
c0011135:	0f 84 36 01 00 00    	je     c0011271 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001113b:	83 f8 0d             	cmp    eax,0xd
c001113e:	0f 84 22 01 00 00    	je     c0011266 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011149:	0f 84 f0 00 00 00    	je     c001123f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001114f:	83 f8 0a             	cmp    eax,0xa
c0011152:	74 13                	je     c0011167 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011154:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011159:	74 0c                	je     c0011167 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001115b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011161:	0f 8e f6 00 00 00    	jle    c001125d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011167:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001116b:	83 ec 0c             	sub    esp,0xc
c001116e:	8d 78 01             	lea    edi,[eax+0x1]
c0011171:	57                   	push   edi
c0011172:	e8 3f 69 ff ff       	call   c0007ab6 <malloc>
c0011177:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001117b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001117f:	8d 56 04             	lea    edx,[esi+0x4]
c0011182:	89 14 24             	mov    DWORD PTR [esp],edx
c0011185:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011189:	e8 28 69 ff ff       	call   c0007ab6 <malloc>
c001118e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011192:	83 c4 0c             	add    esp,0xc
c0011195:	57                   	push   edi
c0011196:	6a 00                	push   0x0
c0011198:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001119c:	e8 4f f3 fe ff       	call   c00004f0 <memset>
c00111a1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111a5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111a9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111af:	83 c4 0c             	add    esp,0xc
c00111b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111b6:	52                   	push   edx
c00111b7:	6a 00                	push   0x0
c00111b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111bd:	e8 2e f3 fe ff       	call   c00004f0 <memset>
c00111c2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111c6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00111cd:	e8 9e f3 fe ff       	call   c0000570 <strlen>
c00111d2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00111d6:	89 c1                	mov    ecx,eax
c00111d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00111dd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00111e0:	40                   	inc    eax
c00111e1:	83 c4 10             	add    esp,0x10
c00111e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00111e7:	85 d2                	test   edx,edx
c00111e9:	75 0c                	jne    c00111f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00111eb:	83 ec 0c             	sub    esp,0xc
c00111ee:	6a 08                	push   0x8
c00111f0:	e8 c1 68 ff ff       	call   c0007ab6 <malloc>
c00111f5:	eb 0c                	jmp    c0011203 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00111f7:	c1 e0 03             	shl    eax,0x3
c00111fa:	51                   	push   ecx
c00111fb:	51                   	push   ecx
c00111fc:	50                   	push   eax
c00111fd:	52                   	push   edx
c00111fe:	e8 9f 68 ff ff       	call   c0007aa2 <realloc>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011209:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001120c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001120f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011213:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011217:	b9 08 00 00 00       	mov    ecx,0x8
c001121c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001121e:	31 f6                	xor    esi,esi
c0011220:	50                   	push   eax
c0011221:	68 00 01 00 00       	push   0x100
c0011226:	6a 00                	push   0x0
c0011228:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001122c:	50                   	push   eax
c001122d:	e8 be f2 fe ff       	call   c00004f0 <memset>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001123d:	eb 27                	jmp    c0011266 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001123f:	83 f8 3d             	cmp    eax,0x3d
c0011242:	74 1e                	je     c0011262 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011244:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001124a:	7f 07                	jg     c0011253 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001124c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011250:	46                   	inc    esi
c0011251:	eb 13                	jmp    c0011266 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011253:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001125b:	eb 09                	jmp    c0011266 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001125d:	83 f8 3d             	cmp    eax,0x3d
c0011260:	75 ea                	jne    c001124c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011262:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011266:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001126b:	0f 85 99 fe ff ff    	jne    c001110a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	53                   	push   ebx
c0011275:	e8 ec a8 ff ff       	call   c000bb66 <File::close()>
c001127a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001127f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011282:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011288:	5b                   	pop    ebx
c0011289:	5e                   	pop    esi
c001128a:	5f                   	pop    edi
c001128b:	5d                   	pop    ebp
c001128c:	c3                   	ret    
c001128d:	90                   	nop

c001128e <EnvVarContainer::__loadSystem()>:
c001128e:	83 ec 10             	sub    esp,0x10
c0011291:	68 80 3b 02 c0       	push   0xc0023b80
c0011296:	68 70 22 02 c0       	push   0xc0022270
c001129b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129f:	e8 c6 fd ff ff       	call   c001106a <EnvVarContainer::loadFrom(char const*, char const*)>
c00112a4:	83 c4 1c             	add    esp,0x1c
c00112a7:	c3                   	ret    

c00112a8 <EnvVarContainer::__loadUser()>:
c00112a8:	c3                   	ret    
c00112a9:	90                   	nop

c00112aa <EnvVarContainer::EnvVarContainer(Process*)>:
c00112aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ca:	90                   	nop
c00112cb:	c3                   	ret    

c00112cc <EnvVarContainer::~EnvVarContainer()>:
c00112cc:	83 ec 0c             	sub    esp,0xc
c00112cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d6:	85 c0                	test   eax,eax
c00112d8:	74 1d                	je     c00112f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112de:	8b 00                	mov    eax,DWORD PTR [eax]
c00112e0:	85 c0                	test   eax,eax
c00112e2:	74 13                	je     c00112f7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00112e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112eb:	83 ec 0c             	sub    esp,0xc
c00112ee:	50                   	push   eax
c00112ef:	e8 d2 67 ff ff       	call   c0007ac6 <free>
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	90                   	nop
c00112f8:	83 c4 0c             	add    esp,0xc
c00112fb:	c3                   	ret    

c00112fc <KeGetEnv(Process*, char const*)>:
c00112fc:	53                   	push   ebx
c00112fd:	83 ec 08             	sub    esp,0x8
c0011300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011304:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011308:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001130e:	74 04                	je     c0011314 <KeGetEnv(Process*, char const*)+0x18>
c0011310:	85 c0                	test   eax,eax
c0011312:	75 0b                	jne    c001131f <KeGetEnv(Process*, char const*)+0x23>
c0011314:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011319:	85 c0                	test   eax,eax
c001131b:	75 19                	jne    c0011336 <KeGetEnv(Process*, char const*)+0x3a>
c001131d:	eb 27                	jmp    c0011346 <KeGetEnv(Process*, char const*)+0x4a>
c001131f:	52                   	push   edx
c0011320:	52                   	push   edx
c0011321:	53                   	push   ebx
c0011322:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011328:	e8 3b fc ff ff       	call   c0010f68 <EnvVarContainer::getEnv(char const*)>
c001132d:	83 c4 10             	add    esp,0x10
c0011330:	85 c0                	test   eax,eax
c0011332:	75 28                	jne    c001135c <KeGetEnv(Process*, char const*)+0x60>
c0011334:	eb de                	jmp    c0011314 <KeGetEnv(Process*, char const*)+0x18>
c0011336:	52                   	push   edx
c0011337:	52                   	push   edx
c0011338:	53                   	push   ebx
c0011339:	50                   	push   eax
c001133a:	e8 29 fc ff ff       	call   c0010f68 <EnvVarContainer::getEnv(char const*)>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	85 c0                	test   eax,eax
c0011344:	75 16                	jne    c001135c <KeGetEnv(Process*, char const*)+0x60>
c0011346:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001134a:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001134f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011353:	83 c4 08             	add    esp,0x8
c0011356:	5b                   	pop    ebx
c0011357:	e9 0c fc ff ff       	jmp    c0010f68 <EnvVarContainer::getEnv(char const*)>
c001135c:	83 c4 08             	add    esp,0x8
c001135f:	5b                   	pop    ebx
c0011360:	c3                   	ret    

c0011361 <KeSetEnvSystem(char const*, char const*)>:
c0011361:	83 ec 10             	sub    esp,0x10
c0011364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011368:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001136c:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011372:	e8 2f fc ff ff       	call   c0010fa6 <EnvVarContainer::setEnv(char const*, char const*)>
c0011377:	83 c4 1c             	add    esp,0x1c
c001137a:	c3                   	ret    

c001137b <KeSetEnvUser(char const*, char const*)>:
c001137b:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011380:	85 c0                	test   eax,eax
c0011382:	74 15                	je     c0011399 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011384:	83 ec 10             	sub    esp,0x10
c0011387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001138f:	50                   	push   eax
c0011390:	e8 11 fc ff ff       	call   c0010fa6 <EnvVarContainer::setEnv(char const*, char const*)>
c0011395:	83 c4 1c             	add    esp,0x1c
c0011398:	c3                   	ret    
c0011399:	c3                   	ret    

c001139a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001139a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113a8:	e9 f9 fb ff ff       	jmp    c0010fa6 <EnvVarContainer::setEnv(char const*, char const*)>

c00113ad <KeDeleteEnvSystem(char const*)>:
c00113ad:	c3                   	ret    

c00113ae <KeDeleteEnvUser(char const*)>:
c00113ae:	c3                   	ret    

c00113af <KeDeleteEnvProcess(Process*, char const*)>:
c00113af:	c3                   	ret    

c00113b0 <KeNewProcessEnv(Process*)>:
c00113b0:	83 ec 28             	sub    esp,0x28
c00113b3:	6a 0c                	push   0xc
c00113b5:	e8 fc 66 ff ff       	call   c0007ab6 <malloc>
c00113ba:	5a                   	pop    edx
c00113bb:	59                   	pop    ecx
c00113bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113c0:	50                   	push   eax
c00113c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113c5:	e8 e0 fe ff ff       	call   c00112aa <EnvVarContainer::EnvVarContainer(Process*)>
c00113ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113ce:	83 c4 2c             	add    esp,0x2c
c00113d1:	c3                   	ret    

c00113d2 <KeCopyProcessEnv(Process*, Process*)>:
c00113d2:	57                   	push   edi
c00113d3:	56                   	push   esi
c00113d4:	53                   	push   ebx
c00113d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d9:	83 ec 0c             	sub    esp,0xc
c00113dc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00113e2:	6a 0c                	push   0xc
c00113e4:	e8 cd 66 ff ff       	call   c0007ab6 <malloc>
c00113e9:	89 c3                	mov    ebx,eax
c00113eb:	58                   	pop    eax
c00113ec:	5a                   	pop    edx
c00113ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f1:	53                   	push   ebx
c00113f2:	e8 b3 fe ff ff       	call   c00112aa <EnvVarContainer::EnvVarContainer(Process*)>
c00113f7:	8b 07                	mov    eax,DWORD PTR [edi]
c00113f9:	89 03                	mov    DWORD PTR [ebx],eax
c00113fb:	c1 e0 03             	shl    eax,0x3
c00113fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0011401:	e8 b0 66 ff ff       	call   c0007ab6 <malloc>
c0011406:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011409:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001140b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001140e:	c1 e1 03             	shl    ecx,0x3
c0011411:	89 c7                	mov    edi,eax
c0011413:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	89 d8                	mov    eax,ebx
c001141a:	5b                   	pop    ebx
c001141b:	5e                   	pop    esi
c001141c:	5f                   	pop    edi
c001141d:	c3                   	ret    

c001141e <KeLoadSystemEnv()>:
c001141e:	53                   	push   ebx
c001141f:	83 ec 14             	sub    esp,0x14
c0011422:	6a 0c                	push   0xc
c0011424:	e8 8d 66 ff ff       	call   c0007ab6 <malloc>
c0011429:	89 c3                	mov    ebx,eax
c001142b:	58                   	pop    eax
c001142c:	5a                   	pop    edx
c001142d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011433:	53                   	push   ebx
c0011434:	e8 71 fe ff ff       	call   c00112aa <EnvVarContainer::EnvVarContainer(Process*)>
c0011439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001143c:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011442:	e8 47 fe ff ff       	call   c001128e <EnvVarContainer::__loadSystem()>
c0011447:	83 c4 18             	add    esp,0x18
c001144a:	5b                   	pop    ebx
c001144b:	c3                   	ret    

c001144c <KeLoadUserEnv()>:
c001144c:	53                   	push   ebx
c001144d:	83 ec 14             	sub    esp,0x14
c0011450:	6a 0c                	push   0xc
c0011452:	e8 5f 66 ff ff       	call   c0007ab6 <malloc>
c0011457:	89 c3                	mov    ebx,eax
c0011459:	58                   	pop    eax
c001145a:	5a                   	pop    edx
c001145b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011461:	53                   	push   ebx
c0011462:	e8 43 fe ff ff       	call   c00112aa <EnvVarContainer::EnvVarContainer(Process*)>
c0011467:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c001146d:	83 c4 18             	add    esp,0x18
c0011470:	5b                   	pop    ebx
c0011471:	c3                   	ret    

c0011472 <KeFlushEnv()>:
c0011472:	c3                   	ret    

c0011473 <KeGetProcessTotalEnvCount(Process*)>:
c0011473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011477:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c001147d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011483:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011488:	8b 00                	mov    eax,DWORD PTR [eax]
c001148a:	03 01                	add    eax,DWORD PTR [ecx]
c001148c:	85 d2                	test   edx,edx
c001148e:	74 02                	je     c0011492 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011490:	03 02                	add    eax,DWORD PTR [edx]
c0011492:	c3                   	ret    

c0011493 <KeGetProcessEnvPair(Process*, int)>:
c0011493:	57                   	push   edi
c0011494:	56                   	push   esi
c0011495:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001149b:	53                   	push   ebx
c001149c:	85 f6                	test   esi,esi
c001149e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114a6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114b2:	75 16                	jne    c00114ca <KeGetProcessEnvPair(Process*, int)+0x37>
c00114b4:	39 c2                	cmp    edx,eax
c00114b6:	7c 16                	jl     c00114ce <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114b8:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114be:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114c0:	01 c6                	add    esi,eax
c00114c2:	39 d6                	cmp    esi,edx
c00114c4:	7e 3c                	jle    c0011502 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114c6:	29 c2                	sub    edx,eax
c00114c8:	eb 04                	jmp    c00114ce <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114ca:	39 c2                	cmp    edx,eax
c00114cc:	7d 05                	jge    c00114d3 <KeGetProcessEnvPair(Process*, int)+0x40>
c00114ce:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114d1:	eb 20                	jmp    c00114f3 <KeGetProcessEnvPair(Process*, int)+0x60>
c00114d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00114d5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00114d8:	39 d1                	cmp    ecx,edx
c00114da:	7e 04                	jle    c00114e0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00114dc:	29 c2                	sub    edx,eax
c00114de:	eb 10                	jmp    c00114f0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00114e0:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00114e6:	03 0e                	add    ecx,DWORD PTR [esi]
c00114e8:	39 d1                	cmp    ecx,edx
c00114ea:	7e 16                	jle    c0011502 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114ec:	29 c2                	sub    edx,eax
c00114ee:	29 fa                	sub    edx,edi
c00114f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00114f3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00114f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00114f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00114fb:	89 03                	mov    DWORD PTR [ebx],eax
c00114fd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011500:	eb 1d                	jmp    c001151f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011502:	83 ec 0c             	sub    esp,0xc
c0011505:	68 92 22 02 c0       	push   0xc0022292
c001150a:	e8 ac 00 00 00       	call   c00115bb <KePanic(char const*)>
c001150f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011515:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	89 d8                	mov    eax,ebx
c0011521:	5b                   	pop    ebx
c0011522:	5e                   	pop    esi
c0011523:	5f                   	pop    edi
c0011524:	c2 04 00             	ret    0x4

c0011527 <CPU::current()>:
c0011527:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001152c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011532:	c3                   	ret    

c0011533 <operator new(unsigned long)>:
c0011533:	e9 7e 65 ff ff       	jmp    c0007ab6 <malloc>

c0011538 <operator delete(void*)>:
c0011538:	e9 99 65 ff ff       	jmp    c0007ad6 <rfree>

c001153d <disableIRQs()>:
c001153d:	fa                   	cli    
c001153e:	c3                   	ret    

c001153f <enableIRQs()>:
c001153f:	fb                   	sti    
c0011540:	c3                   	ret    

c0011541 <lockScheduler()>:
c0011541:	fa                   	cli    
c0011542:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011548:	c3                   	ret    

c0011549 <unlockScheduler()>:
c0011549:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001154e:	48                   	dec    eax
c001154f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011554:	75 01                	jne    c0011557 <unlockScheduler()+0xe>
c0011556:	fb                   	sti    
c0011557:	c3                   	ret    

c0011558 <lockStuff()>:
c0011558:	fa                   	cli    
c0011559:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001155f:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011565:	c3                   	ret    

c0011566 <unlockStuff()>:
c0011566:	83 ec 0c             	sub    esp,0xc
c0011569:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001156e:	48                   	dec    eax
c001156f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011574:	75 18                	jne    c001158e <unlockStuff()+0x28>
c0011576:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c001157d:	74 0f                	je     c001158e <unlockStuff()+0x28>
c001157f:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011589:	e8 b2 4a 00 00       	call   c0016040 <schedule()>
c001158e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011593:	48                   	dec    eax
c0011594:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011599:	75 01                	jne    c001159c <unlockStuff()+0x36>
c001159b:	fb                   	sti    
c001159c:	83 c4 0c             	add    esp,0xc
c001159f:	c3                   	ret    

c00115a0 <Virt::getAKernelVAS()>:
c00115a0:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115a5:	c3                   	ret    

c00115a6 <__not_memcpy>:
c00115a6:	57                   	push   edi
c00115a7:	56                   	push   esi
c00115a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115b4:	89 c7                	mov    edi,eax
c00115b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115b8:	5e                   	pop    esi
c00115b9:	5f                   	pop    edi
c00115ba:	c3                   	ret    

c00115bb <KePanic(char const*)>:
c00115bb:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115c2:	e9 1f 6a 00 00       	jmp    c0017fe6 <HalPanic(char const*)>

c00115c7 <KePowerThread(void*)>:
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115cf:	48                   	dec    eax
c00115d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115d5:	75 01                	jne    c00115d8 <KePowerThread(void*)+0x11>
c00115d7:	fb                   	sti    
c00115d8:	83 ec 0c             	sub    esp,0xc
c00115db:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00115e2:	6a 0a                	push   0xa
c00115e4:	e8 9b 4d 00 00       	call   c0016384 <sleep(unsigned int)>
c00115e9:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	eb e3                	jmp    c00115d8 <KePowerThread(void*)+0x11>

c00115f5 <KeChangePowerSettings(PowerSettings)>:
c00115f5:	57                   	push   edi
c00115f6:	b9 09 00 00 00       	mov    ecx,0x9
c00115fb:	56                   	push   esi
c00115fc:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011601:	fc                   	cld    
c0011602:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011606:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011608:	5e                   	pop    esi
c0011609:	5f                   	pop    edi
c001160a:	c3                   	ret    

c001160b <KeUserIOReceived()>:
c001160b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011615:	c3                   	ret    

c0011616 <KeHandlePowerButton()>:
c0011616:	83 ec 0c             	sub    esp,0xc
c0011619:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001161e:	83 f8 02             	cmp    eax,0x2
c0011621:	75 10                	jne    c0011633 <KeHandlePowerButton()+0x1d>
c0011623:	83 ec 0c             	sub    esp,0xc
c0011626:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001162c:	e8 f7 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011631:	eb 11                	jmp    c0011644 <KeHandlePowerButton()+0x2e>
c0011633:	48                   	dec    eax
c0011634:	75 11                	jne    c0011647 <KeHandlePowerButton()+0x31>
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001163f:	e8 14 5b ff ff       	call   c0007158 <Computer::sleep()>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	83 c4 0c             	add    esp,0xc
c001164a:	c3                   	ret    

c001164b <KeHandleSleepButton()>:
c001164b:	83 ec 0c             	sub    esp,0xc
c001164e:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011653:	83 f8 02             	cmp    eax,0x2
c0011656:	75 10                	jne    c0011668 <KeHandleSleepButton()+0x1d>
c0011658:	83 ec 0c             	sub    esp,0xc
c001165b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011661:	e8 c2 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011666:	eb 11                	jmp    c0011679 <KeHandleSleepButton()+0x2e>
c0011668:	48                   	dec    eax
c0011669:	75 11                	jne    c001167c <KeHandleSleepButton()+0x31>
c001166b:	83 ec 0c             	sub    esp,0xc
c001166e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011674:	e8 df 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	83 c4 0c             	add    esp,0xc
c001167f:	c3                   	ret    

c0011680 <KeSetupPowerManager()>:
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001168d:	68 f0 00 00 00       	push   0xf0
c0011692:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011699:	6a 00                	push   0x0
c001169b:	68 c7 15 01 c0       	push   0xc00115c7
c00116a0:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116a6:	e8 45 47 00 00       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c00116ab:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116b5:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116bf:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116c9:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116d3:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00116dd:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00116e7:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00116f1:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00116fb:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011705:	83 c4 1c             	add    esp,0x1c
c0011708:	c3                   	ret    

c0011709 <KeRand()>:
c0011709:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011713:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c001171d:	53                   	push   ebx
c001171e:	01 c1                	add    ecx,eax
c0011720:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011725:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001172b:	01 ca                	add    edx,ecx
c001172d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011732:	83 d2 00             	adc    edx,0x0
c0011735:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001173a:	0f b7 da             	movzx  ebx,dx
c001173d:	89 da                	mov    edx,ebx
c001173f:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011745:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011749:	5b                   	pop    ebx
c001174a:	c3                   	ret    

c001174b <KeSeedRand(unsigned int)>:
c001174b:	53                   	push   ebx
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011753:	e8 ad 6b 00 00       	call   c0018305 <HalGetRand()>
c0011758:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011762:	31 d8                	xor    eax,ebx
c0011764:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011769:	e8 9b ff ff ff       	call   c0011709 <KeRand()>
c001176e:	83 c4 08             	add    esp,0x8
c0011771:	5b                   	pop    ebx
c0011772:	eb 95                	jmp    c0011709 <KeRand()>

c0011774 <KeInitRand()>:
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	e8 7e 69 00 00       	call   c00180fa <HalQueryPerformanceCounter()>
c001177c:	0f 20 da             	mov    edx,cr3
c001177f:	0f 22 da             	mov    cr3,edx
c0011782:	0f 20 da             	mov    edx,cr3
c0011785:	0f 22 da             	mov    cr3,edx
c0011788:	0f 20 da             	mov    edx,cr3
c001178b:	0f 22 da             	mov    cr3,edx
c001178e:	0f 20 da             	mov    edx,cr3
c0011791:	0f 22 da             	mov    cr3,edx
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	35 03 8a 95 38       	xor    eax,0x38958a03
c001179c:	50                   	push   eax
c001179d:	e8 a9 ff ff ff       	call   c001174b <KeSeedRand(unsigned int)>
c00117a2:	83 c4 1c             	add    esp,0x1c
c00117a5:	c3                   	ret    
c00117a6:	66 90                	xchg   ax,ax

c00117a8 <KeResolveCompatibilitySymbol(char*)>:
c00117a8:	83 ec 0c             	sub    esp,0xc
c00117ab:	83 ec 08             	sub    esp,0x8
c00117ae:	68 ac 22 02 c0       	push   0xc00222ac
c00117b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b7:	e8 94 ef fe ff       	call   c0000750 <strcmp>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	85 c0                	test   eax,eax
c00117c1:	0f 94 c0             	sete   al
c00117c4:	0f b6 c0             	movzx  eax,al
c00117c7:	85 c0                	test   eax,eax
c00117c9:	74 0d                	je     c00117d8 <KeResolveCompatibilitySymbol(char*)+0x30>
c00117cb:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117d0:	e9 8b 01 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117d5:	8d 76 00             	lea    esi,[esi+0x0]
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	68 b5 22 02 c0       	push   0xc00222b5
c00117e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e4:	e8 67 ef fe ff       	call   c0000750 <strcmp>
c00117e9:	83 c4 10             	add    esp,0x10
c00117ec:	85 c0                	test   eax,eax
c00117ee:	0f 94 c0             	sete   al
c00117f1:	0f b6 c0             	movzx  eax,al
c00117f4:	85 c0                	test   eax,eax
c00117f6:	74 0c                	je     c0011804 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00117f8:	b8 b0 f6 01 c0       	mov    eax,0xc001f6b0
c00117fd:	e9 5e 01 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011802:	66 90                	xchg   ax,ax
c0011804:	83 ec 08             	sub    esp,0x8
c0011807:	68 bf 22 02 c0       	push   0xc00222bf
c001180c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011810:	e8 3b ef fe ff       	call   c0000750 <strcmp>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	85 c0                	test   eax,eax
c001181a:	0f 94 c0             	sete   al
c001181d:	0f b6 c0             	movzx  eax,al
c0011820:	85 c0                	test   eax,eax
c0011822:	74 0c                	je     c0011830 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011824:	b8 e4 f3 01 c0       	mov    eax,0xc001f3e4
c0011829:	e9 32 01 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001182e:	66 90                	xchg   ax,ax
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	68 c8 22 02 c0       	push   0xc00222c8
c0011838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183c:	e8 0f ef fe ff       	call   c0000750 <strcmp>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	85 c0                	test   eax,eax
c0011846:	0f 94 c0             	sete   al
c0011849:	0f b6 c0             	movzx  eax,al
c001184c:	85 c0                	test   eax,eax
c001184e:	74 0c                	je     c001185c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011850:	b8 bb 15 01 c0       	mov    eax,0xc00115bb
c0011855:	e9 06 01 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001185a:	66 90                	xchg   ax,ax
c001185c:	83 ec 08             	sub    esp,0x8
c001185f:	68 db 22 02 c0       	push   0xc00222db
c0011864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011868:	e8 e3 ee fe ff       	call   c0000750 <strcmp>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	85 c0                	test   eax,eax
c0011872:	0f 94 c0             	sete   al
c0011875:	0f b6 c0             	movzx  eax,al
c0011878:	85 c0                	test   eax,eax
c001187a:	74 0c                	je     c0011888 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001187c:	b8 bb 0e 01 c0       	mov    eax,0xc0010ebb
c0011881:	e9 da 00 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011886:	66 90                	xchg   ax,ax
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	68 f8 22 02 c0       	push   0xc00222f8
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	e8 b7 ee fe ff       	call   c0000750 <strcmp>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	85 c0                	test   eax,eax
c001189e:	0f 94 c0             	sete   al
c00118a1:	0f b6 c0             	movzx  eax,al
c00118a4:	85 c0                	test   eax,eax
c00118a6:	74 0c                	je     c00118b4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118a8:	b8 b0 f7 01 c0       	mov    eax,0xc001f7b0
c00118ad:	e9 ae 00 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118b2:	66 90                	xchg   ax,ax
c00118b4:	83 ec 08             	sub    esp,0x8
c00118b7:	68 02 23 02 c0       	push   0xc0022302
c00118bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c0:	e8 8b ee fe ff       	call   c0000750 <strcmp>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	85 c0                	test   eax,eax
c00118ca:	0f 94 c0             	sete   al
c00118cd:	0f b6 c0             	movzx  eax,al
c00118d0:	85 c0                	test   eax,eax
c00118d2:	74 0c                	je     c00118e0 <KeResolveCompatibilitySymbol(char*)+0x138>
c00118d4:	b8 30 f5 01 c0       	mov    eax,0xc001f530
c00118d9:	e9 82 00 00 00       	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118de:	66 90                	xchg   ax,ax
c00118e0:	83 ec 08             	sub    esp,0x8
c00118e3:	68 0b 23 02 c0       	push   0xc002230b
c00118e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ec:	e8 5f ee fe ff       	call   c0000750 <strcmp>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 c0                	test   eax,eax
c00118f6:	0f 94 c0             	sete   al
c00118f9:	0f b6 c0             	movzx  eax,al
c00118fc:	85 c0                	test   eax,eax
c00118fe:	74 08                	je     c0011908 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011900:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011905:	eb 59                	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011907:	90                   	nop
c0011908:	83 ec 08             	sub    esp,0x8
c001190b:	68 23 23 02 c0       	push   0xc0022323
c0011910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011914:	e8 37 ee fe ff       	call   c0000750 <strcmp>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 94 c0             	sete   al
c0011921:	0f b6 c0             	movzx  eax,al
c0011924:	85 c0                	test   eax,eax
c0011926:	74 08                	je     c0011930 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011928:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001192d:	eb 31                	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001192f:	90                   	nop
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	68 30 23 02 c0       	push   0xc0022330
c0011938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193c:	e8 0f ee fe ff       	call   c0000750 <strcmp>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	85 c0                	test   eax,eax
c0011946:	0f 94 c0             	sete   al
c0011949:	0f b6 c0             	movzx  eax,al
c001194c:	85 c0                	test   eax,eax
c001194e:	74 08                	je     c0011958 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011950:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011955:	eb 09                	jmp    c0011960 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011957:	90                   	nop
c0011958:	b8 00 00 00 00       	mov    eax,0x0
c001195d:	8d 76 00             	lea    esi,[esi+0x0]
c0011960:	83 c4 0c             	add    esp,0xc
c0011963:	c3                   	ret    

c0011964 <KiSigKill(int)>:
c0011964:	83 ec 0c             	sub    esp,0xc
c0011967:	6a 00                	push   0x0
c0011969:	6a 00                	push   0x0
c001196b:	6a ff                	push   0xffffffff
c001196d:	6a 01                	push   0x1
c001196f:	e8 de 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011974:	83 c4 1c             	add    esp,0x1c
c0011977:	c3                   	ret    

c0011978 <KiDefaultSignalHandlerIgnore(int)>:
c0011978:	c3                   	ret    

c0011979 <KiDefaultSignalHandlerPause(int)>:
c0011979:	57                   	push   edi
c001197a:	b9 07 00 00 00       	mov    ecx,0x7
c001197f:	56                   	push   esi
c0011980:	be 79 23 02 c0       	mov    esi,0xc0022379
c0011985:	83 ec 24             	sub    esp,0x24
c0011988:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001198c:	fc                   	cld    
c001198d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001198f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011993:	50                   	push   eax
c0011994:	6a 00                	push   0x0
c0011996:	6a 00                	push   0x0
c0011998:	6a 27                	push   0x27
c001199a:	e8 b3 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001199f:	83 c4 34             	add    esp,0x34
c00119a2:	5e                   	pop    esi
c00119a3:	5f                   	pop    edi
c00119a4:	c3                   	ret    

c00119a5 <KiDefaultSignalHandlerResume(int)>:
c00119a5:	57                   	push   edi
c00119a6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119ab:	56                   	push   esi
c00119ac:	be 95 23 02 c0       	mov    esi,0xc0022395
c00119b1:	83 ec 24             	sub    esp,0x24
c00119b4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119b8:	fc                   	cld    
c00119b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119bb:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119bf:	50                   	push   eax
c00119c0:	6a 00                	push   0x0
c00119c2:	6a 00                	push   0x0
c00119c4:	6a 27                	push   0x27
c00119c6:	e8 87 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119cb:	83 c4 34             	add    esp,0x34
c00119ce:	5e                   	pop    esi
c00119cf:	5f                   	pop    edi
c00119d0:	c3                   	ret    

c00119d1 <KeDeinitSignals(SigHandlerBlock*)>:
c00119d1:	e9 f0 60 ff ff       	jmp    c0007ac6 <free>

c00119d6 <KeInitSignals()>:
c00119d6:	53                   	push   ebx
c00119d7:	83 ec 14             	sub    esp,0x14
c00119da:	68 c8 00 00 00       	push   0xc8
c00119df:	e8 d2 60 ff ff       	call   c0007ab6 <malloc>
c00119e4:	83 c4 0c             	add    esp,0xc
c00119e7:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00119f1:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00119fb:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a02:	89 c3                	mov    ebx,eax
c0011a04:	6a 20                	push   0x20
c0011a06:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a0c:	6a 00                	push   0x0
c0011a0e:	50                   	push   eax
c0011a0f:	e8 dc ea fe ff       	call   c00004f0 <memset>
c0011a14:	83 c4 0c             	add    esp,0xc
c0011a17:	6a 44                	push   0x44
c0011a19:	6a 00                	push   0x0
c0011a1b:	53                   	push   ebx
c0011a1c:	e8 cf ea fe ff       	call   c00004f0 <memset>
c0011a21:	89 d8                	mov    eax,ebx
c0011a23:	83 c4 18             	add    esp,0x18
c0011a26:	5b                   	pop    ebx
c0011a27:	c3                   	ret    

c0011a28 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a28:	53                   	push   ebx
c0011a29:	b8 01 00 00 00       	mov    eax,0x1
c0011a2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a36:	83 f9 10             	cmp    ecx,0x10
c0011a39:	7f 21                	jg     c0011a5c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a3b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a42:	89 03                	mov    DWORD PTR [ebx],eax
c0011a44:	b8 01 00 00 00       	mov    eax,0x1
c0011a49:	d3 e0                	shl    eax,cl
c0011a4b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a4f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a52:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a5a:	31 c0                	xor    eax,eax
c0011a5c:	5b                   	pop    ebx
c0011a5d:	c3                   	ret    

c0011a5e <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a5e:	55                   	push   ebp
c0011a5f:	57                   	push   edi
c0011a60:	bf 08 00 00 00       	mov    edi,0x8
c0011a65:	56                   	push   esi
c0011a66:	53                   	push   ebx
c0011a67:	83 ec 18             	sub    esp,0x18
c0011a6a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a6e:	68 b2 23 02 c0       	push   0xc00223b2
c0011a73:	e8 cd 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011a78:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a7f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	31 c9                	xor    ecx,ecx
c0011a8a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011a8e:	99                   	cdq    
c0011a8f:	f7 ff                	idiv   edi
c0011a91:	8d 42 24             	lea    eax,[edx+0x24]
c0011a94:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011a98:	85 f6                	test   esi,esi
c0011a9a:	75 1a                	jne    c0011ab6 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011a9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa0:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011aa4:	50                   	push   eax
c0011aa5:	50                   	push   eax
c0011aa6:	52                   	push   edx
c0011aa7:	68 c3 23 02 c0       	push   0xc00223c3
c0011aac:	e8 94 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ab1:	83 c4 10             	add    esp,0x10
c0011ab4:	eb 1b                	jmp    c0011ad1 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011ab6:	41                   	inc    ecx
c0011ab7:	83 f9 08             	cmp    ecx,0x8
c0011aba:	75 ce                	jne    c0011a8a <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	be 01 00 00 00       	mov    esi,0x1
c0011ac4:	68 e4 23 02 c0       	push   0xc00223e4
c0011ac9:	e8 77 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	83 c4 0c             	add    esp,0xc
c0011ad4:	89 f0                	mov    eax,esi
c0011ad6:	5b                   	pop    ebx
c0011ad7:	5e                   	pop    esi
c0011ad8:	5f                   	pop    edi
c0011ad9:	5d                   	pop    ebp
c0011ada:	c3                   	ret    

c0011adb <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011adb:	55                   	push   ebp
c0011adc:	57                   	push   edi
c0011add:	56                   	push   esi
c0011ade:	53                   	push   ebx
c0011adf:	51                   	push   ecx
c0011ae0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011ae4:	85 db                	test   ebx,ebx
c0011ae6:	0f 84 bc 00 00 00    	je     c0011ba8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011aec:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011af3:	0f 84 af 00 00 00    	je     c0011ba8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011af9:	31 c9                	xor    ecx,ecx
c0011afb:	bf 08 00 00 00       	mov    edi,0x8
c0011b00:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b06:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b09:	99                   	cdq    
c0011b0a:	f7 ff                	idiv   edi
c0011b0c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b13:	85 ed                	test   ebp,ebp
c0011b15:	0f 84 9e 00 00 00    	je     c0011bb9 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b1b:	89 e9                	mov    ecx,ebp
c0011b1d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b23:	bf 01 00 00 00       	mov    edi,0x1
c0011b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b2b:	d3 e7                	shl    edi,cl
c0011b2d:	31 c9                	xor    ecx,ecx
c0011b2f:	b8 01 00 00 00       	mov    eax,0x1
c0011b34:	d3 e0                	shl    eax,cl
c0011b36:	85 04 24             	test   DWORD PTR [esp],eax
c0011b39:	74 06                	je     c0011b41 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b3b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b3f:	75 67                	jne    c0011ba8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b41:	41                   	inc    ecx
c0011b42:	83 f9 11             	cmp    ecx,0x11
c0011b45:	75 e8                	jne    c0011b2f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b47:	46                   	inc    esi
c0011b48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b4b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b51:	09 f8                	or     eax,edi
c0011b53:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b5e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b64:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b6b:	31 c0                	xor    eax,eax
c0011b6d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011b75:	74 09                	je     c0011b80 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011b77:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b7e:	eb 06                	jmp    c0011b86 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011b80:	40                   	inc    eax
c0011b81:	83 f8 08             	cmp    eax,0x8
c0011b84:	75 e7                	jne    c0011b6d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011b86:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011b89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b8d:	83 fd 09             	cmp    ebp,0x9
c0011b90:	89 2a                	mov    DWORD PTR [edx],ebp
c0011b92:	75 07                	jne    c0011b9b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011b94:	b8 64 19 01 c0       	mov    eax,0xc0011964
c0011b99:	eb 31                	jmp    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011b9b:	83 f8 01             	cmp    eax,0x1
c0011b9e:	75 0c                	jne    c0011bac <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011ba0:	f7 d7                	not    edi
c0011ba2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011ba8:	31 c0                	xor    eax,eax
c0011baa:	eb 20                	jmp    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bac:	85 c0                	test   eax,eax
c0011bae:	75 1c                	jne    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bb0:	8b 04 ad e0 3b 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc420]
c0011bb7:	eb 13                	jmp    c0011bcc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bb9:	46                   	inc    esi
c0011bba:	41                   	inc    ecx
c0011bbb:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bc1:	83 f9 08             	cmp    ecx,0x8
c0011bc4:	0f 85 36 ff ff ff    	jne    c0011b00 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011bca:	eb dc                	jmp    c0011ba8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bcc:	5a                   	pop    edx
c0011bcd:	5b                   	pop    ebx
c0011bce:	5e                   	pop    esi
c0011bcf:	5f                   	pop    edi
c0011bd0:	5d                   	pop    ebp
c0011bd1:	c3                   	ret    

c0011bd2 <KiCheckSignalZ>:
c0011bd2:	83 ec 10             	sub    esp,0x10
c0011bd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011bd9:	50                   	push   eax
c0011bda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bdf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011be8:	e8 ee fe ff ff       	call   c0011adb <KeCheckSignal(SigHandlerBlock*, int*)>
c0011bed:	5a                   	pop    edx
c0011bee:	31 d2                	xor    edx,edx
c0011bf0:	59                   	pop    ecx
c0011bf1:	85 c0                	test   eax,eax
c0011bf3:	74 19                	je     c0011c0e <KiCheckSignalZ+0x3c>
c0011bf5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bfb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011bfe:	89 02                	mov    DWORD PTR [edx],eax
c0011c00:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c0e:	89 d0                	mov    eax,edx
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	c3                   	ret    

c0011c14 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c14:	56                   	push   esi
c0011c15:	53                   	push   ebx
c0011c16:	bb 01 00 00 00       	mov    ebx,0x1
c0011c1b:	52                   	push   edx
c0011c1c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c24:	d3 e3                	shl    ebx,cl
c0011c26:	83 f9 10             	cmp    ecx,0x10
c0011c29:	7f 08                	jg     c0011c33 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c2b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c31:	75 10                	jne    c0011c43 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c33:	83 ec 0c             	sub    esp,0xc
c0011c36:	68 f5 23 02 c0       	push   0xc00223f5
c0011c3b:	e8 7b f9 ff ff       	call   c00115bb <KePanic(char const*)>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	f7 d3                	not    ebx
c0011c45:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c4b:	58                   	pop    eax
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	c3                   	ret    

c0011c4f <KiFinishSignalZ>:
c0011c4f:	53                   	push   ebx
c0011c50:	83 ec 10             	sub    esp,0x10
c0011c53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c57:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c62:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c68:	e8 a7 ff ff ff       	call   c0011c14 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c6d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011c7a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011c81:	83 c4 18             	add    esp,0x18
c0011c84:	5b                   	pop    ebx
c0011c85:	c3                   	ret    

c0011c86 <SysSeekDir(regs*)>:
c0011c86:	31 c0                	xor    eax,eax
c0011c88:	31 d2                	xor    edx,edx
c0011c8a:	c3                   	ret    

c0011c8b <SysTellDir(regs*)>:
c0011c8b:	31 c0                	xor    eax,eax
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	c3                   	ret    

c0011c90 <SysVerify(regs*)>:
c0011c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c94:	31 d2                	xor    edx,edx
c0011c96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c99:	c3                   	ret    

c0011c9a <SysGetArgc(regs*)>:
c0011c9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ca2:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011ca8:	89 c2                	mov    edx,eax
c0011caa:	c1 fa 1f             	sar    edx,0x1f
c0011cad:	c3                   	ret    

c0011cae <SysTTYName(regs*)>:
c0011cae:	b8 01 00 00 00       	mov    eax,0x1
c0011cb3:	31 d2                	xor    edx,edx
c0011cb5:	c3                   	ret    

c0011cb6 <SysFormatDisk(regs*)>:
c0011cb6:	56                   	push   esi
c0011cb7:	53                   	push   ebx
c0011cb8:	83 ec 04             	sub    esp,0x4
c0011cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cbf:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011cc5:	eb 28                	jmp    c0011cef <SysFormatDisk(regs*)+0x39>
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ccd:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011cd0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cd2:	51                   	push   ecx
c0011cd3:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011cd6:	51                   	push   ecx
c0011cd7:	50                   	push   eax
c0011cd8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011cdf:	50                   	push   eax
c0011ce0:	53                   	push   ebx
c0011ce1:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011ce4:	83 c4 20             	add    esp,0x20
c0011ce7:	83 f8 08             	cmp    eax,0x8
c0011cea:	75 14                	jne    c0011d00 <SysFormatDisk(regs*)+0x4a>
c0011cec:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011cef:	85 db                	test   ebx,ebx
c0011cf1:	75 d4                	jne    c0011cc7 <SysFormatDisk(regs*)+0x11>
c0011cf3:	83 c4 04             	add    esp,0x4
c0011cf6:	b8 03 00 00 00       	mov    eax,0x3
c0011cfb:	31 d2                	xor    edx,edx
c0011cfd:	5b                   	pop    ebx
c0011cfe:	5e                   	pop    esi
c0011cff:	c3                   	ret    
c0011d00:	85 c0                	test   eax,eax
c0011d02:	74 1f                	je     c0011d23 <SysFormatDisk(regs*)+0x6d>
c0011d04:	83 f8 09             	cmp    eax,0x9
c0011d07:	74 0d                	je     c0011d16 <SysFormatDisk(regs*)+0x60>
c0011d09:	83 c4 04             	add    esp,0x4
c0011d0c:	b8 02 00 00 00       	mov    eax,0x2
c0011d11:	31 d2                	xor    edx,edx
c0011d13:	5b                   	pop    ebx
c0011d14:	5e                   	pop    esi
c0011d15:	c3                   	ret    
c0011d16:	83 c4 04             	add    esp,0x4
c0011d19:	b8 01 00 00 00       	mov    eax,0x1
c0011d1e:	31 d2                	xor    edx,edx
c0011d20:	5b                   	pop    ebx
c0011d21:	5e                   	pop    esi
c0011d22:	c3                   	ret    
c0011d23:	83 c4 04             	add    esp,0x4
c0011d26:	31 c0                	xor    eax,eax
c0011d28:	31 d2                	xor    edx,edx
c0011d2a:	5b                   	pop    ebx
c0011d2b:	5e                   	pop    esi
c0011d2c:	c3                   	ret    

c0011d2d <SysSetDiskVolumeLabel(regs*)>:
c0011d2d:	56                   	push   esi
c0011d2e:	53                   	push   ebx
c0011d2f:	83 ec 04             	sub    esp,0x4
c0011d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d36:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d39:	83 f8 19             	cmp    eax,0x19
c0011d3c:	77 33                	ja     c0011d71 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d3e:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d45:	85 c9                	test   ecx,ecx
c0011d47:	74 28                	je     c0011d71 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d49:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d4c:	85 db                	test   ebx,ebx
c0011d4e:	74 21                	je     c0011d71 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d50:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d56:	85 d2                	test   edx,edx
c0011d58:	74 17                	je     c0011d71 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d5a:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d5c:	53                   	push   ebx
c0011d5d:	50                   	push   eax
c0011d5e:	51                   	push   ecx
c0011d5f:	52                   	push   edx
c0011d60:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d63:	83 c4 10             	add    esp,0x10
c0011d66:	89 c2                	mov    edx,eax
c0011d68:	83 c4 04             	add    esp,0x4
c0011d6b:	c1 fa 1f             	sar    edx,0x1f
c0011d6e:	5b                   	pop    ebx
c0011d6f:	5e                   	pop    esi
c0011d70:	c3                   	ret    
c0011d71:	83 c4 04             	add    esp,0x4
c0011d74:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d7e:	5b                   	pop    ebx
c0011d7f:	5e                   	pop    esi
c0011d80:	c3                   	ret    

c0011d81 <SysGetDiskVolumeLabel(regs*)>:
c0011d81:	57                   	push   edi
c0011d82:	56                   	push   esi
c0011d83:	53                   	push   ebx
c0011d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d88:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011d8b:	83 fa 19             	cmp    edx,0x19
c0011d8e:	77 3c                	ja     c0011dcc <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d90:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011d97:	85 c9                	test   ecx,ecx
c0011d99:	74 31                	je     c0011dcc <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d9b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011d9e:	85 db                	test   ebx,ebx
c0011da0:	74 2a                	je     c0011dcc <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011da2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011da5:	85 f6                	test   esi,esi
c0011da7:	74 23                	je     c0011dcc <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011da9:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011daf:	85 c0                	test   eax,eax
c0011db1:	74 19                	je     c0011dcc <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011db3:	83 ec 0c             	sub    esp,0xc
c0011db6:	8b 38                	mov    edi,DWORD PTR [eax]
c0011db8:	56                   	push   esi
c0011db9:	53                   	push   ebx
c0011dba:	52                   	push   edx
c0011dbb:	51                   	push   ecx
c0011dbc:	50                   	push   eax
c0011dbd:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011dc0:	83 c4 20             	add    esp,0x20
c0011dc3:	89 c2                	mov    edx,eax
c0011dc5:	5b                   	pop    ebx
c0011dc6:	c1 fa 1f             	sar    edx,0x1f
c0011dc9:	5e                   	pop    esi
c0011dca:	5f                   	pop    edi
c0011dcb:	c3                   	ret    
c0011dcc:	5b                   	pop    ebx
c0011dcd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011dd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dd7:	5e                   	pop    esi
c0011dd8:	5f                   	pop    edi
c0011dd9:	c3                   	ret    

c0011dda <SysShutdown(regs*)>:
c0011dda:	83 ec 0c             	sub    esp,0xc
c0011ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011de4:	85 c0                	test   eax,eax
c0011de6:	74 18                	je     c0011e00 <SysShutdown(regs*)+0x26>
c0011de8:	83 f8 01             	cmp    eax,0x1
c0011deb:	74 38                	je     c0011e25 <SysShutdown(regs*)+0x4b>
c0011ded:	83 f8 02             	cmp    eax,0x2
c0011df0:	74 24                	je     c0011e16 <SysShutdown(regs*)+0x3c>
c0011df2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011df7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dfc:	83 c4 0c             	add    esp,0xc
c0011dff:	c3                   	ret    
c0011e00:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e05:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e07:	6a 00                	push   0x0
c0011e09:	6a 00                	push   0x0
c0011e0b:	6a 00                	push   0x0
c0011e0d:	50                   	push   eax
c0011e0e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e11:	83 c4 10             	add    esp,0x10
c0011e14:	eb dc                	jmp    c0011df2 <SysShutdown(regs*)+0x18>
c0011e16:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e1d:	6a 00                	push   0x0
c0011e1f:	6a 00                	push   0x0
c0011e21:	6a 01                	push   0x1
c0011e23:	eb e8                	jmp    c0011e0d <SysShutdown(regs*)+0x33>
c0011e25:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e2a:	85 c0                	test   eax,eax
c0011e2c:	74 02                	je     c0011e30 <SysShutdown(regs*)+0x56>
c0011e2e:	ff d0                	call   eax
c0011e30:	31 c0                	xor    eax,eax
c0011e32:	31 d2                	xor    edx,edx
c0011e34:	83 c4 0c             	add    esp,0xc
c0011e37:	c3                   	ret    

c0011e38 <SysRealpath(regs*)>:
c0011e38:	83 ec 0c             	sub    esp,0xc
c0011e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e42:	85 d2                	test   edx,edx
c0011e44:	74 07                	je     c0011e4d <SysRealpath(regs*)+0x15>
c0011e46:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011e49:	85 c0                	test   eax,eax
c0011e4b:	75 0b                	jne    c0011e58 <SysRealpath(regs*)+0x20>
c0011e4d:	b8 01 00 00 00       	mov    eax,0x1
c0011e52:	31 d2                	xor    edx,edx
c0011e54:	83 c4 0c             	add    esp,0xc
c0011e57:	c3                   	ret    
c0011e58:	6a 00                	push   0x0
c0011e5a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011e60:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011e63:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011e69:	51                   	push   ecx
c0011e6a:	52                   	push   edx
c0011e6b:	50                   	push   eax
c0011e6c:	e8 91 99 ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	31 c0                	xor    eax,eax
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	83 c4 0c             	add    esp,0xc
c0011e7b:	c3                   	ret    

c0011e7c <SysReadDir(regs*)>:
c0011e7c:	53                   	push   ebx
c0011e7d:	83 ec 18             	sub    esp,0x18
c0011e80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e84:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e87:	83 f8 02             	cmp    eax,0x2
c0011e8a:	76 61                	jbe    c0011eed <SysReadDir(regs*)+0x71>
c0011e8c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e93:	77 49                	ja     c0011ede <SysReadDir(regs*)+0x62>
c0011e95:	83 ec 0c             	sub    esp,0xc
c0011e98:	50                   	push   eax
c0011e99:	e8 15 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	85 c0                	test   eax,eax
c0011ea3:	74 39                	je     c0011ede <SysReadDir(regs*)+0x62>
c0011ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ead:	83 ec 0c             	sub    esp,0xc
c0011eb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0011eb2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011eb6:	51                   	push   ecx
c0011eb7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011eba:	51                   	push   ecx
c0011ebb:	6a 00                	push   0x0
c0011ebd:	68 10 01 00 00       	push   0x110
c0011ec2:	50                   	push   eax
c0011ec3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	74 29                	je     c0011ef6 <SysReadDir(regs*)+0x7a>
c0011ecd:	83 f8 07             	cmp    eax,0x7
c0011ed0:	74 1b                	je     c0011eed <SysReadDir(regs*)+0x71>
c0011ed2:	b8 02 00 00 00       	mov    eax,0x2
c0011ed7:	31 d2                	xor    edx,edx
c0011ed9:	83 c4 18             	add    esp,0x18
c0011edc:	5b                   	pop    ebx
c0011edd:	c3                   	ret    
c0011ede:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ee3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ee8:	83 c4 18             	add    esp,0x18
c0011eeb:	5b                   	pop    ebx
c0011eec:	c3                   	ret    
c0011eed:	b8 01 00 00 00       	mov    eax,0x1
c0011ef2:	31 d2                	xor    edx,edx
c0011ef4:	eb e3                	jmp    c0011ed9 <SysReadDir(regs*)+0x5d>
c0011ef6:	31 c0                	xor    eax,eax
c0011ef8:	31 d2                	xor    edx,edx
c0011efa:	eb dd                	jmp    c0011ed9 <SysReadDir(regs*)+0x5d>

c0011efc <SysIsATTY(regs*)>:
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f06:	83 f8 02             	cmp    eax,0x2
c0011f09:	76 07                	jbe    c0011f12 <SysIsATTY(regs*)+0x16>
c0011f0b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f10:	75 26                	jne    c0011f38 <SysIsATTY(regs*)+0x3c>
c0011f12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f20:	85 c0                	test   eax,eax
c0011f22:	74 24                	je     c0011f48 <SysIsATTY(regs*)+0x4c>
c0011f24:	83 ec 0c             	sub    esp,0xc
c0011f27:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f29:	50                   	push   eax
c0011f2a:	ff 12                	call   DWORD PTR [edx]
c0011f2c:	31 d2                	xor    edx,edx
c0011f2e:	0f b6 c0             	movzx  eax,al
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	83 c4 0c             	add    esp,0xc
c0011f37:	c3                   	ret    
c0011f38:	83 ec 0c             	sub    esp,0xc
c0011f3b:	50                   	push   eax
c0011f3c:	e8 72 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	85 c0                	test   eax,eax
c0011f46:	75 dc                	jne    c0011f24 <SysIsATTY(regs*)+0x28>
c0011f48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f52:	83 c4 0c             	add    esp,0xc
c0011f55:	c3                   	ret    

c0011f56 <SysSeek(regs*)>:
c0011f56:	53                   	push   ebx
c0011f57:	83 ec 08             	sub    esp,0x8
c0011f5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f61:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f64:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f6a:	77 32                	ja     c0011f9e <SysSeek(regs*)+0x48>
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	50                   	push   eax
c0011f70:	e8 3e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f75:	83 c4 0c             	add    esp,0xc
c0011f78:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011f7b:	31 db                	xor    ebx,ebx
c0011f7d:	53                   	push   ebx
c0011f7e:	51                   	push   ecx
c0011f7f:	50                   	push   eax
c0011f80:	e8 41 9c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	85 c0                	test   eax,eax
c0011f8a:	0f 95 c0             	setne  al
c0011f8d:	31 d2                	xor    edx,edx
c0011f8f:	0f b6 c0             	movzx  eax,al
c0011f92:	f7 d8                	neg    eax
c0011f94:	83 d2 00             	adc    edx,0x0
c0011f97:	83 c4 08             	add    esp,0x8
c0011f9a:	f7 da                	neg    edx
c0011f9c:	5b                   	pop    ebx
c0011f9d:	c3                   	ret    
c0011f9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fa3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fa8:	83 c4 08             	add    esp,0x8
c0011fab:	5b                   	pop    ebx
c0011fac:	c3                   	ret    

c0011fad <SysTell(regs*)>:
c0011fad:	53                   	push   ebx
c0011fae:	83 ec 08             	sub    esp,0x8
c0011fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fb5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fb8:	83 f8 02             	cmp    eax,0x2
c0011fbb:	76 4e                	jbe    c001200b <SysTell(regs*)+0x5e>
c0011fbd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fc2:	76 19                	jbe    c0011fdd <SysTell(regs*)+0x30>
c0011fc4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fc7:	31 d2                	xor    edx,edx
c0011fc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fd6:	31 c0                	xor    eax,eax
c0011fd8:	83 c4 08             	add    esp,0x8
c0011fdb:	5b                   	pop    ebx
c0011fdc:	c3                   	ret    
c0011fdd:	83 ec 0c             	sub    esp,0xc
c0011fe0:	50                   	push   eax
c0011fe1:	e8 cd 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fe6:	5a                   	pop    edx
c0011fe7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011fea:	59                   	pop    ecx
c0011feb:	53                   	push   ebx
c0011fec:	50                   	push   eax
c0011fed:	e8 80 9c ff ff       	call   c000bc72 <File::tell(unsigned long long*)>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	85 c0                	test   eax,eax
c0011ff7:	0f 95 c0             	setne  al
c0011ffa:	31 d2                	xor    edx,edx
c0011ffc:	0f b6 c0             	movzx  eax,al
c0011fff:	f7 d8                	neg    eax
c0012001:	83 d2 00             	adc    edx,0x0
c0012004:	83 c4 08             	add    esp,0x8
c0012007:	f7 da                	neg    edx
c0012009:	5b                   	pop    ebx
c001200a:	c3                   	ret    
c001200b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012010:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012015:	83 c4 08             	add    esp,0x8
c0012018:	5b                   	pop    ebx
c0012019:	c3                   	ret    

c001201a <SysSize(regs*)>:
c001201a:	53                   	push   ebx
c001201b:	83 ec 18             	sub    esp,0x18
c001201e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012022:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012025:	83 f8 02             	cmp    eax,0x2
c0012028:	76 54                	jbe    c001207e <SysSize(regs*)+0x64>
c001202a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001202f:	76 19                	jbe    c001204a <SysSize(regs*)+0x30>
c0012031:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012034:	31 d2                	xor    edx,edx
c0012036:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001203c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012043:	31 c0                	xor    eax,eax
c0012045:	83 c4 18             	add    esp,0x18
c0012048:	5b                   	pop    ebx
c0012049:	c3                   	ret    
c001204a:	83 ec 0c             	sub    esp,0xc
c001204d:	50                   	push   eax
c001204e:	e8 60 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012053:	83 c4 0c             	add    esp,0xc
c0012056:	8d 54 24 13          	lea    edx,[esp+0x13]
c001205a:	52                   	push   edx
c001205b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001205e:	52                   	push   edx
c001205f:	50                   	push   eax
c0012060:	e8 a5 9d ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	85 c0                	test   eax,eax
c001206a:	0f 95 c0             	setne  al
c001206d:	31 d2                	xor    edx,edx
c001206f:	0f b6 c0             	movzx  eax,al
c0012072:	f7 d8                	neg    eax
c0012074:	83 d2 00             	adc    edx,0x0
c0012077:	83 c4 18             	add    esp,0x18
c001207a:	f7 da                	neg    edx
c001207c:	5b                   	pop    ebx
c001207d:	c3                   	ret    
c001207e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012083:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012088:	83 c4 18             	add    esp,0x18
c001208b:	5b                   	pop    ebx
c001208c:	c3                   	ret    

c001208d <SysSizeFromFilename(regs*)>:
c001208d:	55                   	push   ebp
c001208e:	57                   	push   edi
c001208f:	56                   	push   esi
c0012090:	53                   	push   ebx
c0012091:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0012097:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c001209e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120a1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120a4:	85 f6                	test   esi,esi
c00120a6:	74 34                	je     c00120dc <SysSizeFromFilename(regs*)+0x4f>
c00120a8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120b1:	83 f8 02             	cmp    eax,0x2
c00120b4:	76 2d                	jbe    c00120e3 <SysSizeFromFilename(regs*)+0x56>
c00120b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120bb:	76 3b                	jbe    c00120f8 <SysSizeFromFilename(regs*)+0x6b>
c00120bd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120cd:	81 c4 3c 01 00 00    	add    esp,0x13c
c00120d3:	31 c0                	xor    eax,eax
c00120d5:	5b                   	pop    ebx
c00120d6:	31 d2                	xor    edx,edx
c00120d8:	5e                   	pop    esi
c00120d9:	5f                   	pop    edi
c00120da:	5d                   	pop    ebp
c00120db:	c3                   	ret    
c00120dc:	89 f8                	mov    eax,edi
c00120de:	83 f8 02             	cmp    eax,0x2
c00120e1:	77 d3                	ja     c00120b6 <SysSizeFromFilename(regs*)+0x29>
c00120e3:	81 c4 3c 01 00 00    	add    esp,0x13c
c00120e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120ee:	5b                   	pop    ebx
c00120ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120f4:	5e                   	pop    esi
c00120f5:	5f                   	pop    edi
c00120f6:	5d                   	pop    ebp
c00120f7:	c3                   	ret    
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	68 14 01 00 00       	push   0x114
c0012100:	e8 b1 59 ff ff       	call   c0007ab6 <malloc>
c0012105:	6a 01                	push   0x1
c0012107:	89 c5                	mov    ebp,eax
c0012109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001210e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012111:	50                   	push   eax
c0012112:	57                   	push   edi
c0012113:	55                   	push   ebp
c0012114:	e8 f3 98 ff ff       	call   c000ba0c <File::File(char const*, Process*, bool)>
c0012119:	83 c4 1c             	add    esp,0x1c
c001211c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012120:	50                   	push   eax
c0012121:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012124:	52                   	push   edx
c0012125:	55                   	push   ebp
c0012126:	e8 df 9c ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	85 ed                	test   ebp,ebp
c0012130:	74 15                	je     c0012147 <SysSizeFromFilename(regs*)+0xba>
c0012132:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012136:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	55                   	push   ebp
c001213d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012140:	83 c4 10             	add    esp,0x10
c0012143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012147:	85 c0                	test   eax,eax
c0012149:	75 98                	jne    c00120e3 <SysSizeFromFilename(regs*)+0x56>
c001214b:	83 ec 08             	sub    esp,0x8
c001214e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012152:	50                   	push   eax
c0012153:	57                   	push   edi
c0012154:	e8 d2 8f ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	83 f8 01             	cmp    eax,0x1
c001215f:	74 1a                	je     c001217b <SysSizeFromFilename(regs*)+0xee>
c0012161:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012166:	74 26                	je     c001218e <SysSizeFromFilename(regs*)+0x101>
c0012168:	85 f6                	test   esi,esi
c001216a:	0f 84 5d ff ff ff    	je     c00120cd <SysSizeFromFilename(regs*)+0x40>
c0012170:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012176:	e9 52 ff ff ff       	jmp    c00120cd <SysSizeFromFilename(regs*)+0x40>
c001217b:	85 f6                	test   esi,esi
c001217d:	0f 84 4a ff ff ff    	je     c00120cd <SysSizeFromFilename(regs*)+0x40>
c0012183:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012189:	e9 3f ff ff ff       	jmp    c00120cd <SysSizeFromFilename(regs*)+0x40>
c001218e:	85 f6                	test   esi,esi
c0012190:	0f 84 37 ff ff ff    	je     c00120cd <SysSizeFromFilename(regs*)+0x40>
c0012196:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001219c:	e9 2c ff ff ff       	jmp    c00120cd <SysSizeFromFilename(regs*)+0x40>

c00121a1 <SysSizeFromFilenameNoSymlink(regs*)>:
c00121a1:	55                   	push   ebp
c00121a2:	57                   	push   edi
c00121a3:	56                   	push   esi
c00121a4:	53                   	push   ebx
c00121a5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121ab:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121b2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121b5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121b8:	85 f6                	test   esi,esi
c00121ba:	74 34                	je     c00121f0 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00121bc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121c5:	83 f8 02             	cmp    eax,0x2
c00121c8:	76 2d                	jbe    c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00121ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121cf:	76 3b                	jbe    c001220c <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00121d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121e1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121e7:	31 c0                	xor    eax,eax
c00121e9:	5b                   	pop    ebx
c00121ea:	31 d2                	xor    edx,edx
c00121ec:	5e                   	pop    esi
c00121ed:	5f                   	pop    edi
c00121ee:	5d                   	pop    ebp
c00121ef:	c3                   	ret    
c00121f0:	89 f8                	mov    eax,edi
c00121f2:	83 f8 02             	cmp    eax,0x2
c00121f5:	77 d3                	ja     c00121ca <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00121f7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012202:	5b                   	pop    ebx
c0012203:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012208:	5e                   	pop    esi
c0012209:	5f                   	pop    edi
c001220a:	5d                   	pop    ebp
c001220b:	c3                   	ret    
c001220c:	83 ec 0c             	sub    esp,0xc
c001220f:	68 14 01 00 00       	push   0x114
c0012214:	e8 9d 58 ff ff       	call   c0007ab6 <malloc>
c0012219:	6a 00                	push   0x0
c001221b:	89 c5                	mov    ebp,eax
c001221d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012222:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012225:	51                   	push   ecx
c0012226:	57                   	push   edi
c0012227:	55                   	push   ebp
c0012228:	e8 df 97 ff ff       	call   c000ba0c <File::File(char const*, Process*, bool)>
c001222d:	83 c4 1c             	add    esp,0x1c
c0012230:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012234:	50                   	push   eax
c0012235:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012238:	53                   	push   ebx
c0012239:	55                   	push   ebp
c001223a:	e8 cb 9b ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	85 ed                	test   ebp,ebp
c0012244:	74 15                	je     c001225b <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0012246:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001224a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001224d:	83 ec 0c             	sub    esp,0xc
c0012250:	55                   	push   ebp
c0012251:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012254:	83 c4 10             	add    esp,0x10
c0012257:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001225b:	85 c0                	test   eax,eax
c001225d:	75 98                	jne    c00121f7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001225f:	6a 00                	push   0x0
c0012261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012266:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012269:	05 0c 01 00 00       	add    eax,0x10c
c001226e:	50                   	push   eax
c001226f:	57                   	push   edi
c0012270:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012277:	53                   	push   ebx
c0012278:	e8 85 95 ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001227d:	58                   	pop    eax
c001227e:	5a                   	pop    edx
c001227f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012283:	50                   	push   eax
c0012284:	53                   	push   ebx
c0012285:	e8 a1 8e ff ff       	call   c000b12b <KeDereferenceSymlink(char const*, char*)>
c001228a:	83 c4 10             	add    esp,0x10
c001228d:	83 f8 01             	cmp    eax,0x1
c0012290:	74 1a                	je     c00122ac <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0012292:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012297:	74 26                	je     c00122bf <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0012299:	85 f6                	test   esi,esi
c001229b:	0f 84 40 ff ff ff    	je     c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122a1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122a7:	e9 35 ff ff ff       	jmp    c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122ac:	85 f6                	test   esi,esi
c00122ae:	0f 84 2d ff ff ff    	je     c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122b4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122ba:	e9 22 ff ff ff       	jmp    c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122bf:	85 f6                	test   esi,esi
c00122c1:	0f 84 1a ff ff ff    	je     c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122c7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122cd:	e9 0f ff ff ff       	jmp    c00121e1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00122d2 <SysClose(regs*)>:
c00122d2:	53                   	push   ebx
c00122d3:	83 ec 08             	sub    esp,0x8
c00122d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122da:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00122dd:	83 f8 02             	cmp    eax,0x2
c00122e0:	76 41                	jbe    c0012323 <SysClose(regs*)+0x51>
c00122e2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00122e8:	83 fa 01             	cmp    edx,0x1
c00122eb:	76 2d                	jbe    c001231a <SysClose(regs*)+0x48>
c00122ed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122f2:	77 2f                	ja     c0012323 <SysClose(regs*)+0x51>
c00122f4:	83 ec 0c             	sub    esp,0xc
c00122f7:	50                   	push   eax
c00122f8:	e8 b6 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00122fd:	89 c3                	mov    ebx,eax
c00122ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0012302:	e8 5f 98 ff ff       	call   c000bb66 <File::close()>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	85 db                	test   ebx,ebx
c001230c:	74 0c                	je     c001231a <SysClose(regs*)+0x48>
c001230e:	83 ec 0c             	sub    esp,0xc
c0012311:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012313:	53                   	push   ebx
c0012314:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	31 c0                	xor    eax,eax
c001231c:	31 d2                	xor    edx,edx
c001231e:	83 c4 08             	add    esp,0x8
c0012321:	5b                   	pop    ebx
c0012322:	c3                   	ret    
c0012323:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012328:	ba ff ff ff ff       	mov    edx,0xffffffff
c001232d:	83 c4 08             	add    esp,0x8
c0012330:	5b                   	pop    ebx
c0012331:	c3                   	ret    

c0012332 <SysOpenDir(regs*)>:
c0012332:	56                   	push   esi
c0012333:	53                   	push   ebx
c0012334:	83 ec 04             	sub    esp,0x4
c0012337:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001233b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001233e:	85 c9                	test   ecx,ecx
c0012340:	74 5d                	je     c001239f <SysOpenDir(regs*)+0x6d>
c0012342:	83 ec 0c             	sub    esp,0xc
c0012345:	68 14 01 00 00       	push   0x114
c001234a:	e8 67 57 ff ff       	call   c0007ab6 <malloc>
c001234f:	83 c4 0c             	add    esp,0xc
c0012352:	89 c6                	mov    esi,eax
c0012354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012359:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001235c:	50                   	push   eax
c001235d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012360:	52                   	push   edx
c0012361:	56                   	push   esi
c0012362:	e8 63 9c ff ff       	call   c000bfca <Directory::Directory(char const*, Process*)>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	85 f6                	test   esi,esi
c001236c:	74 31                	je     c001239f <SysOpenDir(regs*)+0x6d>
c001236e:	83 ec 0c             	sub    esp,0xc
c0012371:	56                   	push   esi
c0012372:	e8 1b 9d ff ff       	call   c000c092 <Directory::open()>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	85 c0                	test   eax,eax
c001237c:	75 21                	jne    c001239f <SysOpenDir(regs*)+0x6d>
c001237e:	83 ec 0c             	sub    esp,0xc
c0012381:	56                   	push   esi
c0012382:	e8 2f 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012387:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001238a:	83 c4 10             	add    esp,0x10
c001238d:	89 02                	mov    DWORD PTR [edx],eax
c001238f:	c1 f8 1f             	sar    eax,0x1f
c0012392:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012395:	83 c4 04             	add    esp,0x4
c0012398:	31 c0                	xor    eax,eax
c001239a:	31 d2                	xor    edx,edx
c001239c:	5b                   	pop    ebx
c001239d:	5e                   	pop    esi
c001239e:	c3                   	ret    
c001239f:	83 c4 04             	add    esp,0x4
c00123a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123ac:	5b                   	pop    ebx
c00123ad:	5e                   	pop    esi
c00123ae:	c3                   	ret    

c00123af <SysMakeDir(regs*)>:
c00123af:	56                   	push   esi
c00123b0:	53                   	push   ebx
c00123b1:	83 ec 10             	sub    esp,0x10
c00123b4:	68 14 01 00 00       	push   0x114
c00123b9:	e8 f8 56 ff ff       	call   c0007ab6 <malloc>
c00123be:	83 c4 0c             	add    esp,0xc
c00123c1:	89 c3                	mov    ebx,eax
c00123c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123cb:	50                   	push   eax
c00123cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123d0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00123d3:	52                   	push   edx
c00123d4:	53                   	push   ebx
c00123d5:	e8 f0 9b ff ff       	call   c000bfca <Directory::Directory(char const*, Process*)>
c00123da:	83 c4 10             	add    esp,0x10
c00123dd:	85 db                	test   ebx,ebx
c00123df:	74 2c                	je     c001240d <SysMakeDir(regs*)+0x5e>
c00123e1:	83 ec 0c             	sub    esp,0xc
c00123e4:	53                   	push   ebx
c00123e5:	e8 88 9e ff ff       	call   c000c272 <Directory::create()>
c00123ea:	89 c6                	mov    esi,eax
c00123ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	31 c0                	xor    eax,eax
c00123f9:	85 f6                	test   esi,esi
c00123fb:	0f 95 c0             	setne  al
c00123fe:	31 d2                	xor    edx,edx
c0012400:	f7 d8                	neg    eax
c0012402:	83 d2 00             	adc    edx,0x0
c0012405:	83 c4 04             	add    esp,0x4
c0012408:	f7 da                	neg    edx
c001240a:	5b                   	pop    ebx
c001240b:	5e                   	pop    esi
c001240c:	c3                   	ret    
c001240d:	83 c4 04             	add    esp,0x4
c0012410:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012415:	ba ff ff ff ff       	mov    edx,0xffffffff
c001241a:	5b                   	pop    ebx
c001241b:	5e                   	pop    esi
c001241c:	c3                   	ret    

c001241d <SysCloseDir(regs*)>:
c001241d:	53                   	push   ebx
c001241e:	83 ec 08             	sub    esp,0x8
c0012421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012425:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012428:	8d 50 fd             	lea    edx,[eax-0x3]
c001242b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012431:	77 2f                	ja     c0012462 <SysCloseDir(regs*)+0x45>
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	50                   	push   eax
c0012437:	e8 77 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001243c:	89 c3                	mov    ebx,eax
c001243e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012441:	e8 a8 9c ff ff       	call   c000c0ee <Directory::close()>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	85 db                	test   ebx,ebx
c001244b:	74 0c                	je     c0012459 <SysCloseDir(regs*)+0x3c>
c001244d:	83 ec 0c             	sub    esp,0xc
c0012450:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012452:	53                   	push   ebx
c0012453:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	31 c0                	xor    eax,eax
c001245b:	31 d2                	xor    edx,edx
c001245d:	83 c4 08             	add    esp,0x8
c0012460:	5b                   	pop    ebx
c0012461:	c3                   	ret    
c0012462:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012467:	ba ff ff ff ff       	mov    edx,0xffffffff
c001246c:	83 c4 08             	add    esp,0x8
c001246f:	5b                   	pop    ebx
c0012470:	c3                   	ret    

c0012471 <SysWait(regs*)>:
c0012471:	83 ec 10             	sub    esp,0x10
c0012474:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012478:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001247b:	52                   	push   edx
c001247c:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001247f:	51                   	push   ecx
c0012480:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012483:	50                   	push   eax
c0012484:	e8 03 3e 00 00       	call   c001628c <waitTask(int, int*, int)>
c0012489:	83 c4 1c             	add    esp,0x1c
c001248c:	89 c2                	mov    edx,eax
c001248e:	c1 fa 1f             	sar    edx,0x1f
c0012491:	c3                   	ret    

c0012492 <SysNotImpl(regs*)>:
c0012492:	83 ec 18             	sub    esp,0x18
c0012495:	68 06 24 02 c0       	push   0xc0022406
c001249a:	e8 1c f1 ff ff       	call   c00115bb <KePanic(char const*)>
c001249f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124a9:	83 c4 1c             	add    esp,0x1c
c00124ac:	c3                   	ret    

c00124ad <SysPanic(regs*)>:
c00124ad:	83 ec 18             	sub    esp,0x18
c00124b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124b4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00124b7:	50                   	push   eax
c00124b8:	e8 fe f0 ff ff       	call   c00115bb <KePanic(char const*)>
c00124bd:	b8 01 00 00 00       	mov    eax,0x1
c00124c2:	31 d2                	xor    edx,edx
c00124c4:	83 c4 1c             	add    esp,0x1c
c00124c7:	c3                   	ret    

c00124c8 <SysRmdir(regs*)>:
c00124c8:	56                   	push   esi
c00124c9:	53                   	push   ebx
c00124ca:	83 ec 20             	sub    esp,0x20
c00124cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124d1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124d4:	68 14 01 00 00       	push   0x114
c00124d9:	e8 d8 55 ff ff       	call   c0007ab6 <malloc>
c00124de:	6a 00                	push   0x0
c00124e0:	89 c3                	mov    ebx,eax
c00124e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124ea:	50                   	push   eax
c00124eb:	56                   	push   esi
c00124ec:	53                   	push   ebx
c00124ed:	e8 1a 95 ff ff       	call   c000ba0c <File::File(char const*, Process*, bool)>
c00124f2:	83 c4 14             	add    esp,0x14
c00124f5:	53                   	push   ebx
c00124f6:	e8 db 97 ff ff       	call   c000bcd6 <File::unlink()>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	85 db                	test   ebx,ebx
c0012500:	74 14                	je     c0012516 <SysRmdir(regs*)+0x4e>
c0012502:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012506:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	53                   	push   ebx
c001250c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012516:	85 c0                	test   eax,eax
c0012518:	0f 95 c0             	setne  al
c001251b:	31 d2                	xor    edx,edx
c001251d:	0f b6 c0             	movzx  eax,al
c0012520:	f7 d8                	neg    eax
c0012522:	83 d2 00             	adc    edx,0x0
c0012525:	83 c4 14             	add    esp,0x14
c0012528:	f7 da                	neg    edx
c001252a:	5b                   	pop    ebx
c001252b:	5e                   	pop    esi
c001252c:	c3                   	ret    

c001252d <SysUnlink(regs*)>:
c001252d:	56                   	push   esi
c001252e:	53                   	push   ebx
c001252f:	83 ec 20             	sub    esp,0x20
c0012532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012536:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012539:	68 14 01 00 00       	push   0x114
c001253e:	e8 73 55 ff ff       	call   c0007ab6 <malloc>
c0012543:	6a 00                	push   0x0
c0012545:	89 c3                	mov    ebx,eax
c0012547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001254c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001254f:	50                   	push   eax
c0012550:	56                   	push   esi
c0012551:	53                   	push   ebx
c0012552:	e8 b5 94 ff ff       	call   c000ba0c <File::File(char const*, Process*, bool)>
c0012557:	83 c4 14             	add    esp,0x14
c001255a:	53                   	push   ebx
c001255b:	e8 76 97 ff ff       	call   c000bcd6 <File::unlink()>
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	85 db                	test   ebx,ebx
c0012565:	74 14                	je     c001257b <SysUnlink(regs*)+0x4e>
c0012567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001256b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001256d:	83 ec 0c             	sub    esp,0xc
c0012570:	53                   	push   ebx
c0012571:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001257b:	85 c0                	test   eax,eax
c001257d:	0f 95 c0             	setne  al
c0012580:	31 d2                	xor    edx,edx
c0012582:	0f b6 c0             	movzx  eax,al
c0012585:	f7 d8                	neg    eax
c0012587:	83 d2 00             	adc    edx,0x0
c001258a:	83 c4 14             	add    esp,0x14
c001258d:	f7 da                	neg    edx
c001258f:	5b                   	pop    ebx
c0012590:	5e                   	pop    esi
c0012591:	c3                   	ret    

c0012592 <SysGetArgv(regs*)>:
c0012592:	83 ec 0c             	sub    esp,0xc
c0012595:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012599:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001259c:	85 c0                	test   eax,eax
c001259e:	78 2c                	js     c00125cc <SysGetArgv(regs*)+0x3a>
c00125a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125a6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00125a9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00125af:	7d 1b                	jge    c00125cc <SysGetArgv(regs*)+0x3a>
c00125b1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00125b8:	85 c0                	test   eax,eax
c00125ba:	74 18                	je     c00125d4 <SysGetArgv(regs*)+0x42>
c00125bc:	83 ec 08             	sub    esp,0x8
c00125bf:	50                   	push   eax
c00125c0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00125c3:	50                   	push   eax
c00125c4:	e8 77 e0 fe ff       	call   c0000640 <strcpy>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	31 c0                	xor    eax,eax
c00125ce:	31 d2                	xor    edx,edx
c00125d0:	83 c4 0c             	add    esp,0xc
c00125d3:	c3                   	ret    
c00125d4:	b8 01 00 00 00       	mov    eax,0x1
c00125d9:	31 d2                	xor    edx,edx
c00125db:	83 c4 0c             	add    esp,0xc
c00125de:	c3                   	ret    

c00125df <SysUSleep(regs*)>:
c00125df:	83 ec 1c             	sub    esp,0x1c
c00125e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125e6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00125e9:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00125ec:	6a 00                	push   0x0
c00125ee:	6a 64                	push   0x64
c00125f0:	52                   	push   edx
c00125f1:	50                   	push   eax
c00125f2:	e8 b9 d0 00 00       	call   c001f6b0 <__udivdi3>
c00125f7:	83 c4 14             	add    esp,0x14
c00125fa:	50                   	push   eax
c00125fb:	e8 70 3d 00 00       	call   c0016370 <milliTenthSleep(unsigned int)>
c0012600:	31 c0                	xor    eax,eax
c0012602:	31 d2                	xor    edx,edx
c0012604:	83 c4 1c             	add    esp,0x1c
c0012607:	c3                   	ret    

c0012608 <SysSpawn(regs*)>:
c0012608:	56                   	push   esi
c0012609:	53                   	push   ebx
c001260a:	83 ec 04             	sub    esp,0x4
c001260d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012611:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012614:	85 f6                	test   esi,esi
c0012616:	75 0a                	jne    c0012622 <SysSpawn(regs*)+0x1a>
c0012618:	83 c4 04             	add    esp,0x4
c001261b:	31 c0                	xor    eax,eax
c001261d:	31 d2                	xor    edx,edx
c001261f:	5b                   	pop    ebx
c0012620:	5e                   	pop    esi
c0012621:	c3                   	ret    
c0012622:	83 ec 0c             	sub    esp,0xc
c0012625:	68 24 07 00 00       	push   0x724
c001262a:	e8 87 54 ff ff       	call   c0007ab6 <malloc>
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012635:	89 c6                	mov    esi,eax
c0012637:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001263a:	85 c9                	test   ecx,ecx
c001263c:	75 39                	jne    c0012677 <SysSpawn(regs*)+0x6f>
c001263e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012643:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012646:	52                   	push   edx
c0012647:	50                   	push   eax
c0012648:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001264b:	50                   	push   eax
c001264c:	56                   	push   esi
c001264d:	e8 6e 33 00 00       	call   c00159c0 <Process::Process(char const*, Process*, char**)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001265c:	75 ba                	jne    c0012618 <SysSpawn(regs*)+0x10>
c001265e:	83 ec 0c             	sub    esp,0xc
c0012661:	56                   	push   esi
c0012662:	e8 95 38 00 00       	call   c0015efc <Process::createUserThread()>
c0012667:	8b 06                	mov    eax,DWORD PTR [esi]
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	89 c2                	mov    edx,eax
c001266e:	83 c4 04             	add    esp,0x4
c0012671:	c1 fa 1f             	sar    edx,0x1f
c0012674:	5b                   	pop    ebx
c0012675:	5e                   	pop    esi
c0012676:	c3                   	ret    
c0012677:	31 c0                	xor    eax,eax
c0012679:	eb cb                	jmp    c0012646 <SysSpawn(regs*)+0x3e>

c001267b <SysGetEnv(regs*)>:
c001267b:	57                   	push   edi
c001267c:	56                   	push   esi
c001267d:	53                   	push   ebx
c001267e:	83 ec 1c             	sub    esp,0x1c
c0012681:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012685:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001268a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001268d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012690:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012693:	51                   	push   ecx
c0012694:	e8 da ed ff ff       	call   c0011473 <KeGetProcessTotalEnvCount(Process*)>
c0012699:	83 c4 10             	add    esp,0x10
c001269c:	39 c7                	cmp    edi,eax
c001269e:	7c 14                	jl     c00126b4 <SysGetEnv(regs*)+0x39>
c00126a0:	85 f6                	test   esi,esi
c00126a2:	75 0b                	jne    c00126af <SysGetEnv(regs*)+0x34>
c00126a4:	83 c4 10             	add    esp,0x10
c00126a7:	31 c0                	xor    eax,eax
c00126a9:	5b                   	pop    ebx
c00126aa:	31 d2                	xor    edx,edx
c00126ac:	5e                   	pop    esi
c00126ad:	5f                   	pop    edi
c00126ae:	c3                   	ret    
c00126af:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126b2:	eb f0                	jmp    c00126a4 <SysGetEnv(regs*)+0x29>
c00126b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00126b8:	83 ec 04             	sub    esp,0x4
c00126bb:	57                   	push   edi
c00126bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00126c2:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00126c5:	57                   	push   edi
c00126c6:	50                   	push   eax
c00126c7:	e8 c7 ed ff ff       	call   c0011493 <KeGetProcessEnvPair(Process*, int)>
c00126cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126d7:	83 c4 0c             	add    esp,0xc
c00126da:	85 d2                	test   edx,edx
c00126dc:	75 23                	jne    c0012701 <SysGetEnv(regs*)+0x86>
c00126de:	83 ec 0c             	sub    esp,0xc
c00126e1:	50                   	push   eax
c00126e2:	e8 89 de fe ff       	call   c0000570 <strlen>
c00126e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126ea:	89 c3                	mov    ebx,eax
c00126ec:	e8 7f de fe ff       	call   c0000570 <strlen>
c00126f1:	83 c4 10             	add    esp,0x10
c00126f4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	31 d2                	xor    edx,edx
c00126fd:	5b                   	pop    ebx
c00126fe:	5e                   	pop    esi
c00126ff:	5f                   	pop    edi
c0012700:	c3                   	ret    
c0012701:	83 ec 08             	sub    esp,0x8
c0012704:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012707:	50                   	push   eax
c0012708:	56                   	push   esi
c0012709:	e8 32 df fe ff       	call   c0000640 <strcpy>
c001270e:	58                   	pop    eax
c001270f:	5a                   	pop    edx
c0012710:	68 20 24 02 c0       	push   0xc0022420
c0012715:	56                   	push   esi
c0012716:	e8 25 e1 fe ff       	call   c0000840 <strcat>
c001271b:	59                   	pop    ecx
c001271c:	5b                   	pop    ebx
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	e8 1c e1 fe ff       	call   c0000840 <strcat>
c0012724:	83 c4 10             	add    esp,0x10
c0012727:	e9 78 ff ff ff       	jmp    c00126a4 <SysGetEnv(regs*)+0x29>

c001272c <SysSetFatAttrib(regs*)>:
c001272c:	57                   	push   edi
c001272d:	56                   	push   esi
c001272e:	53                   	push   ebx
c001272f:	83 ec 1c             	sub    esp,0x1c
c0012732:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012736:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012739:	68 14 01 00 00       	push   0x114
c001273e:	e8 73 53 ff ff       	call   c0007ab6 <malloc>
c0012743:	83 c4 0c             	add    esp,0xc
c0012746:	89 c3                	mov    ebx,eax
c0012748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001274d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012750:	50                   	push   eax
c0012751:	57                   	push   edi
c0012752:	53                   	push   ebx
c0012753:	e8 92 93 ff ff       	call   c000baea <File::File(char const*, Process*)>
c0012758:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001275b:	83 c4 0c             	add    esp,0xc
c001275e:	0f b6 d4             	movzx  edx,ah
c0012761:	0f b6 c0             	movzx  eax,al
c0012764:	52                   	push   edx
c0012765:	50                   	push   eax
c0012766:	53                   	push   ebx
c0012767:	e8 04 96 ff ff       	call   c000bd70 <File::chfatattr(unsigned char, unsigned char)>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	85 db                	test   ebx,ebx
c0012771:	74 14                	je     c0012787 <SysSetFatAttrib(regs*)+0x5b>
c0012773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012777:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012779:	83 ec 0c             	sub    esp,0xc
c001277c:	53                   	push   ebx
c001277d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012787:	85 c0                	test   eax,eax
c0012789:	0f 95 c0             	setne  al
c001278c:	31 d2                	xor    edx,edx
c001278e:	0f b6 c0             	movzx  eax,al
c0012791:	f7 d8                	neg    eax
c0012793:	83 d2 00             	adc    edx,0x0
c0012796:	83 c4 10             	add    esp,0x10
c0012799:	f7 da                	neg    edx
c001279b:	5b                   	pop    ebx
c001279c:	5e                   	pop    esi
c001279d:	5f                   	pop    edi
c001279e:	c3                   	ret    

c001279f <SysPipe(regs*)>:
c001279f:	57                   	push   edi
c00127a0:	56                   	push   esi
c00127a1:	53                   	push   ebx
c00127a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127ac:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00127af:	6a 20                	push   0x20
c00127b1:	e8 00 53 ff ff       	call   c0007ab6 <malloc>
c00127b6:	89 c3                	mov    ebx,eax
c00127b8:	58                   	pop    eax
c00127b9:	5a                   	pop    edx
c00127ba:	68 00 50 00 00       	push   0x5000
c00127bf:	53                   	push   ebx
c00127c0:	e8 63 5c ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00127c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127c8:	e8 e9 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00127cd:	89 07                	mov    DWORD PTR [edi],eax
c00127cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127d2:	e8 df 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	89 06                	mov    DWORD PTR [esi],eax
c00127dc:	31 d2                	xor    edx,edx
c00127de:	5b                   	pop    ebx
c00127df:	31 c0                	xor    eax,eax
c00127e1:	5e                   	pop    esi
c00127e2:	5f                   	pop    edi
c00127e3:	c3                   	ret    

c00127e4 <SysGetUnixTime(regs*)>:
c00127e4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00127e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127f3:	e9 be 9c ff ff       	jmp    c000c4b6 <Clock::timeInSecondsLocal()>

c00127f8 <string_ends_with(char const*, char const*)>:
c00127f8:	57                   	push   edi
c00127f9:	56                   	push   esi
c00127fa:	53                   	push   ebx
c00127fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012803:	83 ec 0c             	sub    esp,0xc
c0012806:	53                   	push   ebx
c0012807:	e8 64 dd fe ff       	call   c0000570 <strlen>
c001280c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001280f:	89 c6                	mov    esi,eax
c0012811:	e8 5a dd fe ff       	call   c0000570 <strlen>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	39 c6                	cmp    esi,eax
c001281b:	7d 06                	jge    c0012823 <string_ends_with(char const*, char const*)+0x2b>
c001281d:	5b                   	pop    ebx
c001281e:	31 c0                	xor    eax,eax
c0012820:	5e                   	pop    esi
c0012821:	5f                   	pop    edi
c0012822:	c3                   	ret    
c0012823:	83 ec 08             	sub    esp,0x8
c0012826:	29 c6                	sub    esi,eax
c0012828:	57                   	push   edi
c0012829:	01 f3                	add    ebx,esi
c001282b:	53                   	push   ebx
c001282c:	e8 1f df fe ff       	call   c0000750 <strcmp>
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	85 c0                	test   eax,eax
c0012836:	5b                   	pop    ebx
c0012837:	0f 94 c0             	sete   al
c001283a:	5e                   	pop    esi
c001283b:	0f b6 c0             	movzx  eax,al
c001283e:	5f                   	pop    edi
c001283f:	c3                   	ret    

c0012840 <SysOpen(regs*)>:
c0012840:	56                   	push   esi
c0012841:	53                   	push   ebx
c0012842:	81 ec 04 01 00 00    	sub    esp,0x104
c0012848:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001284f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012852:	85 c0                	test   eax,eax
c0012854:	0f 84 bc 01 00 00    	je     c0012a16 <SysOpen(regs*)+0x1d6>
c001285a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001285d:	85 c0                	test   eax,eax
c001285f:	0f 84 b1 01 00 00    	je     c0012a16 <SysOpen(regs*)+0x1d6>
c0012865:	6a 00                	push   0x0
c0012867:	68 22 24 02 c0       	push   0xc0022422
c001286c:	50                   	push   eax
c001286d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012871:	56                   	push   esi
c0012872:	e8 8b 8f ff ff       	call   c000b802 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012877:	89 34 24             	mov    DWORD PTR [esp],esi
c001287a:	e8 f1 dc fe ff       	call   c0000570 <strlen>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	83 e8 01             	sub    eax,0x1
c0012885:	74 21                	je     c00128a8 <SysOpen(regs*)+0x68>
c0012887:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001288b:	eb 12                	jmp    c001289f <SysOpen(regs*)+0x5f>
c001288d:	83 fa 3a             	cmp    edx,0x3a
c0012890:	74 12                	je     c00128a4 <SysOpen(regs*)+0x64>
c0012892:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012896:	83 e8 01             	sub    eax,0x1
c0012899:	74 0d                	je     c00128a8 <SysOpen(regs*)+0x68>
c001289b:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001289f:	83 fa 2e             	cmp    edx,0x2e
c00128a2:	75 e9                	jne    c001288d <SysOpen(regs*)+0x4d>
c00128a4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128a8:	83 ec 08             	sub    esp,0x8
c00128ab:	68 26 24 02 c0       	push   0xc0022426
c00128b0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128b3:	50                   	push   eax
c00128b4:	e8 3f ff ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	85 c0                	test   eax,eax
c00128be:	74 1d                	je     c00128dd <SysOpen(regs*)+0x9d>
c00128c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128c3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00128c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128d0:	81 c4 04 01 00 00    	add    esp,0x104
c00128d6:	31 c0                	xor    eax,eax
c00128d8:	31 d2                	xor    edx,edx
c00128da:	5b                   	pop    ebx
c00128db:	5e                   	pop    esi
c00128dc:	c3                   	ret    
c00128dd:	83 ec 08             	sub    esp,0x8
c00128e0:	68 2b 24 02 c0       	push   0xc002242b
c00128e5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e8:	50                   	push   eax
c00128e9:	e8 0a ff ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	85 c0                	test   eax,eax
c00128f3:	75 cb                	jne    c00128c0 <SysOpen(regs*)+0x80>
c00128f5:	83 ec 08             	sub    esp,0x8
c00128f8:	68 27 24 02 c0       	push   0xc0022427
c00128fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012900:	50                   	push   eax
c0012901:	e8 4a de fe ff       	call   c0000750 <strcmp>
c0012906:	83 c4 10             	add    esp,0x10
c0012909:	85 c0                	test   eax,eax
c001290b:	74 b3                	je     c00128c0 <SysOpen(regs*)+0x80>
c001290d:	83 ec 08             	sub    esp,0x8
c0012910:	68 26 24 02 c0       	push   0xc0022426
c0012915:	56                   	push   esi
c0012916:	e8 dd fe ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	85 c0                	test   eax,eax
c0012920:	75 9e                	jne    c00128c0 <SysOpen(regs*)+0x80>
c0012922:	83 ec 08             	sub    esp,0x8
c0012925:	68 30 24 02 c0       	push   0xc0022430
c001292a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001292d:	50                   	push   eax
c001292e:	e8 c5 fe ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	85 c0                	test   eax,eax
c0012938:	0f 85 eb 00 00 00    	jne    c0012a29 <SysOpen(regs*)+0x1e9>
c001293e:	83 ec 08             	sub    esp,0x8
c0012941:	68 35 24 02 c0       	push   0xc0022435
c0012946:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012949:	50                   	push   eax
c001294a:	e8 a9 fe ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	85 c0                	test   eax,eax
c0012954:	0f 85 cf 00 00 00    	jne    c0012a29 <SysOpen(regs*)+0x1e9>
c001295a:	83 ec 08             	sub    esp,0x8
c001295d:	68 31 24 02 c0       	push   0xc0022431
c0012962:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012965:	51                   	push   ecx
c0012966:	e8 e5 dd fe ff       	call   c0000750 <strcmp>
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	85 c0                	test   eax,eax
c0012970:	0f 84 b3 00 00 00    	je     c0012a29 <SysOpen(regs*)+0x1e9>
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	68 30 24 02 c0       	push   0xc0022430
c001297e:	56                   	push   esi
c001297f:	e8 74 fe ff ff       	call   c00127f8 <string_ends_with(char const*, char const*)>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	85 c0                	test   eax,eax
c0012989:	0f 85 9a 00 00 00    	jne    c0012a29 <SysOpen(regs*)+0x1e9>
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	68 14 01 00 00       	push   0x114
c0012997:	e8 1a 51 ff ff       	call   c0007ab6 <malloc>
c001299c:	83 c4 0c             	add    esp,0xc
c001299f:	89 c6                	mov    esi,eax
c00129a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129a9:	50                   	push   eax
c00129aa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00129ad:	52                   	push   edx
c00129ae:	56                   	push   esi
c00129af:	e8 36 91 ff ff       	call   c000baea <File::File(char const*, Process*)>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	85 f6                	test   esi,esi
c00129b9:	74 5b                	je     c0012a16 <SysOpen(regs*)+0x1d6>
c00129bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129be:	0f b6 c2             	movzx  eax,dl
c00129c1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00129c4:	89 d0                	mov    eax,edx
c00129c6:	83 e0 01             	and    eax,0x1
c00129c9:	f6 c2 02             	test   dl,0x2
c00129cc:	74 03                	je     c00129d1 <SysOpen(regs*)+0x191>
c00129ce:	83 c8 02             	or     eax,0x2
c00129d1:	f6 c2 04             	test   dl,0x4
c00129d4:	74 03                	je     c00129d9 <SysOpen(regs*)+0x199>
c00129d6:	83 c8 04             	or     eax,0x4
c00129d9:	f6 c2 08             	test   dl,0x8
c00129dc:	74 03                	je     c00129e1 <SysOpen(regs*)+0x1a1>
c00129de:	83 c8 0a             	or     eax,0xa
c00129e1:	80 e2 10             	and    dl,0x10
c00129e4:	74 03                	je     c00129e9 <SysOpen(regs*)+0x1a9>
c00129e6:	83 c8 12             	or     eax,0x12
c00129e9:	83 ec 08             	sub    esp,0x8
c00129ec:	50                   	push   eax
c00129ed:	56                   	push   esi
c00129ee:	e8 15 91 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	85 c0                	test   eax,eax
c00129f8:	75 1c                	jne    c0012a16 <SysOpen(regs*)+0x1d6>
c00129fa:	83 ec 0c             	sub    esp,0xc
c00129fd:	56                   	push   esi
c00129fe:	e8 b3 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a03:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a06:	83 c4 10             	add    esp,0x10
c0012a09:	89 02                	mov    DWORD PTR [edx],eax
c0012a0b:	c1 f8 1f             	sar    eax,0x1f
c0012a0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a11:	e9 ba fe ff ff       	jmp    c00128d0 <SysOpen(regs*)+0x90>
c0012a16:	81 c4 04 01 00 00    	add    esp,0x104
c0012a1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a21:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a26:	5b                   	pop    ebx
c0012a27:	5e                   	pop    esi
c0012a28:	c3                   	ret    
c0012a29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a2c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a32:	e9 92 fe ff ff       	jmp    c00128c9 <SysOpen(regs*)+0x89>

c0012a37 <KeSystemCall(regs*, void*)>:
c0012a37:	53                   	push   ebx
c0012a38:	83 ec 08             	sub    esp,0x8
c0012a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a3f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a42:	83 f8 3e             	cmp    eax,0x3e
c0012a45:	77 16                	ja     c0012a5d <KeSystemCall(regs*, void*)+0x26>
c0012a47:	8b 14 85 40 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc3c0]
c0012a4e:	85 d2                	test   edx,edx
c0012a50:	74 0b                	je     c0012a5d <KeSystemCall(regs*, void*)+0x26>
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	53                   	push   ebx
c0012a56:	ff d2                	call   edx
c0012a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a5b:	eb 0d                	jmp    c0012a6a <KeSystemCall(regs*, void*)+0x33>
c0012a5d:	52                   	push   edx
c0012a5e:	52                   	push   edx
c0012a5f:	50                   	push   eax
c0012a60:	68 3a 24 02 c0       	push   0xc002243a
c0012a65:	e8 db 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a72:	31 d2                	xor    edx,edx
c0012a74:	83 c4 08             	add    esp,0x8
c0012a77:	5b                   	pop    ebx
c0012a78:	c3                   	ret    
c0012a79:	66 90                	xchg   ax,ax
c0012a7b:	90                   	nop

c0012a7c <KeSwitchEndian16(unsigned short)>:
c0012a7c:	83 ec 04             	sub    esp,0x4
c0012a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a83:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012a87:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a8b:	c1 f8 08             	sar    eax,0x8
c0012a8e:	89 c2                	mov    edx,eax
c0012a90:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012a94:	c1 e0 08             	shl    eax,0x8
c0012a97:	09 d0                	or     eax,edx
c0012a99:	83 c4 04             	add    esp,0x4
c0012a9c:	c3                   	ret    
c0012a9d:	8d 76 00             	lea    esi,[esi+0x0]

c0012aa0 <KeSwitchEndian32(unsigned int)>:
c0012aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa4:	c1 e8 18             	shr    eax,0x18
c0012aa7:	89 c2                	mov    edx,eax
c0012aa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aad:	c1 e0 08             	shl    eax,0x8
c0012ab0:	25 00 00 ff 00       	and    eax,0xff0000
c0012ab5:	09 c2                	or     edx,eax
c0012ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012abb:	c1 e8 08             	shr    eax,0x8
c0012abe:	25 00 ff 00 00       	and    eax,0xff00
c0012ac3:	09 c2                	or     edx,eax
c0012ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ac9:	c1 e0 18             	shl    eax,0x18
c0012acc:	09 d0                	or     eax,edx
c0012ace:	c3                   	ret    
c0012acf:	90                   	nop

c0012ad0 <EthernetCRC32(unsigned char*, int)>:
c0012ad0:	83 ec 10             	sub    esp,0x10
c0012ad3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012ad8:	75 0a                	jne    c0012ae4 <EthernetCRC32(unsigned char*, int)+0x14>
c0012ada:	b8 00 00 00 00       	mov    eax,0x0
c0012adf:	e9 8c 00 00 00       	jmp    c0012b70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012ae4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012ae9:	7f 09                	jg     c0012af4 <EthernetCRC32(unsigned char*, int)+0x24>
c0012aeb:	b8 00 00 00 00       	mov    eax,0x0
c0012af0:	eb 7e                	jmp    c0012b70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012af2:	66 90                	xchg   ax,ax
c0012af4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012afc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b0c:	7d 5a                	jge    c0012b68 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b16:	01 d0                	add    eax,edx
c0012b18:	8a 00                	mov    al,BYTE PTR [eax]
c0012b1a:	0f b6 c0             	movzx  eax,al
c0012b1d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b29:	8d 76 00             	lea    esi,[esi+0x0]
c0012b2c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b31:	7f 2d                	jg     c0012b60 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b37:	83 e0 01             	and    eax,0x1
c0012b3a:	74 10                	je     c0012b4c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b40:	d1 e8                	shr    eax,1
c0012b42:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b47:	eb 0b                	jmp    c0012b54 <EthernetCRC32(unsigned char*, int)+0x84>
c0012b49:	8d 76 00             	lea    esi,[esi+0x0]
c0012b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b50:	d1 e8                	shr    eax,1
c0012b52:	66 90                	xchg   ax,ax
c0012b54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b58:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012b5d:	eb cd                	jmp    c0012b2c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012b5f:	90                   	nop
c0012b60:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012b65:	eb 9d                	jmp    c0012b04 <EthernetCRC32(unsigned char*, int)+0x34>
c0012b67:	90                   	nop
c0012b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b6c:	f7 d0                	not    eax
c0012b6e:	66 90                	xchg   ax,ax
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	c3                   	ret    

c0012b74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012b74:	83 ec 2c             	sub    esp,0x2c
c0012b77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b7b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b8f:	0f b7 c0             	movzx  eax,ax
c0012b92:	3d 06 08 00 00       	cmp    eax,0x806
c0012b97:	75 13                	jne    c0012bac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012b99:	83 ec 0c             	sub    esp,0xc
c0012b9c:	68 4e 24 02 c0       	push   0xc002244e
c0012ba1:	e8 9f 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	eb 25                	jmp    c0012bd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bab:	90                   	nop
c0012bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bb3:	0f b7 c0             	movzx  eax,ax
c0012bb6:	3d 00 08 00 00       	cmp    eax,0x800
c0012bbb:	75 13                	jne    c0012bd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bbd:	83 ec 0c             	sub    esp,0xc
c0012bc0:	68 64 24 02 c0       	push   0xc0022464
c0012bc5:	e8 7b 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012bca:	83 c4 10             	add    esp,0x10
c0012bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd0:	90                   	nop
c0012bd1:	83 c4 2c             	add    esp,0x2c
c0012bd4:	c3                   	ret    

c0012bd5 <CmOpen(char const*)>:
c0012bd5:	57                   	push   edi
c0012bd6:	56                   	push   esi
c0012bd7:	53                   	push   ebx
c0012bd8:	83 ec 1c             	sub    esp,0x1c
c0012bdb:	6a 30                	push   0x30
c0012bdd:	e8 d4 4e ff ff       	call   c0007ab6 <malloc>
c0012be2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012be9:	89 c3                	mov    ebx,eax
c0012beb:	e8 c6 4e ff ff       	call   c0007ab6 <malloc>
c0012bf0:	83 c4 0c             	add    esp,0xc
c0012bf3:	89 c6                	mov    esi,eax
c0012bf5:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012bfb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012bff:	50                   	push   eax
c0012c00:	e8 e5 8e ff ff       	call   c000baea <File::File(char const*, Process*)>
c0012c05:	83 c4 0c             	add    esp,0xc
c0012c08:	89 33                	mov    DWORD PTR [ebx],esi
c0012c0a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c0e:	50                   	push   eax
c0012c0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c13:	50                   	push   eax
c0012c14:	56                   	push   esi
c0012c15:	e8 f0 91 ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0012c1a:	5a                   	pop    edx
c0012c1b:	59                   	pop    ecx
c0012c1c:	6a 01                	push   0x1
c0012c1e:	ff 33                	push   DWORD PTR [ebx]
c0012c20:	e8 e3 8e ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0012c25:	5e                   	pop    esi
c0012c26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c2a:	e8 87 4e ff ff       	call   c0007ab6 <malloc>
c0012c2f:	5a                   	pop    edx
c0012c30:	89 c7                	mov    edi,eax
c0012c32:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c38:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c3a:	56                   	push   esi
c0012c3b:	57                   	push   edi
c0012c3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c44:	50                   	push   eax
c0012c45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c48:	83 c4 14             	add    esp,0x14
c0012c4b:	ff 33                	push   DWORD PTR [ebx]
c0012c4d:	e8 14 8f ff ff       	call   c000bb66 <File::close()>
c0012c52:	59                   	pop    ecx
c0012c53:	58                   	pop    eax
c0012c54:	6a 13                	push   0x13
c0012c56:	ff 33                	push   DWORD PTR [ebx]
c0012c58:	e8 ab 8e ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0012c5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c64:	57                   	push   edi
c0012c65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c6d:	50                   	push   eax
c0012c6e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c71:	83 c4 14             	add    esp,0x14
c0012c74:	57                   	push   edi
c0012c75:	e8 4c 4e ff ff       	call   c0007ac6 <free>
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012c80:	75 10                	jne    c0012c92 <CmOpen(char const*)+0xbd>
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	68 79 24 02 c0       	push   0xc0022479
c0012c8a:	e8 2c e9 ff ff       	call   c00115bb <KePanic(char const*)>
c0012c8f:	83 c4 10             	add    esp,0x10
c0012c92:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c95:	50                   	push   eax
c0012c96:	6a 00                	push   0x0
c0012c98:	6a 00                	push   0x0
c0012c9a:	ff 33                	push   DWORD PTR [ebx]
c0012c9c:	e8 25 8f ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012ca1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ca5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ca8:	57                   	push   edi
c0012ca9:	6a 00                	push   0x0
c0012cab:	6a 2b                	push   0x2b
c0012cad:	50                   	push   eax
c0012cae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cb1:	83 c4 1c             	add    esp,0x1c
c0012cb4:	6a 00                	push   0x0
c0012cb6:	6a 00                	push   0x0
c0012cb8:	ff 33                	push   DWORD PTR [ebx]
c0012cba:	e8 07 8f ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012cbf:	83 c4 0c             	add    esp,0xc
c0012cc2:	6a 08                	push   0x8
c0012cc4:	68 8a 24 02 c0       	push   0xc002248a
c0012cc9:	57                   	push   edi
c0012cca:	e8 b1 d6 fe ff       	call   c0000380 <memcmp>
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	85 c0                	test   eax,eax
c0012cd4:	74 10                	je     c0012ce6 <CmOpen(char const*)+0x111>
c0012cd6:	83 ec 0c             	sub    esp,0xc
c0012cd9:	68 93 24 02 c0       	push   0xc0022493
c0012cde:	e8 d8 e8 ff ff       	call   c00115bb <KePanic(char const*)>
c0012ce3:	83 c4 10             	add    esp,0x10
c0012ce6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012cea:	89 d8                	mov    eax,ebx
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	5b                   	pop    ebx
c0012cf0:	5e                   	pop    esi
c0012cf1:	5f                   	pop    edi
c0012cf2:	c3                   	ret    

c0012cf3 <CmClose(Reghive_Tag*)>:
c0012cf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cf7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012cfb:	74 0b                	je     c0012d08 <CmClose(Reghive_Tag*)+0x15>
c0012cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d03:	e9 5e 8e ff ff       	jmp    c000bb66 <File::close()>
c0012d08:	c3                   	ret    

c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d09:	53                   	push   ebx
c0012d0a:	83 ec 18             	sub    esp,0x18
c0012d0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d11:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d15:	74 29                	je     c0012d40 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d17:	50                   	push   eax
c0012d18:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d1d:	99                   	cdq    
c0012d1e:	52                   	push   edx
c0012d1f:	50                   	push   eax
c0012d20:	ff 33                	push   DWORD PTR [ebx]
c0012d22:	e8 9f 8e ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012d27:	5a                   	pop    edx
c0012d28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d2a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d30:	51                   	push   ecx
c0012d31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d35:	6a 00                	push   0x0
c0012d37:	6a 2b                	push   0x2b
c0012d39:	50                   	push   eax
c0012d3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d3d:	83 c4 20             	add    esp,0x20
c0012d40:	83 c4 18             	add    esp,0x18
c0012d43:	5b                   	pop    ebx
c0012d44:	c3                   	ret    

c0012d45 <CmGetString(Reghive_Tag*, int, char*)>:
c0012d45:	55                   	push   ebp
c0012d46:	57                   	push   edi
c0012d47:	56                   	push   esi
c0012d48:	53                   	push   ebx
c0012d49:	31 db                	xor    ebx,ebx
c0012d4b:	83 ec 70             	sub    esp,0x70
c0012d4e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d55:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012d59:	50                   	push   eax
c0012d5a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012d61:	55                   	push   ebp
c0012d62:	e8 a2 ff ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012d6f:	c1 e0 08             	shl    eax,0x8
c0012d72:	89 c2                	mov    edx,eax
c0012d74:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012d79:	09 d0                	or     eax,edx
c0012d7b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012d80:	c1 e0 08             	shl    eax,0x8
c0012d83:	09 d0                	or     eax,edx
c0012d85:	74 25                	je     c0012dac <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012d87:	6b fb 0d             	imul   edi,ebx,0xd
c0012d8a:	52                   	push   edx
c0012d8b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012d8f:	52                   	push   edx
c0012d90:	50                   	push   eax
c0012d91:	55                   	push   ebp
c0012d92:	e8 72 ff ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d97:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012d9b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012da2:	b9 27 00 00 00       	mov    ecx,0x27
c0012da7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012da9:	83 c4 10             	add    esp,0x10
c0012dac:	83 c3 03             	add    ebx,0x3
c0012daf:	83 fb 15             	cmp    ebx,0x15
c0012db2:	75 b6                	jne    c0012d6a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012db4:	83 c4 6c             	add    esp,0x6c
c0012db7:	5b                   	pop    ebx
c0012db8:	5e                   	pop    esi
c0012db9:	5f                   	pop    edi
c0012dba:	5d                   	pop    ebp
c0012dbb:	c3                   	ret    

c0012dbc <CmEnterDirectory(Reghive_Tag*, int)>:
c0012dbc:	83 ec 40             	sub    esp,0x40
c0012dbf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dc3:	50                   	push   eax
c0012dc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dcc:	e8 38 ff ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	83 c8 ff             	or     eax,0xffffffff
c0012dd7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012ddc:	75 19                	jne    c0012df7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012dde:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012de3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012de8:	c1 e0 08             	shl    eax,0x8
c0012deb:	09 c2                	or     edx,eax
c0012ded:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012df2:	c1 e0 10             	shl    eax,0x10
c0012df5:	09 d0                	or     eax,edx
c0012df7:	83 c4 3c             	add    esp,0x3c
c0012dfa:	c3                   	ret    

c0012dfb <CmGetNext(Reghive_Tag*, int)>:
c0012dfb:	83 ec 40             	sub    esp,0x40
c0012dfe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e02:	50                   	push   eax
c0012e03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e0b:	e8 f9 fe ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e10:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e15:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e1a:	c1 e0 08             	shl    eax,0x8
c0012e1d:	09 c2                	or     edx,eax
c0012e1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e24:	83 c4 4c             	add    esp,0x4c
c0012e27:	c1 e0 10             	shl    eax,0x10
c0012e2a:	09 d0                	or     eax,edx
c0012e2c:	c3                   	ret    

c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e2d:	53                   	push   ebx
c0012e2e:	83 ec 18             	sub    esp,0x18
c0012e31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e35:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e39:	74 29                	je     c0012e64 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e3b:	50                   	push   eax
c0012e3c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e41:	99                   	cdq    
c0012e42:	52                   	push   edx
c0012e43:	50                   	push   eax
c0012e44:	ff 33                	push   DWORD PTR [ebx]
c0012e46:	e8 7b 8d ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012e4b:	5a                   	pop    edx
c0012e4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e4e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e52:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e54:	51                   	push   ecx
c0012e55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e59:	6a 00                	push   0x0
c0012e5b:	6a 2b                	push   0x2b
c0012e5d:	50                   	push   eax
c0012e5e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e61:	83 c4 20             	add    esp,0x20
c0012e64:	83 c4 18             	add    esp,0x18
c0012e67:	5b                   	pop    ebx
c0012e68:	c3                   	ret    

c0012e69 <CmFreeExtent(Reghive_Tag*, int)>:
c0012e69:	53                   	push   ebx
c0012e6a:	83 ec 3c             	sub    esp,0x3c
c0012e6d:	6a 2b                	push   0x2b
c0012e6f:	6a 00                	push   0x0
c0012e71:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012e75:	53                   	push   ebx
c0012e76:	e8 75 d6 fe ff       	call   c00004f0 <memset>
c0012e7b:	83 c4 0c             	add    esp,0xc
c0012e7e:	53                   	push   ebx
c0012e7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e87:	e8 a1 ff ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e8c:	83 c4 48             	add    esp,0x48
c0012e8f:	5b                   	pop    ebx
c0012e90:	c3                   	ret    

c0012e91 <CmUpdateHeader(Reghive_Tag*)>:
c0012e91:	83 ec 0c             	sub    esp,0xc
c0012e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e98:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e9c:	74 10                	je     c0012eae <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e9e:	52                   	push   edx
c0012e9f:	8d 50 05             	lea    edx,[eax+0x5]
c0012ea2:	52                   	push   edx
c0012ea3:	6a 00                	push   0x0
c0012ea5:	50                   	push   eax
c0012ea6:	e8 82 ff ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012eab:	83 c4 10             	add    esp,0x10
c0012eae:	83 c4 0c             	add    esp,0xc
c0012eb1:	c3                   	ret    

c0012eb2 <CmExpand(Reghive_Tag*, int)>:
c0012eb2:	57                   	push   edi
c0012eb3:	56                   	push   esi
c0012eb4:	83 ce ff             	or     esi,0xffffffff
c0012eb7:	53                   	push   ebx
c0012eb8:	83 ec 30             	sub    esp,0x30
c0012ebb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012ebf:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ec3:	74 5f                	je     c0012f24 <CmExpand(Reghive_Tag*, int)+0x72>
c0012ec5:	31 d2                	xor    edx,edx
c0012ec7:	31 f6                	xor    esi,esi
c0012ec9:	50                   	push   eax
c0012eca:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012ece:	52                   	push   edx
c0012ecf:	50                   	push   eax
c0012ed0:	ff 33                	push   DWORD PTR [ebx]
c0012ed2:	e8 ef 8c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012ed7:	83 c4 0c             	add    esp,0xc
c0012eda:	6a 2b                	push   0x2b
c0012edc:	6a 00                	push   0x0
c0012ede:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012ee2:	57                   	push   edi
c0012ee3:	e8 08 d6 fe ff       	call   c00004f0 <memset>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012eef:	7d 1b                	jge    c0012f0c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012ef1:	83 ec 0c             	sub    esp,0xc
c0012ef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ef6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012efa:	8b 10                	mov    edx,DWORD PTR [eax]
c0012efc:	46                   	inc    esi
c0012efd:	51                   	push   ecx
c0012efe:	57                   	push   edi
c0012eff:	6a 00                	push   0x0
c0012f01:	6a 2b                	push   0x2b
c0012f03:	50                   	push   eax
c0012f04:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f07:	83 c4 20             	add    esp,0x20
c0012f0a:	eb df                	jmp    c0012eeb <CmExpand(Reghive_Tag*, int)+0x39>
c0012f0c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f10:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f13:	83 ec 0c             	sub    esp,0xc
c0012f16:	01 f2                	add    edx,esi
c0012f18:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f1b:	53                   	push   ebx
c0012f1c:	e8 70 ff ff ff       	call   c0012e91 <CmUpdateHeader(Reghive_Tag*)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	83 c4 30             	add    esp,0x30
c0012f27:	89 f0                	mov    eax,esi
c0012f29:	5b                   	pop    ebx
c0012f2a:	5e                   	pop    esi
c0012f2b:	5f                   	pop    edi
c0012f2c:	c3                   	ret    

c0012f2d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f2d:	55                   	push   ebp
c0012f2e:	57                   	push   edi
c0012f2f:	56                   	push   esi
c0012f30:	53                   	push   ebx
c0012f31:	83 cb ff             	or     ebx,0xffffffff
c0012f34:	83 ec 1c             	sub    esp,0x1c
c0012f37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f3b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f3f:	74 68                	je     c0012fa9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f41:	be 2b 00 00 00       	mov    esi,0x2b
c0012f46:	51                   	push   ecx
c0012f47:	31 ff                	xor    edi,edi
c0012f49:	6a 00                	push   0x0
c0012f4b:	31 db                	xor    ebx,ebx
c0012f4d:	6a 00                	push   0x0
c0012f4f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f52:	e8 6f 8c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012f57:	83 c4 10             	add    esp,0x10
c0012f5a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012f5d:	76 3b                	jbe    c0012f9a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012f5f:	83 ec 0c             	sub    esp,0xc
c0012f62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f65:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f69:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f6b:	51                   	push   ecx
c0012f6c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012f70:	51                   	push   ecx
c0012f71:	6a 00                	push   0x0
c0012f73:	6a 01                	push   0x1
c0012f75:	50                   	push   eax
c0012f76:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012f79:	83 c4 20             	add    esp,0x20
c0012f7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012f81:	74 26                	je     c0012fa9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f83:	43                   	inc    ebx
c0012f84:	52                   	push   edx
c0012f85:	57                   	push   edi
c0012f86:	56                   	push   esi
c0012f87:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f8a:	e8 37 8c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0012f8f:	83 c6 2b             	add    esi,0x2b
c0012f92:	83 d7 00             	adc    edi,0x0
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	eb c0                	jmp    c0012f5a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012f9a:	50                   	push   eax
c0012f9b:	50                   	push   eax
c0012f9c:	6a 40                	push   0x40
c0012f9e:	55                   	push   ebp
c0012f9f:	e8 0e ff ff ff       	call   c0012eb2 <CmExpand(Reghive_Tag*, int)>
c0012fa4:	83 c4 10             	add    esp,0x10
c0012fa7:	89 c3                	mov    ebx,eax
c0012fa9:	83 c4 1c             	add    esp,0x1c
c0012fac:	89 d8                	mov    eax,ebx
c0012fae:	5b                   	pop    ebx
c0012faf:	5e                   	pop    esi
c0012fb0:	5f                   	pop    edi
c0012fb1:	5d                   	pop    ebp
c0012fb2:	c3                   	ret    

c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012fb3:	55                   	push   ebp
c0012fb4:	57                   	push   edi
c0012fb5:	56                   	push   esi
c0012fb6:	53                   	push   ebx
c0012fb7:	81 ec 88 00 00 00    	sub    esp,0x88
c0012fbd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012fc4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012fcb:	e8 5d ff ff ff       	call   c0012f2d <CmFindUnusedExtent(Reghive_Tag*)>
c0012fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fd4:	83 c4 0c             	add    esp,0xc
c0012fd7:	6a 2b                	push   0x2b
c0012fd9:	6a 00                	push   0x0
c0012fdb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012fdf:	55                   	push   ebp
c0012fe0:	e8 0b d5 fe ff       	call   c00004f0 <memset>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	85 db                	test   ebx,ebx
c0012fea:	74 12                	je     c0012ffe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012fec:	51                   	push   ecx
c0012fed:	55                   	push   ebp
c0012fee:	53                   	push   ebx
c0012fef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ff6:	e8 0e fd ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013002:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013009:	b9 2b 00 00 00       	mov    ecx,0x2b
c001300e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013010:	85 db                	test   ebx,ebx
c0013012:	74 49                	je     c001305d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013014:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013019:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001301e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013022:	c1 e0 08             	shl    eax,0x8
c0013025:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001302b:	09 c8                	or     eax,ecx
c001302d:	74 11                	je     c0013040 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001302f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013033:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013037:	c1 e8 10             	shr    eax,0x10
c001303a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001303e:	eb 0f                	jmp    c001304f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013040:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013045:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001304a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001304f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013053:	c1 ea 08             	shr    edx,0x8
c0013056:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001305b:	eb 0f                	jmp    c001306c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001305d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013062:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013067:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001306c:	52                   	push   edx
c001306d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013071:	50                   	push   eax
c0013072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013076:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001307d:	e8 ab fd ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013082:	83 c4 10             	add    esp,0x10
c0013085:	85 db                	test   ebx,ebx
c0013087:	74 12                	je     c001309b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013089:	50                   	push   eax
c001308a:	55                   	push   ebp
c001308b:	53                   	push   ebx
c001308c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013093:	e8 95 fd ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013098:	83 c4 10             	add    esp,0x10
c001309b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001309f:	83 c4 7c             	add    esp,0x7c
c00130a2:	5b                   	pop    ebx
c00130a3:	5e                   	pop    esi
c00130a4:	5f                   	pop    edi
c00130a5:	5d                   	pop    ebp
c00130a6:	c3                   	ret    

c00130a7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00130a7:	55                   	push   ebp
c00130a8:	57                   	push   edi
c00130a9:	56                   	push   esi
c00130aa:	53                   	push   ebx
c00130ab:	bb 27 00 00 00       	mov    ebx,0x27
c00130b0:	81 ec 88 00 00 00    	sub    esp,0x88
c00130b6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00130bd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00130c4:	e8 a7 d4 fe ff       	call   c0000570 <strlen>
c00130c9:	8d 48 26             	lea    ecx,[eax+0x26]
c00130cc:	89 c8                	mov    eax,ecx
c00130ce:	99                   	cdq    
c00130cf:	f7 fb                	idiv   ebx
c00130d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130d5:	83 c4 10             	add    esp,0x10
c00130d8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00130de:	7e 10                	jle    c00130f0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00130e0:	83 ec 0c             	sub    esp,0xc
c00130e3:	68 a4 24 02 c0       	push   0xc00224a4
c00130e8:	e8 ce e4 ff ff       	call   c00115bb <KePanic(char const*)>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	31 ff                	xor    edi,edi
c00130f2:	50                   	push   eax
c00130f3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00130f7:	53                   	push   ebx
c00130f8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ff:	56                   	push   esi
c0013100:	e8 04 fc ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001310c:	89 d0                	mov    eax,edx
c001310e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013112:	c1 e0 08             	shl    eax,0x8
c0013115:	09 c2                	or     edx,eax
c0013117:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001311b:	c1 e2 08             	shl    edx,0x8
c001311e:	09 c2                	or     edx,eax
c0013120:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013124:	7e 76                	jle    c001319c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0013126:	85 d2                	test   edx,edx
c0013128:	75 25                	jne    c001314f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001312a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001312f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013133:	50                   	push   eax
c0013134:	6a 00                	push   0x0
c0013136:	6a 00                	push   0x0
c0013138:	56                   	push   esi
c0013139:	e8 75 fe ff ff       	call   c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001313e:	83 c4 10             	add    esp,0x10
c0013141:	89 c2                	mov    edx,eax
c0013143:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013146:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013149:	c1 f8 10             	sar    eax,0x10
c001314c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001314f:	55                   	push   ebp
c0013150:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0013154:	55                   	push   ebp
c0013155:	52                   	push   edx
c0013156:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001315a:	56                   	push   esi
c001315b:	e8 a9 fb ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013160:	83 c4 0c             	add    esp,0xc
c0013163:	6a 27                	push   0x27
c0013165:	6a 00                	push   0x0
c0013167:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001316b:	51                   	push   ecx
c001316c:	e8 7f d3 fe ff       	call   c00004f0 <memset>
c0013171:	83 c4 0c             	add    esp,0xc
c0013174:	6b c7 27             	imul   eax,edi,0x27
c0013177:	6a 27                	push   0x27
c0013179:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013180:	50                   	push   eax
c0013181:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013185:	51                   	push   ecx
c0013186:	e8 f5 d4 fe ff       	call   c0000680 <strncpy>
c001318b:	83 c4 0c             	add    esp,0xc
c001318e:	55                   	push   ebp
c001318f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013193:	52                   	push   edx
c0013194:	56                   	push   esi
c0013195:	e8 93 fc ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001319a:	eb 19                	jmp    c00131b5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001319c:	85 d2                	test   edx,edx
c001319e:	74 18                	je     c00131b8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00131a0:	51                   	push   ecx
c00131a1:	51                   	push   ecx
c00131a2:	52                   	push   edx
c00131a3:	56                   	push   esi
c00131a4:	e8 c0 fc ff ff       	call   c0012e69 <CmFreeExtent(Reghive_Tag*, int)>
c00131a9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00131ad:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00131b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00131b5:	83 c4 10             	add    esp,0x10
c00131b8:	47                   	inc    edi
c00131b9:	83 c3 03             	add    ebx,0x3
c00131bc:	83 ff 07             	cmp    edi,0x7
c00131bf:	0f 85 43 ff ff ff    	jne    c0013108 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00131c5:	50                   	push   eax
c00131c6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00131ca:	50                   	push   eax
c00131cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131d2:	56                   	push   esi
c00131d3:	e8 55 fc ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131d8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00131de:	5b                   	pop    ebx
c00131df:	5e                   	pop    esi
c00131e0:	5f                   	pop    edi
c00131e1:	5d                   	pop    ebp
c00131e2:	c3                   	ret    

c00131e3 <CmGetMatch(char*, char*, bool, bool*)>:
c00131e3:	56                   	push   esi
c00131e4:	53                   	push   ebx
c00131e5:	50                   	push   eax
c00131e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00131ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00131ef:	74 25                	je     c0013216 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00131f1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00131f4:	31 db                	xor    ebx,ebx
c00131f6:	50                   	push   eax
c00131f7:	50                   	push   eax
c00131f8:	8d 04 9d 40 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc2c0]
c00131ff:	50                   	push   eax
c0013200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013204:	e8 47 d5 fe ff       	call   c0000750 <strcmp>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	85 c0                	test   eax,eax
c001320e:	74 2e                	je     c001323e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013210:	43                   	inc    ebx
c0013211:	83 fb 3f             	cmp    ebx,0x3f
c0013214:	75 e0                	jne    c00131f6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013216:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013219:	31 db                	xor    ebx,ebx
c001321b:	8d 04 9d 40 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc2c0]
c0013222:	51                   	push   ecx
c0013223:	51                   	push   ecx
c0013224:	50                   	push   eax
c0013225:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013229:	e8 22 d5 fe ff       	call   c0000750 <strcmp>
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	85 c0                	test   eax,eax
c0013233:	74 09                	je     c001323e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013235:	43                   	inc    ebx
c0013236:	83 fb 3f             	cmp    ebx,0x3f
c0013239:	75 e0                	jne    c001321b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001323b:	83 cb ff             	or     ebx,0xffffffff
c001323e:	89 d8                	mov    eax,ebx
c0013240:	5a                   	pop    edx
c0013241:	5b                   	pop    ebx
c0013242:	5e                   	pop    esi
c0013243:	c3                   	ret    

c0013244 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013244:	55                   	push   ebp
c0013245:	31 c0                	xor    eax,eax
c0013247:	57                   	push   edi
c0013248:	56                   	push   esi
c0013249:	53                   	push   ebx
c001324a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001324e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013252:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013254:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013258:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001325b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001325f:	83 fd 1f             	cmp    ebp,0x1f
c0013262:	7f 0b                	jg     c001326f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013264:	0f b6 c2             	movzx  eax,dl
c0013267:	d3 e0                	shl    eax,cl
c0013269:	09 07                	or     DWORD PTR [edi],eax
c001326b:	b0 01                	mov    al,0x1
c001326d:	01 33                	add    DWORD PTR [ebx],esi
c001326f:	5b                   	pop    ebx
c0013270:	5e                   	pop    esi
c0013271:	5f                   	pop    edi
c0013272:	5d                   	pop    ebp
c0013273:	c3                   	ret    

c0013274 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013274:	57                   	push   edi
c0013275:	56                   	push   esi
c0013276:	53                   	push   ebx
c0013277:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001327b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001327f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013283:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013287:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013289:	7c 17                	jl     c00132a2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001328b:	8b 17                	mov    edx,DWORD PTR [edi]
c001328d:	b8 01 00 00 00       	mov    eax,0x1
c0013292:	d3 e0                	shl    eax,cl
c0013294:	48                   	dec    eax
c0013295:	21 d0                	and    eax,edx
c0013297:	d3 ea                	shr    edx,cl
c0013299:	89 17                	mov    DWORD PTR [edi],edx
c001329b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001329d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132a0:	eb 05                	jmp    c00132a7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132a5:	31 c0                	xor    eax,eax
c00132a7:	5b                   	pop    ebx
c00132a8:	5e                   	pop    esi
c00132a9:	5f                   	pop    edi
c00132aa:	c3                   	ret    

c00132ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00132ab:	83 ec 40             	sub    esp,0x40
c00132ae:	8d 44 24 09          	lea    eax,[esp+0x9]
c00132b2:	50                   	push   eax
c00132b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132bb:	e8 49 fa ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00132c4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00132c8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00132cc:	89 10                	mov    DWORD PTR [eax],edx
c00132ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00132d1:	83 c4 4c             	add    esp,0x4c
c00132d4:	c3                   	ret    

c00132d5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00132d5:	55                   	push   ebp
c00132d6:	57                   	push   edi
c00132d7:	56                   	push   esi
c00132d8:	53                   	push   ebx
c00132d9:	83 ec 40             	sub    esp,0x40
c00132dc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00132e0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00132e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00132e8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00132ec:	53                   	push   ebx
c00132ed:	56                   	push   esi
c00132ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132f2:	e8 12 fa ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132f7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00132fb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00132ff:	83 c4 0c             	add    esp,0xc
c0013302:	53                   	push   ebx
c0013303:	56                   	push   esi
c0013304:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013308:	e8 20 fb ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001330d:	83 c4 4c             	add    esp,0x4c
c0013310:	5b                   	pop    ebx
c0013311:	5e                   	pop    esi
c0013312:	5f                   	pop    edi
c0013313:	5d                   	pop    ebp
c0013314:	c3                   	ret    

c0013315 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013315:	55                   	push   ebp
c0013316:	57                   	push   edi
c0013317:	56                   	push   esi
c0013318:	31 f6                	xor    esi,esi
c001331a:	53                   	push   ebx
c001331b:	31 db                	xor    ebx,ebx
c001331d:	83 ec 40             	sub    esp,0x40
c0013320:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013328:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013330:	6a 12                	push   0x12
c0013332:	68 ee 00 00 00       	push   0xee
c0013337:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001333b:	e8 b0 d1 fe ff       	call   c00004f0 <memset>
c0013340:	83 c4 10             	add    esp,0x10
c0013343:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013347:	6a 08                	push   0x8
c0013349:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001334d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013351:	50                   	push   eax
c0013352:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013356:	55                   	push   ebp
c0013357:	57                   	push   edi
c0013358:	e8 e7 fe ff ff       	call   c0013244 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001335d:	83 c4 10             	add    esp,0x10
c0013360:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013364:	50                   	push   eax
c0013365:	6a 06                	push   0x6
c0013367:	55                   	push   ebp
c0013368:	57                   	push   edi
c0013369:	e8 06 ff ff ff       	call   c0013274 <CmGetShift(unsigned int*, int*, int, bool*)>
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013376:	74 07                	je     c001337f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013378:	46                   	inc    esi
c0013379:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001337d:	eb e1                	jmp    c0013360 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001337f:	43                   	inc    ebx
c0013380:	83 fb 12             	cmp    ebx,0x12
c0013383:	75 c2                	jne    c0013347 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013385:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013389:	31 db                	xor    ebx,ebx
c001338b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001338e:	50                   	push   eax
c001338f:	50                   	push   eax
c0013390:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013395:	43                   	inc    ebx
c0013396:	8d 04 85 40 3d 02 c0 	lea    eax,[eax*4-0x3ffdc2c0]
c001339d:	50                   	push   eax
c001339e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133a2:	e8 99 d4 fe ff       	call   c0000840 <strcat>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	83 fb 18             	cmp    ebx,0x18
c00133ad:	75 df                	jne    c001338e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00133af:	83 c4 3c             	add    esp,0x3c
c00133b2:	31 c0                	xor    eax,eax
c00133b4:	5b                   	pop    ebx
c00133b5:	5e                   	pop    esi
c00133b6:	5f                   	pop    edi
c00133b7:	5d                   	pop    ebp
c00133b8:	c3                   	ret    

c00133b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00133b9:	83 ec 40             	sub    esp,0x40
c00133bc:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133c0:	50                   	push   eax
c00133c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133c9:	e8 3b f9 ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133ce:	58                   	pop    eax
c00133cf:	5a                   	pop    edx
c00133d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00133d4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00133d8:	50                   	push   eax
c00133d9:	e8 37 ff ff ff       	call   c0013315 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00133de:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00133e3:	83 c4 4c             	add    esp,0x4c
c00133e6:	c3                   	ret    

c00133e7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00133e7:	55                   	push   ebp
c00133e8:	57                   	push   edi
c00133e9:	56                   	push   esi
c00133ea:	53                   	push   ebx
c00133eb:	31 db                	xor    ebx,ebx
c00133ed:	83 ec 70             	sub    esp,0x70
c00133f0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00133f7:	6a 30                	push   0x30
c00133f9:	6a 00                	push   0x0
c00133fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00133ff:	56                   	push   esi
c0013400:	e8 eb d0 fe ff       	call   c00004f0 <memset>
c0013405:	83 c4 10             	add    esp,0x10
c0013408:	83 ec 0c             	sub    esp,0xc
c001340b:	57                   	push   edi
c001340c:	e8 5f d1 fe ff       	call   c0000570 <strlen>
c0013411:	83 c4 10             	add    esp,0x10
c0013414:	39 d8                	cmp    eax,ebx
c0013416:	76 16                	jbe    c001342e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001341f:	50                   	push   eax
c0013420:	e8 0b d5 fe ff       	call   c0000930 <toupper>
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001342b:	43                   	inc    ebx
c001342c:	eb da                	jmp    c0013408 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001342e:	31 f6                	xor    esi,esi
c0013430:	52                   	push   edx
c0013431:	31 ff                	xor    edi,edi
c0013433:	6a 18                	push   0x18
c0013435:	6a 3f                	push   0x3f
c0013437:	8d 44 24 24          	lea    eax,[esp+0x24]
c001343b:	50                   	push   eax
c001343c:	e8 af d0 fe ff       	call   c00004f0 <memset>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013448:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001344c:	84 c0                	test   al,al
c001344e:	0f 84 b0 00 00 00    	je     c0013504 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013454:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013458:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001345d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013461:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013466:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013469:	83 ec 0c             	sub    esp,0xc
c001346c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013470:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013474:	53                   	push   ebx
c0013475:	e8 f6 d0 fe ff       	call   c0000570 <strlen>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	85 c0                	test   eax,eax
c001347f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013483:	74 0b                	je     c0013490 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013485:	50                   	push   eax
c0013486:	6a 01                	push   0x1
c0013488:	53                   	push   ebx
c0013489:	8d 44 24 20          	lea    eax,[esp+0x20]
c001348d:	50                   	push   eax
c001348e:	eb 0a                	jmp    c001349a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013490:	50                   	push   eax
c0013491:	6a 00                	push   0x0
c0013493:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013497:	50                   	push   eax
c0013498:	6a 00                	push   0x0
c001349a:	e8 44 fd ff ff       	call   c00131e3 <CmGetMatch(char*, char*, bool, bool*)>
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	83 f8 ff             	cmp    eax,0xffffffff
c00134a5:	75 1a                	jne    c00134c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134a7:	83 ec 0c             	sub    esp,0xc
c00134aa:	68 b9 24 02 c0       	push   0xc00224b9
c00134af:	e8 07 e1 ff ff       	call   c00115bb <KePanic(char const*)>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	b8 02 00 00 00       	mov    eax,0x2
c00134bc:	e9 bc 00 00 00       	jmp    c001357d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00134c1:	83 ff 18             	cmp    edi,0x18
c00134c4:	75 1a                	jne    c00134e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00134c6:	83 ec 0c             	sub    esp,0xc
c00134c9:	68 ce 24 02 c0       	push   0xc00224ce
c00134ce:	e8 e8 e0 ff ff       	call   c00115bb <KePanic(char const*)>
c00134d3:	83 c4 10             	add    esp,0x10
c00134d6:	b8 01 00 00 00       	mov    eax,0x1
c00134db:	e9 9d 00 00 00       	jmp    c001357d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00134e0:	47                   	inc    edi
c00134e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134e6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00134ea:	74 02                	je     c00134ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00134ec:	89 ee                	mov    esi,ebp
c00134ee:	83 ec 0c             	sub    esp,0xc
c00134f1:	53                   	push   ebx
c00134f2:	e8 79 d0 fe ff       	call   c0000570 <strlen>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	85 c0                	test   eax,eax
c00134fc:	74 06                	je     c0013504 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00134fe:	46                   	inc    esi
c00134ff:	e9 40 ff ff ff       	jmp    c0013444 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001350c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013514:	31 f6                	xor    esi,esi
c0013516:	50                   	push   eax
c0013517:	31 ff                	xor    edi,edi
c0013519:	6a 12                	push   0x12
c001351b:	68 ee 00 00 00       	push   0xee
c0013520:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013527:	e8 c4 cf fe ff       	call   c00004f0 <memset>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	83 fe 17             	cmp    esi,0x17
c0013532:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013536:	7e 26                	jle    c001355e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013538:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001353c:	50                   	push   eax
c001353d:	6a 08                	push   0x8
c001353f:	55                   	push   ebp
c0013540:	53                   	push   ebx
c0013541:	e8 2e fd ff ff       	call   c0013274 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013546:	83 c4 10             	add    esp,0x10
c0013549:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001354e:	74 26                	je     c0013576 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013550:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013557:	4e                   	dec    esi
c0013558:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001355b:	47                   	inc    edi
c001355c:	eb 1c                	jmp    c001357a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001355e:	6a 06                	push   0x6
c0013560:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013565:	50                   	push   eax
c0013566:	55                   	push   ebp
c0013567:	53                   	push   ebx
c0013568:	e8 d7 fc ff ff       	call   c0013244 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001356d:	83 c4 10             	add    esp,0x10
c0013570:	84 c0                	test   al,al
c0013572:	75 06                	jne    c001357a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013574:	eb c2                	jmp    c0013538 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013576:	31 c0                	xor    eax,eax
c0013578:	eb 03                	jmp    c001357d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001357a:	46                   	inc    esi
c001357b:	eb b2                	jmp    c001352f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001357d:	83 c4 6c             	add    esp,0x6c
c0013580:	5b                   	pop    ebx
c0013581:	5e                   	pop    esi
c0013582:	5f                   	pop    edi
c0013583:	5d                   	pop    ebp
c0013584:	c3                   	ret    

c0013585 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013585:	53                   	push   ebx
c0013586:	83 ec 3c             	sub    esp,0x3c
c0013589:	6a 2b                	push   0x2b
c001358b:	6a 00                	push   0x0
c001358d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013591:	53                   	push   ebx
c0013592:	e8 59 cf fe ff       	call   c00004f0 <memset>
c0013597:	58                   	pop    eax
c0013598:	5a                   	pop    edx
c0013599:	8d 44 24 11          	lea    eax,[esp+0x11]
c001359d:	50                   	push   eax
c001359e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135a2:	e8 40 fe ff ff       	call   c00133e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135a7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00135ac:	83 c4 0c             	add    esp,0xc
c00135af:	6a 15                	push   0x15
c00135b1:	6a 00                	push   0x0
c00135b3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00135b7:	50                   	push   eax
c00135b8:	e8 33 cf fe ff       	call   c00004f0 <memset>
c00135bd:	53                   	push   ebx
c00135be:	6a 00                	push   0x0
c00135c0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135c8:	e8 e6 f9 ff ff       	call   c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00135cd:	83 c4 58             	add    esp,0x58
c00135d0:	5b                   	pop    ebx
c00135d1:	c3                   	ret    

c00135d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00135d2:	56                   	push   esi
c00135d3:	53                   	push   ebx
c00135d4:	83 ec 48             	sub    esp,0x48
c00135d7:	6a 12                	push   0x12
c00135d9:	68 ff 00 00 00       	push   0xff
c00135de:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00135e2:	56                   	push   esi
c00135e3:	e8 08 cf fe ff       	call   c00004f0 <memset>
c00135e8:	5a                   	pop    edx
c00135e9:	59                   	pop    ecx
c00135ea:	56                   	push   esi
c00135eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00135ef:	e8 f3 fd ff ff       	call   c00133e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00135fb:	85 db                	test   ebx,ebx
c00135fd:	74 42                	je     c0013641 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00135ff:	50                   	push   eax
c0013600:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013604:	50                   	push   eax
c0013605:	53                   	push   ebx
c0013606:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001360a:	e8 fa f6 ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001360f:	83 c4 0c             	add    esp,0xc
c0013612:	6a 12                	push   0x12
c0013614:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013618:	50                   	push   eax
c0013619:	56                   	push   esi
c001361a:	e8 61 cd fe ff       	call   c0000380 <memcmp>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	85 c0                	test   eax,eax
c0013624:	74 1e                	je     c0013644 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013626:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001362b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013630:	c1 e3 08             	shl    ebx,0x8
c0013633:	09 d8                	or     eax,ebx
c0013635:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001363a:	c1 e3 10             	shl    ebx,0x10
c001363d:	09 c3                	or     ebx,eax
c001363f:	eb ba                	jmp    c00135fb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013641:	83 cb ff             	or     ebx,0xffffffff
c0013644:	89 d8                	mov    eax,ebx
c0013646:	83 c4 44             	add    esp,0x44
c0013649:	5b                   	pop    ebx
c001364a:	5e                   	pop    esi
c001364b:	c3                   	ret    

c001364c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001364c:	57                   	push   edi
c001364d:	56                   	push   esi
c001364e:	53                   	push   ebx
c001364f:	83 ec 34             	sub    esp,0x34
c0013652:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013656:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001365a:	6a 2b                	push   0x2b
c001365c:	6a 00                	push   0x0
c001365e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013662:	53                   	push   ebx
c0013663:	e8 88 ce fe ff       	call   c00004f0 <memset>
c0013668:	58                   	pop    eax
c0013669:	5a                   	pop    edx
c001366a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001366e:	50                   	push   eax
c001366f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013673:	e8 6f fd ff ff       	call   c00133e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013678:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001367c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013680:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013684:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013688:	53                   	push   ebx
c0013689:	6a 00                	push   0x0
c001368b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001368f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013693:	e8 1b f9 ff ff       	call   c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013698:	83 c4 50             	add    esp,0x50
c001369b:	5b                   	pop    ebx
c001369c:	5e                   	pop    esi
c001369d:	5f                   	pop    edi
c001369e:	c3                   	ret    

c001369f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001369f:	55                   	push   ebp
c00136a0:	57                   	push   edi
c00136a1:	56                   	push   esi
c00136a2:	53                   	push   ebx
c00136a3:	83 ec 40             	sub    esp,0x40
c00136a6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00136aa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136ae:	6a 2b                	push   0x2b
c00136b0:	6a 00                	push   0x0
c00136b2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00136b6:	56                   	push   esi
c00136b7:	e8 34 ce fe ff       	call   c00004f0 <memset>
c00136bc:	5f                   	pop    edi
c00136bd:	89 ef                	mov    edi,ebp
c00136bf:	58                   	pop    eax
c00136c0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136c4:	50                   	push   eax
c00136c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136c9:	e8 19 fd ff ff       	call   c00133e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136ce:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00136d3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00136d8:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00136dd:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00136e2:	83 c4 10             	add    esp,0x10
c00136e5:	85 ed                	test   ebp,ebp
c00136e7:	74 14                	je     c00136fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136e9:	51                   	push   ecx
c00136ea:	51                   	push   ecx
c00136eb:	57                   	push   edi
c00136ec:	53                   	push   ebx
c00136ed:	e8 09 f7 ff ff       	call   c0012dfb <CmGetNext(Reghive_Tag*, int)>
c00136f2:	83 c4 10             	add    esp,0x10
c00136f5:	85 c0                	test   eax,eax
c00136f7:	74 04                	je     c00136fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00136f9:	89 c7                	mov    edi,eax
c00136fb:	eb e8                	jmp    c00136e5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00136fd:	56                   	push   esi
c00136fe:	6a 00                	push   0x0
c0013700:	57                   	push   edi
c0013701:	53                   	push   ebx
c0013702:	e8 ac f8 ff ff       	call   c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	89 c7                	mov    edi,eax
c001370c:	56                   	push   esi
c001370d:	50                   	push   eax
c001370e:	53                   	push   ebx
c001370f:	e8 f5 f5 ff ff       	call   c0012d09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013714:	58                   	pop    eax
c0013715:	5a                   	pop    edx
c0013716:	6a 6c                	push   0x6c
c0013718:	6a 00                	push   0x0
c001371a:	6a 00                	push   0x0
c001371c:	68 df 24 02 c0       	push   0xc00224df
c0013721:	57                   	push   edi
c0013722:	53                   	push   ebx
c0013723:	e8 24 ff ff ff       	call   c001364c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013728:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001372c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013730:	c1 e8 10             	shr    eax,0x10
c0013733:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013737:	83 c4 1c             	add    esp,0x1c
c001373a:	56                   	push   esi
c001373b:	57                   	push   edi
c001373c:	53                   	push   ebx
c001373d:	e8 eb f6 ff ff       	call   c0012e2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013742:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013747:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001374c:	c1 e0 08             	shl    eax,0x8
c001374f:	09 c2                	or     edx,eax
c0013751:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013756:	83 c4 4c             	add    esp,0x4c
c0013759:	c1 e0 10             	shl    eax,0x10
c001375c:	5b                   	pop    ebx
c001375d:	09 d0                	or     eax,edx
c001375f:	5e                   	pop    esi
c0013760:	5f                   	pop    edi
c0013761:	5d                   	pop    ebp
c0013762:	c3                   	ret    

c0013763 <zStrtok(char*, char const*)>:
c0013763:	55                   	push   ebp
c0013764:	57                   	push   edi
c0013765:	56                   	push   esi
c0013766:	53                   	push   ebx
c0013767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001376b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001376f:	85 db                	test   ebx,ebx
c0013771:	74 2f                	je     c00137a2 <zStrtok(char*, char const*)+0x3f>
c0013773:	85 c0                	test   eax,eax
c0013775:	75 09                	jne    c0013780 <zStrtok(char*, char const*)+0x1d>
c0013777:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001377c:	85 c0                	test   eax,eax
c001377e:	74 50                	je     c00137d0 <zStrtok(char*, char const*)+0x6d>
c0013780:	31 c9                	xor    ecx,ecx
c0013782:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013786:	74 03                	je     c001378b <zStrtok(char*, char const*)+0x28>
c0013788:	41                   	inc    ecx
c0013789:	eb f7                	jmp    c0013782 <zStrtok(char*, char const*)+0x1f>
c001378b:	31 d2                	xor    edx,edx
c001378d:	39 ca                	cmp    edx,ecx
c001378f:	74 15                	je     c00137a6 <zStrtok(char*, char const*)+0x43>
c0013791:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013795:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013798:	8d 3c 10             	lea    edi,[eax+edx*1]
c001379b:	39 ee                	cmp    esi,ebp
c001379d:	74 13                	je     c00137b2 <zStrtok(char*, char const*)+0x4f>
c001379f:	42                   	inc    edx
c00137a0:	eb eb                	jmp    c001378d <zStrtok(char*, char const*)+0x2a>
c00137a2:	31 c0                	xor    eax,eax
c00137a4:	eb 2a                	jmp    c00137d0 <zStrtok(char*, char const*)+0x6d>
c00137a6:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00137b0:	eb 1e                	jmp    c00137d0 <zStrtok(char*, char const*)+0x6d>
c00137b2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00137b5:	39 ce                	cmp    esi,ecx
c00137b7:	75 0a                	jne    c00137c3 <zStrtok(char*, char const*)+0x60>
c00137b9:	40                   	inc    eax
c00137ba:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00137bf:	89 d8                	mov    eax,ebx
c00137c1:	eb 0d                	jmp    c00137d0 <zStrtok(char*, char const*)+0x6d>
c00137c3:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00137c7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00137ca:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00137d0:	5b                   	pop    ebx
c00137d1:	5e                   	pop    esi
c00137d2:	5f                   	pop    edi
c00137d3:	5d                   	pop    ebp
c00137d4:	c3                   	ret    

c00137d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00137d5:	57                   	push   edi
c00137d6:	56                   	push   esi
c00137d7:	53                   	push   ebx
c00137d8:	81 ec 08 01 00 00    	sub    esp,0x108
c00137de:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00137e5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00137ec:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00137f0:	53                   	push   ebx
c00137f1:	e8 4a ce fe ff       	call   c0000640 <strcpy>
c00137f6:	59                   	pop    ecx
c00137f7:	5e                   	pop    esi
c00137f8:	68 43 28 02 c0       	push   0xc0022843
c00137fd:	53                   	push   ebx
c00137fe:	bb 01 00 00 00       	mov    ebx,0x1
c0013803:	e8 5b ff ff ff       	call   c0013763 <zStrtok(char*, char const*)>
c0013808:	83 c4 10             	add    esp,0x10
c001380b:	85 c0                	test   eax,eax
c001380d:	74 3b                	je     c001384a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001380f:	52                   	push   edx
c0013810:	50                   	push   eax
c0013811:	6a 01                	push   0x1
c0013813:	57                   	push   edi
c0013814:	e8 b9 fd ff ff       	call   c00135d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013819:	59                   	pop    ecx
c001381a:	89 c3                	mov    ebx,eax
c001381c:	5e                   	pop    esi
c001381d:	68 43 28 02 c0       	push   0xc0022843
c0013822:	6a 00                	push   0x0
c0013824:	e8 3a ff ff ff       	call   c0013763 <zStrtok(char*, char const*)>
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	89 c6                	mov    esi,eax
c001382e:	85 c0                	test   eax,eax
c0013830:	74 18                	je     c001384a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013832:	52                   	push   edx
c0013833:	52                   	push   edx
c0013834:	53                   	push   ebx
c0013835:	57                   	push   edi
c0013836:	e8 81 f5 ff ff       	call   c0012dbc <CmEnterDirectory(Reghive_Tag*, int)>
c001383b:	83 c4 10             	add    esp,0x10
c001383e:	89 c3                	mov    ebx,eax
c0013840:	83 f8 ff             	cmp    eax,0xffffffff
c0013843:	74 05                	je     c001384a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013845:	50                   	push   eax
c0013846:	56                   	push   esi
c0013847:	53                   	push   ebx
c0013848:	eb c9                	jmp    c0013813 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001384a:	81 c4 00 01 00 00    	add    esp,0x100
c0013850:	89 d8                	mov    eax,ebx
c0013852:	5b                   	pop    ebx
c0013853:	5e                   	pop    esi
c0013854:	5f                   	pop    edi
c0013855:	c3                   	ret    

c0013856 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013856:	55                   	push   ebp
c0013857:	57                   	push   edi
c0013858:	56                   	push   esi
c0013859:	53                   	push   ebx
c001385a:	83 ec 5c             	sub    esp,0x5c
c001385d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013861:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013865:	85 db                	test   ebx,ebx
c0013867:	0f 8e 84 00 00 00    	jle    c00138f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001386d:	31 ed                	xor    ebp,ebp
c001386f:	57                   	push   edi
c0013870:	6a 32                	push   0x32
c0013872:	6a 00                	push   0x0
c0013874:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013878:	57                   	push   edi
c0013879:	e8 72 cc fe ff       	call   c00004f0 <memset>
c001387e:	83 c4 0c             	add    esp,0xc
c0013881:	57                   	push   edi
c0013882:	53                   	push   ebx
c0013883:	56                   	push   esi
c0013884:	e8 30 fb ff ff       	call   c00133b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013889:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013894:	7d 13                	jge    c00138a9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	45                   	inc    ebp
c001389a:	68 e7 2b 02 c0       	push   0xc0022be7
c001389f:	e8 a1 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	eb e7                	jmp    c0013890 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00138a9:	51                   	push   ecx
c00138aa:	57                   	push   edi
c00138ab:	53                   	push   ebx
c00138ac:	68 e5 24 02 c0       	push   0xc00224e5
c00138b1:	e8 8f 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00138be:	75 1e                	jne    c00138de <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00138c0:	52                   	push   edx
c00138c1:	52                   	push   edx
c00138c2:	53                   	push   ebx
c00138c3:	56                   	push   esi
c00138c4:	e8 f3 f4 ff ff       	call   c0012dbc <CmEnterDirectory(Reghive_Tag*, int)>
c00138c9:	83 c4 0c             	add    esp,0xc
c00138cc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00138d0:	8d 51 04             	lea    edx,[ecx+0x4]
c00138d3:	52                   	push   edx
c00138d4:	50                   	push   eax
c00138d5:	56                   	push   esi
c00138d6:	e8 7b ff ff ff       	call   c0013856 <CmDisplayTree(Reghive_Tag*, int, int)>
c00138db:	83 c4 10             	add    esp,0x10
c00138de:	50                   	push   eax
c00138df:	50                   	push   eax
c00138e0:	53                   	push   ebx
c00138e1:	56                   	push   esi
c00138e2:	e8 14 f5 ff ff       	call   c0012dfb <CmGetNext(Reghive_Tag*, int)>
c00138e7:	83 c4 10             	add    esp,0x10
c00138ea:	89 c3                	mov    ebx,eax
c00138ec:	e9 74 ff ff ff       	jmp    c0013865 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00138f1:	83 c4 5c             	add    esp,0x5c
c00138f4:	5b                   	pop    ebx
c00138f5:	5e                   	pop    esi
c00138f6:	5f                   	pop    edi
c00138f7:	5d                   	pop    ebp
c00138f8:	c3                   	ret    

c00138f9 <CmSplitFinalSlashInPlace(char*)>:
c00138f9:	53                   	push   ebx
c00138fa:	83 ec 14             	sub    esp,0x14
c00138fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013901:	53                   	push   ebx
c0013902:	e8 69 cc fe ff       	call   c0000570 <strlen>
c0013907:	83 c4 10             	add    esp,0x10
c001390a:	48                   	dec    eax
c001390b:	85 c0                	test   eax,eax
c001390d:	74 15                	je     c0013924 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001390f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013912:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013916:	75 09                	jne    c0013921 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013918:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001391b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001391f:	eb 05                	jmp    c0013926 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013921:	48                   	dec    eax
c0013922:	eb e7                	jmp    c001390b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013924:	31 c0                	xor    eax,eax
c0013926:	83 c4 08             	add    esp,0x8
c0013929:	5b                   	pop    ebx
c001392a:	c3                   	ret    

c001392b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001392b:	55                   	push   ebp
c001392c:	57                   	push   edi
c001392d:	56                   	push   esi
c001392e:	53                   	push   ebx
c001392f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013935:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001393c:	8a 13                	mov    dl,BYTE PTR [ebx]
c001393e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013941:	80 fa 40             	cmp    dl,0x40
c0013944:	75 1c                	jne    c0013962 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013946:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013949:	85 c9                	test   ecx,ecx
c001394b:	0f 84 09 01 00 00    	je     c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013951:	8d 43 01             	lea    eax,[ebx+0x1]
c0013954:	83 f9 3a             	cmp    ecx,0x3a
c0013957:	74 04                	je     c001395d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013959:	89 c3                	mov    ebx,eax
c001395b:	eb e9                	jmp    c0013946 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001395d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013960:	89 c3                	mov    ebx,eax
c0013962:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013966:	50                   	push   eax
c0013967:	6a 40                	push   0x40
c0013969:	6a 00                	push   0x0
c001396b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001396f:	50                   	push   eax
c0013970:	e8 7b cb fe ff       	call   c00004f0 <memset>
c0013975:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001397c:	31 c0                	xor    eax,eax
c001397e:	83 c4 10             	add    esp,0x10
c0013981:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013986:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013989:	89 d1                	mov    ecx,edx
c001398b:	85 d2                	test   edx,edx
c001398d:	0f 84 c7 00 00 00    	je     c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013993:	3d c7 00 00 00       	cmp    eax,0xc7
c0013998:	0f 8f bc 00 00 00    	jg     c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001399e:	83 fa 0a             	cmp    edx,0xa
c00139a1:	0f 85 a4 00 00 00    	jne    c0013a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00139a7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00139ac:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00139b1:	89 c8                	mov    eax,ecx
c00139b3:	a8 df                	test   al,0xdf
c00139b5:	0f 94 c2             	sete   dl
c00139b8:	83 f9 23             	cmp    ecx,0x23
c00139bb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139c0:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00139c4:	80 e2 01             	and    dl,0x1
c00139c7:	75 4a                	jne    c0013a13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00139c9:	83 e8 09             	sub    eax,0x9
c00139cc:	3c 01                	cmp    al,0x1
c00139ce:	76 43                	jbe    c0013a13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00139d0:	83 f9 5b             	cmp    ecx,0x5b
c00139d3:	75 42                	jne    c0013a17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00139d5:	83 fe 40             	cmp    esi,0x40
c00139d8:	75 39                	jne    c0013a13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00139da:	83 ec 0c             	sub    esp,0xc
c00139dd:	8d 54 24 65          	lea    edx,[esp+0x65]
c00139e1:	52                   	push   edx
c00139e2:	e8 89 cb fe ff       	call   c0000570 <strlen>
c00139e7:	83 c4 10             	add    esp,0x10
c00139ea:	83 f8 3f             	cmp    eax,0x3f
c00139ed:	77 6b                	ja     c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139ef:	50                   	push   eax
c00139f0:	50                   	push   eax
c00139f1:	8d 54 24 61          	lea    edx,[esp+0x61]
c00139f5:	52                   	push   edx
c00139f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00139fa:	52                   	push   edx
c00139fb:	e8 40 cc fe ff       	call   c0000640 <strcpy>
c0013a00:	58                   	pop    eax
c0013a01:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a05:	52                   	push   edx
c0013a06:	e8 65 cb fe ff       	call   c0000570 <strlen>
c0013a0b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a10:	83 c4 10             	add    esp,0x10
c0013a13:	31 d2                	xor    edx,edx
c0013a15:	eb 3b                	jmp    c0013a52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a17:	83 fe 40             	cmp    esi,0x40
c0013a1a:	74 06                	je     c0013a22 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a1c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a20:	eb 20                	jmp    c0013a42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a22:	50                   	push   eax
c0013a23:	50                   	push   eax
c0013a24:	55                   	push   ebp
c0013a25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a29:	50                   	push   eax
c0013a2a:	e8 21 cd fe ff       	call   c0000750 <strcmp>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	85 c0                	test   eax,eax
c0013a34:	75 dd                	jne    c0013a13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a36:	eb e4                	jmp    c0013a1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a38:	8d 50 01             	lea    edx,[eax+0x1]
c0013a3b:	83 f9 3d             	cmp    ecx,0x3d
c0013a3e:	74 1e                	je     c0013a5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013a40:	89 d0                	mov    eax,edx
c0013a42:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013a45:	85 c9                	test   ecx,ecx
c0013a47:	75 ef                	jne    c0013a38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013a49:	eb 0f                	jmp    c0013a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a4b:	8d 50 01             	lea    edx,[eax+0x1]
c0013a4e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a52:	47                   	inc    edi
c0013a53:	89 d0                	mov    eax,edx
c0013a55:	e9 2c ff ff ff       	jmp    c0013986 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013a5a:	31 c0                	xor    eax,eax
c0013a5c:	eb 33                	jmp    c0013a91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013a5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013a62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013a65:	50                   	push   eax
c0013a66:	50                   	push   eax
c0013a67:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013a6b:	50                   	push   eax
c0013a6c:	53                   	push   ebx
c0013a6d:	e8 de cc fe ff       	call   c0000750 <strcmp>
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	85 c0                	test   eax,eax
c0013a77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a7b:	75 96                	jne    c0013a13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a7d:	51                   	push   ecx
c0013a7e:	51                   	push   ecx
c0013a7f:	52                   	push   edx
c0013a80:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013a87:	e8 b4 cb fe ff       	call   c0000640 <strcpy>
c0013a8c:	83 c4 10             	add    esp,0x10
c0013a8f:	b0 01                	mov    al,0x1
c0013a91:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a97:	5b                   	pop    ebx
c0013a98:	5e                   	pop    esi
c0013a99:	5f                   	pop    edi
c0013a9a:	5d                   	pop    ebp
c0013a9b:	c3                   	ret    

c0013a9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a9c:	57                   	push   edi
c0013a9d:	56                   	push   esi
c0013a9e:	53                   	push   ebx
c0013a9f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013aa5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013aac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013ab3:	53                   	push   ebx
c0013ab4:	e8 b7 ca fe ff       	call   c0000570 <strlen>
c0013ab9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013abc:	89 c7                	mov    edi,eax
c0013abe:	e8 ad ca fe ff       	call   c0000570 <strlen>
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013aca:	3d ff 00 00 00       	cmp    eax,0xff
c0013acf:	0f 87 d3 00 00 00    	ja     c0013ba8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ad5:	57                   	push   edi
c0013ad6:	57                   	push   edi
c0013ad7:	56                   	push   esi
c0013ad8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013adc:	56                   	push   esi
c0013add:	e8 5e cb fe ff       	call   c0000640 <strcpy>
c0013ae2:	58                   	pop    eax
c0013ae3:	5a                   	pop    edx
c0013ae4:	68 43 28 02 c0       	push   0xc0022843
c0013ae9:	56                   	push   esi
c0013aea:	e8 51 cd fe ff       	call   c0000840 <strcat>
c0013aef:	59                   	pop    ecx
c0013af0:	5f                   	pop    edi
c0013af1:	53                   	push   ebx
c0013af2:	56                   	push   esi
c0013af3:	e8 48 cd fe ff       	call   c0000840 <strcat>
c0013af8:	58                   	pop    eax
c0013af9:	5a                   	pop    edx
c0013afa:	68 ef 24 02 c0       	push   0xc00224ef
c0013aff:	56                   	push   esi
c0013b00:	e8 3b cd fe ff       	call   c0000840 <strcat>
c0013b05:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b0c:	e8 a5 3f ff ff       	call   c0007ab6 <malloc>
c0013b11:	83 c4 0c             	add    esp,0xc
c0013b14:	89 c3                	mov    ebx,eax
c0013b16:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b1c:	56                   	push   esi
c0013b1d:	50                   	push   eax
c0013b1e:	e8 c7 7f ff ff       	call   c000baea <File::File(char const*, Process*)>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	85 db                	test   ebx,ebx
c0013b28:	74 7e                	je     c0013ba8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b2a:	51                   	push   ecx
c0013b2b:	51                   	push   ecx
c0013b2c:	6a 01                	push   0x1
c0013b2e:	53                   	push   ebx
c0013b2f:	e8 d4 7f ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	85 c0                	test   eax,eax
c0013b39:	74 08                	je     c0013b43 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b3b:	83 ec 0c             	sub    esp,0xc
c0013b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b40:	53                   	push   ebx
c0013b41:	eb 5f                	jmp    c0013ba2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b43:	52                   	push   edx
c0013b44:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b48:	50                   	push   eax
c0013b49:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b4d:	50                   	push   eax
c0013b4e:	53                   	push   ebx
c0013b4f:	e8 b6 82 ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0013b54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013b58:	83 c4 10             	add    esp,0x10
c0013b5b:	89 c1                	mov    ecx,eax
c0013b5d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013b61:	74 31                	je     c0013b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b63:	83 ec 0c             	sub    esp,0xc
c0013b66:	50                   	push   eax
c0013b67:	e8 4a 3f ff ff       	call   c0007ab6 <malloc>
c0013b6c:	89 c6                	mov    esi,eax
c0013b6e:	58                   	pop    eax
c0013b6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013b75:	52                   	push   edx
c0013b76:	56                   	push   esi
c0013b77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013b7f:	53                   	push   ebx
c0013b80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b83:	83 c4 20             	add    esp,0x20
c0013b86:	85 c0                	test   eax,eax
c0013b88:	75 0a                	jne    c0013b94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b8e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b92:	74 18                	je     c0013bac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	53                   	push   ebx
c0013b98:	e8 c9 7f ff ff       	call   c000bb66 <File::close()>
c0013b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ba2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ba5:	83 c4 10             	add    esp,0x10
c0013ba8:	31 c0                	xor    eax,eax
c0013baa:	eb 3b                	jmp    c0013be7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	53                   	push   ebx
c0013bb0:	e8 b1 7f ff ff       	call   c000bb66 <File::close()>
c0013bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bbd:	83 c4 0c             	add    esp,0xc
c0013bc0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bc7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013bce:	56                   	push   esi
c0013bcf:	e8 57 fd ff ff       	call   c001392b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013bd4:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bd7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013bdb:	e8 e6 3e ff ff       	call   c0007ac6 <free>
c0013be0:	83 c4 10             	add    esp,0x10
c0013be3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013be7:	81 c4 20 01 00 00    	add    esp,0x120
c0013bed:	5b                   	pop    ebx
c0013bee:	5e                   	pop    esi
c0013bef:	5f                   	pop    edi
c0013bf0:	c3                   	ret    

c0013bf1 <Reg::getLine(char*, char*, char*)>:
c0013bf1:	57                   	push   edi
c0013bf2:	56                   	push   esi
c0013bf3:	53                   	push   ebx
c0013bf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bf8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013bfc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c00:	57                   	push   edi
c0013c01:	56                   	push   esi
c0013c02:	53                   	push   ebx
c0013c03:	68 f4 24 02 c0       	push   0xc00224f4
c0013c08:	e8 8f fe ff ff       	call   c0013a9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	84 c0                	test   al,al
c0013c12:	75 10                	jne    c0013c24 <Reg::getLine(char*, char*, char*)+0x33>
c0013c14:	57                   	push   edi
c0013c15:	56                   	push   esi
c0013c16:	53                   	push   ebx
c0013c17:	68 19 25 02 c0       	push   0xc0022519
c0013c1c:	e8 7b fe ff ff       	call   c0013a9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c21:	83 c4 10             	add    esp,0x10
c0013c24:	5b                   	pop    ebx
c0013c25:	5e                   	pop    esi
c0013c26:	5f                   	pop    edi
c0013c27:	c3                   	ret    

c0013c28 <Reg::readInt(char*, char*, int*)>:
c0013c28:	55                   	push   ebp
c0013c29:	57                   	push   edi
c0013c2a:	56                   	push   esi
c0013c2b:	53                   	push   ebx
c0013c2c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c32:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c36:	55                   	push   ebp
c0013c37:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c3e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c45:	e8 a7 ff ff ff       	call   c0013bf1 <Reg::getLine(char*, char*, char*)>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	84 c0                	test   al,al
c0013c4f:	0f 84 b6 00 00 00    	je     c0013d0b <Reg::readInt(char*, char*, int*)+0xe3>
c0013c55:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013c5a:	83 fa 2b             	cmp    edx,0x2b
c0013c5d:	74 0c                	je     c0013c6b <Reg::readInt(char*, char*, int*)+0x43>
c0013c5f:	83 fa 2d             	cmp    edx,0x2d
c0013c62:	75 0e                	jne    c0013c72 <Reg::readInt(char*, char*, int*)+0x4a>
c0013c64:	ba 01 00 00 00       	mov    edx,0x1
c0013c69:	eb 0b                	jmp    c0013c76 <Reg::readInt(char*, char*, int*)+0x4e>
c0013c6b:	ba 01 00 00 00       	mov    edx,0x1
c0013c70:	eb 02                	jmp    c0013c74 <Reg::readInt(char*, char*, int*)+0x4c>
c0013c72:	31 d2                	xor    edx,edx
c0013c74:	31 c0                	xor    eax,eax
c0013c76:	be 0a 00 00 00       	mov    esi,0xa
c0013c7b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013c80:	75 21                	jne    c0013ca3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c82:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c87:	83 f9 78             	cmp    ecx,0x78
c0013c8a:	75 0a                	jne    c0013c96 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c8c:	83 c2 02             	add    edx,0x2
c0013c8f:	be 10 00 00 00       	mov    esi,0x10
c0013c94:	eb 0d                	jmp    c0013ca3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c96:	83 f9 62             	cmp    ecx,0x62
c0013c99:	75 08                	jne    c0013ca3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013c9b:	83 c2 02             	add    edx,0x2
c0013c9e:	be 02 00 00 00       	mov    esi,0x2
c0013ca3:	01 d5                	add    ebp,edx
c0013ca5:	31 d2                	xor    edx,edx
c0013ca7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013cab:	83 f9 0d             	cmp    ecx,0xd
c0013cae:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013cb2:	0f 94 c3             	sete   bl
c0013cb5:	85 c9                	test   ecx,ecx
c0013cb7:	89 df                	mov    edi,ebx
c0013cb9:	0f 94 c3             	sete   bl
c0013cbc:	09 df                	or     edi,ebx
c0013cbe:	89 fb                	mov    ebx,edi
c0013cc0:	83 e7 01             	and    edi,0x1
c0013cc3:	75 35                	jne    c0013cfa <Reg::readInt(char*, char*, int*)+0xd2>
c0013cc5:	0f af d6             	imul   edx,esi
c0013cc8:	83 fe 10             	cmp    esi,0x10
c0013ccb:	75 26                	jne    c0013cf3 <Reg::readInt(char*, char*, int*)+0xcb>
c0013ccd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013cd1:	83 ef 41             	sub    edi,0x41
c0013cd4:	89 fb                	mov    ebx,edi
c0013cd6:	80 fb 05             	cmp    bl,0x5
c0013cd9:	77 06                	ja     c0013ce1 <Reg::readInt(char*, char*, int*)+0xb9>
c0013cdb:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013cdf:	eb 16                	jmp    c0013cf7 <Reg::readInt(char*, char*, int*)+0xcf>
c0013ce1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ce5:	83 eb 61             	sub    ebx,0x61
c0013ce8:	80 fb 05             	cmp    bl,0x5
c0013ceb:	77 06                	ja     c0013cf3 <Reg::readInt(char*, char*, int*)+0xcb>
c0013ced:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013cf1:	eb 04                	jmp    c0013cf7 <Reg::readInt(char*, char*, int*)+0xcf>
c0013cf3:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013cf7:	45                   	inc    ebp
c0013cf8:	eb ad                	jmp    c0013ca7 <Reg::readInt(char*, char*, int*)+0x7f>
c0013cfa:	84 c0                	test   al,al
c0013cfc:	74 02                	je     c0013d00 <Reg::readInt(char*, char*, int*)+0xd8>
c0013cfe:	f7 da                	neg    edx
c0013d00:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d07:	89 10                	mov    DWORD PTR [eax],edx
c0013d09:	88 d8                	mov    al,bl
c0013d0b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d11:	5b                   	pop    ebx
c0013d12:	5e                   	pop    esi
c0013d13:	5f                   	pop    edi
c0013d14:	5d                   	pop    ebp
c0013d15:	c3                   	ret    

c0013d16 <Reg::readString(char*, char*, char*, int)>:
c0013d16:	57                   	push   edi
c0013d17:	56                   	push   esi
c0013d18:	53                   	push   ebx
c0013d19:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d1f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d26:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d2a:	57                   	push   edi
c0013d2b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d32:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d39:	e8 b3 fe ff ff       	call   c0013bf1 <Reg::getLine(char*, char*, char*)>
c0013d3e:	83 c4 10             	add    esp,0x10
c0013d41:	89 c6                	mov    esi,eax
c0013d43:	84 c0                	test   al,al
c0013d45:	74 44                	je     c0013d8b <Reg::readString(char*, char*, char*, int)+0x75>
c0013d47:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d4e:	31 c0                	xor    eax,eax
c0013d50:	4a                   	dec    edx
c0013d51:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d54:	84 c9                	test   cl,cl
c0013d56:	74 0f                	je     c0013d67 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d58:	39 c2                	cmp    edx,eax
c0013d5a:	7e 0b                	jle    c0013d67 <Reg::readString(char*, char*, char*, int)+0x51>
c0013d5c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013d5f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013d64:	40                   	inc    eax
c0013d65:	eb ea                	jmp    c0013d51 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013d67:	83 ec 0c             	sub    esp,0xc
c0013d6a:	53                   	push   ebx
c0013d6b:	e8 00 c8 fe ff       	call   c0000570 <strlen>
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013d78:	75 11                	jne    c0013d8b <Reg::readString(char*, char*, char*, int)+0x75>
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	53                   	push   ebx
c0013d7e:	e8 ed c7 fe ff       	call   c0000570 <strlen>
c0013d83:	83 c4 10             	add    esp,0x10
c0013d86:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d8b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d91:	89 f0                	mov    eax,esi
c0013d93:	5b                   	pop    ebx
c0013d94:	5e                   	pop    esi
c0013d95:	5f                   	pop    edi
c0013d96:	c3                   	ret    

c0013d97 <Reg::readBool(char*, char*, bool*)>:
c0013d97:	83 ec 20             	sub    esp,0x20
c0013d9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d9e:	50                   	push   eax
c0013d9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013da7:	e8 7c fe ff ff       	call   c0013c28 <Reg::readInt(char*, char*, int*)>
c0013dac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013db1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013db5:	0f 95 02             	setne  BYTE PTR [edx]
c0013db8:	83 c4 2c             	add    esp,0x2c
c0013dbb:	c3                   	ret    

c0013dbc <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013dbc:	53                   	push   ebx
c0013dbd:	83 ec 1c             	sub    esp,0x1c
c0013dc0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013dc4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013dc8:	50                   	push   eax
c0013dc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dd1:	e8 c1 ff ff ff       	call   c0013d97 <Reg::readBool(char*, char*, bool*)>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	84 c0                	test   al,al
c0013ddb:	74 04                	je     c0013de1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013ddd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013de1:	88 d8                	mov    al,bl
c0013de3:	83 c4 18             	add    esp,0x18
c0013de6:	5b                   	pop    ebx
c0013de7:	c3                   	ret    

c0013de8 <Reg::readIntWithDefault(char*, char*, int)>:
c0013de8:	53                   	push   ebx
c0013de9:	83 ec 1c             	sub    esp,0x1c
c0013dec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013df0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013df4:	50                   	push   eax
c0013df5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dfd:	e8 26 fe ff ff       	call   c0013c28 <Reg::readInt(char*, char*, int*)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	84 c0                	test   al,al
c0013e07:	74 04                	je     c0013e0d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e0d:	89 d8                	mov    eax,ebx
c0013e0f:	83 c4 18             	add    esp,0x18
c0013e12:	5b                   	pop    ebx
c0013e13:	c3                   	ret    

c0013e14 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e14:	57                   	push   edi
c0013e15:	56                   	push   esi
c0013e16:	56                   	push   esi
c0013e17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e1b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e1f:	56                   	push   esi
c0013e20:	57                   	push   edi
c0013e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e29:	e8 e8 fe ff ff       	call   c0013d16 <Reg::readString(char*, char*, char*, int)>
c0013e2e:	83 c4 10             	add    esp,0x10
c0013e31:	84 c0                	test   al,al
c0013e33:	75 1a                	jne    c0013e4f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e35:	51                   	push   ecx
c0013e36:	56                   	push   esi
c0013e37:	6a 00                	push   0x0
c0013e39:	57                   	push   edi
c0013e3a:	e8 b1 c6 fe ff       	call   c00004f0 <memset>
c0013e3f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e42:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013e46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e4f:	89 f8                	mov    eax,edi
c0013e51:	5a                   	pop    edx
c0013e52:	5e                   	pop    esi
c0013e53:	5f                   	pop    edi
c0013e54:	c3                   	ret    

c0013e55 <SysEject(regs*)>:
c0013e55:	83 ec 0c             	sub    esp,0xc
c0013e58:	83 ca ff             	or     edx,0xffffffff
c0013e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013e62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e67:	83 e9 41             	sub    ecx,0x41
c0013e6a:	83 f9 19             	cmp    ecx,0x19
c0013e6d:	77 18                	ja     c0013e87 <SysEject(regs*)+0x32>
c0013e6f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013e76:	85 c9                	test   ecx,ecx
c0013e78:	74 0d                	je     c0013e87 <SysEject(regs*)+0x32>
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	51                   	push   ecx
c0013e7e:	e8 57 9e ff ff       	call   c000dcda <LogicalDisk::eject()>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	99                   	cdq    
c0013e87:	83 c4 0c             	add    esp,0xc
c0013e8a:	c3                   	ret    

c0013e8b <SysExit(regs*)>:
c0013e8b:	83 ec 18             	sub    esp,0x18
c0013e8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e95:	e8 46 2b 00 00       	call   c00169e0 <terminateTask(int)>
c0013e9a:	83 c8 ff             	or     eax,0xffffffff
c0013e9d:	83 c4 1c             	add    esp,0x1c
c0013ea0:	89 c2                	mov    edx,eax
c0013ea2:	c3                   	ret    

c0013ea3 <SysGetCwd(regs*)>:
c0013ea3:	83 ec 10             	sub    esp,0x10
c0013ea6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eaa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ead:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eb5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013eb8:	e8 f1 78 ff ff       	call   c000b7ae <Fs::getcwd(Process*, char*, int)>
c0013ebd:	83 c4 1c             	add    esp,0x1c
c0013ec0:	99                   	cdq    
c0013ec1:	c3                   	ret    

c0013ec2 <SysGetPID(regs*)>:
c0013ec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ec7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013eca:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ecc:	99                   	cdq    
c0013ecd:	c3                   	ret    

c0013ece <SysGetRAMData(regs*)>:
c0013ece:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ed4:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013ede:	99                   	cdq    
c0013edf:	f7 f9                	idiv   ecx
c0013ee1:	c1 e0 18             	shl    eax,0x18
c0013ee4:	09 c8                	or     eax,ecx
c0013ee6:	99                   	cdq    
c0013ee7:	c3                   	ret    

c0013ee8 <SysGetVGAPtr(regs*)>:
c0013ee8:	55                   	push   ebp
c0013ee9:	57                   	push   edi
c0013eea:	56                   	push   esi
c0013eeb:	53                   	push   ebx
c0013eec:	83 ec 18             	sub    esp,0x18
c0013eef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ef3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ef6:	e8 b1 25 00 00       	call   c00164ac <Thr::processFromPID(int)>
c0013efb:	83 c4 10             	add    esp,0x10
c0013efe:	89 c1                	mov    ecx,eax
c0013f00:	b8 01 00 00 00       	mov    eax,0x1
c0013f05:	85 c9                	test   ecx,ecx
c0013f07:	74 57                	je     c0013f60 <SysGetVGAPtr(regs*)+0x78>
c0013f09:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f0f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f13:	74 0c                	je     c0013f21 <SysGetVGAPtr(regs*)+0x39>
c0013f15:	83 ec 0c             	sub    esp,0xc
c0013f18:	55                   	push   ebp
c0013f19:	e8 3b 48 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f24:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f27:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f2e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f34:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f3a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f3d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f40:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f46:	50                   	push   eax
c0013f47:	50                   	push   eax
c0013f48:	68 34 25 02 c0       	push   0xc0022534
c0013f4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f50:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f55:	50                   	push   eax
c0013f56:	e8 e5 c6 fe ff       	call   c0000640 <strcpy>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	31 c0                	xor    eax,eax
c0013f60:	83 c4 0c             	add    esp,0xc
c0013f63:	31 d2                	xor    edx,edx
c0013f65:	5b                   	pop    ebx
c0013f66:	5e                   	pop    esi
c0013f67:	5f                   	pop    edi
c0013f68:	5d                   	pop    ebp
c0013f69:	c3                   	ret    
c0013f6a:	66 90                	xchg   ax,ax

c0013f6c <SysKill(regs*)>:
c0013f6c:	53                   	push   ebx
c0013f6d:	83 ec 08             	sub    esp,0x8
c0013f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f74:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013f78:	75 16                	jne    c0013f90 <SysKill(regs*)+0x24>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	68 3e 25 02 c0       	push   0xc002253e
c0013f82:	e8 34 d6 ff ff       	call   c00115bb <KePanic(char const*)>
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	e9 89 00 00 00       	jmp    c0014018 <SysKill(regs*)+0xac>
c0013f8f:	90                   	nop
c0013f90:	83 ec 0c             	sub    esp,0xc
c0013f93:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f98:	e8 ff bc 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa0:	83 c4 10             	add    esp,0x10
c0013fa3:	85 c0                	test   eax,eax
c0013fa5:	74 19                	je     c0013fc0 <SysKill(regs*)+0x54>
c0013fa7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013faa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fad:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013faf:	74 33                	je     c0013fe4 <SysKill(regs*)+0x78>
c0013fb1:	52                   	push   edx
c0013fb2:	52                   	push   edx
c0013fb3:	50                   	push   eax
c0013fb4:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fb9:	e8 fe bf 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013fbe:	eb e0                	jmp    c0013fa0 <SysKill(regs*)+0x34>
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013fc8:	e8 cf bc 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd0:	83 c4 10             	add    esp,0x10
c0013fd3:	85 c0                	test   eax,eax
c0013fd5:	74 41                	je     c0014018 <SysKill(regs*)+0xac>
c0013fd7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013fda:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013fdd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fdf:	75 27                	jne    c0014008 <SysKill(regs*)+0x9c>
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	51                   	push   ecx
c0013fe5:	51                   	push   ecx
c0013fe6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ff1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013ff7:	e8 62 da ff ff       	call   c0011a5e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013ffc:	83 c4 10             	add    esp,0x10
c0013fff:	31 c0                	xor    eax,eax
c0014001:	31 d2                	xor    edx,edx
c0014003:	eb 1b                	jmp    c0014020 <SysKill(regs*)+0xb4>
c0014005:	8d 76 00             	lea    esi,[esi+0x0]
c0014008:	52                   	push   edx
c0014009:	52                   	push   edx
c001400a:	50                   	push   eax
c001400b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014010:	e8 a7 bf 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014015:	eb b9                	jmp    c0013fd0 <SysKill(regs*)+0x64>
c0014017:	90                   	nop
c0014018:	83 c8 ff             	or     eax,0xffffffff
c001401b:	89 c2                	mov    edx,eax
c001401d:	8d 76 00             	lea    esi,[esi+0x0]
c0014020:	83 c4 08             	add    esp,0x8
c0014023:	5b                   	pop    ebx
c0014024:	c3                   	ret    

c0014025 <SysLoadDLL(regs*)>:
c0014025:	56                   	push   esi
c0014026:	53                   	push   ebx
c0014027:	31 d2                	xor    edx,edx
c0014029:	51                   	push   ecx
c001402a:	b8 01 00 00 00       	mov    eax,0x1
c001402f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014033:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014037:	0f 84 8c 00 00 00    	je     c00140c9 <SysLoadDLL(regs*)+0xa4>
c001403d:	83 ec 0c             	sub    esp,0xc
c0014040:	68 14 01 00 00       	push   0x114
c0014045:	e8 6c 3a ff ff       	call   c0007ab6 <malloc>
c001404a:	83 c4 0c             	add    esp,0xc
c001404d:	89 c3                	mov    ebx,eax
c001404f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014054:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014057:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001405a:	53                   	push   ebx
c001405b:	e8 8a 7a ff ff       	call   c000baea <File::File(char const*, Process*)>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	31 d2                	xor    edx,edx
c0014065:	b8 02 00 00 00       	mov    eax,0x2
c001406a:	85 db                	test   ebx,ebx
c001406c:	74 5b                	je     c00140c9 <SysLoadDLL(regs*)+0xa4>
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	53                   	push   ebx
c0014072:	e8 55 7d ff ff       	call   c000bdcc <File::exists()>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	84 c0                	test   al,al
c001407c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001407e:	75 11                	jne    c0014091 <SysLoadDLL(regs*)+0x6c>
c0014080:	83 ec 0c             	sub    esp,0xc
c0014083:	53                   	push   ebx
c0014084:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	b8 03 00 00 00       	mov    eax,0x3
c001408f:	eb 36                	jmp    c00140c7 <SysLoadDLL(regs*)+0xa2>
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	53                   	push   ebx
c0014095:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014098:	58                   	pop    eax
c0014099:	5a                   	pop    edx
c001409a:	6a 00                	push   0x0
c001409c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001409f:	e8 3b 15 00 00       	call   c00155df <Thr::loadDLL(char const*, bool)>
c00140a4:	83 c4 10             	add    esp,0x10
c00140a7:	89 c1                	mov    ecx,eax
c00140a9:	31 d2                	xor    edx,edx
c00140ab:	b8 04 00 00 00       	mov    eax,0x4
c00140b0:	85 c9                	test   ecx,ecx
c00140b2:	74 15                	je     c00140c9 <SysLoadDLL(regs*)+0xa4>
c00140b4:	53                   	push   ebx
c00140b5:	53                   	push   ebx
c00140b6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00140bc:	51                   	push   ecx
c00140bd:	e8 4e 17 00 00       	call   c0015810 <Thr::executeDLL(unsigned long, void*)>
c00140c2:	83 c4 10             	add    esp,0x10
c00140c5:	31 c0                	xor    eax,eax
c00140c7:	31 d2                	xor    edx,edx
c00140c9:	59                   	pop    ecx
c00140ca:	5b                   	pop    ebx
c00140cb:	5e                   	pop    esi
c00140cc:	c3                   	ret    

c00140cd <SysRead(regs*)>:
c00140cd:	57                   	push   edi
c00140ce:	56                   	push   esi
c00140cf:	53                   	push   ebx
c00140d0:	83 ec 10             	sub    esp,0x10
c00140d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140da:	83 f8 02             	cmp    eax,0x2
c00140dd:	77 10                	ja     c00140ef <SysRead(regs*)+0x22>
c00140df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140e7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00140ed:	eb 0e                	jmp    c00140fd <SysRead(regs*)+0x30>
c00140ef:	83 ec 0c             	sub    esp,0xc
c00140f2:	50                   	push   eax
c00140f3:	e8 bb 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	89 c1                	mov    ecx,eax
c00140fd:	83 c8 ff             	or     eax,0xffffffff
c0014100:	85 c9                	test   ecx,ecx
c0014102:	89 c2                	mov    edx,eax
c0014104:	74 28                	je     c001412e <SysRead(regs*)+0x61>
c0014106:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001410e:	31 ff                	xor    edi,edi
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014115:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014119:	52                   	push   edx
c001411a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001411d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014120:	57                   	push   edi
c0014121:	56                   	push   esi
c0014122:	51                   	push   ecx
c0014123:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001412a:	83 c4 20             	add    esp,0x20
c001412d:	99                   	cdq    
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	5b                   	pop    ebx
c0014132:	5e                   	pop    esi
c0014133:	5f                   	pop    edi
c0014134:	c3                   	ret    

c0014135 <SysRegisterSignal(regs*)>:
c0014135:	83 ec 18             	sub    esp,0x18
c0014138:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001413c:	6a 00                	push   0x0
c001413e:	6a 00                	push   0x0
c0014140:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014143:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001414b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001414e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014154:	e8 cf d8 ff ff       	call   c0011a28 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014159:	83 c4 2c             	add    esp,0x2c
c001415c:	99                   	cdq    
c001415d:	c3                   	ret    

c001415e <SysRegistryGetTypeFromPath(regs*)>:
c001415e:	57                   	push   edi
c001415f:	56                   	push   esi
c0014160:	53                   	push   ebx
c0014161:	81 ec 38 01 00 00    	sub    esp,0x138
c0014167:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001416e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014171:	68 5f 25 02 c0       	push   0xc002255f
c0014176:	e8 ca 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001417b:	5a                   	pop    edx
c001417c:	59                   	pop    ecx
c001417d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014180:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014183:	e8 4d f6 ff ff       	call   c00137d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014188:	5f                   	pop    edi
c0014189:	89 c6                	mov    esi,eax
c001418b:	5a                   	pop    edx
c001418c:	50                   	push   eax
c001418d:	68 7f 25 02 c0       	push   0xc002257f
c0014192:	e8 ae 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	85 f6                	test   esi,esi
c001419c:	74 28                	je     c00141c6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001419e:	50                   	push   eax
c001419f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00141a3:	57                   	push   edi
c00141a4:	56                   	push   esi
c00141a5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141a8:	e8 0c f2 ff ff       	call   c00133b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141ad:	83 c4 0c             	add    esp,0xc
c00141b0:	89 c3                	mov    ebx,eax
c00141b2:	57                   	push   edi
c00141b3:	50                   	push   eax
c00141b4:	68 87 25 02 c0       	push   0xc0022587
c00141b9:	e8 87 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141be:	89 d8                	mov    eax,ebx
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	99                   	cdq    
c00141c4:	eb 05                	jmp    c00141cb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00141c6:	83 c8 ff             	or     eax,0xffffffff
c00141c9:	89 c2                	mov    edx,eax
c00141cb:	81 c4 30 01 00 00    	add    esp,0x130
c00141d1:	5b                   	pop    ebx
c00141d2:	5e                   	pop    esi
c00141d3:	5f                   	pop    edi
c00141d4:	c3                   	ret    

c00141d5 <SysRegistryReadExtent(regs*)>:
c00141d5:	83 ec 1c             	sub    esp,0x1c
c00141d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141dc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00141df:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00141e2:	85 c0                	test   eax,eax
c00141e4:	79 1f                	jns    c0014205 <SysRegistryReadExtent(regs*)+0x30>
c00141e6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00141eb:	52                   	push   edx
c00141ec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00141f0:	52                   	push   edx
c00141f1:	50                   	push   eax
c00141f2:	51                   	push   ecx
c00141f3:	e8 b3 f0 ff ff       	call   c00132ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00141f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014200:	83 c4 10             	add    esp,0x10
c0014203:	eb 14                	jmp    c0014219 <SysRegistryReadExtent(regs*)+0x44>
c0014205:	83 ec 04             	sub    esp,0x4
c0014208:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001420b:	50                   	push   eax
c001420c:	51                   	push   ecx
c001420d:	e8 33 eb ff ff       	call   c0012d45 <CmGetString(Reghive_Tag*, int, char*)>
c0014212:	83 c4 10             	add    esp,0x10
c0014215:	31 c0                	xor    eax,eax
c0014217:	31 d2                	xor    edx,edx
c0014219:	83 c4 1c             	add    esp,0x1c
c001421c:	c3                   	ret    

c001421d <SysRegistryPathToExtentLookup(regs*)>:
c001421d:	53                   	push   ebx
c001421e:	83 ec 10             	sub    esp,0x10
c0014221:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014225:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014228:	68 9d 25 02 c0       	push   0xc002259d
c001422d:	e8 13 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014232:	58                   	pop    eax
c0014233:	5a                   	pop    edx
c0014234:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014237:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001423a:	e8 96 f5 ff ff       	call   c00137d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001423f:	83 c4 18             	add    esp,0x18
c0014242:	99                   	cdq    
c0014243:	5b                   	pop    ebx
c0014244:	c3                   	ret    

c0014245 <SysRegistryEnterDirectory(regs*)>:
c0014245:	53                   	push   ebx
c0014246:	83 ec 10             	sub    esp,0x10
c0014249:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001424d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014250:	68 c0 25 02 c0       	push   0xc00225c0
c0014255:	e8 eb 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001425a:	58                   	pop    eax
c001425b:	5a                   	pop    edx
c001425c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001425f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014262:	e8 55 eb ff ff       	call   c0012dbc <CmEnterDirectory(Reghive_Tag*, int)>
c0014267:	83 c4 18             	add    esp,0x18
c001426a:	99                   	cdq    
c001426b:	5b                   	pop    ebx
c001426c:	c3                   	ret    

c001426d <SysRegistryGetNext(regs*)>:
c001426d:	53                   	push   ebx
c001426e:	83 ec 10             	sub    esp,0x10
c0014271:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014275:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014278:	68 de 25 02 c0       	push   0xc00225de
c001427d:	e8 c3 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014282:	58                   	pop    eax
c0014283:	5a                   	pop    edx
c0014284:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014287:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001428a:	e8 6c eb ff ff       	call   c0012dfb <CmGetNext(Reghive_Tag*, int)>
c001428f:	83 c4 18             	add    esp,0x18
c0014292:	99                   	cdq    
c0014293:	5b                   	pop    ebx
c0014294:	c3                   	ret    

c0014295 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014295:	57                   	push   edi
c0014296:	56                   	push   esi
c0014297:	53                   	push   ebx
c0014298:	81 ec 34 01 00 00    	sub    esp,0x134
c001429e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142a5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142a9:	57                   	push   edi
c00142aa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142b0:	e8 04 f1 ff ff       	call   c00133b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142b5:	89 c3                	mov    ebx,eax
c00142b7:	58                   	pop    eax
c00142b8:	5a                   	pop    edx
c00142b9:	57                   	push   edi
c00142ba:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00142bd:	e8 7e c3 fe ff       	call   c0000640 <strcpy>
c00142c2:	89 d8                	mov    eax,ebx
c00142c4:	81 c4 40 01 00 00    	add    esp,0x140
c00142ca:	99                   	cdq    
c00142cb:	5b                   	pop    ebx
c00142cc:	5e                   	pop    esi
c00142cd:	5f                   	pop    edi
c00142ce:	c3                   	ret    

c00142cf <SysRegistryOpen(regs*)>:
c00142cf:	83 ec 18             	sub    esp,0x18
c00142d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142d6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142d9:	e8 f7 e8 ff ff       	call   c0012bd5 <CmOpen(char const*)>
c00142de:	83 c4 1c             	add    esp,0x1c
c00142e1:	99                   	cdq    
c00142e2:	c3                   	ret    

c00142e3 <SysRegistryClose(regs*)>:
c00142e3:	83 ec 18             	sub    esp,0x18
c00142e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142ed:	e8 01 ea ff ff       	call   c0012cf3 <CmClose(Reghive_Tag*)>
c00142f2:	31 c0                	xor    eax,eax
c00142f4:	31 d2                	xor    edx,edx
c00142f6:	83 c4 1c             	add    esp,0x1c
c00142f9:	c3                   	ret    

c00142fa <SysSbrk(regs*)>:
c00142fa:	56                   	push   esi
c00142fb:	53                   	push   ebx
c00142fc:	50                   	push   eax
c00142fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014306:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014309:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001430c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014312:	85 db                	test   ebx,ebx
c0014314:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014317:	74 02                	je     c001431b <SysSbrk(regs*)+0x21>
c0014319:	79 06                	jns    c0014321 <SysSbrk(regs*)+0x27>
c001431b:	89 f0                	mov    eax,esi
c001431d:	31 d2                	xor    edx,edx
c001431f:	eb 2a                	jmp    c001434b <SysSbrk(regs*)+0x51>
c0014321:	83 c8 ff             	or     eax,0xffffffff
c0014324:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001432a:	89 c2                	mov    edx,eax
c001432c:	77 1d                	ja     c001434b <SysSbrk(regs*)+0x51>
c001432e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014334:	50                   	push   eax
c0014335:	c1 ea 0c             	shr    edx,0xc
c0014338:	68 07 0c 00 00       	push   0xc07
c001433d:	52                   	push   edx
c001433e:	51                   	push   ecx
c001433f:	e8 e0 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014344:	89 f0                	mov    eax,esi
c0014346:	31 d2                	xor    edx,edx
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	59                   	pop    ecx
c001434c:	5b                   	pop    ebx
c001434d:	5e                   	pop    esi
c001434e:	c3                   	ret    

c001434f <SysSetCwd(regs*)>:
c001434f:	83 ec 14             	sub    esp,0x14
c0014352:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014356:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001435e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014361:	e8 05 7b ff ff       	call   c000be6b <Fs::setcwd(Process*, char*)>
c0014366:	83 c4 1c             	add    esp,0x1c
c0014369:	99                   	cdq    
c001436a:	c3                   	ret    

c001436b <SysSetTime(regs*)>:
c001436b:	55                   	push   ebp
c001436c:	31 c9                	xor    ecx,ecx
c001436e:	57                   	push   edi
c001436f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014374:	56                   	push   esi
c0014375:	53                   	push   ebx
c0014376:	31 db                	xor    ebx,ebx
c0014378:	83 ec 10             	sub    esp,0x10
c001437b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001437f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014382:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014385:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014388:	89 c2                	mov    edx,eax
c001438a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014390:	83 e2 1f             	and    edx,0x1f
c0014393:	c1 e7 10             	shl    edi,0x10
c0014396:	42                   	inc    edx
c0014397:	c1 e8 05             	shr    eax,0x5
c001439a:	88 d1                	mov    cl,dl
c001439c:	31 d2                	xor    edx,edx
c001439e:	f7 f5                	div    ebp
c00143a0:	89 dd                	mov    ebp,ebx
c00143a2:	88 d5                	mov    ch,dl
c00143a4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143aa:	0f b7 c1             	movzx  eax,cx
c00143ad:	31 d2                	xor    edx,edx
c00143af:	09 f8                	or     eax,edi
c00143b1:	bf 3c 00 00 00       	mov    edi,0x3c
c00143b6:	89 c1                	mov    ecx,eax
c00143b8:	89 f0                	mov    eax,esi
c00143ba:	f7 f7                	div    edi
c00143bc:	c1 e2 10             	shl    edx,0x10
c00143bf:	09 d5                	or     ebp,edx
c00143c1:	31 d2                	xor    edx,edx
c00143c3:	89 eb                	mov    ebx,ebp
c00143c5:	f7 f7                	div    edi
c00143c7:	bf 10 0e 00 00       	mov    edi,0xe10
c00143cc:	88 d7                	mov    bh,dl
c00143ce:	89 f0                	mov    eax,esi
c00143d0:	31 d2                	xor    edx,edx
c00143d2:	f7 f7                	div    edi
c00143d4:	bf 18 00 00 00       	mov    edi,0x18
c00143d9:	31 d2                	xor    edx,edx
c00143db:	f7 f7                	div    edi
c00143dd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00143e2:	88 d3                	mov    bl,dl
c00143e4:	53                   	push   ebx
c00143e5:	51                   	push   ecx
c00143e6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00143ec:	e8 85 82 ff ff       	call   c000c676 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00143f1:	83 c4 1c             	add    esp,0x1c
c00143f4:	83 f0 01             	xor    eax,0x1
c00143f7:	5b                   	pop    ebx
c00143f8:	0f b6 c0             	movzx  eax,al
c00143fb:	5e                   	pop    esi
c00143fc:	31 d2                	xor    edx,edx
c00143fe:	5f                   	pop    edi
c00143ff:	5d                   	pop    ebp
c0014400:	c3                   	ret    

c0014401 <SysSymlink(regs*)>:
c0014401:	53                   	push   ebx
c0014402:	83 c8 ff             	or     eax,0xffffffff
c0014405:	83 ec 08             	sub    esp,0x8
c0014408:	89 c2                	mov    edx,eax
c001440a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001440e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014411:	85 c9                	test   ecx,ecx
c0014413:	74 14                	je     c0014429 <SysSymlink(regs*)+0x28>
c0014415:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014418:	85 db                	test   ebx,ebx
c001441a:	74 0d                	je     c0014429 <SysSymlink(regs*)+0x28>
c001441c:	50                   	push   eax
c001441d:	50                   	push   eax
c001441e:	53                   	push   ebx
c001441f:	51                   	push   ecx
c0014420:	e8 9a 6e ff ff       	call   c000b2bf <KeCreateSymlink(char const*, char const*)>
c0014425:	83 c4 10             	add    esp,0x10
c0014428:	99                   	cdq    
c0014429:	83 c4 08             	add    esp,0x8
c001442c:	5b                   	pop    ebx
c001442d:	c3                   	ret    

c001442e <SysTimezone(regs*)>:
c001442e:	53                   	push   ebx
c001442f:	83 ec 08             	sub    esp,0x8
c0014432:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014436:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001443a:	75 17                	jne    c0014453 <SysTimezone(regs*)+0x25>
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	68 f5 25 02 c0       	push   0xc00225f5
c0014444:	e8 fc 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014449:	83 c8 ff             	or     eax,0xffffffff
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	89 c2                	mov    edx,eax
c0014451:	eb 20                	jmp    c0014473 <SysTimezone(regs*)+0x45>
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	68 0a 26 02 c0       	push   0xc002260a
c001445b:	e8 e5 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014460:	58                   	pop    eax
c0014461:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014464:	e8 77 7f ff ff       	call   c000c3e0 <User::loadClockSettings(int)>
c0014469:	83 c4 10             	add    esp,0x10
c001446c:	b8 01 00 00 00       	mov    eax,0x1
c0014471:	31 d2                	xor    edx,edx
c0014473:	83 c4 08             	add    esp,0x8
c0014476:	5b                   	pop    ebx
c0014477:	c3                   	ret    

c0014478 <SysTruncate(regs*)>:
c0014478:	55                   	push   ebp
c0014479:	57                   	push   edi
c001447a:	31 ff                	xor    edi,edi
c001447c:	56                   	push   esi
c001447d:	53                   	push   ebx
c001447e:	83 ec 0c             	sub    esp,0xc
c0014481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014485:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014488:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001448b:	89 ce                	mov    esi,ecx
c001448d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014491:	0f 84 9a 00 00 00    	je     c0014531 <SysTruncate(regs*)+0xb9>
c0014497:	83 ec 0c             	sub    esp,0xc
c001449a:	68 14 01 00 00       	push   0x114
c001449f:	e8 12 36 ff ff       	call   c0007ab6 <malloc>
c00144a4:	83 c4 0c             	add    esp,0xc
c00144a7:	89 c3                	mov    ebx,eax
c00144a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ae:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144b1:	55                   	push   ebp
c00144b2:	53                   	push   ebx
c00144b3:	e8 32 76 ff ff       	call   c000baea <File::File(char const*, Process*)>
c00144b8:	83 c4 10             	add    esp,0x10
c00144bb:	31 d2                	xor    edx,edx
c00144bd:	b8 03 00 00 00       	mov    eax,0x3
c00144c2:	85 db                	test   ebx,ebx
c00144c4:	0f 84 a2 00 00 00    	je     c001456c <SysTruncate(regs*)+0xf4>
c00144ca:	51                   	push   ecx
c00144cb:	51                   	push   ecx
c00144cc:	6a 02                	push   0x2
c00144ce:	53                   	push   ebx
c00144cf:	e8 34 76 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	85 c0                	test   eax,eax
c00144d9:	74 13                	je     c00144ee <SysTruncate(regs*)+0x76>
c00144db:	83 ec 0c             	sub    esp,0xc
c00144de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144e0:	53                   	push   ebx
c00144e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	b8 04 00 00 00       	mov    eax,0x4
c00144ec:	eb 7c                	jmp    c001456a <SysTruncate(regs*)+0xf2>
c00144ee:	52                   	push   edx
c00144ef:	57                   	push   edi
c00144f0:	56                   	push   esi
c00144f1:	53                   	push   ebx
c00144f2:	e8 25 77 ff ff       	call   c000bc1c <File::truncate(unsigned long long)>
c00144f7:	83 c4 10             	add    esp,0x10
c00144fa:	85 c0                	test   eax,eax
c00144fc:	74 1b                	je     c0014519 <SysTruncate(regs*)+0xa1>
c00144fe:	83 ec 0c             	sub    esp,0xc
c0014501:	53                   	push   ebx
c0014502:	e8 5f 76 ff ff       	call   c000bb66 <File::close()>
c0014507:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001450c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001450f:	83 c4 10             	add    esp,0x10
c0014512:	b8 05 00 00 00       	mov    eax,0x5
c0014517:	eb 51                	jmp    c001456a <SysTruncate(regs*)+0xf2>
c0014519:	83 ec 0c             	sub    esp,0xc
c001451c:	53                   	push   ebx
c001451d:	e8 44 76 ff ff       	call   c000bb66 <File::close()>
c0014522:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014524:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014527:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	31 c0                	xor    eax,eax
c001452f:	eb 39                	jmp    c001456a <SysTruncate(regs*)+0xf2>
c0014531:	31 d2                	xor    edx,edx
c0014533:	b8 01 00 00 00       	mov    eax,0x1
c0014538:	83 fd 02             	cmp    ebp,0x2
c001453b:	7e 2f                	jle    c001456c <SysTruncate(regs*)+0xf4>
c001453d:	83 ec 0c             	sub    esp,0xc
c0014540:	51                   	push   ecx
c0014541:	e8 6d 4f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014546:	83 c4 10             	add    esp,0x10
c0014549:	89 c1                	mov    ecx,eax
c001454b:	31 d2                	xor    edx,edx
c001454d:	b8 02 00 00 00       	mov    eax,0x2
c0014552:	85 c9                	test   ecx,ecx
c0014554:	74 16                	je     c001456c <SysTruncate(regs*)+0xf4>
c0014556:	50                   	push   eax
c0014557:	57                   	push   edi
c0014558:	56                   	push   esi
c0014559:	51                   	push   ecx
c001455a:	e8 bd 76 ff ff       	call   c000bc1c <File::truncate(unsigned long long)>
c001455f:	83 c4 10             	add    esp,0x10
c0014562:	85 c0                	test   eax,eax
c0014564:	0f 95 c0             	setne  al
c0014567:	0f b6 c0             	movzx  eax,al
c001456a:	31 d2                	xor    edx,edx
c001456c:	83 c4 0c             	add    esp,0xc
c001456f:	5b                   	pop    ebx
c0014570:	5e                   	pop    esi
c0014571:	5f                   	pop    edi
c0014572:	5d                   	pop    ebp
c0014573:	c3                   	ret    

c0014574 <SysWrite(regs*)>:
c0014574:	57                   	push   edi
c0014575:	56                   	push   esi
c0014576:	53                   	push   ebx
c0014577:	83 ec 10             	sub    esp,0x10
c001457a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001457e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014581:	83 f8 02             	cmp    eax,0x2
c0014584:	77 10                	ja     c0014596 <SysWrite(regs*)+0x22>
c0014586:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001458b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001458e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014594:	eb 0e                	jmp    c00145a4 <SysWrite(regs*)+0x30>
c0014596:	83 ec 0c             	sub    esp,0xc
c0014599:	50                   	push   eax
c001459a:	e8 14 4f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	89 c1                	mov    ecx,eax
c00145a4:	83 c8 ff             	or     eax,0xffffffff
c00145a7:	85 c9                	test   ecx,ecx
c00145a9:	89 c2                	mov    edx,eax
c00145ab:	74 28                	je     c00145d5 <SysWrite(regs*)+0x61>
c00145ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145b5:	31 ff                	xor    edi,edi
c00145b7:	83 ec 0c             	sub    esp,0xc
c00145ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00145bc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00145c0:	52                   	push   edx
c00145c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145c4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00145c7:	57                   	push   edi
c00145c8:	56                   	push   esi
c00145c9:	51                   	push   ecx
c00145ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00145cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145d1:	83 c4 20             	add    esp,0x20
c00145d4:	99                   	cdq    
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	5b                   	pop    ebx
c00145d9:	5e                   	pop    esi
c00145da:	5f                   	pop    edi
c00145db:	c3                   	ret    

c00145dc <SysWsbe(regs*)>:
c00145dc:	57                   	push   edi
c00145dd:	b9 0b 00 00 00       	mov    ecx,0xb
c00145e2:	56                   	push   esi
c00145e3:	be 49 26 02 c0       	mov    esi,0xc0022649
c00145e8:	53                   	push   ebx
c00145e9:	83 ec 30             	sub    esp,0x30
c00145ec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00145f0:	fc                   	cld    
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00145f6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00145fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014602:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014608:	8b 06                	mov    eax,DWORD PTR [esi]
c001460a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001460d:	57                   	push   edi
c001460e:	e8 5d bf fe ff       	call   c0000570 <strlen>
c0014613:	5a                   	pop    edx
c0014614:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014618:	52                   	push   edx
c0014619:	31 d2                	xor    edx,edx
c001461b:	57                   	push   edi
c001461c:	52                   	push   edx
c001461d:	50                   	push   eax
c001461e:	56                   	push   esi
c001461f:	ff d3                	call   ebx
c0014621:	83 c4 14             	add    esp,0x14
c0014624:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014628:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001462b:	e8 b0 23 00 00       	call   c00169e0 <terminateTask(int)>
c0014630:	83 c4 40             	add    esp,0x40
c0014633:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014638:	5b                   	pop    ebx
c0014639:	31 d2                	xor    edx,edx
c001463b:	5e                   	pop    esi
c001463c:	5f                   	pop    edi
c001463d:	c3                   	ret    

c001463e <SysYield(regs*)>:
c001463e:	83 ec 0c             	sub    esp,0xc
c0014641:	fa                   	cli    
c0014642:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014648:	e8 f3 19 00 00       	call   c0016040 <schedule()>
c001464d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014652:	48                   	dec    eax
c0014653:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014658:	75 01                	jne    c001465b <SysYield(regs*)+0x1d>
c001465a:	fb                   	sti    
c001465b:	31 c0                	xor    eax,eax
c001465d:	31 d2                	xor    edx,edx
c001465f:	83 c4 0c             	add    esp,0xc
c0014662:	c3                   	ret    

c0014663 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014663:	55                   	push   ebp
c0014664:	57                   	push   edi
c0014665:	56                   	push   esi
c0014666:	53                   	push   ebx
c0014667:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001466d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014675:	0f 95 c0             	setne  al
c0014678:	31 d2                	xor    edx,edx
c001467a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014682:	0f 94 c2             	sete   dl
c0014685:	85 c2                	test   edx,eax
c0014687:	74 34                	je     c00146bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014689:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014694:	74 27                	je     c00146bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014696:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001469d:	05 00 10 00 00       	add    eax,0x1000
c00146a2:	89 c1                	mov    ecx,eax
c00146a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146a9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00146af:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00146b6:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00146bd:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00146cd:	6a 01                	push   0x1
c00146cf:	e8 39 4f ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	89 c3                	mov    ebx,eax
c00146d9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00146df:	0f 86 25 01 00 00    	jbe    c001480a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00146e5:	c1 ee 0c             	shr    esi,0xc
c00146e8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00146ef:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00146f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146fb:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014702:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014706:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001470d:	29 ef                	sub    edi,ebp
c001470f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014713:	0f 83 f8 00 00 00    	jae    c0014811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014719:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001471f:	76 05                	jbe    c0014726 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014721:	bf 00 10 00 00       	mov    edi,0x1000
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	31 d2                	xor    edx,edx
c001472b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014732:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014734:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014738:	50                   	push   eax
c0014739:	8d 74 24 30          	lea    esi,[esp+0x30]
c001473d:	56                   	push   esi
c001473e:	52                   	push   edx
c001473f:	57                   	push   edi
c0014740:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014747:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001474a:	83 c4 20             	add    esp,0x20
c001474d:	85 c0                	test   eax,eax
c001474f:	75 06                	jne    c0014757 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014751:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014755:	74 13                	je     c001476a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014757:	83 ec 0c             	sub    esp,0xc
c001475a:	53                   	push   ebx
c001475b:	e8 cb 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014760:	83 c4 10             	add    esp,0x10
c0014763:	31 c0                	xor    eax,eax
c0014765:	e9 7c 01 00 00       	jmp    c00148e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001476a:	fa                   	cli    
c001476b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014771:	e8 49 36 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014776:	6a 07                	push   0x7
c0014778:	89 c7                	mov    edi,eax
c001477a:	53                   	push   ebx
c001477b:	50                   	push   eax
c001477c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014784:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001478a:	e8 91 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001478f:	83 c4 0c             	add    esp,0xc
c0014792:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014799:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001479f:	6a 00                	push   0x0
c00147a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147a9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147af:	e8 d2 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00147b4:	58                   	pop    eax
c00147b5:	5a                   	pop    edx
c00147b6:	68 07 0c 00 00       	push   0xc07
c00147bb:	55                   	push   ebp
c00147bc:	57                   	push   edi
c00147bd:	89 df                	mov    edi,ebx
c00147bf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00147c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147cc:	6a 00                	push   0x0
c00147ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147d6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147dc:	e8 91 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00147e1:	b9 00 10 00 00       	mov    ecx,0x1000
c00147e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00147ed:	83 c4 20             	add    esp,0x20
c00147f0:	48                   	dec    eax
c00147f1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00147f6:	85 c0                	test   eax,eax
c00147f8:	75 01                	jne    c00147fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00147fa:	fb                   	sti    
c00147fb:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014801:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014805:	e9 f1 fe ff ff       	jmp    c00146fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001480a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014811:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014818:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001481e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014824:	0f 86 ae 00 00 00    	jbe    c00148d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001482a:	fa                   	cli    
c001482b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014831:	c1 ee 0c             	shr    esi,0xc
c0014834:	51                   	push   ecx
c0014835:	31 ff                	xor    edi,edi
c0014837:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001483e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014844:	6a 00                	push   0x0
c0014846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001484e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014854:	e8 2d 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014859:	83 c4 10             	add    esp,0x10
c001485c:	e8 5e 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014861:	47                   	inc    edi
c0014862:	6a 07                	push   0x7
c0014864:	53                   	push   ebx
c0014865:	50                   	push   eax
c0014866:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001486a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014870:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014873:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014879:	e8 a2 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001487e:	58                   	pop    eax
c001487f:	5a                   	pop    edx
c0014880:	68 07 0c 00 00       	push   0xc07
c0014885:	55                   	push   ebp
c0014886:	81 c5 00 10 00 00    	add    ebp,0x1000
c001488c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014890:	50                   	push   eax
c0014891:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014898:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001489e:	6a 00                	push   0x0
c00148a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ae:	e8 bf 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148b3:	83 c4 1c             	add    esp,0x1c
c00148b6:	68 00 10 00 00       	push   0x1000
c00148bb:	6a 00                	push   0x0
c00148bd:	53                   	push   ebx
c00148be:	e8 2d bc fe ff       	call   c00004f0 <memset>
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	39 fe                	cmp    esi,edi
c00148c8:	77 92                	ja     c001485c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00148ca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00148cf:	48                   	dec    eax
c00148d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00148d5:	75 01                	jne    c00148d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00148d7:	fb                   	sti    
c00148d8:	83 ec 0c             	sub    esp,0xc
c00148db:	53                   	push   ebx
c00148dc:	e8 4a 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00148e1:	83 c4 10             	add    esp,0x10
c00148e4:	b0 01                	mov    al,0x1
c00148e6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00148ec:	5b                   	pop    ebx
c00148ed:	5e                   	pop    esi
c00148ee:	5f                   	pop    edi
c00148ef:	5d                   	pop    ebp
c00148f0:	c3                   	ret    

c00148f1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00148f1:	55                   	push   ebp
c00148f2:	57                   	push   edi
c00148f3:	56                   	push   esi
c00148f4:	53                   	push   ebx
c00148f5:	83 ec 48             	sub    esp,0x48
c00148f8:	68 14 01 00 00       	push   0x114
c00148fd:	e8 b4 31 ff ff       	call   c0007ab6 <malloc>
c0014902:	83 c4 0c             	add    esp,0xc
c0014905:	89 c6                	mov    esi,eax
c0014907:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001490b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001490f:	50                   	push   eax
c0014910:	e8 d5 71 ff ff       	call   c000baea <File::File(char const*, Process*)>
c0014915:	58                   	pop    eax
c0014916:	5a                   	pop    edx
c0014917:	6a 01                	push   0x1
c0014919:	56                   	push   esi
c001491a:	e8 e9 71 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c001491f:	83 c4 10             	add    esp,0x10
c0014922:	85 c0                	test   eax,eax
c0014924:	0f 85 43 01 00 00    	jne    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001492a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014932:	83 ec 0c             	sub    esp,0xc
c0014935:	6a 34                	push   0x34
c0014937:	e8 7a 31 ff ff       	call   c0007ab6 <malloc>
c001493c:	89 c3                	mov    ebx,eax
c001493e:	58                   	pop    eax
c001493f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014941:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014945:	57                   	push   edi
c0014946:	53                   	push   ebx
c0014947:	6a 00                	push   0x0
c0014949:	6a 34                	push   0x34
c001494b:	56                   	push   esi
c001494c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001494f:	83 c4 20             	add    esp,0x20
c0014952:	85 c0                	test   eax,eax
c0014954:	0f 85 13 01 00 00    	jne    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001495a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014960:	0f 85 07 01 00 00    	jne    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014966:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014969:	85 c0                	test   eax,eax
c001496b:	0f 84 fc 00 00 00    	je     c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014971:	31 d2                	xor    edx,edx
c0014973:	55                   	push   ebp
c0014974:	52                   	push   edx
c0014975:	50                   	push   eax
c0014976:	56                   	push   esi
c0014977:	e8 4a 72 ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c001497c:	83 c4 10             	add    esp,0x10
c001497f:	85 c0                	test   eax,eax
c0014981:	0f 85 e6 00 00 00    	jne    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014987:	83 ec 0c             	sub    esp,0xc
c001498a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001498d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014995:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014999:	0f af c2             	imul   eax,edx
c001499c:	50                   	push   eax
c001499d:	e8 14 31 ff ff       	call   c0007ab6 <malloc>
c00149a2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149af:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149b3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149b7:	0f af c2             	imul   eax,edx
c00149ba:	99                   	cdq    
c00149bb:	52                   	push   edx
c00149bc:	50                   	push   eax
c00149bd:	56                   	push   esi
c00149be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00149c4:	83 c4 20             	add    esp,0x20
c00149c7:	85 c0                	test   eax,eax
c00149c9:	0f 84 9e 00 00 00    	je     c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149cf:	31 d2                	xor    edx,edx
c00149d1:	51                   	push   ecx
c00149d2:	52                   	push   edx
c00149d3:	50                   	push   eax
c00149d4:	56                   	push   esi
c00149d5:	e8 ec 71 ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	85 c0                	test   eax,eax
c00149df:	0f 85 88 00 00 00    	jne    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149e5:	83 ec 0c             	sub    esp,0xc
c00149e8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00149ec:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00149f0:	31 ed                	xor    ebp,ebp
c00149f2:	0f af c2             	imul   eax,edx
c00149f5:	50                   	push   eax
c00149f6:	e8 bb 30 ff ff       	call   c0007ab6 <malloc>
c00149fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a01:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a08:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a0c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a10:	0f af c2             	imul   eax,edx
c0014a13:	99                   	cdq    
c0014a14:	52                   	push   edx
c0014a15:	50                   	push   eax
c0014a16:	56                   	push   esi
c0014a17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a1a:	83 c4 20             	add    esp,0x20
c0014a1d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a25:	0f b7 fd             	movzx  edi,bp
c0014a28:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014a2c:	73 7d                	jae    c0014aab <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014a2e:	c1 e7 05             	shl    edi,0x5
c0014a31:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014a35:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a38:	75 6b                	jne    c0014aa5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014a3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a3d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a41:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a48:	52                   	push   edx
c0014a49:	31 d2                	xor    edx,edx
c0014a4b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a4e:	52                   	push   edx
c0014a4f:	50                   	push   eax
c0014a50:	56                   	push   esi
c0014a51:	e8 70 71 ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	85 c0                	test   eax,eax
c0014a5b:	74 17                	je     c0014a74 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	68 75 26 02 c0       	push   0xc0022675
c0014a65:	e8 db 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	31 c0                	xor    eax,eax
c0014a6f:	e9 87 00 00 00       	jmp    c0014afb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014a7a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014a7d:	50                   	push   eax
c0014a7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a86:	56                   	push   esi
c0014a87:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a8b:	e8 d3 fb ff ff       	call   c0014663 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a94:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014a98:	83 c4 20             	add    esp,0x20
c0014a9b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014a9f:	73 04                	jae    c0014aa5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014aa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014aa5:	45                   	inc    ebp
c0014aa6:	e9 7a ff ff ff       	jmp    c0014a25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014aab:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014aaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014ab3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ab7:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014ac6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014acb:	05 00 10 00 00       	add    eax,0x1000
c0014ad0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014ad3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ad7:	e8 ea 2f ff ff       	call   c0007ac6 <free>
c0014adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014adf:	e8 e2 2f ff ff       	call   c0007ac6 <free>
c0014ae4:	58                   	pop    eax
c0014ae5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ae9:	e8 d8 2f ff ff       	call   c0007ac6 <free>
c0014aee:	89 34 24             	mov    DWORD PTR [esp],esi
c0014af1:	e8 70 70 ff ff       	call   c000bb66 <File::close()>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	b0 01                	mov    al,0x1
c0014afb:	83 c4 3c             	add    esp,0x3c
c0014afe:	5b                   	pop    ebx
c0014aff:	5e                   	pop    esi
c0014b00:	5f                   	pop    edi
c0014b01:	5d                   	pop    ebp
c0014b02:	c3                   	ret    

c0014b03 <Thr::runtimeReferenceHelper()>:
c0014b03:	83 ec 18             	sub    esp,0x18
c0014b06:	68 7d 26 02 c0       	push   0xc002267d
c0014b0b:	e8 35 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b10:	fa                   	cli    
c0014b11:	83 c4 10             	add    esp,0x10
c0014b14:	eb fe                	jmp    c0014b14 <Thr::runtimeReferenceHelper()+0x11>

c0014b16 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b16:	57                   	push   edi
c0014b17:	56                   	push   esi
c0014b18:	53                   	push   ebx
c0014b19:	31 db                	xor    ebx,ebx
c0014b1b:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b21:	7e 3c                	jle    c0014b5f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b23:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b2a:	31 ff                	xor    edi,edi
c0014b2c:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b33:	7e 27                	jle    c0014b5c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b35:	50                   	push   eax
c0014b36:	50                   	push   eax
c0014b37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b3d:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b44:	50                   	push   eax
c0014b45:	e8 06 bc fe ff       	call   c0000750 <strcmp>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	85 c0                	test   eax,eax
c0014b4f:	75 05                	jne    c0014b56 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b51:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b54:	eb 0b                	jmp    c0014b61 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b56:	83 c6 10             	add    esi,0x10
c0014b59:	47                   	inc    edi
c0014b5a:	eb d0                	jmp    c0014b2c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014b5c:	43                   	inc    ebx
c0014b5d:	eb bc                	jmp    c0014b1b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014b5f:	31 c0                	xor    eax,eax
c0014b61:	5b                   	pop    ebx
c0014b62:	5e                   	pop    esi
c0014b63:	5f                   	pop    edi
c0014b64:	c3                   	ret    

c0014b65 <Thr::loadKernelSymbolTable(char const*)>:
c0014b65:	55                   	push   ebp
c0014b66:	57                   	push   edi
c0014b67:	56                   	push   esi
c0014b68:	53                   	push   ebx
c0014b69:	83 ec 68             	sub    esp,0x68
c0014b6c:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014b72:	68 14 01 00 00       	push   0x114
c0014b77:	e8 3a 2f ff ff       	call   c0007ab6 <malloc>
c0014b7c:	83 c4 0c             	add    esp,0xc
c0014b7f:	89 c3                	mov    ebx,eax
c0014b81:	56                   	push   esi
c0014b82:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b86:	50                   	push   eax
c0014b87:	e8 5e 6f ff ff       	call   c000baea <File::File(char const*, Process*)>
c0014b8c:	5e                   	pop    esi
c0014b8d:	5f                   	pop    edi
c0014b8e:	6a 01                	push   0x1
c0014b90:	53                   	push   ebx
c0014b91:	e8 72 6f ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	85 c0                	test   eax,eax
c0014b9b:	74 0a                	je     c0014ba7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b9d:	83 ec 0c             	sub    esp,0xc
c0014ba0:	68 9f 26 02 c0       	push   0xc002269f
c0014ba5:	eb 34                	jmp    c0014bdb <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014ba7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014baf:	83 ec 0c             	sub    esp,0xc
c0014bb2:	6a 34                	push   0x34
c0014bb4:	e8 fd 2e ff ff       	call   c0007ab6 <malloc>
c0014bb9:	59                   	pop    ecx
c0014bba:	89 c7                	mov    edi,eax
c0014bbc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014bc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bc2:	56                   	push   esi
c0014bc3:	57                   	push   edi
c0014bc4:	6a 00                	push   0x0
c0014bc6:	6a 34                	push   0x34
c0014bc8:	53                   	push   ebx
c0014bc9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014bcc:	83 c4 20             	add    esp,0x20
c0014bcf:	85 c0                	test   eax,eax
c0014bd1:	74 17                	je     c0014bea <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014bd3:	83 ec 0c             	sub    esp,0xc
c0014bd6:	68 b6 26 02 c0       	push   0xc00226b6
c0014bdb:	e8 db c9 ff ff       	call   c00115bb <KePanic(char const*)>
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	31 c0                	xor    eax,eax
c0014be5:	e9 31 02 00 00       	jmp    c0014e1b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014bea:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014bf0:	75 e1                	jne    c0014bd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bf2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014bf5:	85 c0                	test   eax,eax
c0014bf7:	74 da                	je     c0014bd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014bf9:	52                   	push   edx
c0014bfa:	31 d2                	xor    edx,edx
c0014bfc:	52                   	push   edx
c0014bfd:	50                   	push   eax
c0014bfe:	53                   	push   ebx
c0014bff:	e8 c2 6f ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014c04:	83 c4 10             	add    esp,0x10
c0014c07:	85 c0                	test   eax,eax
c0014c09:	75 c8                	jne    c0014bd3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c0b:	83 ec 0c             	sub    esp,0xc
c0014c0e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c16:	31 ed                	xor    ebp,ebp
c0014c18:	0f af c2             	imul   eax,edx
c0014c1b:	50                   	push   eax
c0014c1c:	e8 95 2e ff ff       	call   c0007ab6 <malloc>
c0014c21:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c27:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c2e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c36:	0f af c2             	imul   eax,edx
c0014c39:	99                   	cdq    
c0014c3a:	52                   	push   edx
c0014c3b:	50                   	push   eax
c0014c3c:	53                   	push   ebx
c0014c3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c40:	83 c4 20             	add    esp,0x20
c0014c43:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c4b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c53:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c5b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c63:	0f b7 f5             	movzx  esi,bp
c0014c66:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014c6a:	0f 83 a7 00 00 00    	jae    c0014d17 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014c70:	6b f6 28             	imul   esi,esi,0x28
c0014c73:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c77:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c7e:	50                   	push   eax
c0014c7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c83:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c87:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c89:	6b c0 28             	imul   eax,eax,0x28
c0014c8c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c90:	89 d0                	mov    eax,edx
c0014c92:	31 d2                	xor    edx,edx
c0014c94:	52                   	push   edx
c0014c95:	50                   	push   eax
c0014c96:	53                   	push   ebx
c0014c97:	e8 2a 6f ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014c9c:	83 c4 0c             	add    esp,0xc
c0014c9f:	6a 20                	push   0x20
c0014ca1:	6a 00                	push   0x0
c0014ca3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ca7:	52                   	push   edx
c0014ca8:	e8 43 b8 fe ff       	call   c00004f0 <memset>
c0014cad:	58                   	pop    eax
c0014cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cb0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cb4:	51                   	push   ecx
c0014cb5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014cb9:	52                   	push   edx
c0014cba:	6a 00                	push   0x0
c0014cbc:	6a 1f                	push   0x1f
c0014cbe:	53                   	push   ebx
c0014cbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cc2:	83 c4 18             	add    esp,0x18
c0014cc5:	68 cd 26 02 c0       	push   0xc00226cd
c0014cca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cce:	52                   	push   edx
c0014ccf:	e8 7c ba fe ff       	call   c0000750 <strcmp>
c0014cd4:	83 c4 10             	add    esp,0x10
c0014cd7:	85 c0                	test   eax,eax
c0014cd9:	75 0f                	jne    c0014cea <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014cdb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ce2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cea:	50                   	push   eax
c0014ceb:	50                   	push   eax
c0014cec:	68 d5 26 02 c0       	push   0xc00226d5
c0014cf1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014cf5:	50                   	push   eax
c0014cf6:	e8 55 ba fe ff       	call   c0000750 <strcmp>
c0014cfb:	83 c4 10             	add    esp,0x10
c0014cfe:	85 c0                	test   eax,eax
c0014d00:	75 0f                	jne    c0014d11 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d11:	45                   	inc    ebp
c0014d12:	e9 4c ff ff ff       	jmp    c0014c63 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d17:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d1c:	75 10                	jne    c0014d2e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d1e:	83 ec 0c             	sub    esp,0xc
c0014d21:	68 dd 26 02 c0       	push   0xc00226dd
c0014d26:	e8 90 c8 ff ff       	call   c00115bb <KePanic(char const*)>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d33:	75 10                	jne    c0014d45 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d35:	83 ec 0c             	sub    esp,0xc
c0014d38:	68 dd 26 02 c0       	push   0xc00226dd
c0014d3d:	e8 79 c8 ff ff       	call   c00115bb <KePanic(char const*)>
c0014d42:	83 c4 10             	add    esp,0x10
c0014d45:	31 d2                	xor    edx,edx
c0014d47:	50                   	push   eax
c0014d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d4c:	52                   	push   edx
c0014d4d:	50                   	push   eax
c0014d4e:	53                   	push   ebx
c0014d4f:	e8 72 6e ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014d54:	5a                   	pop    edx
c0014d55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d59:	e8 58 2d ff ff       	call   c0007ab6 <malloc>
c0014d5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014d62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d66:	31 c9                	xor    ecx,ecx
c0014d68:	5e                   	pop    esi
c0014d69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d6b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014d6f:	55                   	push   ebp
c0014d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d74:	51                   	push   ecx
c0014d75:	52                   	push   edx
c0014d76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014d7a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014d7e:	53                   	push   ebx
c0014d7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d82:	83 c4 14             	add    esp,0x14
c0014d85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d89:	e8 28 2d ff ff       	call   c0007ab6 <malloc>
c0014d8e:	89 c6                	mov    esi,eax
c0014d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d92:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d95:	56                   	push   esi
c0014d96:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d9a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d9e:	51                   	push   ecx
c0014d9f:	52                   	push   edx
c0014da0:	53                   	push   ebx
c0014da1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014da4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014da8:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014dae:	83 c4 1c             	add    esp,0x1c
c0014db1:	c1 e8 04             	shr    eax,0x4
c0014db4:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014dbf:	31 d2                	xor    edx,edx
c0014dc1:	52                   	push   edx
c0014dc2:	50                   	push   eax
c0014dc3:	53                   	push   ebx
c0014dc4:	e8 fd 6d ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014dc9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014dcb:	31 d2                	xor    edx,edx
c0014dcd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014dd0:	56                   	push   esi
c0014dd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dd5:	52                   	push   edx
c0014dd6:	50                   	push   eax
c0014dd7:	53                   	push   ebx
c0014dd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ddb:	83 c4 14             	add    esp,0x14
c0014dde:	53                   	push   ebx
c0014ddf:	e8 82 6d ff ff       	call   c000bb66 <File::close()>
c0014de4:	5d                   	pop    ebp
c0014de5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014de9:	e8 d8 2c ff ff       	call   c0007ac6 <free>
c0014dee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014df1:	e8 d0 2c ff ff       	call   c0007ac6 <free>
c0014df6:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014dff:	8d 50 01             	lea    edx,[eax+0x1]
c0014e02:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e09:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e10:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e16:	83 c4 10             	add    esp,0x10
c0014e19:	b0 01                	mov    al,0x1
c0014e1b:	83 c4 5c             	add    esp,0x5c
c0014e1e:	5b                   	pop    ebx
c0014e1f:	5e                   	pop    esi
c0014e20:	5f                   	pop    edi
c0014e21:	5d                   	pop    ebp
c0014e22:	c3                   	ret    

c0014e23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e23:	55                   	push   ebp
c0014e24:	57                   	push   edi
c0014e25:	56                   	push   esi
c0014e26:	53                   	push   ebx
c0014e27:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e2d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e34:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014e3a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014e3e:	68 14 01 00 00       	push   0x114
c0014e43:	e8 6e 2c ff ff       	call   c0007ab6 <malloc>
c0014e48:	83 c4 0c             	add    esp,0xc
c0014e4b:	89 c5                	mov    ebp,eax
c0014e4d:	53                   	push   ebx
c0014e4e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e55:	50                   	push   eax
c0014e56:	e8 8f 6c ff ff       	call   c000baea <File::File(char const*, Process*)>
c0014e5b:	5e                   	pop    esi
c0014e5c:	5f                   	pop    edi
c0014e5d:	6a 01                	push   0x1
c0014e5f:	55                   	push   ebp
c0014e60:	e8 a3 6c ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	85 c0                	test   eax,eax
c0014e6a:	0f 85 aa 06 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014e70:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014e78:	83 ec 0c             	sub    esp,0xc
c0014e7b:	6a 34                	push   0x34
c0014e7d:	e8 34 2c ff ff       	call   c0007ab6 <malloc>
c0014e82:	5b                   	pop    ebx
c0014e83:	89 c7                	mov    edi,eax
c0014e85:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014e89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e8c:	53                   	push   ebx
c0014e8d:	57                   	push   edi
c0014e8e:	6a 00                	push   0x0
c0014e90:	6a 34                	push   0x34
c0014e92:	55                   	push   ebp
c0014e93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e96:	83 c4 20             	add    esp,0x20
c0014e99:	85 c0                	test   eax,eax
c0014e9b:	0f 85 79 06 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ea1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ea7:	0f 85 6d 06 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ead:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014eb0:	85 c0                	test   eax,eax
c0014eb2:	0f 84 62 06 00 00    	je     c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014eb8:	31 d2                	xor    edx,edx
c0014eba:	51                   	push   ecx
c0014ebb:	52                   	push   edx
c0014ebc:	50                   	push   eax
c0014ebd:	55                   	push   ebp
c0014ebe:	e8 03 6d ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014ec3:	83 c4 10             	add    esp,0x10
c0014ec6:	85 c0                	test   eax,eax
c0014ec8:	0f 85 4c 06 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014ed4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ed8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014edc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ee0:	0f af c2             	imul   eax,edx
c0014ee3:	50                   	push   eax
c0014ee4:	e8 cd 2b ff ff       	call   c0007ab6 <malloc>
c0014ee9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ef7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014efb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014eff:	0f af c2             	imul   eax,edx
c0014f02:	99                   	cdq    
c0014f03:	52                   	push   edx
c0014f04:	50                   	push   eax
c0014f05:	55                   	push   ebp
c0014f06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f09:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f0c:	83 c4 20             	add    esp,0x20
c0014f0f:	85 c0                	test   eax,eax
c0014f11:	0f 84 03 06 00 00    	je     c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f17:	52                   	push   edx
c0014f18:	31 d2                	xor    edx,edx
c0014f1a:	52                   	push   edx
c0014f1b:	50                   	push   eax
c0014f1c:	55                   	push   ebp
c0014f1d:	e8 a4 6c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	85 c0                	test   eax,eax
c0014f27:	0f 85 ed 05 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f2d:	83 ec 0c             	sub    esp,0xc
c0014f30:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f34:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f38:	31 f6                	xor    esi,esi
c0014f3a:	0f af c2             	imul   eax,edx
c0014f3d:	50                   	push   eax
c0014f3e:	e8 73 2b ff ff       	call   c0007ab6 <malloc>
c0014f43:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f51:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f55:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f59:	0f af c2             	imul   eax,edx
c0014f5c:	99                   	cdq    
c0014f5d:	52                   	push   edx
c0014f5e:	50                   	push   eax
c0014f5f:	55                   	push   ebp
c0014f60:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f63:	83 c4 20             	add    esp,0x20
c0014f66:	0f b7 de             	movzx  ebx,si
c0014f69:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014f6d:	0f 83 87 00 00 00    	jae    c0014ffa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014f73:	c1 e3 05             	shl    ebx,0x5
c0014f76:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014f7a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014f7d:	75 75                	jne    c0014ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014f7f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014f82:	31 d2                	xor    edx,edx
c0014f84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f88:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f8f:	50                   	push   eax
c0014f90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014f93:	52                   	push   edx
c0014f94:	50                   	push   eax
c0014f95:	55                   	push   ebp
c0014f96:	e8 2b 6c ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	85 c0                	test   eax,eax
c0014fa0:	0f 85 74 05 00 00    	jne    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fa6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014fad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fb0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014fb4:	31 d2                	xor    edx,edx
c0014fb6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014fba:	83 ec 0c             	sub    esp,0xc
c0014fbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fc1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014fc8:	50                   	push   eax
c0014fc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd1:	52                   	push   edx
c0014fd2:	50                   	push   eax
c0014fd3:	55                   	push   ebp
c0014fd4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fd7:	83 c4 1c             	add    esp,0x1c
c0014fda:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014fdd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014fe0:	50                   	push   eax
c0014fe1:	6a 00                	push   0x0
c0014fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014feb:	50                   	push   eax
c0014fec:	e8 ff b4 fe ff       	call   c00004f0 <memset>
c0014ff1:	83 c4 10             	add    esp,0x10
c0014ff4:	46                   	inc    esi
c0014ff5:	e9 6c ff ff ff       	jmp    c0014f66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014ffa:	53                   	push   ebx
c0014ffb:	31 db                	xor    ebx,ebx
c0014ffd:	68 00 01 00 00       	push   0x100
c0015002:	6a 00                	push   0x0
c0015004:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015008:	50                   	push   eax
c0015009:	e8 e2 b4 fe ff       	call   c00004f0 <memset>
c001500e:	83 c4 0c             	add    esp,0xc
c0015011:	68 00 01 00 00       	push   0x100
c0015016:	6a 00                	push   0x0
c0015018:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001501f:	50                   	push   eax
c0015020:	e8 cb b4 fe ff       	call   c00004f0 <memset>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015030:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015038:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015040:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015048:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015050:	0f b7 f3             	movzx  esi,bx
c0015053:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015057:	0f 83 2d 01 00 00    	jae    c001518a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001505d:	6b f6 28             	imul   esi,esi,0x28
c0015060:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015064:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001506b:	52                   	push   edx
c001506c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015070:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015074:	8b 06                	mov    eax,DWORD PTR [esi]
c0015076:	6b d2 28             	imul   edx,edx,0x28
c0015079:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001507d:	31 d2                	xor    edx,edx
c001507f:	52                   	push   edx
c0015080:	50                   	push   eax
c0015081:	55                   	push   ebp
c0015082:	e8 3f 6b ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0015087:	83 c4 0c             	add    esp,0xc
c001508a:	6a 20                	push   0x20
c001508c:	6a 00                	push   0x0
c001508e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015095:	51                   	push   ecx
c0015096:	e8 55 b4 fe ff       	call   c00004f0 <memset>
c001509b:	59                   	pop    ecx
c001509c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001509f:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150a3:	52                   	push   edx
c00150a4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150ab:	51                   	push   ecx
c00150ac:	6a 00                	push   0x0
c00150ae:	6a 1f                	push   0x1f
c00150b0:	55                   	push   ebp
c00150b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150b4:	83 c4 1c             	add    esp,0x1c
c00150b7:	6a 09                	push   0x9
c00150b9:	68 f7 26 02 c0       	push   0xc00226f7
c00150be:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150c5:	51                   	push   ecx
c00150c6:	e8 b5 b2 fe ff       	call   c0000380 <memcmp>
c00150cb:	83 c4 10             	add    esp,0x10
c00150ce:	85 c0                	test   eax,eax
c00150d0:	75 21                	jne    c00150f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00150d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00150d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150da:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00150de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00150e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00150e5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00150ec:	89 d0                	mov    eax,edx
c00150ee:	40                   	inc    eax
c00150ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150f3:	50                   	push   eax
c00150f4:	6a 09                	push   0x9
c00150f6:	68 01 27 02 c0       	push   0xc0022701
c00150fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015102:	50                   	push   eax
c0015103:	e8 78 b2 fe ff       	call   c0000380 <memcmp>
c0015108:	83 c4 10             	add    esp,0x10
c001510b:	85 c0                	test   eax,eax
c001510d:	75 21                	jne    c0015130 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001510f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015113:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015117:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001511b:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001511f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015122:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015129:	89 d0                	mov    eax,edx
c001512b:	40                   	inc    eax
c001512c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015130:	50                   	push   eax
c0015131:	50                   	push   eax
c0015132:	68 cd 26 02 c0       	push   0xc00226cd
c0015137:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001513e:	50                   	push   eax
c001513f:	e8 0c b6 fe ff       	call   c0000750 <strcmp>
c0015144:	83 c4 10             	add    esp,0x10
c0015147:	85 c0                	test   eax,eax
c0015149:	75 0f                	jne    c001515a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001514b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001514e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015152:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015156:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001515a:	50                   	push   eax
c001515b:	50                   	push   eax
c001515c:	68 d5 26 02 c0       	push   0xc00226d5
c0015161:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015168:	50                   	push   eax
c0015169:	e8 e2 b5 fe ff       	call   c0000750 <strcmp>
c001516e:	83 c4 10             	add    esp,0x10
c0015171:	85 c0                	test   eax,eax
c0015173:	75 0f                	jne    c0015184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015178:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001517c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015184:	43                   	inc    ebx
c0015185:	e9 c6 fe ff ff       	jmp    c0015050 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001518a:	31 d2                	xor    edx,edx
c001518c:	50                   	push   eax
c001518d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015191:	52                   	push   edx
c0015192:	50                   	push   eax
c0015193:	55                   	push   ebp
c0015194:	e8 2d 6a ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c0015199:	58                   	pop    eax
c001519a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001519e:	e8 13 29 ff ff       	call   c0007ab6 <malloc>
c00151a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151aa:	31 d2                	xor    edx,edx
c00151ac:	58                   	pop    eax
c00151ad:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00151b1:	53                   	push   ebx
c00151b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00151b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151ba:	52                   	push   edx
c00151bb:	50                   	push   eax
c00151bc:	55                   	push   ebp
c00151bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151c0:	83 c4 14             	add    esp,0x14
c00151c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151c7:	e8 ea 28 ff ff       	call   c0007ab6 <malloc>
c00151cc:	31 d2                	xor    edx,edx
c00151ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00151d2:	83 c4 0c             	add    esp,0xc
c00151d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151d9:	52                   	push   edx
c00151da:	50                   	push   eax
c00151db:	55                   	push   ebp
c00151dc:	e8 e5 69 ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c00151e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151e4:	31 d2                	xor    edx,edx
c00151e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151f1:	52                   	push   edx
c00151f2:	50                   	push   eax
c00151f3:	55                   	push   ebp
c00151f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151f7:	83 c4 20             	add    esp,0x20
c00151fa:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00151ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015207:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001520b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001520f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015213:	0f 84 05 03 00 00    	je     c001551e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015219:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015220:	31 d2                	xor    edx,edx
c0015222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015226:	c1 e8 03             	shr    eax,0x3
c0015229:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001522d:	51                   	push   ecx
c001522e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015232:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015236:	52                   	push   edx
c0015237:	50                   	push   eax
c0015238:	55                   	push   ebp
c0015239:	e8 88 69 ff ff       	call   c000bbc6 <File::seek(unsigned long long)>
c001523e:	5b                   	pop    ebx
c001523f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015243:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001524a:	e8 67 28 ff ff       	call   c0007ab6 <malloc>
c001524f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015256:	31 d2                	xor    edx,edx
c0015258:	5e                   	pop    esi
c0015259:	8d 44 24 58          	lea    eax,[esp+0x58]
c001525d:	50                   	push   eax
c001525e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015262:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015266:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001526d:	52                   	push   edx
c001526e:	50                   	push   eax
c001526f:	55                   	push   ebp
c0015270:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015273:	83 c4 20             	add    esp,0x20
c0015276:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001527e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015282:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015286:	0f 8d 76 02 00 00    	jge    c0015502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001528c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015294:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015299:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001529c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152a4:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00152a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152ac:	c1 e8 08             	shr    eax,0x8
c00152af:	89 c6                	mov    esi,eax
c00152b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152b5:	c1 e6 04             	shl    esi,0x4
c00152b8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00152bc:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00152bf:	85 db                	test   ebx,ebx
c00152c1:	0f 85 b3 00 00 00    	jne    c001537a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00152c7:	83 ec 0c             	sub    esp,0xc
c00152ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152ce:	03 06                	add    eax,DWORD PTR [esi]
c00152d0:	50                   	push   eax
c00152d1:	e8 40 f8 ff ff       	call   c0014b16 <Thr::getAddressOfKernelSymbol(char const*)>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	89 c3                	mov    ebx,eax
c00152db:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00152e0:	85 c0                	test   eax,eax
c00152e2:	0f 85 92 00 00 00    	jne    c001537a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00152e8:	83 ec 0c             	sub    esp,0xc
c00152eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152ef:	03 06                	add    eax,DWORD PTR [esi]
c00152f1:	50                   	push   eax
c00152f2:	e8 b1 c4 ff ff       	call   c00117a8 <KeResolveCompatibilitySymbol(char*)>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	89 c3                	mov    ebx,eax
c00152fc:	85 c0                	test   eax,eax
c00152fe:	75 7a                	jne    c001537a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015300:	51                   	push   ecx
c0015301:	51                   	push   ecx
c0015302:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015306:	03 06                	add    eax,DWORD PTR [esi]
c0015308:	50                   	push   eax
c0015309:	68 0b 27 02 c0       	push   0xc002270b
c001530e:	e8 32 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015313:	58                   	pop    eax
c0015314:	5a                   	pop    edx
c0015315:	68 25 27 02 c0       	push   0xc0022725
c001531a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015321:	50                   	push   eax
c0015322:	e8 19 b3 fe ff       	call   c0000640 <strcpy>
c0015327:	59                   	pop    ecx
c0015328:	58                   	pop    eax
c0015329:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001532d:	03 06                	add    eax,DWORD PTR [esi]
c001532f:	50                   	push   eax
c0015330:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015337:	50                   	push   eax
c0015338:	e8 03 b5 fe ff       	call   c0000840 <strcat>
c001533d:	58                   	pop    eax
c001533e:	5a                   	pop    edx
c001533f:	68 bb 27 02 c0       	push   0xc00227bb
c0015344:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001534b:	50                   	push   eax
c001534c:	e8 ef b4 fe ff       	call   c0000840 <strcat>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015359:	0f 84 5d 01 00 00    	je     c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001535f:	83 ec 0c             	sub    esp,0xc
c0015362:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015369:	50                   	push   eax
c001536a:	e8 4c c2 ff ff       	call   c00115bb <KePanic(char const*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015376:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001537a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001537f:	83 f8 01             	cmp    eax,0x1
c0015382:	0f 85 8f 00 00 00    	jne    c0015417 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015388:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001538f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015393:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015397:	01 ce                	add    esi,ecx
c0015399:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00153a1:	0f 94 c0             	sete   al
c00153a4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00153ac:	0f 94 c2             	sete   dl
c00153af:	09 c2                	or     edx,eax
c00153b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00153b3:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00153b8:	0f b6 d2             	movzx  edx,dl
c00153bb:	74 41                	je     c00153fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00153bd:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00153c0:	85 d2                	test   edx,edx
c00153c2:	75 15                	jne    c00153d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00153c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00153c8:	66 83 f8 0c          	cmp    ax,0xc
c00153cc:	76 05                	jbe    c00153d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00153ce:	b8 0c 00 00 00       	mov    eax,0xc
c00153d3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00153d7:	76 37                	jbe    c0015410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00153d9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00153dd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00153e2:	0f 84 d4 00 00 00    	je     c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00153e8:	83 ec 0c             	sub    esp,0xc
c00153eb:	68 3c 27 02 c0       	push   0xc002273c
c00153f0:	e8 c6 c1 ff ff       	call   c00115bb <KePanic(char const*)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00153fc:	eb 12                	jmp    c0015410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00153fe:	01 c1                	add    ecx,eax
c0015400:	85 d2                	test   edx,edx
c0015402:	75 0c                	jne    c0015410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015404:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015408:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001540c:	77 02                	ja     c0015410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001540e:	01 d9                	add    ecx,ebx
c0015410:	89 0e                	mov    DWORD PTR [esi],ecx
c0015412:	e9 e2 00 00 00       	jmp    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015417:	83 f8 02             	cmp    eax,0x2
c001541a:	75 77                	jne    c0015493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001541c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015423:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015427:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001542b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015433:	74 21                	je     c0015456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015435:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001543d:	74 17                	je     c0015456 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001543f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015443:	b8 0a 00 00 00       	mov    eax,0xa
c0015448:	83 fa 0e             	cmp    edx,0xe
c001544b:	77 03                	ja     c0015450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001544d:	8d 42 fc             	lea    eax,[edx-0x4]
c0015450:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015454:	76 17                	jbe    c001546d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015456:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001545b:	74 5f                	je     c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001545d:	83 ec 0c             	sub    esp,0xc
c0015460:	68 58 27 02 c0       	push   0xc0022758
c0015465:	e8 51 c1 ff ff       	call   c00115bb <KePanic(char const*)>
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	8b 06                	mov    eax,DWORD PTR [esi]
c001546f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015474:	74 13                	je     c0015489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001547a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015481:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015485:	01 d0                	add    eax,edx
c0015487:	eb 04                	jmp    c001548d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015489:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001548d:	01 c3                	add    ebx,eax
c001548f:	89 1e                	mov    DWORD PTR [esi],ebx
c0015491:	eb 66                	jmp    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015493:	52                   	push   edx
c0015494:	52                   	push   edx
c0015495:	50                   	push   eax
c0015496:	68 74 27 02 c0       	push   0xc0022774
c001549b:	e8 a5 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154a8:	74 12                	je     c00154bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154aa:	83 ec 0c             	sub    esp,0xc
c00154ad:	68 7f 27 02 c0       	push   0xc002277f
c00154b2:	e8 04 c1 ff ff       	call   c00115bb <KePanic(char const*)>
c00154b7:	83 c4 10             	add    esp,0x10
c00154ba:	eb 3d                	jmp    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	55                   	push   ebp
c00154c0:	e8 a1 66 ff ff       	call   c000bb66 <File::close()>
c00154c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00154c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154ce:	59                   	pop    ecx
c00154cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154d3:	e8 ee 25 ff ff       	call   c0007ac6 <free>
c00154d8:	5b                   	pop    ebx
c00154d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154dd:	e8 e4 25 ff ff       	call   c0007ac6 <free>
c00154e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154e5:	e8 dc 25 ff ff       	call   c0007ac6 <free>
c00154ea:	5e                   	pop    esi
c00154eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154ef:	e8 d2 25 ff ff       	call   c0007ac6 <free>
c00154f4:	83 c4 10             	add    esp,0x10
c00154f7:	eb 21                	jmp    c001551a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00154f9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00154fd:	e9 7c fd ff ff       	jmp    c001527e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015502:	83 ec 0c             	sub    esp,0xc
c0015505:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015509:	e8 b8 25 ff ff       	call   c0007ac6 <free>
c001550e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	e9 f1 fc ff ff       	jmp    c001520b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001551a:	31 c0                	xor    eax,eax
c001551c:	eb 33                	jmp    c0015551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001551e:	83 ec 0c             	sub    esp,0xc
c0015521:	55                   	push   ebp
c0015522:	e8 3f 66 ff ff       	call   c000bb66 <File::close()>
c0015527:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001552a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001552d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015530:	58                   	pop    eax
c0015531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015535:	e8 8c 25 ff ff       	call   c0007ac6 <free>
c001553a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001553d:	e8 84 25 ff ff       	call   c0007ac6 <free>
c0015542:	5a                   	pop    edx
c0015543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015547:	e8 7a 25 ff ff       	call   c0007ac6 <free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 01                	mov    al,0x1
c0015551:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015557:	5b                   	pop    ebx
c0015558:	5e                   	pop    esi
c0015559:	5f                   	pop    edi
c001555a:	5d                   	pop    ebp
c001555b:	c3                   	ret    

c001555c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001555c:	56                   	push   esi
c001555d:	31 d2                	xor    edx,edx
c001555f:	53                   	push   ebx
c0015560:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001556a:	39 d3                	cmp    ebx,edx
c001556c:	7e 1b                	jle    c0015589 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001556e:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015575:	39 c8                	cmp    eax,ecx
c0015577:	77 0d                	ja     c0015586 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015579:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015580:	01 c6                	add    esi,eax
c0015582:	39 ce                	cmp    esi,ecx
c0015584:	77 05                	ja     c001558b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015586:	42                   	inc    edx
c0015587:	eb e1                	jmp    c001556a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015589:	31 c0                	xor    eax,eax
c001558b:	5b                   	pop    ebx
c001558c:	5e                   	pop    esi
c001558d:	c3                   	ret    

c001558e <Thr::getDriverNameFromAddress(unsigned long)>:
c001558e:	53                   	push   ebx
c001558f:	31 c0                	xor    eax,eax
c0015591:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015595:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001559b:	39 c3                	cmp    ebx,eax
c001559d:	7e 22                	jle    c00155c1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001559f:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155a6:	39 ca                	cmp    edx,ecx
c00155a8:	77 14                	ja     c00155be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155aa:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00155b1:	39 ca                	cmp    edx,ecx
c00155b3:	76 09                	jbe    c00155be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155b5:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00155bc:	eb 05                	jmp    c00155c3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00155be:	40                   	inc    eax
c00155bf:	eb da                	jmp    c001559b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00155c1:	31 c0                	xor    eax,eax
c00155c3:	5b                   	pop    ebx
c00155c4:	c3                   	ret    

c00155c5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00155c5:	53                   	push   ebx
c00155c6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155ca:	53                   	push   ebx
c00155cb:	e8 8c ff ff ff       	call   c001555c <Thr::getDriverBaseFromAddress(unsigned long)>
c00155d0:	5a                   	pop    edx
c00155d1:	31 d2                	xor    edx,edx
c00155d3:	85 c0                	test   eax,eax
c00155d5:	74 04                	je     c00155db <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00155d7:	89 da                	mov    edx,ebx
c00155d9:	29 c2                	sub    edx,eax
c00155db:	89 d0                	mov    eax,edx
c00155dd:	5b                   	pop    ebx
c00155de:	c3                   	ret    

c00155df <Thr::loadDLL(char const*, bool)>:
c00155df:	55                   	push   ebp
c00155e0:	57                   	push   edi
c00155e1:	56                   	push   esi
c00155e2:	53                   	push   ebx
c00155e3:	81 ec 34 01 00 00    	sub    esp,0x134
c00155e9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00155f0:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00155f7:	56                   	push   esi
c00155f8:	68 97 27 02 c0       	push   0xc0022797
c00155fd:	e8 43 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015602:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015609:	e8 a8 24 ff ff       	call   c0007ab6 <malloc>
c001560e:	83 c4 0c             	add    esp,0xc
c0015611:	89 c3                	mov    ebx,eax
c0015613:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015619:	56                   	push   esi
c001561a:	50                   	push   eax
c001561b:	e8 ca 64 ff ff       	call   c000baea <File::File(char const*, Process*)>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	85 db                	test   ebx,ebx
c0015625:	75 3c                	jne    c0015663 <Thr::loadDLL(char const*, bool)+0x84>
c0015627:	89 f8                	mov    eax,edi
c0015629:	84 c0                	test   al,al
c001562b:	0f 84 d2 01 00 00    	je     c0015803 <Thr::loadDLL(char const*, bool)+0x224>
c0015631:	55                   	push   ebp
c0015632:	55                   	push   ebp
c0015633:	68 a8 27 02 c0       	push   0xc00227a8
c0015638:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001563c:	55                   	push   ebp
c001563d:	e8 fe af fe ff       	call   c0000640 <strcpy>
c0015642:	58                   	pop    eax
c0015643:	5a                   	pop    edx
c0015644:	56                   	push   esi
c0015645:	55                   	push   ebp
c0015646:	e8 f5 b1 fe ff       	call   c0000840 <strcat>
c001564b:	59                   	pop    ecx
c001564c:	58                   	pop    eax
c001564d:	68 bb 27 02 c0       	push   0xc00227bb
c0015652:	55                   	push   ebp
c0015653:	e8 e8 b1 fe ff       	call   c0000840 <strcat>
c0015658:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001565b:	e8 5b bf ff ff       	call   c00115bb <KePanic(char const*)>
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	51                   	push   ecx
c0015664:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015668:	50                   	push   eax
c0015669:	8d 44 24 20          	lea    eax,[esp+0x20]
c001566d:	50                   	push   eax
c001566e:	53                   	push   ebx
c001566f:	e8 96 67 ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0015674:	83 c4 10             	add    esp,0x10
c0015677:	85 db                	test   ebx,ebx
c0015679:	74 0c                	je     c0015687 <Thr::loadDLL(char const*, bool)+0xa8>
c001567b:	83 ec 0c             	sub    esp,0xc
c001567e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015680:	53                   	push   ebx
c0015681:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015684:	83 c4 10             	add    esp,0x10
c0015687:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001568c:	75 0a                	jne    c0015698 <Thr::loadDLL(char const*, bool)+0xb9>
c001568e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015692:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015696:	75 3c                	jne    c00156d4 <Thr::loadDLL(char const*, bool)+0xf5>
c0015698:	89 f8                	mov    eax,edi
c001569a:	84 c0                	test   al,al
c001569c:	0f 84 49 01 00 00    	je     c00157eb <Thr::loadDLL(char const*, bool)+0x20c>
c00156a2:	51                   	push   ecx
c00156a3:	51                   	push   ecx
c00156a4:	68 a8 27 02 c0       	push   0xc00227a8
c00156a9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156ad:	53                   	push   ebx
c00156ae:	e8 8d af fe ff       	call   c0000640 <strcpy>
c00156b3:	5d                   	pop    ebp
c00156b4:	58                   	pop    eax
c00156b5:	56                   	push   esi
c00156b6:	53                   	push   ebx
c00156b7:	e8 84 b1 fe ff       	call   c0000840 <strcat>
c00156bc:	58                   	pop    eax
c00156bd:	5a                   	pop    edx
c00156be:	68 bb 27 02 c0       	push   0xc00227bb
c00156c3:	53                   	push   ebx
c00156c4:	e8 77 b1 fe ff       	call   c0000840 <strcat>
c00156c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156cc:	e8 ea be ff ff       	call   c00115bb <KePanic(char const*)>
c00156d1:	83 c4 10             	add    esp,0x10
c00156d4:	52                   	push   edx
c00156d5:	6a 03                	push   0x3
c00156d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156df:	05 ff 0f 00 00       	add    eax,0xfff
c00156e4:	83 d2 00             	adc    edx,0x0
c00156e7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00156eb:	50                   	push   eax
c00156ec:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00156f2:	e8 2d 47 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00156f7:	59                   	pop    ecx
c00156f8:	89 c3                	mov    ebx,eax
c00156fa:	5d                   	pop    ebp
c00156fb:	50                   	push   eax
c00156fc:	68 32 0d 02 c0       	push   0xc0020d32
c0015701:	e8 3f 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015706:	89 34 24             	mov    DWORD PTR [esp],esi
c0015709:	e8 62 ae fe ff       	call   c0000570 <strlen>
c001570e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015714:	40                   	inc    eax
c0015715:	89 04 24             	mov    DWORD PTR [esp],eax
c0015718:	e8 99 23 ff ff       	call   c0007ab6 <malloc>
c001571d:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015724:	58                   	pop    eax
c0015725:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001572a:	5a                   	pop    edx
c001572b:	56                   	push   esi
c001572c:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015733:	e8 08 af fe ff       	call   c0000640 <strcpy>
c0015738:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001573d:	8d 50 01             	lea    edx,[eax+0x1]
c0015740:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015747:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001574d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015751:	83 c4 0c             	add    esp,0xc
c0015754:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001575b:	6a 01                	push   0x1
c001575d:	53                   	push   ebx
c001575e:	56                   	push   esi
c001575f:	e8 bf f6 ff ff       	call   c0014e23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	0f b6 c0             	movzx  eax,al
c001576a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001576e:	85 c0                	test   eax,eax
c0015770:	0f 85 89 00 00 00    	jne    c00157ff <Thr::loadDLL(char const*, bool)+0x220>
c0015776:	89 f8                	mov    eax,edi
c0015778:	84 c0                	test   al,al
c001577a:	74 73                	je     c00157ef <Thr::loadDLL(char const*, bool)+0x210>
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	68 bd 27 02 c0       	push   0xc00227bd
c0015784:	e8 32 be ff ff       	call   c00115bb <KePanic(char const*)>
c0015789:	83 c4 10             	add    esp,0x10
c001578c:	eb 61                	jmp    c00157ef <Thr::loadDLL(char const*, bool)+0x210>
c001578e:	50                   	push   eax
c001578f:	50                   	push   eax
c0015790:	89 e8                	mov    eax,ebp
c0015792:	c1 e0 0c             	shl    eax,0xc
c0015795:	01 d8                	add    eax,ebx
c0015797:	50                   	push   eax
c0015798:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001579e:	e8 69 41 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00157a3:	83 c4 10             	add    esp,0x10
c00157a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a8:	a8 60                	test   al,0x60
c00157aa:	75 11                	jne    c00157bd <Thr::loadDLL(char const*, bool)+0x1de>
c00157ac:	83 ec 0c             	sub    esp,0xc
c00157af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157b4:	50                   	push   eax
c00157b5:	e8 9c 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	45                   	inc    ebp
c00157be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00157c6:	05 ff 0f 00 00       	add    eax,0xfff
c00157cb:	bf 00 00 00 00       	mov    edi,0x0
c00157d0:	83 d2 00             	adc    edx,0x0
c00157d3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00157d7:	c1 ea 0c             	shr    edx,0xc
c00157da:	39 c5                	cmp    ebp,eax
c00157dc:	89 d1                	mov    ecx,edx
c00157de:	89 f8                	mov    eax,edi
c00157e0:	19 c8                	sbb    eax,ecx
c00157e2:	72 aa                	jb     c001578e <Thr::loadDLL(char const*, bool)+0x1af>
c00157e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00157e9:	75 18                	jne    c0015803 <Thr::loadDLL(char const*, bool)+0x224>
c00157eb:	31 db                	xor    ebx,ebx
c00157ed:	eb 14                	jmp    c0015803 <Thr::loadDLL(char const*, bool)+0x224>
c00157ef:	83 ec 0c             	sub    esp,0xc
c00157f2:	68 dc 27 02 c0       	push   0xc00227dc
c00157f7:	e8 bf bd ff ff       	call   c00115bb <KePanic(char const*)>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	31 ed                	xor    ebp,ebp
c0015801:	eb bb                	jmp    c00157be <Thr::loadDLL(char const*, bool)+0x1df>
c0015803:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015809:	89 d8                	mov    eax,ebx
c001580b:	5b                   	pop    ebx
c001580c:	5e                   	pop    esi
c001580d:	5f                   	pop    edi
c001580e:	5d                   	pop    ebp
c001580f:	c3                   	ret    

c0015810 <Thr::executeDLL(unsigned long, void*)>:
c0015810:	56                   	push   esi
c0015811:	53                   	push   ebx
c0015812:	52                   	push   edx
c0015813:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015817:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001581b:	85 db                	test   ebx,ebx
c001581d:	75 10                	jne    c001582f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	68 f8 27 02 c0       	push   0xc00227f8
c0015827:	e8 8f bd ff ff       	call   c00115bb <KePanic(char const*)>
c001582c:	83 c4 10             	add    esp,0x10
c001582f:	50                   	push   eax
c0015830:	50                   	push   eax
c0015831:	53                   	push   ebx
c0015832:	68 22 28 02 c0       	push   0xc0022822
c0015837:	e8 09 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001583c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015840:	89 d8                	mov    eax,ebx
c0015842:	83 c4 14             	add    esp,0x14
c0015845:	5b                   	pop    ebx
c0015846:	5e                   	pop    esi
c0015847:	ff e0                	jmp    eax
c0015849:	66 90                	xchg   ax,ax
c001584b:	90                   	nop

c001584c <userModeEntryPoint(void*)>:
c001584c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015851:	83 e8 01             	sub    eax,0x1
c0015854:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015859:	75 01                	jne    c001585c <userModeEntryPoint(void*)+0x10>
c001585b:	fb                   	sti    
c001585c:	fb                   	sti    
c001585d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015862:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015865:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001586b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001586f:	e9 cb a9 fe ff       	jmp    c000023f <goToUsermode>

c0015874 <changeTSS>:
c0015874:	83 ec 14             	sub    esp,0x14
c0015877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001587c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015884:	c1 e2 15             	shl    edx,0x15
c0015887:	29 d0                	sub    eax,edx
c0015889:	50                   	push   eax
c001588a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001588f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015895:	05 7c 11 00 00       	add    eax,0x117c
c001589a:	50                   	push   eax
c001589b:	e8 b4 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00158a0:	83 c4 1c             	add    esp,0x1c
c00158a3:	c3                   	ret    

c00158a4 <switchToThread(ThreadControlBlock*)>:
c00158a4:	57                   	push   edi
c00158a5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158ab:	56                   	push   esi
c00158ac:	85 c9                	test   ecx,ecx
c00158ae:	53                   	push   ebx
c00158af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158b3:	0f 85 8b 00 00 00    	jne    c0015944 <switchToThread(ThreadControlBlock*)+0xa0>
c00158b9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00158bd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00158c3:	74 7b                	je     c0015940 <switchToThread(ThreadControlBlock*)+0x9c>
c00158c5:	b8 00 04 00 00       	mov    eax,0x400
c00158ca:	29 d0                	sub    eax,edx
c00158cc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00158cf:	d1 f8                	sar    eax,1
c00158d1:	01 d0                	add    eax,edx
c00158d3:	90                   	nop
c00158d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00158d7:	e8 1e 28 00 00       	call   c00180fa <HalQueryPerformanceCounter()>
c00158dc:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c00158e1:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c00158e7:	89 c6                	mov    esi,eax
c00158e9:	89 d7                	mov    edi,edx
c00158eb:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c00158f1:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c00158f6:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c00158fc:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015902:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015908:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001590e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015914:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015917:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001591a:	01 c6                	add    esi,eax
c001591c:	11 d7                	adc    edi,edx
c001591e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015921:	83 ec 0c             	sub    esp,0xc
c0015924:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015927:	53                   	push   ebx
c0015928:	e8 4a a9 fe ff       	call   c0000277 <switchToThreadASM>
c001592d:	0f 20 c0             	mov    eax,cr0
c0015930:	83 c8 08             	or     eax,0x8
c0015933:	0f 22 c0             	mov    cr0,eax
c0015936:	83 c4 10             	add    esp,0x10
c0015939:	5b                   	pop    ebx
c001593a:	5e                   	pop    esi
c001593b:	5f                   	pop    edi
c001593c:	c3                   	ret    
c001593d:	8d 76 00             	lea    esi,[esi+0x0]
c0015940:	31 c0                	xor    eax,eax
c0015942:	eb 90                	jmp    c00158d4 <switchToThread(ThreadControlBlock*)+0x30>
c0015944:	5b                   	pop    ebx
c0015945:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001594f:	5e                   	pop    esi
c0015950:	5f                   	pop    edi
c0015951:	c3                   	ret    
c0015952:	66 90                	xchg   ax,ax

c0015954 <Process::addArgs(char**)>:
c0015954:	57                   	push   edi
c0015955:	56                   	push   esi
c0015956:	53                   	push   ebx
c0015957:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001595b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001595f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015969:	85 ff                	test   edi,edi
c001596b:	74 4f                	je     c00159bc <Process::addArgs(char**)+0x68>
c001596d:	8b 07                	mov    eax,DWORD PTR [edi]
c001596f:	85 c0                	test   eax,eax
c0015971:	74 49                	je     c00159bc <Process::addArgs(char**)+0x68>
c0015973:	31 db                	xor    ebx,ebx
c0015975:	8d 76 00             	lea    esi,[esi+0x0]
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	50                   	push   eax
c001597c:	e8 ef ab fe ff       	call   c0000570 <strlen>
c0015981:	83 c0 01             	add    eax,0x1
c0015984:	89 04 24             	mov    DWORD PTR [esp],eax
c0015987:	e8 2a 21 ff ff       	call   c0007ab6 <malloc>
c001598c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015993:	5a                   	pop    edx
c0015994:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015997:	59                   	pop    ecx
c0015998:	83 c3 01             	add    ebx,0x1
c001599b:	52                   	push   edx
c001599c:	50                   	push   eax
c001599d:	e8 9e ac fe ff       	call   c0000640 <strcpy>
c00159a2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	83 c1 01             	add    ecx,0x1
c00159ae:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00159b4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00159b7:	85 c0                	test   eax,eax
c00159b9:	75 bd                	jne    c0015978 <Process::addArgs(char**)+0x24>
c00159bb:	90                   	nop
c00159bc:	5b                   	pop    ebx
c00159bd:	5e                   	pop    esi
c00159be:	5f                   	pop    edi
c00159bf:	c3                   	ret    

c00159c0 <Process::Process(char const*, Process*, char**)>:
c00159c0:	56                   	push   esi
c00159c1:	53                   	push   ebx
c00159c2:	83 ec 14             	sub    esp,0x14
c00159c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159c9:	05 0c 02 00 00       	add    eax,0x20c
c00159ce:	bb 07 00 00 00       	mov    ebx,0x7
c00159d3:	89 c6                	mov    esi,eax
c00159d5:	8d 76 00             	lea    esi,[esi+0x0]
c00159d8:	85 db                	test   ebx,ebx
c00159da:	78 14                	js     c00159f0 <Process::Process(char const*, Process*, char**)+0x30>
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	56                   	push   esi
c00159e0:	e8 e3 a5 00 00       	call   c001ffc8 <ThreadControlBlock::ThreadControlBlock()>
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	83 c6 5f             	add    esi,0x5f
c00159eb:	83 eb 01             	sub    ebx,0x1
c00159ee:	eb e8                	jmp    c00159d8 <Process::Process(char const*, Process*, char**)+0x18>
c00159f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159f4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159ff:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a06:	83 ec 0c             	sub    esp,0xc
c0015a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a0d:	e8 9e b9 ff ff       	call   c00113b0 <KeNewProcessEnv(Process*)>
c0015a12:	83 c4 10             	add    esp,0x10
c0015a15:	89 c2                	mov    edx,eax
c0015a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a1b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a25:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a2e:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0015a33:	8d 50 01             	lea    edx,[eax+0x1]
c0015a36:	89 15 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,edx
c0015a3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a40:	89 02                	mov    DWORD PTR [edx],eax
c0015a42:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a51:	e8 60 20 ff ff       	call   c0007ab6 <malloc>
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	89 c3                	mov    ebx,eax
c0015a5b:	83 ec 08             	sub    esp,0x8
c0015a5e:	6a 00                	push   0x0
c0015a60:	53                   	push   ebx
c0015a61:	e8 02 46 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a77:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a89:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a8f:	e8 42 bf ff ff       	call   c00119d6 <KeInitSignals()>
c0015a94:	89 c2                	mov    edx,eax
c0015a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aaa:	85 c0                	test   eax,eax
c0015aac:	74 42                	je     c0015af0 <Process::Process(char const*, Process*, char**)+0x130>
c0015aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ab8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015acc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ad2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015adc:	05 0c 01 00 00       	add    eax,0x10c
c0015ae1:	83 ec 08             	sub    esp,0x8
c0015ae4:	52                   	push   edx
c0015ae5:	50                   	push   eax
c0015ae6:	e8 55 ab fe ff       	call   c0000640 <strcpy>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	eb 64                	jmp    c0015b54 <Process::Process(char const*, Process*, char**)+0x194>
c0015af0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015aff:	e8 b2 1f ff ff       	call   c0007ab6 <malloc>
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	89 c3                	mov    ebx,eax
c0015b09:	83 ec 08             	sub    esp,0x8
c0015b0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b10:	53                   	push   ebx
c0015b11:	e8 50 31 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b2d:	83 ec 0c             	sub    esp,0xc
c0015b30:	50                   	push   eax
c0015b31:	e8 ce 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3d:	05 0c 01 00 00       	add    eax,0x10c
c0015b42:	83 ec 08             	sub    esp,0x8
c0015b45:	68 41 28 02 c0       	push   0xc0022841
c0015b4a:	50                   	push   eax
c0015b4b:	e8 f0 aa fe ff       	call   c0000640 <strcpy>
c0015b50:	83 c4 10             	add    esp,0x10
c0015b53:	90                   	nop
c0015b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b58:	83 c0 0c             	add    eax,0xc
c0015b5b:	83 ec 08             	sub    esp,0x8
c0015b5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b62:	50                   	push   eax
c0015b63:	e8 d8 aa fe ff       	call   c0000640 <strcpy>
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	83 ec 08             	sub    esp,0x8
c0015b6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b76:	e8 d9 fd ff ff       	call   c0015954 <Process::addArgs(char**)>
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	83 ec 08             	sub    esp,0x8
c0015b81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b89:	e8 63 ed ff ff       	call   c00148f1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b99:	83 f0 01             	xor    eax,0x1
c0015b9c:	88 c2                	mov    dl,al
c0015b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015ba8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015bad:	83 ec 04             	sub    esp,0x4
c0015bb0:	50                   	push   eax
c0015bb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb5:	68 98 28 02 c0       	push   0xc0022898
c0015bba:	e8 86 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015bbf:	83 c4 10             	add    esp,0x10
c0015bc2:	90                   	nop
c0015bc3:	83 c4 14             	add    esp,0x14
c0015bc6:	5b                   	pop    ebx
c0015bc7:	5e                   	pop    esi
c0015bc8:	c3                   	ret    
c0015bc9:	90                   	nop
c0015bca:	66 90                	xchg   ax,ax

c0015bcc <Process::Process(bool, char const*, Process*, char**)>:
c0015bcc:	56                   	push   esi
c0015bcd:	53                   	push   ebx
c0015bce:	83 ec 24             	sub    esp,0x24
c0015bd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015bd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bdd:	05 0c 02 00 00       	add    eax,0x20c
c0015be2:	bb 07 00 00 00       	mov    ebx,0x7
c0015be7:	89 c6                	mov    esi,eax
c0015be9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bec:	85 db                	test   ebx,ebx
c0015bee:	78 14                	js     c0015c04 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015bf0:	83 ec 0c             	sub    esp,0xc
c0015bf3:	56                   	push   esi
c0015bf4:	e8 cf a3 00 00       	call   c001ffc8 <ThreadControlBlock::ThreadControlBlock()>
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	83 c6 5f             	add    esi,0x5f
c0015bff:	83 eb 01             	sub    ebx,0x1
c0015c02:	eb e8                	jmp    c0015bec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c1a:	83 ec 0c             	sub    esp,0xc
c0015c1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c21:	e8 8a b7 ff ff       	call   c00113b0 <KeNewProcessEnv(Process*)>
c0015c26:	83 c4 10             	add    esp,0x10
c0015c29:	89 c2                	mov    edx,eax
c0015c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c2f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c39:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c42:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0015c47:	8d 50 01             	lea    edx,[eax+0x1]
c0015c4a:	89 15 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,edx
c0015c50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c54:	89 02                	mov    DWORD PTR [edx],eax
c0015c56:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015c5e:	83 ec 0c             	sub    esp,0xc
c0015c61:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c65:	e8 4c 1e ff ff       	call   c0007ab6 <malloc>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	89 c3                	mov    ebx,eax
c0015c6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c74:	83 ec 08             	sub    esp,0x8
c0015c77:	50                   	push   eax
c0015c78:	53                   	push   ebx
c0015c79:	e8 ea 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c85:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c8f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c9d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ca1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ca7:	e8 2a bd ff ff       	call   c00119d6 <KeInitSignals()>
c0015cac:	89 c2                	mov    edx,eax
c0015cae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cbc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cc2:	85 c0                	test   eax,eax
c0015cc4:	74 42                	je     c0015d08 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015cc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cd0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015cd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cda:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cf4:	05 0c 01 00 00       	add    eax,0x10c
c0015cf9:	83 ec 08             	sub    esp,0x8
c0015cfc:	52                   	push   edx
c0015cfd:	50                   	push   eax
c0015cfe:	e8 3d a9 fe ff       	call   c0000640 <strcpy>
c0015d03:	83 c4 10             	add    esp,0x10
c0015d06:	eb 64                	jmp    c0015d6c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d08:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d17:	e8 9a 1d ff ff       	call   c0007ab6 <malloc>
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	89 c3                	mov    ebx,eax
c0015d21:	83 ec 08             	sub    esp,0x8
c0015d24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d28:	53                   	push   ebx
c0015d29:	e8 38 2f ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d35:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d45:	83 ec 0c             	sub    esp,0xc
c0015d48:	50                   	push   eax
c0015d49:	e8 b6 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015d4e:	83 c4 10             	add    esp,0x10
c0015d51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d55:	05 0c 01 00 00       	add    eax,0x10c
c0015d5a:	83 ec 08             	sub    esp,0x8
c0015d5d:	68 41 28 02 c0       	push   0xc0022841
c0015d62:	50                   	push   eax
c0015d63:	e8 d8 a8 fe ff       	call   c0000640 <strcpy>
c0015d68:	83 c4 10             	add    esp,0x10
c0015d6b:	90                   	nop
c0015d6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d70:	83 c0 0c             	add    eax,0xc
c0015d73:	83 ec 08             	sub    esp,0x8
c0015d76:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d7a:	50                   	push   eax
c0015d7b:	e8 c0 a8 fe ff       	call   c0000640 <strcpy>
c0015d80:	83 c4 10             	add    esp,0x10
c0015d83:	83 ec 08             	sub    esp,0x8
c0015d86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d8e:	e8 c1 fb ff ff       	call   c0015954 <Process::addArgs(char**)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	90                   	nop
c0015d97:	83 c4 24             	add    esp,0x24
c0015d9a:	5b                   	pop    ebx
c0015d9b:	5e                   	pop    esi
c0015d9c:	c3                   	ret    
c0015d9d:	8d 76 00             	lea    esi,[esi+0x0]

c0015da0 <taskStartupFunction>:
c0015da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015da8:	c3                   	ret    
c0015da9:	90                   	nop
c0015daa:	66 90                	xchg   ax,ax

c0015dac <Semaphore::Semaphore(int)>:
c0015dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015db4:	89 10                	mov    DWORD PTR [eax],edx
c0015db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dd0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015dd7:	90                   	nop
c0015dd8:	c3                   	ret    
c0015dd9:	90                   	nop
c0015dda:	66 90                	xchg   ax,ax

c0015ddc <Mutex::Mutex()>:
c0015ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015de0:	6a 01                	push   0x1
c0015de2:	50                   	push   eax
c0015de3:	e8 c4 ff ff ff       	call   c0015dac <Semaphore::Semaphore(int)>
c0015de8:	83 c4 08             	add    esp,0x8
c0015deb:	90                   	nop
c0015dec:	c3                   	ret    
c0015ded:	90                   	nop
c0015dee:	66 90                	xchg   ax,ax

c0015df0 <Process::createThread(void (*)(void*), void*, int)>:
c0015df0:	57                   	push   edi
c0015df1:	31 c9                	xor    ecx,ecx
c0015df3:	56                   	push   esi
c0015df4:	53                   	push   ebx
c0015df5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015df9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e00:	89 f2                	mov    edx,esi
c0015e02:	66 90                	xchg   ax,ax
c0015e04:	0f b7 c2             	movzx  eax,dx
c0015e07:	80 e2 01             	and    dl,0x1
c0015e0a:	74 14                	je     c0015e20 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e0c:	d1 f8                	sar    eax,1
c0015e0e:	83 c1 01             	add    ecx,0x1
c0015e11:	89 c2                	mov    edx,eax
c0015e13:	83 f9 10             	cmp    ecx,0x10
c0015e16:	75 ec                	jne    c0015e04 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e18:	31 db                	xor    ebx,ebx
c0015e1a:	89 d8                	mov    eax,ebx
c0015e1c:	5b                   	pop    ebx
c0015e1d:	5e                   	pop    esi
c0015e1e:	5f                   	pop    edi
c0015e1f:	c3                   	ret    
c0015e20:	b8 01 00 00 00       	mov    eax,0x1
c0015e25:	d3 e0                	shl    eax,cl
c0015e27:	09 c6                	or     esi,eax
c0015e29:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e2c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e33:	01 c0                	add    eax,eax
c0015e35:	01 c8                	add    eax,ecx
c0015e37:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e3a:	01 d8                	add    eax,ebx
c0015e3c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e43:	75 0b                	jne    c0015e50 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e45:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e4f:	90                   	nop
c0015e50:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e56:	83 ec 0c             	sub    esp,0xc
c0015e59:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015e5c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e5f:	01 c0                	add    eax,eax
c0015e61:	01 c8                	add    eax,ecx
c0015e63:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015e66:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015e69:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e6f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015e75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e79:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e7f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e85:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e8b:	89 ca                	mov    edx,ecx
c0015e8d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015e94:	f7 da                	neg    edx
c0015e96:	c1 e2 15             	shl    edx,0x15
c0015e99:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e9f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ea9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015eb3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015eb9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ebd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015ec3:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015ecd:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ed7:	68 00 01 00 00       	push   0x100
c0015edc:	e8 d5 1b ff ff       	call   c0007ab6 <malloc>
c0015ee1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015ee4:	58                   	pop    eax
c0015ee5:	5a                   	pop    edx
c0015ee6:	53                   	push   ebx
c0015ee7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015eec:	e8 6f 9e 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	89 d8                	mov    eax,ebx
c0015ef6:	5b                   	pop    ebx
c0015ef7:	5e                   	pop    esi
c0015ef8:	5f                   	pop    edi
c0015ef9:	c3                   	ret    
c0015efa:	66 90                	xchg   ax,ax

c0015efc <Process::createUserThread()>:
c0015efc:	83 ec 0c             	sub    esp,0xc
c0015eff:	68 80 00 00 00       	push   0x80
c0015f04:	6a 00                	push   0x0
c0015f06:	68 4c 58 01 c0       	push   0xc001584c
c0015f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f0f:	50                   	push   eax
c0015f10:	e8 db fe ff ff       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c0015f15:	83 c4 1c             	add    esp,0x1c
c0015f18:	c3                   	ret    
c0015f19:	8d 76 00             	lea    esi,[esi+0x0]

c0015f1c <setupMultitasking(void (*)())>:
c0015f1c:	56                   	push   esi
c0015f1d:	53                   	push   ebx
c0015f1e:	83 ec 04             	sub    esp,0x4
c0015f21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f25:	eb 11                	jmp    c0015f38 <setupMultitasking(void (*)())+0x1c>
c0015f27:	90                   	nop
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f30:	e8 6f 9d 00 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f40:	e8 3b 9d 00 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	84 c0                	test   al,al
c0015f4a:	74 dc                	je     c0015f28 <setupMultitasking(void (*)())+0xc>
c0015f4c:	83 ec 0c             	sub    esp,0xc
c0015f4f:	68 24 07 00 00       	push   0x724
c0015f54:	e8 5d 1b ff ff       	call   c0007ab6 <malloc>
c0015f59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015f60:	89 c3                	mov    ebx,eax
c0015f62:	6a 00                	push   0x0
c0015f64:	68 45 28 02 c0       	push   0xc0022845
c0015f69:	6a 01                	push   0x1
c0015f6b:	50                   	push   eax
c0015f6c:	e8 5b fc ff ff       	call   c0015bcc <Process::Process(bool, char const*, Process*, char**)>
c0015f71:	83 c4 14             	add    esp,0x14
c0015f74:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f7a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f80:	50                   	push   eax
c0015f81:	e8 d3 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015f86:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f8d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f97:	83 c8 01             	or     eax,0x1
c0015f9a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015fa1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fa7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015faa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015fb4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015fba:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015fc0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015fca:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015fd4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015fde:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015fe4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015fee:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015ff4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015ffe:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016005:	e8 ac 1a ff ff       	call   c0007ab6 <malloc>
c001600a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016010:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016016:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001601c:	5a                   	pop    edx
c001601d:	59                   	pop    ecx
c001601e:	68 41 28 02 c0       	push   0xc0022841
c0016023:	50                   	push   eax
c0016024:	e8 17 a6 fe ff       	call   c0000640 <strcpy>
c0016029:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016030:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016034:	83 c4 14             	add    esp,0x14
c0016037:	5b                   	pop    ebx
c0016038:	5e                   	pop    esi
c0016039:	e9 2b a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001603e:	66 90                	xchg   ax,ax

c0016040 <schedule()>:
c0016040:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016046:	85 d2                	test   edx,edx
c0016048:	74 0e                	je     c0016058 <schedule()+0x18>
c001604a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016054:	c3                   	ret    
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	53                   	push   ebx
c0016059:	83 ec 14             	sub    esp,0x14
c001605c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016061:	e8 1a 9c 00 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016066:	83 c4 10             	add    esp,0x10
c0016069:	84 c0                	test   al,al
c001606b:	75 3f                	jne    c00160ac <schedule()+0x6c>
c001606d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016072:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016075:	83 fa 01             	cmp    edx,0x1
c0016078:	74 3a                	je     c00160b4 <schedule()+0x74>
c001607a:	66 90                	xchg   ax,ax
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016084:	e8 13 9c 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016089:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016090:	89 c3                	mov    ebx,eax
c0016092:	e8 0d 9c 00 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016097:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001609e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160a1:	e8 fe f7 ff ff       	call   c00158a4 <switchToThread(ThreadControlBlock*)>
c00160a6:	83 c4 10             	add    esp,0x10
c00160a9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ac:	83 c4 08             	add    esp,0x8
c00160af:	5b                   	pop    ebx
c00160b0:	c3                   	ret    
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00160bb:	83 ec 08             	sub    esp,0x8
c00160be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c3:	50                   	push   eax
c00160c4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160c9:	e8 92 9c 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160ce:	83 c4 10             	add    esp,0x10
c00160d1:	eb a9                	jmp    c001607c <schedule()+0x3c>
c00160d3:	90                   	nop

c00160d4 <Semaphore::tryAcquire()>:
c00160d4:	53                   	push   ebx
c00160d5:	83 ec 08             	sub    esp,0x8
c00160d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160dc:	fa                   	cli    
c00160dd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00160e2:	8d 50 01             	lea    edx,[eax+0x1]
c00160e5:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160eb:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160f1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00160f4:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00160fa:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00160fd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00160ff:	7c 33                	jl     c0016134 <Semaphore::tryAcquire()+0x60>
c0016101:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016107:	85 d2                	test   edx,edx
c0016109:	75 0d                	jne    c0016118 <Semaphore::tryAcquire()+0x44>
c001610b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016111:	85 d2                	test   edx,edx
c0016113:	75 6f                	jne    c0016184 <Semaphore::tryAcquire()+0xb0>
c0016115:	8d 76 00             	lea    esi,[esi+0x0]
c0016118:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001611d:	85 c0                	test   eax,eax
c001611f:	74 0b                	je     c001612c <Semaphore::tryAcquire()+0x58>
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	31 c0                	xor    eax,eax
c0016126:	83 c4 08             	add    esp,0x8
c0016129:	5b                   	pop    ebx
c001612a:	c3                   	ret    
c001612b:	90                   	nop
c001612c:	fb                   	sti    
c001612d:	83 c4 08             	add    esp,0x8
c0016130:	5b                   	pop    ebx
c0016131:	c3                   	ret    
c0016132:	66 90                	xchg   ax,ax
c0016134:	83 c3 01             	add    ebx,0x1
c0016137:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001613d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016140:	85 d2                	test   edx,edx
c0016142:	75 24                	jne    c0016168 <Semaphore::tryAcquire()+0x94>
c0016144:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001614a:	85 c9                	test   ecx,ecx
c001614c:	74 1a                	je     c0016168 <Semaphore::tryAcquire()+0x94>
c001614e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016158:	e8 e3 fe ff ff       	call   c0016040 <schedule()>
c001615d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016162:	83 e8 01             	sub    eax,0x1
c0016165:	8d 76 00             	lea    esi,[esi+0x0]
c0016168:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001616d:	85 c0                	test   eax,eax
c001616f:	75 0b                	jne    c001617c <Semaphore::tryAcquire()+0xa8>
c0016171:	fb                   	sti    
c0016172:	b0 01                	mov    al,0x1
c0016174:	83 c4 08             	add    esp,0x8
c0016177:	5b                   	pop    ebx
c0016178:	c3                   	ret    
c0016179:	8d 76 00             	lea    esi,[esi+0x0]
c001617c:	b0 01                	mov    al,0x1
c001617e:	83 c4 08             	add    esp,0x8
c0016181:	5b                   	pop    ebx
c0016182:	c3                   	ret    
c0016183:	90                   	nop
c0016184:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001618e:	e8 ad fe ff ff       	call   c0016040 <schedule()>
c0016193:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016198:	83 e8 01             	sub    eax,0x1
c001619b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161a0:	85 c0                	test   eax,eax
c00161a2:	75 80                	jne    c0016124 <Semaphore::tryAcquire()+0x50>
c00161a4:	eb 86                	jmp    c001612c <Semaphore::tryAcquire()+0x58>
c00161a6:	66 90                	xchg   ax,ax

c00161a8 <Semaphore::assertLocked(char const*)>:
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161af:	fa                   	cli    
c00161b0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00161b6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00161bb:	83 c1 01             	add    ecx,0x1
c00161be:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00161c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00161c7:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00161cd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00161cf:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00161d2:	7c 28                	jl     c00161fc <Semaphore::assertLocked(char const*)+0x54>
c00161d4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00161d9:	85 c0                	test   eax,eax
c00161db:	75 0b                	jne    c00161e8 <Semaphore::assertLocked(char const*)+0x40>
c00161dd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00161e2:	85 c0                	test   eax,eax
c00161e4:	75 32                	jne    c0016218 <Semaphore::assertLocked(char const*)+0x70>
c00161e6:	66 90                	xchg   ax,ax
c00161e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161ed:	83 e8 01             	sub    eax,0x1
c00161f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161f5:	75 01                	jne    c00161f8 <Semaphore::assertLocked(char const*)+0x50>
c00161f7:	fb                   	sti    
c00161f8:	83 c4 0c             	add    esp,0xc
c00161fb:	c3                   	ret    
c00161fc:	83 ec 0c             	sub    esp,0xc
c00161ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016203:	52                   	push   edx
c0016204:	e8 b2 b3 ff ff       	call   c00115bb <KePanic(char const*)>
c0016209:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	83 e8 01             	sub    eax,0x1
c0016214:	eb be                	jmp    c00161d4 <Semaphore::assertLocked(char const*)+0x2c>
c0016216:	66 90                	xchg   ax,ax
c0016218:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016222:	e8 19 fe ff ff       	call   c0016040 <schedule()>
c0016227:	eb bf                	jmp    c00161e8 <Semaphore::assertLocked(char const*)+0x40>
c0016229:	8d 76 00             	lea    esi,[esi+0x0]

c001622c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001622c:	83 ec 0c             	sub    esp,0xc
c001622f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016234:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016238:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001623b:	e8 00 fe ff ff       	call   c0016040 <schedule()>
c0016240:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016245:	83 e8 01             	sub    eax,0x1
c0016248:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001624d:	75 01                	jne    c0016250 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001624f:	fb                   	sti    
c0016250:	83 c4 0c             	add    esp,0xc
c0016253:	c3                   	ret    

c0016254 <blockTask(TaskState)>:
c0016254:	83 ec 0c             	sub    esp,0xc
c0016257:	fa                   	cli    
c0016258:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001625d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016261:	83 c0 01             	add    eax,0x1
c0016264:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016269:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001626e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016271:	e8 ca fd ff ff       	call   c0016040 <schedule()>
c0016276:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001627b:	83 e8 01             	sub    eax,0x1
c001627e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016283:	75 03                	jne    c0016288 <blockTask(TaskState)+0x34>
c0016285:	fb                   	sti    
c0016286:	66 90                	xchg   ax,ax
c0016288:	83 c4 0c             	add    esp,0xc
c001628b:	c3                   	ret    

c001628c <waitTask(int, int*, int)>:
c001628c:	83 ec 18             	sub    esp,0x18
c001628f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016294:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016298:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001629b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001629f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162a4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162a7:	6a 07                	push   0x7
c00162a9:	e8 a6 ff ff ff       	call   c0016254 <blockTask(TaskState)>
c00162ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00162b9:	85 d2                	test   edx,edx
c00162bb:	74 0b                	je     c00162c8 <waitTask(int, int*, int)+0x3c>
c00162bd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00162c0:	89 02                	mov    DWORD PTR [edx],eax
c00162c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c7:	90                   	nop
c00162c8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00162cb:	83 c4 0c             	add    esp,0xc
c00162ce:	c3                   	ret    
c00162cf:	90                   	nop

c00162d0 <milliTenthSleepUntil(unsigned int)>:
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d7:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00162dd:	76 05                	jbe    c00162e4 <milliTenthSleepUntil(unsigned int)+0x14>
c00162df:	90                   	nop
c00162e0:	83 c4 0c             	add    esp,0xc
c00162e3:	c3                   	ret    
c00162e4:	fa                   	cli    
c00162e5:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00162eb:	83 ec 08             	sub    esp,0x8
c00162ee:	83 c2 01             	add    edx,0x1
c00162f1:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00162f7:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162fd:	83 c1 01             	add    ecx,0x1
c0016300:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016306:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001630c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001630f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016314:	50                   	push   eax
c0016315:	68 d8 c6 02 c0       	push   0xc002c6d8
c001631a:	e8 41 9a 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001631f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016326:	e8 29 ff ff ff       	call   c0016254 <blockTask(TaskState)>
c001632b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	83 e8 01             	sub    eax,0x1
c0016336:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001633b:	85 c0                	test   eax,eax
c001633d:	75 09                	jne    c0016348 <milliTenthSleepUntil(unsigned int)+0x78>
c001633f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016344:	85 c0                	test   eax,eax
c0016346:	75 14                	jne    c001635c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016348:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001634d:	83 e8 01             	sub    eax,0x1
c0016350:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016355:	75 89                	jne    c00162e0 <milliTenthSleepUntil(unsigned int)+0x10>
c0016357:	fb                   	sti    
c0016358:	83 c4 0c             	add    esp,0xc
c001635b:	c3                   	ret    
c001635c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016366:	e8 d5 fc ff ff       	call   c0016040 <schedule()>
c001636b:	eb db                	jmp    c0016348 <milliTenthSleepUntil(unsigned int)+0x78>
c001636d:	8d 76 00             	lea    esi,[esi+0x0]

c0016370 <milliTenthSleep(unsigned int)>:
c0016370:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016374:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016379:	01 c2                	add    edx,eax
c001637b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001637f:	e9 4c ff ff ff       	jmp    c00162d0 <milliTenthSleepUntil(unsigned int)>

c0016384 <sleep(unsigned int)>:
c0016384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016388:	8d 04 80             	lea    eax,[eax+eax*4]
c001638b:	8d 04 80             	lea    eax,[eax+eax*4]
c001638e:	8d 04 80             	lea    eax,[eax+eax*4]
c0016391:	8d 04 80             	lea    eax,[eax+eax*4]
c0016394:	c1 e0 04             	shl    eax,0x4
c0016397:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001639b:	eb d3                	jmp    c0016370 <milliTenthSleep(unsigned int)>
c001639d:	90                   	nop
c001639e:	66 90                	xchg   ax,ax

c00163a0 <Semaphore::acquire()>:
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163a7:	fa                   	cli    
c00163a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163ad:	83 c0 01             	add    eax,0x1
c00163b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00163bd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00163c3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00163c6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00163c8:	7d 2e                	jge    c00163f8 <Semaphore::acquire()+0x58>
c00163ca:	83 c1 01             	add    ecx,0x1
c00163cd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00163d0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163d5:	85 c0                	test   eax,eax
c00163d7:	75 0b                	jne    c00163e4 <Semaphore::acquire()+0x44>
c00163d9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163de:	85 c0                	test   eax,eax
c00163e0:	75 66                	jne    c0016448 <Semaphore::acquire()+0xa8>
c00163e2:	66 90                	xchg   ax,ax
c00163e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163e9:	83 e8 01             	sub    eax,0x1
c00163ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163f1:	75 01                	jne    c00163f4 <Semaphore::acquire()+0x54>
c00163f3:	fb                   	sti    
c00163f4:	83 c4 0c             	add    esp,0xc
c00163f7:	c3                   	ret    
c00163f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016404:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016407:	85 c9                	test   ecx,ecx
c0016409:	74 51                	je     c001645c <Semaphore::acquire()+0xbc>
c001640b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001640e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016414:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016417:	90                   	nop
c0016418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001641d:	83 ec 0c             	sub    esp,0xc
c0016420:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016423:	68 c4 28 02 c0       	push   0xc00228c4
c0016428:	e8 18 45 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001642d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016434:	e8 1b fe ff ff       	call   c0016254 <blockTask(TaskState)>
c0016439:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001643e:	83 c4 10             	add    esp,0x10
c0016441:	83 e8 01             	sub    eax,0x1
c0016444:	eb 8a                	jmp    c00163d0 <Semaphore::acquire()+0x30>
c0016446:	66 90                	xchg   ax,ax
c0016448:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016452:	e8 e9 fb ff ff       	call   c0016040 <schedule()>
c0016457:	eb 8b                	jmp    c00163e4 <Semaphore::acquire()+0x44>
c0016459:	8d 76 00             	lea    esi,[esi+0x0]
c001645c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016461:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016464:	eb b2                	jmp    c0016418 <Semaphore::acquire()+0x78>
c0016466:	66 90                	xchg   ax,ax

c0016468 <taskReturned>:
c0016468:	83 ec 18             	sub    esp,0x18
c001646b:	68 e4 28 02 c0       	push   0xc00228e4
c0016470:	e8 46 b1 ff ff       	call   c00115bb <KePanic(char const*)>
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	6a 02                	push   0x2
c001647d:	e8 d2 fd ff ff       	call   c0016254 <blockTask(TaskState)>
c0016482:	fa                   	cli    
c0016483:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016488:	83 c0 01             	add    eax,0x1
c001648b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016490:	e8 ab fb ff ff       	call   c0016040 <schedule()>
c0016495:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001649a:	83 c4 10             	add    esp,0x10
c001649d:	83 e8 01             	sub    eax,0x1
c00164a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164a5:	85 c0                	test   eax,eax
c00164a7:	75 cf                	jne    c0016478 <taskReturned+0x10>
c00164a9:	fb                   	sti    
c00164aa:	eb cc                	jmp    c0016478 <taskReturned+0x10>

c00164ac <Thr::processFromPID(int)>:
c00164ac:	57                   	push   edi
c00164ad:	56                   	push   esi
c00164ae:	53                   	push   ebx
c00164af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164b3:	fa                   	cli    
c00164b4:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	83 c1 01             	add    ecx,0x1
c00164c0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164c5:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00164cb:	e8 cc 97 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164d0:	83 c4 10             	add    esp,0x10
c00164d3:	89 c7                	mov    edi,eax
c00164d5:	eb 15                	jmp    c00164ec <Thr::processFromPID(int)+0x40>
c00164d7:	90                   	nop
c00164d8:	83 ec 0c             	sub    esp,0xc
c00164db:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164e0:	e8 b7 97 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	39 f8                	cmp    eax,edi
c00164ea:	74 50                	je     c001653c <Thr::processFromPID(int)+0x90>
c00164ec:	83 ec 0c             	sub    esp,0xc
c00164ef:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164f4:	e8 a3 97 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164f9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016500:	89 c3                	mov    ebx,eax
c0016502:	e8 9d 97 00 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016507:	58                   	pop    eax
c0016508:	5a                   	pop    edx
c0016509:	53                   	push   ebx
c001650a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001650f:	e8 4c 98 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016514:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	39 30                	cmp    DWORD PTR [eax],esi
c001651c:	75 ba                	jne    c00164d8 <Thr::processFromPID(int)+0x2c>
c001651e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016523:	83 e8 01             	sub    eax,0x1
c0016526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001652b:	74 0b                	je     c0016538 <Thr::processFromPID(int)+0x8c>
c001652d:	8d 76 00             	lea    esi,[esi+0x0]
c0016530:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016533:	5b                   	pop    ebx
c0016534:	5e                   	pop    esi
c0016535:	5f                   	pop    edi
c0016536:	c3                   	ret    
c0016537:	90                   	nop
c0016538:	fb                   	sti    
c0016539:	eb f5                	jmp    c0016530 <Thr::processFromPID(int)+0x84>
c001653b:	90                   	nop
c001653c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016541:	83 e8 01             	sub    eax,0x1
c0016544:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016549:	75 05                	jne    c0016550 <Thr::processFromPID(int)+0xa4>
c001654b:	fb                   	sti    
c001654c:	5b                   	pop    ebx
c001654d:	5e                   	pop    esi
c001654e:	5f                   	pop    edi
c001654f:	c3                   	ret    
c0016550:	5b                   	pop    ebx
c0016551:	31 c0                	xor    eax,eax
c0016553:	5e                   	pop    esi
c0016554:	5f                   	pop    edi
c0016555:	c3                   	ret    
c0016556:	66 90                	xchg   ax,ax

c0016558 <unblockTask(ThreadControlBlock*)>:
c0016558:	53                   	push   ebx
c0016559:	83 ec 08             	sub    esp,0x8
c001655c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016560:	fa                   	cli    
c0016561:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016566:	83 c0 01             	add    eax,0x1
c0016569:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001656e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016571:	85 c0                	test   eax,eax
c0016573:	74 67                	je     c00165dc <unblockTask(ThreadControlBlock*)+0x84>
c0016575:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016578:	83 f8 01             	cmp    eax,0x1
c001657b:	74 37                	je     c00165b4 <unblockTask(ThreadControlBlock*)+0x5c>
c001657d:	83 ec 0c             	sub    esp,0xc
c0016580:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016585:	e8 12 97 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	85 c0                	test   eax,eax
c001658f:	75 1b                	jne    c00165ac <unblockTask(ThreadControlBlock*)+0x54>
c0016591:	eb 5d                	jmp    c00165f0 <unblockTask(ThreadControlBlock*)+0x98>
c0016593:	90                   	nop
c0016594:	83 ec 08             	sub    esp,0x8
c0016597:	50                   	push   eax
c0016598:	68 e4 c6 02 c0       	push   0xc002c6e4
c001659d:	e8 1a 9a 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	85 c0                	test   eax,eax
c00165a7:	74 47                	je     c00165f0 <unblockTask(ThreadControlBlock*)+0x98>
c00165a9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ac:	39 c3                	cmp    ebx,eax
c00165ae:	75 e4                	jne    c0016594 <unblockTask(ThreadControlBlock*)+0x3c>
c00165b0:	eb 12                	jmp    c00165c4 <unblockTask(ThreadControlBlock*)+0x6c>
c00165b2:	66 90                	xchg   ax,ax
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	68 63 28 02 c0       	push   0xc0022863
c00165bc:	e8 84 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00165c1:	83 c4 10             	add    esp,0x10
c00165c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165c9:	83 e8 01             	sub    eax,0x1
c00165cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165d1:	75 01                	jne    c00165d4 <unblockTask(ThreadControlBlock*)+0x7c>
c00165d3:	fb                   	sti    
c00165d4:	83 c4 08             	add    esp,0x8
c00165d7:	5b                   	pop    ebx
c00165d8:	c3                   	ret    
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	68 4c 28 02 c0       	push   0xc002284c
c00165e4:	e8 5c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	eb d6                	jmp    c00165c4 <unblockTask(ThreadControlBlock*)+0x6c>
c00165ee:	66 90                	xchg   ax,ax
c00165f0:	83 ec 08             	sub    esp,0x8
c00165f3:	53                   	push   ebx
c00165f4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165f9:	e8 62 97 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165fe:	83 c4 10             	add    esp,0x10
c0016601:	eb c1                	jmp    c00165c4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016603:	90                   	nop

c0016604 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016604:	55                   	push   ebp
c0016605:	57                   	push   edi
c0016606:	56                   	push   esi
c0016607:	53                   	push   ebx
c0016608:	83 ec 1c             	sub    esp,0x1c
c001660b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001660f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016612:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016618:	85 ed                	test   ebp,ebp
c001661a:	7e 28                	jle    c0016644 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001661c:	31 f6                	xor    esi,esi
c001661e:	66 90                	xchg   ax,ax
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001662a:	83 c6 01             	add    esi,0x1
c001662d:	57                   	push   edi
c001662e:	e8 93 14 ff ff       	call   c0007ac6 <free>
c0016633:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016636:	83 c4 10             	add    esp,0x10
c0016639:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001663f:	7f df                	jg     c0016620 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016641:	8d 76 00             	lea    esi,[esi+0x0]
c0016644:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001664e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016653:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016656:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016659:	d3 c0                	rol    eax,cl
c001665b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016662:	21 c8                	and    eax,ecx
c0016664:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001666b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001666e:	89 f7                	mov    edi,esi
c0016670:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016678:	0f 85 72 01 00 00    	jne    c00167f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001667e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016684:	85 ed                	test   ebp,ebp
c0016686:	74 1c                	je     c00166a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	55                   	push   ebp
c001668c:	e8 3b ac ff ff       	call   c00112cc <EnvVarContainer::~EnvVarContainer()>
c0016691:	59                   	pop    ecx
c0016692:	5e                   	pop    esi
c0016693:	6a 0c                	push   0xc
c0016695:	55                   	push   ebp
c0016696:	e8 7d 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001669b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001669e:	83 c4 10             	add    esp,0x10
c00166a1:	89 f7                	mov    edi,esi
c00166a3:	90                   	nop
c00166a4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166aa:	85 c0                	test   eax,eax
c00166ac:	0f 84 b2 00 00 00    	je     c0016764 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166b2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166b9:	31 c9                	xor    ecx,ecx
c00166bb:	eb 17                	jmp    c00166d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00166bd:	8d 76 00             	lea    esi,[esi+0x0]
c00166c0:	83 c1 01             	add    ecx,0x1
c00166c3:	83 f9 10             	cmp    ecx,0x10
c00166c6:	0f 84 98 00 00 00    	je     c0016764 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166d2:	66 90                	xchg   ax,ax
c00166d4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00166db:	d3 fa                	sar    edx,cl
c00166dd:	80 e2 01             	and    dl,0x1
c00166e0:	74 de                	je     c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166e2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00166e5:	01 d2                	add    edx,edx
c00166e7:	01 ca                	add    edx,ecx
c00166e9:	8d 14 92             	lea    edx,[edx+edx*4]
c00166ec:	01 d0                	add    eax,edx
c00166ee:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00166f4:	83 fd 07             	cmp    ebp,0x7
c00166f7:	75 c7                	jne    c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00166f9:	05 40 02 00 00       	add    eax,0x240
c00166fe:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016701:	83 fd ff             	cmp    ebp,0xffffffff
c0016704:	0f 8c ee 00 00 00    	jl     c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001670a:	0f 84 ac 01 00 00    	je     c00168bc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016710:	85 ed                	test   ebp,ebp
c0016712:	0f 84 90 01 00 00    	je     c00168a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016718:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001671a:	75 a4                	jne    c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001671c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016722:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016726:	01 d0                	add    eax,edx
c0016728:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001672c:	83 ec 0c             	sub    esp,0xc
c001672f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016735:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016738:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001673e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016745:	50                   	push   eax
c0016746:	e8 0d fe ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c001674b:	83 c4 10             	add    esp,0x10
c001674e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016751:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016755:	89 f7                	mov    edi,esi
c0016757:	83 c1 01             	add    ecx,0x1
c001675a:	83 f9 10             	cmp    ecx,0x10
c001675d:	0f 85 69 ff ff ff    	jne    c00166cc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016763:	90                   	nop
c0016764:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001676a:	85 c0                	test   eax,eax
c001676c:	74 62                	je     c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001676e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016774:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001677a:	74 54                	je     c00167d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016784:	e8 13 95 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016789:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016790:	89 c7                	mov    edi,eax
c0016792:	e8 e9 94 00 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016797:	83 c4 10             	add    esp,0x10
c001679a:	84 c0                	test   al,al
c001679c:	0f 84 ce 00 00 00    	je     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167a2:	66 90                	xchg   ax,ax
c00167a4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167a7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167ad:	85 d2                	test   edx,edx
c00167af:	74 0f                	je     c00167c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167b1:	83 ec 0c             	sub    esp,0xc
c00167b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00167b6:	52                   	push   edx
c00167b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167ba:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167bd:	83 c4 10             	add    esp,0x10
c00167c0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00167ca:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00167cd:	8d 76 00             	lea    esi,[esi+0x0]
c00167d0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00167d6:	85 db                	test   ebx,ebx
c00167d8:	74 16                	je     c00167f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167da:	83 ec 0c             	sub    esp,0xc
c00167dd:	53                   	push   ebx
c00167de:	e8 cf 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00167e3:	58                   	pop    eax
c00167e4:	5a                   	pop    edx
c00167e5:	6a 14                	push   0x14
c00167e7:	53                   	push   ebx
c00167e8:	e8 2b 40 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	83 c4 1c             	add    esp,0x1c
c00167f3:	5b                   	pop    ebx
c00167f4:	5e                   	pop    esi
c00167f5:	5f                   	pop    edi
c00167f6:	5d                   	pop    ebp
c00167f7:	c3                   	ret    
c00167f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00167fc:	83 ec 0c             	sub    esp,0xc
c00167ff:	68 18 29 02 c0       	push   0xc0022918
c0016804:	e8 b2 ad ff ff       	call   c00115bb <KePanic(char const*)>
c0016809:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001680c:	83 c4 10             	add    esp,0x10
c001680f:	89 f7                	mov    edi,esi
c0016811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016815:	e9 a6 fe ff ff       	jmp    c00166c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001681a:	66 90                	xchg   ax,ax
c001681c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016822:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016828:	75 1e                	jne    c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	68 80 29 02 c0       	push   0xc0022980
c0016832:	e8 0e 41 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016837:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001683e:	e8 11 fa ff ff       	call   c0016254 <blockTask(TaskState)>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	66 90                	xchg   ax,ax
c0016848:	83 ec 08             	sub    esp,0x8
c001684b:	56                   	push   esi
c001684c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016851:	e8 0a 95 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016856:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001685d:	e8 3a 94 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016862:	83 c4 10             	add    esp,0x10
c0016865:	39 f8                	cmp    eax,edi
c0016867:	0f 84 37 ff ff ff    	je     c00167a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001686d:	8d 76 00             	lea    esi,[esi+0x0]
c0016870:	83 ec 0c             	sub    esp,0xc
c0016873:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016878:	e8 1f 94 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001687d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016884:	89 c6                	mov    esi,eax
c0016886:	e8 19 94 00 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	39 f3                	cmp    ebx,esi
c0016890:	74 b6                	je     c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016892:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016895:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016898:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001689e:	75 a8                	jne    c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168a0:	e9 77 ff ff ff       	jmp    c001681c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168a5:	8d 76 00             	lea    esi,[esi+0x0]
c00168a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168ac:	83 ec 0c             	sub    esp,0xc
c00168af:	68 4c 29 02 c0       	push   0xc002294c
c00168b4:	e9 4b ff ff ff       	jmp    c0016804 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168b9:	8d 76 00             	lea    esi,[esi+0x0]
c00168bc:	8b 36                	mov    esi,DWORD PTR [esi]
c00168be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168c2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00168c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168c8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00168ce:	01 d7                	add    edi,edx
c00168d0:	89 f8                	mov    eax,edi
c00168d2:	e9 51 fe ff ff       	jmp    c0016728 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00168d7:	90                   	nop

c00168d8 <cleanerTaskFunction(void*)>:
c00168d8:	53                   	push   ebx
c00168d9:	83 ec 08             	sub    esp,0x8
c00168dc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168e1:	83 e8 01             	sub    eax,0x1
c00168e4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00168e9:	75 01                	jne    c00168ec <cleanerTaskFunction(void*)+0x14>
c00168eb:	fb                   	sti    
c00168ec:	fa                   	cli    
c00168ed:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168f2:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c00168f9:	8d 50 01             	lea    edx,[eax+0x1]
c00168fc:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016902:	0f 84 c4 00 00 00    	je     c00169cc <cleanerTaskFunction(void*)+0xf4>
c0016908:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001690d:	85 c0                	test   eax,eax
c001690f:	75 03                	jne    c0016914 <cleanerTaskFunction(void*)+0x3c>
c0016911:	fb                   	sti    
c0016912:	66 90                	xchg   ax,ax
c0016914:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001691b:	fa                   	cli    
c001691c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016922:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016928:	83 c2 01             	add    edx,0x1
c001692b:	83 c1 01             	add    ecx,0x1
c001692e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016934:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001693a:	fa                   	cli    
c001693b:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016941:	83 c3 01             	add    ebx,0x1
c0016944:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c001694a:	eb 28                	jmp    c0016974 <cleanerTaskFunction(void*)+0x9c>
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016954:	e8 43 93 00 00       	call   c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016959:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016960:	89 c3                	mov    ebx,eax
c0016962:	e8 3d 93 00 00       	call   c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016967:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001696a:	e8 95 fc ff ff       	call   c0016604 <cleanupTerminatedTask(ThreadControlBlock*)>
c001696f:	83 c4 10             	add    esp,0x10
c0016972:	66 90                	xchg   ax,ax
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	68 cc c6 02 c0       	push   0xc002c6cc
c001697c:	e8 ff 92 00 00       	call   c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	84 c0                	test   al,al
c0016986:	74 c4                	je     c001694c <cleanerTaskFunction(void*)+0x74>
c0016988:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001698d:	83 e8 01             	sub    eax,0x1
c0016990:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016995:	75 01                	jne    c0016998 <cleanerTaskFunction(void*)+0xc0>
c0016997:	fb                   	sti    
c0016998:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001699d:	83 e8 01             	sub    eax,0x1
c00169a0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169a5:	0f 85 31 ff ff ff    	jne    c00168dc <cleanerTaskFunction(void*)+0x4>
c00169ab:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169b0:	85 c0                	test   eax,eax
c00169b2:	0f 84 24 ff ff ff    	je     c00168dc <cleanerTaskFunction(void*)+0x4>
c00169b8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00169c2:	e8 79 f6 ff ff       	call   c0016040 <schedule()>
c00169c7:	e9 10 ff ff ff       	jmp    c00168dc <cleanerTaskFunction(void*)+0x4>
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	6a 02                	push   0x2
c00169d1:	e8 56 f8 ff ff       	call   c001622c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00169d6:	83 c4 10             	add    esp,0x10
c00169d9:	e9 36 ff ff ff       	jmp    c0016914 <cleanerTaskFunction(void*)+0x3c>
c00169de:	66 90                	xchg   ax,ax

c00169e0 <terminateTask(int)>:
c00169e0:	83 ec 14             	sub    esp,0x14
c00169e3:	fa                   	cli    
c00169e4:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00169ea:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169f0:	83 c2 01             	add    edx,0x1
c00169f3:	83 c1 01             	add    ecx,0x1
c00169f6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169fc:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a02:	fa                   	cli    
c0016a03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a0c:	83 c0 01             	add    eax,0x1
c0016a0f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a19:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a21:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a24:	50                   	push   eax
c0016a25:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a2a:	e8 31 93 00 00       	call   c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a3e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a43:	85 c0                	test   eax,eax
c0016a45:	74 65                	je     c0016aac <terminateTask(int)+0xcc>
c0016a47:	83 ec 0c             	sub    esp,0xc
c0016a4a:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a51:	50                   	push   eax
c0016a52:	e8 01 fb ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	66 90                	xchg   ax,ax
c0016a5c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a61:	83 e8 01             	sub    eax,0x1
c0016a64:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a69:	75 01                	jne    c0016a6c <terminateTask(int)+0x8c>
c0016a6b:	fb                   	sti    
c0016a6c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a71:	83 e8 01             	sub    eax,0x1
c0016a74:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a79:	75 09                	jne    c0016a84 <terminateTask(int)+0xa4>
c0016a7b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016a82:	75 3c                	jne    c0016ac0 <terminateTask(int)+0xe0>
c0016a84:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a89:	83 e8 01             	sub    eax,0x1
c0016a8c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a91:	75 01                	jne    c0016a94 <terminateTask(int)+0xb4>
c0016a93:	fb                   	sti    
c0016a94:	fa                   	cli    
c0016a95:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a9a:	83 c0 01             	add    eax,0x1
c0016a9d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa2:	66 90                	xchg   ax,ax
c0016aa4:	e8 97 f5 ff ff       	call   c0016040 <schedule()>
c0016aa9:	eb d9                	jmp    c0016a84 <terminateTask(int)+0xa4>
c0016aab:	90                   	nop
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	68 7a 28 02 c0       	push   0xc002287a
c0016ab4:	e8 8c 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	eb 9e                	jmp    c0016a5c <terminateTask(int)+0x7c>
c0016abe:	66 90                	xchg   ax,ax
c0016ac0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016aca:	eb d8                	jmp    c0016aa4 <terminateTask(int)+0xc4>

c0016acc <Thr::terminateFromIRQ(int)>:
c0016acc:	83 ec 18             	sub    esp,0x18
c0016acf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ad3:	50                   	push   eax
c0016ad4:	e8 07 ff ff ff       	call   c00169e0 <terminateTask(int)>
c0016ad9:	90                   	nop
c0016ada:	66 90                	xchg   ax,ax

c0016adc <Semaphore::release()>:
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ae3:	fa                   	cli    
c0016ae4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae9:	83 c0 01             	add    eax,0x1
c0016aec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016af1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016af6:	8d 48 01             	lea    ecx,[eax+0x1]
c0016af9:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016aff:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b02:	85 c9                	test   ecx,ecx
c0016b04:	74 42                	je     c0016b48 <Semaphore::release()+0x6c>
c0016b06:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b09:	83 ec 0c             	sub    esp,0xc
c0016b0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b0f:	51                   	push   ecx
c0016b10:	e8 43 fa ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c0016b15:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	83 e8 01             	sub    eax,0x1
c0016b20:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b25:	85 c0                	test   eax,eax
c0016b27:	75 0b                	jne    c0016b34 <Semaphore::release()+0x58>
c0016b29:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b2e:	85 c0                	test   eax,eax
c0016b30:	75 22                	jne    c0016b54 <Semaphore::release()+0x78>
c0016b32:	66 90                	xchg   ax,ax
c0016b34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b39:	83 e8 01             	sub    eax,0x1
c0016b3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b41:	75 01                	jne    c0016b44 <Semaphore::release()+0x68>
c0016b43:	fb                   	sti    
c0016b44:	83 c4 0c             	add    esp,0xc
c0016b47:	c3                   	ret    
c0016b48:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b4b:	83 e9 01             	sub    ecx,0x1
c0016b4e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b51:	eb cd                	jmp    c0016b20 <Semaphore::release()+0x44>
c0016b53:	90                   	nop
c0016b54:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b5e:	e8 dd f4 ff ff       	call   c0016040 <schedule()>
c0016b63:	eb cf                	jmp    c0016b34 <Semaphore::release()+0x58>
c0016b65:	8d 76 00             	lea    esi,[esi+0x0]

c0016b68 <__static_initialization_and_destruction_0(int, int)>:
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b70:	0f 85 8e 00 00 00    	jne    c0016c04 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b76:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b7e:	0f 85 80 00 00 00    	jne    c0016c04 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b8c:	e8 83 94 00 00       	call   c0020014 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	83 ec 04             	sub    esp,0x4
c0016b97:	68 50 35 02 c0       	push   0xc0023550
c0016b9c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016ba1:	68 c4 ff 01 c0       	push   0xc001ffc4
c0016ba6:	e8 1d 3c ff ff       	call   c000a7c8 <__cxa_atexit>
c0016bab:	83 c4 10             	add    esp,0x10
c0016bae:	83 ec 0c             	sub    esp,0xc
c0016bb1:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bb6:	e8 59 94 00 00       	call   c0020014 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	83 ec 04             	sub    esp,0x4
c0016bc1:	68 50 35 02 c0       	push   0xc0023550
c0016bc6:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bcb:	68 c4 ff 01 c0       	push   0xc001ffc4
c0016bd0:	e8 f3 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016bd5:	83 c4 10             	add    esp,0x10
c0016bd8:	83 ec 0c             	sub    esp,0xc
c0016bdb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016be0:	e8 2f 94 00 00       	call   c0020014 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016be5:	83 c4 10             	add    esp,0x10
c0016be8:	83 ec 04             	sub    esp,0x4
c0016beb:	68 50 35 02 c0       	push   0xc0023550
c0016bf0:	68 cc c6 02 c0       	push   0xc002c6cc
c0016bf5:	68 c4 ff 01 c0       	push   0xc001ffc4
c0016bfa:	e8 c9 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	66 90                	xchg   ax,ax
c0016c04:	90                   	nop
c0016c05:	83 c4 0c             	add    esp,0xc
c0016c08:	c3                   	ret    
c0016c09:	8d 76 00             	lea    esi,[esi+0x0]

c0016c0c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	83 ec 08             	sub    esp,0x8
c0016c12:	68 ff ff 00 00       	push   0xffff
c0016c17:	6a 01                	push   0x1
c0016c19:	e8 4a ff ff ff       	call   c0016b68 <__static_initialization_and_destruction_0(int, int)>
c0016c1e:	83 c4 10             	add    esp,0x10
c0016c21:	83 c4 0c             	add    esp,0xc
c0016c24:	c3                   	ret    

c0016c25 <Vm::inbv(unsigned short)>:
c0016c25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c29:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c2e:	75 06                	jne    c0016c36 <Vm::inbv(unsigned short)+0x11>
c0016c30:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c35:	c3                   	ret    
c0016c36:	ec                   	in     al,dx
c0016c37:	c3                   	ret    

c0016c38 <Vm::outbv(unsigned short, unsigned char)>:
c0016c38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c40:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c45:	75 25                	jne    c0016c6c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c47:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c4d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c50:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c56:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016c5c:	83 fa 20             	cmp    edx,0x20
c0016c5f:	75 0c                	jne    c0016c6d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c61:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016c6b:	c3                   	ret    
c0016c6c:	ee                   	out    dx,al
c0016c6d:	c3                   	ret    

c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c6e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c73:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c78:	c1 e0 04             	shl    eax,0x4
c0016c7b:	01 d0                	add    eax,edx
c0016c7d:	c3                   	ret    

c0016c7e <Vm::getSegment(unsigned int)>:
c0016c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c82:	c1 e8 10             	shr    eax,0x10
c0016c85:	c3                   	ret    

c0016c86 <Vm::getOffset(unsigned int)>:
c0016c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c8a:	c3                   	ret    

c0016c8b <Vm::mainloop2()>:
c0016c8b:	83 ec 18             	sub    esp,0x18
c0016c8e:	fa                   	cli    
c0016c8f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c95:	6a 02                	push   0x2
c0016c97:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c9e:	e8 89 f5 ff ff       	call   c001622c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cac:	52                   	push   edx
c0016cad:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016cb1:	52                   	push   edx
c0016cb2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cb6:	52                   	push   edx
c0016cb7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016cbb:	50                   	push   eax
c0016cbc:	e8 4e 95 fe ff       	call   c000020f <goToVM86>
c0016cc1:	83 c4 2c             	add    esp,0x2c
c0016cc4:	c3                   	ret    

c0016cc5 <Vm::mainVm8086Loop(void*)>:
c0016cc5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cca:	48                   	dec    eax
c0016ccb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cd0:	75 01                	jne    c0016cd3 <Vm::mainVm8086Loop(void*)+0xe>
c0016cd2:	fb                   	sti    
c0016cd3:	eb b6                	jmp    c0016c8b <Vm::mainloop2()>

c0016cd5 <Vm::mainloop3(unsigned long)>:
c0016cd5:	83 ec 18             	sub    esp,0x18
c0016cd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cdc:	fa                   	cli    
c0016cdd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ce3:	6a 02                	push   0x2
c0016ce5:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016cec:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016cf1:	e8 36 f5 ff ff       	call   c001622c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cf6:	83 c4 1c             	add    esp,0x1c
c0016cf9:	eb 90                	jmp    c0016c8b <Vm::mainloop2()>

c0016cfb <Vm::initialise8086()>:
c0016cfb:	83 ec 0c             	sub    esp,0xc
c0016cfe:	68 80 00 00 00       	push   0x80
c0016d03:	6a 00                	push   0x0
c0016d05:	68 c5 6c 01 c0       	push   0xc0016cc5
c0016d0a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d10:	e8 db f0 ff ff       	call   c0015df0 <Process::createThread(void (*)(void*), void*, int)>
c0016d15:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d1c:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d21:	68 00 01 00 00       	push   0x100
c0016d26:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d2b:	6a 00                	push   0x0
c0016d2d:	6a 00                	push   0x0
c0016d2f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d35:	e8 e0 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d3a:	83 c4 2c             	add    esp,0x2c
c0016d3d:	c3                   	ret    

c0016d3e <Vm::finish8086()>:
c0016d3e:	53                   	push   ebx
c0016d3f:	83 ec 08             	sub    esp,0x8
c0016d42:	fa                   	cli    
c0016d43:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d49:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d50:	75 15                	jne    c0016d67 <Vm::finish8086()+0x29>
c0016d52:	e8 e9 f2 ff ff       	call   c0016040 <schedule()>
c0016d57:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d5c:	48                   	dec    eax
c0016d5d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d62:	75 de                	jne    c0016d42 <Vm::finish8086()+0x4>
c0016d64:	fb                   	sti    
c0016d65:	eb db                	jmp    c0016d42 <Vm::finish8086()+0x4>
c0016d67:	83 ec 0c             	sub    esp,0xc
c0016d6a:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016d70:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016d76:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016d7d:	e8 d6 f7 ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c0016d82:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016d8d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d93:	85 d2                	test   edx,edx
c0016d95:	75 01                	jne    c0016d98 <Vm::finish8086()+0x5a>
c0016d97:	fb                   	sti    
c0016d98:	89 d8                	mov    eax,ebx
c0016d9a:	83 c4 08             	add    esp,0x8
c0016d9d:	5b                   	pop    ebx
c0016d9e:	c3                   	ret    

c0016d9f <Vm::getOutput8086(unsigned char*)>:
c0016d9f:	57                   	push   edi
c0016da0:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016da6:	56                   	push   esi
c0016da7:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016dac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016db0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016db2:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016db7:	5e                   	pop    esi
c0016db8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016dc2:	5f                   	pop    edi
c0016dc3:	c3                   	ret    

c0016dc4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016dc4:	55                   	push   ebp
c0016dc5:	57                   	push   edi
c0016dc6:	56                   	push   esi
c0016dc7:	53                   	push   ebx
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016dcf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016dd3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016dd7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016ddb:	fa                   	cli    
c0016ddc:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016de2:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016de9:	75 15                	jne    c0016e00 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016deb:	e8 50 f2 ff ff       	call   c0016040 <schedule()>
c0016df0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016df5:	48                   	dec    eax
c0016df6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dfb:	75 de                	jne    c0016ddb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016dfd:	fb                   	sti    
c0016dfe:	eb db                	jmp    c0016ddb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e00:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e05:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e0f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e13:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e17:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e1b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e1f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e23:	0f b7 ff             	movzx  edi,di
c0016e26:	0f b7 f6             	movzx  esi,si
c0016e29:	50                   	push   eax
c0016e2a:	6a 20                	push   0x20
c0016e2c:	6a 00                	push   0x0
c0016e2e:	68 40 c7 02 c0       	push   0xc002c740
c0016e33:	e8 b8 96 fe ff       	call   c00004f0 <memset>
c0016e38:	5a                   	pop    edx
c0016e39:	59                   	pop    ecx
c0016e3a:	57                   	push   edi
c0016e3b:	56                   	push   esi
c0016e3c:	e8 2d fe ff ff       	call   c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	89 c7                	mov    edi,eax
c0016e46:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e50:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e55:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016e5c:	48                   	dec    eax
c0016e5d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e62:	75 01                	jne    c0016e65 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016e64:	fb                   	sti    
c0016e65:	83 ec 0c             	sub    esp,0xc
c0016e68:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e6e:	e8 e5 f6 ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c0016e73:	83 c4 1c             	add    esp,0x1c
c0016e76:	b0 01                	mov    al,0x1
c0016e78:	5b                   	pop    ebx
c0016e79:	5e                   	pop    esi
c0016e7a:	5f                   	pop    edi
c0016e7b:	5d                   	pop    ebp
c0016e7c:	c3                   	ret    

c0016e7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e7d:	55                   	push   ebp
c0016e7e:	57                   	push   edi
c0016e7f:	56                   	push   esi
c0016e80:	53                   	push   ebx
c0016e81:	83 ec 34             	sub    esp,0x34
c0016e84:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016e88:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e8c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e90:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e9c:	68 a8 29 02 c0       	push   0xc00229a8
c0016ea1:	e8 9f 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	fa                   	cli    
c0016eaa:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016eb0:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016eb6:	84 db                	test   bl,bl
c0016eb8:	75 15                	jne    c0016ecf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016eba:	e8 81 f1 ff ff       	call   c0016040 <schedule()>
c0016ebf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ec4:	48                   	dec    eax
c0016ec5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eca:	75 dd                	jne    c0016ea9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ecc:	fb                   	sti    
c0016ecd:	eb da                	jmp    c0016ea9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ecf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ed3:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ed8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ee2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016ee6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016eea:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016eee:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016ef2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016ef6:	50                   	push   eax
c0016ef7:	6a 20                	push   0x20
c0016ef9:	6a 00                	push   0x0
c0016efb:	68 40 c7 02 c0       	push   0xc002c740
c0016f00:	e8 eb 95 fe ff       	call   c00004f0 <memset>
c0016f05:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f0c:	e8 a5 0b ff ff       	call   c0007ab6 <malloc>
c0016f11:	83 c4 0c             	add    esp,0xc
c0016f14:	89 c5                	mov    ebp,eax
c0016f16:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f20:	50                   	push   eax
c0016f21:	e8 c4 4b ff ff       	call   c000baea <File::File(char const*, Process*)>
c0016f26:	83 c4 10             	add    esp,0x10
c0016f29:	85 ed                	test   ebp,ebp
c0016f2b:	75 0a                	jne    c0016f37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f2d:	83 ec 0c             	sub    esp,0xc
c0016f30:	68 ca 29 02 c0       	push   0xc00229ca
c0016f35:	eb 2b                	jmp    c0016f62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f37:	50                   	push   eax
c0016f38:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f3c:	50                   	push   eax
c0016f3d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f41:	50                   	push   eax
c0016f42:	55                   	push   ebp
c0016f43:	e8 c2 4e ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0016f48:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f4c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016f58:	74 27                	je     c0016f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	68 de 29 02 c0       	push   0xc00229de
c0016f62:	e8 54 a6 ff ff       	call   c00115bb <KePanic(char const*)>
c0016f67:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f6c:	83 c4 10             	add    esp,0x10
c0016f6f:	48                   	dec    eax
c0016f70:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f75:	85 c0                	test   eax,eax
c0016f77:	75 01                	jne    c0016f7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f79:	fb                   	sti    
c0016f7a:	31 db                	xor    ebx,ebx
c0016f7c:	e9 90 00 00 00       	jmp    c0017011 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f81:	51                   	push   ecx
c0016f82:	51                   	push   ecx
c0016f83:	6a 01                	push   0x1
c0016f85:	55                   	push   ebp
c0016f86:	e8 7d 4b ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c0016f8b:	83 c4 10             	add    esp,0x10
c0016f8e:	85 c0                	test   eax,eax
c0016f90:	74 26                	je     c0016fb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f92:	83 ec 0c             	sub    esp,0xc
c0016f95:	68 f7 29 02 c0       	push   0xc00229f7
c0016f9a:	e8 1c a6 ff ff       	call   c00115bb <KePanic(char const*)>
c0016f9f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	48                   	dec    eax
c0016fa8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fad:	85 c0                	test   eax,eax
c0016faf:	75 c9                	jne    c0016f7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fb1:	fb                   	sti    
c0016fb2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016fb6:	eb 59                	jmp    c0017011 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fb8:	0f b7 ff             	movzx  edi,di
c0016fbb:	50                   	push   eax
c0016fbc:	0f b7 f6             	movzx  esi,si
c0016fbf:	50                   	push   eax
c0016fc0:	57                   	push   edi
c0016fc1:	56                   	push   esi
c0016fc2:	e8 a7 fc ff ff       	call   c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>
c0016fc7:	5a                   	pop    edx
c0016fc8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016fcb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016fcf:	51                   	push   ecx
c0016fd0:	50                   	push   eax
c0016fd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fd5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fd9:	55                   	push   ebp
c0016fda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016fdd:	83 c4 14             	add    esp,0x14
c0016fe0:	55                   	push   ebp
c0016fe1:	e8 80 4b ff ff       	call   c000bb66 <File::close()>
c0016fe6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016feb:	83 c4 10             	add    esp,0x10
c0016fee:	48                   	dec    eax
c0016fef:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ff6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ffb:	85 c0                	test   eax,eax
c0016ffd:	75 01                	jne    c0017000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016fff:	fb                   	sti    
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017009:	e8 4a f5 ff ff       	call   c0016558 <unblockTask(ThreadControlBlock*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	83 c4 2c             	add    esp,0x2c
c0017014:	88 d8                	mov    al,bl
c0017016:	5b                   	pop    ebx
c0017017:	5e                   	pop    esi
c0017018:	5f                   	pop    edi
c0017019:	5d                   	pop    ebp
c001701a:	c3                   	ret    

c001701b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001701b:	57                   	push   edi
c001701c:	56                   	push   esi
c001701d:	53                   	push   ebx
c001701e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017026:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001702a:	83 e8 06             	sub    eax,0x6
c001702d:	0f b7 c0             	movzx  eax,ax
c0017030:	50                   	push   eax
c0017031:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017036:	50                   	push   eax
c0017037:	e8 32 fc ff ff       	call   c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>
c001703c:	5a                   	pop    edx
c001703d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017040:	59                   	pop    ecx
c0017041:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017044:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017047:	81 e2 ff ff 00 00    	and    edx,0xffff
c001704d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017050:	8d 56 02             	lea    edx,[esi+0x2]
c0017053:	66 89 10             	mov    WORD PTR [eax],dx
c0017056:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001705a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001705e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017061:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017065:	0f b6 f1             	movzx  esi,cl
c0017068:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001706c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017072:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017076:	0f b6 d5             	movzx  edx,ch
c0017079:	74 0a                	je     c0017085 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001707b:	c1 e2 08             	shl    edx,0x8
c001707e:	09 f2                	or     edx,esi
c0017080:	80 ce 02             	or     dh,0x2
c0017083:	eb 08                	jmp    c001708d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017085:	c1 e2 08             	shl    edx,0x8
c0017088:	09 f2                	or     edx,esi
c001708a:	80 e6 fd             	and    dh,0xfd
c001708d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017091:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017096:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001709a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170a2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170a5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170ad:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170b0:	5b                   	pop    ebx
c00170b1:	5e                   	pop    esi
c00170b2:	5f                   	pop    edi
c00170b3:	c3                   	ret    

c00170b4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170be:	c1 e0 04             	shl    eax,0x4
c00170c1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00170c4:	c3                   	ret    

c00170c5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00170c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170ca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170cf:	c1 e0 04             	shl    eax,0x4
c00170d2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00170d6:	c3                   	ret    

c00170d7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00170d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170e1:	c1 e0 04             	shl    eax,0x4
c00170e4:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00170e7:	c3                   	ret    

c00170e8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00170e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00170ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00170f2:	c1 e0 04             	shl    eax,0x4
c00170f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170f9:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00170fc:	c3                   	ret    

c00170fd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00170fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017102:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017107:	c1 e0 04             	shl    eax,0x4
c001710a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001710e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017112:	c3                   	ret    

c0017113 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017113:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017118:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001711d:	c1 e0 04             	shl    eax,0x4
c0017120:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017124:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017127:	c3                   	ret    

c0017128 <Vm::faultHandler(regs*)>:
c0017128:	55                   	push   ebp
c0017129:	57                   	push   edi
c001712a:	56                   	push   esi
c001712b:	53                   	push   ebx
c001712c:	83 ec 2c             	sub    esp,0x2c
c001712f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017133:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017136:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001713a:	0f b7 f8             	movzx  edi,ax
c001713d:	52                   	push   edx
c001713e:	0f b7 c0             	movzx  eax,ax
c0017141:	50                   	push   eax
c0017142:	e8 27 fb ff ff       	call   c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>
c0017147:	5a                   	pop    edx
c0017148:	59                   	pop    ecx
c0017149:	89 c1                	mov    ecx,eax
c001714b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001714e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017152:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001715b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001715e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017162:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017167:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001716b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001716f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017173:	e8 f6 fa ff ff       	call   c0016c6e <Vm::realToLinear(unsigned short, unsigned short)>
c0017178:	5e                   	pop    esi
c0017179:	be 06 00 00 00       	mov    esi,0x6
c001717e:	5d                   	pop    ebp
c001717f:	31 ed                	xor    ebp,ebp
c0017181:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017186:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017189:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001718f:	0f 84 74 02 00 00    	je     c0017409 <Vm::faultHandler(regs*)+0x2e1>
c0017195:	0f 87 94 00 00 00    	ja     c001722f <Vm::faultHandler(regs*)+0x107>
c001719b:	83 fa 66             	cmp    edx,0x66
c001719e:	0f 84 e2 01 00 00    	je     c0017386 <Vm::faultHandler(regs*)+0x25e>
c00171a4:	77 47                	ja     c00171ed <Vm::faultHandler(regs*)+0xc5>
c00171a6:	83 fa 36             	cmp    edx,0x36
c00171a9:	0f 84 ca 01 00 00    	je     c0017379 <Vm::faultHandler(regs*)+0x251>
c00171af:	77 1a                	ja     c00171cb <Vm::faultHandler(regs*)+0xa3>
c00171b1:	83 fa 26             	cmp    edx,0x26
c00171b4:	0f 84 98 01 00 00    	je     c0017352 <Vm::faultHandler(regs*)+0x22a>
c00171ba:	83 fa 2e             	cmp    edx,0x2e
c00171bd:	0f 85 21 06 00 00    	jne    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c00171c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171c6:	31 f6                	xor    esi,esi
c00171c8:	41                   	inc    ecx
c00171c9:	eb bb                	jmp    c0017186 <Vm::faultHandler(regs*)+0x5e>
c00171cb:	83 fa 64             	cmp    edx,0x64
c00171ce:	0f 84 8b 01 00 00    	je     c001735f <Vm::faultHandler(regs*)+0x237>
c00171d4:	0f 87 92 01 00 00    	ja     c001736c <Vm::faultHandler(regs*)+0x244>
c00171da:	83 fa 3e             	cmp    edx,0x3e
c00171dd:	0f 85 01 06 00 00    	jne    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c00171e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00171e6:	be 01 00 00 00       	mov    esi,0x1
c00171eb:	eb db                	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c00171ed:	83 fa 6d             	cmp    edx,0x6d
c00171f0:	0f 84 34 03 00 00    	je     c001752a <Vm::faultHandler(regs*)+0x402>
c00171f6:	77 17                	ja     c001720f <Vm::faultHandler(regs*)+0xe7>
c00171f8:	83 fa 67             	cmp    edx,0x67
c00171fb:	0f 84 92 01 00 00    	je     c0017393 <Vm::faultHandler(regs*)+0x26b>
c0017201:	83 fa 6c             	cmp    edx,0x6c
c0017204:	0f 84 b1 02 00 00    	je     c00174bb <Vm::faultHandler(regs*)+0x393>
c001720a:	e9 d5 05 00 00       	jmp    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c001720f:	83 fa 6f             	cmp    edx,0x6f
c0017212:	0f 84 3d 04 00 00    	je     c0017655 <Vm::faultHandler(regs*)+0x52d>
c0017218:	0f 82 9f 03 00 00    	jb     c00175bd <Vm::faultHandler(regs*)+0x495>
c001721e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017224:	0f 84 76 01 00 00    	je     c00173a0 <Vm::faultHandler(regs*)+0x278>
c001722a:	e9 b5 05 00 00       	jmp    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c001722f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017235:	0f 84 51 05 00 00    	je     c001778c <Vm::faultHandler(regs*)+0x664>
c001723b:	0f 87 a9 00 00 00    	ja     c00172ea <Vm::faultHandler(regs*)+0x1c2>
c0017241:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017247:	0f 84 d0 04 00 00    	je     c001771d <Vm::faultHandler(regs*)+0x5f5>
c001724d:	77 78                	ja     c00172c7 <Vm::faultHandler(regs*)+0x19f>
c001724f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017255:	0f 84 0e 02 00 00    	je     c0017469 <Vm::faultHandler(regs*)+0x341>
c001725b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017261:	0f 85 7d 05 00 00    	jne    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c0017267:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001726b:	89 d1                	mov    ecx,edx
c001726d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017270:	c1 e1 08             	shl    ecx,0x8
c0017273:	09 ca                	or     edx,ecx
c0017275:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017278:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001727c:	89 d1                	mov    ecx,edx
c001727e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017282:	c1 e1 08             	shl    ecx,0x8
c0017285:	09 ca                	or     edx,ecx
c0017287:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001728a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001728e:	89 d1                	mov    ecx,edx
c0017290:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017294:	c1 e1 08             	shl    ecx,0x8
c0017297:	09 ca                	or     edx,ecx
c0017299:	81 ca 00 02 02 00    	or     edx,0x20200
c001729f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172a2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172ac:	d1 e8                	shr    eax,1
c00172ae:	83 e0 01             	and    eax,0x1
c00172b1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172b7:	83 c0 06             	add    eax,0x6
c00172ba:	25 ff ff 00 00       	and    eax,0xffff
c00172bf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00172c2:	e9 19 05 00 00       	jmp    c00177e0 <Vm::faultHandler(regs*)+0x6b8>
c00172c7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00172cd:	0f 84 8f 04 00 00    	je     c0017762 <Vm::faultHandler(regs*)+0x63a>
c00172d3:	0f 82 60 04 00 00    	jb     c0017739 <Vm::faultHandler(regs*)+0x611>
c00172d9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00172df:	0f 84 94 04 00 00    	je     c0017779 <Vm::faultHandler(regs*)+0x651>
c00172e5:	e9 fa 04 00 00       	jmp    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c00172ea:	81 fa ef 00 00 00    	cmp    edx,0xef
c00172f0:	0f 84 d7 04 00 00    	je     c00177cd <Vm::faultHandler(regs*)+0x6a5>
c00172f6:	77 2e                	ja     c0017326 <Vm::faultHandler(regs*)+0x1fe>
c00172f8:	81 fa ed 00 00 00    	cmp    edx,0xed
c00172fe:	0f 84 a4 04 00 00    	je     c00177a8 <Vm::faultHandler(regs*)+0x680>
c0017304:	81 fa ee 00 00 00    	cmp    edx,0xee
c001730a:	0f 85 d4 04 00 00    	jne    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c0017310:	50                   	push   eax
c0017311:	50                   	push   eax
c0017312:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017316:	50                   	push   eax
c0017317:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001731b:	50                   	push   eax
c001731c:	e8 17 f9 ff ff       	call   c0016c38 <Vm::outbv(unsigned short, unsigned char)>
c0017321:	e9 9f 04 00 00       	jmp    c00177c5 <Vm::faultHandler(regs*)+0x69d>
c0017326:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001732c:	0f 84 6d 01 00 00    	je     c001749f <Vm::faultHandler(regs*)+0x377>
c0017332:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017338:	0f 84 6f 01 00 00    	je     c00174ad <Vm::faultHandler(regs*)+0x385>
c001733e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017344:	0f 85 9a 04 00 00    	jne    c00177e4 <Vm::faultHandler(regs*)+0x6bc>
c001734a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001734d:	e9 76 fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c0017352:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017355:	be 02 00 00 00       	mov    esi,0x2
c001735a:	e9 69 fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c001735f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017362:	be 03 00 00 00       	mov    esi,0x3
c0017367:	e9 5c fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c001736c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001736f:	be 04 00 00 00       	mov    esi,0x4
c0017374:	e9 4f fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c0017379:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001737c:	be 05 00 00 00       	mov    esi,0x5
c0017381:	e9 42 fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c0017386:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017389:	bd 01 00 00 00       	mov    ebp,0x1
c001738e:	e9 35 fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c0017393:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017396:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001739b:	e9 28 fe ff ff       	jmp    c00171c8 <Vm::faultHandler(regs*)+0xa0>
c00173a0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173a7:	83 e5 01             	and    ebp,0x1
c00173aa:	74 30                	je     c00173dc <Vm::faultHandler(regs*)+0x2b4>
c00173ac:	83 e9 04             	sub    ecx,0x4
c00173af:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173b5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173bb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173be:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173c7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173cb:	0f 84 0c 04 00 00    	je     c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00173d1:	80 ce 02             	or     dh,0x2
c00173d4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00173d7:	e9 01 04 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00173dc:	83 e9 02             	sub    ecx,0x2
c00173df:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00173e5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00173e8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00173ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00173f2:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00173f6:	74 05                	je     c00173fd <Vm::faultHandler(regs*)+0x2d5>
c00173f8:	80 ce 02             	or     dh,0x2
c00173fb:	eb 03                	jmp    c0017400 <Vm::faultHandler(regs*)+0x2d8>
c00173fd:	80 e6 fd             	and    dh,0xfd
c0017400:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017404:	e9 d4 03 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c0017409:	83 e5 01             	and    ebp,0x1
c001740c:	74 2a                	je     c0017438 <Vm::faultHandler(regs*)+0x310>
c001740e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017410:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017416:	81 ca 00 02 02 00    	or     edx,0x20200
c001741c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001741f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017421:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017427:	c1 e8 09             	shr    eax,0x9
c001742a:	83 e0 01             	and    eax,0x1
c001742d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017430:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017433:	83 c0 04             	add    eax,0x4
c0017436:	eb 24                	jmp    c001745c <Vm::faultHandler(regs*)+0x334>
c0017438:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001743b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017441:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017444:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017447:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001744d:	c1 e8 09             	shr    eax,0x9
c0017450:	83 e0 01             	and    eax,0x1
c0017453:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017456:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017459:	83 c0 02             	add    eax,0x2
c001745c:	25 ff ff 00 00       	and    eax,0xffff
c0017461:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017464:	e9 74 03 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c0017469:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001746d:	3d ee 00 00 00       	cmp    eax,0xee
c0017472:	75 10                	jne    c0017484 <Vm::faultHandler(regs*)+0x35c>
c0017474:	83 ec 0c             	sub    esp,0xc
c0017477:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001747a:	e8 56 f8 ff ff       	call   c0016cd5 <Vm::mainloop3(unsigned long)>
c001747f:	e9 44 03 00 00       	jmp    c00177c8 <Vm::faultHandler(regs*)+0x6a0>
c0017484:	83 ec 0c             	sub    esp,0xc
c0017487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001748b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001748f:	51                   	push   ecx
c0017490:	50                   	push   eax
c0017491:	53                   	push   ebx
c0017492:	e8 84 fb ff ff       	call   c001701b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017497:	83 c4 20             	add    esp,0x20
c001749a:	e9 41 03 00 00       	jmp    c00177e0 <Vm::faultHandler(regs*)+0x6b8>
c001749f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174a4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174a8:	e9 30 03 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00174ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174b2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174b6:	e9 22 03 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00174bb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174be:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174c3:	74 2b                	je     c00174f0 <Vm::faultHandler(regs*)+0x3c8>
c00174c5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00174cc:	76 22                	jbe    c00174f0 <Vm::faultHandler(regs*)+0x3c8>
c00174ce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174d2:	50                   	push   eax
c00174d3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174d7:	50                   	push   eax
c00174d8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174dc:	50                   	push   eax
c00174dd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174e1:	50                   	push   eax
c00174e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174e6:	50                   	push   eax
c00174e7:	6a 6c                	push   0x6c
c00174e9:	6a 6c                	push   0x6c
c00174eb:	e9 bd 01 00 00       	jmp    c00176ad <Vm::faultHandler(regs*)+0x585>
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174f7:	0f b7 f6             	movzx  esi,si
c00174fa:	50                   	push   eax
c00174fb:	e8 25 f7 ff ff       	call   c0016c25 <Vm::inbv(unsigned short)>
c0017500:	83 c4 0c             	add    esp,0xc
c0017503:	0f b6 c0             	movzx  eax,al
c0017506:	50                   	push   eax
c0017507:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001750b:	50                   	push   eax
c001750c:	56                   	push   esi
c001750d:	e8 d6 fb ff ff       	call   c00170e8 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017512:	83 c4 10             	add    esp,0x10
c0017515:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017518:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001751c:	74 03                	je     c0017521 <Vm::faultHandler(regs*)+0x3f9>
c001751e:	48                   	dec    eax
c001751f:	eb 01                	jmp    c0017522 <Vm::faultHandler(regs*)+0x3fa>
c0017521:	40                   	inc    eax
c0017522:	0f b7 c0             	movzx  eax,ax
c0017525:	e9 8b 00 00 00       	jmp    c00175b5 <Vm::faultHandler(regs*)+0x48d>
c001752a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001752d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017530:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017535:	74 29                	je     c0017560 <Vm::faultHandler(regs*)+0x438>
c0017537:	3d ff ff 00 00       	cmp    eax,0xffff
c001753c:	76 22                	jbe    c0017560 <Vm::faultHandler(regs*)+0x438>
c001753e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017542:	50                   	push   eax
c0017543:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017547:	50                   	push   eax
c0017548:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001754c:	50                   	push   eax
c001754d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017551:	50                   	push   eax
c0017552:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017556:	50                   	push   eax
c0017557:	6a 6d                	push   0x6d
c0017559:	6a 6d                	push   0x6d
c001755b:	e9 4d 01 00 00       	jmp    c00176ad <Vm::faultHandler(regs*)+0x585>
c0017560:	0f b7 c8             	movzx  ecx,ax
c0017563:	0f b7 f6             	movzx  esi,si
c0017566:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017569:	83 e5 01             	and    ebp,0x1
c001756c:	74 20                	je     c001758e <Vm::faultHandler(regs*)+0x466>
c001756e:	ed                   	in     eax,dx
c001756f:	55                   	push   ebp
c0017570:	50                   	push   eax
c0017571:	51                   	push   ecx
c0017572:	56                   	push   esi
c0017573:	e8 9b fb ff ff       	call   c0017113 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017578:	83 c4 10             	add    esp,0x10
c001757b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001757e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017582:	74 05                	je     c0017589 <Vm::faultHandler(regs*)+0x461>
c0017584:	83 e8 04             	sub    eax,0x4
c0017587:	eb 27                	jmp    c00175b0 <Vm::faultHandler(regs*)+0x488>
c0017589:	83 c0 04             	add    eax,0x4
c001758c:	eb 22                	jmp    c00175b0 <Vm::faultHandler(regs*)+0x488>
c001758e:	66 ed                	in     ax,dx
c0017590:	0f b7 c0             	movzx  eax,ax
c0017593:	57                   	push   edi
c0017594:	50                   	push   eax
c0017595:	51                   	push   ecx
c0017596:	56                   	push   esi
c0017597:	e8 61 fb ff ff       	call   c00170fd <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175a2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175a6:	74 05                	je     c00175ad <Vm::faultHandler(regs*)+0x485>
c00175a8:	83 e8 02             	sub    eax,0x2
c00175ab:	eb 03                	jmp    c00175b0 <Vm::faultHandler(regs*)+0x488>
c00175ad:	83 c0 02             	add    eax,0x2
c00175b0:	25 ff ff 00 00       	and    eax,0xffff
c00175b5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00175b8:	e9 20 02 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00175bd:	8d 46 ff             	lea    eax,[esi-0x1]
c00175c0:	0f b6 f0             	movzx  esi,al
c00175c3:	83 fe 05             	cmp    esi,0x5
c00175c6:	77 23                	ja     c00175eb <Vm::faultHandler(regs*)+0x4c3>
c00175c8:	ff 24 b5 6c 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd594]
c00175cf:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00175d4:	eb 15                	jmp    c00175eb <Vm::faultHandler(regs*)+0x4c3>
c00175d6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00175da:	eb 0f                	jmp    c00175eb <Vm::faultHandler(regs*)+0x4c3>
c00175dc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00175e0:	eb 09                	jmp    c00175eb <Vm::faultHandler(regs*)+0x4c3>
c00175e2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00175e6:	eb 03                	jmp    c00175eb <Vm::faultHandler(regs*)+0x4c3>
c00175e8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00175eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175ee:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175f3:	74 29                	je     c001761e <Vm::faultHandler(regs*)+0x4f6>
c00175f5:	3d ff ff 00 00       	cmp    eax,0xffff
c00175fa:	76 22                	jbe    c001761e <Vm::faultHandler(regs*)+0x4f6>
c00175fc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017600:	50                   	push   eax
c0017601:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017605:	50                   	push   eax
c0017606:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001760a:	50                   	push   eax
c001760b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001760f:	50                   	push   eax
c0017610:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017614:	50                   	push   eax
c0017615:	6a 6e                	push   0x6e
c0017617:	6a 6e                	push   0x6e
c0017619:	e9 8f 00 00 00       	jmp    c00176ad <Vm::faultHandler(regs*)+0x585>
c001761e:	0f b7 c0             	movzx  eax,ax
c0017621:	52                   	push   edx
c0017622:	52                   	push   edx
c0017623:	50                   	push   eax
c0017624:	57                   	push   edi
c0017625:	e8 8a fa ff ff       	call   c00170b4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001762a:	59                   	pop    ecx
c001762b:	0f b6 c0             	movzx  eax,al
c001762e:	5e                   	pop    esi
c001762f:	50                   	push   eax
c0017630:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017634:	50                   	push   eax
c0017635:	e8 fe f5 ff ff       	call   c0016c38 <Vm::outbv(unsigned short, unsigned char)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017640:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017644:	74 03                	je     c0017649 <Vm::faultHandler(regs*)+0x521>
c0017646:	48                   	dec    eax
c0017647:	eb 01                	jmp    c001764a <Vm::faultHandler(regs*)+0x522>
c0017649:	40                   	inc    eax
c001764a:	0f b7 c0             	movzx  eax,ax
c001764d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017650:	e9 88 01 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c0017655:	8d 46 ff             	lea    eax,[esi-0x1]
c0017658:	0f b6 f0             	movzx  esi,al
c001765b:	83 fe 05             	cmp    esi,0x5
c001765e:	77 1e                	ja     c001767e <Vm::faultHandler(regs*)+0x556>
c0017660:	ff 24 b5 84 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd57c]
c0017667:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001766b:	eb 11                	jmp    c001767e <Vm::faultHandler(regs*)+0x556>
c001766d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017670:	eb 0c                	jmp    c001767e <Vm::faultHandler(regs*)+0x556>
c0017672:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017675:	eb 07                	jmp    c001767e <Vm::faultHandler(regs*)+0x556>
c0017677:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001767a:	eb 02                	jmp    c001767e <Vm::faultHandler(regs*)+0x556>
c001767c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001767e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017681:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017686:	74 37                	je     c00176bf <Vm::faultHandler(regs*)+0x597>
c0017688:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001768e:	76 2f                	jbe    c00176bf <Vm::faultHandler(regs*)+0x597>
c0017690:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017694:	50                   	push   eax
c0017695:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017699:	50                   	push   eax
c001769a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001769e:	50                   	push   eax
c001769f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176a3:	50                   	push   eax
c00176a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176a8:	50                   	push   eax
c00176a9:	6a 6f                	push   0x6f
c00176ab:	6a 6f                	push   0x6f
c00176ad:	68 10 2a 02 c0       	push   0xc0022a10
c00176b2:	e8 8e 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176b7:	83 c4 20             	add    esp,0x20
c00176ba:	e9 83 01 00 00       	jmp    c0017842 <Vm::faultHandler(regs*)+0x71a>
c00176bf:	0f b7 d7             	movzx  edx,di
c00176c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00176c5:	0f b7 c6             	movzx  eax,si
c00176c8:	81 e1 00 04 00 00    	and    ecx,0x400
c00176ce:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00176d1:	83 e5 01             	and    ebp,0x1
c00176d4:	74 1d                	je     c00176f3 <Vm::faultHandler(regs*)+0x5cb>
c00176d6:	55                   	push   ebp
c00176d7:	55                   	push   ebp
c00176d8:	50                   	push   eax
c00176d9:	52                   	push   edx
c00176da:	e8 f8 f9 ff ff       	call   c00170d7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	89 fa                	mov    edx,edi
c00176e4:	ef                   	out    dx,eax
c00176e5:	85 c9                	test   ecx,ecx
c00176e7:	74 05                	je     c00176ee <Vm::faultHandler(regs*)+0x5c6>
c00176e9:	83 ee 04             	sub    esi,0x4
c00176ec:	eb 21                	jmp    c001770f <Vm::faultHandler(regs*)+0x5e7>
c00176ee:	83 c6 04             	add    esi,0x4
c00176f1:	eb 1c                	jmp    c001770f <Vm::faultHandler(regs*)+0x5e7>
c00176f3:	55                   	push   ebp
c00176f4:	55                   	push   ebp
c00176f5:	50                   	push   eax
c00176f6:	52                   	push   edx
c00176f7:	e8 c9 f9 ff ff       	call   c00170c5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00176fc:	83 c4 10             	add    esp,0x10
c00176ff:	89 fa                	mov    edx,edi
c0017701:	66 ef                	out    dx,ax
c0017703:	85 c9                	test   ecx,ecx
c0017705:	74 05                	je     c001770c <Vm::faultHandler(regs*)+0x5e4>
c0017707:	83 ee 02             	sub    esi,0x2
c001770a:	eb 03                	jmp    c001770f <Vm::faultHandler(regs*)+0x5e7>
c001770c:	83 c6 02             	add    esi,0x2
c001770f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017715:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017718:	e9 c0 00 00 00       	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c001771d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001772b:	50                   	push   eax
c001772c:	e8 f4 f4 ff ff       	call   c0016c25 <Vm::inbv(unsigned short)>
c0017731:	0f b6 c0             	movzx  eax,al
c0017734:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017737:	eb 3a                	jmp    c0017773 <Vm::faultHandler(regs*)+0x64b>
c0017739:	83 e5 01             	and    ebp,0x1
c001773c:	74 07                	je     c0017745 <Vm::faultHandler(regs*)+0x61d>
c001773e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017742:	ed                   	in     eax,dx
c0017743:	eb 14                	jmp    c0017759 <Vm::faultHandler(regs*)+0x631>
c0017745:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017748:	66 31 f6             	xor    si,si
c001774b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001774e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017752:	66 ed                	in     ax,dx
c0017754:	0f b7 c0             	movzx  eax,ax
c0017757:	09 f0                	or     eax,esi
c0017759:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001775c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017760:	eb 7e                	jmp    c00177e0 <Vm::faultHandler(regs*)+0x6b8>
c0017762:	52                   	push   edx
c0017763:	52                   	push   edx
c0017764:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017768:	50                   	push   eax
c0017769:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001776d:	50                   	push   eax
c001776e:	e8 c5 f4 ff ff       	call   c0016c38 <Vm::outbv(unsigned short, unsigned char)>
c0017773:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017777:	eb 4f                	jmp    c00177c8 <Vm::faultHandler(regs*)+0x6a0>
c0017779:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001777c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017780:	83 e5 01             	and    ebp,0x1
c0017783:	74 03                	je     c0017788 <Vm::faultHandler(regs*)+0x660>
c0017785:	ef                   	out    dx,eax
c0017786:	eb d4                	jmp    c001775c <Vm::faultHandler(regs*)+0x634>
c0017788:	66 ef                	out    dx,ax
c001778a:	eb d0                	jmp    c001775c <Vm::faultHandler(regs*)+0x634>
c001778c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017793:	83 ec 0c             	sub    esp,0xc
c0017796:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001779a:	50                   	push   eax
c001779b:	e8 85 f4 ff ff       	call   c0016c25 <Vm::inbv(unsigned short)>
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177a6:	eb 1d                	jmp    c00177c5 <Vm::faultHandler(regs*)+0x69d>
c00177a8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177ab:	83 e5 01             	and    ebp,0x1
c00177ae:	74 03                	je     c00177b3 <Vm::faultHandler(regs*)+0x68b>
c00177b0:	ed                   	in     eax,dx
c00177b1:	eb 0d                	jmp    c00177c0 <Vm::faultHandler(regs*)+0x698>
c00177b3:	66 ed                	in     ax,dx
c00177b5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00177b8:	0f b7 c0             	movzx  eax,ax
c00177bb:	66 31 d2             	xor    dx,dx
c00177be:	09 d0                	or     eax,edx
c00177c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177c3:	eb 18                	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00177c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	eb 13                	jmp    c00177e0 <Vm::faultHandler(regs*)+0x6b8>
c00177cd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177d0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177d3:	83 e5 01             	and    ebp,0x1
c00177d6:	74 03                	je     c00177db <Vm::faultHandler(regs*)+0x6b3>
c00177d8:	ef                   	out    dx,eax
c00177d9:	eb 02                	jmp    c00177dd <Vm::faultHandler(regs*)+0x6b5>
c00177db:	66 ef                	out    dx,ax
c00177dd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00177e0:	b0 01                	mov    al,0x1
c00177e2:	eb 60                	jmp    c0017844 <Vm::faultHandler(regs*)+0x71c>
c00177e4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177e8:	50                   	push   eax
c00177e9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177ed:	50                   	push   eax
c00177ee:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177f2:	50                   	push   eax
c00177f3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177f7:	50                   	push   eax
c00177f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177fc:	50                   	push   eax
c00177fd:	52                   	push   edx
c00177fe:	52                   	push   edx
c00177ff:	68 3d 2a 02 c0       	push   0xc0022a3d
c0017804:	e8 3c 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017809:	83 c4 20             	add    esp,0x20
c001780c:	83 ec 0c             	sub    esp,0xc
c001780f:	6a 60                	push   0x60
c0017811:	e8 0f f4 ff ff       	call   c0016c25 <Vm::inbv(unsigned short)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	0f b6 d0             	movzx  edx,al
c001781c:	83 fa 1c             	cmp    edx,0x1c
c001781f:	74 05                	je     c0017826 <Vm::faultHandler(regs*)+0x6fe>
c0017821:	83 fa 5a             	cmp    edx,0x5a
c0017824:	75 e6                	jne    c001780c <Vm::faultHandler(regs*)+0x6e4>
c0017826:	0f b6 c0             	movzx  eax,al
c0017829:	83 f8 1c             	cmp    eax,0x1c
c001782c:	74 05                	je     c0017833 <Vm::faultHandler(regs*)+0x70b>
c001782e:	83 f8 5a             	cmp    eax,0x5a
c0017831:	75 0f                	jne    c0017842 <Vm::faultHandler(regs*)+0x71a>
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	6a 60                	push   0x60
c0017838:	e8 e8 f3 ff ff       	call   c0016c25 <Vm::inbv(unsigned short)>
c001783d:	83 c4 10             	add    esp,0x10
c0017840:	eb e4                	jmp    c0017826 <Vm::faultHandler(regs*)+0x6fe>
c0017842:	31 c0                	xor    eax,eax
c0017844:	83 c4 2c             	add    esp,0x2c
c0017847:	5b                   	pop    ebx
c0017848:	5e                   	pop    esi
c0017849:	5f                   	pop    edi
c001784a:	5d                   	pop    ebp
c001784b:	c3                   	ret    

c001784c <noCopro(unsigned long)>:
c001784c:	c3                   	ret    

c001784d <nmiHandler(regs*, void*)>:
c001784d:	83 ec 0c             	sub    esp,0xc
c0017850:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017855:	83 ec 0c             	sub    esp,0xc
c0017858:	50                   	push   eax
c0017859:	e8 58 fa fe ff       	call   c00072b6 <Computer::handleNMI()>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	90                   	nop
c0017862:	83 c4 0c             	add    esp,0xc
c0017865:	c3                   	ret    

c0017866 <doubleFault(regs*, void*)>:
c0017866:	55                   	push   ebp
c0017867:	89 e5                	mov    ebp,esp
c0017869:	83 ec 08             	sub    esp,0x8
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	68 9c 2a 02 c0       	push   0xc0022a9c
c0017874:	e8 42 9d ff ff       	call   c00115bb <KePanic(char const*)>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	90                   	nop
c001787d:	c9                   	leave  
c001787e:	c3                   	ret    

c001787f <displayDebugInfo(regs*)>:
c001787f:	83 ec 1c             	sub    esp,0x1c
c0017882:	0f 20 c0             	mov    eax,cr0
c0017885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017889:	0f 20 d0             	mov    eax,cr2
c001788c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017890:	0f 20 d8             	mov    eax,cr3
c0017893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017897:	0f 20 e0             	mov    eax,cr4
c001789a:	89 04 24             	mov    DWORD PTR [esp],eax
c001789d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178a4:	83 ec 08             	sub    esp,0x8
c00178a7:	50                   	push   eax
c00178a8:	68 b8 2a 02 c0       	push   0xc0022ab8
c00178ad:	e8 93 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178b2:	83 c4 10             	add    esp,0x10
c00178b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00178bc:	83 ec 08             	sub    esp,0x8
c00178bf:	50                   	push   eax
c00178c0:	68 a9 2a 02 c0       	push   0xc0022aa9
c00178c5:	e8 7b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178ca:	83 c4 10             	add    esp,0x10
c00178cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00178d4:	83 ec 08             	sub    esp,0x8
c00178d7:	50                   	push   eax
c00178d8:	68 b4 2a 02 c0       	push   0xc0022ab4
c00178dd:	e8 63 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178ec:	83 ec 08             	sub    esp,0x8
c00178ef:	50                   	push   eax
c00178f0:	68 c3 2a 02 c0       	push   0xc0022ac3
c00178f5:	e8 4b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017901:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017904:	83 ec 08             	sub    esp,0x8
c0017907:	50                   	push   eax
c0017908:	68 ce 2a 02 c0       	push   0xc0022ace
c001790d:	e8 33 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	83 ec 08             	sub    esp,0x8
c0017918:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001791c:	68 d9 2a 02 c0       	push   0xc0022ad9
c0017921:	e8 1f 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	83 ec 08             	sub    esp,0x8
c001792c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017930:	68 e4 2a 02 c0       	push   0xc0022ae4
c0017935:	e8 0b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001793a:	83 c4 10             	add    esp,0x10
c001793d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017941:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017944:	c1 e0 05             	shl    eax,0x5
c0017947:	8d 90 60 3e 02 c0    	lea    edx,[eax-0x3ffdc1a0]
c001794d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017951:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017954:	83 ec 04             	sub    esp,0x4
c0017957:	52                   	push   edx
c0017958:	50                   	push   eax
c0017959:	68 ef 2a 02 c0       	push   0xc0022aef
c001795e:	e8 e2 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001796b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	50                   	push   eax
c0017975:	e8 df 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017982:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017988:	83 ec 08             	sub    esp,0x8
c001798b:	68 fe 2a 02 c0       	push   0xc0022afe
c0017990:	50                   	push   eax
c0017991:	e8 10 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001799e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179a8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179ab:	83 ec 08             	sub    esp,0x8
c00179ae:	52                   	push   edx
c00179af:	50                   	push   eax
c00179b0:	e8 ab 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179c3:	83 ec 08             	sub    esp,0x8
c00179c6:	68 0c 2b 02 c0       	push   0xc0022b0c
c00179cb:	50                   	push   eax
c00179cc:	e8 d5 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179df:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00179e4:	8b 12                	mov    edx,DWORD PTR [edx]
c00179e6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00179e9:	83 c2 0c             	add    edx,0xc
c00179ec:	83 ec 08             	sub    esp,0x8
c00179ef:	52                   	push   edx
c00179f0:	50                   	push   eax
c00179f1:	e8 b0 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a04:	83 ec 08             	sub    esp,0x8
c0017a07:	68 15 2b 02 c0       	push   0xc0022b15
c0017a0c:	50                   	push   eax
c0017a0d:	e8 94 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a24:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a27:	83 ec 08             	sub    esp,0x8
c0017a2a:	52                   	push   edx
c0017a2b:	50                   	push   eax
c0017a2c:	e8 2f 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a3f:	83 ec 08             	sub    esp,0x8
c0017a42:	68 1d 2b 02 c0       	push   0xc0022b1d
c0017a47:	50                   	push   eax
c0017a48:	e8 59 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a55:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a5f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017a62:	83 ec 08             	sub    esp,0x8
c0017a65:	52                   	push   edx
c0017a66:	50                   	push   eax
c0017a67:	e8 f4 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7a:	83 ec 08             	sub    esp,0x8
c0017a7d:	68 25 2b 02 c0       	push   0xc0022b25
c0017a82:	50                   	push   eax
c0017a83:	e8 1e 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a88:	83 c4 10             	add    esp,0x10
c0017a8b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a9a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a9d:	83 ec 08             	sub    esp,0x8
c0017aa0:	52                   	push   edx
c0017aa1:	50                   	push   eax
c0017aa2:	e8 b9 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017aa7:	83 c4 10             	add    esp,0x10
c0017aaa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aaf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab5:	83 ec 08             	sub    esp,0x8
c0017ab8:	68 2d 2b 02 c0       	push   0xc0022b2d
c0017abd:	50                   	push   eax
c0017abe:	e8 e3 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017acb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ad5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ad8:	83 ec 08             	sub    esp,0x8
c0017adb:	52                   	push   edx
c0017adc:	50                   	push   eax
c0017add:	e8 7e 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af0:	83 ec 08             	sub    esp,0x8
c0017af3:	68 35 2b 02 c0       	push   0xc0022b35
c0017af8:	50                   	push   eax
c0017af9:	e8 a8 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b10:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b13:	83 ec 08             	sub    esp,0x8
c0017b16:	52                   	push   edx
c0017b17:	50                   	push   eax
c0017b18:	e8 43 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b1d:	83 c4 10             	add    esp,0x10
c0017b20:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2b:	83 ec 08             	sub    esp,0x8
c0017b2e:	68 3d 2b 02 c0       	push   0xc0022b3d
c0017b33:	50                   	push   eax
c0017b34:	e8 6d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b4b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b4e:	83 ec 08             	sub    esp,0x8
c0017b51:	52                   	push   edx
c0017b52:	50                   	push   eax
c0017b53:	e8 08 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b58:	83 c4 10             	add    esp,0x10
c0017b5b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b66:	83 ec 08             	sub    esp,0x8
c0017b69:	68 45 2b 02 c0       	push   0xc0022b45
c0017b6e:	50                   	push   eax
c0017b6f:	e8 32 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b82:	83 ec 08             	sub    esp,0x8
c0017b85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b89:	50                   	push   eax
c0017b8a:	e8 d1 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b8f:	83 c4 10             	add    esp,0x10
c0017b92:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b9d:	83 ec 08             	sub    esp,0x8
c0017ba0:	68 4e 2b 02 c0       	push   0xc0022b4e
c0017ba5:	50                   	push   eax
c0017ba6:	e8 fb 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bab:	83 c4 10             	add    esp,0x10
c0017bae:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb9:	83 ec 08             	sub    esp,0x8
c0017bbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bc0:	50                   	push   eax
c0017bc1:	e8 9a 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd4:	83 ec 08             	sub    esp,0x8
c0017bd7:	68 56 2b 02 c0       	push   0xc0022b56
c0017bdc:	50                   	push   eax
c0017bdd:	e8 c4 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf0:	83 ec 08             	sub    esp,0x8
c0017bf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017bf7:	50                   	push   eax
c0017bf8:	e8 63 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bfd:	83 c4 10             	add    esp,0x10
c0017c00:	fa                   	cli    
c0017c01:	f4                   	hlt    
c0017c02:	eb fe                	jmp    c0017c02 <displayDebugInfo(regs*)+0x383>

c0017c04 <HalSystemIdle()>:
c0017c04:	56                   	push   esi
c0017c05:	53                   	push   ebx
c0017c06:	83 ec 14             	sub    esp,0x14
c0017c09:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c14:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c1a:	83 e0 04             	and    eax,0x4
c0017c1d:	0f b6 c0             	movzx  eax,al
c0017c20:	85 c0                	test   eax,eax
c0017c22:	0f 95 c0             	setne  al
c0017c25:	0f b6 c0             	movzx  eax,al
c0017c28:	85 c0                	test   eax,eax
c0017c2a:	74 4c                	je     c0017c78 <HalSystemIdle()+0x74>
c0017c2c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c31:	83 ec 08             	sub    esp,0x8
c0017c34:	68 e1 00 00 00       	push   0xe1
c0017c39:	50                   	push   eax
c0017c3a:	e8 81 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c4a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c53:	83 e2 02             	and    edx,0x2
c0017c56:	89 d3                	mov    ebx,edx
c0017c58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c5c:	83 e2 00             	and    edx,0x0
c0017c5f:	89 d6                	mov    esi,edx
c0017c61:	56                   	push   esi
c0017c62:	53                   	push   ebx
c0017c63:	68 e1 00 00 00       	push   0xe1
c0017c68:	50                   	push   eax
c0017c69:	e8 7e f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	e8 1e 85 fe ff       	call   c0000194 <doTPAUSE>
c0017c76:	eb 01                	jmp    c0017c79 <HalSystemIdle()+0x75>
c0017c78:	f4                   	hlt    
c0017c79:	90                   	nop
c0017c7a:	83 c4 14             	add    esp,0x14
c0017c7d:	5b                   	pop    ebx
c0017c7e:	5e                   	pop    esi
c0017c7f:	c3                   	ret    

c0017c80 <displayProgramFault(char const*)>:
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c8a:	e8 b6 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c8f:	83 c4 10             	add    esp,0x10
c0017c92:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca2:	85 c0                	test   eax,eax
c0017ca4:	74 21                	je     c0017cc7 <displayProgramFault(char const*)+0x47>
c0017ca6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb6:	6a 04                	push   0x4
c0017cb8:	6a 0f                	push   0xf
c0017cba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cbe:	50                   	push   eax
c0017cbf:	e8 54 0e ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017cc4:	83 c4 10             	add    esp,0x10
c0017cc7:	90                   	nop
c0017cc8:	83 c4 0c             	add    esp,0xc
c0017ccb:	c3                   	ret    

c0017ccc <gpFault(regs*, void*)>:
c0017ccc:	83 ec 1c             	sub    esp,0x1c
c0017ccf:	c7 05 74 c7 02 c0 28 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017128
c0017cd9:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017cde:	85 c0                	test   eax,eax
c0017ce0:	74 1e                	je     c0017d00 <gpFault(regs*, void*)+0x34>
c0017ce2:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017ce7:	83 ec 0c             	sub    esp,0xc
c0017cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cee:	ff d0                	call   eax
c0017cf0:	83 c4 10             	add    esp,0x10
c0017cf3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017cf7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017cfc:	85 c0                	test   eax,eax
c0017cfe:	75 2e                	jne    c0017d2e <gpFault(regs*, void*)+0x62>
c0017d00:	83 ec 0c             	sub    esp,0xc
c0017d03:	68 5e 2b 02 c0       	push   0xc0022b5e
c0017d08:	e8 73 ff ff ff       	call   c0017c80 <displayProgramFault(char const*)>
c0017d0d:	83 c4 10             	add    esp,0x10
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d17:	e8 63 fb ff ff       	call   c001787f <displayDebugInfo(regs*)>
c0017d1c:	83 c4 10             	add    esp,0x10
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	6a 00                	push   0x0
c0017d24:	e8 a3 ed ff ff       	call   c0016acc <Thr::terminateFromIRQ(int)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	eb 01                	jmp    c0017d2f <gpFault(regs*, void*)+0x63>
c0017d2e:	90                   	nop
c0017d2f:	83 c4 1c             	add    esp,0x1c
c0017d32:	c3                   	ret    

c0017d33 <pgFault(regs*, void*)>:
c0017d33:	83 ec 1c             	sub    esp,0x1c
c0017d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d3a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d3d:	0f 20 d0             	mov    eax,cr2
c0017d40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d48:	83 ec 04             	sub    esp,0x4
c0017d4b:	52                   	push   edx
c0017d4c:	50                   	push   eax
c0017d4d:	68 3c 2c 02 c0       	push   0xc0022c3c
c0017d52:	e8 ee 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d57:	83 c4 10             	add    esp,0x10
c0017d5a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d61:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d64:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d6a:	0f 20 d2             	mov    edx,cr2
c0017d6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d75:	83 ec 08             	sub    esp,0x8
c0017d78:	52                   	push   edx
c0017d79:	50                   	push   eax
c0017d7a:	e8 11 26 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	0f b6 c0             	movzx  eax,al
c0017d85:	85 c0                	test   eax,eax
c0017d87:	75 2e                	jne    c0017db7 <pgFault(regs*, void*)+0x84>
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	68 77 2b 02 c0       	push   0xc0022b77
c0017d91:	e8 ea fe ff ff       	call   c0017c80 <displayProgramFault(char const*)>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017da0:	e8 da fa ff ff       	call   c001787f <displayDebugInfo(regs*)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	83 ec 0c             	sub    esp,0xc
c0017dab:	6a 00                	push   0x0
c0017dad:	e8 1a ed ff ff       	call   c0016acc <Thr::terminateFromIRQ(int)>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	eb 01                	jmp    c0017db8 <pgFault(regs*, void*)+0x85>
c0017db7:	90                   	nop
c0017db8:	83 c4 1c             	add    esp,0x1c
c0017dbb:	c3                   	ret    

c0017dbc <otherISRHandler(regs*, void*)>:
c0017dbc:	83 ec 0c             	sub    esp,0xc
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	68 64 2c 02 c0       	push   0xc0022c64
c0017dc7:	e8 b4 fe ff ff       	call   c0017c80 <displayProgramFault(char const*)>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dd6:	e8 a4 fa ff ff       	call   c001787f <displayDebugInfo(regs*)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	6a 00                	push   0x0
c0017de3:	e8 e4 ec ff ff       	call   c0016acc <Thr::terminateFromIRQ(int)>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	90                   	nop
c0017dec:	83 c4 0c             	add    esp,0xc
c0017def:	c3                   	ret    

c0017df0 <opcodeFault(regs*, void*)>:
c0017df0:	55                   	push   ebp
c0017df1:	89 e5                	mov    ebp,esp
c0017df3:	83 ec 08             	sub    esp,0x8
c0017df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017df9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dfc:	83 ec 08             	sub    esp,0x8
c0017dff:	50                   	push   eax
c0017e00:	68 82 2b 02 c0       	push   0xc0022b82
c0017e05:	e8 3b 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e0a:	83 c4 10             	add    esp,0x10
c0017e0d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e18:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e1e:	0f b6 c0             	movzx  eax,al
c0017e21:	85 c0                	test   eax,eax
c0017e23:	74 21                	je     c0017e46 <opcodeFault(regs*, void*)+0x56>
c0017e25:	83 ec 0c             	sub    esp,0xc
c0017e28:	68 8c 2c 02 c0       	push   0xc0022c8c
c0017e2d:	e8 13 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e32:	83 c4 10             	add    esp,0x10
c0017e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e38:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e3b:	8d 50 19             	lea    edx,[eax+0x19]
c0017e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e44:	eb 2b                	jmp    c0017e71 <opcodeFault(regs*, void*)+0x81>
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	68 90 2b 02 c0       	push   0xc0022b90
c0017e4e:	e8 2d fe ff ff       	call   c0017c80 <displayProgramFault(char const*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	83 ec 0c             	sub    esp,0xc
c0017e59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017e5c:	e8 1e fa ff ff       	call   c001787f <displayDebugInfo(regs*)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	83 ec 0c             	sub    esp,0xc
c0017e67:	6a 00                	push   0x0
c0017e69:	e8 5e ec ff ff       	call   c0016acc <Thr::terminateFromIRQ(int)>
c0017e6e:	83 c4 10             	add    esp,0x10
c0017e71:	c9                   	leave  
c0017e72:	c3                   	ret    

c0017e73 <i386SaveCoprocessor(void*)>:
c0017e73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e77:	83 c0 3f             	add    eax,0x3f
c0017e7a:	83 e0 c0             	and    eax,0xffffffc0
c0017e7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e81:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e87 <i386LoadCoprocessor(void*)>:
c0017e87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e8b:	83 c0 3f             	add    eax,0x3f
c0017e8e:	83 e0 c0             	and    eax,0xffffffc0
c0017e91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e95:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e9b <x87EmulHandler(regs*, void*)>:
c0017e9b:	53                   	push   ebx
c0017e9c:	83 ec 08             	sub    esp,0x8
c0017e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ea4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ea8:	74 10                	je     c0017eba <x87EmulHandler(regs*, void*)+0x1f>
c0017eaa:	83 ec 0c             	sub    esp,0xc
c0017ead:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017eb2:	e8 04 97 ff ff       	call   c00115bb <KePanic(char const*)>
c0017eb7:	83 c4 10             	add    esp,0x10
c0017eba:	0f 20 c0             	mov    eax,cr0
c0017ebd:	a8 08                	test   al,0x8
c0017ebf:	74 59                	je     c0017f1a <x87EmulHandler(regs*, void*)+0x7f>
c0017ec1:	0f 06                	clts   
c0017ec3:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ec8:	85 c0                	test   eax,eax
c0017eca:	74 0e                	je     c0017eda <x87EmulHandler(regs*, void*)+0x3f>
c0017ecc:	83 ec 0c             	sub    esp,0xc
c0017ecf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ed2:	e8 9c ff ff ff       	call   c0017e73 <i386SaveCoprocessor(void*)>
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017ee0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017ee4:	75 12                	jne    c0017ef8 <x87EmulHandler(regs*, void*)+0x5d>
c0017ee6:	83 ec 0c             	sub    esp,0xc
c0017ee9:	68 40 02 00 00       	push   0x240
c0017eee:	e8 c3 fb fe ff       	call   c0007ab6 <malloc>
c0017ef3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017ef6:	eb 10                	jmp    c0017f08 <x87EmulHandler(regs*, void*)+0x6d>
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f00:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f03:	e8 7f ff ff ff       	call   c0017e87 <i386LoadCoprocessor(void*)>
c0017f08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f0d:	83 c4 10             	add    esp,0x10
c0017f10:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f15:	83 c4 08             	add    esp,0x8
c0017f18:	5b                   	pop    ebx
c0017f19:	c3                   	ret    
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	68 b1 2b 02 c0       	push   0xc0022bb1
c0017f22:	e8 1e 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f27:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f2f:	83 c4 18             	add    esp,0x18
c0017f32:	5b                   	pop    ebx
c0017f33:	e9 94 eb ff ff       	jmp    c0016acc <Thr::terminateFromIRQ(int)>

c0017f38 <HalInitialiseCoprocessor()>:
c0017f38:	83 ec 10             	sub    esp,0x10
c0017f3b:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f45:	6a 00                	push   0x0
c0017f47:	68 9b 7e 01 c0       	push   0xc0017e9b
c0017f4c:	6a 07                	push   0x7
c0017f4e:	e8 43 4f ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f53:	e8 48 70 00 00       	call   c001efa0 <avxDetect>
c0017f58:	83 c4 10             	add    esp,0x10
c0017f5b:	85 c0                	test   eax,eax
c0017f5d:	74 1c                	je     c0017f7b <HalInitialiseCoprocessor()+0x43>
c0017f5f:	c7 05 70 c7 02 c0 ca ef 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001efca
c0017f69:	c7 05 6c c7 02 c0 db ef 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001efdb
c0017f73:	83 c4 0c             	add    esp,0xc
c0017f76:	e9 71 70 00 00       	jmp    c001efec <avxInit>
c0017f7b:	e8 b0 73 00 00       	call   c001f330 <absolutelyNoChanceInHell>
c0017f80:	85 c0                	test   eax,eax
c0017f82:	74 1c                	je     c0017fa0 <HalInitialiseCoprocessor()+0x68>
c0017f84:	c7 05 70 c7 02 c0 48 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f348
c0017f8e:	c7 05 6c c7 02 c0 50 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f350
c0017f98:	83 c4 0c             	add    esp,0xc
c0017f9b:	e9 b8 73 00 00       	jmp    c001f358 <sseInit>
c0017fa0:	e8 d1 73 00 00       	call   c001f376 <x87Detect>
c0017fa5:	85 c0                	test   eax,eax
c0017fa7:	74 1c                	je     c0017fc5 <HalInitialiseCoprocessor()+0x8d>
c0017fa9:	c7 05 70 c7 02 c0 91 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f391
c0017fb3:	c7 05 6c c7 02 c0 98 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f398
c0017fbd:	83 c4 0c             	add    esp,0xc
c0017fc0:	e9 da 73 00 00       	jmp    c001f39f <x87Init>
c0017fc5:	c7 05 70 c7 02 c0 4c 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001784c
c0017fcf:	c7 05 6c c7 02 c0 4c 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001784c
c0017fd9:	0f 20 c0             	mov    eax,cr0
c0017fdc:	83 c8 04             	or     eax,0x4
c0017fdf:	0f 22 c0             	mov    cr0,eax
c0017fe2:	83 c4 0c             	add    esp,0xc
c0017fe5:	c3                   	ret    

c0017fe6 <HalPanic(char const*)>:
c0017fe6:	53                   	push   ebx
c0017fe7:	83 ec 10             	sub    esp,0x10
c0017fea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017fee:	fa                   	cli    
c0017fef:	53                   	push   ebx
c0017ff0:	68 c7 2b 02 c0       	push   0xc0022bc7
c0017ff5:	e8 4b 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017ffa:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017fff:	83 c4 10             	add    esp,0x10
c0018002:	85 c0                	test   eax,eax
c0018004:	74 09                	je     c001800f <HalPanic(char const*)+0x29>
c0018006:	83 ec 0c             	sub    esp,0xc
c0018009:	53                   	push   ebx
c001800a:	ff d0                	call   eax
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018014:	85 c0                	test   eax,eax
c0018016:	0f 84 dc 00 00 00    	je     c00180f8 <HalPanic(char const*)+0x112>
c001801c:	52                   	push   edx
c001801d:	6a 01                	push   0x1
c001801f:	6a 0f                	push   0xf
c0018021:	50                   	push   eax
c0018022:	e8 8d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018027:	59                   	pop    ecx
c0018028:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001802e:	e8 71 07 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0018033:	58                   	pop    eax
c0018034:	5a                   	pop    edx
c0018035:	68 e4 0d 02 c0       	push   0xc0020de4
c001803a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018040:	e8 a7 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018045:	83 c4 0c             	add    esp,0xc
c0018048:	6a 01                	push   0x1
c001804a:	6a 0f                	push   0xf
c001804c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018052:	e8 5d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018057:	59                   	pop    ecx
c0018058:	58                   	pop    eax
c0018059:	68 e0 2b 02 c0       	push   0xc0022be0
c001805e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018064:	e8 3d 0a ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018069:	83 c4 0c             	add    esp,0xc
c001806c:	6a 0f                	push   0xf
c001806e:	6a 01                	push   0x1
c0018070:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018076:	e8 39 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001807b:	58                   	pop    eax
c001807c:	5a                   	pop    edx
c001807d:	68 e9 2b 02 c0       	push   0xc0022be9
c0018082:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018088:	e8 19 0a ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001808d:	83 c4 0c             	add    esp,0xc
c0018090:	6a 01                	push   0x1
c0018092:	6a 0f                	push   0xf
c0018094:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001809a:	e8 15 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001809f:	59                   	pop    ecx
c00180a0:	58                   	pop    eax
c00180a1:	68 2d 2c 02 c0       	push   0xc0022c2d
c00180a6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ac:	e8 f5 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180b1:	58                   	pop    eax
c00180b2:	5a                   	pop    edx
c00180b3:	68 f6 2b 02 c0       	push   0xc0022bf6
c00180b8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180be:	e8 e3 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180c3:	59                   	pop    ecx
c00180c4:	58                   	pop    eax
c00180c5:	68 30 2c 02 c0       	push   0xc0022c30
c00180ca:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180d0:	e8 d1 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180d5:	58                   	pop    eax
c00180d6:	5a                   	pop    edx
c00180d7:	53                   	push   ebx
c00180d8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180de:	e8 c3 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180e3:	59                   	pop    ecx
c00180e4:	5b                   	pop    ebx
c00180e5:	68 2d 2c 02 c0       	push   0xc0022c2d
c00180ea:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f0:	e8 b1 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180f5:	83 c4 10             	add    esp,0x10
c00180f8:	eb fe                	jmp    c00180f8 <HalPanic(char const*)+0x112>

c00180fa <HalQueryPerformanceCounter()>:
c00180fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00180ff:	31 d2                	xor    edx,edx
c0018101:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018107:	31 c0                	xor    eax,eax
c0018109:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018110:	74 02                	je     c0018114 <HalQueryPerformanceCounter()+0x1a>
c0018112:	0f 31                	rdtsc  
c0018114:	c3                   	ret    

c0018115 <HalInitialise()>:
c0018115:	53                   	push   ebx
c0018116:	83 ec 08             	sub    esp,0x8
c0018119:	e8 a8 4f ff ff       	call   c000d0c6 <setupINTS()>
c001811e:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018125:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001812a:	75 0f                	jne    c001813b <HalInitialise()+0x26>
c001812c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018132:	83 e2 fe             	and    edx,0xfffffffe
c0018135:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001813b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018141:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018148:	83 e2 fe             	and    edx,0xfffffffe
c001814b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018151:	e8 9e 02 00 00       	call   c00183f4 <picOpen()>
c0018156:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001815d:	74 0a                	je     c0018169 <HalInitialise()+0x54>
c001815f:	e8 e0 01 00 00       	call   c0018344 <picDisable()>
c0018164:	e8 ad 67 00 00       	call   c001e916 <apicOpen()>
c0018169:	bb 0f 00 00 00       	mov    ebx,0xf
c001816e:	50                   	push   eax
c001816f:	6a 00                	push   0x0
c0018171:	68 bc 7d 01 c0       	push   0xc0017dbc
c0018176:	6a 00                	push   0x0
c0018178:	e8 19 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001817d:	83 c4 0c             	add    esp,0xc
c0018180:	6a 00                	push   0x0
c0018182:	68 bc 7d 01 c0       	push   0xc0017dbc
c0018187:	6a 01                	push   0x1
c0018189:	e8 08 4d ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001818e:	83 c4 0c             	add    esp,0xc
c0018191:	6a 00                	push   0x0
c0018193:	68 4d 78 01 c0       	push   0xc001784d
c0018198:	6a 02                	push   0x2
c001819a:	e8 f7 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001819f:	83 c4 0c             	add    esp,0xc
c00181a2:	6a 00                	push   0x0
c00181a4:	68 bc 7d 01 c0       	push   0xc0017dbc
c00181a9:	6a 03                	push   0x3
c00181ab:	e8 e6 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181b0:	83 c4 0c             	add    esp,0xc
c00181b3:	6a 00                	push   0x0
c00181b5:	68 bc 7d 01 c0       	push   0xc0017dbc
c00181ba:	6a 04                	push   0x4
c00181bc:	e8 d5 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c1:	83 c4 0c             	add    esp,0xc
c00181c4:	6a 00                	push   0x0
c00181c6:	68 bc 7d 01 c0       	push   0xc0017dbc
c00181cb:	6a 05                	push   0x5
c00181cd:	e8 c4 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d2:	83 c4 0c             	add    esp,0xc
c00181d5:	6a 00                	push   0x0
c00181d7:	68 f0 7d 01 c0       	push   0xc0017df0
c00181dc:	6a 06                	push   0x6
c00181de:	e8 b3 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e3:	83 c4 0c             	add    esp,0xc
c00181e6:	6a 00                	push   0x0
c00181e8:	68 66 78 01 c0       	push   0xc0017866
c00181ed:	6a 08                	push   0x8
c00181ef:	e8 a2 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f4:	83 c4 0c             	add    esp,0xc
c00181f7:	6a 00                	push   0x0
c00181f9:	68 bc 7d 01 c0       	push   0xc0017dbc
c00181fe:	6a 09                	push   0x9
c0018200:	e8 91 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018205:	83 c4 0c             	add    esp,0xc
c0018208:	6a 00                	push   0x0
c001820a:	68 bc 7d 01 c0       	push   0xc0017dbc
c001820f:	6a 0a                	push   0xa
c0018211:	e8 80 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018216:	83 c4 0c             	add    esp,0xc
c0018219:	6a 00                	push   0x0
c001821b:	68 bc 7d 01 c0       	push   0xc0017dbc
c0018220:	6a 0b                	push   0xb
c0018222:	e8 6f 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018227:	83 c4 0c             	add    esp,0xc
c001822a:	6a 00                	push   0x0
c001822c:	68 cc 7c 01 c0       	push   0xc0017ccc
c0018231:	6a 0d                	push   0xd
c0018233:	e8 5e 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018238:	83 c4 0c             	add    esp,0xc
c001823b:	6a 00                	push   0x0
c001823d:	68 33 7d 01 c0       	push   0xc0017d33
c0018242:	6a 0e                	push   0xe
c0018244:	e8 4d 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018249:	83 c4 10             	add    esp,0x10
c001824c:	50                   	push   eax
c001824d:	6a 00                	push   0x0
c001824f:	68 bc 7d 01 c0       	push   0xc0017dbc
c0018254:	53                   	push   ebx
c0018255:	43                   	inc    ebx
c0018256:	e8 3b 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	83 fb 1e             	cmp    ebx,0x1e
c0018261:	75 e9                	jne    c001824c <HalInitialise()+0x137>
c0018263:	50                   	push   eax
c0018264:	6a 00                	push   0x0
c0018266:	68 37 2a 01 c0       	push   0xc0012a37
c001826b:	6a 60                	push   0x60
c001826d:	e8 24 4c ff ff       	call   c000ce96 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018272:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018277:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018281:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018288:	e8 29 f8 fe ff       	call   c0007ab6 <malloc>
c001828d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018290:	89 c3                	mov    ebx,eax
c0018292:	e8 3b 09 00 00       	call   c0018bd2 <RTC::RTC()>
c0018297:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182a1:	5a                   	pop    edx
c00182a2:	59                   	pop    ecx
c00182a3:	53                   	push   ebx
c00182a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182aa:	e8 b3 46 ff ff       	call   c000c962 <Device::addChild(Device*)>
c00182af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182b1:	6a 00                	push   0x0
c00182b3:	6a 00                	push   0x0
c00182b5:	6a 00                	push   0x0
c00182b7:	53                   	push   ebx
c00182b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182bb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182c0:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00182c6:	83 c4 28             	add    esp,0x28
c00182c9:	5b                   	pop    ebx
c00182ca:	c3                   	ret    

c00182cb <HalMakeBeep(int)>:
c00182cb:	53                   	push   ebx
c00182cc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00182d0:	85 db                	test   ebx,ebx
c00182d2:	75 07                	jne    c00182db <HalMakeBeep(int)+0x10>
c00182d4:	e4 61                	in     al,0x61
c00182d6:	83 e0 fc             	and    eax,0xfffffffc
c00182d9:	eb 26                	jmp    c0018301 <HalMakeBeep(int)+0x36>
c00182db:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00182e0:	99                   	cdq    
c00182e1:	f7 fb                	idiv   ebx
c00182e3:	89 c1                	mov    ecx,eax
c00182e5:	b0 b6                	mov    al,0xb6
c00182e7:	e6 43                	out    0x43,al
c00182e9:	88 c8                	mov    al,cl
c00182eb:	e6 42                	out    0x42,al
c00182ed:	89 c8                	mov    eax,ecx
c00182ef:	c1 e8 08             	shr    eax,0x8
c00182f2:	e6 42                	out    0x42,al
c00182f4:	e4 61                	in     al,0x61
c00182f6:	89 c2                	mov    edx,eax
c00182f8:	83 ca 03             	or     edx,0x3
c00182fb:	38 d0                	cmp    al,dl
c00182fd:	74 04                	je     c0018303 <HalMakeBeep(int)+0x38>
c00182ff:	88 d0                	mov    al,dl
c0018301:	e6 61                	out    0x61,al
c0018303:	5b                   	pop    ebx
c0018304:	c3                   	ret    

c0018305 <HalGetRand()>:
c0018305:	31 c0                	xor    eax,eax
c0018307:	c3                   	ret    

c0018308 <HalEndOfInterrupt(int)>:
c0018308:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001830f:	74 23                	je     c0018334 <HalEndOfInterrupt(int)+0x2c>
c0018311:	83 ec 14             	sub    esp,0x14
c0018314:	6a 1b                	push   0x1b
c0018316:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001831c:	e8 9f ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018321:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018326:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018330:	83 c4 1c             	add    esp,0x1c
c0018333:	c3                   	ret    
c0018334:	e9 3f 02 00 00       	jmp    c0018578 <picEOI(int)>

c0018339 <HalRestart()>:
c0018339:	c3                   	ret    

c001833a <HalShutdown()>:
c001833a:	c3                   	ret    

c001833b <HalSleep()>:
c001833b:	c3                   	ret    

c001833c <picIoWait()>:
c001833c:	eb 00                	jmp    c001833e <picIoWait()+0x2>
c001833e:	eb 00                	jmp    c0018340 <picIoWait()+0x4>
c0018340:	90                   	nop
c0018341:	c3                   	ret    
c0018342:	66 90                	xchg   ax,ax

c0018344 <picDisable()>:
c0018344:	83 ec 10             	sub    esp,0x10
c0018347:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001834e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018353:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018357:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001835c:	ee                   	out    dx,al
c001835d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018364:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018369:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001836d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018372:	ee                   	out    dx,al
c0018373:	90                   	nop
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	c3                   	ret    

c0018378 <picGetIRQReg(int)>:
c0018378:	83 ec 10             	sub    esp,0x10
c001837b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001837f:	0f b6 c0             	movzx  eax,al
c0018382:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018389:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001838d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018391:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018396:	ee                   	out    dx,al
c0018397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001839b:	0f b6 c0             	movzx  eax,al
c001839e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183a5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183a9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183ad:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00183b2:	ee                   	out    dx,al
c00183b3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00183ba:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00183bf:	89 c2                	mov    edx,eax
c00183c1:	ec                   	in     al,dx
c00183c2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00183c6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183ca:	0f b6 c0             	movzx  eax,al
c00183cd:	c1 e0 08             	shl    eax,0x8
c00183d0:	89 c1                	mov    ecx,eax
c00183d2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00183d9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00183de:	89 c2                	mov    edx,eax
c00183e0:	ec                   	in     al,dx
c00183e1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00183e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183e9:	0f b6 c0             	movzx  eax,al
c00183ec:	09 c8                	or     eax,ecx
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	c3                   	ret    
c00183f2:	66 90                	xchg   ax,ax

c00183f4 <picOpen()>:
c00183f4:	83 ec 50             	sub    esp,0x50
c00183f7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00183fe:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018403:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018407:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001840b:	ee                   	out    dx,al
c001840c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018413:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018418:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001841c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018420:	ee                   	out    dx,al
c0018421:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018429:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018431:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018438:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001843c:	89 c2                	mov    edx,eax
c001843e:	ec                   	in     al,dx
c001843f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018443:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018447:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001844b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018456:	89 c2                	mov    edx,eax
c0018458:	ec                   	in     al,dx
c0018459:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001845d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018461:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018465:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001846c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018471:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018475:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018479:	ee                   	out    dx,al
c001847a:	e8 bd fe ff ff       	call   c001833c <picIoWait()>
c001847f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018486:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001848b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001848f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018493:	ee                   	out    dx,al
c0018494:	e8 a3 fe ff ff       	call   c001833c <picIoWait()>
c0018499:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001849d:	0f b6 c0             	movzx  eax,al
c00184a0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184a7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184ab:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184b3:	ee                   	out    dx,al
c00184b4:	e8 83 fe ff ff       	call   c001833c <picIoWait()>
c00184b9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00184bd:	0f b6 c0             	movzx  eax,al
c00184c0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00184c7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00184cb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00184cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00184d3:	ee                   	out    dx,al
c00184d4:	e8 63 fe ff ff       	call   c001833c <picIoWait()>
c00184d9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00184e0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00184e5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00184e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184ed:	ee                   	out    dx,al
c00184ee:	e8 49 fe ff ff       	call   c001833c <picIoWait()>
c00184f3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00184fa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00184ff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018503:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018507:	ee                   	out    dx,al
c0018508:	e8 2f fe ff ff       	call   c001833c <picIoWait()>
c001850d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018514:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018519:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001851d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018521:	ee                   	out    dx,al
c0018522:	e8 15 fe ff ff       	call   c001833c <picIoWait()>
c0018527:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001852e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018533:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018537:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001853b:	ee                   	out    dx,al
c001853c:	e8 fb fd ff ff       	call   c001833c <picIoWait()>
c0018541:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018546:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001854d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018551:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018555:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018559:	ee                   	out    dx,al
c001855a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001855f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018566:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001856a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001856e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018572:	ee                   	out    dx,al
c0018573:	90                   	nop
c0018574:	83 c4 50             	add    esp,0x50
c0018577:	c3                   	ret    

c0018578 <picEOI(int)>:
c0018578:	83 ec 10             	sub    esp,0x10
c001857b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018580:	75 1e                	jne    c00185a0 <picEOI(int)+0x28>
c0018582:	6a 0b                	push   0xb
c0018584:	e8 ef fd ff ff       	call   c0018378 <picGetIRQReg(int)>
c0018589:	83 c4 04             	add    esp,0x4
c001858c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018591:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018596:	25 80 00 00 00       	and    eax,0x80
c001859b:	74 73                	je     c0018610 <picEOI(int)+0x98>
c001859d:	8d 76 00             	lea    esi,[esi+0x0]
c00185a0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185a5:	75 31                	jne    c00185d8 <picEOI(int)+0x60>
c00185a7:	6a 0b                	push   0xb
c00185a9:	e8 ca fd ff ff       	call   c0018378 <picGetIRQReg(int)>
c00185ae:	83 c4 04             	add    esp,0x4
c00185b1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ba:	98                   	cwde   
c00185bb:	85 c0                	test   eax,eax
c00185bd:	78 19                	js     c00185d8 <picEOI(int)+0x60>
c00185bf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00185c6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00185cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00185cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00185d4:	ee                   	out    dx,al
c00185d5:	eb 3d                	jmp    c0018614 <picEOI(int)+0x9c>
c00185d7:	90                   	nop
c00185d8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185dd:	7e 19                	jle    c00185f8 <picEOI(int)+0x80>
c00185df:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00185e6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00185eb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00185ef:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00185f4:	ee                   	out    dx,al
c00185f5:	8d 76 00             	lea    esi,[esi+0x0]
c00185f8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00185ff:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018604:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018608:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001860d:	ee                   	out    dx,al
c001860e:	eb 04                	jmp    c0018614 <picEOI(int)+0x9c>
c0018610:	90                   	nop
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	c3                   	ret    

c0018618 <RTC::open(int, int, void*)>:
c0018618:	31 c0                	xor    eax,eax
c001861a:	c3                   	ret    
c001861b:	90                   	nop

c001861c <RTC::close(int, int, void*)>:
c001861c:	31 c0                	xor    eax,eax
c001861e:	c3                   	ret    
c001861f:	90                   	nop

c0018620 <RTC::timeInSecondsUTC()>:
c0018620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018624:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001862a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018630:	c3                   	ret    
c0018631:	90                   	nop

c0018632 <RTC::timeInDatetimeUTC()>:
c0018632:	53                   	push   ebx
c0018633:	83 ec 14             	sub    esp,0x14
c0018636:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001863a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001863e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018640:	50                   	push   eax
c0018641:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018644:	83 c4 0c             	add    esp,0xc
c0018647:	52                   	push   edx
c0018648:	50                   	push   eax
c0018649:	53                   	push   ebx
c001864a:	e8 87 40 ff ff       	call   c000c6d6 <secondsToDatetime(unsigned long long)>
c001864f:	89 d8                	mov    eax,ebx
c0018651:	83 c4 14             	add    esp,0x14
c0018654:	5b                   	pop    ebx
c0018655:	c2 04 00             	ret    0x4

c0018658 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018658:	56                   	push   esi
c0018659:	53                   	push   ebx
c001865a:	83 ec 14             	sub    esp,0x14
c001865d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018661:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018663:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018666:	8d 44 24 08          	lea    eax,[esp+0x8]
c001866a:	52                   	push   edx
c001866b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001866f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018673:	50                   	push   eax
c0018674:	e8 5d 40 ff ff       	call   c000c6d6 <secondsToDatetime(unsigned long long)>
c0018679:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001867d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018685:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018689:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001868d:	89 f0                	mov    eax,esi
c001868f:	83 c4 20             	add    esp,0x20
c0018692:	5b                   	pop    ebx
c0018693:	5e                   	pop    esi
c0018694:	ff e0                	jmp    eax

c0018696 <RTC::~RTC()>:
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c001869e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a2:	89 10                	mov    DWORD PTR [eax],edx
c00186a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a8:	83 ec 0c             	sub    esp,0xc
c00186ab:	50                   	push   eax
c00186ac:	e8 b7 3d ff ff       	call   c000c468 <Clock::~Clock()>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	90                   	nop
c00186b5:	83 c4 0c             	add    esp,0xc
c00186b8:	c3                   	ret    
c00186b9:	90                   	nop

c00186ba <RTC::~RTC()>:
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	83 ec 0c             	sub    esp,0xc
c00186c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186c4:	e8 cd ff ff ff       	call   c0018696 <RTC::~RTC()>
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	83 ec 08             	sub    esp,0x8
c00186cf:	68 60 01 00 00       	push   0x160
c00186d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186d8:	e8 3b 21 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00186dd:	83 c4 10             	add    esp,0x10
c00186e0:	83 c4 0c             	add    esp,0xc
c00186e3:	c3                   	ret    

c00186e4 <RTC::get_update_in_progress_flag()>:
c00186e4:	83 ec 14             	sub    esp,0x14
c00186e7:	6a 0a                	push   0xa
c00186e9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186ef:	e8 84 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00186f4:	83 c4 1c             	add    esp,0x1c
c00186f7:	0f b6 c0             	movzx  eax,al
c00186fa:	c1 e8 07             	shr    eax,0x7
c00186fd:	c3                   	ret    

c00186fe <RTC::completeRTCRefresh()>:
c00186fe:	55                   	push   ebp
c00186ff:	57                   	push   edi
c0018700:	56                   	push   esi
c0018701:	53                   	push   ebx
c0018702:	83 ec 3c             	sub    esp,0x3c
c0018705:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001870b:	83 ec 0c             	sub    esp,0xc
c001870e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018712:	e8 cd ff ff ff       	call   c00186e4 <RTC::get_update_in_progress_flag()>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	84 c0                	test   al,al
c001871c:	74 0e                	je     c001872c <RTC::completeRTCRefresh()+0x2e>
c001871e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018724:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001872a:	73 df                	jae    c001870b <RTC::completeRTCRefresh()+0xd>
c001872c:	51                   	push   ecx
c001872d:	51                   	push   ecx
c001872e:	6a 00                	push   0x0
c0018730:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018736:	e8 3d ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001873b:	5b                   	pop    ebx
c001873c:	89 c7                	mov    edi,eax
c001873e:	5e                   	pop    esi
c001873f:	6a 02                	push   0x2
c0018741:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018747:	e8 2c ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001874c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018750:	5d                   	pop    ebp
c0018751:	58                   	pop    eax
c0018752:	6a 04                	push   0x4
c0018754:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001875a:	e8 19 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001875f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018763:	58                   	pop    eax
c0018764:	5a                   	pop    edx
c0018765:	6a 07                	push   0x7
c0018767:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001876d:	e8 06 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018772:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018776:	59                   	pop    ecx
c0018777:	5b                   	pop    ebx
c0018778:	6a 08                	push   0x8
c001877a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018780:	e8 f3 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018785:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018789:	5e                   	pop    esi
c001878a:	5d                   	pop    ebp
c001878b:	6a 09                	push   0x9
c001878d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018793:	e8 e0 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018798:	0f b6 c0             	movzx  eax,al
c001879b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187a8:	83 ec 0c             	sub    esp,0xc
c00187ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187af:	e8 30 ff ff ff       	call   c00186e4 <RTC::get_update_in_progress_flag()>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	84 c0                	test   al,al
c00187b9:	74 0e                	je     c00187c9 <RTC::completeRTCRefresh()+0xcb>
c00187bb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00187c1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187c7:	73 df                	jae    c00187a8 <RTC::completeRTCRefresh()+0xaa>
c00187c9:	51                   	push   ecx
c00187ca:	51                   	push   ecx
c00187cb:	6a 00                	push   0x0
c00187cd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d3:	e8 a0 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187d8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00187dc:	5b                   	pop    ebx
c00187dd:	5e                   	pop    esi
c00187de:	6a 02                	push   0x2
c00187e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e6:	e8 8d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00187ef:	5d                   	pop    ebp
c00187f0:	58                   	pop    eax
c00187f1:	6a 04                	push   0x4
c00187f3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187f9:	e8 7a e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187fe:	88 c3                	mov    bl,al
c0018800:	58                   	pop    eax
c0018801:	5a                   	pop    edx
c0018802:	6a 07                	push   0x7
c0018804:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880a:	e8 69 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001880f:	59                   	pop    ecx
c0018810:	89 c6                	mov    esi,eax
c0018812:	5d                   	pop    ebp
c0018813:	6a 08                	push   0x8
c0018815:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881b:	e8 58 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018820:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018824:	58                   	pop    eax
c0018825:	5a                   	pop    edx
c0018826:	6a 09                	push   0x9
c0018828:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001882e:	e8 45 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018833:	89 f9                	mov    ecx,edi
c0018835:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018839:	0f b6 e8             	movzx  ebp,al
c001883c:	83 c4 10             	add    esp,0x10
c001883f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018843:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018848:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001884d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018851:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018855:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018859:	0f 94 c0             	sete   al
c001885c:	0f b6 fb             	movzx  edi,bl
c001885f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018863:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018868:	0f 94 c2             	sete   dl
c001886b:	21 d0                	and    eax,edx
c001886d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018871:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018875:	0f 94 c2             	sete   dl
c0018878:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001887c:	21 c2                	and    edx,eax
c001887e:	89 f0                	mov    eax,esi
c0018880:	0f b6 c0             	movzx  eax,al
c0018883:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018887:	89 f0                	mov    eax,esi
c0018889:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001888d:	0f 94 c0             	sete   al
c0018890:	21 d0                	and    eax,edx
c0018892:	31 d2                	xor    edx,edx
c0018894:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018898:	0f 94 c2             	sete   dl
c001889b:	85 c2                	test   edx,eax
c001889d:	75 27                	jne    c00188c6 <RTC::completeRTCRefresh()+0x1c8>
c001889f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188a3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188a7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188ab:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188af:	89 f0                	mov    eax,esi
c00188b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188b5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00188b9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00188bd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188c1:	e9 dc fe ff ff       	jmp    c00187a2 <RTC::completeRTCRefresh()+0xa4>
c00188c6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00188ca:	75 d3                	jne    c001889f <RTC::completeRTCRefresh()+0x1a1>
c00188cc:	52                   	push   edx
c00188cd:	52                   	push   edx
c00188ce:	6a 0b                	push   0xb
c00188d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188d6:	e8 9d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	a8 04                	test   al,0x4
c00188e0:	75 7a                	jne    c001895c <RTC::completeRTCRefresh()+0x25e>
c00188e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00188e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188ea:	83 e1 0f             	and    ecx,0xf
c00188ed:	c1 ea 04             	shr    edx,0x4
c00188f0:	c1 ef 04             	shr    edi,0x4
c00188f3:	6b d2 0a             	imul   edx,edx,0xa
c00188f6:	83 e6 0f             	and    esi,0xf
c00188f9:	01 d1                	add    ecx,edx
c00188fb:	c1 ed 04             	shr    ebp,0x4
c00188fe:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018902:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018906:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001890a:	c1 ea 04             	shr    edx,0x4
c001890d:	83 e1 0f             	and    ecx,0xf
c0018910:	6b d2 0a             	imul   edx,edx,0xa
c0018913:	6b ed 0a             	imul   ebp,ebp,0xa
c0018916:	01 d1                	add    ecx,edx
c0018918:	89 fa                	mov    edx,edi
c001891a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001891e:	83 e2 07             	and    edx,0x7
c0018921:	89 d9                	mov    ecx,ebx
c0018923:	6b d2 0a             	imul   edx,edx,0xa
c0018926:	83 e1 0f             	and    ecx,0xf
c0018929:	83 e3 80             	and    ebx,0xffffff80
c001892c:	01 d1                	add    ecx,edx
c001892e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018932:	09 cb                	or     ebx,ecx
c0018934:	c1 ea 04             	shr    edx,0x4
c0018937:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001893b:	6b d2 0a             	imul   edx,edx,0xa
c001893e:	83 e1 0f             	and    ecx,0xf
c0018941:	01 d6                	add    esi,edx
c0018943:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018947:	c1 ea 04             	shr    edx,0x4
c001894a:	6b d2 0a             	imul   edx,edx,0xa
c001894d:	01 d1                	add    ecx,edx
c001894f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018953:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018957:	83 e2 0f             	and    edx,0xf
c001895a:	01 d5                	add    ebp,edx
c001895c:	a8 02                	test   al,0x2
c001895e:	75 15                	jne    c0018975 <RTC::completeRTCRefresh()+0x277>
c0018960:	f6 c3 80             	test   bl,0x80
c0018963:	74 10                	je     c0018975 <RTC::completeRTCRefresh()+0x277>
c0018965:	83 e3 7f             	and    ebx,0x7f
c0018968:	b9 18 00 00 00       	mov    ecx,0x18
c001896d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018970:	99                   	cdq    
c0018971:	f7 f9                	idiv   ecx
c0018973:	88 d3                	mov    bl,dl
c0018975:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001897b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018981:	77 06                	ja     c0018989 <RTC::completeRTCRefresh()+0x28b>
c0018983:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018989:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001898e:	31 c9                	xor    ecx,ecx
c0018990:	c1 e0 10             	shl    eax,0x10
c0018993:	89 cd                	mov    ebp,ecx
c0018995:	c1 e7 10             	shl    edi,0x10
c0018998:	31 d2                	xor    edx,edx
c001899a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189a0:	09 c5                	or     ebp,eax
c00189a2:	89 f0                	mov    eax,esi
c00189a4:	89 e9                	mov    ecx,ebp
c00189a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189aa:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189ae:	88 c2                	mov    dl,al
c00189b0:	88 d9                	mov    cl,bl
c00189b2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00189b6:	0f b7 c2             	movzx  eax,dx
c00189b9:	09 f8                	or     eax,edi
c00189bb:	89 c2                	mov    edx,eax
c00189bd:	50                   	push   eax
c00189be:	50                   	push   eax
c00189bf:	51                   	push   ecx
c00189c0:	52                   	push   edx
c00189c1:	e8 91 3b ff ff       	call   c000c557 <datetimeToSeconds(datetime_t)>
c00189c6:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00189ca:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00189d0:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00189d6:	83 c4 4c             	add    esp,0x4c
c00189d9:	5b                   	pop    ebx
c00189da:	5e                   	pop    esi
c00189db:	5f                   	pop    edi
c00189dc:	5d                   	pop    ebp
c00189dd:	c3                   	ret    

c00189de <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00189de:	55                   	push   ebp
c00189df:	57                   	push   edi
c00189e0:	56                   	push   esi
c00189e1:	53                   	push   ebx
c00189e2:	83 ec 30             	sub    esp,0x30
c00189e5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00189e9:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00189ed:	6a 00                	push   0x0
c00189ef:	6a 00                	push   0x0
c00189f1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189f7:	e8 96 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189fc:	83 c4 0c             	add    esp,0xc
c00189ff:	6a 00                	push   0x0
c0018a01:	6a 02                	push   0x2
c0018a03:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a09:	e8 84 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a0e:	31 d2                	xor    edx,edx
c0018a10:	89 f9                	mov    ecx,edi
c0018a12:	89 f8                	mov    eax,edi
c0018a14:	c1 e9 10             	shr    ecx,0x10
c0018a17:	0f b6 c4             	movzx  eax,ah
c0018a1a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a1e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a26:	b9 64 00 00 00       	mov    ecx,0x64
c0018a2b:	89 f0                	mov    eax,esi
c0018a2d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a31:	89 f0                	mov    eax,esi
c0018a33:	0f b6 c4             	movzx  eax,ah
c0018a36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a3a:	89 f0                	mov    eax,esi
c0018a3c:	c1 e8 10             	shr    eax,0x10
c0018a3f:	f7 f1                	div    ecx
c0018a41:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a45:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a49:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a4d:	59                   	pop    ecx
c0018a4e:	5b                   	pop    ebx
c0018a4f:	89 fb                	mov    ebx,edi
c0018a51:	6a 0b                	push   0xb
c0018a53:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a59:	e8 1a e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018a5e:	83 c4 10             	add    esp,0x10
c0018a61:	89 c5                	mov    ebp,eax
c0018a63:	a8 04                	test   al,0x4
c0018a65:	75 6e                	jne    c0018ad5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018a67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a6b:	31 d2                	xor    edx,edx
c0018a6d:	0f b6 c1             	movzx  eax,cl
c0018a70:	b9 0a 00 00 00       	mov    ecx,0xa
c0018a75:	f7 f1                	div    ecx
c0018a77:	c1 e0 04             	shl    eax,0x4
c0018a7a:	09 d0                	or     eax,edx
c0018a7c:	31 d2                	xor    edx,edx
c0018a7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a82:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018a87:	f7 f1                	div    ecx
c0018a89:	c1 e0 04             	shl    eax,0x4
c0018a8c:	09 d0                	or     eax,edx
c0018a8e:	31 d2                	xor    edx,edx
c0018a90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a94:	0f b6 c3             	movzx  eax,bl
c0018a97:	f7 f1                	div    ecx
c0018a99:	c1 e0 04             	shl    eax,0x4
c0018a9c:	09 d0                	or     eax,edx
c0018a9e:	31 d2                	xor    edx,edx
c0018aa0:	89 c3                	mov    ebx,eax
c0018aa2:	89 f0                	mov    eax,esi
c0018aa4:	0f b6 c0             	movzx  eax,al
c0018aa7:	f7 f1                	div    ecx
c0018aa9:	c1 e0 04             	shl    eax,0x4
c0018aac:	09 d0                	or     eax,edx
c0018aae:	31 d2                	xor    edx,edx
c0018ab0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018ab4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ab9:	f7 f1                	div    ecx
c0018abb:	c1 e0 04             	shl    eax,0x4
c0018abe:	09 d0                	or     eax,edx
c0018ac0:	31 d2                	xor    edx,edx
c0018ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ac6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018aca:	f7 f1                	div    ecx
c0018acc:	c1 e0 04             	shl    eax,0x4
c0018acf:	09 d0                	or     eax,edx
c0018ad1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ad5:	83 e5 02             	and    ebp,0x2
c0018ad8:	75 1e                	jne    c0018af8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018ada:	0f b6 c3             	movzx  eax,bl
c0018add:	83 f8 0b             	cmp    eax,0xb
c0018ae0:	76 10                	jbe    c0018af2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018ae2:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018ae5:	88 d3                	mov    bl,dl
c0018ae7:	84 d2                	test   dl,dl
c0018ae9:	75 02                	jne    c0018aed <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018aeb:	b3 0c                	mov    bl,0xc
c0018aed:	83 cb 80             	or     ebx,0xffffff80
c0018af0:	eb 06                	jmp    c0018af8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018af2:	85 c0                	test   eax,eax
c0018af4:	75 02                	jne    c0018af8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018af6:	b3 0c                	mov    bl,0xc
c0018af8:	0f b6 db             	movzx  ebx,bl
c0018afb:	50                   	push   eax
c0018afc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b01:	52                   	push   edx
c0018b02:	6a 00                	push   0x0
c0018b04:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b0a:	e8 83 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b0f:	83 c4 0c             	add    esp,0xc
c0018b12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b17:	50                   	push   eax
c0018b18:	6a 02                	push   0x2
c0018b1a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b20:	e8 6d e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b25:	83 c4 0c             	add    esp,0xc
c0018b28:	53                   	push   ebx
c0018b29:	6a 04                	push   0x4
c0018b2b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b31:	e8 5c e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b36:	83 c4 0c             	add    esp,0xc
c0018b39:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b3e:	52                   	push   edx
c0018b3f:	6a 07                	push   0x7
c0018b41:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b47:	e8 46 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b4c:	83 c4 0c             	add    esp,0xc
c0018b4f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b54:	50                   	push   eax
c0018b55:	6a 08                	push   0x8
c0018b57:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b5d:	e8 30 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b62:	83 c4 0c             	add    esp,0xc
c0018b65:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018b6a:	55                   	push   ebp
c0018b6b:	6a 09                	push   0x9
c0018b6d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b73:	e8 1a e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b78:	5a                   	pop    edx
c0018b79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018b7d:	e8 7c fb ff ff       	call   c00186fe <RTC::completeRTCRefresh()>
c0018b82:	83 c4 3c             	add    esp,0x3c
c0018b85:	b0 01                	mov    al,0x1
c0018b87:	5b                   	pop    ebx
c0018b88:	5e                   	pop    esi
c0018b89:	5f                   	pop    edi
c0018b8a:	5d                   	pop    ebp
c0018b8b:	c3                   	ret    

c0018b8c <rtcIRQHandler(regs*, void*)>:
c0018b8c:	53                   	push   ebx
c0018b8d:	83 ec 10             	sub    esp,0x10
c0018b90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b94:	6a 0c                	push   0xc
c0018b96:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b9c:	e8 d7 e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018ba1:	83 c4 10             	add    esp,0x10
c0018ba4:	a8 80                	test   al,0x80
c0018ba6:	74 24                	je     c0018bcc <rtcIRQHandler(regs*, void*)+0x40>
c0018ba8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018baf:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018bb6:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018bbd:	75 0d                	jne    c0018bcc <rtcIRQHandler(regs*, void*)+0x40>
c0018bbf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018bc3:	83 c4 08             	add    esp,0x8
c0018bc6:	5b                   	pop    ebx
c0018bc7:	e9 32 fb ff ff       	jmp    c00186fe <RTC::completeRTCRefresh()>
c0018bcc:	83 c4 08             	add    esp,0x8
c0018bcf:	5b                   	pop    ebx
c0018bd0:	c3                   	ret    
c0018bd1:	90                   	nop

c0018bd2 <RTC::RTC()>:
c0018bd2:	83 ec 1c             	sub    esp,0x1c
c0018bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bd9:	83 ec 08             	sub    esp,0x8
c0018bdc:	68 af 2c 02 c0       	push   0xc0022caf
c0018be1:	50                   	push   eax
c0018be2:	e8 4b 38 ff ff       	call   c000c432 <Clock::Clock(char const*)>
c0018be7:	83 c4 10             	add    esp,0x10
c0018bea:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c0018bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bf3:	89 10                	mov    DWORD PTR [eax],edx
c0018bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bf9:	83 ec 0c             	sub    esp,0xc
c0018bfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c00:	6a 01                	push   0x1
c0018c02:	68 8c 8b 01 c0       	push   0xc0018b8c
c0018c07:	6a 08                	push   0x8
c0018c09:	50                   	push   eax
c0018c0a:	e8 ff 3c ff ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c0f:	83 c4 20             	add    esp,0x20
c0018c12:	89 c2                	mov    edx,eax
c0018c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c18:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c1e:	fa                   	cli    
c0018c1f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c24:	83 c0 01             	add    eax,0x1
c0018c27:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c2c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c31:	83 ec 08             	sub    esp,0x8
c0018c34:	6a 0b                	push   0xb
c0018c36:	50                   	push   eax
c0018c37:	e8 3c e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c3c:	83 c4 10             	add    esp,0x10
c0018c3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c43:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c48:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c4c:	83 ca 10             	or     edx,0x10
c0018c4f:	0f b6 d2             	movzx  edx,dl
c0018c52:	83 ec 04             	sub    esp,0x4
c0018c55:	52                   	push   edx
c0018c56:	6a 0b                	push   0xb
c0018c58:	50                   	push   eax
c0018c59:	e8 34 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c5e:	83 c4 10             	add    esp,0x10
c0018c61:	83 ec 0c             	sub    esp,0xc
c0018c64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c68:	e8 91 fa ff ff       	call   c00186fe <RTC::completeRTCRefresh()>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c75:	83 e8 01             	sub    eax,0x1
c0018c78:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c7d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c82:	85 c0                	test   eax,eax
c0018c84:	75 01                	jne    c0018c87 <RTC::RTC()+0xb5>
c0018c86:	fb                   	sti    
c0018c87:	90                   	nop
c0018c88:	83 c4 1c             	add    esp,0x1c
c0018c8b:	c3                   	ret    

c0018c8c <HalConsoleScroll(int, int)>:
c0018c8c:	83 ec 10             	sub    esp,0x10
c0018c8f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c97:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c9f:	90                   	nop
c0018ca0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018ca5:	0f 8f e1 00 00 00    	jg     c0018d8c <HalConsoleScroll(int, int)+0x100>
c0018cab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cb3:	90                   	nop
c0018cb4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018cbc:	0f 8f be 00 00 00    	jg     c0018d80 <HalConsoleScroll(int, int)+0xf4>
c0018cc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018cc6:	89 d0                	mov    eax,edx
c0018cc8:	c1 e0 02             	shl    eax,0x2
c0018ccb:	01 d0                	add    eax,edx
c0018ccd:	c1 e0 05             	shl    eax,0x5
c0018cd0:	89 c2                	mov    edx,eax
c0018cd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cd6:	01 d0                	add    eax,edx
c0018cd8:	89 c2                	mov    edx,eax
c0018cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cde:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ce5:	89 d0                	mov    eax,edx
c0018ce7:	c1 e0 02             	shl    eax,0x2
c0018cea:	01 d0                	add    eax,edx
c0018cec:	c1 e0 05             	shl    eax,0x5
c0018cef:	89 c2                	mov    edx,eax
c0018cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cf5:	01 d0                	add    eax,edx
c0018cf7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018cfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d01:	01 c2                	add    edx,eax
c0018d03:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d05:	88 02                	mov    BYTE PTR [edx],al
c0018d07:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d0c:	75 66                	jne    c0018d74 <HalConsoleScroll(int, int)+0xe8>
c0018d0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d12:	83 e0 01             	and    eax,0x1
c0018d15:	74 39                	je     c0018d50 <HalConsoleScroll(int, int)+0xc4>
c0018d17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d1b:	83 e0 0f             	and    eax,0xf
c0018d1e:	88 c2                	mov    dl,al
c0018d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d24:	c1 e0 04             	shl    eax,0x4
c0018d27:	09 d0                	or     eax,edx
c0018d29:	88 c1                	mov    cl,al
c0018d2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d2f:	89 d0                	mov    eax,edx
c0018d31:	c1 e0 02             	shl    eax,0x2
c0018d34:	01 d0                	add    eax,edx
c0018d36:	c1 e0 05             	shl    eax,0x5
c0018d39:	89 c2                	mov    edx,eax
c0018d3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d3f:	01 d0                	add    eax,edx
c0018d41:	89 c2                	mov    edx,eax
c0018d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d47:	01 d0                	add    eax,edx
c0018d49:	88 ca                	mov    dl,cl
c0018d4b:	88 10                	mov    BYTE PTR [eax],dl
c0018d4d:	eb 25                	jmp    c0018d74 <HalConsoleScroll(int, int)+0xe8>
c0018d4f:	90                   	nop
c0018d50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d54:	89 d0                	mov    eax,edx
c0018d56:	c1 e0 02             	shl    eax,0x2
c0018d59:	01 d0                	add    eax,edx
c0018d5b:	c1 e0 05             	shl    eax,0x5
c0018d5e:	89 c2                	mov    edx,eax
c0018d60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d64:	01 d0                	add    eax,edx
c0018d66:	89 c2                	mov    edx,eax
c0018d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d6c:	01 d0                	add    eax,edx
c0018d6e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018d71:	8d 76 00             	lea    esi,[esi+0x0]
c0018d74:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018d79:	e9 36 ff ff ff       	jmp    c0018cb4 <HalConsoleScroll(int, int)+0x28>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018d85:	e9 16 ff ff ff       	jmp    c0018ca0 <HalConsoleScroll(int, int)+0x14>
c0018d8a:	66 90                	xchg   ax,ax
c0018d8c:	90                   	nop
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	c3                   	ret    
c0018d91:	8d 76 00             	lea    esi,[esi+0x0]

c0018d94 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d94:	83 ec 14             	sub    esp,0x14
c0018d97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d9b:	88 04 24             	mov    BYTE PTR [esp],al
c0018d9e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018da1:	0f b6 c0             	movzx  eax,al
c0018da4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018da8:	89 d1                	mov    ecx,edx
c0018daa:	83 e1 0f             	and    ecx,0xf
c0018dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018db1:	c1 e2 04             	shl    edx,0x4
c0018db4:	0f b6 d2             	movzx  edx,dl
c0018db7:	09 ca                	or     edx,ecx
c0018db9:	c1 e2 08             	shl    edx,0x8
c0018dbc:	09 d0                	or     eax,edx
c0018dbe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018dc3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018dcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018dcf:	89 d0                	mov    eax,edx
c0018dd1:	c1 e0 02             	shl    eax,0x2
c0018dd4:	01 d0                	add    eax,edx
c0018dd6:	c1 e0 04             	shl    eax,0x4
c0018dd9:	89 c2                	mov    edx,eax
c0018ddb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ddf:	01 d0                	add    eax,edx
c0018de1:	01 c0                	add    eax,eax
c0018de3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018de7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018deb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018df0:	66 89 02             	mov    WORD PTR [edx],ax
c0018df3:	90                   	nop
c0018df4:	83 c4 14             	add    esp,0x14
c0018df7:	c3                   	ret    

c0018df8 <HalConsoleCursorUpdate(int, int)>:
c0018df8:	83 ec 20             	sub    esp,0x20
c0018dfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dff:	89 c2                	mov    edx,eax
c0018e01:	c1 e2 02             	shl    edx,0x2
c0018e04:	01 d0                	add    eax,edx
c0018e06:	c1 e0 04             	shl    eax,0x4
c0018e09:	89 c2                	mov    edx,eax
c0018e0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e0f:	01 d0                	add    eax,edx
c0018e11:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e16:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e1d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e2a:	ee                   	out    dx,al
c0018e2b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e30:	0f b6 c0             	movzx  eax,al
c0018e33:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e3a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e3e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e46:	ee                   	out    dx,al
c0018e47:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e4e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e53:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e5b:	ee                   	out    dx,al
c0018e5c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018e61:	c1 e8 08             	shr    eax,0x8
c0018e64:	0f b6 c0             	movzx  eax,al
c0018e67:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018e6e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018e72:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018e76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e7a:	ee                   	out    dx,al
c0018e7b:	90                   	nop
c0018e7c:	83 c4 20             	add    esp,0x20
c0018e7f:	c3                   	ret    

c0018e80 <FAT::getName()>:
c0018e80:	b8 00 2d 02 c0       	mov    eax,0xc0022d00
c0018e85:	c3                   	ret    
c0018e86:	66 90                	xchg   ax,ax

c0018e88 <FAT::tell(void*, unsigned long long*)>:
c0018e88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e8d:	75 09                	jne    c0018e98 <FAT::tell(void*, unsigned long long*)+0x10>
c0018e8f:	b8 04 00 00 00       	mov    eax,0x4
c0018e94:	c3                   	ret    
c0018e95:	8d 76 00             	lea    esi,[esi+0x0]
c0018e98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e9d:	75 09                	jne    c0018ea8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018e9f:	b8 04 00 00 00       	mov    eax,0x4
c0018ea4:	c3                   	ret    
c0018ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018eaf:	ba 00 00 00 00       	mov    edx,0x0
c0018eb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018eb8:	89 01                	mov    DWORD PTR [ecx],eax
c0018eba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ebd:	b8 00 00 00 00       	mov    eax,0x0
c0018ec2:	c3                   	ret    
c0018ec3:	90                   	nop

c0018ec4 <FAT::stat(void*, unsigned long long*)>:
c0018ec4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ec9:	75 09                	jne    c0018ed4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018ecb:	b8 04 00 00 00       	mov    eax,0x4
c0018ed0:	c3                   	ret    
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ed9:	75 09                	jne    c0018ee4 <FAT::stat(void*, unsigned long long*)+0x20>
c0018edb:	b8 04 00 00 00       	mov    eax,0x4
c0018ee0:	c3                   	ret    
c0018ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ee8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018eeb:	ba 00 00 00 00       	mov    edx,0x0
c0018ef0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ef4:	89 01                	mov    DWORD PTR [ecx],eax
c0018ef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ef9:	b8 00 00 00 00       	mov    eax,0x0
c0018efe:	c3                   	ret    
c0018eff:	90                   	nop

c0018f00 <FAT::~FAT()>:
c0018f00:	83 ec 0c             	sub    esp,0xc
c0018f03:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c0018f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f0c:	89 10                	mov    DWORD PTR [eax],edx
c0018f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f12:	83 ec 0c             	sub    esp,0xc
c0018f15:	50                   	push   eax
c0018f16:	e8 61 28 ff ff       	call   c000b77c <Filesystem::~Filesystem()>
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	90                   	nop
c0018f1f:	83 c4 0c             	add    esp,0xc
c0018f22:	c3                   	ret    
c0018f23:	90                   	nop

c0018f24 <FAT::~FAT()>:
c0018f24:	83 ec 0c             	sub    esp,0xc
c0018f27:	83 ec 0c             	sub    esp,0xc
c0018f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f2e:	e8 cd ff ff ff       	call   c0018f00 <FAT::~FAT()>
c0018f33:	83 c4 10             	add    esp,0x10
c0018f36:	83 ec 08             	sub    esp,0x8
c0018f39:	6a 08                	push   0x8
c0018f3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f3f:	e8 d4 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	83 c4 0c             	add    esp,0xc
c0018f4a:	c3                   	ret    
c0018f4b:	90                   	nop

c0018f4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f4c:	83 ec 1c             	sub    esp,0x1c
c0018f4f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f56:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018f5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f5f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f66:	83 f8 ff             	cmp    eax,0xffffffff
c0018f69:	75 35                	jne    c0018fa0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018f6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f6f:	88 c2                	mov    dl,al
c0018f71:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f76:	01 d0                	add    eax,edx
c0018f78:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f7c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018f82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f86:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f8d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f96:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f9d:	eb 19                	jmp    c0018fb8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f9f:	90                   	nop
c0018fa0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fa4:	88 c2                	mov    dl,al
c0018fa6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018faa:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fb1:	01 d0                	add    eax,edx
c0018fb3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fb7:	90                   	nop
c0018fb8:	83 ec 04             	sub    esp,0x4
c0018fbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018fc3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018fc7:	50                   	push   eax
c0018fc8:	e8 02 c0 fe ff       	call   c0004fcf <f_getlabel>
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fd4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fd9:	75 09                	jne    c0018fe4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018fdb:	b8 00 00 00 00       	mov    eax,0x0
c0018fe0:	eb 0a                	jmp    c0018fec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018fe2:	66 90                	xchg   ax,ax
c0018fe4:	b8 01 00 00 00       	mov    eax,0x1
c0018fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0018fec:	83 c4 1c             	add    esp,0x1c
c0018fef:	c3                   	ret    

c0018ff0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ff0:	57                   	push   edi
c0018ff1:	83 ec 58             	sub    esp,0x58
c0018ff4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018ffc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019000:	b8 00 00 00 00       	mov    eax,0x0
c0019005:	b9 0f 00 00 00       	mov    ecx,0xf
c001900a:	fc                   	cld    
c001900b:	89 d7                	mov    edi,edx
c001900d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001900f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019013:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001901a:	83 f8 ff             	cmp    eax,0xffffffff
c001901d:	75 35                	jne    c0019054 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001901f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019023:	88 c2                	mov    dl,al
c0019025:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001902a:	01 d0                	add    eax,edx
c001902c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019030:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019036:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001903a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019041:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019046:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001904a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019051:	eb 19                	jmp    c001906c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019053:	90                   	nop
c0019054:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019058:	88 c2                	mov    dl,al
c001905a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001905e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019065:	01 d0                	add    eax,edx
c0019067:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001906b:	90                   	nop
c001906c:	83 ec 08             	sub    esp,0x8
c001906f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019073:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019077:	50                   	push   eax
c0019078:	e8 c3 77 fe ff       	call   c0000840 <strcat>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	83 ec 0c             	sub    esp,0xc
c0019083:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019087:	50                   	push   eax
c0019088:	e8 93 c0 fe ff       	call   c0005120 <f_setlabel>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019094:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019099:	75 09                	jne    c00190a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001909b:	b8 00 00 00 00       	mov    eax,0x0
c00190a0:	eb 0a                	jmp    c00190ac <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00190a2:	66 90                	xchg   ax,ax
c00190a4:	b8 01 00 00 00       	mov    eax,0x1
c00190a9:	8d 76 00             	lea    esi,[esi+0x0]
c00190ac:	83 c4 58             	add    esp,0x58
c00190af:	5f                   	pop    edi
c00190b0:	c3                   	ret    
c00190b1:	90                   	nop
c00190b2:	66 90                	xchg   ax,ax

c00190b4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190b4:	83 ec 2c             	sub    esp,0x2c
c00190b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00190bf:	83 ec 08             	sub    esp,0x8
c00190c2:	68 24 2d 02 c0       	push   0xc0022d24
c00190c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190cb:	e8 80 76 fe ff       	call   c0000750 <strcmp>
c00190d0:	83 c4 10             	add    esp,0x10
c00190d3:	85 c0                	test   eax,eax
c00190d5:	0f 94 c0             	sete   al
c00190d8:	0f b6 c0             	movzx  eax,al
c00190db:	85 c0                	test   eax,eax
c00190dd:	74 0d                	je     c00190ec <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00190df:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190e7:	e9 c0 00 00 00       	jmp    c00191ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190ec:	83 ec 08             	sub    esp,0x8
c00190ef:	68 16 2d 02 c0       	push   0xc0022d16
c00190f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190f8:	e8 53 76 fe ff       	call   c0000750 <strcmp>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	85 c0                	test   eax,eax
c0019102:	0f 94 c0             	sete   al
c0019105:	0f b6 c0             	movzx  eax,al
c0019108:	85 c0                	test   eax,eax
c001910a:	74 10                	je     c001911c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001910c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019114:	e9 93 00 00 00       	jmp    c00191ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019119:	8d 76 00             	lea    esi,[esi+0x0]
c001911c:	83 ec 08             	sub    esp,0x8
c001911f:	68 1c 2d 02 c0       	push   0xc0022d1c
c0019124:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019128:	e8 23 76 fe ff       	call   c0000750 <strcmp>
c001912d:	83 c4 10             	add    esp,0x10
c0019130:	85 c0                	test   eax,eax
c0019132:	0f 94 c0             	sete   al
c0019135:	0f b6 c0             	movzx  eax,al
c0019138:	85 c0                	test   eax,eax
c001913a:	74 0c                	je     c0019148 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001913c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019144:	eb 66                	jmp    c00191ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019146:	66 90                	xchg   ax,ax
c0019148:	83 ec 08             	sub    esp,0x8
c001914b:	68 9c 04 02 c0       	push   0xc002049c
c0019150:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019154:	e8 f7 75 fe ff       	call   c0000750 <strcmp>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	85 c0                	test   eax,eax
c001915e:	0f 94 c0             	sete   al
c0019161:	0f b6 c0             	movzx  eax,al
c0019164:	85 c0                	test   eax,eax
c0019166:	74 0c                	je     c0019174 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019168:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019170:	eb 3a                	jmp    c00191ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019172:	66 90                	xchg   ax,ax
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	68 22 2d 02 c0       	push   0xc0022d22
c001917c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019180:	e8 cb 75 fe ff       	call   c0000750 <strcmp>
c0019185:	83 c4 10             	add    esp,0x10
c0019188:	85 c0                	test   eax,eax
c001918a:	0f 94 c0             	sete   al
c001918d:	0f b6 c0             	movzx  eax,al
c0019190:	85 c0                	test   eax,eax
c0019192:	74 0c                	je     c00191a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019194:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001919c:	eb 0e                	jmp    c00191ac <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001919e:	66 90                	xchg   ax,ax
c00191a0:	b8 08 00 00 00       	mov    eax,0x8
c00191a5:	e9 ea 00 00 00       	jmp    c0019294 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191aa:	66 90                	xchg   ax,ax
c00191ac:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00191b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191bc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191c3:	83 f8 ff             	cmp    eax,0xffffffff
c00191c6:	75 34                	jne    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00191c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00191cc:	88 c2                	mov    dl,al
c00191ce:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191d3:	01 d0                	add    eax,edx
c00191d5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191d9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191e3:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191ea:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191ef:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191f3:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00191fa:	eb 18                	jmp    c0019214 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00191fc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019200:	88 c2                	mov    dl,al
c0019202:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019206:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001920d:	01 d0                	add    eax,edx
c001920f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019213:	90                   	nop
c0019214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019218:	88 04 24             	mov    BYTE PTR [esp],al
c001921b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001921f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019223:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001922b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019230:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019238:	83 ec 0c             	sub    esp,0xc
c001923b:	68 00 20 00 00       	push   0x2000
c0019240:	e8 71 e8 fe ff       	call   c0007ab6 <malloc>
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001924c:	68 00 20 00 00       	push   0x2000
c0019251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019255:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019259:	50                   	push   eax
c001925a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001925e:	50                   	push   eax
c001925f:	e8 b9 c1 fe ff       	call   c000541d <f_mkfs>
c0019264:	83 c4 10             	add    esp,0x10
c0019267:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001926b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019270:	75 0a                	jne    c001927c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019272:	b8 00 00 00 00       	mov    eax,0x0
c0019277:	eb 1b                	jmp    c0019294 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019279:	8d 76 00             	lea    esi,[esi+0x0]
c001927c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019281:	75 09                	jne    c001928c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019283:	b8 09 00 00 00       	mov    eax,0x9
c0019288:	eb 0a                	jmp    c0019294 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001928a:	66 90                	xchg   ax,ax
c001928c:	b8 01 00 00 00       	mov    eax,0x1
c0019291:	8d 76 00             	lea    esi,[esi+0x0]
c0019294:	83 c4 2c             	add    esp,0x2c
c0019297:	c3                   	ret    

c0019298 <FAT::tryMount(LogicalDisk*, int)>:
c0019298:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001929e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192a3:	83 f8 14             	cmp    eax,0x14
c00192a6:	75 18                	jne    c00192c0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	68 28 2d 02 c0       	push   0xc0022d28
c00192b0:	e8 06 83 ff ff       	call   c00115bb <KePanic(char const*)>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	b0 00                	mov    al,0x0
c00192ba:	e9 ed 01 00 00       	jmp    c00194ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192bf:	90                   	nop
c00192c0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00192cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00192d3:	3d 00 02 00 00       	cmp    eax,0x200
c00192d8:	74 0a                	je     c00192e4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00192da:	b0 00                	mov    al,0x0
c00192dc:	e9 cb 01 00 00       	jmp    c00194ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00192ec:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00192f3:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192fa:	83 f8 ff             	cmp    eax,0xffffffff
c00192fd:	74 09                	je     c0019308 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00192ff:	b0 01                	mov    al,0x1
c0019301:	e9 a6 01 00 00       	jmp    c00194ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019306:	66 90                	xchg   ax,ax
c0019308:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019312:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001931a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019321:	88 c2                	mov    dl,al
c0019323:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019328:	01 d0                	add    eax,edx
c001932a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019331:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019337:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001933e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019345:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001934a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019351:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	68 34 02 00 00       	push   0x234
c0019360:	e8 51 e7 fe ff       	call   c0007ab6 <malloc>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001936f:	83 ec 04             	sub    esp,0x4
c0019372:	6a 00                	push   0x0
c0019374:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001937b:	50                   	push   eax
c001937c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019383:	e8 70 a8 fe ff       	call   c0003bf8 <f_mount>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019392:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001939a:	74 1c                	je     c00193b8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193a6:	e8 2b e7 fe ff       	call   c0007ad6 <rfree>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	b0 00                	mov    al,0x0
c00193b0:	e9 f7 00 00 00       	jmp    c00194ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193b5:	8d 76 00             	lea    esi,[esi+0x0]
c00193b8:	83 ec 04             	sub    esp,0x4
c00193bb:	68 00 01 00 00       	push   0x100
c00193c0:	6a 00                	push   0x0
c00193c2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193c9:	50                   	push   eax
c00193ca:	e8 21 71 fe ff       	call   c00004f0 <memset>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	83 ec 08             	sub    esp,0x8
c00193d5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193dc:	50                   	push   eax
c00193dd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193e4:	50                   	push   eax
c00193e5:	e8 56 74 fe ff       	call   c0000840 <strcat>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	83 ec 08             	sub    esp,0x8
c00193f0:	68 36 2d 02 c0       	push   0xc0022d36
c00193f5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00193fc:	50                   	push   eax
c00193fd:	e8 3e 74 fe ff       	call   c0000840 <strcat>
c0019402:	83 c4 10             	add    esp,0x10
c0019405:	83 ec 04             	sub    esp,0x4
c0019408:	6a 01                	push   0x1
c001940a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019411:	50                   	push   eax
c0019412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019416:	50                   	push   eax
c0019417:	e8 3e a8 fe ff       	call   c0003c5a <f_open>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019426:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001942d:	85 c0                	test   eax,eax
c001942f:	74 0b                	je     c001943c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019431:	78 31                	js     c0019464 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019433:	83 e8 04             	sub    eax,0x4
c0019436:	83 f8 01             	cmp    eax,0x1
c0019439:	77 29                	ja     c0019464 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001943b:	90                   	nop
c001943c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019444:	83 ec 0c             	sub    esp,0xc
c0019447:	8d 44 24 14          	lea    eax,[esp+0x14]
c001944b:	50                   	push   eax
c001944c:	e8 d8 af fe ff       	call   c0004429 <f_close>
c0019451:	83 c4 10             	add    esp,0x10
c0019454:	90                   	nop
c0019455:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001945d:	85 c0                	test   eax,eax
c001945f:	74 43                	je     c00194a4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019461:	eb 31                	jmp    c0019494 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019463:	90                   	nop
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001946e:	e8 63 e6 fe ff       	call   c0007ad6 <rfree>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	83 ec 04             	sub    esp,0x4
c0019479:	6a 00                	push   0x0
c001947b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019482:	50                   	push   eax
c0019483:	6a 00                	push   0x0
c0019485:	e8 6e a7 fe ff       	call   c0003bf8 <f_mount>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	b0 00                	mov    al,0x0
c001948f:	eb 1b                	jmp    c00194ac <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019491:	8d 76 00             	lea    esi,[esi+0x0]
c0019494:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019499:	83 c0 01             	add    eax,0x1
c001949c:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194a1:	8d 76 00             	lea    esi,[esi+0x0]
c00194a4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194ab:	90                   	nop
c00194ac:	81 c4 4c 03 00 00    	add    esp,0x34c
c00194b2:	c3                   	ret    
c00194b3:	90                   	nop

c00194b4 <FAT::allocateSwapfile(char const*, int)>:
c00194b4:	55                   	push   ebp
c00194b5:	57                   	push   edi
c00194b6:	56                   	push   esi
c00194b7:	53                   	push   ebx
c00194b8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00194be:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00194c9:	83 ec 0c             	sub    esp,0xc
c00194cc:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00194d3:	e8 de e5 fe ff       	call   c0007ab6 <malloc>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	89 c7                	mov    edi,eax
c00194dd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00194e2:	83 ec 04             	sub    esp,0x4
c00194e5:	50                   	push   eax
c00194e6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00194ed:	57                   	push   edi
c00194ee:	e8 f7 25 ff ff       	call   c000baea <File::File(char const*, Process*)>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00194fd:	83 ec 04             	sub    esp,0x4
c0019500:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019504:	50                   	push   eax
c0019505:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019509:	50                   	push   eax
c001950a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019511:	e8 f4 28 ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c0019516:	83 c4 10             	add    esp,0x10
c0019519:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019520:	c1 e0 14             	shl    eax,0x14
c0019523:	89 c7                	mov    edi,eax
c0019525:	89 c5                	mov    ebp,eax
c0019527:	c1 fd 1f             	sar    ebp,0x1f
c001952a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001952e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019532:	89 f9                	mov    ecx,edi
c0019534:	31 c1                	xor    ecx,eax
c0019536:	89 cb                	mov    ebx,ecx
c0019538:	89 e9                	mov    ecx,ebp
c001953a:	31 d1                	xor    ecx,edx
c001953c:	89 ce                	mov    esi,ecx
c001953e:	89 f0                	mov    eax,esi
c0019540:	09 d8                	or     eax,ebx
c0019542:	0f 84 9c 00 00 00    	je     c00195e4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019548:	83 ec 0c             	sub    esp,0xc
c001954b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019552:	e8 7f 27 ff ff       	call   c000bcd6 <File::unlink()>
c0019557:	83 c4 10             	add    esp,0x10
c001955a:	83 ec 08             	sub    esp,0x8
c001955d:	6a 12                	push   0x12
c001955f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019566:	e8 9d 25 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019575:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001957b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019582:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019589:	c1 e0 14             	shl    eax,0x14
c001958c:	83 ec 04             	sub    esp,0x4
c001958f:	6a 01                	push   0x1
c0019591:	50                   	push   eax
c0019592:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019599:	e8 12 bd fe ff       	call   c00052b0 <f_expand>
c001959e:	83 c4 10             	add    esp,0x10
c00195a1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195aa:	83 c0 10             	add    eax,0x10
c00195ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00195af:	83 ec 0c             	sub    esp,0xc
c00195b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195b6:	52                   	push   edx
c00195b7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00195bb:	52                   	push   edx
c00195bc:	6a 00                	push   0x0
c00195be:	68 00 04 00 00       	push   0x400
c00195c3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195ca:	ff d0                	call   eax
c00195cc:	83 c4 20             	add    esp,0x20
c00195cf:	83 ec 0c             	sub    esp,0xc
c00195d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195d9:	e8 88 25 ff ff       	call   c000bb66 <File::close()>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	8d 76 00             	lea    esi,[esi+0x0]
c00195e4:	83 ec 08             	sub    esp,0x8
c00195e7:	6a 01                	push   0x1
c00195e9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195f0:	e8 13 25 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0019601:	83 c0 0c             	add    eax,0xc
c0019604:	8b 00                	mov    eax,DWORD PTR [eax]
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	8d 54 24 24          	lea    edx,[esp+0x24]
c001960d:	52                   	push   edx
c001960e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019612:	52                   	push   edx
c0019613:	6a 00                	push   0x0
c0019615:	6a 04                	push   0x4
c0019617:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001961e:	ff d0                	call   eax
c0019620:	83 c4 20             	add    esp,0x20
c0019623:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001962a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019630:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019637:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001963e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019641:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019652:	e8 0f 25 ff ff       	call   c000bb66 <File::close()>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019661:	ba 00 00 00 00       	mov    edx,0x0
c0019666:	81 c4 3c 04 00 00    	add    esp,0x43c
c001966c:	5b                   	pop    ebx
c001966d:	5e                   	pop    esi
c001966e:	5f                   	pop    edi
c001966f:	5d                   	pop    ebp
c0019670:	c3                   	ret    
c0019671:	90                   	nop
c0019672:	66 90                	xchg   ax,ax

c0019674 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019674:	57                   	push   edi
c0019675:	56                   	push   esi
c0019676:	53                   	push   ebx
c0019677:	81 ec 50 02 00 00    	sub    esp,0x250
c001967d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019685:	74 0d                	je     c0019694 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019687:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001968f:	75 0f                	jne    c00196a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019691:	8d 76 00             	lea    esi,[esi+0x0]
c0019694:	b8 04 00 00 00       	mov    eax,0x4
c0019699:	e9 3a 01 00 00       	jmp    c00197d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001969e:	66 90                	xchg   ax,ax
c00196a0:	83 ec 08             	sub    esp,0x8
c00196a3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196aa:	50                   	push   eax
c00196ab:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00196b2:	e8 3f b0 fe ff       	call   c00046f6 <f_readdir>
c00196b7:	83 c4 10             	add    esp,0x10
c00196ba:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00196c1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00196d2:	83 c0 16             	add    eax,0x16
c00196d5:	50                   	push   eax
c00196d6:	e8 95 6e fe ff       	call   c0000570 <strlen>
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	ba 00 00 00 00       	mov    edx,0x0
c00196e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00196eb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00196f2:	0f b6 c0             	movzx  eax,al
c00196f5:	83 e0 10             	and    eax,0x10
c00196f8:	74 0a                	je     c0019704 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00196fa:	b8 02 00 00 00       	mov    eax,0x2
c00196ff:	eb 0b                	jmp    c001970c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019701:	8d 76 00             	lea    esi,[esi+0x0]
c0019704:	b8 01 00 00 00       	mov    eax,0x1
c0019709:	8d 76 00             	lea    esi,[esi+0x0]
c001970c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019710:	83 ec 08             	sub    esp,0x8
c0019713:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001971a:	83 c0 16             	add    eax,0x16
c001971d:	50                   	push   eax
c001971e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019722:	83 c0 10             	add    eax,0x10
c0019725:	50                   	push   eax
c0019726:	e8 15 6f fe ff       	call   c0000640 <strcpy>
c001972b:	83 c4 10             	add    esp,0x10
c001972e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019735:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001973c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019740:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019747:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001974e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019755:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001975c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019763:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001976a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019771:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019778:	89 c6                	mov    esi,eax
c001977a:	89 d7                	mov    edi,edx
c001977c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001977e:	89 c8                	mov    eax,ecx
c0019780:	89 fa                	mov    edx,edi
c0019782:	89 f3                	mov    ebx,esi
c0019784:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001978b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019792:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019799:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197a6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197ad:	0f be c0             	movsx  eax,al
c00197b0:	85 c0                	test   eax,eax
c00197b2:	75 08                	jne    c00197bc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00197b4:	b8 07 00 00 00       	mov    eax,0x7
c00197b9:	eb 1d                	jmp    c00197d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197bb:	90                   	nop
c00197bc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00197c3:	85 c0                	test   eax,eax
c00197c5:	75 09                	jne    c00197d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00197c7:	b8 00 00 00 00       	mov    eax,0x0
c00197cc:	eb 0a                	jmp    c00197d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197ce:	66 90                	xchg   ax,ax
c00197d0:	b8 01 00 00 00       	mov    eax,0x1
c00197d5:	8d 76 00             	lea    esi,[esi+0x0]
c00197d8:	81 c4 50 02 00 00    	add    esp,0x250
c00197de:	5b                   	pop    ebx
c00197df:	5e                   	pop    esi
c00197e0:	5f                   	pop    edi
c00197e1:	c3                   	ret    
c00197e2:	66 90                	xchg   ax,ax

c00197e4 <FAT::read(void*, unsigned long, void*, int*)>:
c00197e4:	83 ec 1c             	sub    esp,0x1c
c00197e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197ec:	74 0a                	je     c00197f8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00197ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197f3:	75 0b                	jne    c0019800 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00197f5:	8d 76 00             	lea    esi,[esi+0x0]
c00197f8:	b8 04 00 00 00       	mov    eax,0x4
c00197fd:	eb 41                	jmp    c0019840 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197ff:	90                   	nop
c0019800:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019804:	50                   	push   eax
c0019805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019809:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001980d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019811:	e8 07 a7 fe ff       	call   c0003f1d <f_read>
c0019816:	83 c4 10             	add    esp,0x10
c0019819:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001981d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019821:	89 c2                	mov    edx,eax
c0019823:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019827:	89 10                	mov    DWORD PTR [eax],edx
c0019829:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001982d:	85 c0                	test   eax,eax
c001982f:	75 07                	jne    c0019838 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019831:	b8 00 00 00 00       	mov    eax,0x0
c0019836:	eb 08                	jmp    c0019840 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019838:	b8 01 00 00 00       	mov    eax,0x1
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	83 c4 1c             	add    esp,0x1c
c0019843:	c3                   	ret    

c0019844 <FAT::write(void*, unsigned long, void*, int*)>:
c0019844:	83 ec 1c             	sub    esp,0x1c
c0019847:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001984c:	74 0a                	je     c0019858 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001984e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019853:	75 0b                	jne    c0019860 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019855:	8d 76 00             	lea    esi,[esi+0x0]
c0019858:	b8 04 00 00 00       	mov    eax,0x4
c001985d:	eb 41                	jmp    c00198a0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001985f:	90                   	nop
c0019860:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019864:	50                   	push   eax
c0019865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019869:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001986d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019871:	e8 a6 a8 fe ff       	call   c000411c <f_write>
c0019876:	83 c4 10             	add    esp,0x10
c0019879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001987d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019881:	89 c2                	mov    edx,eax
c0019883:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019887:	89 10                	mov    DWORD PTR [eax],edx
c0019889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001988d:	85 c0                	test   eax,eax
c001988f:	75 07                	jne    c0019898 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019891:	b8 00 00 00 00       	mov    eax,0x0
c0019896:	eb 08                	jmp    c00198a0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019898:	b8 01 00 00 00       	mov    eax,0x1
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	83 c4 1c             	add    esp,0x1c
c00198a3:	c3                   	ret    

c00198a4 <FAT::close(void*)>:
c00198a4:	83 ec 1c             	sub    esp,0x1c
c00198a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198ac:	75 0a                	jne    c00198b8 <FAT::close(void*)+0x14>
c00198ae:	b8 04 00 00 00       	mov    eax,0x4
c00198b3:	eb 3f                	jmp    c00198f4 <FAT::close(void*)+0x50>
c00198b5:	8d 76 00             	lea    esi,[esi+0x0]
c00198b8:	83 ec 0c             	sub    esp,0xc
c00198bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198bf:	e8 65 ab fe ff       	call   c0004429 <f_close>
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198cb:	83 ec 0c             	sub    esp,0xc
c00198ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198d2:	e8 ef e1 fe ff       	call   c0007ac6 <free>
c00198d7:	83 c4 10             	add    esp,0x10
c00198da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198de:	85 c0                	test   eax,eax
c00198e0:	75 0a                	jne    c00198ec <FAT::close(void*)+0x48>
c00198e2:	b8 00 00 00 00       	mov    eax,0x0
c00198e7:	eb 0b                	jmp    c00198f4 <FAT::close(void*)+0x50>
c00198e9:	8d 76 00             	lea    esi,[esi+0x0]
c00198ec:	b8 01 00 00 00       	mov    eax,0x1
c00198f1:	8d 76 00             	lea    esi,[esi+0x0]
c00198f4:	83 c4 1c             	add    esp,0x1c
c00198f7:	c3                   	ret    

c00198f8 <FAT::closeDir(void*)>:
c00198f8:	83 ec 1c             	sub    esp,0x1c
c00198fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019900:	75 0a                	jne    c001990c <FAT::closeDir(void*)+0x14>
c0019902:	b8 04 00 00 00       	mov    eax,0x4
c0019907:	eb 3f                	jmp    c0019948 <FAT::closeDir(void*)+0x50>
c0019909:	8d 76 00             	lea    esi,[esi+0x0]
c001990c:	83 ec 0c             	sub    esp,0xc
c001990f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019913:	e8 bc ad fe ff       	call   c00046d4 <f_closedir>
c0019918:	83 c4 10             	add    esp,0x10
c001991b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001991f:	83 ec 0c             	sub    esp,0xc
c0019922:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019926:	e8 9b e1 fe ff       	call   c0007ac6 <free>
c001992b:	83 c4 10             	add    esp,0x10
c001992e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019932:	85 c0                	test   eax,eax
c0019934:	75 0a                	jne    c0019940 <FAT::closeDir(void*)+0x48>
c0019936:	b8 00 00 00 00       	mov    eax,0x0
c001993b:	eb 0b                	jmp    c0019948 <FAT::closeDir(void*)+0x50>
c001993d:	8d 76 00             	lea    esi,[esi+0x0]
c0019940:	b8 01 00 00 00       	mov    eax,0x1
c0019945:	8d 76 00             	lea    esi,[esi+0x0]
c0019948:	83 c4 1c             	add    esp,0x1c
c001994b:	c3                   	ret    

c001994c <FAT::truncate(void*, unsigned long long)>:
c001994c:	83 ec 2c             	sub    esp,0x2c
c001994f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019957:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001995b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001995f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019964:	75 0a                	jne    c0019970 <FAT::truncate(void*, unsigned long long)+0x24>
c0019966:	b8 04 00 00 00       	mov    eax,0x4
c001996b:	eb 47                	jmp    c00199b4 <FAT::truncate(void*, unsigned long long)+0x68>
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019974:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019977:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001997b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019983:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019987:	83 ec 08             	sub    esp,0x8
c001998a:	50                   	push   eax
c001998b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001998f:	e8 c4 aa fe ff       	call   c0004458 <f_lseek>
c0019994:	83 c4 10             	add    esp,0x10
c0019997:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001999b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001999f:	85 c0                	test   eax,eax
c00199a1:	75 09                	jne    c00199ac <FAT::truncate(void*, unsigned long long)+0x60>
c00199a3:	b8 00 00 00 00       	mov    eax,0x0
c00199a8:	eb 0a                	jmp    c00199b4 <FAT::truncate(void*, unsigned long long)+0x68>
c00199aa:	66 90                	xchg   ax,ax
c00199ac:	b8 01 00 00 00       	mov    eax,0x1
c00199b1:	8d 76 00             	lea    esi,[esi+0x0]
c00199b4:	83 c4 2c             	add    esp,0x2c
c00199b7:	c3                   	ret    

c00199b8 <FAT::seek(void*, unsigned long long)>:
c00199b8:	83 ec 2c             	sub    esp,0x2c
c00199bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199d0:	75 0a                	jne    c00199dc <FAT::seek(void*, unsigned long long)+0x24>
c00199d2:	b8 04 00 00 00       	mov    eax,0x4
c00199d7:	eb 33                	jmp    c0019a0c <FAT::seek(void*, unsigned long long)+0x54>
c00199d9:	8d 76 00             	lea    esi,[esi+0x0]
c00199dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199e0:	83 ec 08             	sub    esp,0x8
c00199e3:	50                   	push   eax
c00199e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199e8:	e8 6b aa fe ff       	call   c0004458 <f_lseek>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199f8:	85 c0                	test   eax,eax
c00199fa:	75 08                	jne    c0019a04 <FAT::seek(void*, unsigned long long)+0x4c>
c00199fc:	b8 00 00 00 00       	mov    eax,0x0
c0019a01:	eb 09                	jmp    c0019a0c <FAT::seek(void*, unsigned long long)+0x54>
c0019a03:	90                   	nop
c0019a04:	b8 01 00 00 00       	mov    eax,0x1
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	83 c4 2c             	add    esp,0x2c
c0019a0f:	c3                   	ret    

c0019a10 <fatWrapperReadDisk>:
c0019a10:	53                   	push   ebx
c0019a11:	83 ec 18             	sub    esp,0x18
c0019a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a21:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a30:	ba 00 00 00 00       	mov    edx,0x0
c0019a35:	83 ec 0c             	sub    esp,0xc
c0019a38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a3c:	53                   	push   ebx
c0019a3d:	52                   	push   edx
c0019a3e:	50                   	push   eax
c0019a3f:	51                   	push   ecx
c0019a40:	e8 ff 42 ff ff       	call   c000dd44 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a45:	83 c4 20             	add    esp,0x20
c0019a48:	83 c4 18             	add    esp,0x18
c0019a4b:	5b                   	pop    ebx
c0019a4c:	c3                   	ret    
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a50 <fatWrapperWriteDisk>:
c0019a50:	53                   	push   ebx
c0019a51:	83 ec 18             	sub    esp,0x18
c0019a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a61:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a70:	ba 00 00 00 00       	mov    edx,0x0
c0019a75:	83 ec 0c             	sub    esp,0xc
c0019a78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7c:	53                   	push   ebx
c0019a7d:	52                   	push   edx
c0019a7e:	50                   	push   eax
c0019a7f:	51                   	push   ecx
c0019a80:	e8 2b 43 ff ff       	call   c000ddb0 <LogicalDisk::write(unsigned long long, int, void*)>
c0019a85:	83 c4 20             	add    esp,0x20
c0019a88:	83 c4 18             	add    esp,0x18
c0019a8b:	5b                   	pop    ebx
c0019a8c:	c3                   	ret    
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a90 <fatWrapperIoctl>:
c0019a90:	53                   	push   ebx
c0019a91:	83 ec 28             	sub    esp,0x28
c0019a94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019a98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a9c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019aa0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019aa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aa9:	83 f8 02             	cmp    eax,0x2
c0019aac:	75 32                	jne    c0019ae0 <fatWrapperIoctl+0x50>
c0019aae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ab2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ab6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019abb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019ac2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019ac8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ace:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ad2:	66 89 02             	mov    WORD PTR [edx],ax
c0019ad5:	b8 00 00 00 00       	mov    eax,0x0
c0019ada:	e9 c5 00 00 00       	jmp    c0019ba4 <fatWrapperIoctl+0x114>
c0019adf:	90                   	nop
c0019ae0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ae5:	83 f8 01             	cmp    eax,0x1
c0019ae8:	75 6a                	jne    c0019b54 <fatWrapperIoctl+0xc4>
c0019aea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019aee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019af2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af7:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019afe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b04:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b0a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b10:	89 c8                	mov    eax,ecx
c0019b12:	89 da                	mov    edx,ebx
c0019b14:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b18:	c1 e0 0a             	shl    eax,0xa
c0019b1b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b20:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b27:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b2d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b33:	89 cb                	mov    ebx,ecx
c0019b35:	c1 fb 1f             	sar    ebx,0x1f
c0019b38:	53                   	push   ebx
c0019b39:	51                   	push   ecx
c0019b3a:	52                   	push   edx
c0019b3b:	50                   	push   eax
c0019b3c:	e8 6f 5b 00 00       	call   c001f6b0 <__udivdi3>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	89 c2                	mov    edx,eax
c0019b46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b4a:	89 10                	mov    DWORD PTR [eax],edx
c0019b4c:	b8 00 00 00 00       	mov    eax,0x0
c0019b51:	eb 51                	jmp    c0019ba4 <fatWrapperIoctl+0x114>
c0019b53:	90                   	nop
c0019b54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b59:	85 c0                	test   eax,eax
c0019b5b:	75 07                	jne    c0019b64 <fatWrapperIoctl+0xd4>
c0019b5d:	b8 00 00 00 00       	mov    eax,0x0
c0019b62:	eb 40                	jmp    c0019ba4 <fatWrapperIoctl+0x114>
c0019b64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b69:	83 f8 03             	cmp    eax,0x3
c0019b6c:	75 1a                	jne    c0019b88 <fatWrapperIoctl+0xf8>
c0019b6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b7a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b80:	b8 00 00 00 00       	mov    eax,0x0
c0019b85:	eb 1d                	jmp    c0019ba4 <fatWrapperIoctl+0x114>
c0019b87:	90                   	nop
c0019b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b8d:	83 f8 04             	cmp    eax,0x4
c0019b90:	75 0a                	jne    c0019b9c <fatWrapperIoctl+0x10c>
c0019b92:	b8 00 00 00 00       	mov    eax,0x0
c0019b97:	eb 0b                	jmp    c0019ba4 <fatWrapperIoctl+0x114>
c0019b99:	8d 76 00             	lea    esi,[esi+0x0]
c0019b9c:	b8 04 00 00 00       	mov    eax,0x4
c0019ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba4:	83 c4 28             	add    esp,0x28
c0019ba7:	5b                   	pop    ebx
c0019ba8:	c3                   	ret    
c0019ba9:	90                   	nop
c0019baa:	66 90                	xchg   ax,ax

c0019bac <FAT::FAT()>:
c0019bac:	83 ec 1c             	sub    esp,0x1c
c0019baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb3:	83 ec 0c             	sub    esp,0xc
c0019bb6:	50                   	push   eax
c0019bb7:	e8 9c 1b ff ff       	call   c000b758 <Filesystem::Filesystem()>
c0019bbc:	83 c4 10             	add    esp,0x10
c0019bbf:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c0019bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc8:	89 10                	mov    DWORD PTR [eax],edx
c0019bca:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019bd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019bdc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019be1:	7f 19                	jg     c0019bfc <FAT::FAT()+0x50>
c0019be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019be7:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019bf2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019bf7:	eb e3                	jmp    c0019bdc <FAT::FAT()+0x30>
c0019bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bfc:	90                   	nop
c0019bfd:	83 c4 1c             	add    esp,0x1c
c0019c00:	c3                   	ret    
c0019c01:	90                   	nop
c0019c02:	66 90                	xchg   ax,ax

c0019c04 <FAT::fixFilepath(char*)>:
c0019c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c08:	8a 00                	mov    al,BYTE PTR [eax]
c0019c0a:	0f be c0             	movsx  eax,al
c0019c0d:	83 f8 40             	cmp    eax,0x40
c0019c10:	7e 2e                	jle    c0019c40 <FAT::fixFilepath(char*)+0x3c>
c0019c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c16:	8a 00                	mov    al,BYTE PTR [eax]
c0019c18:	83 e8 41             	sub    eax,0x41
c0019c1b:	88 c2                	mov    dl,al
c0019c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c21:	88 10                	mov    BYTE PTR [eax],dl
c0019c23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c27:	8a 00                	mov    al,BYTE PTR [eax]
c0019c29:	0f be c0             	movsx  eax,al
c0019c2c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c33:	83 c0 30             	add    eax,0x30
c0019c36:	88 c2                	mov    dl,al
c0019c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c3c:	88 10                	mov    BYTE PTR [eax],dl
c0019c3e:	66 90                	xchg   ax,ax
c0019c40:	90                   	nop
c0019c41:	c3                   	ret    
c0019c42:	66 90                	xchg   ax,ax

c0019c44 <FAT::open(char const*, void**, FileOpenMode)>:
c0019c44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c52:	74 0c                	je     c0019c60 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c54:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019c5c:	75 0e                	jne    c0019c6c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019c5e:	66 90                	xchg   ax,ax
c0019c60:	b8 04 00 00 00       	mov    eax,0x4
c0019c65:	e9 46 01 00 00       	jmp    c0019db0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c6a:	66 90                	xchg   ax,ax
c0019c6c:	83 ec 08             	sub    esp,0x8
c0019c6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c7a:	50                   	push   eax
c0019c7b:	e8 c0 69 fe ff       	call   c0000640 <strcpy>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	83 ec 08             	sub    esp,0x8
c0019c86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c8a:	50                   	push   eax
c0019c8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c92:	e8 6d ff ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c0019c97:	83 c4 10             	add    esp,0x10
c0019c9a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019ca2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ca9:	83 e0 01             	and    eax,0x1
c0019cac:	74 12                	je     c0019cc0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cae:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cb5:	83 c8 01             	or     eax,0x1
c0019cb8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cbf:	90                   	nop
c0019cc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cc7:	83 e0 04             	and    eax,0x4
c0019cca:	74 24                	je     c0019cf0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019ccc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cd3:	83 c8 30             	or     eax,0x30
c0019cd6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cdd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ce4:	83 c8 02             	or     eax,0x2
c0019ce7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cee:	66 90                	xchg   ax,ax
c0019cf0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cf7:	83 e0 02             	and    eax,0x2
c0019cfa:	74 14                	je     c0019d10 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019cfc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d03:	83 c8 02             	or     eax,0x2
c0019d06:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d17:	83 e0 08             	and    eax,0x8
c0019d1a:	74 14                	je     c0019d30 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d1c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d23:	83 c8 04             	or     eax,0x4
c0019d26:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d37:	83 e0 10             	and    eax,0x10
c0019d3a:	74 14                	je     c0019d50 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d43:	83 c8 08             	or     eax,0x8
c0019d46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	83 ec 0c             	sub    esp,0xc
c0019d53:	68 28 02 00 00       	push   0x228
c0019d58:	e8 59 dd fe ff       	call   c0007ab6 <malloc>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	89 c2                	mov    edx,eax
c0019d62:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d69:	89 10                	mov    DWORD PTR [eax],edx
c0019d6b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d73:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d7c:	83 ec 04             	sub    esp,0x4
c0019d7f:	52                   	push   edx
c0019d80:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d84:	52                   	push   edx
c0019d85:	50                   	push   eax
c0019d86:	e8 cf 9e fe ff       	call   c0003c5a <f_open>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019d95:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019d9d:	74 09                	je     c0019da8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019d9f:	b8 01 00 00 00       	mov    eax,0x1
c0019da4:	eb 0a                	jmp    c0019db0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	b8 00 00 00 00       	mov    eax,0x0
c0019dad:	8d 76 00             	lea    esi,[esi+0x0]
c0019db0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019db6:	c3                   	ret    
c0019db7:	90                   	nop

c0019db8 <FAT::openDir(char const*, void**)>:
c0019db8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dbe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dc6:	74 0c                	je     c0019dd4 <FAT::openDir(char const*, void**)+0x1c>
c0019dc8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019dd0:	75 0e                	jne    c0019de0 <FAT::openDir(char const*, void**)+0x28>
c0019dd2:	66 90                	xchg   ax,ax
c0019dd4:	b8 04 00 00 00       	mov    eax,0x4
c0019dd9:	e9 82 00 00 00       	jmp    c0019e60 <FAT::openDir(char const*, void**)+0xa8>
c0019dde:	66 90                	xchg   ax,ax
c0019de0:	83 ec 08             	sub    esp,0x8
c0019de3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dea:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dee:	50                   	push   eax
c0019def:	e8 4c 68 fe ff       	call   c0000640 <strcpy>
c0019df4:	83 c4 10             	add    esp,0x10
c0019df7:	83 ec 08             	sub    esp,0x8
c0019dfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dfe:	50                   	push   eax
c0019dff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e06:	e8 f9 fd ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c0019e0b:	83 c4 10             	add    esp,0x10
c0019e0e:	83 ec 0c             	sub    esp,0xc
c0019e11:	6a 30                	push   0x30
c0019e13:	e8 9e dc fe ff       	call   c0007ab6 <malloc>
c0019e18:	83 c4 10             	add    esp,0x10
c0019e1b:	89 c2                	mov    edx,eax
c0019e1d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e24:	89 10                	mov    DWORD PTR [eax],edx
c0019e26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e2f:	83 ec 08             	sub    esp,0x8
c0019e32:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e36:	52                   	push   edx
c0019e37:	50                   	push   eax
c0019e38:	e8 cc a7 fe ff       	call   c0004609 <f_opendir>
c0019e3d:	83 c4 10             	add    esp,0x10
c0019e40:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e47:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e4f:	74 07                	je     c0019e58 <FAT::openDir(char const*, void**)+0xa0>
c0019e51:	b8 01 00 00 00       	mov    eax,0x1
c0019e56:	eb 08                	jmp    c0019e60 <FAT::openDir(char const*, void**)+0xa8>
c0019e58:	b8 00 00 00 00       	mov    eax,0x0
c0019e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e66:	c3                   	ret    
c0019e67:	90                   	nop

c0019e68 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e68:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e6e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e76:	75 0c                	jne    c0019e84 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e78:	b8 04 00 00 00       	mov    eax,0x4
c0019e7d:	e9 d6 00 00 00       	jmp    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e82:	66 90                	xchg   ax,ax
c0019e84:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019e8c:	75 0a                	jne    c0019e98 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019e8e:	b8 04 00 00 00       	mov    eax,0x4
c0019e93:	e9 c0 00 00 00       	jmp    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e98:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ea0:	75 0a                	jne    c0019eac <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ea2:	b8 04 00 00 00       	mov    eax,0x4
c0019ea7:	e9 ac 00 00 00       	jmp    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019eb6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019ebd:	50                   	push   eax
c0019ebe:	e8 7d 67 fe ff       	call   c0000640 <strcpy>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	83 ec 08             	sub    esp,0x8
c0019ec9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ed0:	50                   	push   eax
c0019ed1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ed8:	e8 27 fd ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c0019edd:	83 c4 10             	add    esp,0x10
c0019ee0:	83 ec 08             	sub    esp,0x8
c0019ee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ee7:	50                   	push   eax
c0019ee8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019eef:	50                   	push   eax
c0019ef0:	e8 93 a8 fe ff       	call   c0004788 <f_stat>
c0019ef5:	83 c4 10             	add    esp,0x10
c0019ef8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019eff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f06:	85 c0                	test   eax,eax
c0019f08:	74 0a                	je     c0019f14 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f0a:	83 f8 04             	cmp    eax,0x4
c0019f0d:	74 39                	je     c0019f48 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f0f:	eb 3f                	jmp    c0019f50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f11:	8d 76 00             	lea    esi,[esi+0x0]
c0019f14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f18:	0f b6 c0             	movzx  eax,al
c0019f1b:	83 e0 10             	and    eax,0x10
c0019f1e:	0f 95 c2             	setne  dl
c0019f21:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f28:	88 10                	mov    BYTE PTR [eax],dl
c0019f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f2e:	ba 00 00 00 00       	mov    edx,0x0
c0019f33:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f3a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f3f:	b8 00 00 00 00       	mov    eax,0x0
c0019f44:	eb 12                	jmp    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f46:	66 90                	xchg   ax,ax
c0019f48:	b8 02 00 00 00       	mov    eax,0x2
c0019f4d:	eb 09                	jmp    c0019f58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f4f:	90                   	nop
c0019f50:	b8 01 00 00 00       	mov    eax,0x1
c0019f55:	8d 76 00             	lea    esi,[esi+0x0]
c0019f58:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f5e:	c3                   	ret    
c0019f5f:	90                   	nop

c0019f60 <FAT::unlink(char const*)>:
c0019f60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f6e:	75 08                	jne    c0019f78 <FAT::unlink(char const*)+0x18>
c0019f70:	b8 04 00 00 00       	mov    eax,0x4
c0019f75:	eb 61                	jmp    c0019fd8 <FAT::unlink(char const*)+0x78>
c0019f77:	90                   	nop
c0019f78:	83 ec 08             	sub    esp,0x8
c0019f7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f86:	50                   	push   eax
c0019f87:	e8 b4 66 fe ff       	call   c0000640 <strcpy>
c0019f8c:	83 c4 10             	add    esp,0x10
c0019f8f:	83 ec 08             	sub    esp,0x8
c0019f92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f96:	50                   	push   eax
c0019f97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f9e:	e8 61 fc ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	83 ec 0c             	sub    esp,0xc
c0019fa9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fad:	50                   	push   eax
c0019fae:	e8 47 aa fe ff       	call   c00049fa <f_unlink>
c0019fb3:	83 c4 10             	add    esp,0x10
c0019fb6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fbd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019fc4:	85 c0                	test   eax,eax
c0019fc6:	75 08                	jne    c0019fd0 <FAT::unlink(char const*)+0x70>
c0019fc8:	b8 00 00 00 00       	mov    eax,0x0
c0019fcd:	eb 09                	jmp    c0019fd8 <FAT::unlink(char const*)+0x78>
c0019fcf:	90                   	nop
c0019fd0:	b8 01 00 00 00       	mov    eax,0x1
c0019fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fde:	c3                   	ret    
c0019fdf:	90                   	nop

c0019fe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019fe0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fe6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019fed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019ff4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ff8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ffc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a004:	75 0a                	jne    c001a010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a006:	b8 04 00 00 00       	mov    eax,0x4
c001a00b:	e9 7c 01 00 00       	jmp    c001a18c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a010:	83 ec 08             	sub    esp,0x8
c001a013:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a01a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a01e:	50                   	push   eax
c001a01f:	e8 1c 66 fe ff       	call   c0000640 <strcpy>
c001a024:	83 c4 10             	add    esp,0x10
c001a027:	83 ec 08             	sub    esp,0x8
c001a02a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a02e:	50                   	push   eax
c001a02f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a036:	e8 c9 fb ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c001a03b:	83 c4 10             	add    esp,0x10
c001a03e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a046:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a04e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a053:	83 e0 01             	and    eax,0x1
c001a056:	74 14                	je     c001a06c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a058:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a05f:	83 c8 01             	or     eax,0x1
c001a062:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a069:	8d 76 00             	lea    esi,[esi+0x0]
c001a06c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a071:	83 e0 02             	and    eax,0x2
c001a074:	74 12                	je     c001a088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a076:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a07d:	83 c8 20             	or     eax,0x20
c001a080:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a087:	90                   	nop
c001a088:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a08d:	83 e0 04             	and    eax,0x4
c001a090:	74 12                	je     c001a0a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a092:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a099:	83 c8 04             	or     eax,0x4
c001a09c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0a3:	90                   	nop
c001a0a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0a9:	83 e0 08             	and    eax,0x8
c001a0ac:	74 12                	je     c001a0c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a0ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0b5:	83 c8 02             	or     eax,0x2
c001a0b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0bf:	90                   	nop
c001a0c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0c5:	83 e0 01             	and    eax,0x1
c001a0c8:	74 12                	je     c001a0dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a0ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0d1:	83 c8 01             	or     eax,0x1
c001a0d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0db:	90                   	nop
c001a0dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0e1:	83 e0 02             	and    eax,0x2
c001a0e4:	74 12                	je     c001a0f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a0e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0ed:	83 c8 20             	or     eax,0x20
c001a0f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0f7:	90                   	nop
c001a0f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0fd:	83 e0 04             	and    eax,0x4
c001a100:	74 12                	je     c001a114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a102:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a109:	83 c8 04             	or     eax,0x4
c001a10c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a113:	90                   	nop
c001a114:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a119:	83 e0 08             	and    eax,0x8
c001a11c:	74 12                	je     c001a130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a11e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a125:	83 c8 02             	or     eax,0x2
c001a128:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a12f:	90                   	nop
c001a130:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a137:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a13e:	09 d0                	or     eax,edx
c001a140:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a147:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a14f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a157:	83 ec 04             	sub    esp,0x4
c001a15a:	52                   	push   edx
c001a15b:	50                   	push   eax
c001a15c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a160:	50                   	push   eax
c001a161:	e8 09 ad fe ff       	call   c0004e6f <f_chmod>
c001a166:	83 c4 10             	add    esp,0x10
c001a169:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a170:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a177:	85 c0                	test   eax,eax
c001a179:	75 09                	jne    c001a184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a17b:	b8 00 00 00 00       	mov    eax,0x0
c001a180:	eb 0a                	jmp    c001a18c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a182:	66 90                	xchg   ax,ax
c001a184:	b8 01 00 00 00       	mov    eax,0x1
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a192:	c3                   	ret    
c001a193:	90                   	nop

c001a194 <FAT::rename(char const*, char const*)>:
c001a194:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a19a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1a2:	74 0c                	je     c001a1b0 <FAT::rename(char const*, char const*)+0x1c>
c001a1a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1ac:	75 0e                	jne    c001a1bc <FAT::rename(char const*, char const*)+0x28>
c001a1ae:	66 90                	xchg   ax,ax
c001a1b0:	b8 04 00 00 00       	mov    eax,0x4
c001a1b5:	e9 9e 00 00 00       	jmp    c001a258 <FAT::rename(char const*, char const*)+0xc4>
c001a1ba:	66 90                	xchg   ax,ax
c001a1bc:	83 ec 08             	sub    esp,0x8
c001a1bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1cd:	50                   	push   eax
c001a1ce:	e8 6d 64 fe ff       	call   c0000640 <strcpy>
c001a1d3:	83 c4 10             	add    esp,0x10
c001a1d6:	83 ec 08             	sub    esp,0x8
c001a1d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1e0:	50                   	push   eax
c001a1e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1e8:	e8 17 fa ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c001a1ed:	83 c4 10             	add    esp,0x10
c001a1f0:	83 ec 08             	sub    esp,0x8
c001a1f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a1fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a1fe:	50                   	push   eax
c001a1ff:	e8 3c 64 fe ff       	call   c0000640 <strcpy>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	83 ec 08             	sub    esp,0x8
c001a20a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a20e:	50                   	push   eax
c001a20f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a216:	e8 e9 f9 ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c001a21b:	83 c4 10             	add    esp,0x10
c001a21e:	83 ec 08             	sub    esp,0x8
c001a221:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a225:	50                   	push   eax
c001a226:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a22d:	50                   	push   eax
c001a22e:	e8 84 aa fe ff       	call   c0004cb7 <f_rename>
c001a233:	83 c4 10             	add    esp,0x10
c001a236:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a23d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a244:	85 c0                	test   eax,eax
c001a246:	75 08                	jne    c001a250 <FAT::rename(char const*, char const*)+0xbc>
c001a248:	b8 00 00 00 00       	mov    eax,0x0
c001a24d:	eb 09                	jmp    c001a258 <FAT::rename(char const*, char const*)+0xc4>
c001a24f:	90                   	nop
c001a250:	b8 01 00 00 00       	mov    eax,0x1
c001a255:	8d 76 00             	lea    esi,[esi+0x0]
c001a258:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a25e:	c3                   	ret    
c001a25f:	90                   	nop

c001a260 <FAT::mkdir(char const*)>:
c001a260:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a266:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a26e:	75 08                	jne    c001a278 <FAT::mkdir(char const*)+0x18>
c001a270:	b8 04 00 00 00       	mov    eax,0x4
c001a275:	eb 61                	jmp    c001a2d8 <FAT::mkdir(char const*)+0x78>
c001a277:	90                   	nop
c001a278:	83 ec 08             	sub    esp,0x8
c001a27b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a282:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a286:	50                   	push   eax
c001a287:	e8 b4 63 fe ff       	call   c0000640 <strcpy>
c001a28c:	83 c4 10             	add    esp,0x10
c001a28f:	83 ec 08             	sub    esp,0x8
c001a292:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a296:	50                   	push   eax
c001a297:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a29e:	e8 61 f9 ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	83 ec 0c             	sub    esp,0xc
c001a2a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2ad:	50                   	push   eax
c001a2ae:	e8 69 a8 fe ff       	call   c0004b1c <f_mkdir>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2c4:	85 c0                	test   eax,eax
c001a2c6:	75 08                	jne    c001a2d0 <FAT::mkdir(char const*)+0x70>
c001a2c8:	b8 00 00 00 00       	mov    eax,0x0
c001a2cd:	eb 09                	jmp    c001a2d8 <FAT::mkdir(char const*)+0x78>
c001a2cf:	90                   	nop
c001a2d0:	b8 01 00 00 00       	mov    eax,0x1
c001a2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2de:	c3                   	ret    
c001a2df:	90                   	nop

c001a2e0 <FAT::exists(char const*)>:
c001a2e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2e6:	83 ec 08             	sub    esp,0x8
c001a2e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2f4:	50                   	push   eax
c001a2f5:	e8 46 63 fe ff       	call   c0000640 <strcpy>
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	83 ec 08             	sub    esp,0x8
c001a300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a304:	50                   	push   eax
c001a305:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a30c:	e8 f3 f8 ff ff       	call   c0019c04 <FAT::fixFilepath(char*)>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	83 ec 08             	sub    esp,0x8
c001a317:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a31e:	50                   	push   eax
c001a31f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a323:	50                   	push   eax
c001a324:	e8 5f a4 fe ff       	call   c0004788 <f_stat>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a333:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a33a:	85 c0                	test   eax,eax
c001a33c:	75 06                	jne    c001a344 <FAT::exists(char const*)+0x64>
c001a33e:	b0 01                	mov    al,0x1
c001a340:	eb 06                	jmp    c001a348 <FAT::exists(char const*)+0x68>
c001a342:	66 90                	xchg   ax,ax
c001a344:	b0 00                	mov    al,0x0
c001a346:	66 90                	xchg   ax,ax
c001a348:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a34e:	c3                   	ret    
c001a34f:	90                   	nop

c001a350 <isoReadDiscSectorHelper>:
c001a350:	83 ec 2c             	sub    esp,0x2c
c001a353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a357:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a35b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a360:	83 e8 41             	sub    eax,0x41
c001a363:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a36a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a36e:	ba 00 00 00 00       	mov    edx,0x0
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a37a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a37e:	52                   	push   edx
c001a37f:	50                   	push   eax
c001a380:	51                   	push   ecx
c001a381:	e8 be 39 ff ff       	call   c000dd44 <LogicalDisk::read(unsigned long long, int, void*)>
c001a386:	83 c4 20             	add    esp,0x20
c001a389:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a38d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a392:	74 0c                	je     c001a3a0 <isoReadDiscSectorHelper+0x50>
c001a394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a398:	c1 e0 0b             	shl    eax,0xb
c001a39b:	eb 0b                	jmp    c001a3a8 <isoReadDiscSectorHelper+0x58>
c001a39d:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a0:	b8 00 00 00 00       	mov    eax,0x0
c001a3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a8:	83 c4 2c             	add    esp,0x2c
c001a3ab:	c3                   	ret    

c001a3ac <iso_kprintf>:
c001a3ac:	83 ec 0c             	sub    esp,0xc
c001a3af:	83 ec 08             	sub    esp,0x8
c001a3b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3b6:	68 fa 2a 02 c0       	push   0xc0022afa
c001a3bb:	e8 85 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3c0:	83 c4 10             	add    esp,0x10
c001a3c3:	90                   	nop
c001a3c4:	83 c4 0c             	add    esp,0xc
c001a3c7:	c3                   	ret    

c001a3c8 <iso_kprintfd>:
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	83 ec 08             	sub    esp,0x8
c001a3ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3d2:	68 7a 12 02 c0       	push   0xc002127a
c001a3d7:	e8 69 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3dc:	83 c4 10             	add    esp,0x10
c001a3df:	90                   	nop
c001a3e0:	83 c4 0c             	add    esp,0xc
c001a3e3:	c3                   	ret    

c001a3e4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a3e4:	b8 08 00 00 00       	mov    eax,0x8
c001a3e9:	c3                   	ret    

c001a3ea <ISO9660::truncate(void*, unsigned long long)>:
c001a3ea:	b8 01 00 00 00       	mov    eax,0x1
c001a3ef:	c3                   	ret    

c001a3f0 <ISO9660::getName()>:
c001a3f0:	b8 b0 2d 02 c0       	mov    eax,0xc0022db0
c001a3f5:	c3                   	ret    

c001a3f6 <ISO9660::closeDir(void*)>:
c001a3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3fc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a3ff:	90                   	nop

c001a400 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a400:	b8 01 00 00 00       	mov    eax,0x1
c001a405:	c3                   	ret    

c001a406 <ISO9660::unlink(char const*)>:
c001a406:	b8 01 00 00 00       	mov    eax,0x1
c001a40b:	c3                   	ret    

c001a40c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a40c:	b8 03 00 00 00       	mov    eax,0x3
c001a411:	c3                   	ret    

c001a412 <ISO9660::rename(char const*, char const*)>:
c001a412:	b8 01 00 00 00       	mov    eax,0x1
c001a417:	c3                   	ret    

c001a418 <ISO9660::mkdir(char const*)>:
c001a418:	b8 01 00 00 00       	mov    eax,0x1
c001a41d:	c3                   	ret    

c001a41e <ISO9660::~ISO9660()>:
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	ba f0 2e 02 c0       	mov    edx,0xc0022ef0
c001a426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42a:	89 10                	mov    DWORD PTR [eax],edx
c001a42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a430:	83 ec 0c             	sub    esp,0xc
c001a433:	50                   	push   eax
c001a434:	e8 43 13 ff ff       	call   c000b77c <Filesystem::~Filesystem()>
c001a439:	83 c4 10             	add    esp,0x10
c001a43c:	90                   	nop
c001a43d:	83 c4 0c             	add    esp,0xc
c001a440:	c3                   	ret    
c001a441:	90                   	nop

c001a442 <ISO9660::~ISO9660()>:
c001a442:	83 ec 0c             	sub    esp,0xc
c001a445:	83 ec 0c             	sub    esp,0xc
c001a448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a44c:	e8 cd ff ff ff       	call   c001a41e <ISO9660::~ISO9660()>
c001a451:	83 c4 10             	add    esp,0x10
c001a454:	83 ec 08             	sub    esp,0x8
c001a457:	6a 08                	push   0x8
c001a459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45d:	e8 b6 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	83 c4 0c             	add    esp,0xc
c001a468:	c3                   	ret    
c001a469:	90                   	nop

c001a46a <ISO9660::exists(char const*)>:
c001a46a:	83 ec 18             	sub    esp,0x18
c001a46d:	68 cb 2d 02 c0       	push   0xc0022dcb
c001a472:	e8 44 71 ff ff       	call   c00115bb <KePanic(char const*)>
c001a477:	31 c0                	xor    eax,eax
c001a479:	83 c4 1c             	add    esp,0x1c
c001a47c:	c3                   	ret    
c001a47d:	90                   	nop

c001a47e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a47e:	56                   	push   esi
c001a47f:	53                   	push   ebx
c001a480:	53                   	push   ebx
c001a481:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a485:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a489:	85 db                	test   ebx,ebx
c001a48b:	0f 84 ca 00 00 00    	je     c001a55b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a491:	85 f6                	test   esi,esi
c001a493:	0f 84 c2 00 00 00    	je     c001a55b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a499:	b8 03 00 00 00       	mov    eax,0x3
c001a49e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4a3:	0f 85 b7 00 00 00    	jne    c001a560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4ab:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4b2:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a4b8:	74 1b                	je     c001a4d5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a4ba:	85 c0                	test   eax,eax
c001a4bc:	74 10                	je     c001a4ce <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a4be:	83 ec 0c             	sub    esp,0xc
c001a4c1:	68 e9 2d 02 c0       	push   0xc0022de9
c001a4c6:	e8 f0 70 ff ff       	call   c00115bb <KePanic(char const*)>
c001a4cb:	83 c4 10             	add    esp,0x10
c001a4ce:	8a 03                	mov    al,BYTE PTR [ebx]
c001a4d0:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a4d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4d8:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4df:	85 c0                	test   eax,eax
c001a4e1:	74 09                	je     c001a4ec <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a4e3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4ea:	74 48                	je     c001a534 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a4ec:	83 ec 0c             	sub    esp,0xc
c001a4ef:	68 f9 2d 02 c0       	push   0xc0022df9
c001a4f4:	e8 4c 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4fc:	83 c4 10             	add    esp,0x10
c001a4ff:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a506:	85 c0                	test   eax,eax
c001a508:	74 17                	je     c001a521 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a50a:	83 ec 0c             	sub    esp,0xc
c001a50d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a514:	68 19 2e 02 c0       	push   0xc0022e19
c001a519:	e8 27 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a51e:	83 c4 10             	add    esp,0x10
c001a521:	83 ec 0c             	sub    esp,0xc
c001a524:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a52b:	50                   	push   eax
c001a52c:	e8 15 c5 fe ff       	call   c0006a46 <init_percd>
c001a531:	83 c4 10             	add    esp,0x10
c001a534:	83 c3 03             	add    ebx,0x3
c001a537:	51                   	push   ecx
c001a538:	51                   	push   ecx
c001a539:	6a 00                	push   0x0
c001a53b:	53                   	push   ebx
c001a53c:	e8 cc bf fe ff       	call   c000650d <iso_open>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	89 c2                	mov    edx,eax
c001a546:	b8 01 00 00 00       	mov    eax,0x1
c001a54b:	83 fa ff             	cmp    edx,0xffffffff
c001a54e:	74 10                	je     c001a560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a550:	83 c2 32             	add    edx,0x32
c001a553:	31 c0                	xor    eax,eax
c001a555:	01 d2                	add    edx,edx
c001a557:	89 16                	mov    DWORD PTR [esi],edx
c001a559:	eb 05                	jmp    c001a560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a55b:	b8 04 00 00 00       	mov    eax,0x4
c001a560:	5a                   	pop    edx
c001a561:	5b                   	pop    ebx
c001a562:	5e                   	pop    esi
c001a563:	c3                   	ret    

c001a564 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a564:	53                   	push   ebx
c001a565:	83 ec 08             	sub    esp,0x8
c001a568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a56c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a570:	85 c0                	test   eax,eax
c001a572:	74 2d                	je     c001a5a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a574:	85 db                	test   ebx,ebx
c001a576:	74 29                	je     c001a5a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a578:	b9 02 00 00 00       	mov    ecx,0x2
c001a57d:	52                   	push   edx
c001a57e:	99                   	cdq    
c001a57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a583:	f7 f9                	idiv   ecx
c001a585:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a589:	83 e8 32             	sub    eax,0x32
c001a58c:	50                   	push   eax
c001a58d:	e8 23 c0 fe ff       	call   c00065b5 <iso_read>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	89 03                	mov    DWORD PTR [ebx],eax
c001a597:	09 d0                	or     eax,edx
c001a599:	0f 94 c0             	sete   al
c001a59c:	0f b6 c0             	movzx  eax,al
c001a59f:	eb 05                	jmp    c001a5a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5a1:	b8 04 00 00 00       	mov    eax,0x4
c001a5a6:	83 c4 08             	add    esp,0x8
c001a5a9:	5b                   	pop    ebx
c001a5aa:	c3                   	ret    
c001a5ab:	90                   	nop

c001a5ac <ISO9660::seek(void*, unsigned long long)>:
c001a5ac:	57                   	push   edi
c001a5ad:	56                   	push   esi
c001a5ae:	b8 04 00 00 00       	mov    eax,0x4
c001a5b3:	51                   	push   ecx
c001a5b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a5b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5bc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a5c0:	85 d2                	test   edx,edx
c001a5c2:	74 26                	je     c001a5ea <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a5c4:	6a 00                	push   0x0
c001a5c6:	b9 02 00 00 00       	mov    ecx,0x2
c001a5cb:	57                   	push   edi
c001a5cc:	89 d0                	mov    eax,edx
c001a5ce:	56                   	push   esi
c001a5cf:	99                   	cdq    
c001a5d0:	f7 f9                	idiv   ecx
c001a5d2:	83 e8 32             	sub    eax,0x32
c001a5d5:	50                   	push   eax
c001a5d6:	e8 f0 c0 fe ff       	call   c00066cb <iso_seek>
c001a5db:	83 c4 10             	add    esp,0x10
c001a5de:	31 f0                	xor    eax,esi
c001a5e0:	31 fa                	xor    edx,edi
c001a5e2:	09 d0                	or     eax,edx
c001a5e4:	0f 95 c0             	setne  al
c001a5e7:	0f b6 c0             	movzx  eax,al
c001a5ea:	5a                   	pop    edx
c001a5eb:	5e                   	pop    esi
c001a5ec:	5f                   	pop    edi
c001a5ed:	c3                   	ret    

c001a5ee <ISO9660::tell(void*, unsigned long long*)>:
c001a5ee:	53                   	push   ebx
c001a5ef:	83 ec 08             	sub    esp,0x8
c001a5f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5fa:	85 c0                	test   eax,eax
c001a5fc:	74 24                	je     c001a622 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a5fe:	85 db                	test   ebx,ebx
c001a600:	74 20                	je     c001a622 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a602:	83 ec 0c             	sub    esp,0xc
c001a605:	b9 02 00 00 00       	mov    ecx,0x2
c001a60a:	99                   	cdq    
c001a60b:	f7 f9                	idiv   ecx
c001a60d:	83 e8 32             	sub    eax,0x32
c001a610:	50                   	push   eax
c001a611:	e8 39 c1 fe ff       	call   c000674f <iso_tell>
c001a616:	83 c4 10             	add    esp,0x10
c001a619:	89 03                	mov    DWORD PTR [ebx],eax
c001a61b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a61e:	31 c0                	xor    eax,eax
c001a620:	eb 05                	jmp    c001a627 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a622:	b8 04 00 00 00       	mov    eax,0x4
c001a627:	83 c4 08             	add    esp,0x8
c001a62a:	5b                   	pop    ebx
c001a62b:	c3                   	ret    

c001a62c <ISO9660::stat(void*, unsigned long long*)>:
c001a62c:	53                   	push   ebx
c001a62d:	83 ec 14             	sub    esp,0x14
c001a630:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a634:	68 3d 2e 02 c0       	push   0xc0022e3d
c001a639:	e8 07 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a646:	74 2c                	je     c001a674 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a648:	85 db                	test   ebx,ebx
c001a64a:	74 28                	je     c001a674 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a64c:	83 ec 0c             	sub    esp,0xc
c001a64f:	b9 02 00 00 00       	mov    ecx,0x2
c001a654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a658:	99                   	cdq    
c001a659:	f7 f9                	idiv   ecx
c001a65b:	83 e8 32             	sub    eax,0x32
c001a65e:	50                   	push   eax
c001a65f:	e8 1c c1 fe ff       	call   c0006780 <iso_total>
c001a664:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a66b:	89 03                	mov    DWORD PTR [ebx],eax
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	31 c0                	xor    eax,eax
c001a672:	eb 05                	jmp    c001a679 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a674:	b8 04 00 00 00       	mov    eax,0x4
c001a679:	83 c4 08             	add    esp,0x8
c001a67c:	5b                   	pop    ebx
c001a67d:	c3                   	ret    

c001a67e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a67e:	55                   	push   ebp
c001a67f:	57                   	push   edi
c001a680:	56                   	push   esi
c001a681:	53                   	push   ebx
c001a682:	83 ec 18             	sub    esp,0x18
c001a685:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a689:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a68d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a691:	68 45 2e 02 c0       	push   0xc0022e45
c001a696:	e8 aa 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a69b:	83 c4 10             	add    esp,0x10
c001a69e:	85 ff                	test   edi,edi
c001a6a0:	0f 94 c0             	sete   al
c001a6a3:	85 f6                	test   esi,esi
c001a6a5:	0f 94 c2             	sete   dl
c001a6a8:	09 d0                	or     eax,edx
c001a6aa:	a8 01                	test   al,0x1
c001a6ac:	0f 85 dd 00 00 00    	jne    c001a78f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6b2:	85 db                	test   ebx,ebx
c001a6b4:	0f 84 d5 00 00 00    	je     c001a78f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a6bd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a6c3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a6ca:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6d1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a6d3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a6d9:	74 1b                	je     c001a6f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a6db:	85 c0                	test   eax,eax
c001a6dd:	74 10                	je     c001a6ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a6df:	83 ec 0c             	sub    esp,0xc
c001a6e2:	68 e9 2d 02 c0       	push   0xc0022de9
c001a6e7:	e8 cf 6e ff ff       	call   c00115bb <KePanic(char const*)>
c001a6ec:	83 c4 10             	add    esp,0x10
c001a6ef:	8a 03                	mov    al,BYTE PTR [ebx]
c001a6f1:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a6f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6f9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a700:	85 c0                	test   eax,eax
c001a702:	74 09                	je     c001a70d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a704:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a70b:	74 51                	je     c001a75e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a70d:	83 ec 0c             	sub    esp,0xc
c001a710:	68 4d 2e 02 c0       	push   0xc0022e4d
c001a715:	e8 2b 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a71a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a728:	74 21                	je     c001a74b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a72a:	83 ec 0c             	sub    esp,0xc
c001a72d:	68 6d 2e 02 c0       	push   0xc0022e6d
c001a732:	e8 0e 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a737:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a73a:	83 c4 10             	add    esp,0x10
c001a73d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a744:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a74b:	83 ec 0c             	sub    esp,0xc
c001a74e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a755:	50                   	push   eax
c001a756:	e8 eb c2 fe ff       	call   c0006a46 <init_percd>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	83 c3 03             	add    ebx,0x3
c001a761:	52                   	push   edx
c001a762:	52                   	push   edx
c001a763:	6a 00                	push   0x0
c001a765:	53                   	push   ebx
c001a766:	e8 a2 bd fe ff       	call   c000650d <iso_open>
c001a76b:	83 c4 10             	add    esp,0x10
c001a76e:	89 c5                	mov    ebp,eax
c001a770:	83 f8 ff             	cmp    eax,0xffffffff
c001a773:	75 21                	jne    c001a796 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a775:	50                   	push   eax
c001a776:	50                   	push   eax
c001a777:	6a 01                	push   0x1
c001a779:	53                   	push   ebx
c001a77a:	e8 8e bd fe ff       	call   c000650d <iso_open>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	ba 02 00 00 00       	mov    edx,0x2
c001a787:	40                   	inc    eax
c001a788:	74 2b                	je     c001a7b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a78a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a78d:	eb 24                	jmp    c001a7b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a78f:	ba 04 00 00 00       	mov    edx,0x4
c001a794:	eb 1f                	jmp    c001a7b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	50                   	push   eax
c001a79a:	e8 e1 bf fe ff       	call   c0006780 <iso_total>
c001a79f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7a6:	89 07                	mov    DWORD PTR [edi],eax
c001a7a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7ab:	e8 e7 bd fe ff       	call   c0006597 <iso_close>
c001a7b0:	83 c4 10             	add    esp,0x10
c001a7b3:	31 d2                	xor    edx,edx
c001a7b5:	83 c4 0c             	add    esp,0xc
c001a7b8:	89 d0                	mov    eax,edx
c001a7ba:	5b                   	pop    ebx
c001a7bb:	5e                   	pop    esi
c001a7bc:	5f                   	pop    edi
c001a7bd:	5d                   	pop    ebp
c001a7be:	c3                   	ret    
c001a7bf:	90                   	nop

c001a7c0 <ISO9660::close(void*)>:
c001a7c0:	83 ec 0c             	sub    esp,0xc
c001a7c3:	b8 04 00 00 00       	mov    eax,0x4
c001a7c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7cc:	85 d2                	test   edx,edx
c001a7ce:	74 1b                	je     c001a7eb <ISO9660::close(void*)+0x2b>
c001a7d0:	83 ec 0c             	sub    esp,0xc
c001a7d3:	b9 02 00 00 00       	mov    ecx,0x2
c001a7d8:	89 d0                	mov    eax,edx
c001a7da:	99                   	cdq    
c001a7db:	f7 f9                	idiv   ecx
c001a7dd:	83 e8 32             	sub    eax,0x32
c001a7e0:	50                   	push   eax
c001a7e1:	e8 b1 bd fe ff       	call   c0006597 <iso_close>
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	31 c0                	xor    eax,eax
c001a7eb:	83 c4 0c             	add    esp,0xc
c001a7ee:	c3                   	ret    
c001a7ef:	90                   	nop

c001a7f0 <ISO9660::openDir(char const*, void**)>:
c001a7f0:	56                   	push   esi
c001a7f1:	53                   	push   ebx
c001a7f2:	50                   	push   eax
c001a7f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a7f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a7fb:	85 db                	test   ebx,ebx
c001a7fd:	0f 84 bd 00 00 00    	je     c001a8c0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a803:	85 f6                	test   esi,esi
c001a805:	0f 84 b5 00 00 00    	je     c001a8c0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a80b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a80d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a814:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a81a:	74 1b                	je     c001a837 <ISO9660::openDir(char const*, void**)+0x47>
c001a81c:	85 c0                	test   eax,eax
c001a81e:	74 10                	je     c001a830 <ISO9660::openDir(char const*, void**)+0x40>
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	68 e9 2d 02 c0       	push   0xc0022de9
c001a828:	e8 8e 6d ff ff       	call   c00115bb <KePanic(char const*)>
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	8a 03                	mov    al,BYTE PTR [ebx]
c001a832:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a837:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a83a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a841:	85 c0                	test   eax,eax
c001a843:	74 10                	je     c001a855 <ISO9660::openDir(char const*, void**)+0x65>
c001a845:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a84c:	74 1a                	je     c001a868 <ISO9660::openDir(char const*, void**)+0x78>
c001a84e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a855:	83 ec 0c             	sub    esp,0xc
c001a858:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a85f:	50                   	push   eax
c001a860:	e8 e1 c1 fe ff       	call   c0006a46 <init_percd>
c001a865:	83 c4 10             	add    esp,0x10
c001a868:	83 c3 03             	add    ebx,0x3
c001a86b:	50                   	push   eax
c001a86c:	50                   	push   eax
c001a86d:	6a 01                	push   0x1
c001a86f:	53                   	push   ebx
c001a870:	e8 98 bc fe ff       	call   c000650d <iso_open>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	89 c3                	mov    ebx,eax
c001a87a:	83 f8 ff             	cmp    eax,0xffffffff
c001a87d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a882:	75 1c                	jne    c001a8a0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a884:	53                   	push   ebx
c001a885:	53                   	push   ebx
c001a886:	68 91 2e 02 c0       	push   0xc0022e91
c001a88b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a891:	e8 10 e2 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a896:	83 c4 10             	add    esp,0x10
c001a899:	b8 01 00 00 00       	mov    eax,0x1
c001a89e:	eb 25                	jmp    c001a8c5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8a0:	01 db                	add    ebx,ebx
c001a8a2:	51                   	push   ecx
c001a8a3:	83 c3 65             	add    ebx,0x65
c001a8a6:	51                   	push   ecx
c001a8a7:	68 a4 2e 02 c0       	push   0xc0022ea4
c001a8ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8b2:	e8 ef e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8b7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	31 c0                	xor    eax,eax
c001a8be:	eb 05                	jmp    c001a8c5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8c0:	b8 04 00 00 00       	mov    eax,0x4
c001a8c5:	5a                   	pop    edx
c001a8c6:	5b                   	pop    ebx
c001a8c7:	5e                   	pop    esi
c001a8c8:	c3                   	ret    
c001a8c9:	90                   	nop

c001a8ca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a8ca:	55                   	push   ebp
c001a8cb:	57                   	push   edi
c001a8cc:	56                   	push   esi
c001a8cd:	53                   	push   ebx
c001a8ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a8d4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a8db:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8e2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a8ea:	0f 84 e7 00 00 00    	je     c001a9d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a8f0:	85 db                	test   ebx,ebx
c001a8f2:	0f 84 df 00 00 00    	je     c001a9d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 b7 2e 02 c0       	push   0xc0022eb7
c001a900:	e8 40 00 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a905:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a90c:	b9 02 00 00 00       	mov    ecx,0x2
c001a911:	99                   	cdq    
c001a912:	f7 f9                	idiv   ecx
c001a914:	83 e8 32             	sub    eax,0x32
c001a917:	89 04 24             	mov    DWORD PTR [esp],eax
c001a91a:	e8 b3 be fe ff       	call   c00067d2 <iso_readdir>
c001a91f:	83 c4 10             	add    esp,0x10
c001a922:	89 c6                	mov    esi,eax
c001a924:	85 c0                	test   eax,eax
c001a926:	75 37                	jne    c001a95f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a928:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a92d:	56                   	push   esi
c001a92e:	56                   	push   esi
c001a92f:	68 c2 2e 02 c0       	push   0xc0022ec2
c001a934:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a93a:	e8 67 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a93f:	83 c4 0c             	add    esp,0xc
c001a942:	68 10 01 00 00       	push   0x110
c001a947:	6a 00                	push   0x0
c001a949:	57                   	push   edi
c001a94a:	e8 a1 5b fe ff       	call   c00004f0 <memset>
c001a94f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a955:	83 c4 10             	add    esp,0x10
c001a958:	b8 01 00 00 00       	mov    eax,0x1
c001a95d:	eb 7d                	jmp    c001a9dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a95f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a965:	8d 68 08             	lea    ebp,[eax+0x8]
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	55                   	push   ebp
c001a96c:	e8 ff 5b fe ff       	call   c0000570 <strlen>
c001a971:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a979:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a984:	75 0a                	jne    c001a990 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a986:	b8 02 00 00 00       	mov    eax,0x2
c001a98b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a98e:	74 05                	je     c001a995 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a990:	b8 01 00 00 00       	mov    eax,0x1
c001a995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a999:	50                   	push   eax
c001a99a:	50                   	push   eax
c001a99b:	55                   	push   ebp
c001a99c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9a0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9a4:	50                   	push   eax
c001a9a5:	e8 96 5c fe ff       	call   c0000640 <strcpy>
c001a9aa:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9b3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a9b9:	5a                   	pop    edx
c001a9ba:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9bf:	59                   	pop    ecx
c001a9c0:	68 d5 2e 02 c0       	push   0xc0022ed5
c001a9c5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9cb:	e8 d6 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	31 c0                	xor    eax,eax
c001a9d5:	eb 05                	jmp    c001a9dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a9d7:	b8 04 00 00 00       	mov    eax,0x4
c001a9dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9e2:	5b                   	pop    ebx
c001a9e3:	5e                   	pop    esi
c001a9e4:	5f                   	pop    edi
c001a9e5:	5d                   	pop    ebp
c001a9e6:	c3                   	ret    

c001a9e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a9e7:	57                   	push   edi
c001a9e8:	56                   	push   esi
c001a9e9:	53                   	push   ebx
c001a9ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a9f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a9f6:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a9fc:	0f be cb             	movsx  ecx,bl
c001a9ff:	75 0b                	jne    c001aa0c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa01:	0f be 05 00 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024100
c001aa08:	39 c8                	cmp    eax,ecx
c001aa0a:	74 47                	je     c001aa53 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa0c:	83 ec 0c             	sub    esp,0xc
c001aa0f:	31 d2                	xor    edx,edx
c001aa11:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa16:	6a 01                	push   0x1
c001aa18:	52                   	push   edx
c001aa19:	56                   	push   esi
c001aa1a:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa21:	e8 1e 33 ff ff       	call   c000dd44 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa26:	83 c4 20             	add    esp,0x20
c001aa29:	85 c0                	test   eax,eax
c001aa2b:	75 0e                	jne    c001aa3b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa2d:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa33:	88 1d 00 41 02 c0    	mov    BYTE PTR ds:0xc0024100,bl
c001aa39:	eb 18                	jmp    c001aa53 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa3b:	50                   	push   eax
c001aa3c:	68 00 08 00 00       	push   0x800
c001aa41:	6a 00                	push   0x0
c001aa43:	57                   	push   edi
c001aa44:	e8 a7 5a fe ff       	call   c00004f0 <memset>
c001aa49:	83 c4 10             	add    esp,0x10
c001aa4c:	b8 01 00 00 00       	mov    eax,0x1
c001aa51:	eb 0e                	jmp    c001aa61 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa53:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aa58:	b9 00 08 00 00       	mov    ecx,0x800
c001aa5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa5f:	31 c0                	xor    eax,eax
c001aa61:	5b                   	pop    ebx
c001aa62:	5e                   	pop    esi
c001aa63:	5f                   	pop    edi
c001aa64:	c3                   	ret    
c001aa65:	90                   	nop

c001aa66 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa66:	53                   	push   ebx
c001aa67:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa6d:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa77:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa7e:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa81:	0f be db             	movsx  ebx,bl
c001aa84:	53                   	push   ebx
c001aa85:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa89:	50                   	push   eax
c001aa8a:	6a 10                	push   0x10
c001aa8c:	e8 56 ff ff ff       	call   c001a9e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	31 d2                	xor    edx,edx
c001aa96:	85 c0                	test   eax,eax
c001aa98:	75 33                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa9a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aa9f:	75 2c                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaa1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aaa6:	75 25                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaa8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aaad:	75 1e                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaaf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aab4:	75 17                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aab6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aabb:	75 10                	jne    c001aacd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aabd:	83 ec 0c             	sub    esp,0xc
c001aac0:	53                   	push   ebx
c001aac1:	e8 80 bf fe ff       	call   c0006a46 <init_percd>
c001aac6:	83 c4 10             	add    esp,0x10
c001aac9:	40                   	inc    eax
c001aaca:	0f 95 c2             	setne  dl
c001aacd:	88 d0                	mov    al,dl
c001aacf:	81 c4 08 08 00 00    	add    esp,0x808
c001aad5:	5b                   	pop    ebx
c001aad6:	c3                   	ret    
c001aad7:	90                   	nop

c001aad8 <ISO9660::ISO9660()>:
c001aad8:	83 ec 0c             	sub    esp,0xc
c001aadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aadf:	83 ec 0c             	sub    esp,0xc
c001aae2:	50                   	push   eax
c001aae3:	e8 70 0c ff ff       	call   c000b758 <Filesystem::Filesystem()>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	ba f0 2e 02 c0       	mov    edx,0xc0022ef0
c001aaf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf4:	89 10                	mov    DWORD PTR [eax],edx
c001aaf6:	e8 5d c0 fe ff       	call   c0006b58 <fs_iso9660_init>
c001aafb:	90                   	nop
c001aafc:	83 c4 0c             	add    esp,0xc
c001aaff:	c3                   	ret    

c001ab00 <SoundCard::beginPlayback()>:
c001ab00:	c7 44 24 04 54 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f54
c001ab08:	e9 ae 6a ff ff       	jmp    c00115bb <KePanic(char const*)>
c001ab0d:	90                   	nop

c001ab0e <SoundCard::stopPlayback()>:
c001ab0e:	c7 44 24 04 54 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f54
c001ab16:	e9 a0 6a ff ff       	jmp    c00115bb <KePanic(char const*)>
c001ab1b:	90                   	nop

c001ab1c <SoundCard::SoundCard(char const*)>:
c001ab1c:	83 ec 1c             	sub    esp,0x1c
c001ab1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab23:	83 ec 08             	sub    esp,0x8
c001ab26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab2a:	50                   	push   eax
c001ab2b:	e8 ca 1f ff ff       	call   c000cafa <Device::Device(char const*)>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	ba a0 2f 02 c0       	mov    edx,0xc0022fa0
c001ab38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab3c:	89 10                	mov    DWORD PTR [eax],edx
c001ab3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab42:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab4d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab5b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ab65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab69:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab77:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab89:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab8e:	7f 1a                	jg     c001abaa <SoundCard::SoundCard(char const*)+0x8e>
c001ab90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab98:	83 c2 54             	add    edx,0x54
c001ab9b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001aba3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001aba8:	eb df                	jmp    c001ab89 <SoundCard::SoundCard(char const*)+0x6d>
c001abaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abb5:	90                   	nop
c001abb6:	83 c4 1c             	add    esp,0x1c
c001abb9:	c3                   	ret    

c001abba <SoundCard::~SoundCard()>:
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	ba a0 2f 02 c0       	mov    edx,0xc0022fa0
c001abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc6:	89 10                	mov    DWORD PTR [eax],edx
c001abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	50                   	push   eax
c001abd0:	e8 8f 1c ff ff       	call   c000c864 <Device::~Device()>
c001abd5:	83 c4 10             	add    esp,0x10
c001abd8:	90                   	nop
c001abd9:	83 c4 0c             	add    esp,0xc
c001abdc:	c3                   	ret    
c001abdd:	90                   	nop

c001abde <SoundCard::~SoundCard()>:
c001abde:	83 ec 0c             	sub    esp,0xc
c001abe1:	83 ec 0c             	sub    esp,0xc
c001abe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abe8:	e8 cd ff ff ff       	call   c001abba <SoundCard::~SoundCard()>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	83 ec 08             	sub    esp,0x8
c001abf3:	68 e8 01 00 00       	push   0x1e8
c001abf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfc:	e8 17 fc fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	83 c4 0c             	add    esp,0xc
c001ac07:	c3                   	ret    

c001ac08 <SoundCard::configureRates(int, int, int)>:
c001ac08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac0c:	31 c0                	xor    eax,eax
c001ac0e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac15:	75 20                	jne    c001ac37 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac1b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac25:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac35:	b0 01                	mov    al,0x1
c001ac37:	c3                   	ret    

c001ac38 <SoundCard::getSamples16(int, short*)>:
c001ac38:	55                   	push   ebp
c001ac39:	57                   	push   edi
c001ac3a:	31 ff                	xor    edi,edi
c001ac3c:	56                   	push   esi
c001ac3d:	53                   	push   ebx
c001ac3e:	31 db                	xor    ebx,ebx
c001ac40:	83 ec 10             	sub    esp,0x10
c001ac43:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac47:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac4b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac4e:	50                   	push   eax
c001ac4f:	6a 00                	push   0x0
c001ac51:	55                   	push   ebp
c001ac52:	e8 99 58 fe ff       	call   c00004f0 <memset>
c001ac57:	83 c4 10             	add    esp,0x10
c001ac5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac5e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ac65:	85 c0                	test   eax,eax
c001ac67:	74 1b                	je     c001ac84 <SoundCard::getSamples16(int, short*)+0x4c>
c001ac69:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac6d:	75 15                	jne    c001ac84 <SoundCard::getSamples16(int, short*)+0x4c>
c001ac6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac73:	55                   	push   ebp
c001ac74:	56                   	push   esi
c001ac75:	50                   	push   eax
c001ac76:	e8 f1 02 00 00       	call   c001af6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	39 c7                	cmp    edi,eax
c001ac80:	7d 02                	jge    c001ac84 <SoundCard::getSamples16(int, short*)+0x4c>
c001ac82:	89 c7                	mov    edi,eax
c001ac84:	43                   	inc    ebx
c001ac85:	83 fb 20             	cmp    ebx,0x20
c001ac88:	75 d0                	jne    c001ac5a <SoundCard::getSamples16(int, short*)+0x22>
c001ac8a:	83 c4 0c             	add    esp,0xc
c001ac8d:	89 f8                	mov    eax,edi
c001ac8f:	5b                   	pop    ebx
c001ac90:	5e                   	pop    esi
c001ac91:	5f                   	pop    edi
c001ac92:	5d                   	pop    ebp
c001ac93:	c3                   	ret    

c001ac94 <SoundCard::getSamples32(int, int*)>:
c001ac94:	55                   	push   ebp
c001ac95:	57                   	push   edi
c001ac96:	31 ff                	xor    edi,edi
c001ac98:	56                   	push   esi
c001ac99:	31 f6                	xor    esi,esi
c001ac9b:	53                   	push   ebx
c001ac9c:	83 ec 10             	sub    esp,0x10
c001ac9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aca3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aca7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acab:	c1 e0 02             	shl    eax,0x2
c001acae:	50                   	push   eax
c001acaf:	6a 00                	push   0x0
c001acb1:	55                   	push   ebp
c001acb2:	e8 39 58 fe ff       	call   c00004f0 <memset>
c001acb7:	83 c4 10             	add    esp,0x10
c001acba:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001acc1:	85 c0                	test   eax,eax
c001acc3:	74 1b                	je     c001ace0 <SoundCard::getSamples32(int, int*)+0x4c>
c001acc5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acc9:	75 15                	jne    c001ace0 <SoundCard::getSamples32(int, int*)+0x4c>
c001accb:	53                   	push   ebx
c001accc:	55                   	push   ebp
c001accd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acd1:	50                   	push   eax
c001acd2:	e8 61 03 00 00       	call   c001b038 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	39 c6                	cmp    esi,eax
c001acdc:	7d 02                	jge    c001ace0 <SoundCard::getSamples32(int, int*)+0x4c>
c001acde:	89 c6                	mov    esi,eax
c001ace0:	47                   	inc    edi
c001ace1:	83 ff 20             	cmp    edi,0x20
c001ace4:	75 d4                	jne    c001acba <SoundCard::getSamples32(int, int*)+0x26>
c001ace6:	85 f6                	test   esi,esi
c001ace8:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001acef:	75 0f                	jne    c001ad00 <SoundCard::getSamples32(int, int*)+0x6c>
c001acf1:	85 c0                	test   eax,eax
c001acf3:	74 1b                	je     c001ad10 <SoundCard::getSamples32(int, int*)+0x7c>
c001acf5:	83 ec 0c             	sub    esp,0xc
c001acf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acfa:	53                   	push   ebx
c001acfb:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001acfe:	eb 0d                	jmp    c001ad0d <SoundCard::getSamples32(int, int*)+0x79>
c001ad00:	85 c0                	test   eax,eax
c001ad02:	75 0c                	jne    c001ad10 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad04:	83 ec 0c             	sub    esp,0xc
c001ad07:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad09:	53                   	push   ebx
c001ad0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	83 c4 0c             	add    esp,0xc
c001ad13:	89 f0                	mov    eax,esi
c001ad15:	5b                   	pop    ebx
c001ad16:	5e                   	pop    esi
c001ad17:	5f                   	pop    edi
c001ad18:	5d                   	pop    ebp
c001ad19:	c3                   	ret    

c001ad1a <SoundCard::addChannel(SoundPort*)>:
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	31 c0                	xor    eax,eax
c001ad1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad23:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad2b:	74 1b                	je     c001ad48 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad2d:	40                   	inc    eax
c001ad2e:	83 f8 20             	cmp    eax,0x20
c001ad31:	75 f0                	jne    c001ad23 <SoundCard::addChannel(SoundPort*)+0x9>
c001ad33:	83 ec 0c             	sub    esp,0xc
c001ad36:	68 79 2f 02 c0       	push   0xc0022f79
c001ad3b:	e8 7b 68 ff ff       	call   c00115bb <KePanic(char const*)>
c001ad40:	83 c4 10             	add    esp,0x10
c001ad43:	83 c8 ff             	or     eax,0xffffffff
c001ad46:	eb 0b                	jmp    c001ad53 <SoundCard::addChannel(SoundPort*)+0x39>
c001ad48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad4c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad53:	83 c4 0c             	add    esp,0xc
c001ad56:	c3                   	ret    
c001ad57:	90                   	nop

c001ad58 <SoundCard::removeChannel(int)>:
c001ad58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad60:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad6b:	c3                   	ret    

c001ad6c <SoundPort::SoundPort(int, int, int, int)>:
c001ad6c:	83 ec 0c             	sub    esp,0xc
c001ad6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad73:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad8a:	89 10                	mov    DWORD PTR [eax],edx
c001ad8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad9f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ada2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ada7:	75 13                	jne    c001adbc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ada9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adad:	8b 00                	mov    eax,DWORD PTR [eax]
c001adaf:	05 a0 0f 00 00       	add    eax,0xfa0
c001adb4:	01 c0                	add    eax,eax
c001adb6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001adba:	66 90                	xchg   ax,ax
c001adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001adc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001adc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001add2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001add9:	c1 e0 02             	shl    eax,0x2
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	50                   	push   eax
c001ade0:	e8 d1 cc fe ff       	call   c0007ab6 <malloc>
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	89 c2                	mov    edx,eax
c001adea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001adf1:	90                   	nop
c001adf2:	83 c4 0c             	add    esp,0xc
c001adf5:	c3                   	ret    
c001adf6:	66 90                	xchg   ax,ax

c001adf8 <SoundPort::~SoundPort()>:
c001adf8:	83 ec 0c             	sub    esp,0xc
c001adfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae02:	85 c0                	test   eax,eax
c001ae04:	74 1e                	je     c001ae24 <SoundPort::~SoundPort()+0x2c>
c001ae06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae0d:	83 ec 0c             	sub    esp,0xc
c001ae10:	50                   	push   eax
c001ae11:	e8 b0 cc fe ff       	call   c0007ac6 <free>
c001ae16:	83 c4 10             	add    esp,0x10
c001ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae24:	90                   	nop
c001ae25:	83 c4 0c             	add    esp,0xc
c001ae28:	c3                   	ret    
c001ae29:	90                   	nop
c001ae2a:	66 90                	xchg   ax,ax

c001ae2c <SoundPort::unpause()>:
c001ae2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae30:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae34:	c3                   	ret    
c001ae35:	90                   	nop
c001ae36:	66 90                	xchg   ax,ax

c001ae38 <SoundPort::pause()>:
c001ae38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae3c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae40:	c3                   	ret    
c001ae41:	90                   	nop
c001ae42:	66 90                	xchg   ax,ax

c001ae44 <SoundPort::getBufferUsed()>:
c001ae44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae4b:	c3                   	ret    

c001ae4c <SoundPort::getBufferSize()>:
c001ae4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae53:	c3                   	ret    

c001ae54 <SoundPort::buffer16(short*, int)>:
c001ae54:	55                   	push   ebp
c001ae55:	57                   	push   edi
c001ae56:	56                   	push   esi
c001ae57:	53                   	push   ebx
c001ae58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae5c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ae60:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ae63:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae66:	74 68                	je     c001aed0 <SoundPort::buffer16(short*, int)+0x7c>
c001ae68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae6c:	85 c9                	test   ecx,ecx
c001ae6e:	7e 60                	jle    c001aed0 <SoundPort::buffer16(short*, int)+0x7c>
c001ae70:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae74:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae77:	c1 e1 0f             	shl    ecx,0xf
c001ae7a:	8d 70 01             	lea    esi,[eax+0x1]
c001ae7d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae80:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae83:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae86:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae89:	74 4d                	je     c001aed8 <SoundPort::buffer16(short*, int)+0x84>
c001ae8b:	31 f6                	xor    esi,esi
c001ae8d:	eb 21                	jmp    c001aeb0 <SoundPort::buffer16(short*, int)+0x5c>
c001ae8f:	90                   	nop
c001ae90:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ae95:	8d 79 01             	lea    edi,[ecx+0x1]
c001ae98:	c1 e3 0f             	shl    ebx,0xf
c001ae9b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ae9e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aea1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aea4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aea7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aeaa:	74 1c                	je     c001aec8 <SoundPort::buffer16(short*, int)+0x74>
c001aeac:	89 c6                	mov    esi,eax
c001aeae:	66 90                	xchg   ax,ax
c001aeb0:	8d 46 01             	lea    eax,[esi+0x1]
c001aeb3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aeb7:	75 d7                	jne    c001ae90 <SoundPort::buffer16(short*, int)+0x3c>
c001aeb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aebd:	8d 76 00             	lea    esi,[esi+0x0]
c001aec0:	5b                   	pop    ebx
c001aec1:	5e                   	pop    esi
c001aec2:	5f                   	pop    edi
c001aec3:	5d                   	pop    ebp
c001aec4:	c3                   	ret    
c001aec5:	8d 76 00             	lea    esi,[esi+0x0]
c001aec8:	5b                   	pop    ebx
c001aec9:	8d 46 02             	lea    eax,[esi+0x2]
c001aecc:	5e                   	pop    esi
c001aecd:	5f                   	pop    edi
c001aece:	5d                   	pop    ebp
c001aecf:	c3                   	ret    
c001aed0:	5b                   	pop    ebx
c001aed1:	31 c0                	xor    eax,eax
c001aed3:	5e                   	pop    esi
c001aed4:	5f                   	pop    edi
c001aed5:	5d                   	pop    ebp
c001aed6:	c3                   	ret    
c001aed7:	90                   	nop
c001aed8:	b8 01 00 00 00       	mov    eax,0x1
c001aedd:	eb e1                	jmp    c001aec0 <SoundPort::buffer16(short*, int)+0x6c>
c001aedf:	90                   	nop

c001aee0 <SoundPort::buffer32(int*, int)>:
c001aee0:	55                   	push   ebp
c001aee1:	57                   	push   edi
c001aee2:	56                   	push   esi
c001aee3:	53                   	push   ebx
c001aee4:	83 ec 04             	sub    esp,0x4
c001aee7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aeef:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aef2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aef6:	89 04 24             	mov    DWORD PTR [esp],eax
c001aef9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aefc:	74 5a                	je     c001af58 <SoundPort::buffer32(int*, int)+0x78>
c001aefe:	85 c0                	test   eax,eax
c001af00:	7e 56                	jle    c001af58 <SoundPort::buffer32(int*, int)+0x78>
c001af02:	8d 71 01             	lea    esi,[ecx+0x1]
c001af05:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af08:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af0b:	8b 37                	mov    esi,DWORD PTR [edi]
c001af0d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af10:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af13:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af16:	74 4c                	je     c001af64 <SoundPort::buffer32(int*, int)+0x84>
c001af18:	31 f6                	xor    esi,esi
c001af1a:	eb 1c                	jmp    c001af38 <SoundPort::buffer32(int*, int)+0x58>
c001af1c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af1f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af22:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af25:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af28:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af32:	74 18                	je     c001af4c <SoundPort::buffer32(int*, int)+0x6c>
c001af34:	89 de                	mov    esi,ebx
c001af36:	66 90                	xchg   ax,ax
c001af38:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af3b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af3e:	75 dc                	jne    c001af1c <SoundPort::buffer32(int*, int)+0x3c>
c001af40:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af43:	90                   	nop
c001af44:	83 c4 04             	add    esp,0x4
c001af47:	5b                   	pop    ebx
c001af48:	5e                   	pop    esi
c001af49:	5f                   	pop    edi
c001af4a:	5d                   	pop    ebp
c001af4b:	c3                   	ret    
c001af4c:	83 c4 04             	add    esp,0x4
c001af4f:	8d 46 02             	lea    eax,[esi+0x2]
c001af52:	5b                   	pop    ebx
c001af53:	5e                   	pop    esi
c001af54:	5f                   	pop    edi
c001af55:	5d                   	pop    ebp
c001af56:	c3                   	ret    
c001af57:	90                   	nop
c001af58:	83 c4 04             	add    esp,0x4
c001af5b:	31 c0                	xor    eax,eax
c001af5d:	5b                   	pop    ebx
c001af5e:	5e                   	pop    esi
c001af5f:	5f                   	pop    edi
c001af60:	5d                   	pop    ebp
c001af61:	c3                   	ret    
c001af62:	66 90                	xchg   ax,ax
c001af64:	b8 01 00 00 00       	mov    eax,0x1
c001af69:	eb d9                	jmp    c001af44 <SoundPort::buffer32(int*, int)+0x64>
c001af6b:	90                   	nop

c001af6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af6c:	57                   	push   edi
c001af6d:	56                   	push   esi
c001af6e:	53                   	push   ebx
c001af6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001af77:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001af7d:	39 03                	cmp    DWORD PTR [ebx],eax
c001af7f:	74 13                	je     c001af94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001af81:	83 ec 0c             	sub    esp,0xc
c001af84:	68 cc 2f 02 c0       	push   0xc0022fcc
c001af89:	e8 2d 66 ff ff       	call   c00115bb <KePanic(char const*)>
c001af8e:	83 c4 10             	add    esp,0x10
c001af91:	8d 76 00             	lea    esi,[esi+0x0]
c001af94:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001af9a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001af9d:	74 11                	je     c001afb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001af9f:	83 ec 0c             	sub    esp,0xc
c001afa2:	68 0b 30 02 c0       	push   0xc002300b
c001afa7:	e8 0f 66 ff ff       	call   c00115bb <KePanic(char const*)>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	90                   	nop
c001afb0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001afb6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001afb9:	74 11                	je     c001afcc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001afbb:	83 ec 0c             	sub    esp,0xc
c001afbe:	68 0b 30 02 c0       	push   0xc002300b
c001afc3:	e8 f3 65 ff ff       	call   c00115bb <KePanic(char const*)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	90                   	nop
c001afcc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001afcf:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001afd3:	7e 07                	jle    c001afdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001afd5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	85 f6                	test   esi,esi
c001afde:	7e 2c                	jle    c001b00c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001afe0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afe4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001afe7:	31 c9                	xor    ecx,ecx
c001afe9:	01 d7                	add    edi,edx
c001afeb:	90                   	nop
c001afec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001afef:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aff2:	85 c0                	test   eax,eax
c001aff4:	79 06                	jns    c001affc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aff6:	05 ff 7f 00 00       	add    eax,0x7fff
c001affb:	90                   	nop
c001affc:	c1 f8 0f             	sar    eax,0xf
c001afff:	83 c1 04             	add    ecx,0x4
c001b002:	66 01 02             	add    WORD PTR [edx],ax
c001b005:	83 c2 02             	add    edx,0x2
c001b008:	39 d7                	cmp    edi,edx
c001b00a:	75 e0                	jne    c001afec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b00c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b00f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b012:	83 ec 04             	sub    esp,0x4
c001b015:	29 f0                	sub    eax,esi
c001b017:	c1 e0 02             	shl    eax,0x2
c001b01a:	50                   	push   eax
c001b01b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b01e:	50                   	push   eax
c001b01f:	52                   	push   edx
c001b020:	e8 ab 53 fe ff       	call   c00003d0 <memmove>
c001b025:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	29 f0                	sub    eax,esi
c001b02d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b030:	89 f0                	mov    eax,esi
c001b032:	5b                   	pop    ebx
c001b033:	5e                   	pop    esi
c001b034:	5f                   	pop    edi
c001b035:	c3                   	ret    
c001b036:	66 90                	xchg   ax,ax

c001b038 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b038:	57                   	push   edi
c001b039:	56                   	push   esi
c001b03a:	53                   	push   ebx
c001b03b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b03f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b043:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b047:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b04d:	39 06                	cmp    DWORD PTR [esi],eax
c001b04f:	74 13                	je     c001b064 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b051:	83 ec 0c             	sub    esp,0xc
c001b054:	68 ec 2f 02 c0       	push   0xc0022fec
c001b059:	e8 5d 65 ff ff       	call   c00115bb <KePanic(char const*)>
c001b05e:	83 c4 10             	add    esp,0x10
c001b061:	8d 76 00             	lea    esi,[esi+0x0]
c001b064:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b06a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b06d:	74 11                	je     c001b080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b06f:	83 ec 0c             	sub    esp,0xc
c001b072:	68 27 30 02 c0       	push   0xc0023027
c001b077:	e8 3f 65 ff ff       	call   c00115bb <KePanic(char const*)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	90                   	nop
c001b080:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b086:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b089:	74 11                	je     c001b09c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b08b:	83 ec 0c             	sub    esp,0xc
c001b08e:	68 27 30 02 c0       	push   0xc0023027
c001b093:	e8 23 65 ff ff       	call   c00115bb <KePanic(char const*)>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	90                   	nop
c001b09c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b09f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b0a3:	7e 07                	jle    c001b0ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b0a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ac:	85 ff                	test   edi,edi
c001b0ae:	7e 1c                	jle    c001b0cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b0b0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0b7:	31 c0                	xor    eax,eax
c001b0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b0bf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b0c2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b0c5:	83 c0 04             	add    eax,0x4
c001b0c8:	39 c1                	cmp    ecx,eax
c001b0ca:	75 f0                	jne    c001b0bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b0cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b0cf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b0d2:	83 ec 04             	sub    esp,0x4
c001b0d5:	29 f8                	sub    eax,edi
c001b0d7:	c1 e0 02             	shl    eax,0x2
c001b0da:	50                   	push   eax
c001b0db:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b0de:	50                   	push   eax
c001b0df:	52                   	push   edx
c001b0e0:	e8 eb 52 fe ff       	call   c00003d0 <memmove>
c001b0e5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	29 f8                	sub    eax,edi
c001b0ed:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b0f0:	89 f8                	mov    eax,edi
c001b0f2:	5b                   	pop    ebx
c001b0f3:	5e                   	pop    esi
c001b0f4:	5f                   	pop    edi
c001b0f5:	c3                   	ret    

c001b0f6 <PCI::open(int, int, void*)>:
c001b0f6:	83 ec 18             	sub    esp,0x18
c001b0f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b101:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b107:	8b 10                	mov    edx,DWORD PTR [eax]
c001b109:	50                   	push   eax
c001b10a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b10d:	31 c0                	xor    eax,eax
c001b10f:	83 c4 1c             	add    esp,0x1c
c001b112:	c3                   	ret    
c001b113:	90                   	nop

c001b114 <PCI::close(int, int, void*)>:
c001b114:	31 c0                	xor    eax,eax
c001b116:	c3                   	ret    
c001b117:	90                   	nop

c001b118 <PCI::PCI()>:
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11f:	83 ec 08             	sub    esp,0x8
c001b122:	68 43 30 02 c0       	push   0xc0023043
c001b127:	50                   	push   eax
c001b128:	e8 97 11 ff ff       	call   c000c2c4 <Bus::Bus(char const*)>
c001b12d:	83 c4 10             	add    esp,0x10
c001b130:	ba ec 30 02 c0       	mov    edx,0xc00230ec
c001b135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b139:	89 10                	mov    DWORD PTR [eax],edx
c001b13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14d:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b156:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b15c:	0f b6 d0             	movzx  edx,al
c001b15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b163:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b174:	0f b6 d0             	movzx  edx,al
c001b177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b184:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b18a:	8d 50 01             	lea    edx,[eax+0x1]
c001b18d:	88 d1                	mov    cl,dl
c001b18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b193:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b199:	0f b6 d0             	movzx  edx,al
c001b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1a4:	83 c9 c0             	or     ecx,0xffffffc0
c001b1a7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1ab:	90                   	nop
c001b1ac:	83 c4 0c             	add    esp,0xc
c001b1af:	c3                   	ret    

c001b1b0 <PCI::readBAR8(unsigned int, int)>:
c001b1b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1b8:	f6 c2 01             	test   dl,0x1
c001b1bb:	74 07                	je     c001b1c4 <PCI::readBAR8(unsigned int, int)+0x14>
c001b1bd:	83 e2 fc             	and    edx,0xfffffffc
c001b1c0:	01 c2                	add    edx,eax
c001b1c2:	ec                   	in     al,dx
c001b1c3:	c3                   	ret    
c001b1c4:	83 e2 f0             	and    edx,0xfffffff0
c001b1c7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b1ca:	c3                   	ret    
c001b1cb:	90                   	nop

c001b1cc <PCI::readBAR16(unsigned int, int)>:
c001b1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1d4:	f6 c2 01             	test   dl,0x1
c001b1d7:	74 08                	je     c001b1e1 <PCI::readBAR16(unsigned int, int)+0x15>
c001b1d9:	83 e2 fc             	and    edx,0xfffffffc
c001b1dc:	01 c2                	add    edx,eax
c001b1de:	66 ed                	in     ax,dx
c001b1e0:	c3                   	ret    
c001b1e1:	83 e2 f0             	and    edx,0xfffffff0
c001b1e4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b1e8:	c3                   	ret    
c001b1e9:	90                   	nop

c001b1ea <PCI::readBAR32(unsigned int, int)>:
c001b1ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1f2:	f6 c2 01             	test   dl,0x1
c001b1f5:	74 07                	je     c001b1fe <PCI::readBAR32(unsigned int, int)+0x14>
c001b1f7:	83 e2 fc             	and    edx,0xfffffffc
c001b1fa:	01 c2                	add    edx,eax
c001b1fc:	ed                   	in     eax,dx
c001b1fd:	c3                   	ret    
c001b1fe:	83 e2 f0             	and    edx,0xfffffff0
c001b201:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b204:	c3                   	ret    
c001b205:	90                   	nop

c001b206 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b206:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b20a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b20e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b212:	f6 c2 01             	test   dl,0x1
c001b215:	74 07                	je     c001b21e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b217:	83 e2 fc             	and    edx,0xfffffffc
c001b21a:	01 ca                	add    edx,ecx
c001b21c:	ee                   	out    dx,al
c001b21d:	c3                   	ret    
c001b21e:	83 e2 f0             	and    edx,0xfffffff0
c001b221:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b224:	c3                   	ret    
c001b225:	90                   	nop

c001b226 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b226:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b22a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b22e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b232:	f6 c2 01             	test   dl,0x1
c001b235:	74 08                	je     c001b23f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b237:	83 e2 fc             	and    edx,0xfffffffc
c001b23a:	01 ca                	add    edx,ecx
c001b23c:	66 ef                	out    dx,ax
c001b23e:	c3                   	ret    
c001b23f:	83 e2 f0             	and    edx,0xfffffff0
c001b242:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b246:	c3                   	ret    
c001b247:	90                   	nop

c001b248 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b254:	f6 c2 01             	test   dl,0x1
c001b257:	74 07                	je     c001b260 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b259:	83 e2 fc             	and    edx,0xfffffffc
c001b25c:	01 ca                	add    edx,ecx
c001b25e:	ef                   	out    dx,eax
c001b25f:	c3                   	ret    
c001b260:	83 e2 f0             	and    edx,0xfffffff0
c001b263:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b266:	c3                   	ret    
c001b267:	90                   	nop

c001b268 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b268:	55                   	push   ebp
c001b269:	57                   	push   edi
c001b26a:	56                   	push   esi
c001b26b:	53                   	push   ebx
c001b26c:	83 ec 0c             	sub    esp,0xc
c001b26f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b274:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b278:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b27c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b280:	83 fe 07             	cmp    esi,0x7
c001b283:	76 10                	jbe    c001b295 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	68 4b 30 02 c0       	push   0xc002304b
c001b28d:	e8 29 63 ff ff       	call   c00115bb <KePanic(char const*)>
c001b292:	83 c4 10             	add    esp,0x10
c001b295:	0f b6 db             	movzx  ebx,bl
c001b298:	83 fb 0f             	cmp    ebx,0xf
c001b29b:	76 10                	jbe    c001b2ad <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b29d:	83 ec 0c             	sub    esp,0xc
c001b2a0:	68 7b 30 02 c0       	push   0xc002307b
c001b2a5:	e8 11 63 ff ff       	call   c00115bb <KePanic(char const*)>
c001b2aa:	83 c4 10             	add    esp,0x10
c001b2ad:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2b5:	83 c8 f0             	or     eax,0xfffffff0
c001b2b8:	ee                   	out    dx,al
c001b2b9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b2be:	89 e8                	mov    eax,ebp
c001b2c0:	ee                   	out    dx,al
c001b2c1:	83 c4 0c             	add    esp,0xc
c001b2c4:	89 d8                	mov    eax,ebx
c001b2c6:	89 f9                	mov    ecx,edi
c001b2c8:	c1 e0 08             	shl    eax,0x8
c001b2cb:	0f b6 d9             	movzx  ebx,cl
c001b2ce:	83 e3 fc             	and    ebx,0xfffffffc
c001b2d1:	09 d8                	or     eax,ebx
c001b2d3:	5b                   	pop    ebx
c001b2d4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b2d9:	5e                   	pop    esi
c001b2da:	5f                   	pop    edi
c001b2db:	5d                   	pop    ebp
c001b2dc:	c3                   	ret    
c001b2dd:	90                   	nop

c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2de:	57                   	push   edi
c001b2df:	56                   	push   esi
c001b2e0:	53                   	push   ebx
c001b2e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2e9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b2ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2fb:	83 ff 01             	cmp    edi,0x1
c001b2fe:	75 3f                	jne    c001b33f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b300:	89 de                	mov    esi,ebx
c001b302:	0f b6 c0             	movzx  eax,al
c001b305:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b30b:	c1 e0 10             	shl    eax,0x10
c001b30e:	0f b6 c9             	movzx  ecx,cl
c001b311:	09 f0                	or     eax,esi
c001b313:	c1 e1 08             	shl    ecx,0x8
c001b316:	0f b6 d2             	movzx  edx,dl
c001b319:	09 c8                	or     eax,ecx
c001b31b:	c1 e2 0b             	shl    edx,0xb
c001b31e:	09 d0                	or     eax,edx
c001b320:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b325:	0d 00 00 00 80       	or     eax,0x80000000
c001b32a:	ef                   	out    dx,eax
c001b32b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b330:	ed                   	in     eax,dx
c001b331:	83 e3 02             	and    ebx,0x2
c001b334:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b33b:	d3 e8                	shr    eax,cl
c001b33d:	eb 44                	jmp    c001b383 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b33f:	83 ff 02             	cmp    edi,0x2
c001b342:	75 2d                	jne    c001b371 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	0f b6 c9             	movzx  ecx,cl
c001b34a:	0f b6 d2             	movzx  edx,dl
c001b34d:	0f b6 fb             	movzx  edi,bl
c001b350:	0f b6 c0             	movzx  eax,al
c001b353:	57                   	push   edi
c001b354:	51                   	push   ecx
c001b355:	52                   	push   edx
c001b356:	50                   	push   eax
c001b357:	56                   	push   esi
c001b358:	e8 0b ff ff ff       	call   c001b268 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b35d:	89 c2                	mov    edx,eax
c001b35f:	ed                   	in     eax,dx
c001b360:	83 e3 02             	and    ebx,0x2
c001b363:	83 c4 20             	add    esp,0x20
c001b366:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b36d:	d3 e8                	shr    eax,cl
c001b36f:	eb 12                	jmp    c001b383 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b371:	83 ec 0c             	sub    esp,0xc
c001b374:	68 ab 30 02 c0       	push   0xc00230ab
c001b379:	e8 3d 62 ff ff       	call   c00115bb <KePanic(char const*)>
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	31 c0                	xor    eax,eax
c001b383:	5b                   	pop    ebx
c001b384:	5e                   	pop    esi
c001b385:	5f                   	pop    edi
c001b386:	c3                   	ret    
c001b387:	90                   	nop

c001b388 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b388:	83 ec 18             	sub    esp,0x18
c001b38b:	6a 00                	push   0x0
c001b38d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b392:	50                   	push   eax
c001b393:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b398:	50                   	push   eax
c001b399:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b39e:	50                   	push   eax
c001b39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3a3:	e8 36 ff ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3a8:	83 c4 2c             	add    esp,0x2c
c001b3ab:	c3                   	ret    

c001b3ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3ac:	83 ec 18             	sub    esp,0x18
c001b3af:	6a 0e                	push   0xe
c001b3b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3b6:	50                   	push   eax
c001b3b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3bc:	50                   	push   eax
c001b3bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3c2:	50                   	push   eax
c001b3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c7:	e8 12 ff ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3cc:	83 c4 2c             	add    esp,0x2c
c001b3cf:	0f b6 c0             	movzx  eax,al
c001b3d2:	c3                   	ret    
c001b3d3:	90                   	nop

c001b3d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b3d4:	55                   	push   ebp
c001b3d5:	57                   	push   edi
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	83 ec 18             	sub    esp,0x18
c001b3db:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b3e0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b3e5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b3ea:	6a 0a                	push   0xa
c001b3ec:	56                   	push   esi
c001b3ed:	55                   	push   ebp
c001b3ee:	57                   	push   edi
c001b3ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3f3:	e8 e6 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3f8:	83 c4 14             	add    esp,0x14
c001b3fb:	89 c3                	mov    ebx,eax
c001b3fd:	6a 0a                	push   0xa
c001b3ff:	0f b6 db             	movzx  ebx,bl
c001b402:	56                   	push   esi
c001b403:	55                   	push   ebp
c001b404:	57                   	push   edi
c001b405:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b409:	e8 d0 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b40e:	83 c4 2c             	add    esp,0x2c
c001b411:	25 00 ff 00 00       	and    eax,0xff00
c001b416:	09 d8                	or     eax,ebx
c001b418:	5b                   	pop    ebx
c001b419:	5e                   	pop    esi
c001b41a:	5f                   	pop    edi
c001b41b:	5d                   	pop    ebp
c001b41c:	c3                   	ret    
c001b41d:	90                   	nop

c001b41e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b41e:	83 ec 18             	sub    esp,0x18
c001b421:	6a 08                	push   0x8
c001b423:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b428:	50                   	push   eax
c001b429:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b42e:	50                   	push   eax
c001b42f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b434:	50                   	push   eax
c001b435:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b439:	e8 a0 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b43e:	83 c4 2c             	add    esp,0x2c
c001b441:	0f b6 c4             	movzx  eax,ah
c001b444:	c3                   	ret    
c001b445:	90                   	nop

c001b446 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b446:	83 ec 18             	sub    esp,0x18
c001b449:	6a 08                	push   0x8
c001b44b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b450:	50                   	push   eax
c001b451:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b456:	50                   	push   eax
c001b457:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b45c:	50                   	push   eax
c001b45d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b461:	e8 78 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b466:	83 c4 2c             	add    esp,0x2c
c001b469:	c3                   	ret    

c001b46a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b46a:	83 ec 18             	sub    esp,0x18
c001b46d:	6a 3c                	push   0x3c
c001b46f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b474:	50                   	push   eax
c001b475:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47a:	50                   	push   eax
c001b47b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b480:	50                   	push   eax
c001b481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b485:	e8 54 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b48a:	83 c4 2c             	add    esp,0x2c
c001b48d:	c3                   	ret    

c001b48e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b48e:	83 ec 18             	sub    esp,0x18
c001b491:	6a 18                	push   0x18
c001b493:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b498:	50                   	push   eax
c001b499:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49e:	50                   	push   eax
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a9:	e8 30 fe ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ae:	83 c4 2c             	add    esp,0x2c
c001b4b1:	0f b6 c4             	movzx  eax,ah
c001b4b4:	c3                   	ret    
c001b4b5:	90                   	nop

c001b4b6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4b6:	55                   	push   ebp
c001b4b7:	57                   	push   edi
c001b4b8:	56                   	push   esi
c001b4b9:	53                   	push   ebx
c001b4ba:	83 ec 28             	sub    esp,0x28
c001b4bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b4c1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b4c6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b4cb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b4d0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b4d7:	8d 43 12             	lea    eax,[ebx+0x12]
c001b4da:	83 c3 10             	add    ebx,0x10
c001b4dd:	0f b6 c0             	movzx  eax,al
c001b4e0:	0f b6 db             	movzx  ebx,bl
c001b4e3:	50                   	push   eax
c001b4e4:	51                   	push   ecx
c001b4e5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b4e9:	57                   	push   edi
c001b4ea:	55                   	push   ebp
c001b4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4ef:	e8 ea fd ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f4:	83 c4 14             	add    esp,0x14
c001b4f7:	89 c6                	mov    esi,eax
c001b4f9:	53                   	push   ebx
c001b4fa:	c1 e6 10             	shl    esi,0x10
c001b4fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b501:	51                   	push   ecx
c001b502:	57                   	push   edi
c001b503:	55                   	push   ebp
c001b504:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b508:	e8 d1 fd ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b50d:	83 c4 3c             	add    esp,0x3c
c001b510:	0f b7 c0             	movzx  eax,ax
c001b513:	5b                   	pop    ebx
c001b514:	09 f0                	or     eax,esi
c001b516:	5e                   	pop    esi
c001b517:	5f                   	pop    edi
c001b518:	5d                   	pop    ebp
c001b519:	c3                   	ret    

c001b51a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b51a:	55                   	push   ebp
c001b51b:	57                   	push   edi
c001b51c:	56                   	push   esi
c001b51d:	53                   	push   ebx
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b525:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b529:	89 f5                	mov    ebp,esi
c001b52b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b539:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b53d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b541:	83 f9 01             	cmp    ecx,0x1
c001b544:	75 5d                	jne    c001b5a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b546:	0f b6 c8             	movzx  ecx,al
c001b549:	0f b6 d2             	movzx  edx,dl
c001b54c:	c1 e1 10             	shl    ecx,0x10
c001b54f:	c1 e2 0b             	shl    edx,0xb
c001b552:	89 f0                	mov    eax,esi
c001b554:	25 fc 00 00 00       	and    eax,0xfc
c001b559:	09 c1                	or     ecx,eax
c001b55b:	89 e8                	mov    eax,ebp
c001b55d:	0f b6 c0             	movzx  eax,al
c001b560:	c1 e0 08             	shl    eax,0x8
c001b563:	09 c1                	or     ecx,eax
c001b565:	09 d1                	or     ecx,edx
c001b567:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b56c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b572:	89 c8                	mov    eax,ecx
c001b574:	ef                   	out    dx,eax
c001b575:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b57a:	ed                   	in     eax,dx
c001b57b:	0f b7 db             	movzx  ebx,bx
c001b57e:	83 e6 02             	and    esi,0x2
c001b581:	74 0a                	je     c001b58d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b583:	0f b7 d0             	movzx  edx,ax
c001b586:	c1 e3 10             	shl    ebx,0x10
c001b589:	09 d3                	or     ebx,edx
c001b58b:	eb 05                	jmp    c001b592 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b58d:	66 31 c0             	xor    ax,ax
c001b590:	09 c3                	or     ebx,eax
c001b592:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b597:	89 c8                	mov    eax,ecx
c001b599:	ef                   	out    dx,eax
c001b59a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b59f:	89 d8                	mov    eax,ebx
c001b5a1:	eb 41                	jmp    c001b5e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b5a3:	83 f9 02             	cmp    ecx,0x2
c001b5a6:	75 45                	jne    c001b5ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b5a8:	83 ec 0c             	sub    esp,0xc
c001b5ab:	0f b6 d2             	movzx  edx,dl
c001b5ae:	89 f1                	mov    ecx,esi
c001b5b0:	0f b6 c0             	movzx  eax,al
c001b5b3:	0f b6 f1             	movzx  esi,cl
c001b5b6:	89 e9                	mov    ecx,ebp
c001b5b8:	56                   	push   esi
c001b5b9:	0f b6 c9             	movzx  ecx,cl
c001b5bc:	51                   	push   ecx
c001b5bd:	52                   	push   edx
c001b5be:	50                   	push   eax
c001b5bf:	57                   	push   edi
c001b5c0:	e8 a3 fc ff ff       	call   c001b268 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c5:	89 c2                	mov    edx,eax
c001b5c7:	ed                   	in     eax,dx
c001b5c8:	83 c4 20             	add    esp,0x20
c001b5cb:	0f b7 db             	movzx  ebx,bx
c001b5ce:	f6 c2 02             	test   dl,0x2
c001b5d1:	74 0c                	je     c001b5df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b5d3:	0f b7 c8             	movzx  ecx,ax
c001b5d6:	89 d8                	mov    eax,ebx
c001b5d8:	c1 e0 10             	shl    eax,0x10
c001b5db:	09 c8                	or     eax,ecx
c001b5dd:	eb 05                	jmp    c001b5e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b5df:	66 31 c0             	xor    ax,ax
c001b5e2:	09 d8                	or     eax,ebx
c001b5e4:	ef                   	out    dx,eax
c001b5e5:	83 c4 0c             	add    esp,0xc
c001b5e8:	5b                   	pop    ebx
c001b5e9:	5e                   	pop    esi
c001b5ea:	5f                   	pop    edi
c001b5eb:	5d                   	pop    ebp
c001b5ec:	c3                   	ret    
c001b5ed:	c7 44 24 20 ab 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc00230ab
c001b5f5:	83 c4 0c             	add    esp,0xc
c001b5f8:	5b                   	pop    ebx
c001b5f9:	5e                   	pop    esi
c001b5fa:	5f                   	pop    edi
c001b5fb:	5d                   	pop    ebp
c001b5fc:	e9 ba 5f ff ff       	jmp    c00115bb <KePanic(char const*)>
c001b601:	90                   	nop

c001b602 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b602:	55                   	push   ebp
c001b603:	57                   	push   edi
c001b604:	56                   	push   esi
c001b605:	53                   	push   ebx
c001b606:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b60c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b613:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b61a:	0f 85 bd 00 00 00    	jne    c001b6dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	68 14 01 00 00       	push   0x114
c001b628:	e8 89 c4 fe ff       	call   c0007ab6 <malloc>
c001b62d:	83 c4 0c             	add    esp,0xc
c001b630:	89 c3                	mov    ebx,eax
c001b632:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b638:	68 b1 30 02 c0       	push   0xc00230b1
c001b63d:	50                   	push   eax
c001b63e:	e8 a7 04 ff ff       	call   c000baea <File::File(char const*, Process*)>
c001b643:	83 c4 10             	add    esp,0x10
c001b646:	85 db                	test   ebx,ebx
c001b648:	0f 84 67 02 00 00    	je     c001b8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b64e:	56                   	push   esi
c001b64f:	56                   	push   esi
c001b650:	6a 01                	push   0x1
c001b652:	53                   	push   ebx
c001b653:	e8 b0 04 ff ff       	call   c000bb08 <File::open(FileOpenMode)>
c001b658:	83 c4 10             	add    esp,0x10
c001b65b:	85 c0                	test   eax,eax
c001b65d:	0f 85 52 02 00 00    	jne    c001b8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b663:	52                   	push   edx
c001b664:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b668:	50                   	push   eax
c001b669:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b66d:	50                   	push   eax
c001b66e:	53                   	push   ebx
c001b66f:	e8 96 07 ff ff       	call   c000be0a <File::stat(unsigned long long*, bool*)>
c001b674:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b678:	40                   	inc    eax
c001b679:	89 04 24             	mov    DWORD PTR [esp],eax
c001b67c:	e8 35 c4 fe ff       	call   c0007ab6 <malloc>
c001b681:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b685:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b68a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b68e:	59                   	pop    ecx
c001b68f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b691:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b695:	51                   	push   ecx
c001b696:	50                   	push   eax
c001b697:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b69b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b69f:	53                   	push   ebx
c001b6a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6a3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6a7:	83 c4 20             	add    esp,0x20
c001b6aa:	89 c8                	mov    eax,ecx
c001b6ac:	99                   	cdq    
c001b6ad:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6b1:	0f 85 fe 01 00 00    	jne    c001b8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6b7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b6bb:	0f 85 f4 01 00 00    	jne    c001b8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6c1:	83 ec 0c             	sub    esp,0xc
c001b6c4:	53                   	push   ebx
c001b6c5:	e8 9c 04 ff ff       	call   c000bb66 <File::close()>
c001b6ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6ce:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b6d5:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b6e2:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b6e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6ec:	31 f6                	xor    esi,esi
c001b6ee:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b6f6:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b6fd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b702:	31 c9                	xor    ecx,ecx
c001b704:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b70c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b711:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b719:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b71d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b725:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b729:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b72d:	0f 8e 82 01 00 00    	jle    c001b8b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b733:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b736:	d4 40                	aam    0x40
c001b738:	d5 39                	aad    0x39
c001b73a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b73e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b742:	d4 40                	aam    0x40
c001b744:	d5 39                	aad    0x39
c001b746:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b74a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b74e:	d4 40                	aam    0x40
c001b750:	d5 39                	aad    0x39
c001b752:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b756:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b75a:	d4 40                	aam    0x40
c001b75c:	d5 39                	aad    0x39
c001b75e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b762:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b766:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b76a:	3c 56                	cmp    al,0x56
c001b76c:	74 43                	je     c001b7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b76e:	d4 40                	aam    0x40
c001b770:	d5 39                	aad    0x39
c001b772:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b775:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b779:	0f b6 c9             	movzx  ecx,cl
c001b77c:	c1 e1 04             	shl    ecx,0x4
c001b77f:	d4 40                	aam    0x40
c001b781:	d5 39                	aad    0x39
c001b783:	83 e8 30             	sub    eax,0x30
c001b786:	0f b6 c0             	movzx  eax,al
c001b789:	09 c1                	or     ecx,eax
c001b78b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b78f:	c1 e1 04             	shl    ecx,0x4
c001b792:	d4 40                	aam    0x40
c001b794:	d5 39                	aad    0x39
c001b796:	83 e8 30             	sub    eax,0x30
c001b799:	0f b6 c0             	movzx  eax,al
c001b79c:	09 c1                	or     ecx,eax
c001b79e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b7a2:	c1 e1 04             	shl    ecx,0x4
c001b7a5:	d4 40                	aam    0x40
c001b7a7:	d5 39                	aad    0x39
c001b7a9:	83 e8 30             	sub    eax,0x30
c001b7ac:	0f b6 c0             	movzx  eax,al
c001b7af:	09 c1                	or     ecx,eax
c001b7b1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b7b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b7b9:	3c 58                	cmp    al,0x58
c001b7bb:	74 47                	je     c001b804 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b7bd:	d4 40                	aam    0x40
c001b7bf:	d5 39                	aad    0x39
c001b7c1:	8d 50 d0             	lea    edx,[eax-0x30]
c001b7c4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b7c8:	0f b6 d2             	movzx  edx,dl
c001b7cb:	c1 e2 04             	shl    edx,0x4
c001b7ce:	d4 40                	aam    0x40
c001b7d0:	d5 39                	aad    0x39
c001b7d2:	83 e8 30             	sub    eax,0x30
c001b7d5:	0f b6 c0             	movzx  eax,al
c001b7d8:	09 c2                	or     edx,eax
c001b7da:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b7de:	c1 e2 04             	shl    edx,0x4
c001b7e1:	d4 40                	aam    0x40
c001b7e3:	d5 39                	aad    0x39
c001b7e5:	83 e8 30             	sub    eax,0x30
c001b7e8:	0f b6 c0             	movzx  eax,al
c001b7eb:	09 c2                	or     edx,eax
c001b7ed:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b7f1:	c1 e2 04             	shl    edx,0x4
c001b7f4:	d4 40                	aam    0x40
c001b7f6:	d5 39                	aad    0x39
c001b7f8:	83 e8 30             	sub    eax,0x30
c001b7fb:	0f b6 c0             	movzx  eax,al
c001b7fe:	09 c2                	or     edx,eax
c001b800:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b804:	83 c6 10             	add    esi,0x10
c001b807:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b80b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b80f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b813:	83 fa 0a             	cmp    edx,0xa
c001b816:	74 0b                	je     c001b823 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b818:	47                   	inc    edi
c001b819:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b81d:	75 19                	jne    c001b838 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b81f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b823:	31 c0                	xor    eax,eax
c001b825:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b82a:	0f 94 c0             	sete   al
c001b82d:	01 c6                	add    esi,eax
c001b82f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b834:	75 0b                	jne    c001b841 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b836:	eb 14                	jmp    c001b84c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b838:	46                   	inc    esi
c001b839:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b83c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b83f:	eb ca                	jmp    c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b841:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b846:	0f 85 dd fe ff ff    	jne    c001b729 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b84c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b851:	74 10                	je     c001b863 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b853:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b858:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b85d:	0f 85 c6 fe ff ff    	jne    c001b729 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b867:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b86b:	83 e8 30             	sub    eax,0x30
c001b86e:	83 ef 30             	sub    edi,0x30
c001b871:	c1 e0 04             	shl    eax,0x4
c001b874:	09 f8                	or     eax,edi
c001b876:	0f b6 c0             	movzx  eax,al
c001b879:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b87d:	0f 85 a6 fe ff ff    	jne    c001b729 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b887:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b88b:	83 e8 30             	sub    eax,0x30
c001b88e:	83 ef 30             	sub    edi,0x30
c001b891:	c1 e0 04             	shl    eax,0x4
c001b894:	09 f8                	or     eax,edi
c001b896:	0f b6 c0             	movzx  eax,al
c001b899:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b89d:	0f 85 86 fe ff ff    	jne    c001b729 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8a3:	50                   	push   eax
c001b8a4:	50                   	push   eax
c001b8a5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8a9:	50                   	push   eax
c001b8aa:	55                   	push   ebp
c001b8ab:	e8 90 4d fe ff       	call   c0000640 <strcpy>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	eb 06                	jmp    c001b8bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b8b5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b8b9:	31 ed                	xor    ebp,ebp
c001b8bb:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b8c1:	89 e8                	mov    eax,ebp
c001b8c3:	5b                   	pop    ebx
c001b8c4:	5e                   	pop    esi
c001b8c5:	5f                   	pop    edi
c001b8c6:	5d                   	pop    ebp
c001b8c7:	c3                   	ret    

c001b8c8 <PCI::checkBus(unsigned char)>:
c001b8c8:	56                   	push   esi
c001b8c9:	53                   	push   ebx
c001b8ca:	31 db                	xor    ebx,ebx
c001b8cc:	51                   	push   ecx
c001b8cd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b8d2:	52                   	push   edx
c001b8d3:	53                   	push   ebx
c001b8d4:	43                   	inc    ebx
c001b8d5:	56                   	push   esi
c001b8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8da:	e8 03 03 00 00       	call   c001bbe2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	83 fb 20             	cmp    ebx,0x20
c001b8e5:	75 eb                	jne    c001b8d2 <PCI::checkBus(unsigned char)+0xa>
c001b8e7:	58                   	pop    eax
c001b8e8:	5b                   	pop    ebx
c001b8e9:	5e                   	pop    esi
c001b8ea:	c3                   	ret    
c001b8eb:	90                   	nop

c001b8ec <PCI::foundDevice(PCIDeviceInfo)>:
c001b8ec:	55                   	push   ebp
c001b8ed:	57                   	push   edi
c001b8ee:	56                   	push   esi
c001b8ef:	53                   	push   ebx
c001b8f0:	83 ec 1c             	sub    esp,0x1c
c001b8f3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b8f8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8fc:	3d ff ff 00 00       	cmp    eax,0xffff
c001b901:	0f 84 57 01 00 00    	je     c001ba5e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b907:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b90c:	66 3d 06 04          	cmp    ax,0x406
c001b910:	75 2c                	jne    c001b93e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b912:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b917:	50                   	push   eax
c001b918:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b91d:	50                   	push   eax
c001b91e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b923:	50                   	push   eax
c001b924:	53                   	push   ebx
c001b925:	e8 64 fb ff ff       	call   c001b48e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b92a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b92e:	0f b6 c0             	movzx  eax,al
c001b931:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b935:	83 c4 2c             	add    esp,0x2c
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	5f                   	pop    edi
c001b93b:	5d                   	pop    ebp
c001b93c:	eb 8a                	jmp    c001b8c8 <PCI::checkBus(unsigned char)>
c001b93e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b942:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b948:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b94c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b950:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b955:	85 d2                	test   edx,edx
c001b957:	74 36                	je     c001b98f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b959:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b95c:	85 c9                	test   ecx,ecx
c001b95e:	74 2b                	je     c001b98b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b960:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b966:	31 ee                	xor    esi,ebp
c001b968:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b96e:	75 1b                	jne    c001b98b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b970:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b974:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b97a:	75 0f                	jne    c001b98b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b97c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b983:	39 f9                	cmp    ecx,edi
c001b985:	0f 84 d3 00 00 00    	je     c001ba5e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b98b:	8b 12                	mov    edx,DWORD PTR [edx]
c001b98d:	eb c6                	jmp    c001b955 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b98f:	3d 01 06 00 00       	cmp    eax,0x601
c001b994:	75 19                	jne    c001b9af <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	68 64 01 00 00       	push   0x164
c001b99e:	e8 13 c1 fe ff       	call   c0007ab6 <malloc>
c001b9a3:	89 c5                	mov    ebp,eax
c001b9a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9a8:	e8 a1 0e 00 00       	call   c001c84e <SATABus::SATABus()>
c001b9ad:	eb 1e                	jmp    c001b9cd <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b9af:	3d 01 01 00 00       	cmp    eax,0x101
c001b9b4:	75 62                	jne    c001ba18 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	68 70 02 00 00       	push   0x270
c001b9be:	e8 f3 c0 fe ff       	call   c0007ab6 <malloc>
c001b9c3:	89 c5                	mov    ebp,eax
c001b9c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9c8:	e8 e5 02 00 00       	call   c001bcb2 <IDE::IDE()>
c001b9cd:	5f                   	pop    edi
c001b9ce:	58                   	pop    eax
c001b9cf:	55                   	push   ebp
c001b9d0:	53                   	push   ebx
c001b9d1:	e8 8c 0f ff ff       	call   c000c962 <Device::addChild(Device*)>
c001b9d6:	83 ec 1c             	sub    esp,0x1c
c001b9d9:	b9 09 00 00 00       	mov    ecx,0x9
c001b9de:	fc                   	cld    
c001b9df:	89 e7                	mov    edi,esp
c001b9e1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b9e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9e7:	55                   	push   ebp
c001b9e8:	e8 bb 0e ff ff       	call   c000c8a8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b9ed:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9f0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b9f4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b9fc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba04:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba0c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba0f:	83 c4 4c             	add    esp,0x4c
c001ba12:	5b                   	pop    ebx
c001ba13:	5e                   	pop    esi
c001ba14:	5f                   	pop    edi
c001ba15:	5d                   	pop    ebp
c001ba16:	ff e0                	jmp    eax
c001ba18:	83 ec 0c             	sub    esp,0xc
c001ba1b:	68 58 01 00 00       	push   0x158
c001ba20:	e8 91 c0 fe ff       	call   c0007ab6 <malloc>
c001ba25:	89 c5                	mov    ebp,eax
c001ba27:	58                   	pop    eax
c001ba28:	5a                   	pop    edx
c001ba29:	68 ca 30 02 c0       	push   0xc00230ca
c001ba2e:	55                   	push   ebp
c001ba2f:	e8 cc 11 ff ff       	call   c000cc00 <DriverlessDevice::DriverlessDevice(char const*)>
c001ba34:	59                   	pop    ecx
c001ba35:	5e                   	pop    esi
c001ba36:	55                   	push   ebp
c001ba37:	53                   	push   ebx
c001ba38:	e8 25 0f ff ff       	call   c000c962 <Device::addChild(Device*)>
c001ba3d:	83 c4 10             	add    esp,0x10
c001ba40:	b9 09 00 00 00       	mov    ecx,0x9
c001ba45:	fc                   	cld    
c001ba46:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba4a:	89 fe                	mov    esi,edi
c001ba4c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba4e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001ba52:	83 c4 1c             	add    esp,0x1c
c001ba55:	5b                   	pop    ebx
c001ba56:	5e                   	pop    esi
c001ba57:	5f                   	pop    edi
c001ba58:	5d                   	pop    ebp
c001ba59:	e9 4a 0e ff ff       	jmp    c000c8a8 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba5e:	83 c4 1c             	add    esp,0x1c
c001ba61:	5b                   	pop    ebx
c001ba62:	5e                   	pop    esi
c001ba63:	5f                   	pop    edi
c001ba64:	5d                   	pop    ebp
c001ba65:	c3                   	ret    

c001ba66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba66:	55                   	push   ebp
c001ba67:	57                   	push   edi
c001ba68:	56                   	push   esi
c001ba69:	53                   	push   ebx
c001ba6a:	83 ec 68             	sub    esp,0x68
c001ba6d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ba71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ba78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba7c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ba83:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ba88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ba8c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ba93:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ba98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba9c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001baa1:	6a 0c                	push   0xc
c001baa3:	57                   	push   edi
c001baa4:	53                   	push   ebx
c001baa5:	56                   	push   esi
c001baa6:	55                   	push   ebp
c001baa7:	e8 32 f8 ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baac:	83 c4 20             	add    esp,0x20
c001baaf:	57                   	push   edi
c001bab0:	53                   	push   ebx
c001bab1:	56                   	push   esi
c001bab2:	55                   	push   ebp
c001bab3:	e8 1c f9 ff ff       	call   c001b3d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bab8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001babd:	57                   	push   edi
c001babe:	53                   	push   ebx
c001babf:	56                   	push   esi
c001bac0:	55                   	push   ebp
c001bac1:	e8 a4 f9 ff ff       	call   c001b46a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bac6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001baca:	83 c4 14             	add    esp,0x14
c001bacd:	6a 3c                	push   0x3c
c001bacf:	57                   	push   edi
c001bad0:	53                   	push   ebx
c001bad1:	56                   	push   esi
c001bad2:	55                   	push   ebp
c001bad3:	e8 06 f8 ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bad8:	0f b6 c4             	movzx  eax,ah
c001badb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001badf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bae3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bae7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001baec:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001baf2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001baf8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bafc:	83 c4 20             	add    esp,0x20
c001baff:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb04:	74 30                	je     c001bb36 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb06:	31 c0                	xor    eax,eax
c001bb08:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb0c:	7e 28                	jle    c001bb36 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb0e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb16:	39 cb                	cmp    ebx,ecx
c001bb18:	75 19                	jne    c001bb33 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb1a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb22:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb26:	75 0b                	jne    c001bb33 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb28:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb2f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb33:	40                   	inc    eax
c001bb34:	eb d2                	jmp    c001bb08 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb36:	31 d2                	xor    edx,edx
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	57                   	push   edi
c001bb3c:	53                   	push   ebx
c001bb3d:	56                   	push   esi
c001bb3e:	52                   	push   edx
c001bb3f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb43:	55                   	push   ebp
c001bb44:	e8 6d f9 ff ff       	call   c001b4b6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb4d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb51:	42                   	inc    edx
c001bb52:	83 c4 20             	add    esp,0x20
c001bb55:	83 fa 06             	cmp    edx,0x6
c001bb58:	75 de                	jne    c001bb38 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb62:	c1 e2 08             	shl    edx,0x8
c001bb65:	83 ec 0c             	sub    esp,0xc
c001bb68:	0f b6 c4             	movzx  eax,ah
c001bb6b:	09 d0                	or     eax,edx
c001bb6d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bb72:	6a 02                	push   0x2
c001bb74:	57                   	push   edi
c001bb75:	53                   	push   ebx
c001bb76:	56                   	push   esi
c001bb77:	55                   	push   ebp
c001bb78:	e8 61 f7 ff ff       	call   c001b2de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb7d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bb82:	83 c4 20             	add    esp,0x20
c001bb85:	57                   	push   edi
c001bb86:	53                   	push   ebx
c001bb87:	56                   	push   esi
c001bb88:	55                   	push   ebp
c001bb89:	e8 90 f8 ff ff       	call   c001b41e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bb8e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bb92:	57                   	push   edi
c001bb93:	53                   	push   ebx
c001bb94:	56                   	push   esi
c001bb95:	55                   	push   ebp
c001bb96:	e8 ed f7 ff ff       	call   c001b388 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb9b:	b9 09 00 00 00       	mov    ecx,0x9
c001bba0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bba5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bba9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbad:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bbb1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bbb5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bbb9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bbbd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bbc1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bbc5:	83 ec 0c             	sub    esp,0xc
c001bbc8:	fc                   	cld    
c001bbc9:	89 e7                	mov    edi,esp
c001bbcb:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bbcf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbd1:	55                   	push   ebp
c001bbd2:	e8 15 fd ff ff       	call   c001b8ec <PCI::foundDevice(PCIDeviceInfo)>
c001bbd7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bbdd:	5b                   	pop    ebx
c001bbde:	5e                   	pop    esi
c001bbdf:	5f                   	pop    edi
c001bbe0:	5d                   	pop    ebp
c001bbe1:	c3                   	ret    

c001bbe2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bbe2:	55                   	push   ebp
c001bbe3:	57                   	push   edi
c001bbe4:	56                   	push   esi
c001bbe5:	53                   	push   ebx
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bbed:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bbf2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bbf7:	6a 00                	push   0x0
c001bbf9:	56                   	push   esi
c001bbfa:	57                   	push   edi
c001bbfb:	55                   	push   ebp
c001bbfc:	e8 87 f7 ff ff       	call   c001b388 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc01:	6a 00                	push   0x0
c001bc03:	56                   	push   esi
c001bc04:	57                   	push   edi
c001bc05:	55                   	push   ebp
c001bc06:	e8 5b fe ff ff       	call   c001ba66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc0b:	83 c4 20             	add    esp,0x20
c001bc0e:	6a 00                	push   0x0
c001bc10:	56                   	push   esi
c001bc11:	57                   	push   edi
c001bc12:	55                   	push   ebp
c001bc13:	e8 94 f7 ff ff       	call   c001b3ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc18:	83 c4 10             	add    esp,0x10
c001bc1b:	a8 80                	test   al,0x80
c001bc1d:	74 2d                	je     c001bc4c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc1f:	bb 01 00 00 00       	mov    ebx,0x1
c001bc24:	53                   	push   ebx
c001bc25:	56                   	push   esi
c001bc26:	57                   	push   edi
c001bc27:	55                   	push   ebp
c001bc28:	e8 5b f7 ff ff       	call   c001b388 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc2d:	83 c4 10             	add    esp,0x10
c001bc30:	0f b7 c0             	movzx  eax,ax
c001bc33:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc38:	74 0c                	je     c001bc46 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc3a:	53                   	push   ebx
c001bc3b:	56                   	push   esi
c001bc3c:	57                   	push   edi
c001bc3d:	55                   	push   ebp
c001bc3e:	e8 23 fe ff ff       	call   c001ba66 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	43                   	inc    ebx
c001bc47:	83 fb 08             	cmp    ebx,0x8
c001bc4a:	75 d8                	jne    c001bc24 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc4c:	83 c4 0c             	add    esp,0xc
c001bc4f:	5b                   	pop    ebx
c001bc50:	5e                   	pop    esi
c001bc51:	5f                   	pop    edi
c001bc52:	5d                   	pop    ebp
c001bc53:	c3                   	ret    

c001bc54 <PCI::detect()>:
c001bc54:	56                   	push   esi
c001bc55:	53                   	push   ebx
c001bc56:	53                   	push   ebx
c001bc57:	31 db                	xor    ebx,ebx
c001bc59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc5d:	6a 00                	push   0x0
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 00                	push   0x0
c001bc63:	56                   	push   esi
c001bc64:	e8 43 f7 ff ff       	call   c001b3ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc69:	83 c4 10             	add    esp,0x10
c001bc6c:	a8 80                	test   al,0x80
c001bc6e:	75 21                	jne    c001bc91 <PCI::detect()+0x3d>
c001bc70:	51                   	push   ecx
c001bc71:	51                   	push   ecx
c001bc72:	6a 00                	push   0x0
c001bc74:	56                   	push   esi
c001bc75:	e8 4e fc ff ff       	call   c001b8c8 <PCI::checkBus(unsigned char)>
c001bc7a:	83 c4 10             	add    esp,0x10
c001bc7d:	eb 2a                	jmp    c001bca9 <PCI::detect()+0x55>
c001bc7f:	52                   	push   edx
c001bc80:	52                   	push   edx
c001bc81:	53                   	push   ebx
c001bc82:	43                   	inc    ebx
c001bc83:	56                   	push   esi
c001bc84:	e8 3f fc ff ff       	call   c001b8c8 <PCI::checkBus(unsigned char)>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	83 fb 08             	cmp    ebx,0x8
c001bc8f:	74 18                	je     c001bca9 <PCI::detect()+0x55>
c001bc91:	53                   	push   ebx
c001bc92:	6a 00                	push   0x0
c001bc94:	6a 00                	push   0x0
c001bc96:	56                   	push   esi
c001bc97:	e8 ec f6 ff ff       	call   c001b388 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	0f b7 c0             	movzx  eax,ax
c001bca2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bca7:	74 d6                	je     c001bc7f <PCI::detect()+0x2b>
c001bca9:	58                   	pop    eax
c001bcaa:	5b                   	pop    ebx
c001bcab:	5e                   	pop    esi
c001bcac:	c3                   	ret    
c001bcad:	90                   	nop

c001bcae <IDE::close(int, int, void*)>:
c001bcae:	83 c8 ff             	or     eax,0xffffffff
c001bcb1:	c3                   	ret    

c001bcb2 <IDE::IDE()>:
c001bcb2:	83 ec 0c             	sub    esp,0xc
c001bcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb9:	83 ec 08             	sub    esp,0x8
c001bcbc:	68 10 31 02 c0       	push   0xc0023110
c001bcc1:	50                   	push   eax
c001bcc2:	e8 dd 0f ff ff       	call   c000cca4 <HardDiskController::HardDiskController(char const*)>
c001bcc7:	83 c4 10             	add    esp,0x10
c001bcca:	ba a0 31 02 c0       	mov    edx,0xc00231a0
c001bccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd3:	89 10                	mov    DWORD PTR [eax],edx
c001bcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bce0:	90                   	nop
c001bce1:	83 c4 0c             	add    esp,0xc
c001bce4:	c3                   	ret    
c001bce5:	90                   	nop

c001bce6 <IDE::prepareInterrupt(unsigned char)>:
c001bce6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bceb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bcef:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bcf7:	c3                   	ret    

c001bcf8 <selectDrive(unsigned char, unsigned char)>:
c001bcf8:	c3                   	ret    
c001bcf9:	90                   	nop

c001bcfa <IDE::getBase(unsigned char)>:
c001bcfa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bcff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd03:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd0b:	c3                   	ret    

c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd0c:	55                   	push   ebp
c001bd0d:	57                   	push   edi
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	83 ec 1c             	sub    esp,0x1c
c001bd13:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd1b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd1e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd26:	80 f9 03             	cmp    cl,0x3
c001bd29:	77 4f                	ja     c001bd7a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd2f:	0f b6 fa             	movzx  edi,dl
c001bd32:	0f b6 db             	movzx  ebx,bl
c001bd35:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bd38:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bd3d:	80 ca 80             	or     dl,0x80
c001bd40:	52                   	push   edx
c001bd41:	6a 0c                	push   0xc
c001bd43:	57                   	push   edi
c001bd44:	56                   	push   esi
c001bd45:	e8 c2 ff ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd4a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bd4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd53:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd57:	ee                   	out    dx,al
c001bd58:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bd5d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bd61:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bd65:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd69:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd71:	83 c4 2c             	add    esp,0x2c
c001bd74:	5b                   	pop    ebx
c001bd75:	5e                   	pop    esi
c001bd76:	5f                   	pop    edi
c001bd77:	5d                   	pop    ebp
c001bd78:	eb 92                	jmp    c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7a:	0f b6 cb             	movzx  ecx,bl
c001bd7d:	83 f9 07             	cmp    ecx,0x7
c001bd80:	77 12                	ja     c001bd94 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bd82:	0f b6 d2             	movzx  edx,dl
c001bd85:	0f b6 db             	movzx  ebx,bl
c001bd88:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bd90:	01 da                	add    edx,ebx
c001bd92:	eb 2f                	jmp    c001bdc3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd94:	83 f9 0d             	cmp    ecx,0xd
c001bd97:	77 13                	ja     c001bdac <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bd99:	0f b6 d2             	movzx  edx,dl
c001bd9c:	0f b6 db             	movzx  ebx,bl
c001bd9f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bda6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdaa:	eb 17                	jmp    c001bdc3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdac:	83 f9 15             	cmp    ecx,0x15
c001bdaf:	77 13                	ja     c001bdc4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bdb1:	0f b6 d2             	movzx  edx,dl
c001bdb4:	0f b6 db             	movzx  ebx,bl
c001bdb7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bdbf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bdc3:	ee                   	out    dx,al
c001bdc4:	83 c4 1c             	add    esp,0x1c
c001bdc7:	5b                   	pop    ebx
c001bdc8:	5e                   	pop    esi
c001bdc9:	5f                   	pop    edi
c001bdca:	5d                   	pop    ebp
c001bdcb:	c3                   	ret    

c001bdcc <IDE::read(unsigned char, unsigned char)>:
c001bdcc:	55                   	push   ebp
c001bdcd:	57                   	push   edi
c001bdce:	56                   	push   esi
c001bdcf:	53                   	push   ebx
c001bdd0:	83 ec 1c             	sub    esp,0x1c
c001bdd3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bdd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bddb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bdde:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bde2:	3c 03                	cmp    al,0x3
c001bde4:	77 40                	ja     c001be26 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bde6:	0f b6 f9             	movzx  edi,cl
c001bde9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bdec:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bdf1:	0c 80                	or     al,0x80
c001bdf3:	50                   	push   eax
c001bdf4:	6a 0c                	push   0xc
c001bdf6:	57                   	push   edi
c001bdf7:	56                   	push   esi
c001bdf8:	e8 0f ff ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdfd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be02:	0f b6 d3             	movzx  edx,bl
c001be05:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be09:	ec                   	in     al,dx
c001be0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be0e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be13:	52                   	push   edx
c001be14:	6a 0c                	push   0xc
c001be16:	57                   	push   edi
c001be17:	56                   	push   esi
c001be18:	e8 ef fe ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be1d:	83 c4 20             	add    esp,0x20
c001be20:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be24:	eb 4c                	jmp    c001be72 <IDE::read(unsigned char, unsigned char)+0xa6>
c001be26:	0f b6 d3             	movzx  edx,bl
c001be29:	83 fa 07             	cmp    edx,0x7
c001be2c:	77 12                	ja     c001be40 <IDE::read(unsigned char, unsigned char)+0x74>
c001be2e:	0f b6 c9             	movzx  ecx,cl
c001be31:	0f b6 d3             	movzx  edx,bl
c001be34:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001be3c:	01 c2                	add    edx,eax
c001be3e:	eb 31                	jmp    c001be71 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be40:	83 fa 0d             	cmp    edx,0xd
c001be43:	77 13                	ja     c001be58 <IDE::read(unsigned char, unsigned char)+0x8c>
c001be45:	0f b6 c9             	movzx  ecx,cl
c001be48:	0f b6 d3             	movzx  edx,bl
c001be4b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001be52:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be56:	eb 19                	jmp    c001be71 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be58:	31 c0                	xor    eax,eax
c001be5a:	83 fa 15             	cmp    edx,0x15
c001be5d:	77 13                	ja     c001be72 <IDE::read(unsigned char, unsigned char)+0xa6>
c001be5f:	0f b6 c9             	movzx  ecx,cl
c001be62:	0f b6 d3             	movzx  edx,bl
c001be65:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001be6d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be71:	ec                   	in     al,dx
c001be72:	83 c4 1c             	add    esp,0x1c
c001be75:	5b                   	pop    ebx
c001be76:	5e                   	pop    esi
c001be77:	5f                   	pop    edi
c001be78:	5d                   	pop    ebp
c001be79:	c3                   	ret    

c001be7a <IDE::waitInterrupt(unsigned char)>:
c001be7a:	55                   	push   ebp
c001be7b:	57                   	push   edi
c001be7c:	56                   	push   esi
c001be7d:	53                   	push   ebx
c001be7e:	31 db                	xor    ebx,ebx
c001be80:	83 ec 0c             	sub    esp,0xc
c001be83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be87:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001be8c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001be94:	89 e8                	mov    eax,ebp
c001be96:	84 c0                	test   al,al
c001be98:	75 30                	jne    c001beca <IDE::waitInterrupt(unsigned char)+0x50>
c001be9a:	50                   	push   eax
c001be9b:	6a 0c                	push   0xc
c001be9d:	56                   	push   esi
c001be9e:	57                   	push   edi
c001be9f:	e8 28 ff ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001bea4:	83 c4 10             	add    esp,0x10
c001bea7:	a8 01                	test   al,0x1
c001bea9:	75 27                	jne    c001bed2 <IDE::waitInterrupt(unsigned char)+0x58>
c001beab:	f6 c3 04             	test   bl,0x4
c001beae:	75 12                	jne    c001bec2 <IDE::waitInterrupt(unsigned char)+0x48>
c001beb0:	83 fb 32             	cmp    ebx,0x32
c001beb3:	7e 0d                	jle    c001bec2 <IDE::waitInterrupt(unsigned char)+0x48>
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	6a 64                	push   0x64
c001beba:	e8 b1 a4 ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	83 fb 3c             	cmp    ebx,0x3c
c001bec5:	74 0b                	je     c001bed2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bec7:	43                   	inc    ebx
c001bec8:	eb c2                	jmp    c001be8c <IDE::waitInterrupt(unsigned char)+0x12>
c001beca:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bed2:	83 c4 0c             	add    esp,0xc
c001bed5:	89 e8                	mov    eax,ebp
c001bed7:	5b                   	pop    ebx
c001bed8:	5e                   	pop    esi
c001bed9:	5f                   	pop    edi
c001beda:	5d                   	pop    ebp
c001bedb:	c3                   	ret    

c001bedc <ideChannel0IRQHandler(regs*, void*)>:
c001bedc:	83 ec 10             	sub    esp,0x10
c001bedf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bee3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001beea:	6a 07                	push   0x7
c001beec:	6a 00                	push   0x0
c001beee:	50                   	push   eax
c001beef:	e8 d8 fe ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001bef4:	83 c4 1c             	add    esp,0x1c
c001bef7:	c3                   	ret    

c001bef8 <ideChannel1IRQHandler(regs*, void*)>:
c001bef8:	83 ec 10             	sub    esp,0x10
c001befb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001beff:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf06:	6a 07                	push   0x7
c001bf08:	6a 01                	push   0x1
c001bf0a:	50                   	push   eax
c001bf0b:	e8 bc fe ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001bf10:	83 c4 1c             	add    esp,0x1c
c001bf13:	c3                   	ret    

c001bf14 <IDE::enableIRQs(unsigned char, bool)>:
c001bf14:	57                   	push   edi
c001bf15:	b8 02 00 00 00       	mov    eax,0x2
c001bf1a:	56                   	push   esi
c001bf1b:	53                   	push   ebx
c001bf1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf24:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf29:	74 02                	je     c001bf2d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf2b:	31 c0                	xor    eax,eax
c001bf2d:	0f b6 db             	movzx  ebx,bl
c001bf30:	bf 04 00 00 00       	mov    edi,0x4
c001bf35:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf3c:	50                   	push   eax
c001bf3d:	6a 0c                	push   0xc
c001bf3f:	53                   	push   ebx
c001bf40:	56                   	push   esi
c001bf41:	e8 c6 fd ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	50                   	push   eax
c001bf4a:	6a 0c                	push   0xc
c001bf4c:	53                   	push   ebx
c001bf4d:	56                   	push   esi
c001bf4e:	e8 79 fe ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001bf53:	83 c4 10             	add    esp,0x10
c001bf56:	4f                   	dec    edi
c001bf57:	75 f0                	jne    c001bf49 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf59:	5b                   	pop    ebx
c001bf5a:	5e                   	pop    esi
c001bf5b:	5f                   	pop    edi
c001bf5c:	c3                   	ret    
c001bf5d:	90                   	nop

c001bf5e <IDE::open(int, int, void*)>:
c001bf5e:	55                   	push   ebp
c001bf5f:	57                   	push   edi
c001bf60:	56                   	push   esi
c001bf61:	53                   	push   ebx
c001bf62:	83 ec 1c             	sub    esp,0x1c
c001bf65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf69:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bf72:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bf7b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bf82:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bf89:	0f 85 de 02 00 00    	jne    c001c26d <IDE::open(int, int, void*)+0x30f>
c001bf8f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bf95:	88 04 24             	mov    BYTE PTR [esp],al
c001bf98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf9b:	83 e0 7f             	and    eax,0x7f
c001bf9e:	83 f8 05             	cmp    eax,0x5
c001bfa1:	74 05                	je     c001bfa8 <IDE::open(int, int, void*)+0x4a>
c001bfa3:	83 f8 0f             	cmp    eax,0xf
c001bfa6:	75 32                	jne    c001bfda <IDE::open(int, int, void*)+0x7c>
c001bfa8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bfae:	83 e0 fc             	and    eax,0xfffffffc
c001bfb1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bfb8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bfbe:	83 e0 fc             	and    eax,0xfffffffc
c001bfc1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bfc8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bfce:	83 e0 fc             	and    eax,0xfffffffc
c001bfd1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bfd8:	eb 14                	jmp    c001bfee <IDE::open(int, int, void*)+0x90>
c001bfda:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bfe4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bfee:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bff5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bffc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c000:	89 c6                	mov    esi,eax
c001c002:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c007:	c1 e6 10             	shl    esi,0x10
c001c00a:	89 e8                	mov    eax,ebp
c001c00c:	89 fa                	mov    edx,edi
c001c00e:	c1 e0 0b             	shl    eax,0xb
c001c011:	09 f0                	or     eax,esi
c001c013:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c01a:	c1 e6 08             	shl    esi,0x8
c001c01d:	09 c6                	or     esi,eax
c001c01f:	89 f0                	mov    eax,esi
c001c021:	0d 08 00 00 80       	or     eax,0x80000008
c001c026:	ef                   	out    dx,eax
c001c027:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c02c:	89 ca                	mov    edx,ecx
c001c02e:	ed                   	in     eax,dx
c001c02f:	c1 e8 10             	shr    eax,0x10
c001c032:	3d ff ff 00 00       	cmp    eax,0xffff
c001c037:	0f 84 f9 00 00 00    	je     c001c136 <IDE::open(int, int, void*)+0x1d8>
c001c03d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c043:	89 fa                	mov    edx,edi
c001c045:	89 f0                	mov    eax,esi
c001c047:	ef                   	out    dx,eax
c001c048:	b0 fe                	mov    al,0xfe
c001c04a:	89 ca                	mov    edx,ecx
c001c04c:	ee                   	out    dx,al
c001c04d:	89 f0                	mov    eax,esi
c001c04f:	89 fa                	mov    edx,edi
c001c051:	ef                   	out    dx,eax
c001c052:	89 ca                	mov    edx,ecx
c001c054:	ed                   	in     eax,dx
c001c055:	3c fe                	cmp    al,0xfe
c001c057:	0f 85 a9 00 00 00    	jne    c001c106 <IDE::open(int, int, void*)+0x1a8>
c001c05d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c063:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c06a:	74 33                	je     c001c09f <IDE::open(int, int, void*)+0x141>
c001c06c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c072:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c076:	40                   	inc    eax
c001c077:	83 ec 0c             	sub    esp,0xc
c001c07a:	0f b6 c0             	movzx  eax,al
c001c07d:	50                   	push   eax
c001c07e:	55                   	push   ebp
c001c07f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c083:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c089:	51                   	push   ecx
c001c08a:	e8 45 38 ff ff       	call   c000f8d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c08f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c094:	83 c4 1c             	add    esp,0x1c
c001c097:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c09d:	eb 0a                	jmp    c001c0a9 <IDE::open(int, int, void*)+0x14b>
c001c09f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0a9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0b0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0b7:	c1 e1 10             	shl    ecx,0x10
c001c0ba:	c1 e0 08             	shl    eax,0x8
c001c0bd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c0c2:	09 c1                	or     ecx,eax
c001c0c4:	89 fa                	mov    edx,edi
c001c0c6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c0cd:	c1 e0 0b             	shl    eax,0xb
c001c0d0:	09 c1                	or     ecx,eax
c001c0d2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c0d8:	89 c8                	mov    eax,ecx
c001c0da:	ef                   	out    dx,eax
c001c0db:	be fc 0c 00 00       	mov    esi,0xcfc
c001c0e0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c0e6:	89 f2                	mov    edx,esi
c001c0e8:	ee                   	out    dx,al
c001c0e9:	89 c8                	mov    eax,ecx
c001c0eb:	89 fa                	mov    edx,edi
c001c0ed:	ef                   	out    dx,eax
c001c0ee:	89 f2                	mov    edx,esi
c001c0f0:	ed                   	in     eax,dx
c001c0f1:	0f b6 c0             	movzx  eax,al
c001c0f4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c0fa:	74 4a                	je     c001c146 <IDE::open(int, int, void*)+0x1e8>
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	68 28 31 02 c0       	push   0xc0023128
c001c104:	eb 38                	jmp    c001c13e <IDE::open(int, int, void*)+0x1e0>
c001c106:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c10f:	75 1b                	jne    c001c12c <IDE::open(int, int, void*)+0x1ce>
c001c111:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c115:	3d 80 00 00 00       	cmp    eax,0x80
c001c11a:	74 07                	je     c001c123 <IDE::open(int, int, void*)+0x1c5>
c001c11c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c121:	75 09                	jne    c001c12c <IDE::open(int, int, void*)+0x1ce>
c001c123:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c12a:	eb 1a                	jmp    c001c146 <IDE::open(int, int, void*)+0x1e8>
c001c12c:	83 ec 0c             	sub    esp,0xc
c001c12f:	68 30 31 02 c0       	push   0xc0023130
c001c134:	eb 08                	jmp    c001c13e <IDE::open(int, int, void*)+0x1e0>
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	68 61 31 02 c0       	push   0xc0023161
c001c13e:	e8 78 54 ff ff       	call   c00115bb <KePanic(char const*)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c14d:	74 1a                	je     c001c169 <IDE::open(int, int, void*)+0x20b>
c001c14f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c155:	83 e0 fc             	and    eax,0xfffffffc
c001c158:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c15f:	83 c0 08             	add    eax,0x8
c001c162:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c169:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c16f:	89 c2                	mov    edx,eax
c001c171:	83 e2 0f             	and    edx,0xf
c001c174:	83 fa 08             	cmp    edx,0x8
c001c177:	75 0a                	jne    c001c183 <IDE::open(int, int, void*)+0x225>
c001c179:	83 e8 02             	sub    eax,0x2
c001c17c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c183:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c189:	89 c2                	mov    edx,eax
c001c18b:	83 e2 0f             	and    edx,0xf
c001c18e:	83 fa 08             	cmp    edx,0x8
c001c191:	75 0a                	jne    c001c19d <IDE::open(int, int, void*)+0x23f>
c001c193:	83 e8 02             	sub    eax,0x2
c001c196:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c19d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1a4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1ab:	89 d0                	mov    eax,edx
c001c1ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1b0:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1b3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1b7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c1bb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1bf:	83 e1 3f             	and    ecx,0x3f
c001c1c2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1c6:	89 f9                	mov    ecx,edi
c001c1c8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c1cf:	0f b6 c9             	movzx  ecx,cl
c001c1d2:	8d 78 02             	lea    edi,[eax+0x2]
c001c1d5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c1d8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c1dc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c1e0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c1e4:	83 e2 3f             	and    edx,0x3f
c001c1e7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1eb:	89 f9                	mov    ecx,edi
c001c1ed:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c1f3:	0f b6 d1             	movzx  edx,cl
c001c1f6:	8d 78 03             	lea    edi,[eax+0x3]
c001c1f9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1fc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c200:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c204:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c208:	83 e1 3f             	and    ecx,0x3f
c001c20b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c20f:	89 f9                	mov    ecx,edi
c001c211:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c217:	0f b6 c9             	movzx  ecx,cl
c001c21a:	8d 78 04             	lea    edi,[eax+0x4]
c001c21d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c220:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c224:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c228:	89 fa                	mov    edx,edi
c001c22a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c230:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c234:	83 e2 3f             	and    edx,0x3f
c001c237:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c23b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c242:	66 85 f6             	test   si,si
c001c245:	74 65                	je     c001c2ac <IDE::open(int, int, void*)+0x34e>
c001c247:	89 f9                	mov    ecx,edi
c001c249:	83 c0 05             	add    eax,0x5
c001c24c:	0f b6 d1             	movzx  edx,cl
c001c24f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c252:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c256:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c25a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c260:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c264:	83 e0 3f             	and    eax,0x3f
c001c267:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c26b:	eb 3f                	jmp    c001c2ac <IDE::open(int, int, void*)+0x34e>
c001c26d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c273:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c27a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c281:	05 06 02 00 00       	add    eax,0x206
c001c286:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c28d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c294:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c29b:	05 06 02 00 00       	add    eax,0x206
c001c2a0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2a7:	e9 bd fe ff ff       	jmp    c001c169 <IDE::open(int, int, void*)+0x20b>
c001c2ac:	50                   	push   eax
c001c2ad:	50                   	push   eax
c001c2ae:	6a 00                	push   0x0
c001c2b0:	53                   	push   ebx
c001c2b1:	e8 30 fa ff ff       	call   c001bce6 <IDE::prepareInterrupt(unsigned char)>
c001c2b6:	5a                   	pop    edx
c001c2b7:	59                   	pop    ecx
c001c2b8:	6a 01                	push   0x1
c001c2ba:	53                   	push   ebx
c001c2bb:	e8 26 fa ff ff       	call   c001bce6 <IDE::prepareInterrupt(unsigned char)>
c001c2c0:	83 c4 0c             	add    esp,0xc
c001c2c3:	6a 00                	push   0x0
c001c2c5:	6a 00                	push   0x0
c001c2c7:	53                   	push   ebx
c001c2c8:	e8 47 fc ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001c2cd:	83 c4 0c             	add    esp,0xc
c001c2d0:	6a 00                	push   0x0
c001c2d2:	6a 01                	push   0x1
c001c2d4:	53                   	push   ebx
c001c2d5:	e8 3a fc ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001c2da:	83 c4 10             	add    esp,0x10
c001c2dd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c2e4:	74 34                	je     c001c31a <IDE::open(int, int, void*)+0x3bc>
c001c2e6:	83 ec 0c             	sub    esp,0xc
c001c2e9:	53                   	push   ebx
c001c2ea:	6a 01                	push   0x1
c001c2ec:	68 dc be 01 c0       	push   0xc001bedc
c001c2f1:	6a 0e                	push   0xe
c001c2f3:	53                   	push   ebx
c001c2f4:	e8 15 06 ff ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2f9:	83 c4 14             	add    esp,0x14
c001c2fc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c302:	53                   	push   ebx
c001c303:	6a 01                	push   0x1
c001c305:	68 f8 be 01 c0       	push   0xc001bef8
c001c30a:	6a 0f                	push   0xf
c001c30c:	53                   	push   ebx
c001c30d:	e8 fc 05 ff ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c312:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c318:	eb 38                	jmp    c001c352 <IDE::open(int, int, void*)+0x3f4>
c001c31a:	83 ec 0c             	sub    esp,0xc
c001c31d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c327:	53                   	push   ebx
c001c328:	6a 00                	push   0x0
c001c32a:	68 dc be 01 c0       	push   0xc001bedc
c001c32f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c335:	53                   	push   ebx
c001c336:	e8 d3 05 ff ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c33b:	83 c4 14             	add    esp,0x14
c001c33e:	53                   	push   ebx
c001c33f:	6a 00                	push   0x0
c001c341:	68 f8 be 01 c0       	push   0xc001bef8
c001c346:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c34c:	53                   	push   ebx
c001c34d:	e8 bc 05 ff ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c352:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c354:	83 c4 20             	add    esp,0x20
c001c357:	83 ec 0c             	sub    esp,0xc
c001c35a:	53                   	push   ebx
c001c35b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c35e:	83 c4 0c             	add    esp,0xc
c001c361:	6a 07                	push   0x7
c001c363:	6a 00                	push   0x0
c001c365:	53                   	push   ebx
c001c366:	e8 61 fa ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c36b:	83 c4 0c             	add    esp,0xc
c001c36e:	6a 07                	push   0x7
c001c370:	6a 01                	push   0x1
c001c372:	53                   	push   ebx
c001c373:	e8 54 fa ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c378:	83 c4 0c             	add    esp,0xc
c001c37b:	6a 01                	push   0x1
c001c37d:	6a 00                	push   0x0
c001c37f:	53                   	push   ebx
c001c380:	e8 8f fb ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001c385:	83 c4 0c             	add    esp,0xc
c001c388:	6a 01                	push   0x1
c001c38a:	6a 01                	push   0x1
c001c38c:	53                   	push   ebx
c001c38d:	e8 82 fb ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001c392:	83 c4 2c             	add    esp,0x2c
c001c395:	31 c0                	xor    eax,eax
c001c397:	5b                   	pop    ebx
c001c398:	5e                   	pop    esi
c001c399:	5f                   	pop    edi
c001c39a:	5d                   	pop    ebp
c001c39b:	c3                   	ret    

c001c39c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c39c:	55                   	push   ebp
c001c39d:	57                   	push   edi
c001c39e:	56                   	push   esi
c001c39f:	53                   	push   ebx
c001c3a0:	83 ec 1c             	sub    esp,0x1c
c001c3a3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3ab:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3b2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3b6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c3ba:	3c 03                	cmp    al,0x3
c001c3bc:	77 5a                	ja     c001c418 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c3be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c3c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c3c6:	0f b6 db             	movzx  ebx,bl
c001c3c9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c3cc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3d1:	0c 80                	or     al,0x80
c001c3d3:	50                   	push   eax
c001c3d4:	6a 0c                	push   0xc
c001c3d6:	53                   	push   ebx
c001c3d7:	56                   	push   esi
c001c3d8:	e8 2f f9 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3dd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c3e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c3e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3ea:	0f b6 d2             	movzx  edx,dl
c001c3ed:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c3f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c3f3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3f8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c3fc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c400:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c404:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c40c:	83 c4 2c             	add    esp,0x2c
c001c40f:	5b                   	pop    ebx
c001c410:	5e                   	pop    esi
c001c411:	5f                   	pop    edi
c001c412:	5d                   	pop    ebp
c001c413:	e9 f4 f8 ff ff       	jmp    c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c418:	0f b6 c2             	movzx  eax,dl
c001c41b:	83 f8 07             	cmp    eax,0x7
c001c41e:	77 12                	ja     c001c432 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c420:	0f b6 c2             	movzx  eax,dl
c001c423:	0f b6 db             	movzx  ebx,bl
c001c426:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c42e:	01 c2                	add    edx,eax
c001c430:	eb 2f                	jmp    c001c461 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c432:	83 f8 0d             	cmp    eax,0xd
c001c435:	77 13                	ja     c001c44a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c437:	0f b6 db             	movzx  ebx,bl
c001c43a:	0f b6 d2             	movzx  edx,dl
c001c43d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c444:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c448:	eb 17                	jmp    c001c461 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c44a:	83 f8 15             	cmp    eax,0x15
c001c44d:	77 14                	ja     c001c463 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c44f:	0f b6 db             	movzx  ebx,bl
c001c452:	0f b6 d2             	movzx  edx,dl
c001c455:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c45d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c461:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c463:	83 c4 1c             	add    esp,0x1c
c001c466:	5b                   	pop    ebx
c001c467:	5e                   	pop    esi
c001c468:	5f                   	pop    edi
c001c469:	5d                   	pop    ebp
c001c46a:	c3                   	ret    
c001c46b:	90                   	nop

c001c46c <IDE::detect()>:
c001c46c:	55                   	push   ebp
c001c46d:	57                   	push   edi
c001c46e:	56                   	push   esi
c001c46f:	53                   	push   ebx
c001c470:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c476:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c47d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c484:	0f 85 a4 02 00 00    	jne    c001c72e <IDE::detect()+0x2c2>
c001c48a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c491:	31 f6                	xor    esi,esi
c001c493:	31 ed                	xor    ebp,ebp
c001c495:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c49d:	89 e8                	mov    eax,ebp
c001c49f:	c1 e0 06             	shl    eax,0x6
c001c4a2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4aa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b6:	c1 e0 04             	shl    eax,0x4
c001c4b9:	83 c8 a0             	or     eax,0xffffffa0
c001c4bc:	0f b6 c0             	movzx  eax,al
c001c4bf:	50                   	push   eax
c001c4c0:	6a 06                	push   0x6
c001c4c2:	56                   	push   esi
c001c4c3:	53                   	push   ebx
c001c4c4:	e8 43 f8 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4c9:	83 c4 0c             	add    esp,0xc
c001c4cc:	6a 0c                	push   0xc
c001c4ce:	56                   	push   esi
c001c4cf:	53                   	push   ebx
c001c4d0:	e8 f7 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c4d5:	83 c4 0c             	add    esp,0xc
c001c4d8:	6a 0c                	push   0xc
c001c4da:	56                   	push   esi
c001c4db:	53                   	push   ebx
c001c4dc:	e8 eb f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c4e1:	83 c4 0c             	add    esp,0xc
c001c4e4:	6a 0c                	push   0xc
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	e8 df f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c4ed:	83 c4 0c             	add    esp,0xc
c001c4f0:	6a 0c                	push   0xc
c001c4f2:	56                   	push   esi
c001c4f3:	53                   	push   ebx
c001c4f4:	e8 d3 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c4f9:	68 ec 00 00 00       	push   0xec
c001c4fe:	6a 07                	push   0x7
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	e8 05 f8 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c507:	83 c4 1c             	add    esp,0x1c
c001c50a:	6a 0c                	push   0xc
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	e8 b9 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c513:	83 c4 0c             	add    esp,0xc
c001c516:	6a 0c                	push   0xc
c001c518:	56                   	push   esi
c001c519:	53                   	push   ebx
c001c51a:	e8 ad f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c51f:	83 c4 0c             	add    esp,0xc
c001c522:	6a 0c                	push   0xc
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	e8 a1 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c52b:	83 c4 0c             	add    esp,0xc
c001c52e:	6a 0c                	push   0xc
c001c530:	56                   	push   esi
c001c531:	53                   	push   ebx
c001c532:	e8 95 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c537:	83 c4 0c             	add    esp,0xc
c001c53a:	6a 0c                	push   0xc
c001c53c:	56                   	push   esi
c001c53d:	53                   	push   ebx
c001c53e:	e8 89 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c543:	83 c4 10             	add    esp,0x10
c001c546:	84 c0                	test   al,al
c001c548:	0f 84 60 01 00 00    	je     c001c6ae <IDE::detect()+0x242>
c001c54e:	31 ff                	xor    edi,edi
c001c550:	50                   	push   eax
c001c551:	6a 0c                	push   0xc
c001c553:	56                   	push   esi
c001c554:	53                   	push   ebx
c001c555:	e8 72 f8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	a8 01                	test   al,0x1
c001c55f:	0f 85 6a 01 00 00    	jne    c001c6cf <IDE::detect()+0x263>
c001c565:	a8 80                	test   al,0x80
c001c567:	75 04                	jne    c001c56d <IDE::detect()+0x101>
c001c569:	a8 08                	test   al,0x8
c001c56b:	75 23                	jne    c001c590 <IDE::detect()+0x124>
c001c56d:	47                   	inc    edi
c001c56e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c574:	7e da                	jle    c001c550 <IDE::detect()+0xe4>
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	6a 32                	push   0x32
c001c57b:	e8 f0 9d ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001c580:	83 c4 10             	add    esp,0x10
c001c583:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c589:	75 c5                	jne    c001c550 <IDE::detect()+0xe4>
c001c58b:	e9 3f 01 00 00       	jmp    c001c6cf <IDE::detect()+0x263>
c001c590:	31 c9                	xor    ecx,ecx
c001c592:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c596:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c59a:	83 ec 0c             	sub    esp,0xc
c001c59d:	68 80 00 00 00       	push   0x80
c001c5a2:	57                   	push   edi
c001c5a3:	6a 00                	push   0x0
c001c5a5:	56                   	push   esi
c001c5a6:	53                   	push   ebx
c001c5a7:	e8 f0 fd ff ff       	call   c001c39c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5ac:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5b1:	89 e8                	mov    eax,ebp
c001c5b3:	89 d1                	mov    ecx,edx
c001c5b5:	c1 e0 06             	shl    eax,0x6
c001c5b8:	01 d8                	add    eax,ebx
c001c5ba:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c5c1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c5c8:	89 f2                	mov    edx,esi
c001c5ca:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c5d0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c5d4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c5da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5de:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c5e5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c5ed:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c5f4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c5fc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c602:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c609:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c60f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c613:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c617:	83 c4 20             	add    esp,0x20
c001c61a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c61d:	83 c0 02             	add    eax,0x2
c001c620:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c626:	83 c7 02             	add    edi,0x2
c001c629:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c62c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c632:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c636:	75 e2                	jne    c001c61a <IDE::detect()+0x1ae>
c001c638:	89 e8                	mov    eax,ebp
c001c63a:	c1 e0 06             	shl    eax,0x6
c001c63d:	01 d8                	add    eax,ebx
c001c63f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c646:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c64d:	c1 ea 09             	shr    edx,0x9
c001c650:	83 e2 01             	and    edx,0x1
c001c653:	80 e1 01             	and    cl,0x1
c001c656:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c65c:	75 22                	jne    c001c680 <IDE::detect()+0x214>
c001c65e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c665:	74 46                	je     c001c6ad <IDE::detect()+0x241>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	68 7c 01 00 00       	push   0x17c
c001c66f:	e8 42 b4 fe ff       	call   c0007ab6 <malloc>
c001c674:	89 c7                	mov    edi,eax
c001c676:	89 04 24             	mov    DWORD PTR [esp],eax
c001c679:	e8 1a 05 00 00       	call   c001cb98 <ATA::ATA()>
c001c67e:	eb 17                	jmp    c001c697 <IDE::detect()+0x22b>
c001c680:	83 ec 0c             	sub    esp,0xc
c001c683:	68 84 01 00 00       	push   0x184
c001c688:	e8 29 b4 fe ff       	call   c0007ab6 <malloc>
c001c68d:	89 c7                	mov    edi,eax
c001c68f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c692:	e8 45 0e 00 00       	call   c001d4dc <ATAPI::ATAPI()>
c001c697:	5a                   	pop    edx
c001c698:	59                   	pop    ecx
c001c699:	57                   	push   edi
c001c69a:	53                   	push   ebx
c001c69b:	e8 c2 02 ff ff       	call   c000c962 <Device::addChild(Device*)>
c001c6a0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c6a2:	53                   	push   ebx
c001c6a3:	55                   	push   ebp
c001c6a4:	6a 00                	push   0x0
c001c6a6:	57                   	push   edi
c001c6a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6aa:	83 c4 20             	add    esp,0x20
c001c6ad:	45                   	inc    ebp
c001c6ae:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6b3:	74 0d                	je     c001c6c2 <IDE::detect()+0x256>
c001c6b5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c6bd:	e9 db fd ff ff       	jmp    c001c49d <IDE::detect()+0x31>
c001c6c2:	4e                   	dec    esi
c001c6c3:	74 69                	je     c001c72e <IDE::detect()+0x2c2>
c001c6c5:	be 01 00 00 00       	mov    esi,0x1
c001c6ca:	e9 c6 fd ff ff       	jmp    c001c495 <IDE::detect()+0x29>
c001c6cf:	50                   	push   eax
c001c6d0:	6a 04                	push   0x4
c001c6d2:	56                   	push   esi
c001c6d3:	53                   	push   ebx
c001c6d4:	e8 f3 f6 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c6d9:	83 c4 0c             	add    esp,0xc
c001c6dc:	89 c7                	mov    edi,eax
c001c6de:	6a 05                	push   0x5
c001c6e0:	56                   	push   esi
c001c6e1:	53                   	push   ebx
c001c6e2:	e8 e5 f6 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c6e7:	83 c4 10             	add    esp,0x10
c001c6ea:	89 f9                	mov    ecx,edi
c001c6ec:	0f b6 c0             	movzx  eax,al
c001c6ef:	0f b6 f9             	movzx  edi,cl
c001c6f2:	83 ff 14             	cmp    edi,0x14
c001c6f5:	75 07                	jne    c001c6fe <IDE::detect()+0x292>
c001c6f7:	3d eb 00 00 00       	cmp    eax,0xeb
c001c6fc:	eb 0a                	jmp    c001c708 <IDE::detect()+0x29c>
c001c6fe:	3d 96 00 00 00       	cmp    eax,0x96
c001c703:	75 a9                	jne    c001c6ae <IDE::detect()+0x242>
c001c705:	83 ff 69             	cmp    edi,0x69
c001c708:	75 a4                	jne    c001c6ae <IDE::detect()+0x242>
c001c70a:	68 a1 00 00 00       	push   0xa1
c001c70f:	6a 07                	push   0x7
c001c711:	56                   	push   esi
c001c712:	53                   	push   ebx
c001c713:	e8 f4 f5 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c718:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c71f:	e8 4c 9c ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	b1 01                	mov    cl,0x1
c001c729:	e9 64 fe ff ff       	jmp    c001c592 <IDE::detect()+0x126>
c001c72e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c734:	5b                   	pop    ebx
c001c735:	5e                   	pop    esi
c001c736:	5f                   	pop    edi
c001c737:	5d                   	pop    ebp
c001c738:	c3                   	ret    
c001c739:	90                   	nop

c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c73a:	55                   	push   ebp
c001c73b:	57                   	push   edi
c001c73c:	56                   	push   esi
c001c73d:	53                   	push   ebx
c001c73e:	83 ec 1c             	sub    esp,0x1c
c001c741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c745:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c749:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c74d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c751:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c755:	88 c3                	mov    bl,al
c001c757:	25 ff 00 00 00       	and    eax,0xff
c001c75c:	0f 84 88 00 00 00    	je     c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c762:	83 ec 0c             	sub    esp,0xc
c001c765:	89 c7                	mov    edi,eax
c001c767:	68 8b 31 02 c0       	push   0xc002318b
c001c76c:	e8 d4 e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	83 ff 01             	cmp    edi,0x1
c001c777:	74 6b                	je     c001c7e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c779:	83 ff 02             	cmp    edi,0x2
c001c77c:	75 58                	jne    c001c7d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c77e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c783:	01 ff                	add    edi,edi
c001c785:	50                   	push   eax
c001c786:	09 fe                	or     esi,edi
c001c788:	6a 01                	push   0x1
c001c78a:	89 f0                	mov    eax,esi
c001c78c:	0f b6 f0             	movzx  esi,al
c001c78f:	c1 e6 06             	shl    esi,0x6
c001c792:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c79a:	50                   	push   eax
c001c79b:	55                   	push   ebp
c001c79c:	e8 2b f6 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c7a1:	83 c4 10             	add    esp,0x10
c001c7a4:	a8 01                	test   al,0x1
c001c7a6:	74 02                	je     c001c7aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7a8:	b3 07                	mov    bl,0x7
c001c7aa:	a8 02                	test   al,0x2
c001c7ac:	74 02                	je     c001c7b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7ae:	b3 03                	mov    bl,0x3
c001c7b0:	a8 04                	test   al,0x4
c001c7b2:	74 02                	je     c001c7b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7b4:	b3 14                	mov    bl,0x14
c001c7b6:	a8 08                	test   al,0x8
c001c7b8:	74 02                	je     c001c7bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c7ba:	b3 03                	mov    bl,0x3
c001c7bc:	a8 10                	test   al,0x10
c001c7be:	74 02                	je     c001c7c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c7c0:	b3 15                	mov    bl,0x15
c001c7c2:	a8 20                	test   al,0x20
c001c7c4:	74 02                	je     c001c7c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c7c6:	b3 03                	mov    bl,0x3
c001c7c8:	a8 40                	test   al,0x40
c001c7ca:	74 02                	je     c001c7ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c7cc:	b3 16                	mov    bl,0x16
c001c7ce:	a8 80                	test   al,0x80
c001c7d0:	74 18                	je     c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d2:	b3 0d                	mov    bl,0xd
c001c7d4:	eb 14                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7d6:	83 ff 03             	cmp    edi,0x3
c001c7d9:	74 0d                	je     c001c7e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c7db:	83 ff 04             	cmp    edi,0x4
c001c7de:	75 0a                	jne    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e0:	b3 08                	mov    bl,0x8
c001c7e2:	eb 06                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e4:	b3 13                	mov    bl,0x13
c001c7e6:	eb 02                	jmp    c001c7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7e8:	b3 17                	mov    bl,0x17
c001c7ea:	83 c4 1c             	add    esp,0x1c
c001c7ed:	88 d8                	mov    al,bl
c001c7ef:	5b                   	pop    ebx
c001c7f0:	5e                   	pop    esi
c001c7f1:	5f                   	pop    edi
c001c7f2:	5d                   	pop    ebp
c001c7f3:	c3                   	ret    

c001c7f4 <IDE::polling(unsigned char, unsigned int)>:
c001c7f4:	57                   	push   edi
c001c7f5:	56                   	push   esi
c001c7f6:	53                   	push   ebx
c001c7f7:	bb 04 00 00 00       	mov    ebx,0x4
c001c7fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c800:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c805:	52                   	push   edx
c001c806:	6a 0c                	push   0xc
c001c808:	56                   	push   esi
c001c809:	57                   	push   edi
c001c80a:	e8 bd f5 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c80f:	83 c4 10             	add    esp,0x10
c001c812:	4b                   	dec    ebx
c001c813:	75 f0                	jne    c001c805 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c815:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c81a:	50                   	push   eax
c001c81b:	6a 0c                	push   0xc
c001c81d:	56                   	push   esi
c001c81e:	57                   	push   edi
c001c81f:	e8 a8 f5 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001c824:	83 c4 10             	add    esp,0x10
c001c827:	a8 01                	test   al,0x1
c001c829:	75 17                	jne    c001c842 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c82b:	a8 20                	test   al,0x20
c001c82d:	75 0f                	jne    c001c83e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c82f:	4b                   	dec    ebx
c001c830:	74 10                	je     c001c842 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c832:	a8 80                	test   al,0x80
c001c834:	75 e4                	jne    c001c81a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c836:	a8 08                	test   al,0x8
c001c838:	74 e0                	je     c001c81a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c83a:	31 c0                	xor    eax,eax
c001c83c:	eb 06                	jmp    c001c844 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c83e:	b0 01                	mov    al,0x1
c001c840:	eb 02                	jmp    c001c844 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c842:	b0 02                	mov    al,0x2
c001c844:	5b                   	pop    ebx
c001c845:	5e                   	pop    esi
c001c846:	5f                   	pop    edi
c001c847:	c3                   	ret    

c001c848 <SATABus::close(int, int, void*)>:
c001c848:	31 c0                	xor    eax,eax
c001c84a:	c3                   	ret    
c001c84b:	90                   	nop

c001c84c <SATABus::detect()>:
c001c84c:	c3                   	ret    
c001c84d:	90                   	nop

c001c84e <SATABus::SATABus()>:
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c855:	83 ec 08             	sub    esp,0x8
c001c858:	68 c4 31 02 c0       	push   0xc00231c4
c001c85d:	50                   	push   eax
c001c85e:	e8 41 04 ff ff       	call   c000cca4 <HardDiskController::HardDiskController(char const*)>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c001c86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86f:	89 10                	mov    DWORD PTR [eax],edx
c001c871:	83 ec 0c             	sub    esp,0xc
c001c874:	6a 50                	push   0x50
c001c876:	e8 13 b6 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	89 c2                	mov    edx,eax
c001c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c884:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	6a 50                	push   0x50
c001c88f:	e8 79 cd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c894:	83 c4 10             	add    esp,0x10
c001c897:	89 c2                	mov    edx,eax
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8a3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8ac:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8b6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	6a 03                	push   0x3
c001c8c1:	6a 50                	push   0x50
c001c8c3:	51                   	push   ecx
c001c8c4:	52                   	push   edx
c001c8c5:	50                   	push   eax
c001c8c6:	e8 4f d6 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c8cb:	83 c4 20             	add    esp,0x20
c001c8ce:	90                   	nop
c001c8cf:	83 c4 0c             	add    esp,0xc
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c8d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8d8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c8db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c8de:	09 c2                	or     edx,eax
c001c8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8ec:	31 c0                	xor    eax,eax
c001c8ee:	c1 e9 08             	shr    ecx,0x8
c001c8f1:	83 e1 0f             	and    ecx,0xf
c001c8f4:	39 c8                	cmp    eax,ecx
c001c8f6:	74 0a                	je     c001c902 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c8f8:	f6 c2 01             	test   dl,0x1
c001c8fb:	74 08                	je     c001c905 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c8fd:	d1 ea                	shr    edx,1
c001c8ff:	40                   	inc    eax
c001c900:	eb f2                	jmp    c001c8f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c902:	83 c8 ff             	or     eax,0xffffffff
c001c905:	c3                   	ret    

c001c906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c906:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c90a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c90d:	89 c2                	mov    edx,eax
c001c90f:	c1 ea 08             	shr    edx,0x8
c001c912:	83 e2 0f             	and    edx,0xf
c001c915:	4a                   	dec    edx
c001c916:	75 32                	jne    c001c94a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c918:	83 e0 0f             	and    eax,0xf
c001c91b:	83 f8 03             	cmp    eax,0x3
c001c91e:	75 2a                	jne    c001c94a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c920:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c923:	b8 02 00 00 00       	mov    eax,0x2
c001c928:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c92e:	74 1c                	je     c001c94c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c930:	b8 04 00 00 00       	mov    eax,0x4
c001c935:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c93b:	74 0f                	je     c001c94c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c93d:	31 c0                	xor    eax,eax
c001c93f:	83 fa 03             	cmp    edx,0x3
c001c942:	0f 94 c0             	sete   al
c001c945:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c949:	c3                   	ret    
c001c94a:	31 c0                	xor    eax,eax
c001c94c:	c3                   	ret    
c001c94d:	90                   	nop

c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c94e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c952:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c955:	0f ba e2 0f          	bt     edx,0xf
c001c959:	72 f7                	jb     c001c952 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c95b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c95e:	83 ca 10             	or     edx,0x10
c001c961:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c964:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c967:	83 ca 01             	or     edx,0x1
c001c96a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c96d:	c3                   	ret    

c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c972:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c975:	83 e2 fe             	and    edx,0xfffffffe
c001c978:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c97b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c97e:	83 e2 ef             	and    edx,0xffffffef
c001c981:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c984:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c987:	0f ba e2 0e          	bt     edx,0xe
c001c98b:	72 f7                	jb     c001c984 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c98d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c990:	0f ba e2 0f          	bt     edx,0xf
c001c994:	72 ee                	jb     c001c984 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c996:	c3                   	ret    
c001c997:	90                   	nop

c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c998:	55                   	push   ebp
c001c999:	57                   	push   edi
c001c99a:	56                   	push   esi
c001c99b:	53                   	push   ebx
c001c99c:	83 ec 1c             	sub    esp,0x1c
c001c99f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9a7:	53                   	push   ebx
c001c9a8:	56                   	push   esi
c001c9a9:	e8 c0 ff ff ff       	call   c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9ae:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9b2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	c1 e5 0a             	shl    ebp,0xa
c001c9be:	01 e8                	add    eax,ebp
c001c9c0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9c4:	68 00 04 00 00       	push   0x400
c001c9c9:	6a 00                	push   0x0
c001c9cb:	50                   	push   eax
c001c9cc:	e8 1f 3b fe ff       	call   c00004f0 <memset>
c001c9d1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c9d7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c9db:	01 e8                	add    eax,ebp
c001c9dd:	83 c4 1c             	add    esp,0x1c
c001c9e0:	89 03                	mov    DWORD PTR [ebx],eax
c001c9e2:	c1 e2 08             	shl    edx,0x8
c001c9e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9ec:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c9f2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c9f8:	01 f8                	add    eax,edi
c001c9fa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca00:	68 00 01 00 00       	push   0x100
c001ca05:	6a 00                	push   0x0
c001ca07:	50                   	push   eax
c001ca08:	e8 e3 3a fe ff       	call   c00004f0 <memset>
c001ca0d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca13:	01 fa                	add    edx,edi
c001ca15:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca19:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca1c:	c1 e7 0d             	shl    edi,0xd
c001ca1f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca26:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ca2c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ca32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca36:	31 ff                	xor    edi,edi
c001ca38:	83 c4 10             	add    esp,0x10
c001ca3b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ca41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca45:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ca4b:	83 c5 20             	add    ebp,0x20
c001ca4e:	01 f8                	add    eax,edi
c001ca50:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ca53:	52                   	push   edx
c001ca54:	68 00 01 00 00       	push   0x100
c001ca59:	6a 00                	push   0x0
c001ca5b:	50                   	push   eax
c001ca5c:	e8 8f 3a fe ff       	call   c00004f0 <memset>
c001ca61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ca6e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ca75:	01 f8                	add    eax,edi
c001ca77:	81 c7 00 01 00 00    	add    edi,0x100
c001ca7d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ca80:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ca86:	75 b3                	jne    c001ca3b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ca88:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca8f:	50                   	push   eax
c001ca90:	50                   	push   eax
c001ca91:	53                   	push   ebx
c001ca92:	56                   	push   esi
c001ca93:	e8 b6 fe ff ff       	call   c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ca98:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca9f:	83 c4 2c             	add    esp,0x2c
c001caa2:	5b                   	pop    ebx
c001caa3:	5e                   	pop    esi
c001caa4:	5f                   	pop    edi
c001caa5:	5d                   	pop    ebp
c001caa6:	c3                   	ret    
c001caa7:	90                   	nop

c001caa8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001caa8:	55                   	push   ebp
c001caa9:	57                   	push   edi
c001caaa:	56                   	push   esi
c001caab:	53                   	push   ebx
c001caac:	31 db                	xor    ebx,ebx
c001caae:	83 ec 0c             	sub    esp,0xc
c001cab1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cab5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cab9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cabc:	f7 c7 01 00 00 00    	test   edi,0x1
c001cac2:	74 7a                	je     c001cb3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cac4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cac8:	89 d8                	mov    eax,ebx
c001caca:	c1 e0 07             	shl    eax,0x7
c001cacd:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cad4:	55                   	push   ebp
c001cad5:	56                   	push   esi
c001cad6:	e8 2b fe ff ff       	call   c001c906 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cadb:	5a                   	pop    edx
c001cadc:	83 f8 01             	cmp    eax,0x1
c001cadf:	59                   	pop    ecx
c001cae0:	75 21                	jne    c001cb03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cae2:	50                   	push   eax
c001cae3:	53                   	push   ebx
c001cae4:	55                   	push   ebp
c001cae5:	56                   	push   esi
c001cae6:	e8 ad fe ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001caeb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001caf2:	e8 bf af fe ff       	call   c0007ab6 <malloc>
c001caf7:	89 c5                	mov    ebp,eax
c001caf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001cafc:	e8 99 10 00 00       	call   c001db9a <SATA::SATA()>
c001cb01:	eb 24                	jmp    c001cb27 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb03:	83 f8 04             	cmp    eax,0x4
c001cb06:	75 36                	jne    c001cb3e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb08:	51                   	push   ecx
c001cb09:	53                   	push   ebx
c001cb0a:	55                   	push   ebp
c001cb0b:	56                   	push   esi
c001cb0c:	e8 87 fe ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb11:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb18:	e8 99 af fe ff       	call   c0007ab6 <malloc>
c001cb1d:	89 c5                	mov    ebp,eax
c001cb1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb22:	e8 d5 17 00 00       	call   c001e2fc <SATAPI::SATAPI()>
c001cb27:	58                   	pop    eax
c001cb28:	5a                   	pop    edx
c001cb29:	55                   	push   ebp
c001cb2a:	56                   	push   esi
c001cb2b:	e8 32 fe fe ff       	call   c000c962 <Device::addChild(Device*)>
c001cb30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb33:	56                   	push   esi
c001cb34:	6a 00                	push   0x0
c001cb36:	53                   	push   ebx
c001cb37:	55                   	push   ebp
c001cb38:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb3b:	83 c4 20             	add    esp,0x20
c001cb3e:	d1 ef                	shr    edi,1
c001cb40:	43                   	inc    ebx
c001cb41:	83 fb 20             	cmp    ebx,0x20
c001cb44:	0f 85 72 ff ff ff    	jne    c001cabc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb4a:	83 c4 0c             	add    esp,0xc
c001cb4d:	5b                   	pop    ebx
c001cb4e:	5e                   	pop    esi
c001cb4f:	5f                   	pop    edi
c001cb50:	5d                   	pop    ebp
c001cb51:	c3                   	ret    

c001cb52 <SATABus::open(int, int, void*)>:
c001cb52:	83 ec 14             	sub    esp,0x14
c001cb55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb59:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb5f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb65:	52                   	push   edx
c001cb66:	50                   	push   eax
c001cb67:	e8 3c ff ff ff       	call   c001caa8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb6c:	31 c0                	xor    eax,eax
c001cb6e:	83 c4 1c             	add    esp,0x1c
c001cb71:	c3                   	ret    

c001cb72 <ATA::close(int, int, void*)>:
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb7f:	85 c0                	test   eax,eax
c001cb81:	74 0c                	je     c001cb8f <ATA::close(int, int, void*)+0x1d>
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb88:	50                   	push   eax
c001cb89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	31 c0                	xor    eax,eax
c001cb91:	83 c4 0c             	add    esp,0xc
c001cb94:	c3                   	ret    
c001cb95:	90                   	nop

c001cb96 <ATA::powerSaving(PowerSavingLevel)>:
c001cb96:	c3                   	ret    
c001cb97:	90                   	nop

c001cb98 <ATA::ATA()>:
c001cb98:	83 ec 0c             	sub    esp,0xc
c001cb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9f:	83 ec 04             	sub    esp,0x4
c001cba2:	68 00 02 00 00       	push   0x200
c001cba7:	68 bd 32 02 c0       	push   0xc00232bd
c001cbac:	50                   	push   eax
c001cbad:	e8 7c 01 ff ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbb2:	83 c4 10             	add    esp,0x10
c001cbb5:	ba 30 32 02 c0       	mov    edx,0xc0023230
c001cbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbe:	89 10                	mov    DWORD PTR [eax],edx
c001cbc0:	90                   	nop
c001cbc1:	83 c4 0c             	add    esp,0xc
c001cbc4:	c3                   	ret    
c001cbc5:	90                   	nop

c001cbc6 <ATA::flush(bool)>:
c001cbc6:	53                   	push   ebx
c001cbc7:	83 ec 08             	sub    esp,0x8
c001cbca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cbce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cbd3:	83 f8 01             	cmp    eax,0x1
c001cbd6:	19 c0                	sbb    eax,eax
c001cbd8:	83 e0 fd             	and    eax,0xfffffffd
c001cbdb:	05 ea 00 00 00       	add    eax,0xea
c001cbe0:	50                   	push   eax
c001cbe1:	6a 07                	push   0x7
c001cbe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbea:	50                   	push   eax
c001cbeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbf1:	e8 16 f1 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbf6:	83 c4 0c             	add    esp,0xc
c001cbf9:	6a 00                	push   0x0
c001cbfb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc02:	50                   	push   eax
c001cc03:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc09:	e8 e6 fb ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001cc0e:	83 c4 18             	add    esp,0x18
c001cc11:	5b                   	pop    ebx
c001cc12:	c3                   	ret    
c001cc13:	90                   	nop

c001cc14 <ATA::readyForCommand()>:
c001cc14:	56                   	push   esi
c001cc15:	53                   	push   ebx
c001cc16:	53                   	push   ebx
c001cc17:	31 db                	xor    ebx,ebx
c001cc19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc1d:	51                   	push   ecx
c001cc1e:	6a 0c                	push   0xc
c001cc20:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc27:	50                   	push   eax
c001cc28:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc2e:	e8 99 f1 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001cc33:	83 c4 10             	add    esp,0x10
c001cc36:	a8 88                	test   al,0x88
c001cc38:	74 1f                	je     c001cc59 <ATA::readyForCommand()+0x45>
c001cc3a:	43                   	inc    ebx
c001cc3b:	83 fb 63             	cmp    ebx,0x63
c001cc3e:	7e dd                	jle    c001cc1d <ATA::readyForCommand()+0x9>
c001cc40:	83 ec 0c             	sub    esp,0xc
c001cc43:	6a 0a                	push   0xa
c001cc45:	e8 26 97 ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001cc4a:	83 c4 10             	add    esp,0x10
c001cc4d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc53:	75 c8                	jne    c001cc1d <ATA::readyForCommand()+0x9>
c001cc55:	31 c0                	xor    eax,eax
c001cc57:	eb 02                	jmp    c001cc5b <ATA::readyForCommand()+0x47>
c001cc59:	b0 01                	mov    al,0x1
c001cc5b:	5a                   	pop    edx
c001cc5c:	5b                   	pop    ebx
c001cc5d:	5e                   	pop    esi
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <ATA::access(unsigned long long, int, void*, bool)>:
c001cc60:	55                   	push   ebp
c001cc61:	57                   	push   edi
c001cc62:	56                   	push   esi
c001cc63:	53                   	push   ebx
c001cc64:	83 ec 2c             	sub    esp,0x2c
c001cc67:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc6b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc6f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc77:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cc7b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cc7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cc83:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cc89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc8d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc97:	c1 e0 06             	shl    eax,0x6
c001cc9a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cca2:	74 5d                	je     c001cd01 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cca4:	89 fa                	mov    edx,edi
c001cca6:	89 f0                	mov    eax,esi
c001cca8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ccac:	c1 ea 1c             	shr    edx,0x1c
c001ccaf:	89 d1                	mov    ecx,edx
c001ccb1:	09 c1                	or     ecx,eax
c001ccb3:	74 25                	je     c001ccda <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ccb5:	31 ed                	xor    ebp,ebp
c001ccb7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ccbe:	89 fa                	mov    edx,edi
c001ccc0:	89 f0                	mov    eax,esi
c001ccc2:	0f ad d0             	shrd   eax,edx,cl
c001ccc5:	d3 ea                	shr    edx,cl
c001ccc7:	f6 c1 20             	test   cl,0x20
c001ccca:	74 02                	je     c001ccce <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cccc:	89 d0                	mov    eax,edx
c001ccce:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ccd2:	45                   	inc    ebp
c001ccd3:	83 fd 06             	cmp    ebp,0x6
c001ccd6:	75 df                	jne    c001ccb7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ccd8:	eb 76                	jmp    c001cd50 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ccda:	89 f0                	mov    eax,esi
c001ccdc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cce1:	89 fa                	mov    edx,edi
c001cce3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ccea:	0f ac d0 10          	shrd   eax,edx,0x10
c001ccee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ccf3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ccf7:	c1 ee 18             	shr    esi,0x18
c001ccfa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ccff:	eb 56                	jmp    c001cd57 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd01:	6a 00                	push   0x0
c001cd03:	6a 3f                	push   0x3f
c001cd05:	57                   	push   edi
c001cd06:	56                   	push   esi
c001cd07:	e8 a4 2a 00 00       	call   c001f7b0 <__umoddi3>
c001cd0c:	83 c4 10             	add    esp,0x10
c001cd0f:	40                   	inc    eax
c001cd10:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd14:	6a 00                	push   0x0
c001cd16:	68 f0 03 00 00       	push   0x3f0
c001cd1b:	57                   	push   edi
c001cd1c:	56                   	push   esi
c001cd1d:	e8 8e 29 00 00       	call   c001f6b0 <__udivdi3>
c001cd22:	83 c4 10             	add    esp,0x10
c001cd25:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd2a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd31:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd36:	6a 00                	push   0x0
c001cd38:	6a 3f                	push   0x3f
c001cd3a:	57                   	push   edi
c001cd3b:	56                   	push   esi
c001cd3c:	e8 6f 29 00 00       	call   c001f6b0 <__udivdi3>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	83 e0 0f             	and    eax,0xf
c001cd47:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cd4c:	89 c6                	mov    esi,eax
c001cd4e:	eb 07                	jmp    c001cd57 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd50:	31 f6                	xor    esi,esi
c001cd52:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cd57:	bf 01 00 00 00       	mov    edi,0x1
c001cd5c:	50                   	push   eax
c001cd5d:	6a 00                	push   0x0
c001cd5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd66:	50                   	push   eax
c001cd67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd6b:	e8 a4 f1 ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001cd70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd73:	e8 9c fe ff ff       	call   c001cc14 <ATA::readyForCommand()>
c001cd78:	83 c4 10             	add    esp,0x10
c001cd7b:	84 c0                	test   al,al
c001cd7d:	0f 84 69 02 00 00    	je     c001cfec <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cd83:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cd89:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd8f:	c1 e0 04             	shl    eax,0x4
c001cd92:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cd99:	09 c6                	or     esi,eax
c001cd9b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cda0:	75 05                	jne    c001cda7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cda2:	83 ce a0             	or     esi,0xffffffa0
c001cda5:	eb 03                	jmp    c001cdaa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cda7:	83 ce e0             	or     esi,0xffffffe0
c001cdaa:	89 f0                	mov    eax,esi
c001cdac:	0f b6 f0             	movzx  esi,al
c001cdaf:	56                   	push   esi
c001cdb0:	6a 06                	push   0x6
c001cdb2:	51                   	push   ecx
c001cdb3:	52                   	push   edx
c001cdb4:	e8 53 ef ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdb9:	83 c4 10             	add    esp,0x10
c001cdbc:	6a 00                	push   0x0
c001cdbe:	6a 01                	push   0x1
c001cdc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdc7:	50                   	push   eax
c001cdc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdce:	e8 39 ef ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd3:	83 c4 10             	add    esp,0x10
c001cdd6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cddb:	83 f8 02             	cmp    eax,0x2
c001cdde:	75 6e                	jne    c001ce4e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cde0:	6a 00                	push   0x0
c001cde2:	6a 08                	push   0x8
c001cde4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdeb:	50                   	push   eax
c001cdec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdf2:	e8 15 ef ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cdfc:	50                   	push   eax
c001cdfd:	6a 09                	push   0x9
c001cdff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce06:	50                   	push   eax
c001ce07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce0d:	e8 fa ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce12:	83 c4 20             	add    esp,0x20
c001ce15:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce1a:	50                   	push   eax
c001ce1b:	6a 0a                	push   0xa
c001ce1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce24:	50                   	push   eax
c001ce25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce2b:	e8 dc ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce30:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce35:	50                   	push   eax
c001ce36:	6a 0b                	push   0xb
c001ce38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3f:	50                   	push   eax
c001ce40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce46:	e8 c1 ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4b:	83 c4 20             	add    esp,0x20
c001ce4e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce53:	50                   	push   eax
c001ce54:	6a 02                	push   0x2
c001ce56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce5d:	50                   	push   eax
c001ce5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce64:	e8 a3 ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce69:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce6e:	50                   	push   eax
c001ce6f:	6a 03                	push   0x3
c001ce71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce78:	50                   	push   eax
c001ce79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce7f:	e8 88 ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce84:	83 c4 20             	add    esp,0x20
c001ce87:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ce8c:	50                   	push   eax
c001ce8d:	6a 04                	push   0x4
c001ce8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce96:	50                   	push   eax
c001ce97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce9d:	e8 6a ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea7:	50                   	push   eax
c001cea8:	6a 05                	push   0x5
c001ceaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb1:	50                   	push   eax
c001ceb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb8:	e8 4f ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cebd:	83 c4 20             	add    esp,0x20
c001cec0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cec5:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001ceca:	74 11                	je     c001cedd <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cecc:	b8 30 00 00 00       	mov    eax,0x30
c001ced1:	83 fa 02             	cmp    edx,0x2
c001ced4:	75 16                	jne    c001ceec <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001ced6:	b8 34 00 00 00       	mov    eax,0x34
c001cedb:	eb 0f                	jmp    c001ceec <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cedd:	b8 20 00 00 00       	mov    eax,0x20
c001cee2:	83 fa 02             	cmp    edx,0x2
c001cee5:	75 05                	jne    c001ceec <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cee7:	b8 24 00 00 00       	mov    eax,0x24
c001ceec:	50                   	push   eax
c001ceed:	6a 07                	push   0x7
c001ceef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef6:	50                   	push   eax
c001cef7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cefd:	e8 0a ee ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf02:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf06:	83 c4 10             	add    esp,0x10
c001cf09:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf0e:	85 f6                	test   esi,esi
c001cf10:	0f 84 b3 00 00 00    	je     c001cfc9 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf16:	50                   	push   eax
c001cf17:	6a 01                	push   0x1
c001cf19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf20:	50                   	push   eax
c001cf21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf27:	e8 c8 f8 ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001cf2c:	83 c4 10             	add    esp,0x10
c001cf2f:	0f b6 f8             	movzx  edi,al
c001cf32:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf38:	85 ff                	test   edi,edi
c001cf3a:	74 1d                	je     c001cf59 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cf3c:	57                   	push   edi
c001cf3d:	0f b6 d2             	movzx  edx,dl
c001cf40:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf47:	50                   	push   eax
c001cf48:	52                   	push   edx
c001cf49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4f:	e8 e6 f7 ff ff       	call   c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf54:	e9 90 00 00 00       	jmp    c001cfe9 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cf59:	85 ed                	test   ebp,ebp
c001cf5b:	74 3b                	je     c001cf98 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cf5d:	31 c9                	xor    ecx,ecx
c001cf5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cf63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cf67:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cf6b:	50                   	push   eax
c001cf6c:	50                   	push   eax
c001cf6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf74:	50                   	push   eax
c001cf75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf7b:	e8 7a ed ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001cf80:	89 c2                	mov    edx,eax
c001cf82:	89 f8                	mov    eax,edi
c001cf84:	66 ef                	out    dx,ax
c001cf86:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cf8a:	83 c4 10             	add    esp,0x10
c001cf8d:	41                   	inc    ecx
c001cf8e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cf94:	75 c9                	jne    c001cf5f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cf96:	eb 23                	jmp    c001cfbb <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cf98:	0f b6 d2             	movzx  edx,dl
c001cf9b:	51                   	push   ecx
c001cf9c:	51                   	push   ecx
c001cf9d:	52                   	push   edx
c001cf9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa4:	e8 51 ed ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001cfa9:	b9 00 01 00 00       	mov    ecx,0x100
c001cfae:	89 c2                	mov    edx,eax
c001cfb0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cfb4:	fc                   	cld    
c001cfb5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cfc3:	4e                   	dec    esi
c001cfc4:	e9 45 ff ff ff       	jmp    c001cf0e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cfc9:	31 ff                	xor    edi,edi
c001cfcb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfd0:	74 1a                	je     c001cfec <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cfd2:	50                   	push   eax
c001cfd3:	50                   	push   eax
c001cfd4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cfd9:	83 f8 02             	cmp    eax,0x2
c001cfdc:	0f 94 c0             	sete   al
c001cfdf:	0f b6 c0             	movzx  eax,al
c001cfe2:	50                   	push   eax
c001cfe3:	53                   	push   ebx
c001cfe4:	e8 dd fb ff ff       	call   c001cbc6 <ATA::flush(bool)>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	83 c4 2c             	add    esp,0x2c
c001cfef:	89 f8                	mov    eax,edi
c001cff1:	5b                   	pop    ebx
c001cff2:	5e                   	pop    esi
c001cff3:	5f                   	pop    edi
c001cff4:	5d                   	pop    ebp
c001cff5:	c3                   	ret    

c001cff6 <ATA::detectCHS()>:
c001cff6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cffa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d000:	c1 e0 06             	shl    eax,0x6
c001d003:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d009:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d013:	c7 44 24 04 14 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023214
c001d01b:	e9 9b 45 ff ff       	jmp    c00115bb <KePanic(char const*)>

c001d020 <ATA::open(int, int, void*)>:
c001d020:	53                   	push   ebx
c001d021:	83 ec 08             	sub    esp,0x8
c001d024:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d028:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d02c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d030:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d036:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d03c:	c1 e0 06             	shl    eax,0x6
c001d03f:	01 d0                	add    eax,edx
c001d041:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d048:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d04e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d055:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d05f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d065:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d06c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d073:	75 0c                	jne    c001d081 <ATA::open(int, int, void*)+0x61>
c001d075:	83 ec 0c             	sub    esp,0xc
c001d078:	53                   	push   ebx
c001d079:	e8 78 ff ff ff       	call   c001cff6 <ATA::detectCHS()>
c001d07e:	83 c4 10             	add    esp,0x10
c001d081:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d087:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d08d:	c1 e0 06             	shl    eax,0x6
c001d090:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d097:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0a1:	d1 e8                	shr    eax,1
c001d0a3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0a9:	6a 04                	push   0x4
c001d0ab:	6a 0c                	push   0xc
c001d0ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0b4:	50                   	push   eax
c001d0b5:	52                   	push   edx
c001d0b6:	e8 51 ec ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0bb:	90                   	nop
c001d0bc:	90                   	nop
c001d0bd:	6a 00                	push   0x0
c001d0bf:	6a 0c                	push   0xc
c001d0c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0c8:	50                   	push   eax
c001d0c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0cf:	e8 38 ec ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0d4:	83 c4 14             	add    esp,0x14
c001d0d7:	53                   	push   ebx
c001d0d8:	e8 b9 fc fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001d0dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0e0:	e8 f5 0e ff ff       	call   c000dfda <createPartitionsForDisk(PhysicalDisk*)>
c001d0e5:	31 c0                	xor    eax,eax
c001d0e7:	83 c4 18             	add    esp,0x18
c001d0ea:	5b                   	pop    ebx
c001d0eb:	c3                   	ret    

c001d0ec <combineCharAndColour(char, unsigned char)>:
c001d0ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0f1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d0f7:	c1 e0 08             	shl    eax,0x8
c001d0fa:	09 d0                	or     eax,edx
c001d0fc:	c3                   	ret    

c001d0fd <combineColours(unsigned char, unsigned char)>:
c001d0fd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d102:	c1 e0 04             	shl    eax,0x4
c001d105:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d109:	c3                   	ret    

c001d10a <ATA::read(unsigned long long, int, void*)>:
c001d10a:	55                   	push   ebp
c001d10b:	57                   	push   edi
c001d10c:	56                   	push   esi
c001d10d:	be 04 00 00 00       	mov    esi,0x4
c001d112:	53                   	push   ebx
c001d113:	83 ec 0c             	sub    esp,0xc
c001d116:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d11a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d11e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d121:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d125:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d129:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d12f:	0f 87 a1 01 00 00    	ja     c001d2d6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d135:	be 06 00 00 00       	mov    esi,0x6
c001d13a:	85 c9                	test   ecx,ecx
c001d13c:	0f 84 94 01 00 00    	je     c001d2d6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d142:	55                   	push   ebp
c001d143:	55                   	push   ebp
c001d144:	6a 00                	push   0x0
c001d146:	51                   	push   ecx
c001d147:	53                   	push   ebx
c001d148:	52                   	push   edx
c001d149:	50                   	push   eax
c001d14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d14e:	e8 0d fb ff ff       	call   c001cc60 <ATA::access(unsigned long long, int, void*, bool)>
c001d153:	83 c4 20             	add    esp,0x20
c001d156:	89 c6                	mov    esi,eax
c001d158:	85 c0                	test   eax,eax
c001d15a:	0f 85 71 01 00 00    	jne    c001d2d1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d160:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d166:	89 da                	mov    edx,ebx
c001d168:	50                   	push   eax
c001d169:	bd 10 27 00 00       	mov    ebp,0x2710
c001d16e:	50                   	push   eax
c001d16f:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d175:	6a 0f                	push   0xf
c001d177:	6a 00                	push   0x0
c001d179:	e8 7f ff ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001d17e:	59                   	pop    ecx
c001d17f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d184:	5b                   	pop    ebx
c001d185:	0f b6 d8             	movzx  ebx,al
c001d188:	89 d0                	mov    eax,edx
c001d18a:	53                   	push   ebx
c001d18b:	99                   	cdq    
c001d18c:	f7 fd                	idiv   ebp
c001d18e:	99                   	cdq    
c001d18f:	f7 f9                	idiv   ecx
c001d191:	83 c2 30             	add    edx,0x30
c001d194:	0f b6 d2             	movzx  edx,dl
c001d197:	52                   	push   edx
c001d198:	e8 4f ff ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d19d:	5f                   	pop    edi
c001d19e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1a3:	5a                   	pop    edx
c001d1a4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1aa:	53                   	push   ebx
c001d1ab:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1b0:	99                   	cdq    
c001d1b1:	f7 ff                	idiv   edi
c001d1b3:	99                   	cdq    
c001d1b4:	f7 f9                	idiv   ecx
c001d1b6:	8d 42 30             	lea    eax,[edx+0x30]
c001d1b9:	0f b6 c0             	movzx  eax,al
c001d1bc:	50                   	push   eax
c001d1bd:	e8 2a ff ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d1c2:	5f                   	pop    edi
c001d1c3:	bf 64 00 00 00       	mov    edi,0x64
c001d1c8:	5a                   	pop    edx
c001d1c9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1cf:	53                   	push   ebx
c001d1d0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1d5:	99                   	cdq    
c001d1d6:	f7 ff                	idiv   edi
c001d1d8:	99                   	cdq    
c001d1d9:	f7 f9                	idiv   ecx
c001d1db:	8d 42 30             	lea    eax,[edx+0x30]
c001d1de:	0f b6 c0             	movzx  eax,al
c001d1e1:	50                   	push   eax
c001d1e2:	e8 05 ff ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d1e7:	5a                   	pop    edx
c001d1e8:	5a                   	pop    edx
c001d1e9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d1ef:	53                   	push   ebx
c001d1f0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1f5:	99                   	cdq    
c001d1f6:	f7 f9                	idiv   ecx
c001d1f8:	99                   	cdq    
c001d1f9:	f7 f9                	idiv   ecx
c001d1fb:	8d 42 30             	lea    eax,[edx+0x30]
c001d1fe:	0f b6 c0             	movzx  eax,al
c001d201:	50                   	push   eax
c001d202:	e8 e5 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d207:	5a                   	pop    edx
c001d208:	5a                   	pop    edx
c001d209:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d20f:	53                   	push   ebx
c001d210:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d215:	99                   	cdq    
c001d216:	f7 f9                	idiv   ecx
c001d218:	83 c2 30             	add    edx,0x30
c001d21b:	0f b6 d2             	movzx  edx,dl
c001d21e:	52                   	push   edx
c001d21f:	e8 c8 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d224:	5a                   	pop    edx
c001d225:	5a                   	pop    edx
c001d226:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d22c:	53                   	push   ebx
c001d22d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d232:	99                   	cdq    
c001d233:	f7 fd                	idiv   ebp
c001d235:	99                   	cdq    
c001d236:	f7 f9                	idiv   ecx
c001d238:	8d 42 30             	lea    eax,[edx+0x30]
c001d23b:	0f b6 c0             	movzx  eax,al
c001d23e:	50                   	push   eax
c001d23f:	e8 a8 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d244:	5d                   	pop    ebp
c001d245:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d24a:	5a                   	pop    edx
c001d24b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d251:	53                   	push   ebx
c001d252:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d257:	99                   	cdq    
c001d258:	f7 fd                	idiv   ebp
c001d25a:	99                   	cdq    
c001d25b:	f7 f9                	idiv   ecx
c001d25d:	8d 42 30             	lea    eax,[edx+0x30]
c001d260:	0f b6 c0             	movzx  eax,al
c001d263:	50                   	push   eax
c001d264:	e8 83 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d269:	5d                   	pop    ebp
c001d26a:	5a                   	pop    edx
c001d26b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d271:	53                   	push   ebx
c001d272:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d277:	99                   	cdq    
c001d278:	f7 ff                	idiv   edi
c001d27a:	99                   	cdq    
c001d27b:	f7 f9                	idiv   ecx
c001d27d:	8d 42 30             	lea    eax,[edx+0x30]
c001d280:	0f b6 c0             	movzx  eax,al
c001d283:	50                   	push   eax
c001d284:	e8 63 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d289:	5f                   	pop    edi
c001d28a:	5d                   	pop    ebp
c001d28b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d291:	53                   	push   ebx
c001d292:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d297:	99                   	cdq    
c001d298:	f7 f9                	idiv   ecx
c001d29a:	99                   	cdq    
c001d29b:	f7 f9                	idiv   ecx
c001d29d:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a0:	0f b6 c0             	movzx  eax,al
c001d2a3:	50                   	push   eax
c001d2a4:	e8 43 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d2a9:	5a                   	pop    edx
c001d2aa:	5f                   	pop    edi
c001d2ab:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2b1:	53                   	push   ebx
c001d2b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2b7:	99                   	cdq    
c001d2b8:	f7 f9                	idiv   ecx
c001d2ba:	83 c2 30             	add    edx,0x30
c001d2bd:	0f b6 d2             	movzx  edx,dl
c001d2c0:	52                   	push   edx
c001d2c1:	e8 26 fe ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d2c6:	83 c4 10             	add    esp,0x10
c001d2c9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d2cf:	eb 05                	jmp    c001d2d6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2d1:	be 01 00 00 00       	mov    esi,0x1
c001d2d6:	83 c4 0c             	add    esp,0xc
c001d2d9:	89 f0                	mov    eax,esi
c001d2db:	5b                   	pop    ebx
c001d2dc:	5e                   	pop    esi
c001d2dd:	5f                   	pop    edi
c001d2de:	5d                   	pop    ebp
c001d2df:	c3                   	ret    

c001d2e0 <ATA::write(unsigned long long, int, void*)>:
c001d2e0:	55                   	push   ebp
c001d2e1:	57                   	push   edi
c001d2e2:	56                   	push   esi
c001d2e3:	be 04 00 00 00       	mov    esi,0x4
c001d2e8:	53                   	push   ebx
c001d2e9:	83 ec 0c             	sub    esp,0xc
c001d2ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2f4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2ff:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d305:	0f 87 9c 01 00 00    	ja     c001d4a7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d30b:	be 06 00 00 00       	mov    esi,0x6
c001d310:	85 c9                	test   ecx,ecx
c001d312:	0f 84 8f 01 00 00    	je     c001d4a7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d318:	55                   	push   ebp
c001d319:	55                   	push   ebp
c001d31a:	6a 01                	push   0x1
c001d31c:	51                   	push   ecx
c001d31d:	53                   	push   ebx
c001d31e:	52                   	push   edx
c001d31f:	50                   	push   eax
c001d320:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d324:	e8 37 f9 ff ff       	call   c001cc60 <ATA::access(unsigned long long, int, void*, bool)>
c001d329:	83 c4 20             	add    esp,0x20
c001d32c:	89 c6                	mov    esi,eax
c001d32e:	85 c0                	test   eax,eax
c001d330:	0f 85 6c 01 00 00    	jne    c001d4a2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d336:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d33c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d341:	50                   	push   eax
c001d342:	50                   	push   eax
c001d343:	6a 0f                	push   0xf
c001d345:	6a 00                	push   0x0
c001d347:	e8 b1 fd ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001d34c:	5a                   	pop    edx
c001d34d:	0f b6 d8             	movzx  ebx,al
c001d350:	59                   	pop    ecx
c001d351:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d356:	53                   	push   ebx
c001d357:	b9 0a 00 00 00       	mov    ecx,0xa
c001d35c:	99                   	cdq    
c001d35d:	f7 fd                	idiv   ebp
c001d35f:	99                   	cdq    
c001d360:	f7 f9                	idiv   ecx
c001d362:	8d 42 30             	lea    eax,[edx+0x30]
c001d365:	0f b6 c0             	movzx  eax,al
c001d368:	50                   	push   eax
c001d369:	e8 7e fd ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d36e:	5f                   	pop    edi
c001d36f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d374:	5a                   	pop    edx
c001d375:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d37b:	53                   	push   ebx
c001d37c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d381:	99                   	cdq    
c001d382:	f7 ff                	idiv   edi
c001d384:	99                   	cdq    
c001d385:	f7 f9                	idiv   ecx
c001d387:	8d 42 30             	lea    eax,[edx+0x30]
c001d38a:	0f b6 c0             	movzx  eax,al
c001d38d:	50                   	push   eax
c001d38e:	e8 59 fd ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d393:	5f                   	pop    edi
c001d394:	bf 64 00 00 00       	mov    edi,0x64
c001d399:	5a                   	pop    edx
c001d39a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3a0:	53                   	push   ebx
c001d3a1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3a6:	99                   	cdq    
c001d3a7:	f7 ff                	idiv   edi
c001d3a9:	99                   	cdq    
c001d3aa:	f7 f9                	idiv   ecx
c001d3ac:	8d 42 30             	lea    eax,[edx+0x30]
c001d3af:	0f b6 c0             	movzx  eax,al
c001d3b2:	50                   	push   eax
c001d3b3:	e8 34 fd ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d3b8:	5a                   	pop    edx
c001d3b9:	5a                   	pop    edx
c001d3ba:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3c0:	53                   	push   ebx
c001d3c1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3c6:	99                   	cdq    
c001d3c7:	f7 f9                	idiv   ecx
c001d3c9:	99                   	cdq    
c001d3ca:	f7 f9                	idiv   ecx
c001d3cc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3cf:	0f b6 c0             	movzx  eax,al
c001d3d2:	50                   	push   eax
c001d3d3:	e8 14 fd ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d3d8:	5a                   	pop    edx
c001d3d9:	5a                   	pop    edx
c001d3da:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3e0:	53                   	push   ebx
c001d3e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3e6:	99                   	cdq    
c001d3e7:	f7 f9                	idiv   ecx
c001d3e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ec:	0f b6 c0             	movzx  eax,al
c001d3ef:	50                   	push   eax
c001d3f0:	e8 f7 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d3f5:	5a                   	pop    edx
c001d3f6:	5a                   	pop    edx
c001d3f7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3fd:	53                   	push   ebx
c001d3fe:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d403:	99                   	cdq    
c001d404:	f7 fd                	idiv   ebp
c001d406:	99                   	cdq    
c001d407:	f7 f9                	idiv   ecx
c001d409:	8d 42 30             	lea    eax,[edx+0x30]
c001d40c:	0f b6 c0             	movzx  eax,al
c001d40f:	50                   	push   eax
c001d410:	e8 d7 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d415:	5d                   	pop    ebp
c001d416:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d41b:	5a                   	pop    edx
c001d41c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d422:	53                   	push   ebx
c001d423:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d428:	99                   	cdq    
c001d429:	f7 fd                	idiv   ebp
c001d42b:	99                   	cdq    
c001d42c:	f7 f9                	idiv   ecx
c001d42e:	8d 42 30             	lea    eax,[edx+0x30]
c001d431:	0f b6 c0             	movzx  eax,al
c001d434:	50                   	push   eax
c001d435:	e8 b2 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d43a:	5d                   	pop    ebp
c001d43b:	5a                   	pop    edx
c001d43c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d442:	53                   	push   ebx
c001d443:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d448:	99                   	cdq    
c001d449:	f7 ff                	idiv   edi
c001d44b:	99                   	cdq    
c001d44c:	f7 f9                	idiv   ecx
c001d44e:	8d 42 30             	lea    eax,[edx+0x30]
c001d451:	0f b6 c0             	movzx  eax,al
c001d454:	50                   	push   eax
c001d455:	e8 92 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d45a:	5f                   	pop    edi
c001d45b:	5d                   	pop    ebp
c001d45c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d462:	53                   	push   ebx
c001d463:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d468:	99                   	cdq    
c001d469:	f7 f9                	idiv   ecx
c001d46b:	99                   	cdq    
c001d46c:	f7 f9                	idiv   ecx
c001d46e:	8d 42 30             	lea    eax,[edx+0x30]
c001d471:	0f b6 c0             	movzx  eax,al
c001d474:	50                   	push   eax
c001d475:	e8 72 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d47a:	5a                   	pop    edx
c001d47b:	5f                   	pop    edi
c001d47c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d482:	53                   	push   ebx
c001d483:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d488:	99                   	cdq    
c001d489:	f7 f9                	idiv   ecx
c001d48b:	83 c2 30             	add    edx,0x30
c001d48e:	0f b6 d2             	movzx  edx,dl
c001d491:	52                   	push   edx
c001d492:	e8 55 fc ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4a0:	eb 05                	jmp    c001d4a7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4a2:	be 01 00 00 00       	mov    esi,0x1
c001d4a7:	83 c4 0c             	add    esp,0xc
c001d4aa:	89 f0                	mov    eax,esi
c001d4ac:	5b                   	pop    ebx
c001d4ad:	5e                   	pop    esi
c001d4ae:	5f                   	pop    edi
c001d4af:	5d                   	pop    ebp
c001d4b0:	c3                   	ret    
c001d4b1:	90                   	nop

c001d4b2 <ATAPI::write(unsigned long long, int, void*)>:
c001d4b2:	b8 03 00 00 00       	mov    eax,0x3
c001d4b7:	c3                   	ret    

c001d4b8 <ATAPI::close(int, int, void*)>:
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4c5:	85 c0                	test   eax,eax
c001d4c7:	74 0c                	je     c001d4d5 <ATAPI::close(int, int, void*)+0x1d>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4ce:	50                   	push   eax
c001d4cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4d2:	83 c4 10             	add    esp,0x10
c001d4d5:	31 c0                	xor    eax,eax
c001d4d7:	83 c4 0c             	add    esp,0xc
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <ATAPI::ATAPI()>:
c001d4dc:	83 ec 0c             	sub    esp,0xc
c001d4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e3:	83 ec 04             	sub    esp,0x4
c001d4e6:	68 00 08 00 00       	push   0x800
c001d4eb:	68 5d 33 02 c0       	push   0xc002335d
c001d4f0:	50                   	push   eax
c001d4f1:	e8 38 f8 fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d4f6:	83 c4 10             	add    esp,0x10
c001d4f9:	ba 78 32 02 c0       	mov    edx,0xc0023278
c001d4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d502:	89 10                	mov    DWORD PTR [eax],edx
c001d504:	90                   	nop
c001d505:	83 c4 0c             	add    esp,0xc
c001d508:	c3                   	ret    
c001d509:	90                   	nop

c001d50a <ATAPI::readyForCommand()>:
c001d50a:	56                   	push   esi
c001d50b:	53                   	push   ebx
c001d50c:	53                   	push   ebx
c001d50d:	31 db                	xor    ebx,ebx
c001d50f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d513:	51                   	push   ecx
c001d514:	6a 0c                	push   0xc
c001d516:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d51d:	50                   	push   eax
c001d51e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d524:	e8 a3 e8 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	a8 88                	test   al,0x88
c001d52e:	74 25                	je     c001d555 <ATAPI::readyForCommand()+0x4b>
c001d530:	43                   	inc    ebx
c001d531:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d537:	7e da                	jle    c001d513 <ATAPI::readyForCommand()+0x9>
c001d539:	83 ec 0c             	sub    esp,0xc
c001d53c:	68 5e 01 00 00       	push   0x15e
c001d541:	e8 2a 8e ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d54f:	75 c2                	jne    c001d513 <ATAPI::readyForCommand()+0x9>
c001d551:	31 c0                	xor    eax,eax
c001d553:	eb 02                	jmp    c001d557 <ATAPI::readyForCommand()+0x4d>
c001d555:	b0 01                	mov    al,0x1
c001d557:	5a                   	pop    edx
c001d558:	5b                   	pop    ebx
c001d559:	5e                   	pop    esi
c001d55a:	c3                   	ret    
c001d55b:	90                   	nop

c001d55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d55c:	55                   	push   ebp
c001d55d:	57                   	push   edi
c001d55e:	56                   	push   esi
c001d55f:	53                   	push   ebx
c001d560:	83 ec 20             	sub    esp,0x20
c001d563:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d567:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d56b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d56f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d573:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d577:	6a 01                	push   0x1
c001d579:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d580:	50                   	push   eax
c001d581:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d587:	e8 88 e9 ff ff       	call   c001bf14 <IDE::enableIRQs(unsigned char, bool)>
c001d58c:	5e                   	pop    esi
c001d58d:	58                   	pop    eax
c001d58e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d595:	50                   	push   eax
c001d596:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d59c:	e8 45 e7 ff ff       	call   c001bce6 <IDE::prepareInterrupt(unsigned char)>
c001d5a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5a4:	e8 61 ff ff ff       	call   c001d50a <ATAPI::readyForCommand()>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	84 c0                	test   al,al
c001d5ae:	75 0a                	jne    c001d5ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d5b0:	bb 01 00 00 00       	mov    ebx,0x1
c001d5b5:	e9 60 02 00 00       	jmp    c001d81a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d5ba:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d5c0:	c1 e0 04             	shl    eax,0x4
c001d5c3:	0f b6 c0             	movzx  eax,al
c001d5c6:	50                   	push   eax
c001d5c7:	6a 06                	push   0x6
c001d5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5d0:	50                   	push   eax
c001d5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5d7:	e8 30 e7 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5dc:	6a 00                	push   0x0
c001d5de:	6a 01                	push   0x1
c001d5e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5e7:	50                   	push   eax
c001d5e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ee:	e8 19 e7 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5f3:	83 c4 20             	add    esp,0x20
c001d5f6:	0f b6 c3             	movzx  eax,bl
c001d5f9:	0f b6 df             	movzx  ebx,bh
c001d5fc:	50                   	push   eax
c001d5fd:	6a 04                	push   0x4
c001d5ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d606:	50                   	push   eax
c001d607:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d60d:	e8 fa e6 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d612:	53                   	push   ebx
c001d613:	6a 05                	push   0x5
c001d615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d61c:	50                   	push   eax
c001d61d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d623:	e8 e4 e6 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d628:	83 c4 20             	add    esp,0x20
c001d62b:	68 a0 00 00 00       	push   0xa0
c001d630:	6a 07                	push   0x7
c001d632:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d639:	50                   	push   eax
c001d63a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d640:	e8 c7 e6 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d645:	83 c4 0c             	add    esp,0xc
c001d648:	6a 01                	push   0x1
c001d64a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d651:	50                   	push   eax
c001d652:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d658:	e8 97 f1 ff ff       	call   c001c7f4 <IDE::polling(unsigned char, unsigned int)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	0f b6 d8             	movzx  ebx,al
c001d663:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d669:	85 db                	test   ebx,ebx
c001d66b:	74 20                	je     c001d68d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d66d:	53                   	push   ebx
c001d66e:	0f b6 c0             	movzx  eax,al
c001d671:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d678:	52                   	push   edx
c001d679:	50                   	push   eax
c001d67a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d680:	e8 b5 f0 ff ff       	call   c001c73a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d685:	83 c4 10             	add    esp,0x10
c001d688:	e9 8d 01 00 00       	jmp    c001d81a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d68d:	0f b6 c0             	movzx  eax,al
c001d690:	53                   	push   ebx
c001d691:	53                   	push   ebx
c001d692:	50                   	push   eax
c001d693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d699:	e8 5c e6 ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001d69e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6a2:	b9 06 00 00 00       	mov    ecx,0x6
c001d6a7:	89 c2                	mov    edx,eax
c001d6a9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6ac:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6b0:	83 c4 10             	add    esp,0x10
c001d6b3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6bc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6c2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6c9:	85 db                	test   ebx,ebx
c001d6cb:	0f 84 ec 00 00 00    	je     c001d7bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d6d1:	51                   	push   ecx
c001d6d2:	51                   	push   ecx
c001d6d3:	52                   	push   edx
c001d6d4:	50                   	push   eax
c001d6d5:	e8 a0 e7 ff ff       	call   c001be7a <IDE::waitInterrupt(unsigned char)>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	84 c0                	test   al,al
c001d6df:	0f 84 cb fe ff ff    	je     c001d5b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d6e5:	56                   	push   esi
c001d6e6:	56                   	push   esi
c001d6e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6ee:	50                   	push   eax
c001d6ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f5:	e8 ec e5 ff ff       	call   c001bce6 <IDE::prepareInterrupt(unsigned char)>
c001d6fa:	83 c4 0c             	add    esp,0xc
c001d6fd:	6a 04                	push   0x4
c001d6ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d706:	50                   	push   eax
c001d707:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d70d:	e8 ba e6 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001d712:	83 c4 0c             	add    esp,0xc
c001d715:	89 c6                	mov    esi,eax
c001d717:	6a 05                	push   0x5
c001d719:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d720:	50                   	push   eax
c001d721:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d727:	e8 a0 e6 ff ff       	call   c001bdcc <IDE::read(unsigned char, unsigned char)>
c001d72c:	89 f1                	mov    ecx,esi
c001d72e:	0f b6 c0             	movzx  eax,al
c001d731:	0f b6 f1             	movzx  esi,cl
c001d734:	c1 e0 08             	shl    eax,0x8
c001d737:	09 c6                	or     esi,eax
c001d739:	d1 fe                	sar    esi,1
c001d73b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d73f:	83 c4 10             	add    esp,0x10
c001d742:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d747:	74 41                	je     c001d78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d749:	31 c9                	xor    ecx,ecx
c001d74b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d751:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d758:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d75c:	75 0a                	jne    c001d768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d75e:	01 c9                	add    ecx,ecx
c001d760:	01 cd                	add    ebp,ecx
c001d762:	4b                   	dec    ebx
c001d763:	e9 54 ff ff ff       	jmp    c001d6bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d768:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d76d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d771:	51                   	push   ecx
c001d772:	51                   	push   ecx
c001d773:	52                   	push   edx
c001d774:	50                   	push   eax
c001d775:	e8 80 e5 ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001d77a:	89 c2                	mov    edx,eax
c001d77c:	89 f0                	mov    eax,esi
c001d77e:	66 ef                	out    dx,ax
c001d780:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d784:	83 c4 10             	add    esp,0x10
c001d787:	41                   	inc    ecx
c001d788:	eb c1                	jmp    c001d74b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d78a:	31 f6                	xor    esi,esi
c001d78c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d792:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d799:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d79d:	75 06                	jne    c001d7a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d79f:	01 f6                	add    esi,esi
c001d7a1:	01 f5                	add    ebp,esi
c001d7a3:	eb bd                	jmp    c001d762 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d7a5:	51                   	push   ecx
c001d7a6:	51                   	push   ecx
c001d7a7:	52                   	push   edx
c001d7a8:	50                   	push   eax
c001d7a9:	e8 4c e5 ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001d7ae:	89 c2                	mov    edx,eax
c001d7b0:	66 ed                	in     ax,dx
c001d7b2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	46                   	inc    esi
c001d7bb:	eb cf                	jmp    c001d78c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d7bd:	51                   	push   ecx
c001d7be:	51                   	push   ecx
c001d7bf:	52                   	push   edx
c001d7c0:	50                   	push   eax
c001d7c1:	e8 b4 e6 ff ff       	call   c001be7a <IDE::waitInterrupt(unsigned char)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	84 c0                	test   al,al
c001d7cb:	0f 84 df fd ff ff    	je     c001d5b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7d1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d7d6:	52                   	push   edx
c001d7d7:	52                   	push   edx
c001d7d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7df:	50                   	push   eax
c001d7e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7e6:	e8 fb e4 ff ff       	call   c001bce6 <IDE::prepareInterrupt(unsigned char)>
c001d7eb:	83 c4 10             	add    esp,0x10
c001d7ee:	50                   	push   eax
c001d7ef:	50                   	push   eax
c001d7f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7f7:	50                   	push   eax
c001d7f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7fe:	e8 f7 e4 ff ff       	call   c001bcfa <IDE::getBase(unsigned char)>
c001d803:	8d 50 07             	lea    edx,[eax+0x7]
c001d806:	ec                   	in     al,dx
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	a8 88                	test   al,0x88
c001d80c:	74 0a                	je     c001d818 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d80e:	4b                   	dec    ebx
c001d80f:	75 dd                	jne    c001d7ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d811:	bb 02 00 00 00       	mov    ebx,0x2
c001d816:	eb 02                	jmp    c001d81a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d818:	31 db                	xor    ebx,ebx
c001d81a:	83 c4 1c             	add    esp,0x1c
c001d81d:	89 d8                	mov    eax,ebx
c001d81f:	5b                   	pop    ebx
c001d820:	5e                   	pop    esi
c001d821:	5f                   	pop    edi
c001d822:	5d                   	pop    ebp
c001d823:	c3                   	ret    

c001d824 <ATAPI::diskRemoved()>:
c001d824:	53                   	push   ebx
c001d825:	83 ec 14             	sub    esp,0x14
c001d828:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d82c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d833:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d839:	e8 8c 04 ff ff       	call   c000dcca <LogicalDisk::unmount()>
c001d83e:	58                   	pop    eax
c001d83f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d845:	e8 62 0e ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c001d84a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d850:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d854:	83 c4 18             	add    esp,0x18
c001d857:	5b                   	pop    ebx
c001d858:	e9 3f 0e ff ff       	jmp    c000e69c <VCache::invalidateReadBuffer()>
c001d85d:	90                   	nop

c001d85e <ATAPI::eject()>:
c001d85e:	57                   	push   edi
c001d85f:	b9 03 00 00 00       	mov    ecx,0x3
c001d864:	53                   	push   ebx
c001d865:	83 ec 14             	sub    esp,0x14
c001d868:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d86c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d870:	fc                   	cld    
c001d871:	31 c0                	xor    eax,eax
c001d873:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d875:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d87a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d87f:	50                   	push   eax
c001d880:	50                   	push   eax
c001d881:	6a 00                	push   0x0
c001d883:	6a 00                	push   0x0
c001d885:	6a 00                	push   0x0
c001d887:	6a 02                	push   0x2
c001d889:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d88d:	50                   	push   eax
c001d88e:	53                   	push   ebx
c001d88f:	e8 c8 fc ff ff       	call   c001d55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d894:	83 c4 14             	add    esp,0x14
c001d897:	53                   	push   ebx
c001d898:	e8 87 ff ff ff       	call   c001d824 <ATAPI::diskRemoved()>
c001d89d:	83 c4 24             	add    esp,0x24
c001d8a0:	31 c0                	xor    eax,eax
c001d8a2:	5b                   	pop    ebx
c001d8a3:	5f                   	pop    edi
c001d8a4:	c3                   	ret    
c001d8a5:	90                   	nop

c001d8a6 <ATAPI::diskInserted()>:
c001d8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8aa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8b1:	c3                   	ret    

c001d8b2 <ATAPI::detectMedia()>:
c001d8b2:	56                   	push   esi
c001d8b3:	53                   	push   ebx
c001d8b4:	83 ec 28             	sub    esp,0x28
c001d8b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8bb:	6a 0c                	push   0xc
c001d8bd:	6a 00                	push   0x0
c001d8bf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d8c3:	56                   	push   esi
c001d8c4:	e8 27 2c fe ff       	call   c00004f0 <memset>
c001d8c9:	58                   	pop    eax
c001d8ca:	5a                   	pop    edx
c001d8cb:	6a 00                	push   0x0
c001d8cd:	6a 00                	push   0x0
c001d8cf:	6a 00                	push   0x0
c001d8d1:	6a 00                	push   0x0
c001d8d3:	56                   	push   esi
c001d8d4:	53                   	push   ebx
c001d8d5:	e8 82 fc ff ff       	call   c001d55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8da:	83 c4 1c             	add    esp,0x1c
c001d8dd:	6a 0c                	push   0xc
c001d8df:	6a 00                	push   0x0
c001d8e1:	56                   	push   esi
c001d8e2:	e8 09 2c fe ff       	call   c00004f0 <memset>
c001d8e7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d8ec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d8f1:	59                   	pop    ecx
c001d8f2:	58                   	pop    eax
c001d8f3:	6a 01                	push   0x1
c001d8f5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d8f9:	50                   	push   eax
c001d8fa:	6a 00                	push   0x0
c001d8fc:	6a 12                	push   0x12
c001d8fe:	56                   	push   esi
c001d8ff:	53                   	push   ebx
c001d900:	e8 57 fc ff ff       	call   c001d55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d905:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d909:	83 c4 20             	add    esp,0x20
c001d90c:	83 e0 7f             	and    eax,0x7f
c001d90f:	83 f8 70             	cmp    eax,0x70
c001d912:	74 15                	je     c001d929 <ATAPI::detectMedia()+0x77>
c001d914:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d91b:	75 0c                	jne    c001d929 <ATAPI::detectMedia()+0x77>
c001d91d:	83 ec 0c             	sub    esp,0xc
c001d920:	53                   	push   ebx
c001d921:	e8 80 ff ff ff       	call   c001d8a6 <ATAPI::diskInserted()>
c001d926:	83 c4 10             	add    esp,0x10
c001d929:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d92d:	83 e0 0f             	and    eax,0xf
c001d930:	83 f8 02             	cmp    eax,0x2
c001d933:	75 1b                	jne    c001d950 <ATAPI::detectMedia()+0x9e>
c001d935:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d93a:	75 2d                	jne    c001d969 <ATAPI::detectMedia()+0xb7>
c001d93c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d943:	74 24                	je     c001d969 <ATAPI::detectMedia()+0xb7>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	53                   	push   ebx
c001d949:	e8 d6 fe ff ff       	call   c001d824 <ATAPI::diskRemoved()>
c001d94e:	eb 16                	jmp    c001d966 <ATAPI::detectMedia()+0xb4>
c001d950:	85 c0                	test   eax,eax
c001d952:	75 15                	jne    c001d969 <ATAPI::detectMedia()+0xb7>
c001d954:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d95b:	75 0c                	jne    c001d969 <ATAPI::detectMedia()+0xb7>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	53                   	push   ebx
c001d961:	e8 40 ff ff ff       	call   c001d8a6 <ATAPI::diskInserted()>
c001d966:	83 c4 10             	add    esp,0x10
c001d969:	83 c4 24             	add    esp,0x24
c001d96c:	5b                   	pop    ebx
c001d96d:	5e                   	pop    esi
c001d96e:	c3                   	ret    
c001d96f:	90                   	nop

c001d970 <ATAPI::open(int, int, void*)>:
c001d970:	56                   	push   esi
c001d971:	53                   	push   ebx
c001d972:	50                   	push   eax
c001d973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d97b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d97f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d985:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d98b:	c1 e0 06             	shl    eax,0x6
c001d98e:	01 d0                	add    eax,edx
c001d990:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d997:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d99d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9a4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9ae:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9b4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d9bb:	6a 04                	push   0x4
c001d9bd:	6a 0c                	push   0xc
c001d9bf:	51                   	push   ecx
c001d9c0:	52                   	push   edx
c001d9c1:	e8 46 e3 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9c6:	90                   	nop
c001d9c7:	90                   	nop
c001d9c8:	6a 00                	push   0x0
c001d9ca:	6a 0c                	push   0xc
c001d9cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9d3:	50                   	push   eax
c001d9d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9da:	e8 2d e3 ff ff       	call   c001bd0c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9df:	83 c4 14             	add    esp,0x14
c001d9e2:	68 78 01 00 00       	push   0x178
c001d9e7:	e8 ca a0 fe ff       	call   c0007ab6 <malloc>
c001d9ec:	83 c4 0c             	add    esp,0xc
c001d9ef:	89 c6                	mov    esi,eax
c001d9f1:	6a 00                	push   0x0
c001d9f3:	68 ff ff ff 7f       	push   0x7fffffff
c001d9f8:	6a 00                	push   0x0
c001d9fa:	6a 00                	push   0x0
c001d9fc:	53                   	push   ebx
c001d9fd:	68 0f 34 02 c0       	push   0xc002340f
c001da02:	50                   	push   eax
c001da03:	e8 00 01 ff ff       	call   c000db08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da08:	83 c4 14             	add    esp,0x14
c001da0b:	56                   	push   esi
c001da0c:	e8 b7 01 ff ff       	call   c000dbc8 <LogicalDisk::assignDriveLetter()>
c001da11:	5a                   	pop    edx
c001da12:	0f be c0             	movsx  eax,al
c001da15:	59                   	pop    ecx
c001da16:	50                   	push   eax
c001da17:	68 60 32 02 c0       	push   0xc0023260
c001da1c:	e8 24 cf fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da21:	58                   	pop    eax
c001da22:	5a                   	pop    edx
c001da23:	56                   	push   esi
c001da24:	53                   	push   ebx
c001da25:	e8 38 ef fe ff       	call   c000c962 <Device::addChild(Device*)>
c001da2a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da33:	e8 5e f3 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001da38:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da42:	e8 6b fe ff ff       	call   c001d8b2 <ATAPI::detectMedia()>
c001da47:	83 c4 14             	add    esp,0x14
c001da4a:	31 c0                	xor    eax,eax
c001da4c:	5b                   	pop    ebx
c001da4d:	5e                   	pop    esi
c001da4e:	c3                   	ret    
c001da4f:	90                   	nop

c001da50 <ATAPI::read(unsigned long long, int, void*)>:
c001da50:	55                   	push   ebp
c001da51:	57                   	push   edi
c001da52:	56                   	push   esi
c001da53:	53                   	push   ebx
c001da54:	83 ec 1c             	sub    esp,0x1c
c001da57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da5b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da5f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da63:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da6a:	74 3c                	je     c001daa8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da6c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da70:	b9 03 00 00 00       	mov    ecx,0x3
c001da75:	fc                   	cld    
c001da76:	31 c0                	xor    eax,eax
c001da78:	0f ce                	bswap  esi
c001da7a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da7c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001da81:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001da85:	89 e8                	mov    eax,ebp
c001da87:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da8b:	50                   	push   eax
c001da8c:	50                   	push   eax
c001da8d:	55                   	push   ebp
c001da8e:	c1 e5 0b             	shl    ebp,0xb
c001da91:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da95:	6a 00                	push   0x0
c001da97:	55                   	push   ebp
c001da98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da9c:	50                   	push   eax
c001da9d:	53                   	push   ebx
c001da9e:	e8 b9 fa ff ff       	call   c001d55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daa3:	83 c4 20             	add    esp,0x20
c001daa6:	eb 1a                	jmp    c001dac2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	53                   	push   ebx
c001daac:	e8 01 fe ff ff       	call   c001d8b2 <ATAPI::detectMedia()>
c001dab1:	83 c4 10             	add    esp,0x10
c001dab4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dabb:	75 af                	jne    c001da6c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dabd:	b8 02 00 00 00       	mov    eax,0x2
c001dac2:	83 c4 1c             	add    esp,0x1c
c001dac5:	5b                   	pop    ebx
c001dac6:	5e                   	pop    esi
c001dac7:	5f                   	pop    edi
c001dac8:	5d                   	pop    ebp
c001dac9:	c3                   	ret    

c001daca <SATA::close(int, int, void*)>:
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dad1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dad7:	85 c0                	test   eax,eax
c001dad9:	74 0c                	je     c001dae7 <SATA::close(int, int, void*)+0x1d>
c001dadb:	83 ec 0c             	sub    esp,0xc
c001dade:	8b 10                	mov    edx,DWORD PTR [eax]
c001dae0:	50                   	push   eax
c001dae1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dae4:	83 c4 10             	add    esp,0x10
c001dae7:	31 c0                	xor    eax,eax
c001dae9:	83 c4 0c             	add    esp,0xc
c001daec:	c3                   	ret    
c001daed:	90                   	nop

c001daee <SATA::powerSaving(PowerSavingLevel)>:
c001daee:	c3                   	ret    
c001daef:	90                   	nop

c001daf0 <SATA::open(int, int, void*)>:
c001daf0:	56                   	push   esi
c001daf1:	53                   	push   ebx
c001daf2:	50                   	push   eax
c001daf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001daf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dafb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db0b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db19:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db29:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db30:	e8 8a a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db35:	89 c6                	mov    esi,eax
c001db37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db3d:	81 c6 00 10 00 00    	add    esi,0x1000
c001db43:	e8 77 a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db48:	39 c6                	cmp    esi,eax
c001db4a:	74 10                	je     c001db5c <SATA::open(int, int, void*)+0x6c>
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	68 a8 32 02 c0       	push   0xc00232a8
c001db54:	e8 62 3a ff ff       	call   c00115bb <KePanic(char const*)>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	6a 02                	push   0x2
c001db61:	e8 a7 ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001db66:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db6c:	6a 03                	push   0x3
c001db6e:	50                   	push   eax
c001db6f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001db75:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001db7b:	e8 a0 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001db80:	83 c4 14             	add    esp,0x14
c001db83:	53                   	push   ebx
c001db84:	e8 0d f2 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001db89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db8c:	e8 49 04 ff ff       	call   c000dfda <createPartitionsForDisk(PhysicalDisk*)>
c001db91:	83 c4 14             	add    esp,0x14
c001db94:	31 c0                	xor    eax,eax
c001db96:	5b                   	pop    ebx
c001db97:	5e                   	pop    esi
c001db98:	c3                   	ret    
c001db99:	90                   	nop

c001db9a <SATA::SATA()>:
c001db9a:	83 ec 0c             	sub    esp,0xc
c001db9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba1:	83 ec 04             	sub    esp,0x4
c001dba4:	68 00 02 00 00       	push   0x200
c001dba9:	68 bc 32 02 c0       	push   0xc00232bc
c001dbae:	50                   	push   eax
c001dbaf:	e8 7a f1 fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c001dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc0:	89 10                	mov    DWORD PTR [eax],edx
c001dbc2:	90                   	nop
c001dbc3:	83 c4 0c             	add    esp,0xc
c001dbc6:	c3                   	ret    
c001dbc7:	90                   	nop

c001dbc8 <SATA::access(unsigned long long, int, void*, bool)>:
c001dbc8:	55                   	push   ebp
c001dbc9:	57                   	push   edi
c001dbca:	56                   	push   esi
c001dbcb:	53                   	push   ebx
c001dbcc:	83 ec 2c             	sub    esp,0x2c
c001dbcf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dbd3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dbd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dbdb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbdf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dbe3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dbe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbec:	7e 10                	jle    c001dbfe <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	68 cc 32 02 c0       	push   0xc00232cc
c001dbf6:	e8 c0 39 ff ff       	call   c00115bb <KePanic(char const*)>
c001dbfb:	83 c4 10             	add    esp,0x10
c001dbfe:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc04:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc14:	89 d0                	mov    eax,edx
c001dc16:	c1 e0 07             	shl    eax,0x7
c001dc19:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc1d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc27:	51                   	push   ecx
c001dc28:	8d 42 02             	lea    eax,[edx+0x2]
c001dc2b:	51                   	push   ecx
c001dc2c:	c1 e0 07             	shl    eax,0x7
c001dc2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc33:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc37:	50                   	push   eax
c001dc38:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc3e:	e8 91 ec ff ff       	call   c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dc47:	83 c4 10             	add    esp,0x10
c001dc4a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dc4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc53:	0f 84 57 01 00 00    	je     c001ddb0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc59:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc5d:	c1 e0 09             	shl    eax,0x9
c001dc60:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dc65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc69:	74 0e                	je     c001dc79 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dc6b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dc71:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dc75:	89 c1                	mov    ecx,eax
c001dc77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc79:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dc7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc83:	8d 42 02             	lea    eax,[edx+0x2]
c001dc86:	c1 e0 07             	shl    eax,0x7
c001dc89:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc8f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dc95:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dc9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc9f:	c1 e1 05             	shl    ecx,0x5
c001dca2:	01 c8                	add    eax,ecx
c001dca4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dca8:	83 e1 01             	and    ecx,0x1
c001dcab:	89 ce                	mov    esi,ecx
c001dcad:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcaf:	c1 e6 06             	shl    esi,0x6
c001dcb2:	83 e1 bf             	and    ecx,0xffffffbf
c001dcb5:	09 f1                	or     ecx,esi
c001dcb7:	88 08                	mov    BYTE PTR [eax],cl
c001dcb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcbb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dcc1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dcc7:	89 08                	mov    DWORD PTR [eax],ecx
c001dcc9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dccf:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dcd5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dcdb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dcde:	50                   	push   eax
c001dcdf:	68 90 00 00 00       	push   0x90
c001dce4:	6a 00                	push   0x0
c001dce6:	56                   	push   esi
c001dce7:	e8 04 28 fe ff       	call   c00004f0 <memset>
c001dcec:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dcf2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dcf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	48                   	dec    eax
c001dd00:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd05:	89 c1                	mov    ecx,eax
c001dd07:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd0d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd12:	09 c8                	or     eax,ecx
c001dd14:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd1a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd20:	83 c8 80             	or     eax,0xffffff80
c001dd23:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd29:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd30:	25 00 7f 00 00       	and    eax,0x7f00
c001dd35:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd3a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd3f:	66 89 06             	mov    WORD PTR [esi],ax
c001dd42:	b0 35                	mov    al,0x35
c001dd44:	75 02                	jne    c001dd48 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dd46:	b0 25                	mov    al,0x25
c001dd48:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd4b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001dd4f:	89 e8                	mov    eax,ebp
c001dd51:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd55:	c1 e8 10             	shr    eax,0x10
c001dd58:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd5b:	89 e8                	mov    eax,ebp
c001dd5d:	c1 e8 18             	shr    eax,0x18
c001dd60:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dd63:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dd67:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dd6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd6e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dd71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd75:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dd79:	89 d6                	mov    esi,edx
c001dd7b:	31 c0                	xor    eax,eax
c001dd7d:	c1 e6 07             	shl    esi,0x7
c001dd80:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001dd84:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dd8a:	80 e1 88             	and    cl,0x88
c001dd8d:	74 0a                	je     c001dd99 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dd8f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dd94:	74 0a                	je     c001dda0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dd96:	40                   	inc    eax
c001dd97:	eb eb                	jmp    c001dd84 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dd99:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dd9e:	75 17                	jne    c001ddb7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dda0:	83 ec 0c             	sub    esp,0xc
c001dda3:	68 05 33 02 c0       	push   0xc0023305
c001dda8:	e8 98 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001ddad:	83 c4 10             	add    esp,0x10
c001ddb0:	b8 01 00 00 00       	mov    eax,0x1
c001ddb5:	eb 5d                	jmp    c001de14 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ddb7:	b8 01 00 00 00       	mov    eax,0x1
c001ddbc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ddc0:	c1 e2 07             	shl    edx,0x7
c001ddc3:	d3 e0                	shl    eax,cl
c001ddc5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ddc9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ddcf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ddd5:	85 c8                	test   eax,ecx
c001ddd7:	74 16                	je     c001ddef <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001ddd9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001dddf:	0f ba e1 1e          	bt     ecx,0x1e
c001dde3:	73 ea                	jae    c001ddcf <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001dde5:	83 ec 0c             	sub    esp,0xc
c001dde8:	68 13 33 02 c0       	push   0xc0023313
c001dded:	eb b9                	jmp    c001dda8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ddef:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ddf5:	0f ba e0 1e          	bt     eax,0x1e
c001ddf9:	72 b5                	jb     c001ddb0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddfb:	31 c0                	xor    eax,eax
c001ddfd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de02:	75 10                	jne    c001de14 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de04:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de0a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de14:	83 c4 2c             	add    esp,0x2c
c001de17:	5b                   	pop    ebx
c001de18:	5e                   	pop    esi
c001de19:	5f                   	pop    edi
c001de1a:	5d                   	pop    ebp
c001de1b:	c3                   	ret    

c001de1c <SATA::read(unsigned long long, int, void*)>:
c001de1c:	55                   	push   ebp
c001de1d:	57                   	push   edi
c001de1e:	56                   	push   esi
c001de1f:	be 04 00 00 00       	mov    esi,0x4
c001de24:	53                   	push   ebx
c001de25:	83 ec 0c             	sub    esp,0xc
c001de28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de30:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de37:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de3b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de41:	0f 87 1a 02 00 00    	ja     c001e061 <SATA::read(unsigned long long, int, void*)+0x245>
c001de47:	be 06 00 00 00       	mov    esi,0x6
c001de4c:	85 c9                	test   ecx,ecx
c001de4e:	0f 84 0d 02 00 00    	je     c001e061 <SATA::read(unsigned long long, int, void*)+0x245>
c001de54:	56                   	push   esi
c001de55:	56                   	push   esi
c001de56:	6a 00                	push   0x0
c001de58:	51                   	push   ecx
c001de59:	53                   	push   ebx
c001de5a:	52                   	push   edx
c001de5b:	50                   	push   eax
c001de5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de60:	e8 63 fd ff ff       	call   c001dbc8 <SATA::access(unsigned long long, int, void*, bool)>
c001de65:	83 c4 20             	add    esp,0x20
c001de68:	89 c6                	mov    esi,eax
c001de6a:	85 c0                	test   eax,eax
c001de6c:	0f 85 ea 01 00 00    	jne    c001e05c <SATA::read(unsigned long long, int, void*)+0x240>
c001de72:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001de78:	bb 0a 00 00 00       	mov    ebx,0xa
c001de7d:	50                   	push   eax
c001de7e:	50                   	push   eax
c001de7f:	6a 0f                	push   0xf
c001de81:	6a 00                	push   0x0
c001de83:	e8 75 f2 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001de88:	5a                   	pop    edx
c001de89:	0f b6 c0             	movzx  eax,al
c001de8c:	59                   	pop    ecx
c001de8d:	b9 10 27 00 00       	mov    ecx,0x2710
c001de92:	50                   	push   eax
c001de93:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001de98:	99                   	cdq    
c001de99:	f7 f9                	idiv   ecx
c001de9b:	99                   	cdq    
c001de9c:	f7 fb                	idiv   ebx
c001de9e:	8d 42 30             	lea    eax,[edx+0x30]
c001dea1:	0f b6 c0             	movzx  eax,al
c001dea4:	50                   	push   eax
c001dea5:	e8 42 f2 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001deaa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001deb0:	5f                   	pop    edi
c001deb1:	5d                   	pop    ebp
c001deb2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001deb7:	6a 0f                	push   0xf
c001deb9:	6a 00                	push   0x0
c001debb:	e8 3d f2 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001dec0:	5a                   	pop    edx
c001dec1:	0f b6 c0             	movzx  eax,al
c001dec4:	59                   	pop    ecx
c001dec5:	50                   	push   eax
c001dec6:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001decb:	99                   	cdq    
c001decc:	f7 fd                	idiv   ebp
c001dece:	99                   	cdq    
c001decf:	f7 fb                	idiv   ebx
c001ded1:	8d 42 30             	lea    eax,[edx+0x30]
c001ded4:	0f b6 c0             	movzx  eax,al
c001ded7:	50                   	push   eax
c001ded8:	e8 0f f2 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001dedd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dee3:	5f                   	pop    edi
c001dee4:	bf 64 00 00 00       	mov    edi,0x64
c001dee9:	58                   	pop    eax
c001deea:	6a 0f                	push   0xf
c001deec:	6a 00                	push   0x0
c001deee:	e8 0a f2 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001def3:	5a                   	pop    edx
c001def4:	0f b6 c0             	movzx  eax,al
c001def7:	59                   	pop    ecx
c001def8:	50                   	push   eax
c001def9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001defe:	99                   	cdq    
c001deff:	f7 ff                	idiv   edi
c001df01:	99                   	cdq    
c001df02:	f7 fb                	idiv   ebx
c001df04:	8d 42 30             	lea    eax,[edx+0x30]
c001df07:	0f b6 c0             	movzx  eax,al
c001df0a:	50                   	push   eax
c001df0b:	e8 dc f1 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001df10:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df16:	58                   	pop    eax
c001df17:	5a                   	pop    edx
c001df18:	6a 0f                	push   0xf
c001df1a:	6a 00                	push   0x0
c001df1c:	e8 dc f1 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001df21:	59                   	pop    ecx
c001df22:	0f b6 c0             	movzx  eax,al
c001df25:	5a                   	pop    edx
c001df26:	50                   	push   eax
c001df27:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df2c:	99                   	cdq    
c001df2d:	f7 fb                	idiv   ebx
c001df2f:	99                   	cdq    
c001df30:	f7 fb                	idiv   ebx
c001df32:	8d 42 30             	lea    eax,[edx+0x30]
c001df35:	0f b6 c0             	movzx  eax,al
c001df38:	50                   	push   eax
c001df39:	e8 ae f1 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001df3e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df44:	59                   	pop    ecx
c001df45:	58                   	pop    eax
c001df46:	6a 0f                	push   0xf
c001df48:	6a 00                	push   0x0
c001df4a:	e8 ae f1 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001df4f:	5a                   	pop    edx
c001df50:	0f b6 c0             	movzx  eax,al
c001df53:	59                   	pop    ecx
c001df54:	50                   	push   eax
c001df55:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df5a:	99                   	cdq    
c001df5b:	f7 fb                	idiv   ebx
c001df5d:	8d 42 30             	lea    eax,[edx+0x30]
c001df60:	0f b6 c0             	movzx  eax,al
c001df63:	50                   	push   eax
c001df64:	e8 83 f1 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001df69:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df6f:	58                   	pop    eax
c001df70:	5a                   	pop    edx
c001df71:	6a 0f                	push   0xf
c001df73:	6a 00                	push   0x0
c001df75:	e8 83 f1 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001df7a:	59                   	pop    ecx
c001df7b:	0f b6 c0             	movzx  eax,al
c001df7e:	5a                   	pop    edx
c001df7f:	b9 10 27 00 00       	mov    ecx,0x2710
c001df84:	50                   	push   eax
c001df85:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001df8a:	99                   	cdq    
c001df8b:	f7 f9                	idiv   ecx
c001df8d:	99                   	cdq    
c001df8e:	f7 fb                	idiv   ebx
c001df90:	8d 42 30             	lea    eax,[edx+0x30]
c001df93:	0f b6 c0             	movzx  eax,al
c001df96:	50                   	push   eax
c001df97:	e8 50 f1 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001df9c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfa2:	59                   	pop    ecx
c001dfa3:	58                   	pop    eax
c001dfa4:	6a 0f                	push   0xf
c001dfa6:	6a 00                	push   0x0
c001dfa8:	e8 50 f1 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001dfad:	5a                   	pop    edx
c001dfae:	0f b6 c0             	movzx  eax,al
c001dfb1:	59                   	pop    ecx
c001dfb2:	50                   	push   eax
c001dfb3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfb8:	99                   	cdq    
c001dfb9:	f7 fd                	idiv   ebp
c001dfbb:	99                   	cdq    
c001dfbc:	f7 fb                	idiv   ebx
c001dfbe:	8d 42 30             	lea    eax,[edx+0x30]
c001dfc1:	0f b6 c0             	movzx  eax,al
c001dfc4:	50                   	push   eax
c001dfc5:	e8 22 f1 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001dfca:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfd0:	5d                   	pop    ebp
c001dfd1:	58                   	pop    eax
c001dfd2:	6a 0f                	push   0xf
c001dfd4:	6a 00                	push   0x0
c001dfd6:	e8 22 f1 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001dfdb:	5a                   	pop    edx
c001dfdc:	0f b6 c0             	movzx  eax,al
c001dfdf:	59                   	pop    ecx
c001dfe0:	50                   	push   eax
c001dfe1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfe6:	99                   	cdq    
c001dfe7:	f7 ff                	idiv   edi
c001dfe9:	99                   	cdq    
c001dfea:	f7 fb                	idiv   ebx
c001dfec:	8d 42 30             	lea    eax,[edx+0x30]
c001dfef:	0f b6 c0             	movzx  eax,al
c001dff2:	50                   	push   eax
c001dff3:	e8 f4 f0 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001dff8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dffe:	5f                   	pop    edi
c001dfff:	5d                   	pop    ebp
c001e000:	6a 0f                	push   0xf
c001e002:	6a 00                	push   0x0
c001e004:	e8 f4 f0 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e009:	5a                   	pop    edx
c001e00a:	0f b6 c0             	movzx  eax,al
c001e00d:	59                   	pop    ecx
c001e00e:	50                   	push   eax
c001e00f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e014:	99                   	cdq    
c001e015:	f7 fb                	idiv   ebx
c001e017:	99                   	cdq    
c001e018:	f7 fb                	idiv   ebx
c001e01a:	8d 42 30             	lea    eax,[edx+0x30]
c001e01d:	0f b6 c0             	movzx  eax,al
c001e020:	50                   	push   eax
c001e021:	e8 c6 f0 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e026:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e02c:	5f                   	pop    edi
c001e02d:	5d                   	pop    ebp
c001e02e:	6a 0f                	push   0xf
c001e030:	6a 00                	push   0x0
c001e032:	e8 c6 f0 ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e037:	5a                   	pop    edx
c001e038:	0f b6 c0             	movzx  eax,al
c001e03b:	59                   	pop    ecx
c001e03c:	50                   	push   eax
c001e03d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e042:	99                   	cdq    
c001e043:	f7 fb                	idiv   ebx
c001e045:	83 c2 30             	add    edx,0x30
c001e048:	0f b6 d2             	movzx  edx,dl
c001e04b:	52                   	push   edx
c001e04c:	e8 9b f0 ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e051:	83 c4 10             	add    esp,0x10
c001e054:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e05a:	eb 05                	jmp    c001e061 <SATA::read(unsigned long long, int, void*)+0x245>
c001e05c:	be 01 00 00 00       	mov    esi,0x1
c001e061:	83 c4 0c             	add    esp,0xc
c001e064:	89 f0                	mov    eax,esi
c001e066:	5b                   	pop    ebx
c001e067:	5e                   	pop    esi
c001e068:	5f                   	pop    edi
c001e069:	5d                   	pop    ebp
c001e06a:	c3                   	ret    
c001e06b:	90                   	nop

c001e06c <SATA::write(unsigned long long, int, void*)>:
c001e06c:	55                   	push   ebp
c001e06d:	b8 04 00 00 00       	mov    eax,0x4
c001e072:	57                   	push   edi
c001e073:	56                   	push   esi
c001e074:	53                   	push   ebx
c001e075:	83 ec 1c             	sub    esp,0x1c
c001e078:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e07c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e080:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e083:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e087:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e08b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e091:	0f 87 32 02 00 00    	ja     c001e2c9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e097:	b8 06 00 00 00       	mov    eax,0x6
c001e09c:	85 ff                	test   edi,edi
c001e09e:	0f 84 25 02 00 00    	je     c001e2c9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0a4:	89 ee                	mov    esi,ebp
c001e0a6:	c1 e6 09             	shl    esi,0x9
c001e0a9:	01 fe                	add    esi,edi
c001e0ab:	89 c8                	mov    eax,ecx
c001e0ad:	89 da                	mov    edx,ebx
c001e0af:	83 c0 01             	add    eax,0x1
c001e0b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0b6:	83 d2 00             	adc    edx,0x0
c001e0b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e0bd:	50                   	push   eax
c001e0be:	50                   	push   eax
c001e0bf:	6a 01                	push   0x1
c001e0c1:	57                   	push   edi
c001e0c2:	81 c7 00 02 00 00    	add    edi,0x200
c001e0c8:	6a 01                	push   0x1
c001e0ca:	53                   	push   ebx
c001e0cb:	51                   	push   ecx
c001e0cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0d0:	e8 f3 fa ff ff       	call   c001dbc8 <SATA::access(unsigned long long, int, void*, bool)>
c001e0d5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e0dd:	83 c4 20             	add    esp,0x20
c001e0e0:	39 f7                	cmp    edi,esi
c001e0e2:	75 c7                	jne    c001e0ab <SATA::write(unsigned long long, int, void*)+0x3f>
c001e0e4:	bb 0a 00 00 00       	mov    ebx,0xa
c001e0e9:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e0ef:	bd 10 27 00 00       	mov    ebp,0x2710
c001e0f4:	50                   	push   eax
c001e0f5:	50                   	push   eax
c001e0f6:	6a 0f                	push   0xf
c001e0f8:	6a 00                	push   0x0
c001e0fa:	e8 fe ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e0ff:	5a                   	pop    edx
c001e100:	0f b6 c0             	movzx  eax,al
c001e103:	59                   	pop    ecx
c001e104:	50                   	push   eax
c001e105:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e10a:	99                   	cdq    
c001e10b:	f7 fd                	idiv   ebp
c001e10d:	99                   	cdq    
c001e10e:	f7 fb                	idiv   ebx
c001e110:	8d 42 30             	lea    eax,[edx+0x30]
c001e113:	0f b6 c0             	movzx  eax,al
c001e116:	50                   	push   eax
c001e117:	e8 d0 ef ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e11c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e122:	5e                   	pop    esi
c001e123:	5f                   	pop    edi
c001e124:	bf e8 03 00 00       	mov    edi,0x3e8
c001e129:	6a 0f                	push   0xf
c001e12b:	6a 00                	push   0x0
c001e12d:	e8 cb ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e132:	5a                   	pop    edx
c001e133:	0f b6 c0             	movzx  eax,al
c001e136:	59                   	pop    ecx
c001e137:	50                   	push   eax
c001e138:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e13d:	99                   	cdq    
c001e13e:	f7 ff                	idiv   edi
c001e140:	99                   	cdq    
c001e141:	f7 fb                	idiv   ebx
c001e143:	8d 42 30             	lea    eax,[edx+0x30]
c001e146:	0f b6 c0             	movzx  eax,al
c001e149:	50                   	push   eax
c001e14a:	e8 9d ef ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e14f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e155:	5e                   	pop    esi
c001e156:	be 64 00 00 00       	mov    esi,0x64
c001e15b:	58                   	pop    eax
c001e15c:	6a 0f                	push   0xf
c001e15e:	6a 00                	push   0x0
c001e160:	e8 98 ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e165:	5a                   	pop    edx
c001e166:	0f b6 c0             	movzx  eax,al
c001e169:	59                   	pop    ecx
c001e16a:	50                   	push   eax
c001e16b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e170:	99                   	cdq    
c001e171:	f7 fe                	idiv   esi
c001e173:	99                   	cdq    
c001e174:	f7 fb                	idiv   ebx
c001e176:	8d 42 30             	lea    eax,[edx+0x30]
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	50                   	push   eax
c001e17d:	e8 6a ef ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e182:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e188:	58                   	pop    eax
c001e189:	5a                   	pop    edx
c001e18a:	6a 0f                	push   0xf
c001e18c:	6a 00                	push   0x0
c001e18e:	e8 6a ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e193:	59                   	pop    ecx
c001e194:	0f b6 c0             	movzx  eax,al
c001e197:	5a                   	pop    edx
c001e198:	50                   	push   eax
c001e199:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e19e:	99                   	cdq    
c001e19f:	f7 fb                	idiv   ebx
c001e1a1:	99                   	cdq    
c001e1a2:	f7 fb                	idiv   ebx
c001e1a4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1a7:	0f b6 c0             	movzx  eax,al
c001e1aa:	50                   	push   eax
c001e1ab:	e8 3c ef ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e1b0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1b6:	59                   	pop    ecx
c001e1b7:	58                   	pop    eax
c001e1b8:	6a 0f                	push   0xf
c001e1ba:	6a 00                	push   0x0
c001e1bc:	e8 3c ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e1c1:	5a                   	pop    edx
c001e1c2:	0f b6 c0             	movzx  eax,al
c001e1c5:	59                   	pop    ecx
c001e1c6:	50                   	push   eax
c001e1c7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1cc:	99                   	cdq    
c001e1cd:	f7 fb                	idiv   ebx
c001e1cf:	83 c2 30             	add    edx,0x30
c001e1d2:	0f b6 d2             	movzx  edx,dl
c001e1d5:	52                   	push   edx
c001e1d6:	e8 11 ef ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e1db:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e1e1:	58                   	pop    eax
c001e1e2:	5a                   	pop    edx
c001e1e3:	6a 0f                	push   0xf
c001e1e5:	6a 00                	push   0x0
c001e1e7:	e8 11 ef ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e1ec:	59                   	pop    ecx
c001e1ed:	0f b6 c0             	movzx  eax,al
c001e1f0:	5a                   	pop    edx
c001e1f1:	50                   	push   eax
c001e1f2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1f7:	99                   	cdq    
c001e1f8:	f7 fd                	idiv   ebp
c001e1fa:	99                   	cdq    
c001e1fb:	f7 fb                	idiv   ebx
c001e1fd:	8d 42 30             	lea    eax,[edx+0x30]
c001e200:	0f b6 c0             	movzx  eax,al
c001e203:	50                   	push   eax
c001e204:	e8 e3 ee ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e209:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e20f:	59                   	pop    ecx
c001e210:	5d                   	pop    ebp
c001e211:	6a 0f                	push   0xf
c001e213:	6a 00                	push   0x0
c001e215:	e8 e3 ee ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e21a:	5a                   	pop    edx
c001e21b:	0f b6 c0             	movzx  eax,al
c001e21e:	59                   	pop    ecx
c001e21f:	50                   	push   eax
c001e220:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e225:	99                   	cdq    
c001e226:	f7 ff                	idiv   edi
c001e228:	99                   	cdq    
c001e229:	f7 fb                	idiv   ebx
c001e22b:	8d 42 30             	lea    eax,[edx+0x30]
c001e22e:	0f b6 c0             	movzx  eax,al
c001e231:	50                   	push   eax
c001e232:	e8 b5 ee ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e237:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e23d:	5f                   	pop    edi
c001e23e:	5d                   	pop    ebp
c001e23f:	6a 0f                	push   0xf
c001e241:	6a 00                	push   0x0
c001e243:	e8 b5 ee ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e248:	5a                   	pop    edx
c001e249:	0f b6 c0             	movzx  eax,al
c001e24c:	59                   	pop    ecx
c001e24d:	50                   	push   eax
c001e24e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e253:	99                   	cdq    
c001e254:	f7 fe                	idiv   esi
c001e256:	99                   	cdq    
c001e257:	f7 fb                	idiv   ebx
c001e259:	8d 42 30             	lea    eax,[edx+0x30]
c001e25c:	0f b6 c0             	movzx  eax,al
c001e25f:	50                   	push   eax
c001e260:	e8 87 ee ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e265:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e26b:	5e                   	pop    esi
c001e26c:	5f                   	pop    edi
c001e26d:	6a 0f                	push   0xf
c001e26f:	6a 00                	push   0x0
c001e271:	e8 87 ee ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e276:	5d                   	pop    ebp
c001e277:	0f b6 c0             	movzx  eax,al
c001e27a:	5a                   	pop    edx
c001e27b:	50                   	push   eax
c001e27c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e281:	99                   	cdq    
c001e282:	f7 fb                	idiv   ebx
c001e284:	99                   	cdq    
c001e285:	f7 fb                	idiv   ebx
c001e287:	8d 42 30             	lea    eax,[edx+0x30]
c001e28a:	0f b6 c0             	movzx  eax,al
c001e28d:	50                   	push   eax
c001e28e:	e8 59 ee ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e293:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e299:	59                   	pop    ecx
c001e29a:	5e                   	pop    esi
c001e29b:	6a 0f                	push   0xf
c001e29d:	6a 00                	push   0x0
c001e29f:	e8 59 ee ff ff       	call   c001d0fd <combineColours(unsigned char, unsigned char)>
c001e2a4:	5f                   	pop    edi
c001e2a5:	0f b6 c0             	movzx  eax,al
c001e2a8:	5d                   	pop    ebp
c001e2a9:	50                   	push   eax
c001e2aa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2af:	99                   	cdq    
c001e2b0:	f7 fb                	idiv   ebx
c001e2b2:	83 c2 30             	add    edx,0x30
c001e2b5:	0f b6 d2             	movzx  edx,dl
c001e2b8:	52                   	push   edx
c001e2b9:	e8 2e ee ff ff       	call   c001d0ec <combineCharAndColour(char, unsigned char)>
c001e2be:	83 c4 10             	add    esp,0x10
c001e2c1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e2c7:	31 c0                	xor    eax,eax
c001e2c9:	83 c4 1c             	add    esp,0x1c
c001e2cc:	5b                   	pop    ebx
c001e2cd:	5e                   	pop    esi
c001e2ce:	5f                   	pop    edi
c001e2cf:	5d                   	pop    ebp
c001e2d0:	c3                   	ret    
c001e2d1:	90                   	nop

c001e2d2 <SATAPI::write(unsigned long long, int, void*)>:
c001e2d2:	b8 03 00 00 00       	mov    eax,0x3
c001e2d7:	c3                   	ret    

c001e2d8 <SATAPI::close(int, int, void*)>:
c001e2d8:	83 ec 0c             	sub    esp,0xc
c001e2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2e5:	85 c0                	test   eax,eax
c001e2e7:	74 0c                	je     c001e2f5 <SATAPI::close(int, int, void*)+0x1d>
c001e2e9:	83 ec 0c             	sub    esp,0xc
c001e2ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2ee:	50                   	push   eax
c001e2ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	31 c0                	xor    eax,eax
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	c3                   	ret    
c001e2fb:	90                   	nop

c001e2fc <SATAPI::SATAPI()>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e303:	83 ec 04             	sub    esp,0x4
c001e306:	68 00 08 00 00       	push   0x800
c001e30b:	68 5c 33 02 c0       	push   0xc002335c
c001e310:	50                   	push   eax
c001e311:	e8 18 ea fe ff       	call   c000cd2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e316:	83 c4 10             	add    esp,0x10
c001e319:	ba 50 34 02 c0       	mov    edx,0xc0023450
c001e31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e322:	89 10                	mov    DWORD PTR [eax],edx
c001e324:	90                   	nop
c001e325:	83 c4 0c             	add    esp,0xc
c001e328:	c3                   	ret    
c001e329:	90                   	nop

c001e32a <SATAPI::diskRemoved()>:
c001e32a:	c3                   	ret    
c001e32b:	90                   	nop

c001e32c <SATAPI::diskInserted()>:
c001e32c:	83 ec 18             	sub    esp,0x18
c001e32f:	68 68 33 02 c0       	push   0xc0023368
c001e334:	e8 0c c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e33d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e344:	83 c4 1c             	add    esp,0x1c
c001e347:	c3                   	ret    

c001e348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e348:	55                   	push   ebp
c001e349:	57                   	push   edi
c001e34a:	56                   	push   esi
c001e34b:	53                   	push   ebx
c001e34c:	83 ec 34             	sub    esp,0x34
c001e34f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e353:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e357:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e35b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e35f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e363:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e369:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e36f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e373:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e379:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e37d:	83 c0 02             	add    eax,0x2
c001e380:	c1 e0 07             	shl    eax,0x7
c001e383:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e38f:	c1 e0 07             	shl    eax,0x7
c001e392:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e396:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e39a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3a8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3ae:	e8 21 e5 ff ff       	call   c001c8d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3b7:	83 c4 10             	add    esp,0x10
c001e3ba:	b8 01 00 00 00       	mov    eax,0x1
c001e3bf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e3c4:	0f 84 53 02 00 00    	je     c001e61d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e3ca:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3d6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e3dc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e3e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3e6:	c1 e1 05             	shl    ecx,0x5
c001e3e9:	01 c8                	add    eax,ecx
c001e3eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e3ed:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e3f3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e3f9:	89 08                	mov    DWORD PTR [eax],ecx
c001e3fb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e401:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e407:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e40d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e410:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e413:	50                   	push   eax
c001e414:	68 90 00 00 00       	push   0x90
c001e419:	6a 00                	push   0x0
c001e41b:	53                   	push   ebx
c001e41c:	e8 cf 20 fe ff       	call   c00004f0 <memset>
c001e421:	b9 0c 00 00 00       	mov    ecx,0xc
c001e426:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e42a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e42c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e432:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e436:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e43c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e440:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e444:	48                   	dec    eax
c001e445:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e44a:	89 c1                	mov    ecx,eax
c001e44c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e452:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e457:	09 c8                	or     eax,ecx
c001e459:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e45f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e465:	83 c8 80             	or     eax,0xffffff80
c001e468:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e46e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e471:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e475:	25 00 7f 00 00       	and    eax,0x7f00
c001e47a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e47e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e483:	66 89 03             	mov    WORD PTR [ebx],ax
c001e486:	89 d0                	mov    eax,edx
c001e488:	c1 ea 18             	shr    edx,0x18
c001e48b:	c1 e8 10             	shr    eax,0x10
c001e48e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e491:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e494:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e498:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e49b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e49f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4a6:	83 c4 10             	add    esp,0x10
c001e4a9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4b1:	31 c0                	xor    eax,eax
c001e4b3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e4b9:	80 e1 88             	and    cl,0x88
c001e4bc:	74 0a                	je     c001e4c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e4be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4c3:	74 0a                	je     c001e4cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e4c5:	40                   	inc    eax
c001e4c6:	eb eb                	jmp    c001e4b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e4c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4cd:	75 43                	jne    c001e512 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e4cf:	83 ec 0c             	sub    esp,0xc
c001e4d2:	68 80 33 02 c0       	push   0xc0023380
c001e4d7:	e8 69 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e4dc:	58                   	pop    eax
c001e4dd:	5a                   	pop    edx
c001e4de:	68 95 33 02 c0       	push   0xc0023395
c001e4e3:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e4e9:	e8 b8 a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e4ee:	59                   	pop    ecx
c001e4ef:	5b                   	pop    ebx
c001e4f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4f4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4fa:	e8 6f e4 ff ff       	call   c001c96e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e4ff:	5e                   	pop    esi
c001e500:	5f                   	pop    edi
c001e501:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e505:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e50b:	e8 3e e4 ff ff       	call   c001c94e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e510:	eb 48                	jmp    c001e55a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e512:	be 01 00 00 00       	mov    esi,0x1
c001e517:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e51b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e51f:	d3 e6                	shl    esi,cl
c001e521:	c1 e7 07             	shl    edi,0x7
c001e524:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e52a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e52f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e533:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e539:	85 c6                	test   esi,eax
c001e53b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e541:	0f 84 a3 00 00 00    	je     c001e5ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e547:	0f ba e0 1e          	bt     eax,0x1e
c001e54b:	73 1a                	jae    c001e567 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e54d:	83 ec 0c             	sub    esp,0xc
c001e550:	68 a7 33 02 c0       	push   0xc00233a7
c001e555:	e8 eb c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	b8 01 00 00 00       	mov    eax,0x1
c001e562:	e9 b6 00 00 00       	jmp    c001e61d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e567:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e56d:	83 f8 0d             	cmp    eax,0xd
c001e570:	77 0a                	ja     c001e57c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e572:	83 ec 0c             	sub    esp,0xc
c001e575:	68 c8 00 00 00       	push   0xc8
c001e57a:	eb 28                	jmp    c001e5a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e57c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e582:	83 f8 0d             	cmp    eax,0xd
c001e585:	77 0a                	ja     c001e591 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e587:	83 ec 0c             	sub    esp,0xc
c001e58a:	68 58 02 00 00       	push   0x258
c001e58f:	eb 13                	jmp    c001e5a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e591:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e597:	83 f8 06             	cmp    eax,0x6
c001e59a:	77 10                	ja     c001e5ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e59c:	83 ec 0c             	sub    esp,0xc
c001e59f:	68 dc 05 00 00       	push   0x5dc
c001e5a4:	e8 c7 7d ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001e5a9:	83 c4 10             	add    esp,0x10
c001e5ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5b0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5b3:	75 06                	jne    c001e5bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e5b5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e5b9:	74 15                	je     c001e5d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e5bb:	83 fb 06             	cmp    ebx,0x6
c001e5be:	77 10                	ja     c001e5d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	68 c4 09 00 00       	push   0x9c4
c001e5c8:	e8 a3 7d ff ff       	call   c0016370 <milliTenthSleep(unsigned int)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	43                   	inc    ebx
c001e5d1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e5d7:	0f 85 56 ff ff ff    	jne    c001e533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e5dd:	83 ec 0c             	sub    esp,0xc
c001e5e0:	68 ba 33 02 c0       	push   0xc00233ba
c001e5e5:	e9 6b ff ff ff       	jmp    c001e555 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e5ea:	0f ba e0 1e          	bt     eax,0x1e
c001e5ee:	73 0d                	jae    c001e5fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e5f0:	83 ec 0c             	sub    esp,0xc
c001e5f3:	68 ce 33 02 c0       	push   0xc00233ce
c001e5f8:	e9 58 ff ff ff       	jmp    c001e555 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e5fd:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e602:	74 17                	je     c001e61b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e604:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e609:	74 10                	je     c001e61b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e60b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e611:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e615:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e619:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e61b:	31 c0                	xor    eax,eax
c001e61d:	83 c4 2c             	add    esp,0x2c
c001e620:	5b                   	pop    ebx
c001e621:	5e                   	pop    esi
c001e622:	5f                   	pop    edi
c001e623:	5d                   	pop    ebp
c001e624:	c3                   	ret    
c001e625:	90                   	nop

c001e626 <SATAPI::eject()>:
c001e626:	57                   	push   edi
c001e627:	b9 03 00 00 00       	mov    ecx,0x3
c001e62c:	83 ec 18             	sub    esp,0x18
c001e62f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e633:	fc                   	cld    
c001e634:	31 c0                	xor    eax,eax
c001e636:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e638:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e63d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e642:	50                   	push   eax
c001e643:	6a 00                	push   0x0
c001e645:	6a 00                	push   0x0
c001e647:	6a 00                	push   0x0
c001e649:	6a 00                	push   0x0
c001e64b:	6a 02                	push   0x2
c001e64d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e651:	50                   	push   eax
c001e652:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e656:	e8 ed fc ff ff       	call   c001e348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e65b:	31 c0                	xor    eax,eax
c001e65d:	83 c4 38             	add    esp,0x38
c001e660:	5f                   	pop    edi
c001e661:	c3                   	ret    

c001e662 <SATAPI::detectMedia()>:
c001e662:	53                   	push   ebx
c001e663:	83 ec 14             	sub    esp,0x14
c001e666:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e66a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e670:	e8 37 00 ff ff       	call   c000e6ac <VCache::writeWriteBuffer()>
c001e675:	59                   	pop    ecx
c001e676:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e67c:	e8 1b 00 ff ff       	call   c000e69c <VCache::invalidateReadBuffer()>
c001e681:	c7 04 24 e3 33 02 c0 	mov    DWORD PTR [esp],0xc00233e3
c001e688:	e8 b8 c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	31 c0                	xor    eax,eax
c001e692:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e699:	85 d2                	test   edx,edx
c001e69b:	74 0f                	je     c001e6ac <SATAPI::detectMedia()+0x4a>
c001e69d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6a3:	75 07                	jne    c001e6ac <SATAPI::detectMedia()+0x4a>
c001e6a5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6ac:	40                   	inc    eax
c001e6ad:	83 f8 1a             	cmp    eax,0x1a
c001e6b0:	75 e0                	jne    c001e692 <SATAPI::detectMedia()+0x30>
c001e6b2:	83 c4 08             	add    esp,0x8
c001e6b5:	5b                   	pop    ebx
c001e6b6:	c3                   	ret    
c001e6b7:	90                   	nop

c001e6b8 <SATAPI::open(int, int, void*)>:
c001e6b8:	56                   	push   esi
c001e6b9:	53                   	push   ebx
c001e6ba:	51                   	push   ecx
c001e6bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e6c3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e6cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e6d3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e6dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6e1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e6eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e6f1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e6f8:	e8 c2 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e6fd:	89 c6                	mov    esi,eax
c001e6ff:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e705:	81 c6 00 10 00 00    	add    esi,0x1000
c001e70b:	e8 af 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e710:	39 c6                	cmp    esi,eax
c001e712:	74 10                	je     c001e724 <SATAPI::open(int, int, void*)+0x6c>
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	68 f8 33 02 c0       	push   0xc00233f8
c001e71c:	e8 9a 2e ff ff       	call   c00115bb <KePanic(char const*)>
c001e721:	83 c4 10             	add    esp,0x10
c001e724:	83 ec 0c             	sub    esp,0xc
c001e727:	6a 02                	push   0x2
c001e729:	e8 df ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e72e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e734:	6a 03                	push   0x3
c001e736:	50                   	push   eax
c001e737:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e73d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e743:	e8 d8 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e748:	83 c4 14             	add    esp,0x14
c001e74b:	68 78 01 00 00       	push   0x178
c001e750:	e8 61 93 fe ff       	call   c0007ab6 <malloc>
c001e755:	83 c4 0c             	add    esp,0xc
c001e758:	89 c6                	mov    esi,eax
c001e75a:	6a 00                	push   0x0
c001e75c:	68 ff ff ff 7f       	push   0x7fffffff
c001e761:	6a 00                	push   0x0
c001e763:	6a 00                	push   0x0
c001e765:	53                   	push   ebx
c001e766:	68 0e 34 02 c0       	push   0xc002340e
c001e76b:	50                   	push   eax
c001e76c:	e8 97 f3 fe ff       	call   c000db08 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e771:	83 c4 14             	add    esp,0x14
c001e774:	56                   	push   esi
c001e775:	e8 4e f4 fe ff       	call   c000dbc8 <LogicalDisk::assignDriveLetter()>
c001e77a:	5a                   	pop    edx
c001e77b:	0f be c0             	movsx  eax,al
c001e77e:	59                   	pop    ecx
c001e77f:	50                   	push   eax
c001e780:	68 60 32 02 c0       	push   0xc0023260
c001e785:	e8 bb c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e78a:	58                   	pop    eax
c001e78b:	5a                   	pop    edx
c001e78c:	56                   	push   esi
c001e78d:	53                   	push   ebx
c001e78e:	e8 cf e1 fe ff       	call   c000c962 <Device::addChild(Device*)>
c001e793:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e79c:	e8 f5 e5 fe ff       	call   c000cd96 <PhysicalDisk::startCache()>
c001e7a1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7ab:	e8 b2 fe ff ff       	call   c001e662 <SATAPI::detectMedia()>
c001e7b0:	83 c4 14             	add    esp,0x14
c001e7b3:	31 c0                	xor    eax,eax
c001e7b5:	5b                   	pop    ebx
c001e7b6:	5e                   	pop    esi
c001e7b7:	c3                   	ret    

c001e7b8 <SATAPI::read(unsigned long long, int, void*)>:
c001e7b8:	57                   	push   edi
c001e7b9:	56                   	push   esi
c001e7ba:	53                   	push   ebx
c001e7bb:	83 ec 30             	sub    esp,0x30
c001e7be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e7c2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e7c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e7ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e7ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7d6:	83 fe 04             	cmp    esi,0x4
c001e7d9:	7e 10                	jle    c001e7eb <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e7db:	83 ec 0c             	sub    esp,0xc
c001e7de:	68 1c 34 02 c0       	push   0xc002341c
c001e7e3:	e8 d3 2d ff ff       	call   c00115bb <KePanic(char const*)>
c001e7e8:	83 c4 10             	add    esp,0x10
c001e7eb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e7f1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e7f7:	51                   	push   ecx
c001e7f8:	50                   	push   eax
c001e7f9:	83 c0 02             	add    eax,0x2
c001e7fc:	c1 e0 07             	shl    eax,0x7
c001e7ff:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e805:	50                   	push   eax
c001e806:	52                   	push   edx
c001e807:	e8 8c e1 ff ff       	call   c001c998 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e80c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e810:	b9 03 00 00 00       	mov    ecx,0x3
c001e815:	fc                   	cld    
c001e816:	31 c0                	xor    eax,eax
c001e818:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e81a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e81f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e824:	83 c4 0c             	add    esp,0xc
c001e827:	6a 00                	push   0x0
c001e829:	6a 00                	push   0x0
c001e82b:	6a 00                	push   0x0
c001e82d:	6a 00                	push   0x0
c001e82f:	6a 02                	push   0x2
c001e831:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e835:	50                   	push   eax
c001e836:	53                   	push   ebx
c001e837:	e8 0c fb ff ff       	call   c001e348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e83c:	83 c4 20             	add    esp,0x20
c001e83f:	85 c0                	test   eax,eax
c001e841:	75 44                	jne    c001e887 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e843:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e847:	b9 03 00 00 00       	mov    ecx,0x3
c001e84c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e852:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e857:	0f c8                	bswap  eax
c001e859:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e85d:	89 f0                	mov    eax,esi
c001e85f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e863:	50                   	push   eax
c001e864:	56                   	push   esi
c001e865:	c1 e6 0b             	shl    esi,0xb
c001e868:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e86c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e870:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e874:	56                   	push   esi
c001e875:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e879:	50                   	push   eax
c001e87a:	53                   	push   ebx
c001e87b:	e8 c8 fa ff ff       	call   c001e348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e880:	83 c4 20             	add    esp,0x20
c001e883:	85 c0                	test   eax,eax
c001e885:	74 14                	je     c001e89b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	53                   	push   ebx
c001e88f:	e8 ce fd ff ff       	call   c001e662 <SATAPI::detectMedia()>
c001e894:	83 c4 10             	add    esp,0x10
c001e897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e89b:	83 c4 30             	add    esp,0x30
c001e89e:	5b                   	pop    ebx
c001e89f:	5e                   	pop    esi
c001e8a0:	5f                   	pop    edi
c001e8a1:	c3                   	ret    

c001e8a2 <IOAPIC::close(int, int, void*)>:
c001e8a2:	b8 00 00 00 00       	mov    eax,0x0
c001e8a7:	c3                   	ret    

c001e8a8 <apicGetBase()>:
c001e8a8:	55                   	push   ebp
c001e8a9:	89 e5                	mov    ebp,esp
c001e8ab:	83 ec 18             	sub    esp,0x18
c001e8ae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8b3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8b9:	83 e0 08             	and    eax,0x8
c001e8bc:	0f b6 c0             	movzx  eax,al
c001e8bf:	85 c0                	test   eax,eax
c001e8c1:	75 07                	jne    c001e8ca <apicGetBase()+0x22>
c001e8c3:	b8 00 00 00 00       	mov    eax,0x0
c001e8c8:	eb 21                	jmp    c001e8eb <apicGetBase()+0x43>
c001e8ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8cf:	83 ec 08             	sub    esp,0x8
c001e8d2:	6a 1b                	push   0x1b
c001e8d4:	50                   	push   eax
c001e8d5:	e8 e6 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e8da:	83 c4 10             	add    esp,0x10
c001e8dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e8e0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e8e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8e6:	25 00 00 ff ff       	and    eax,0xffff0000
c001e8eb:	c9                   	leave  
c001e8ec:	c3                   	ret    
c001e8ed:	90                   	nop

c001e8ee <IOAPIC::IOAPIC()>:
c001e8ee:	83 ec 0c             	sub    esp,0xc
c001e8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f5:	83 ec 08             	sub    esp,0x8
c001e8f8:	68 80 34 02 c0       	push   0xc0023480
c001e8fd:	50                   	push   eax
c001e8fe:	e8 f7 e1 fe ff       	call   c000cafa <Device::Device(char const*)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	ba 90 34 02 c0       	mov    edx,0xc0023490
c001e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90f:	89 10                	mov    DWORD PTR [eax],edx
c001e911:	90                   	nop
c001e912:	83 c4 0c             	add    esp,0xc
c001e915:	c3                   	ret    

c001e916 <apicOpen()>:
c001e916:	55                   	push   ebp
c001e917:	89 e5                	mov    ebp,esp
c001e919:	53                   	push   ebx
c001e91a:	83 ec 34             	sub    esp,0x34
c001e91d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e922:	83 f0 01             	xor    eax,0x1
c001e925:	0f b6 c0             	movzx  eax,al
c001e928:	85 c0                	test   eax,eax
c001e92a:	0f 84 a3 00 00 00    	je     c001e9d3 <apicOpen()+0xbd>
c001e930:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e934:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e939:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e93d:	0f b6 c0             	movzx  eax,al
c001e940:	39 c2                	cmp    edx,eax
c001e942:	0f 83 84 00 00 00    	jae    c001e9cc <apicOpen()+0xb6>
c001e948:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e955:	e8 5c 91 fe ff       	call   c0007ab6 <malloc>
c001e95a:	83 c4 10             	add    esp,0x10
c001e95d:	89 c3                	mov    ebx,eax
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	53                   	push   ebx
c001e963:	e8 86 ff ff ff       	call   c001e8ee <IOAPIC::IOAPIC()>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e96e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e972:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e975:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e97c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e981:	83 c0 01             	add    eax,0x1
c001e984:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e989:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e98e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e994:	83 ec 08             	sub    esp,0x8
c001e997:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e99a:	50                   	push   eax
c001e99b:	e8 c2 df fe ff       	call   c000c962 <Device::addChild(Device*)>
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a8:	83 c0 08             	add    eax,0x8
c001e9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ad:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9b1:	6a 00                	push   0x0
c001e9b3:	6a 00                	push   0x0
c001e9b5:	52                   	push   edx
c001e9b6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9b9:	ff d0                	call   eax
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e9c1:	83 c0 01             	add    eax,0x1
c001e9c4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e9c7:	e9 68 ff ff ff       	jmp    c001e934 <apicOpen()+0x1e>
c001e9cc:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e9d3:	e8 d0 fe ff ff       	call   c001e8a8 <apicGetBase()>
c001e9d8:	05 f0 00 00 00       	add    eax,0xf0
c001e9dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9e3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9e5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e9e8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e9ef:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e9f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9f9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e9fc:	89 10                	mov    DWORD PTR [eax],edx
c001e9fe:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea05:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea0a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea0d:	7d 7c                	jge    c001ea8b <apicOpen()+0x175>
c001ea0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea12:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea19:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea1f:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea26:	c1 e8 08             	shr    eax,0x8
c001ea29:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea30:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea37:	c1 e8 18             	shr    eax,0x18
c001ea3a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea3d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea41:	3d ff 00 00 00       	cmp    eax,0xff
c001ea46:	75 3a                	jne    c001ea82 <apicOpen()+0x16c>
c001ea48:	e8 5b fe ff ff       	call   c001e8a8 <apicGetBase()>
c001ea4d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea51:	83 fa 01             	cmp    edx,0x1
c001ea54:	75 07                	jne    c001ea5d <apicOpen()+0x147>
c001ea56:	ba 60 03 00 00       	mov    edx,0x360
c001ea5b:	eb 05                	jmp    c001ea62 <apicOpen()+0x14c>
c001ea5d:	ba 50 03 00 00       	mov    edx,0x350
c001ea62:	01 d0                	add    eax,edx
c001ea64:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ea67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea6c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ea6f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ea76:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ea7a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea7d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ea80:	89 10                	mov    DWORD PTR [eax],edx
c001ea82:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ea86:	e9 7a ff ff ff       	jmp    c001ea05 <apicOpen()+0xef>
c001ea8b:	90                   	nop
c001ea8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea8f:	c9                   	leave  
c001ea90:	c3                   	ret    
c001ea91:	90                   	nop

c001ea92 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ea92:	55                   	push   ebp
c001ea93:	89 e5                	mov    ebp,esp
c001ea95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ea9e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eaa1:	72 1d                	jb     c001eac0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eaa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaa6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eaac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaaf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eab5:	01 d0                	add    eax,edx
c001eab7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eaba:	73 04                	jae    c001eac0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eabc:	b0 01                	mov    al,0x1
c001eabe:	eb 02                	jmp    c001eac2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eac0:	b0 00                	mov    al,0x0
c001eac2:	5d                   	pop    ebp
c001eac3:	c3                   	ret    

c001eac4 <IOAPIC::read(int)>:
c001eac4:	55                   	push   ebp
c001eac5:	89 e5                	mov    ebp,esp
c001eac7:	83 ec 10             	sub    esp,0x10
c001eaca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eacd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ead3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ead6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ead9:	0f b6 d0             	movzx  edx,al
c001eadc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eadf:	89 10                	mov    DWORD PTR [eax],edx
c001eae1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eae4:	83 c0 10             	add    eax,0x10
c001eae7:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae9:	c9                   	leave  
c001eaea:	c3                   	ret    
c001eaeb:	90                   	nop

c001eaec <IOAPIC::open(int, int, void*)>:
c001eaec:	55                   	push   ebp
c001eaed:	89 e5                	mov    ebp,esp
c001eaef:	57                   	push   edi
c001eaf0:	56                   	push   esi
c001eaf1:	53                   	push   ebx
c001eaf2:	83 ec 04             	sub    esp,0x4
c001eaf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaf8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eafb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb0a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb23:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb2d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb36:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb45:	0f b6 f0             	movzx  esi,al
c001eb48:	89 d0                	mov    eax,edx
c001eb4a:	ba 00 00 00 00       	mov    edx,0x0
c001eb4f:	89 c7                	mov    edi,eax
c001eb51:	83 e7 ff             	and    edi,0xffffffff
c001eb54:	89 f9                	mov    ecx,edi
c001eb56:	0f b6 da             	movzx  ebx,dl
c001eb59:	89 c8                	mov    eax,ecx
c001eb5b:	89 da                	mov    edx,ebx
c001eb5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eb60:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eb63:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb67:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb6b:	83 e0 00             	and    eax,0x0
c001eb6e:	09 d0                	or     eax,edx
c001eb70:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb77:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb7d:	8d 50 01             	lea    edx,[eax+0x1]
c001eb80:	88 d1                	mov    cl,dl
c001eb82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eb85:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001eb8b:	0f b6 d0             	movzx  edx,al
c001eb8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb91:	83 c2 08             	add    edx,0x8
c001eb94:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001eb98:	0f b6 c9             	movzx  ecx,cl
c001eb9b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001eba1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001eba5:	6a 01                	push   0x1
c001eba7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebaa:	e8 15 ff ff ff       	call   c001eac4 <IOAPIC::read(int)>
c001ebaf:	83 c4 08             	add    esp,0x8
c001ebb2:	c1 f8 10             	sar    eax,0x10
c001ebb5:	0f b6 c0             	movzx  eax,al
c001ebb8:	8d 50 01             	lea    edx,[eax+0x1]
c001ebbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbe:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ebc4:	b8 00 00 00 00       	mov    eax,0x0
c001ebc9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ebcc:	5b                   	pop    ebx
c001ebcd:	5e                   	pop    esi
c001ebce:	5f                   	pop    edi
c001ebcf:	5d                   	pop    ebp
c001ebd0:	c3                   	ret    
c001ebd1:	90                   	nop

c001ebd2 <IOAPIC::write(int, int)>:
c001ebd2:	55                   	push   ebp
c001ebd3:	89 e5                	mov    ebp,esp
c001ebd5:	83 ec 10             	sub    esp,0x10
c001ebd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebdb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebe1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebe7:	0f b6 d0             	movzx  edx,al
c001ebea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebed:	89 10                	mov    DWORD PTR [eax],edx
c001ebef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebf2:	8d 50 10             	lea    edx,[eax+0x10]
c001ebf5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ebf8:	89 02                	mov    DWORD PTR [edx],eax
c001ebfa:	90                   	nop
c001ebfb:	c9                   	leave  
c001ebfc:	c3                   	ret    
c001ebfd:	90                   	nop

c001ebfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ebfe:	55                   	push   ebp
c001ebff:	89 e5                	mov    ebp,esp
c001ec01:	53                   	push   ebx
c001ec02:	83 ec 2c             	sub    esp,0x2c
c001ec05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec08:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec0b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec0e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec14:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec17:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec1a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec1d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec20:	88 d8                	mov    al,bl
c001ec22:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec25:	88 c8                	mov    al,cl
c001ec27:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec2a:	88 d0                	mov    al,dl
c001ec2c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec2f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec33:	83 c0 08             	add    eax,0x8
c001ec36:	01 c0                	add    eax,eax
c001ec38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec3b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec3f:	83 c0 08             	add    eax,0x8
c001ec42:	01 c0                	add    eax,eax
c001ec44:	83 c0 01             	add    eax,0x1
c001ec47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec4d:	50                   	push   eax
c001ec4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec51:	e8 6e fe ff ff       	call   c001eac4 <IOAPIC::read(int)>
c001ec56:	83 c4 08             	add    esp,0x8
c001ec59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec5c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ec63:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec66:	c1 e0 18             	shl    eax,0x18
c001ec69:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ec6c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec72:	52                   	push   edx
c001ec73:	50                   	push   eax
c001ec74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec77:	e8 56 ff ff ff       	call   c001ebd2 <IOAPIC::write(int, int)>
c001ec7c:	83 c4 0c             	add    esp,0xc
c001ec7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec82:	50                   	push   eax
c001ec83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec86:	e8 39 fe ff ff       	call   c001eac4 <IOAPIC::read(int)>
c001ec8b:	83 c4 08             	add    esp,0x8
c001ec8e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ec91:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ec98:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ec9f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001eca6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecaa:	85 c0                	test   eax,eax
c001ecac:	74 09                	je     c001ecb7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ecb5:	eb 07                	jmp    c001ecbe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ecb7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ecbe:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ecc2:	85 c0                	test   eax,eax
c001ecc4:	74 09                	je     c001eccf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ecc6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eccd:	eb 07                	jmp    c001ecd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001eccf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ecd6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ecdd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ece1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ece4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ece7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecea:	52                   	push   edx
c001eceb:	50                   	push   eax
c001ecec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecef:	e8 de fe ff ff       	call   c001ebd2 <IOAPIC::write(int, int)>
c001ecf4:	83 c4 0c             	add    esp,0xc
c001ecf7:	90                   	nop
c001ecf8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ecfb:	c9                   	leave  
c001ecfc:	c3                   	ret    
c001ecfd:	66 90                	xchg   ax,ax
c001ecff:	90                   	nop

c001ed00 <APICTimer::close(int, int, void*)>:
c001ed00:	b8 00 00 00 00       	mov    eax,0x0
c001ed05:	c3                   	ret    
c001ed06:	66 90                	xchg   ax,ax

c001ed08 <apicTimerHandler(regs*, void*)>:
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed11:	b8 10 27 00 00       	mov    eax,0x2710
c001ed16:	ba 00 00 00 00       	mov    edx,0x0
c001ed1b:	f7 f1                	div    ecx
c001ed1d:	83 ec 0c             	sub    esp,0xc
c001ed20:	50                   	push   eax
c001ed21:	e8 9e f6 fe ff       	call   c000e3c4 <timerHandler(unsigned int)>
c001ed26:	83 c4 10             	add    esp,0x10
c001ed29:	90                   	nop
c001ed2a:	83 c4 0c             	add    esp,0xc
c001ed2d:	c3                   	ret    
c001ed2e:	66 90                	xchg   ax,ax

c001ed30 <APICTimer::open(int, int, void*)>:
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed39:	83 c0 24             	add    eax,0x24
c001ed3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed3e:	83 ec 08             	sub    esp,0x8
c001ed41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed49:	ff d0                	call   eax
c001ed4b:	83 c4 10             	add    esp,0x10
c001ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed56:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed64:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ed6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed6e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	51                   	push   ecx
c001ed78:	6a 01                	push   0x1
c001ed7a:	68 08 ed 01 c0       	push   0xc001ed08
c001ed7f:	52                   	push   edx
c001ed80:	50                   	push   eax
c001ed81:	e8 88 db fe ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed86:	83 c4 20             	add    esp,0x20
c001ed89:	89 c2                	mov    edx,eax
c001ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed95:	b8 00 00 00 00       	mov    eax,0x0
c001ed9a:	83 c4 0c             	add    esp,0xc
c001ed9d:	c3                   	ret    
c001ed9e:	66 90                	xchg   ax,ax

c001eda0 <APICTimer::write(int)>:
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	83 ec 0c             	sub    esp,0xc
c001eda6:	68 b4 34 02 c0       	push   0xc00234b4
c001edab:	e8 0b 28 ff ff       	call   c00115bb <KePanic(char const*)>
c001edb0:	83 c4 10             	add    esp,0x10
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edbb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edc1:	90                   	nop
c001edc2:	83 c4 0c             	add    esp,0xc
c001edc5:	c3                   	ret    
c001edc6:	66 90                	xchg   ax,ax

c001edc8 <APICTimer::APICTimer()>:
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcf:	83 ec 08             	sub    esp,0x8
c001edd2:	68 c4 34 02 c0       	push   0xc00234c4
c001edd7:	50                   	push   eax
c001edd8:	e8 1b f5 fe ff       	call   c000e2f8 <Timer::Timer(char const*)>
c001eddd:	83 c4 10             	add    esp,0x10
c001ede0:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c001ede5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede9:	89 10                	mov    DWORD PTR [eax],edx
c001edeb:	90                   	nop
c001edec:	83 c4 0c             	add    esp,0xc
c001edef:	c3                   	ret    

c001edf0 <PIT::write(int)>:
c001edf0:	83 ec 10             	sub    esp,0x10
c001edf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edfb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee05:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee0a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee0f:	89 c2                	mov    edx,eax
c001ee11:	c1 fa 1f             	sar    edx,0x1f
c001ee14:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee1c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee23:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee28:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee2c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee31:	ee                   	out    dx,al
c001ee32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee36:	0f b6 c0             	movzx  eax,al
c001ee39:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee40:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee44:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee48:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee4d:	ee                   	out    dx,al
c001ee4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee52:	c1 f8 08             	sar    eax,0x8
c001ee55:	0f b6 c0             	movzx  eax,al
c001ee58:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee67:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ee6c:	ee                   	out    dx,al
c001ee6d:	90                   	nop
c001ee6e:	83 c4 10             	add    esp,0x10
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <pitHandler(regs*, void*)>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ee7d:	b8 10 27 00 00       	mov    eax,0x2710
c001ee82:	89 c2                	mov    edx,eax
c001ee84:	c1 fa 1f             	sar    edx,0x1f
c001ee87:	f7 f9                	idiv   ecx
c001ee89:	83 ec 0c             	sub    esp,0xc
c001ee8c:	50                   	push   eax
c001ee8d:	e8 32 f5 fe ff       	call   c000e3c4 <timerHandler(unsigned int)>
c001ee92:	83 c4 10             	add    esp,0x10
c001ee95:	90                   	nop
c001ee96:	83 c4 0c             	add    esp,0xc
c001ee99:	c3                   	ret    
c001ee9a:	66 90                	xchg   ax,ax

c001ee9c <PIT::open(int, int, void*)>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea5:	83 c0 24             	add    eax,0x24
c001eea8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeaa:	83 ec 08             	sub    esp,0x8
c001eead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb5:	ff d0                	call   eax
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	6a 00                	push   0x0
c001eec3:	6a 01                	push   0x1
c001eec5:	68 74 ee 01 c0       	push   0xc001ee74
c001eeca:	6a 00                	push   0x0
c001eecc:	50                   	push   eax
c001eecd:	e8 3c da fe ff       	call   c000c90e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eed2:	83 c4 20             	add    esp,0x20
c001eed5:	89 c2                	mov    edx,eax
c001eed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eedb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eee1:	b8 00 00 00 00       	mov    eax,0x0
c001eee6:	83 c4 0c             	add    esp,0xc
c001eee9:	c3                   	ret    
c001eeea:	66 90                	xchg   ax,ax

c001eeec <PIT::close(int, int, void*)>:
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eefd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef01:	6a 01                	push   0x1
c001ef03:	68 74 ee 01 c0       	push   0xc001ee74
c001ef08:	6a 00                	push   0x0
c001ef0a:	50                   	push   eax
c001ef0b:	e8 34 da fe ff       	call   c000c944 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef10:	83 c4 10             	add    esp,0x10
c001ef13:	b8 00 00 00 00       	mov    eax,0x0
c001ef18:	83 c4 0c             	add    esp,0xc
c001ef1b:	c3                   	ret    

c001ef1c <PIT::PIT()>:
c001ef1c:	83 ec 0c             	sub    esp,0xc
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	83 ec 08             	sub    esp,0x8
c001ef26:	68 00 35 02 c0       	push   0xc0023500
c001ef2b:	50                   	push   eax
c001ef2c:	e8 c7 f3 fe ff       	call   c000e2f8 <Timer::Timer(char const*)>
c001ef31:	83 c4 10             	add    esp,0x10
c001ef34:	ba 28 35 02 c0       	mov    edx,0xc0023528
c001ef39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3d:	89 10                	mov    DWORD PTR [eax],edx
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef49:	0f b6 d0             	movzx  edx,al
c001ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef50:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef61:	0f b6 d0             	movzx  edx,al
c001ef64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef68:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ef6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef77:	8d 50 01             	lea    edx,[eax+0x1]
c001ef7a:	88 d1                	mov    cl,dl
c001ef7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef80:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ef86:	0f b6 d0             	movzx  edx,al
c001ef89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ef91:	83 e1 3f             	and    ecx,0x3f
c001ef94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ef98:	90                   	nop
c001ef99:	83 c4 0c             	add    esp,0xc
c001ef9c:	c3                   	ret    
c001ef9d:	66 90                	xchg   ax,ax
c001ef9f:	90                   	nop

c001efa0 <avxDetect>:
c001efa0:	b8 01 00 00 00       	mov    eax,0x1
c001efa5:	0f a2                	cpuid  
c001efa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001efad:	74 15                	je     c001efc4 <avxDetect.noAVX>
c001efaf:	b8 01 00 00 00       	mov    eax,0x1
c001efb4:	0f a2                	cpuid  
c001efb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001efbc:	74 06                	je     c001efc4 <avxDetect.noAVX>
c001efbe:	b8 01 00 00 00       	mov    eax,0x1
c001efc3:	c3                   	ret    

c001efc4 <avxDetect.noAVX>:
c001efc4:	b8 00 00 00 00       	mov    eax,0x0
c001efc9:	c3                   	ret    

c001efca <avxSave>:
c001efca:	53                   	push   ebx
c001efcb:	52                   	push   edx
c001efcc:	31 c0                	xor    eax,eax
c001efce:	48                   	dec    eax
c001efcf:	89 c2                	mov    edx,eax
c001efd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001efd5:	0f ae 23             	xsave  [ebx]
c001efd8:	5a                   	pop    edx
c001efd9:	5b                   	pop    ebx
c001efda:	c3                   	ret    

c001efdb <avxLoad>:
c001efdb:	53                   	push   ebx
c001efdc:	52                   	push   edx
c001efdd:	31 c0                	xor    eax,eax
c001efdf:	48                   	dec    eax
c001efe0:	89 c2                	mov    edx,eax
c001efe2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001efe6:	0f ae 2b             	xrstor [ebx]
c001efe9:	5a                   	pop    edx
c001efea:	5b                   	pop    ebx
c001efeb:	c3                   	ret    

c001efec <avxInit>:
c001efec:	e8 67 03 00 00       	call   c001f358 <sseInit>
c001eff1:	50                   	push   eax
c001eff2:	51                   	push   ecx
c001eff3:	0f 20 e0             	mov    eax,cr4
c001eff6:	0d 00 00 04 00       	or     eax,0x40000
c001effb:	0f 22 e0             	mov    cr4,eax
c001effe:	31 c9                	xor    ecx,ecx
c001f000:	0f 01 d0             	xgetbv 
c001f003:	0d 07 00 00 00       	or     eax,0x7
c001f008:	0f 01 d1             	xsetbv 
c001f00b:	59                   	pop    ecx
c001f00c:	58                   	pop    eax
c001f00d:	c3                   	ret    

c001f00e <avxClose>:
c001f00e:	c3                   	ret    

c001f00f <wouldSheSayYes>:
c001f00f:	c3                   	ret    
c001f010:	49                   	dec    ecx
c001f011:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f015:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f019:	75 20                	jne    c001f03b <isr0+0xb>
c001f01b:	4e                   	dec    esi
c001f01c:	79 61                	jns    c001f07f <isr7+0x3>
c001f01e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f023:	66 90                	xchg   ax,ax
c001f025:	66 90                	xchg   ax,ax
c001f027:	66 90                	xchg   ax,ax
c001f029:	66 90                	xchg   ax,ax
c001f02b:	66 90                	xchg   ax,ax
c001f02d:	66 90                	xchg   ax,ax
c001f02f:	90                   	nop

c001f030 <isr0>:
c001f030:	fa                   	cli    
c001f031:	68 00 00 00 00       	push   0x0
c001f036:	68 00 00 00 00       	push   0x0
c001f03b:	e9 56 01 00 00       	jmp    c001f196 <int_common_stub>

c001f040 <isr1>:
c001f040:	fa                   	cli    
c001f041:	6a 00                	push   0x0
c001f043:	6a 01                	push   0x1
c001f045:	e9 4c 01 00 00       	jmp    c001f196 <int_common_stub>

c001f04a <isr2>:
c001f04a:	fa                   	cli    
c001f04b:	6a 00                	push   0x0
c001f04d:	6a 02                	push   0x2
c001f04f:	e9 42 01 00 00       	jmp    c001f196 <int_common_stub>

c001f054 <isr3>:
c001f054:	fa                   	cli    
c001f055:	6a 00                	push   0x0
c001f057:	6a 03                	push   0x3
c001f059:	e9 38 01 00 00       	jmp    c001f196 <int_common_stub>

c001f05e <isr4>:
c001f05e:	fa                   	cli    
c001f05f:	6a 00                	push   0x0
c001f061:	6a 04                	push   0x4
c001f063:	e9 2e 01 00 00       	jmp    c001f196 <int_common_stub>

c001f068 <isr5>:
c001f068:	fa                   	cli    
c001f069:	6a 00                	push   0x0
c001f06b:	6a 05                	push   0x5
c001f06d:	e9 24 01 00 00       	jmp    c001f196 <int_common_stub>

c001f072 <isr6>:
c001f072:	fa                   	cli    
c001f073:	6a 00                	push   0x0
c001f075:	6a 06                	push   0x6
c001f077:	e9 1a 01 00 00       	jmp    c001f196 <int_common_stub>

c001f07c <isr7>:
c001f07c:	fa                   	cli    
c001f07d:	6a 00                	push   0x0
c001f07f:	6a 07                	push   0x7
c001f081:	e9 10 01 00 00       	jmp    c001f196 <int_common_stub>

c001f086 <isr8>:
c001f086:	fa                   	cli    
c001f087:	6a 08                	push   0x8
c001f089:	e9 08 01 00 00       	jmp    c001f196 <int_common_stub>

c001f08e <isr9>:
c001f08e:	fa                   	cli    
c001f08f:	6a 00                	push   0x0
c001f091:	6a 09                	push   0x9
c001f093:	e9 fe 00 00 00       	jmp    c001f196 <int_common_stub>

c001f098 <isr10>:
c001f098:	fa                   	cli    
c001f099:	6a 0a                	push   0xa
c001f09b:	e9 f6 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0a0 <isr11>:
c001f0a0:	fa                   	cli    
c001f0a1:	6a 0b                	push   0xb
c001f0a3:	e9 ee 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0a8 <isr12>:
c001f0a8:	fa                   	cli    
c001f0a9:	6a 0c                	push   0xc
c001f0ab:	e9 e6 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0b0 <isr13>:
c001f0b0:	fa                   	cli    
c001f0b1:	6a 0d                	push   0xd
c001f0b3:	53                   	push   ebx
c001f0b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0b8:	81 fb 86 f2 01 c0    	cmp    ebx,0xc001f286
c001f0be:	5b                   	pop    ebx
c001f0bf:	0f 84 c3 01 00 00    	je     c001f288 <finishSignal2>
c001f0c5:	e9 cc 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0ca <isr14>:
c001f0ca:	fa                   	cli    
c001f0cb:	6a 0e                	push   0xe
c001f0cd:	e9 c4 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0d2 <isr15>:
c001f0d2:	fa                   	cli    
c001f0d3:	6a 00                	push   0x0
c001f0d5:	6a 0f                	push   0xf
c001f0d7:	e9 ba 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0dc <isr16>:
c001f0dc:	fa                   	cli    
c001f0dd:	6a 00                	push   0x0
c001f0df:	6a 10                	push   0x10
c001f0e1:	e9 b0 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0e6 <isr17>:
c001f0e6:	fa                   	cli    
c001f0e7:	6a 00                	push   0x0
c001f0e9:	6a 11                	push   0x11
c001f0eb:	e9 a6 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0f0 <isr18>:
c001f0f0:	fa                   	cli    
c001f0f1:	6a 00                	push   0x0
c001f0f3:	6a 12                	push   0x12
c001f0f5:	e9 9c 00 00 00       	jmp    c001f196 <int_common_stub>

c001f0fa <irq3>:
c001f0fa:	fa                   	cli    
c001f0fb:	6a 00                	push   0x0
c001f0fd:	6a 23                	push   0x23
c001f0ff:	e9 92 00 00 00       	jmp    c001f196 <int_common_stub>

c001f104 <irq4>:
c001f104:	fa                   	cli    
c001f105:	6a 00                	push   0x0
c001f107:	6a 24                	push   0x24
c001f109:	e9 88 00 00 00       	jmp    c001f196 <int_common_stub>

c001f10e <irq5>:
c001f10e:	fa                   	cli    
c001f10f:	6a 00                	push   0x0
c001f111:	6a 25                	push   0x25
c001f113:	e9 7e 00 00 00       	jmp    c001f196 <int_common_stub>

c001f118 <irq6>:
c001f118:	fa                   	cli    
c001f119:	6a 00                	push   0x0
c001f11b:	6a 26                	push   0x26
c001f11d:	e9 74 00 00 00       	jmp    c001f196 <int_common_stub>

c001f122 <irq7>:
c001f122:	fa                   	cli    
c001f123:	6a 00                	push   0x0
c001f125:	6a 27                	push   0x27
c001f127:	e9 6a 00 00 00       	jmp    c001f196 <int_common_stub>

c001f12c <irq8>:
c001f12c:	fa                   	cli    
c001f12d:	6a 00                	push   0x0
c001f12f:	6a 28                	push   0x28
c001f131:	e9 60 00 00 00       	jmp    c001f196 <int_common_stub>

c001f136 <irq9>:
c001f136:	fa                   	cli    
c001f137:	6a 00                	push   0x0
c001f139:	6a 29                	push   0x29
c001f13b:	e9 56 00 00 00       	jmp    c001f196 <int_common_stub>

c001f140 <irq10>:
c001f140:	fa                   	cli    
c001f141:	6a 00                	push   0x0
c001f143:	6a 2a                	push   0x2a
c001f145:	e9 4c 00 00 00       	jmp    c001f196 <int_common_stub>

c001f14a <irq11>:
c001f14a:	fa                   	cli    
c001f14b:	6a 00                	push   0x0
c001f14d:	6a 2b                	push   0x2b
c001f14f:	e9 42 00 00 00       	jmp    c001f196 <int_common_stub>

c001f154 <irq12>:
c001f154:	fa                   	cli    
c001f155:	6a 00                	push   0x0
c001f157:	6a 2c                	push   0x2c
c001f159:	e9 38 00 00 00       	jmp    c001f196 <int_common_stub>

c001f15e <irq13>:
c001f15e:	fa                   	cli    
c001f15f:	6a 00                	push   0x0
c001f161:	6a 2d                	push   0x2d
c001f163:	e9 2e 00 00 00       	jmp    c001f196 <int_common_stub>

c001f168 <irq14>:
c001f168:	fa                   	cli    
c001f169:	6a 00                	push   0x0
c001f16b:	6a 2e                	push   0x2e
c001f16d:	e9 24 00 00 00       	jmp    c001f196 <int_common_stub>

c001f172 <irq15>:
c001f172:	fa                   	cli    
c001f173:	6a 00                	push   0x0
c001f175:	6a 2f                	push   0x2f
c001f177:	e9 1a 00 00 00       	jmp    c001f196 <int_common_stub>

c001f17c <irq1>:
c001f17c:	fa                   	cli    
c001f17d:	6a 00                	push   0x0
c001f17f:	6a 21                	push   0x21
c001f181:	eb 13                	jmp    c001f196 <int_common_stub>

c001f183 <irq2>:
c001f183:	fa                   	cli    
c001f184:	6a 00                	push   0x0
c001f186:	6a 22                	push   0x22
c001f188:	eb 0c                	jmp    c001f196 <int_common_stub>

c001f18a <isr96>:
c001f18a:	6a 00                	push   0x0
c001f18c:	6a 60                	push   0x60
c001f18e:	fb                   	sti    
c001f18f:	eb 37                	jmp    c001f1c8 <syscall_common_stub>

c001f191 <irq0>:
c001f191:	fa                   	cli    
c001f192:	6a 00                	push   0x0
c001f194:	6a 20                	push   0x20

c001f196 <int_common_stub>:
c001f196:	60                   	pusha  
c001f197:	1e                   	push   ds
c001f198:	06                   	push   es
c001f199:	0f a0                	push   fs
c001f19b:	0f a8                	push   gs
c001f19d:	66 b8 10 00          	mov    ax,0x10
c001f1a1:	66 8e d8             	mov    ds,ax
c001f1a4:	66 8e c0             	mov    es,ax
c001f1a7:	66 8e e0             	mov    fs,ax
c001f1aa:	66 8e e8             	mov    gs,ax
c001f1ad:	54                   	push   esp
c001f1ae:	fc                   	cld    
c001f1af:	e8 58 dc fe ff       	call   c000ce0c <int_handler>
c001f1b4:	81 c4 04 00 00 00    	add    esp,0x4
c001f1ba:	0f a9                	pop    gs
c001f1bc:	0f a1                	pop    fs
c001f1be:	07                   	pop    es
c001f1bf:	1f                   	pop    ds
c001f1c0:	61                   	popa   
c001f1c1:	81 c4 08 00 00 00    	add    esp,0x8
c001f1c7:	cf                   	iret   

c001f1c8 <syscall_common_stub>:
c001f1c8:	60                   	pusha  
c001f1c9:	1e                   	push   ds
c001f1ca:	06                   	push   es
c001f1cb:	0f a0                	push   fs
c001f1cd:	0f a8                	push   gs
c001f1cf:	66 b8 10 00          	mov    ax,0x10
c001f1d3:	66 8e d8             	mov    ds,ax
c001f1d6:	66 8e c0             	mov    es,ax
c001f1d9:	66 8e e0             	mov    fs,ax
c001f1dc:	66 8e e8             	mov    gs,ax
c001f1df:	54                   	push   esp
c001f1e0:	fc                   	cld    
c001f1e1:	e8 26 dc fe ff       	call   c000ce0c <int_handler>
c001f1e6:	81 c4 04 00 00 00    	add    esp,0x4
c001f1ec:	0f a9                	pop    gs
c001f1ee:	0f a1                	pop    fs
c001f1f0:	07                   	pop    es
c001f1f1:	1f                   	pop    ds
c001f1f2:	e8 db 29 ff ff       	call   c0011bd2 <KiCheckSignalZ>
c001f1f7:	3d 00 00 00 00       	cmp    eax,0x0
c001f1fc:	0f 84 c0 00 00 00    	je     c001f2c2 <skipSignals>
c001f202:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f207:	61                   	popa   
c001f208:	53                   	push   ebx
c001f209:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f20f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f212:	5b                   	pop    ebx
c001f213:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f218:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f21b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f21e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f221:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f224:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f227:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f22a:	81 c4 08 00 00 00    	add    esp,0x8
c001f230:	5e                   	pop    esi
c001f231:	5b                   	pop    ebx
c001f232:	59                   	pop    ecx
c001f233:	5a                   	pop    edx
c001f234:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f237:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f23a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f23d:	52                   	push   edx
c001f23e:	51                   	push   ecx
c001f23f:	53                   	push   ebx
c001f240:	56                   	push   esi
c001f241:	81 ec 08 00 00 00    	sub    esp,0x8
c001f247:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f24a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f24d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f250:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f253:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f256:	60                   	pusha  
c001f257:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f25d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f260:	89 e3                	mov    ebx,esp
c001f262:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f265:	52                   	push   edx
c001f266:	68 86 f2 01 c0       	push   0xc001f286
c001f26b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f26e:	89 dc                	mov    esp,ebx
c001f270:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f273:	68 23 00 00 00       	push   0x23
c001f278:	51                   	push   ecx
c001f279:	68 02 02 00 00       	push   0x202
c001f27e:	68 1b 00 00 00       	push   0x1b
c001f283:	ff 36                	push   DWORD PTR [esi]
c001f285:	cf                   	iret   

c001f286 <finishSignal>:
c001f286:	cd 0f                	int    0xf

c001f288 <finishSignal2>:
c001f288:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f28e:	e8 bc 29 ff ff       	call   c0011c4f <KiFinishSignalZ>
c001f293:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f299:	68 23 00 00 00       	push   0x23
c001f29e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2a4:	68 1b 00 00 00       	push   0x1b
c001f2a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f2b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f2b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f2b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f2bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f2be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f2c1:	cf                   	iret   

c001f2c2 <skipSignals>:
c001f2c2:	61                   	popa   
c001f2c3:	81 c4 08 00 00 00    	add    esp,0x8
c001f2c9:	cf                   	iret   
c001f2ca:	90                   	nop
c001f2cb:	90                   	nop

c001f2cc <irq16>:
c001f2cc:	fa                   	cli    
c001f2cd:	6a 00                	push   0x0
c001f2cf:	6a 30                	push   0x30
c001f2d1:	e9 c0 fe ff ff       	jmp    c001f196 <int_common_stub>

c001f2d6 <irq17>:
c001f2d6:	fa                   	cli    
c001f2d7:	6a 00                	push   0x0
c001f2d9:	6a 31                	push   0x31
c001f2db:	e9 b6 fe ff ff       	jmp    c001f196 <int_common_stub>

c001f2e0 <irq18>:
c001f2e0:	fa                   	cli    
c001f2e1:	6a 00                	push   0x0
c001f2e3:	6a 32                	push   0x32
c001f2e5:	e9 ac fe ff ff       	jmp    c001f196 <int_common_stub>

c001f2ea <irq19>:
c001f2ea:	fa                   	cli    
c001f2eb:	6a 00                	push   0x0
c001f2ed:	6a 33                	push   0x33
c001f2ef:	e9 a2 fe ff ff       	jmp    c001f196 <int_common_stub>

c001f2f4 <irq20>:
c001f2f4:	fa                   	cli    
c001f2f5:	6a 00                	push   0x0
c001f2f7:	6a 34                	push   0x34
c001f2f9:	e9 98 fe ff ff       	jmp    c001f196 <int_common_stub>

c001f2fe <irq21>:
c001f2fe:	fa                   	cli    
c001f2ff:	6a 00                	push   0x0
c001f301:	6a 35                	push   0x35
c001f303:	e9 8e fe ff ff       	jmp    c001f196 <int_common_stub>

c001f308 <irq22>:
c001f308:	fa                   	cli    
c001f309:	6a 00                	push   0x0
c001f30b:	6a 36                	push   0x36
c001f30d:	e9 84 fe ff ff       	jmp    c001f196 <int_common_stub>

c001f312 <irq23>:
c001f312:	fa                   	cli    
c001f313:	6a 00                	push   0x0
c001f315:	6a 37                	push   0x37
c001f317:	e9 7a fe ff ff       	jmp    c001f196 <int_common_stub>
c001f31c:	66 90                	xchg   ax,ax
c001f31e:	66 90                	xchg   ax,ax

c001f320 <i386GetRDRAND>:
c001f320:	b9 64 00 00 00       	mov    ecx,0x64

c001f325 <retry>:
c001f325:	0f c7 f0             	rdrand eax
c001f328:	72 05                	jb     c001f32f <retry.done>
c001f32a:	e2 f9                	loop   c001f325 <retry>

c001f32c <retry.fail>:
c001f32c:	31 c0                	xor    eax,eax
c001f32e:	c3                   	ret    

c001f32f <retry.done>:
c001f32f:	c3                   	ret    

c001f330 <absolutelyNoChanceInHell>:
c001f330:	b8 01 00 00 00       	mov    eax,0x1
c001f335:	0f a2                	cpuid  
c001f337:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f33d:	74 06                	je     c001f345 <sseDetect.noSSE>
c001f33f:	b8 01 00 00 00       	mov    eax,0x1
c001f344:	c3                   	ret    

c001f345 <sseDetect.noSSE>:
c001f345:	31 c0                	xor    eax,eax
c001f347:	c3                   	ret    

c001f348 <sseSave>:
c001f348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34c:	0f ae 00             	fxsave [eax]
c001f34f:	c3                   	ret    

c001f350 <sseLoad>:
c001f350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f354:	0f ae 08             	fxrstor [eax]
c001f357:	c3                   	ret    

c001f358 <sseInit>:
c001f358:	e8 42 00 00 00       	call   c001f39f <x87Init>
c001f35d:	0f 20 e0             	mov    eax,cr4
c001f360:	66 0d 00 06          	or     ax,0x600
c001f364:	0f 22 e0             	mov    cr4,eax
c001f367:	c3                   	ret    

c001f368 <sseClose>:
c001f368:	c3                   	ret    
c001f369:	66 90                	xchg   ax,ax
c001f36b:	66 90                	xchg   ax,ax
c001f36d:	66 90                	xchg   ax,ax
c001f36f:	90                   	nop

c001f370 <value_37F>:
c001f370:	7f 03                	jg     c001f375 <value_37A+0x1>

c001f372 <value_37E>:
c001f372:	7e 03                	jle    c001f377 <x87Detect+0x1>

c001f374 <value_37A>:
c001f374:	7a 03                	jp     c001f379 <x87Detect+0x3>

c001f376 <x87Detect>:
c001f376:	b8 01 00 00 00       	mov    eax,0x1
c001f37b:	0f a2                	cpuid  
c001f37d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f383:	74 06                	je     c001f38b <x87Detect.nox87>
c001f385:	b8 01 00 00 00       	mov    eax,0x1
c001f38a:	c3                   	ret    

c001f38b <x87Detect.nox87>:
c001f38b:	b8 00 00 00 00       	mov    eax,0x0
c001f390:	c3                   	ret    

c001f391 <x87Save>:
c001f391:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f395:	dd 30                	fnsave [eax]
c001f397:	c3                   	ret    

c001f398 <x87Load>:
c001f398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f39c:	dd 20                	frstor [eax]
c001f39e:	c3                   	ret    

c001f39f <x87Init>:
c001f39f:	0f 20 c0             	mov    eax,cr0
c001f3a2:	66 25 fb ff          	and    ax,0xfffb
c001f3a6:	66 0d 22 00          	or     ax,0x22
c001f3aa:	0f 22 c0             	mov    cr0,eax
c001f3ad:	db e3                	fninit 
c001f3af:	0f 06                	clts   
c001f3b1:	d9 2d 74 f3 01 c0    	fldcw  WORD PTR ds:0xc001f374
c001f3b7:	c3                   	ret    

c001f3b8 <x87Close>:
c001f3b8:	c3                   	ret    
c001f3b9:	66 90                	xchg   ax,ax
c001f3bb:	90                   	nop

c001f3bc <__do_global_ctors_aux>:
c001f3bc:	a1 70 03 02 c0       	mov    eax,ds:0xc0020370
c001f3c1:	83 f8 ff             	cmp    eax,0xffffffff
c001f3c4:	74 1a                	je     c001f3e0 <__do_global_ctors_aux+0x24>
c001f3c6:	55                   	push   ebp
c001f3c7:	89 e5                	mov    ebp,esp
c001f3c9:	53                   	push   ebx
c001f3ca:	52                   	push   edx
c001f3cb:	bb 70 03 02 c0       	mov    ebx,0xc0020370
c001f3d0:	ff d0                	call   eax
c001f3d2:	83 eb 04             	sub    ebx,0x4
c001f3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3d7:	83 f8 ff             	cmp    eax,0xffffffff
c001f3da:	75 f4                	jne    c001f3d0 <__do_global_ctors_aux+0x14>
c001f3dc:	58                   	pop    eax
c001f3dd:	5b                   	pop    ebx
c001f3de:	5d                   	pop    ebp
c001f3df:	c3                   	ret    
c001f3e0:	c3                   	ret    
c001f3e1:	66 90                	xchg   ax,ax
c001f3e3:	90                   	nop

c001f3e4 <__divdi3>:
c001f3e4:	55                   	push   ebp
c001f3e5:	57                   	push   edi
c001f3e6:	56                   	push   esi
c001f3e7:	53                   	push   ebx
c001f3e8:	83 ec 1c             	sub    esp,0x1c
c001f3eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f3ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f3f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f3fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f3fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f402:	85 db                	test   ebx,ebx
c001f404:	0f 88 8e 00 00 00    	js     c001f498 <__divdi3+0xb4>
c001f40a:	89 dd                	mov    ebp,ebx
c001f40c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f414:	89 d3                	mov    ebx,edx
c001f416:	85 d2                	test   edx,edx
c001f418:	79 0d                	jns    c001f427 <__divdi3+0x43>
c001f41a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f41e:	f7 d8                	neg    eax
c001f420:	83 d2 00             	adc    edx,0x0
c001f423:	f7 da                	neg    edx
c001f425:	89 d3                	mov    ebx,edx
c001f427:	89 c7                	mov    edi,eax
c001f429:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f42c:	85 db                	test   ebx,ebx
c001f42e:	75 48                	jne    c001f478 <__divdi3+0x94>
c001f430:	39 ef                	cmp    edi,ebp
c001f432:	76 24                	jbe    c001f458 <__divdi3+0x74>
c001f434:	89 ea                	mov    edx,ebp
c001f436:	f7 f7                	div    edi
c001f438:	89 c1                	mov    ecx,eax
c001f43a:	31 f6                	xor    esi,esi
c001f43c:	89 c8                	mov    eax,ecx
c001f43e:	89 f2                	mov    edx,esi
c001f440:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f444:	85 c9                	test   ecx,ecx
c001f446:	74 07                	je     c001f44f <__divdi3+0x6b>
c001f448:	f7 d8                	neg    eax
c001f44a:	83 d2 00             	adc    edx,0x0
c001f44d:	f7 da                	neg    edx
c001f44f:	83 c4 1c             	add    esp,0x1c
c001f452:	5b                   	pop    ebx
c001f453:	5e                   	pop    esi
c001f454:	5f                   	pop    edi
c001f455:	5d                   	pop    ebp
c001f456:	c3                   	ret    
c001f457:	90                   	nop
c001f458:	85 ff                	test   edi,edi
c001f45a:	75 0b                	jne    c001f467 <__divdi3+0x83>
c001f45c:	b8 01 00 00 00       	mov    eax,0x1
c001f461:	31 d2                	xor    edx,edx
c001f463:	f7 f3                	div    ebx
c001f465:	89 c7                	mov    edi,eax
c001f467:	31 d2                	xor    edx,edx
c001f469:	89 e8                	mov    eax,ebp
c001f46b:	f7 f7                	div    edi
c001f46d:	89 c6                	mov    esi,eax
c001f46f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f472:	f7 f7                	div    edi
c001f474:	89 c1                	mov    ecx,eax
c001f476:	eb c4                	jmp    c001f43c <__divdi3+0x58>
c001f478:	39 eb                	cmp    ebx,ebp
c001f47a:	77 3c                	ja     c001f4b8 <__divdi3+0xd4>
c001f47c:	0f bd f3             	bsr    esi,ebx
c001f47f:	83 f6 1f             	xor    esi,0x1f
c001f482:	75 40                	jne    c001f4c4 <__divdi3+0xe0>
c001f484:	39 eb                	cmp    ebx,ebp
c001f486:	72 09                	jb     c001f491 <__divdi3+0xad>
c001f488:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f48b:	0f 87 97 00 00 00    	ja     c001f528 <__divdi3+0x144>
c001f491:	b9 01 00 00 00       	mov    ecx,0x1
c001f496:	eb a4                	jmp    c001f43c <__divdi3+0x58>
c001f498:	f7 d9                	neg    ecx
c001f49a:	83 d3 00             	adc    ebx,0x0
c001f49d:	f7 db                	neg    ebx
c001f49f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4a6:	89 dd                	mov    ebp,ebx
c001f4a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f4b0:	e9 5f ff ff ff       	jmp    c001f414 <__divdi3+0x30>
c001f4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4b8:	31 f6                	xor    esi,esi
c001f4ba:	31 c9                	xor    ecx,ecx
c001f4bc:	e9 7b ff ff ff       	jmp    c001f43c <__divdi3+0x58>
c001f4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4c4:	b8 20 00 00 00       	mov    eax,0x20
c001f4c9:	29 f0                	sub    eax,esi
c001f4cb:	89 f1                	mov    ecx,esi
c001f4cd:	d3 e3                	shl    ebx,cl
c001f4cf:	89 fa                	mov    edx,edi
c001f4d1:	88 c1                	mov    cl,al
c001f4d3:	d3 ea                	shr    edx,cl
c001f4d5:	09 da                	or     edx,ebx
c001f4d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4db:	89 f1                	mov    ecx,esi
c001f4dd:	d3 e7                	shl    edi,cl
c001f4df:	89 eb                	mov    ebx,ebp
c001f4e1:	88 c1                	mov    cl,al
c001f4e3:	d3 eb                	shr    ebx,cl
c001f4e5:	89 f1                	mov    ecx,esi
c001f4e7:	d3 e5                	shl    ebp,cl
c001f4e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f4ec:	88 c1                	mov    cl,al
c001f4ee:	d3 ea                	shr    edx,cl
c001f4f0:	09 d5                	or     ebp,edx
c001f4f2:	89 e8                	mov    eax,ebp
c001f4f4:	89 da                	mov    edx,ebx
c001f4f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f4fa:	89 d3                	mov    ebx,edx
c001f4fc:	89 c5                	mov    ebp,eax
c001f4fe:	f7 e7                	mul    edi
c001f500:	39 d3                	cmp    ebx,edx
c001f502:	72 18                	jb     c001f51c <__divdi3+0x138>
c001f504:	74 0a                	je     c001f510 <__divdi3+0x12c>
c001f506:	89 e9                	mov    ecx,ebp
c001f508:	31 f6                	xor    esi,esi
c001f50a:	e9 2d ff ff ff       	jmp    c001f43c <__divdi3+0x58>
c001f50f:	90                   	nop
c001f510:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f513:	89 f1                	mov    ecx,esi
c001f515:	d3 e7                	shl    edi,cl
c001f517:	39 c7                	cmp    edi,eax
c001f519:	73 eb                	jae    c001f506 <__divdi3+0x122>
c001f51b:	90                   	nop
c001f51c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f51f:	31 f6                	xor    esi,esi
c001f521:	e9 16 ff ff ff       	jmp    c001f43c <__divdi3+0x58>
c001f526:	66 90                	xchg   ax,ax
c001f528:	31 c9                	xor    ecx,ecx
c001f52a:	e9 0d ff ff ff       	jmp    c001f43c <__divdi3+0x58>
c001f52f:	90                   	nop

c001f530 <__moddi3>:
c001f530:	55                   	push   ebp
c001f531:	57                   	push   edi
c001f532:	56                   	push   esi
c001f533:	53                   	push   ebx
c001f534:	83 ec 2c             	sub    esp,0x2c
c001f537:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f53b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f53f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f543:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f547:	85 db                	test   ebx,ebx
c001f549:	0f 88 85 00 00 00    	js     c001f5d4 <__moddi3+0xa4>
c001f54f:	89 de                	mov    esi,ebx
c001f551:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f559:	89 d7                	mov    edi,edx
c001f55b:	85 d2                	test   edx,edx
c001f55d:	79 09                	jns    c001f568 <__moddi3+0x38>
c001f55f:	f7 d8                	neg    eax
c001f561:	83 d2 00             	adc    edx,0x0
c001f564:	f7 da                	neg    edx
c001f566:	89 d7                	mov    edi,edx
c001f568:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f56c:	89 cd                	mov    ebp,ecx
c001f56e:	85 ff                	test   edi,edi
c001f570:	75 52                	jne    c001f5c4 <__moddi3+0x94>
c001f572:	89 c3                	mov    ebx,eax
c001f574:	39 f0                	cmp    eax,esi
c001f576:	76 24                	jbe    c001f59c <__moddi3+0x6c>
c001f578:	89 c8                	mov    eax,ecx
c001f57a:	89 f2                	mov    edx,esi
c001f57c:	f7 f3                	div    ebx
c001f57e:	89 d6                	mov    esi,edx
c001f580:	89 f0                	mov    eax,esi
c001f582:	31 d2                	xor    edx,edx
c001f584:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f588:	85 c9                	test   ecx,ecx
c001f58a:	74 07                	je     c001f593 <__moddi3+0x63>
c001f58c:	f7 d8                	neg    eax
c001f58e:	83 d2 00             	adc    edx,0x0
c001f591:	f7 da                	neg    edx
c001f593:	83 c4 2c             	add    esp,0x2c
c001f596:	5b                   	pop    ebx
c001f597:	5e                   	pop    esi
c001f598:	5f                   	pop    edi
c001f599:	5d                   	pop    ebp
c001f59a:	c3                   	ret    
c001f59b:	90                   	nop
c001f59c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5a0:	85 db                	test   ebx,ebx
c001f5a2:	75 0d                	jne    c001f5b1 <__moddi3+0x81>
c001f5a4:	b8 01 00 00 00       	mov    eax,0x1
c001f5a9:	31 d2                	xor    edx,edx
c001f5ab:	f7 f7                	div    edi
c001f5ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5b1:	89 f0                	mov    eax,esi
c001f5b3:	31 d2                	xor    edx,edx
c001f5b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f5b9:	f7 f7                	div    edi
c001f5bb:	89 e8                	mov    eax,ebp
c001f5bd:	f7 f7                	div    edi
c001f5bf:	89 d6                	mov    esi,edx
c001f5c1:	eb bd                	jmp    c001f580 <__moddi3+0x50>
c001f5c3:	90                   	nop
c001f5c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5c8:	39 f7                	cmp    edi,esi
c001f5ca:	76 20                	jbe    c001f5ec <__moddi3+0xbc>
c001f5cc:	89 c8                	mov    eax,ecx
c001f5ce:	89 f2                	mov    edx,esi
c001f5d0:	eb b2                	jmp    c001f584 <__moddi3+0x54>
c001f5d2:	66 90                	xchg   ax,ax
c001f5d4:	f7 d9                	neg    ecx
c001f5d6:	83 d3 00             	adc    ebx,0x0
c001f5d9:	f7 db                	neg    ebx
c001f5db:	89 de                	mov    esi,ebx
c001f5dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f5e5:	e9 6f ff ff ff       	jmp    c001f559 <__moddi3+0x29>
c001f5ea:	66 90                	xchg   ax,ax
c001f5ec:	0f bd c7             	bsr    eax,edi
c001f5ef:	83 f0 1f             	xor    eax,0x1f
c001f5f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5f6:	75 24                	jne    c001f61c <__moddi3+0xec>
c001f5f8:	39 f7                	cmp    edi,esi
c001f5fa:	72 06                	jb     c001f602 <__moddi3+0xd2>
c001f5fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f600:	77 0c                	ja     c001f60e <__moddi3+0xde>
c001f602:	89 e9                	mov    ecx,ebp
c001f604:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f608:	19 fe                	sbb    esi,edi
c001f60a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f60e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f612:	89 f2                	mov    edx,esi
c001f614:	e9 6b ff ff ff       	jmp    c001f584 <__moddi3+0x54>
c001f619:	8d 76 00             	lea    esi,[esi+0x0]
c001f61c:	b8 20 00 00 00       	mov    eax,0x20
c001f621:	89 c2                	mov    edx,eax
c001f623:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f627:	29 da                	sub    edx,ebx
c001f629:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f62d:	88 d9                	mov    cl,bl
c001f62f:	d3 e7                	shl    edi,cl
c001f631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f635:	88 d1                	mov    cl,dl
c001f637:	d3 e8                	shr    eax,cl
c001f639:	09 c7                	or     edi,eax
c001f63b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f63f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f643:	89 d8                	mov    eax,ebx
c001f645:	88 d9                	mov    cl,bl
c001f647:	d3 e7                	shl    edi,cl
c001f649:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f64d:	89 f3                	mov    ebx,esi
c001f64f:	88 d1                	mov    cl,dl
c001f651:	d3 eb                	shr    ebx,cl
c001f653:	89 c7                	mov    edi,eax
c001f655:	88 c1                	mov    cl,al
c001f657:	d3 e6                	shl    esi,cl
c001f659:	89 e8                	mov    eax,ebp
c001f65b:	88 d1                	mov    cl,dl
c001f65d:	d3 e8                	shr    eax,cl
c001f65f:	09 f0                	or     eax,esi
c001f661:	89 f9                	mov    ecx,edi
c001f663:	d3 e5                	shl    ebp,cl
c001f665:	89 da                	mov    edx,ebx
c001f667:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f66b:	89 d3                	mov    ebx,edx
c001f66d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f671:	89 c6                	mov    esi,eax
c001f673:	89 d1                	mov    ecx,edx
c001f675:	39 d3                	cmp    ebx,edx
c001f677:	72 27                	jb     c001f6a0 <__moddi3+0x170>
c001f679:	74 21                	je     c001f69c <__moddi3+0x16c>
c001f67b:	29 f5                	sub    ebp,esi
c001f67d:	19 cb                	sbb    ebx,ecx
c001f67f:	89 de                	mov    esi,ebx
c001f681:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f685:	d3 e6                	shl    esi,cl
c001f687:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f68b:	89 f9                	mov    ecx,edi
c001f68d:	d3 ed                	shr    ebp,cl
c001f68f:	09 ee                	or     esi,ebp
c001f691:	89 f0                	mov    eax,esi
c001f693:	d3 eb                	shr    ebx,cl
c001f695:	89 da                	mov    edx,ebx
c001f697:	e9 e8 fe ff ff       	jmp    c001f584 <__moddi3+0x54>
c001f69c:	39 c5                	cmp    ebp,eax
c001f69e:	73 db                	jae    c001f67b <__moddi3+0x14b>
c001f6a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6a8:	89 d1                	mov    ecx,edx
c001f6aa:	89 c6                	mov    esi,eax
c001f6ac:	eb cd                	jmp    c001f67b <__moddi3+0x14b>
c001f6ae:	66 90                	xchg   ax,ax

c001f6b0 <__udivdi3>:
c001f6b0:	55                   	push   ebp
c001f6b1:	57                   	push   edi
c001f6b2:	56                   	push   esi
c001f6b3:	53                   	push   ebx
c001f6b4:	83 ec 1c             	sub    esp,0x1c
c001f6b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f6bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f6bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f6c7:	85 d2                	test   edx,edx
c001f6c9:	75 41                	jne    c001f70c <__udivdi3+0x5c>
c001f6cb:	39 f7                	cmp    edi,esi
c001f6cd:	76 15                	jbe    c001f6e4 <__udivdi3+0x34>
c001f6cf:	89 e8                	mov    eax,ebp
c001f6d1:	89 f2                	mov    edx,esi
c001f6d3:	f7 f7                	div    edi
c001f6d5:	31 db                	xor    ebx,ebx
c001f6d7:	89 da                	mov    edx,ebx
c001f6d9:	83 c4 1c             	add    esp,0x1c
c001f6dc:	5b                   	pop    ebx
c001f6dd:	5e                   	pop    esi
c001f6de:	5f                   	pop    edi
c001f6df:	5d                   	pop    ebp
c001f6e0:	c3                   	ret    
c001f6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6e4:	89 f9                	mov    ecx,edi
c001f6e6:	85 ff                	test   edi,edi
c001f6e8:	75 0b                	jne    c001f6f5 <__udivdi3+0x45>
c001f6ea:	b8 01 00 00 00       	mov    eax,0x1
c001f6ef:	31 d2                	xor    edx,edx
c001f6f1:	f7 f7                	div    edi
c001f6f3:	89 c1                	mov    ecx,eax
c001f6f5:	31 d2                	xor    edx,edx
c001f6f7:	89 f0                	mov    eax,esi
c001f6f9:	f7 f1                	div    ecx
c001f6fb:	89 c3                	mov    ebx,eax
c001f6fd:	89 e8                	mov    eax,ebp
c001f6ff:	f7 f1                	div    ecx
c001f701:	89 da                	mov    edx,ebx
c001f703:	83 c4 1c             	add    esp,0x1c
c001f706:	5b                   	pop    ebx
c001f707:	5e                   	pop    esi
c001f708:	5f                   	pop    edi
c001f709:	5d                   	pop    ebp
c001f70a:	c3                   	ret    
c001f70b:	90                   	nop
c001f70c:	39 f2                	cmp    edx,esi
c001f70e:	77 1c                	ja     c001f72c <__udivdi3+0x7c>
c001f710:	0f bd da             	bsr    ebx,edx
c001f713:	83 f3 1f             	xor    ebx,0x1f
c001f716:	75 24                	jne    c001f73c <__udivdi3+0x8c>
c001f718:	39 f2                	cmp    edx,esi
c001f71a:	72 08                	jb     c001f724 <__udivdi3+0x74>
c001f71c:	39 ef                	cmp    edi,ebp
c001f71e:	0f 87 84 00 00 00    	ja     c001f7a8 <__udivdi3+0xf8>
c001f724:	b8 01 00 00 00       	mov    eax,0x1
c001f729:	eb ac                	jmp    c001f6d7 <__udivdi3+0x27>
c001f72b:	90                   	nop
c001f72c:	31 db                	xor    ebx,ebx
c001f72e:	31 c0                	xor    eax,eax
c001f730:	89 da                	mov    edx,ebx
c001f732:	83 c4 1c             	add    esp,0x1c
c001f735:	5b                   	pop    ebx
c001f736:	5e                   	pop    esi
c001f737:	5f                   	pop    edi
c001f738:	5d                   	pop    ebp
c001f739:	c3                   	ret    
c001f73a:	66 90                	xchg   ax,ax
c001f73c:	b8 20 00 00 00       	mov    eax,0x20
c001f741:	29 d8                	sub    eax,ebx
c001f743:	88 d9                	mov    cl,bl
c001f745:	d3 e2                	shl    edx,cl
c001f747:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f74b:	89 fa                	mov    edx,edi
c001f74d:	88 c1                	mov    cl,al
c001f74f:	d3 ea                	shr    edx,cl
c001f751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f755:	09 d1                	or     ecx,edx
c001f757:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f75b:	88 d9                	mov    cl,bl
c001f75d:	d3 e7                	shl    edi,cl
c001f75f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f763:	89 f7                	mov    edi,esi
c001f765:	88 c1                	mov    cl,al
c001f767:	d3 ef                	shr    edi,cl
c001f769:	88 d9                	mov    cl,bl
c001f76b:	d3 e6                	shl    esi,cl
c001f76d:	89 ea                	mov    edx,ebp
c001f76f:	88 c1                	mov    cl,al
c001f771:	d3 ea                	shr    edx,cl
c001f773:	09 d6                	or     esi,edx
c001f775:	89 f0                	mov    eax,esi
c001f777:	89 fa                	mov    edx,edi
c001f779:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f77d:	89 d7                	mov    edi,edx
c001f77f:	89 c6                	mov    esi,eax
c001f781:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f785:	39 d7                	cmp    edi,edx
c001f787:	72 13                	jb     c001f79c <__udivdi3+0xec>
c001f789:	74 09                	je     c001f794 <__udivdi3+0xe4>
c001f78b:	89 f0                	mov    eax,esi
c001f78d:	31 db                	xor    ebx,ebx
c001f78f:	e9 43 ff ff ff       	jmp    c001f6d7 <__udivdi3+0x27>
c001f794:	88 d9                	mov    cl,bl
c001f796:	d3 e5                	shl    ebp,cl
c001f798:	39 c5                	cmp    ebp,eax
c001f79a:	73 ef                	jae    c001f78b <__udivdi3+0xdb>
c001f79c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f79f:	31 db                	xor    ebx,ebx
c001f7a1:	e9 31 ff ff ff       	jmp    c001f6d7 <__udivdi3+0x27>
c001f7a6:	66 90                	xchg   ax,ax
c001f7a8:	31 c0                	xor    eax,eax
c001f7aa:	e9 28 ff ff ff       	jmp    c001f6d7 <__udivdi3+0x27>
c001f7af:	90                   	nop

c001f7b0 <__umoddi3>:
c001f7b0:	55                   	push   ebp
c001f7b1:	57                   	push   edi
c001f7b2:	56                   	push   esi
c001f7b3:	53                   	push   ebx
c001f7b4:	83 ec 1c             	sub    esp,0x1c
c001f7b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7c7:	89 da                	mov    edx,ebx
c001f7c9:	85 c0                	test   eax,eax
c001f7cb:	75 37                	jne    c001f804 <__umoddi3+0x54>
c001f7cd:	39 df                	cmp    edi,ebx
c001f7cf:	76 13                	jbe    c001f7e4 <__umoddi3+0x34>
c001f7d1:	89 f0                	mov    eax,esi
c001f7d3:	f7 f7                	div    edi
c001f7d5:	89 d0                	mov    eax,edx
c001f7d7:	31 d2                	xor    edx,edx
c001f7d9:	83 c4 1c             	add    esp,0x1c
c001f7dc:	5b                   	pop    ebx
c001f7dd:	5e                   	pop    esi
c001f7de:	5f                   	pop    edi
c001f7df:	5d                   	pop    ebp
c001f7e0:	c3                   	ret    
c001f7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7e4:	89 fd                	mov    ebp,edi
c001f7e6:	85 ff                	test   edi,edi
c001f7e8:	75 0b                	jne    c001f7f5 <__umoddi3+0x45>
c001f7ea:	b8 01 00 00 00       	mov    eax,0x1
c001f7ef:	31 d2                	xor    edx,edx
c001f7f1:	f7 f7                	div    edi
c001f7f3:	89 c5                	mov    ebp,eax
c001f7f5:	89 d8                	mov    eax,ebx
c001f7f7:	31 d2                	xor    edx,edx
c001f7f9:	f7 f5                	div    ebp
c001f7fb:	89 f0                	mov    eax,esi
c001f7fd:	f7 f5                	div    ebp
c001f7ff:	89 d0                	mov    eax,edx
c001f801:	eb d4                	jmp    c001f7d7 <__umoddi3+0x27>
c001f803:	90                   	nop
c001f804:	89 f1                	mov    ecx,esi
c001f806:	39 d8                	cmp    eax,ebx
c001f808:	76 0a                	jbe    c001f814 <__umoddi3+0x64>
c001f80a:	89 f0                	mov    eax,esi
c001f80c:	83 c4 1c             	add    esp,0x1c
c001f80f:	5b                   	pop    ebx
c001f810:	5e                   	pop    esi
c001f811:	5f                   	pop    edi
c001f812:	5d                   	pop    ebp
c001f813:	c3                   	ret    
c001f814:	0f bd e8             	bsr    ebp,eax
c001f817:	83 f5 1f             	xor    ebp,0x1f
c001f81a:	75 1c                	jne    c001f838 <__umoddi3+0x88>
c001f81c:	39 d8                	cmp    eax,ebx
c001f81e:	72 04                	jb     c001f824 <__umoddi3+0x74>
c001f820:	39 f7                	cmp    edi,esi
c001f822:	77 08                	ja     c001f82c <__umoddi3+0x7c>
c001f824:	89 da                	mov    edx,ebx
c001f826:	29 fe                	sub    esi,edi
c001f828:	19 c2                	sbb    edx,eax
c001f82a:	89 f1                	mov    ecx,esi
c001f82c:	89 c8                	mov    eax,ecx
c001f82e:	83 c4 1c             	add    esp,0x1c
c001f831:	5b                   	pop    ebx
c001f832:	5e                   	pop    esi
c001f833:	5f                   	pop    edi
c001f834:	5d                   	pop    ebp
c001f835:	c3                   	ret    
c001f836:	66 90                	xchg   ax,ax
c001f838:	ba 20 00 00 00       	mov    edx,0x20
c001f83d:	29 ea                	sub    edx,ebp
c001f83f:	89 e9                	mov    ecx,ebp
c001f841:	d3 e0                	shl    eax,cl
c001f843:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f847:	89 f8                	mov    eax,edi
c001f849:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f84d:	88 d1                	mov    cl,dl
c001f84f:	d3 e8                	shr    eax,cl
c001f851:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f855:	09 c1                	or     ecx,eax
c001f857:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f85b:	89 e9                	mov    ecx,ebp
c001f85d:	d3 e7                	shl    edi,cl
c001f85f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f863:	89 d8                	mov    eax,ebx
c001f865:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f869:	88 d1                	mov    cl,dl
c001f86b:	d3 e8                	shr    eax,cl
c001f86d:	89 c7                	mov    edi,eax
c001f86f:	89 e9                	mov    ecx,ebp
c001f871:	d3 e3                	shl    ebx,cl
c001f873:	89 f0                	mov    eax,esi
c001f875:	88 d1                	mov    cl,dl
c001f877:	d3 e8                	shr    eax,cl
c001f879:	09 d8                	or     eax,ebx
c001f87b:	89 e9                	mov    ecx,ebp
c001f87d:	d3 e6                	shl    esi,cl
c001f87f:	89 f3                	mov    ebx,esi
c001f881:	89 fa                	mov    edx,edi
c001f883:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f887:	89 d1                	mov    ecx,edx
c001f889:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f88d:	89 c6                	mov    esi,eax
c001f88f:	89 d7                	mov    edi,edx
c001f891:	39 d1                	cmp    ecx,edx
c001f893:	72 27                	jb     c001f8bc <__umoddi3+0x10c>
c001f895:	74 21                	je     c001f8b8 <__umoddi3+0x108>
c001f897:	89 ca                	mov    edx,ecx
c001f899:	29 f3                	sub    ebx,esi
c001f89b:	19 fa                	sbb    edx,edi
c001f89d:	89 d0                	mov    eax,edx
c001f89f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8a3:	d3 e0                	shl    eax,cl
c001f8a5:	89 e9                	mov    ecx,ebp
c001f8a7:	d3 eb                	shr    ebx,cl
c001f8a9:	09 d8                	or     eax,ebx
c001f8ab:	d3 ea                	shr    edx,cl
c001f8ad:	83 c4 1c             	add    esp,0x1c
c001f8b0:	5b                   	pop    ebx
c001f8b1:	5e                   	pop    esi
c001f8b2:	5f                   	pop    edi
c001f8b3:	5d                   	pop    ebp
c001f8b4:	c3                   	ret    
c001f8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8b8:	39 c3                	cmp    ebx,eax
c001f8ba:	73 db                	jae    c001f897 <__umoddi3+0xe7>
c001f8bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f8c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f8c4:	89 d7                	mov    edi,edx
c001f8c6:	89 c6                	mov    esi,eax
c001f8c8:	eb cd                	jmp    c001f897 <__umoddi3+0xe7>

Disassembly of section .init:

c001f8ca <_init>:
c001f8ca:	55                   	push   ebp
c001f8cb:	89 e5                	mov    ebp,esp
c001f8cd:	e8 22 08 fe ff       	call   c00000f4 <frame_dummy>
c001f8d2:	e8 e5 fa ff ff       	call   c001f3bc <__do_global_ctors_aux>
c001f8d7:	5d                   	pop    ebp
c001f8d8:	c3                   	ret    

Disassembly of section .fini:

c001f8d9 <_fini>:
c001f8d9:	55                   	push   ebp
c001f8da:	89 e5                	mov    ebp,esp
c001f8dc:	e8 a3 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f8e1:	5d                   	pop    ebp
c001f8e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f8e4 <Computer::~Computer()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	ba f4 0b 02 c0       	mov    edx,0xc0020bf4
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	89 10                	mov    DWORD PTR [eax],edx
c001f8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f6:	83 ec 0c             	sub    esp,0xc
c001f8f9:	50                   	push   eax
c001f8fa:	e8 65 cf fe ff       	call   c000c864 <Device::~Device()>
c001f8ff:	83 c4 10             	add    esp,0x10
c001f902:	90                   	nop
c001f903:	83 c4 0c             	add    esp,0xc
c001f906:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f908 <Computer::~Computer()>:
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	83 ec 0c             	sub    esp,0xc
c001f90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f912:	e8 cd ff ff ff       	call   c001f8e4 <Computer::~Computer()>
c001f917:	83 c4 10             	add    esp,0x10
c001f91a:	83 ec 08             	sub    esp,0x8
c001f91d:	68 70 01 00 00       	push   0x170
c001f922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f926:	e8 ed ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f92b:	83 c4 10             	add    esp,0x10
c001f92e:	83 c4 0c             	add    esp,0xc
c001f931:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f932 <idleCommon()>:
c001f932:	83 ec 0c             	sub    esp,0xc
c001f935:	fa                   	cli    
c001f936:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f93c:	e8 ff 66 ff ff       	call   c0016040 <schedule()>
c001f941:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f946:	48                   	dec    eax
c001f947:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f94c:	75 01                	jne    c001f94f <idleCommon()+0x1d>
c001f94e:	fb                   	sti    
c001f94f:	83 c4 0c             	add    esp,0xc
c001f952:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f954 <LinkedList<UnixFile>::~LinkedList()>:
c001f954:	90                   	nop
c001f955:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f956 <LinkedList<UnixFile>::LinkedList()>:
c001f956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f964:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f984:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f98b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f98f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f996:	90                   	nop
c001f997:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f998 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f998:	83 ec 0c             	sub    esp,0xc
c001f99b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9a0:	75 10                	jne    c001f9b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	68 08 0e 02 c0       	push   0xc0020e08
c001f9aa:	e8 0c 1c ff ff       	call   c00115bb <KePanic(char const*)>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b8:	85 c0                	test   eax,eax
c001f9ba:	74 34                	je     c001f9f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9c3:	85 c0                	test   eax,eax
c001f9c5:	74 29                	je     c001f9f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9ee:	eb 65                	jmp    c001fa55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f6:	85 c0                	test   eax,eax
c001f9f8:	75 4b                	jne    c001fa45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa01:	85 c0                	test   eax,eax
c001fa03:	75 40                	jne    c001fa45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa0d:	89 10                	mov    DWORD PTR [eax],edx
c001fa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa2f:	85 c0                	test   eax,eax
c001fa31:	74 22                	je     c001fa55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa33:	83 ec 0c             	sub    esp,0xc
c001fa36:	68 2a 0e 02 c0       	push   0xc0020e2a
c001fa3b:	e8 7b 1b ff ff       	call   c00115bb <KePanic(char const*)>
c001fa40:	83 c4 10             	add    esp,0x10
c001fa43:	eb 10                	jmp    c001fa55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	68 34 0e 02 c0       	push   0xc0020e34
c001fa4d:	e8 69 1b ff ff       	call   c00115bb <KePanic(char const*)>
c001fa52:	83 c4 10             	add    esp,0x10
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa5c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa66:	90                   	nop
c001fa67:	83 c4 0c             	add    esp,0xc
c001fa6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fa6c <LinkedList<UnixFile>::getFirstElement()>:
c001fa6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fa74 <LinkedList<UnixFile>::removeFirst()>:
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa7d:	85 c0                	test   eax,eax
c001fa7f:	75 12                	jne    c001fa93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fa81:	83 ec 0c             	sub    esp,0xc
c001fa84:	68 40 0e 02 c0       	push   0xc0020e40
c001fa89:	e8 2d 1b ff ff       	call   c00115bb <KePanic(char const*)>
c001fa8e:	83 c4 10             	add    esp,0x10
c001fa91:	eb 7e                	jmp    c001fb11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fa93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa9d:	85 c0                	test   eax,eax
c001fa9f:	74 10                	je     c001fab1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001faa1:	83 ec 0c             	sub    esp,0xc
c001faa4:	68 8b 0e 02 c0       	push   0xc0020e8b
c001faa9:	e8 0d 1b ff ff       	call   c00115bb <KePanic(char const*)>
c001faae:	83 c4 10             	add    esp,0x10
c001fab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faba:	85 c0                	test   eax,eax
c001fabc:	75 33                	jne    c001faf1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fada:	83 f8 01             	cmp    eax,0x1
c001fadd:	74 21                	je     c001fb00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fadf:	83 ec 0c             	sub    esp,0xc
c001fae2:	68 64 0e 02 c0       	push   0xc0020e64
c001fae7:	e8 cf 1a ff ff       	call   c00115bb <KePanic(char const*)>
c001faec:	83 c4 10             	add    esp,0x10
c001faef:	eb 0f                	jmp    c001fb00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001faf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	89 10                	mov    DWORD PTR [eax],edx
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb07:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb11:	83 c4 0c             	add    esp,0xc
c001fb14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb1e <DriverlessDevice::~DriverlessDevice()>:
c001fb1e:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c001fb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb27:	89 10                	mov    DWORD PTR [eax],edx
c001fb29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2d:	50                   	push   eax
c001fb2e:	e8 31 cd fe ff       	call   c000c864 <Device::~Device()>
c001fb33:	83 c4 04             	add    esp,0x4
c001fb36:	90                   	nop
c001fb37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb38 <DriverlessDevice::~DriverlessDevice()>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	83 ec 0c             	sub    esp,0xc
c001fb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb42:	e8 d7 ff ff ff       	call   c001fb1e <DriverlessDevice::~DriverlessDevice()>
c001fb47:	83 c4 10             	add    esp,0x10
c001fb4a:	83 ec 08             	sub    esp,0x8
c001fb4d:	68 58 01 00 00       	push   0x158
c001fb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb56:	e8 bd ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	83 c4 0c             	add    esp,0xc
c001fb61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fb62 <LinkedList<Device>::addElement(Device*)>:
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb6a:	75 10                	jne    c001fb7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fb6c:	83 ec 0c             	sub    esp,0xc
c001fb6f:	68 08 0e 02 c0       	push   0xc0020e08
c001fb74:	e8 42 1a ff ff       	call   c00115bb <KePanic(char const*)>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb82:	85 c0                	test   eax,eax
c001fb84:	74 3a                	je     c001fbc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	74 2f                	je     c001fbc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fb91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbbe:	eb 68                	jmp    c001fc28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbc6:	85 c0                	test   eax,eax
c001fbc8:	75 4e                	jne    c001fc18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd1:	85 c0                	test   eax,eax
c001fbd3:	75 43                	jne    c001fc18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbdd:	89 10                	mov    DWORD PTR [eax],edx
c001fbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbe7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc02:	85 c0                	test   eax,eax
c001fc04:	74 22                	je     c001fc28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc06:	83 ec 0c             	sub    esp,0xc
c001fc09:	68 2a 0e 02 c0       	push   0xc0020e2a
c001fc0e:	e8 a8 19 ff ff       	call   c00115bb <KePanic(char const*)>
c001fc13:	83 c4 10             	add    esp,0x10
c001fc16:	eb 10                	jmp    c001fc28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	68 34 0e 02 c0       	push   0xc0020e34
c001fc20:	e8 96 19 ff ff       	call   c00115bb <KePanic(char const*)>
c001fc25:	83 c4 10             	add    esp,0x10
c001fc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc39:	90                   	nop
c001fc3a:	83 c4 0c             	add    esp,0xc
c001fc3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc3e <LinkedList<Device>::LinkedList()>:
c001fc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc7e:	90                   	nop
c001fc7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fc80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fc80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc86:	85 c0                	test   eax,eax
c001fc88:	75 0e                	jne    c001fc98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc91:	85 c0                	test   eax,eax
c001fc93:	75 03                	jne    c001fc98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc95:	b0 01                	mov    al,0x1
c001fc97:	c3                   	ret    
c001fc98:	b0 00                	mov    al,0x0
c001fc9a:	90                   	nop
c001fc9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fc9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fca4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fca4:	83 ec 0c             	sub    esp,0xc
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcad:	85 c0                	test   eax,eax
c001fcaf:	75 17                	jne    c001fcc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	68 40 0e 02 c0       	push   0xc0020e40
c001fcb9:	e8 fd 18 ff ff       	call   c00115bb <KePanic(char const*)>
c001fcbe:	83 c4 10             	add    esp,0x10
c001fcc1:	e9 96 00 00 00       	jmp    c001fd5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fcc6:	66 90                	xchg   ax,ax
c001fcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fccf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	0f 95 c0             	setne  al
c001fcd7:	0f b6 c0             	movzx  eax,al
c001fcda:	85 c0                	test   eax,eax
c001fcdc:	74 12                	je     c001fcf0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	68 8b 0e 02 c0       	push   0xc0020e8b
c001fce6:	e8 d0 18 ff ff       	call   c00115bb <KePanic(char const*)>
c001fceb:	83 c4 10             	add    esp,0x10
c001fcee:	66 90                	xchg   ax,ax
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcf9:	85 c0                	test   eax,eax
c001fcfb:	0f 94 c0             	sete   al
c001fcfe:	0f b6 c0             	movzx  eax,al
c001fd01:	85 c0                	test   eax,eax
c001fd03:	74 33                	je     c001fd38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd21:	83 f8 01             	cmp    eax,0x1
c001fd24:	74 22                	je     c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	68 64 0e 02 c0       	push   0xc0020e64
c001fd2e:	e8 88 18 ff ff       	call   c00115bb <KePanic(char const*)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	eb 10                	jmp    c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd45:	89 10                	mov    DWORD PTR [eax],edx
c001fd47:	90                   	nop
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd4f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd59:	8d 76 00             	lea    esi,[esi+0x0]
c001fd5c:	83 c4 0c             	add    esp,0xc
c001fd5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fd60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fd60:	83 ec 0c             	sub    esp,0xc
c001fd63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd68:	75 12                	jne    c001fd7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fd6a:	83 ec 0c             	sub    esp,0xc
c001fd6d:	68 08 0e 02 c0       	push   0xc0020e08
c001fd72:	e8 44 18 ff ff       	call   c00115bb <KePanic(char const*)>
c001fd77:	83 c4 10             	add    esp,0x10
c001fd7a:	66 90                	xchg   ax,ax
c001fd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd82:	85 c0                	test   eax,eax
c001fd84:	74 36                	je     c001fdbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd8d:	85 c0                	test   eax,eax
c001fd8f:	74 2b                	je     c001fdbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fda7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdb8:	eb 6a                	jmp    c001fe24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdba:	66 90                	xchg   ax,ax
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc2:	85 c0                	test   eax,eax
c001fdc4:	75 4e                	jne    c001fe14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdcd:	85 c0                	test   eax,eax
c001fdcf:	75 43                	jne    c001fe14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdd9:	89 10                	mov    DWORD PTR [eax],edx
c001fddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fddf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fde3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fded:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdfb:	85 c0                	test   eax,eax
c001fdfd:	74 25                	je     c001fe24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdff:	83 ec 0c             	sub    esp,0xc
c001fe02:	68 2a 0e 02 c0       	push   0xc0020e2a
c001fe07:	e8 af 17 ff ff       	call   c00115bb <KePanic(char const*)>
c001fe0c:	83 c4 10             	add    esp,0x10
c001fe0f:	eb 13                	jmp    c001fe24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe11:	8d 76 00             	lea    esi,[esi+0x0]
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	68 34 0e 02 c0       	push   0xc0020e34
c001fe1c:	e8 9a 17 ff ff       	call   c00115bb <KePanic(char const*)>
c001fe21:	83 c4 10             	add    esp,0x10
c001fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe2b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe35:	90                   	nop
c001fe36:	83 c4 0c             	add    esp,0xc
c001fe39:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe3c <ACPI::~ACPI()>:
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	ba 64 20 02 c0       	mov    edx,0xc0022064
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	89 10                	mov    DWORD PTR [eax],edx
c001fe4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4e:	83 ec 0c             	sub    esp,0xc
c001fe51:	50                   	push   eax
c001fe52:	e8 0d ca fe ff       	call   c000c864 <Device::~Device()>
c001fe57:	83 c4 10             	add    esp,0x10
c001fe5a:	90                   	nop
c001fe5b:	83 c4 0c             	add    esp,0xc
c001fe5e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fe60 <ACPI::~ACPI()>:
c001fe60:	83 ec 0c             	sub    esp,0xc
c001fe63:	83 ec 0c             	sub    esp,0xc
c001fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6a:	e8 cd ff ff ff       	call   c001fe3c <ACPI::~ACPI()>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	83 ec 08             	sub    esp,0x8
c001fe75:	68 64 12 00 00       	push   0x1264
c001fe7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe7e:	e8 95 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe83:	83 c4 10             	add    esp,0x10
c001fe86:	83 c4 0c             	add    esp,0xc
c001fe89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fe8c <LinkedList<Device>::~LinkedList()>:
c001fe8c:	90                   	nop
c001fe8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fe90 <LinkedList<Device>::isEmpty()>:
c001fe90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe96:	85 c0                	test   eax,eax
c001fe98:	75 0e                	jne    c001fea8 <LinkedList<Device>::isEmpty()+0x18>
c001fe9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fea1:	85 c0                	test   eax,eax
c001fea3:	75 03                	jne    c001fea8 <LinkedList<Device>::isEmpty()+0x18>
c001fea5:	b0 01                	mov    al,0x1
c001fea7:	c3                   	ret    
c001fea8:	b0 00                	mov    al,0x0
c001feaa:	90                   	nop
c001feab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001feac <LinkedList<Device>::getFirstElement()>:
c001feac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001feb4 <LinkedList<Device>::removeFirst()>:
c001feb4:	83 ec 0c             	sub    esp,0xc
c001feb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febb:	8b 00                	mov    eax,DWORD PTR [eax]
c001febd:	85 c0                	test   eax,eax
c001febf:	75 17                	jne    c001fed8 <LinkedList<Device>::removeFirst()+0x24>
c001fec1:	83 ec 0c             	sub    esp,0xc
c001fec4:	68 40 0e 02 c0       	push   0xc0020e40
c001fec9:	e8 ed 16 ff ff       	call   c00115bb <KePanic(char const*)>
c001fece:	83 c4 10             	add    esp,0x10
c001fed1:	e9 92 00 00 00       	jmp    c001ff68 <LinkedList<Device>::removeFirst()+0xb4>
c001fed6:	66 90                	xchg   ax,ax
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fedf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fee5:	85 c0                	test   eax,eax
c001fee7:	74 13                	je     c001fefc <LinkedList<Device>::removeFirst()+0x48>
c001fee9:	83 ec 0c             	sub    esp,0xc
c001feec:	68 8b 0e 02 c0       	push   0xc0020e8b
c001fef1:	e8 c5 16 ff ff       	call   c00115bb <KePanic(char const*)>
c001fef6:	83 c4 10             	add    esp,0x10
c001fef9:	8d 76 00             	lea    esi,[esi+0x0]
c001fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff08:	85 c0                	test   eax,eax
c001ff0a:	75 34                	jne    c001ff40 <LinkedList<Device>::removeFirst()+0x8c>
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff28:	83 f8 01             	cmp    eax,0x1
c001ff2b:	74 27                	je     c001ff54 <LinkedList<Device>::removeFirst()+0xa0>
c001ff2d:	83 ec 0c             	sub    esp,0xc
c001ff30:	68 64 0e 02 c0       	push   0xc0020e64
c001ff35:	e8 81 16 ff ff       	call   c00115bb <KePanic(char const*)>
c001ff3a:	83 c4 10             	add    esp,0x10
c001ff3d:	eb 15                	jmp    c001ff54 <LinkedList<Device>::removeFirst()+0xa0>
c001ff3f:	90                   	nop
c001ff40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff46:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	89 10                	mov    DWORD PTR [eax],edx
c001ff52:	66 90                	xchg   ax,ax
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff65:	8d 76 00             	lea    esi,[esi+0x0]
c001ff68:	83 c4 0c             	add    esp,0xc
c001ff6b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ff6c <CPU::~CPU()>:
c001ff6c:	83 ec 0c             	sub    esp,0xc
c001ff6f:	ba 0c 22 02 c0       	mov    edx,0xc002220c
c001ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff78:	89 10                	mov    DWORD PTR [eax],edx
c001ff7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7e:	83 ec 0c             	sub    esp,0xc
c001ff81:	50                   	push   eax
c001ff82:	e8 dd c8 fe ff       	call   c000c864 <Device::~Device()>
c001ff87:	83 c4 10             	add    esp,0x10
c001ff8a:	90                   	nop
c001ff8b:	83 c4 0c             	add    esp,0xc
c001ff8e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ff90 <CPU::~CPU()>:
c001ff90:	83 ec 0c             	sub    esp,0xc
c001ff93:	83 ec 0c             	sub    esp,0xc
c001ff96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9a:	e8 cd ff ff ff       	call   c001ff6c <CPU::~CPU()>
c001ff9f:	83 c4 10             	add    esp,0x10
c001ffa2:	83 ec 08             	sub    esp,0x8
c001ffa5:	68 94 11 00 00       	push   0x1194
c001ffaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffae:	e8 65 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffb3:	83 c4 10             	add    esp,0x10
c001ffb6:	83 c4 0c             	add    esp,0xc
c001ffb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ffbc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ffbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ffc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ffc4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ffc4:	90                   	nop
c001ffc5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ffc8 <ThreadControlBlock::ThreadControlBlock()>:
c001ffc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffcc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ffde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ffe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ffff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020003:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020007:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002000f:	90                   	nop
c0020010:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020014 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020022:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020038:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002003e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020042:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020054:	90                   	nop
c0020055:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020056 <PCI::~PCI()>:
c0020056:	83 ec 0c             	sub    esp,0xc
c0020059:	ba ec 30 02 c0       	mov    edx,0xc00230ec
c002005e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020062:	89 10                	mov    DWORD PTR [eax],edx
c0020064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	50                   	push   eax
c002006c:	e8 8b c2 fe ff       	call   c000c2fc <Bus::~Bus()>
c0020071:	83 c4 10             	add    esp,0x10
c0020074:	90                   	nop
c0020075:	83 c4 0c             	add    esp,0xc
c0020078:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002007a <PCI::~PCI()>:
c002007a:	83 ec 0c             	sub    esp,0xc
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020084:	e8 cd ff ff ff       	call   c0020056 <PCI::~PCI()>
c0020089:	83 c4 10             	add    esp,0x10
c002008c:	83 ec 08             	sub    esp,0x8
c002008f:	68 5c 01 00 00       	push   0x15c
c0020094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020098:	e8 7b a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002009d:	83 c4 10             	add    esp,0x10
c00200a0:	83 c4 0c             	add    esp,0xc
c00200a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200a4 <IDE::~IDE()>:
c00200a4:	83 ec 0c             	sub    esp,0xc
c00200a7:	ba a0 31 02 c0       	mov    edx,0xc00231a0
c00200ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b0:	89 10                	mov    DWORD PTR [eax],edx
c00200b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b6:	83 ec 0c             	sub    esp,0xc
c00200b9:	50                   	push   eax
c00200ba:	e8 1d cc fe ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	90                   	nop
c00200c3:	83 c4 0c             	add    esp,0xc
c00200c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00200c8 <IDE::~IDE()>:
c00200c8:	83 ec 0c             	sub    esp,0xc
c00200cb:	83 ec 0c             	sub    esp,0xc
c00200ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d2:	e8 cd ff ff ff       	call   c00200a4 <IDE::~IDE()>
c00200d7:	83 c4 10             	add    esp,0x10
c00200da:	83 ec 08             	sub    esp,0x8
c00200dd:	68 70 02 00 00       	push   0x270
c00200e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e6:	e8 2d a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200eb:	83 c4 10             	add    esp,0x10
c00200ee:	83 c4 0c             	add    esp,0xc
c00200f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00200f2 <SATABus::~SATABus()>:
c00200f2:	83 ec 0c             	sub    esp,0xc
c00200f5:	ba f0 31 02 c0       	mov    edx,0xc00231f0
c00200fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200fe:	89 10                	mov    DWORD PTR [eax],edx
c0020100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020104:	83 ec 0c             	sub    esp,0xc
c0020107:	50                   	push   eax
c0020108:	e8 cf cb fe ff       	call   c000ccdc <HardDiskController::~HardDiskController()>
c002010d:	83 c4 10             	add    esp,0x10
c0020110:	90                   	nop
c0020111:	83 c4 0c             	add    esp,0xc
c0020114:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020116 <SATABus::~SATABus()>:
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	83 ec 0c             	sub    esp,0xc
c002011c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020120:	e8 cd ff ff ff       	call   c00200f2 <SATABus::~SATABus()>
c0020125:	83 c4 10             	add    esp,0x10
c0020128:	83 ec 08             	sub    esp,0x8
c002012b:	68 64 01 00 00       	push   0x164
c0020130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020134:	e8 df a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020139:	83 c4 10             	add    esp,0x10
c002013c:	83 c4 0c             	add    esp,0xc
c002013f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020140 <ATA::~ATA()>:
c0020140:	83 ec 0c             	sub    esp,0xc
c0020143:	ba 30 32 02 c0       	mov    edx,0xc0023230
c0020148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002014c:	89 10                	mov    DWORD PTR [eax],edx
c002014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020152:	83 ec 0c             	sub    esp,0xc
c0020155:	50                   	push   eax
c0020156:	e8 63 cc fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c002015b:	83 c4 10             	add    esp,0x10
c002015e:	90                   	nop
c002015f:	83 c4 0c             	add    esp,0xc
c0020162:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020164 <ATA::~ATA()>:
c0020164:	83 ec 0c             	sub    esp,0xc
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002016e:	e8 cd ff ff ff       	call   c0020140 <ATA::~ATA()>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	83 ec 08             	sub    esp,0x8
c0020179:	68 7c 01 00 00       	push   0x17c
c002017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020182:	e8 91 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020187:	83 c4 10             	add    esp,0x10
c002018a:	83 c4 0c             	add    esp,0xc
c002018d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002018e <ATAPI::~ATAPI()>:
c002018e:	83 ec 0c             	sub    esp,0xc
c0020191:	ba 78 32 02 c0       	mov    edx,0xc0023278
c0020196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019a:	89 10                	mov    DWORD PTR [eax],edx
c002019c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a0:	83 ec 0c             	sub    esp,0xc
c00201a3:	50                   	push   eax
c00201a4:	e8 15 cc fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c00201a9:	83 c4 10             	add    esp,0x10
c00201ac:	90                   	nop
c00201ad:	83 c4 0c             	add    esp,0xc
c00201b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00201b2 <ATAPI::~ATAPI()>:
c00201b2:	83 ec 0c             	sub    esp,0xc
c00201b5:	83 ec 0c             	sub    esp,0xc
c00201b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201bc:	e8 cd ff ff ff       	call   c002018e <ATAPI::~ATAPI()>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	83 ec 08             	sub    esp,0x8
c00201c7:	68 84 01 00 00       	push   0x184
c00201cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d0:	e8 43 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201d5:	83 c4 10             	add    esp,0x10
c00201d8:	83 c4 0c             	add    esp,0xc
c00201db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00201dc <SATA::~SATA()>:
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	ba 2c 33 02 c0       	mov    edx,0xc002332c
c00201e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e8:	89 10                	mov    DWORD PTR [eax],edx
c00201ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ee:	83 ec 0c             	sub    esp,0xc
c00201f1:	50                   	push   eax
c00201f2:	e8 c7 cb fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	90                   	nop
c00201fb:	83 c4 0c             	add    esp,0xc
c00201fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020200 <SATA::~SATA()>:
c0020200:	83 ec 0c             	sub    esp,0xc
c0020203:	83 ec 0c             	sub    esp,0xc
c0020206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002020a:	e8 cd ff ff ff       	call   c00201dc <SATA::~SATA()>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	83 ec 08             	sub    esp,0x8
c0020215:	68 7c 01 00 00       	push   0x17c
c002021a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002021e:	e8 f5 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020223:	83 c4 10             	add    esp,0x10
c0020226:	83 c4 0c             	add    esp,0xc
c0020229:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002022a <SATAPI::~SATAPI()>:
c002022a:	83 ec 0c             	sub    esp,0xc
c002022d:	ba 50 34 02 c0       	mov    edx,0xc0023450
c0020232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020236:	89 10                	mov    DWORD PTR [eax],edx
c0020238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	50                   	push   eax
c0020240:	e8 79 cb fe ff       	call   c000cdbe <PhysicalDisk::~PhysicalDisk()>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	90                   	nop
c0020249:	83 c4 0c             	add    esp,0xc
c002024c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002024e <SATAPI::~SATAPI()>:
c002024e:	83 ec 0c             	sub    esp,0xc
c0020251:	83 ec 0c             	sub    esp,0xc
c0020254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020258:	e8 cd ff ff ff       	call   c002022a <SATAPI::~SATAPI()>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	83 ec 08             	sub    esp,0x8
c0020263:	68 84 01 00 00       	push   0x184
c0020268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026c:	e8 a7 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020271:	83 c4 10             	add    esp,0x10
c0020274:	83 c4 0c             	add    esp,0xc
c0020277:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020278 <IOAPIC::~IOAPIC()>:
c0020278:	83 ec 0c             	sub    esp,0xc
c002027b:	ba 90 34 02 c0       	mov    edx,0xc0023490
c0020280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020284:	89 10                	mov    DWORD PTR [eax],edx
c0020286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028a:	83 ec 0c             	sub    esp,0xc
c002028d:	50                   	push   eax
c002028e:	e8 d1 c5 fe ff       	call   c000c864 <Device::~Device()>
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	90                   	nop
c0020297:	83 c4 0c             	add    esp,0xc
c002029a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002029c <IOAPIC::~IOAPIC()>:
c002029c:	83 ec 0c             	sub    esp,0xc
c002029f:	83 ec 0c             	sub    esp,0xc
c00202a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a6:	e8 cd ff ff ff       	call   c0020278 <IOAPIC::~IOAPIC()>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	83 ec 08             	sub    esp,0x8
c00202b1:	68 68 01 00 00       	push   0x168
c00202b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ba:	e8 59 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	83 c4 0c             	add    esp,0xc
c00202c5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00202c8 <APICTimer::~APICTimer()>:
c00202c8:	83 ec 0c             	sub    esp,0xc
c00202cb:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c00202d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d4:	89 10                	mov    DWORD PTR [eax],edx
c00202d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	50                   	push   eax
c00202de:	e8 4d e0 fe ff       	call   c000e330 <Timer::~Timer()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	90                   	nop
c00202e7:	83 c4 0c             	add    esp,0xc
c00202ea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00202ec <APICTimer::~APICTimer()>:
c00202ec:	83 ec 0c             	sub    esp,0xc
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f6:	e8 cd ff ff ff       	call   c00202c8 <APICTimer::~APICTimer()>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	83 ec 08             	sub    esp,0x8
c0020301:	68 60 01 00 00       	push   0x160
c0020306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030a:	e8 09 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	83 c4 0c             	add    esp,0xc
c0020315:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020318 <PIT::~PIT()>:
c0020318:	83 ec 0c             	sub    esp,0xc
c002031b:	ba 28 35 02 c0       	mov    edx,0xc0023528
c0020320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020324:	89 10                	mov    DWORD PTR [eax],edx
c0020326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	50                   	push   eax
c002032e:	e8 fd df fe ff       	call   c000e330 <Timer::~Timer()>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	90                   	nop
c0020337:	83 c4 0c             	add    esp,0xc
c002033a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002033c <PIT::~PIT()>:
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020346:	e8 cd ff ff ff       	call   c0020318 <PIT::~PIT()>
c002034b:	83 c4 10             	add    esp,0x10
c002034e:	83 ec 08             	sub    esp,0x8
c0020351:	68 5c 01 00 00       	push   0x15c
c0020356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035a:	e8 b9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	83 c4 0c             	add    esp,0xc
c0020365:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 3d 23 02 c0       	mov    esi,0xc002233d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 59 23 02 c0       	mov    esi,0xc0022359
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
