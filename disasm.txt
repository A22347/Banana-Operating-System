
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 41 02 c0       	mov    eax,0xc00241e4
c0000025:	3d e4 41 02 c0       	cmp    eax,0xc00241e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 41 02 c0       	push   0xc00241e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 41 02 c0       	mov    eax,0xc00241e4
c0000051:	2d e4 41 02 c0       	sub    eax,0xc00241e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 41 02 c0       	push   0xc00241e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc 03 02 c0       	mov    ebx,0xc00203fc
c0000097:	81 eb f8 03 02 c0    	sub    ebx,0xc00203f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 03 02 c0       	mov    esi,0xc00203f8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 41 02 c0       	push   0xc00241e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 e4 41 02 c0       	push   0xc00241e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 3f 56 01 00       	call   c00158ec <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 1d 56 01 00       	call   c00158ec <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 2a 5b 01 00       	call   c0015e18 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e9 61 01 00       	call   c00164e0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 bf 12 01 00       	jmp    c001163e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc00],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc00],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc00],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc00],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfafc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 e6 7c 01 00       	jmp    c0019a88 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 10 7d 01 00       	jmp    c0019ac8 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 31 7d 01 00       	jmp    c0019b08 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9a0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9a0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 04 2e 02 c0       	mov    edx,0xc0022e04
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 05 02 c0       	mov    eax,0xc0020522
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa20]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b 05 02 c0       	mov    eax,0xc002052b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9a0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 05 02 c0       	mov    eax,0xc00205b0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 05 02 c0       	mov    ebx,0xc00205a0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 05 02 c0       	mov    eax,0xc0020580
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 05 02 c0       	mov    eax,0xc0020590
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e 05 02 c0       	mov    edx,0xc002053e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 05 02 c0       	mov    edx,0xc0020552
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020980
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020980
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 07 02 c0       	mov    eax,0xc0020780
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf980]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 0a 02 c0       	push   0xc0020a80
c000611b:	e8 04 43 01 00       	call   c001a424 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 0a 02 c0       	push   0xc0020a8e
c0006153:	e8 cc 42 01 00       	call   c001a424 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 35 42 01 00       	call   c001a3c8 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 0a 02 c0       	push   0xc0020a9d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 0a 02 c0       	push   0xc0020aa0
c0006812:	e8 0d 3c 01 00       	call   c001a424 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 21 3c 01 00       	call   c001a440 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa5
c000682c:	e8 f3 3b 01 00       	call   c001a424 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 03 3c 01 00       	call   c001a440 <iso_kprintfd>
c000683d:	c7 04 24 ab 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aab
c0006844:	e8 db 3b 01 00       	call   c001a424 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 eb 3b 01 00       	call   c001a440 <iso_kprintfd>
c0006855:	c7 04 24 b1 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ab1
c000685c:	e8 c3 3b 01 00       	call   c001a424 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 d3 3b 01 00       	call   c001a440 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 0a 02 c0       	push   0xc0020a9d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 0a 02 c0       	push   0xc0020aba
c0006a31:	e8 ee 39 01 00       	call   c001a424 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 0a 02 c0       	push   0xc0020ac5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 0a 02 c0       	push   0xc0020acc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 0a 02 c0       	push   0xc0020ad3
c0006b48:	e8 d7 38 01 00       	call   c001a424 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 0a 02 c0       	push   0xc0020ade
c0006b63:	e8 bc 38 01 00       	call   c001a424 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 02 a2 00 00       	call   c0010e74 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 97 5e 00 00       	call   c000cb18 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 ef 0a 02 c0       	push   0xc0020aef
c0006cb2:	e8 9c a2 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 08 0b 02 c0       	push   0xc0020b08
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 65 ef 00 00       	call   c0015c44 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 74 f1 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 50 69 01 c0       	push   0xc0016950
c0006d03:	52                   	push   edx
c0006d04:	e8 5f f1 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 04 0c 02 c0       	push   0xc0020c04
c0006d16:	e8 38 a2 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 e5 aa 00 00       	call   c001180c <KeInitRand()>
c0006d27:	e8 47 00 01 00       	call   c0016d73 <Vm::initialise8086()>
c0006d2c:	e8 3f 4b 00 00       	call   c000b870 <Fs::initVFS()>
c0006d31:	c7 04 24 15 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b15
c0006d38:	e8 16 a2 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 04 0c 02 c0       	push   0xc0020c04
c0006d5c:	e8 f2 a1 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006d61:	e8 2d 47 00 00       	call   c000b493 <KeInitialiseSymlinks()>
c0006d66:	e8 4b a7 00 00       	call   c00114b6 <KeLoadSystemEnv()>
c0006d6b:	e8 a8 a9 00 00       	call   c0011718 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 2f 0b 02 c0       	push   0xc0020b2f
c0006d7a:	68 38 0b 02 c0       	push   0xc0020b38
c0006d7f:	e8 dc d0 00 00       	call   c0013e60 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 ec 56 00 00       	call   c000c478 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 28 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c28
c0006d93:	e8 bb a1 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 6c 5d 00 00       	call   c000cb16 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 40 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b40
c0006db1:	e8 9d a1 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 51 0b 02 c0       	push   0xc0020b51
c0006dc5:	e8 8d e8 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 b5 ea 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 ec f4 00 00       	call   c00162cc <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 6d 0b 02 c0       	push   0xc0020b6d
c0006df5:	50                   	push   eax
c0006df6:	e8 97 5d 00 00       	call   c000cb92 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 01 85 01 00       	call   c001f3f6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 59 94 00 00       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 32 94 00 00       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 10 94 00 00       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 ee 93 00 00       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 fb 92 00 00       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 d6 92 00 00       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 60 83 01 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 ae 7f 01 00       	call   c001f020 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 ec 92 00 00       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 76 0b 02 c0       	push   0xc0020b76
c00070e2:	e8 6c a5 00 00       	call   c0011653 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 7c 0b 02 c0       	push   0xc0020b7c
c000711e:	e8 30 a5 00 00       	call   c0011653 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 39 8c 00 00       	jmp    c000fda4 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 82 0b 02 c0       	push   0xc0020b82
c00071c3:	0f 94 05 40 36 02 c0 	sete   BYTE PTR ds:0xc0023640
c00071ca:	e8 84 9d 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 33 87 00 00       	call   c000f918 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 06 58 00 00       	call   c000c9fa <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 9a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b9a
c000720d:	e8 41 9d 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 1c 92 00 00       	call   c0010444 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 c3 57 00 00       	call   c000c9fa <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 48 0c 02 c0       	push   0xc0020c48
c0007254:	e8 fa 9c 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0007259:	e8 52 0d 01 00       	call   c0017fb0 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 b4 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb4
c0007265:	e8 e9 9c 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 1e ed 00 00       	call   c0015f94 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 cf 0b 02 c0       	push   0xc0020bcf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 e0 0b 02 c0       	push   0xc0020be0
c00072ed:	e8 61 a3 00 00       	call   c0011653 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ed 0b 02 c0       	push   0xc0020bed
c0007302:	e8 4c a3 00 00       	call   c0011653 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 f7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bf7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 32 a3 00 00       	jmp    c0011653 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 69 07 01 00       	call   c0017c7c <HalSystemIdle()>
c0007513:	e8 9a 84 01 00       	call   c001f9b2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 b0 f0 01 c0       	push   0xc001f0b0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 c0 f0 01 c0       	push   0xc001f0c0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ca f0 01 c0       	push   0xc001f0ca
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 d4 f0 01 c0       	push   0xc001f0d4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 de f0 01 c0       	push   0xc001f0de
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 e8 f0 01 c0       	push   0xc001f0e8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 f2 f0 01 c0       	push   0xc001f0f2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 fc f0 01 c0       	push   0xc001f0fc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 06 f1 01 c0       	push   0xc001f106
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 0e f1 01 c0       	push   0xc001f10e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 18 f1 01 c0       	push   0xc001f118
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 20 f1 01 c0       	push   0xc001f120
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 28 f1 01 c0       	push   0xc001f128
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 30 f1 01 c0       	push   0xc001f130
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 4a f1 01 c0       	push   0xc001f14a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 52 f1 01 c0       	push   0xc001f152
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 5c f1 01 c0       	push   0xc001f15c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 66 f1 01 c0       	push   0xc001f166
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 70 f1 01 c0       	push   0xc001f170
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 0a f2 01 c0       	push   0xc001f20a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 11 f2 01 c0       	push   0xc001f211
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 fc f1 01 c0       	push   0xc001f1fc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 03 f2 01 c0       	push   0xc001f203
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 7a f1 01 c0       	push   0xc001f17a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 84 f1 01 c0       	push   0xc001f184
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 8e f1 01 c0       	push   0xc001f18e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 98 f1 01 c0       	push   0xc001f198
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 a2 f1 01 c0       	push   0xc001f1a2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 ac f1 01 c0       	push   0xc001f1ac
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 b6 f1 01 c0       	push   0xc001f1b6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ca f1 01 c0       	push   0xc001f1ca
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 d4 f1 01 c0       	push   0xc001f1d4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 de f1 01 c0       	push   0xc001f1de
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 e8 f1 01 c0       	push   0xc001f1e8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 4c f3 01 c0       	push   0xc001f34c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 56 f3 01 c0       	push   0xc001f356
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 60 f3 01 c0       	push   0xc001f360
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 6a f3 01 c0       	push   0xc001f36a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 74 f3 01 c0       	push   0xc001f374
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 7e f3 01 c0       	push   0xc001f37e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 88 f3 01 c0       	push   0xc001f388
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 92 f3 01 c0       	push   0xc001f392
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 06 f1 01 c0       	push   0xc001f106
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 34 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023634
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d 34 36 02 c0    	mov    edi,DWORD PTR ds:0xc0023634
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 34 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023634,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 34 36 02 c0       	mov    eax,ds:0xc0023634
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 98 0c 02 c0       	push   0xc0020c98
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 c8 0c 02 c0       	push   0xc0020cc8
c0007a27:	e8 27 9c 00 00       	call   c0011653 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 cd 0c 02 c0       	push   0xc0020ccd
c0007a3d:	e8 11 9c 00 00       	call   c0011653 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 d4 0c 02 c0       	push   0xc0020cd4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 6e 93 00 00       	call   c0010ed7 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 97 92 00 00       	call   c0010e21 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 aa 7d 01 00       	call   c001f94a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ec 0c 02 c0       	push   0xc0020cec
c0007c31:	e8 1d 9a 00 00       	call   c0011653 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ec 0c 02 c0       	push   0xc0020cec
c0007ca2:	e8 ac 99 00 00       	call   c0011653 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 38 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023638
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 38 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023638
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 38 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023638
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 91 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d91
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 a6 98 00 00       	jmp    c0011653 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 14 0d 02 c0       	push   0xc0020d14
c0007e31:	e8 1d 98 00 00       	call   c0011653 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 a7 0d 02 c0       	push   0xc0020da7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 44 0d 02 c0       	push   0xc0020d44
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 68 0d 02 c0       	push   0xc0020d68
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 cd 0d 02 c0       	push   0xc0020dcd
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 bf 0d 02 c0       	push   0xc0020dbf
c000813c:	e8 12 95 00 00       	call   c0011653 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 e9 0d 02 c0       	push   0xc0020de9
c0008311:	e8 3d 93 00 00       	call   c0011653 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 59 dd 00 00       	call   c00160b8 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 39 74 01 00       	call   c001f830 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 0e 02 c0       	push   0xc0020e06
c000840c:	e8 42 92 00 00       	call   c0011653 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 de 53 00 00       	call   c000d8d4 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 54 09 01 00       	call   c0018e70 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 60 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9a0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 60 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc9a0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 18 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcae8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 f0 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb10]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 86 06 01 00       	call   c0018d04 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 e3 06 01 00       	jmp    c0018e0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e40
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 dd 8e 00 00       	jmp    c0011653 <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 4c 3b 00 00       	jmp    c000c41f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 4e 0e 02 c0       	mov    esi,0xc0020e4e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 ea 01 01 00       	call   c0018e0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 74 0e 02 c0       	mov    edx,0xc0020e74
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 5f 0e 02 c0       	push   0xc0020e5f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 65 0e 02 c0       	push   0xc0020e65
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 a0 36 02 c0    	mov    DWORD PTR ds:0xc00236a0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 17 68 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 3c 0f 02 c0       	mov    edx,0xc0020f3c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 17 67 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 0b 67 01 00       	call   c001faf4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 11 66 01 00       	call   c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 14 0f 02 c0       	push   0xc0020f14
c000942c:	e8 22 82 00 00       	call   c0011653 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 16 66 01 00       	call   c001faec <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 a3 66 01 00       	call   c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 61 64 01 00       	call   c001f9d6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 30 36 02 c0       	push   0xc0023630
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 d4 f9 01 c0       	push   0xc001f9d4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 a8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236a8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d a8 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236a8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 a4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236a4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 a4 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00236a4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 a4 36 02 c0    	mov    DWORD PTR ds:0xc00236a4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 6c 0f 02 c0       	push   0xc0020f6c
c0009689:	e8 c5 7f 00 00       	call   c0011653 <KePanic(char const*)>
c000968e:	8b 35 a4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236a4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d a4 36 02 c0    	mov    DWORD PTR ds:0xc00236a4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 a4 36 02 c0       	mov    eax,ds:0xc00236a4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 a4 36 02 c0    	mov    DWORD PTR ds:0xc00236a4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 a4 36 02 c0       	mov    ds:0xc00236a4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 ac 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236ac
c000975f:	8b 0d b4 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236b4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d ac 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236ac
c000977a:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d b0 36 02 c0    	cmp    DWORD PTR ds:0xc00236b0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 00 12 02 c0       	push   0xc0021200
c00097c0:	e8 8e 7e 00 00       	call   c0011653 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 17 12 02 c0       	push   0xc0021217
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d b0 36 02 c0    	mov    DWORD PTR ds:0xc00236b0,ebx
c0009864:	c6 05 b8 36 02 c0 43 	mov    BYTE PTR ds:0xc00236b8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 b4 36 02 c0       	mov    ds:0xc00236b4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 ac 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00236ac,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 b0 36 02 c0       	mov    eax,ds:0xc00236b0
c0009896:	f7 35 ac 36 02 c0    	div    DWORD PTR ds:0xc00236ac
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 8c 0f 02 c0       	push   0xc0020f8c
c00098d1:	e8 7d 7d 00 00       	call   c0011653 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 2e 12 02 c0       	push   0xc002122e
c00099a3:	e8 ab 7c 00 00       	call   c0011653 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 b0 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020fb0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 48 7c 00 00       	jmp    c0011653 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 4a 12 02 c0       	push   0xc002124a
c0009a18:	e8 36 7c 00 00       	call   c0011653 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 66 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021266
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 ec 7b 00 00       	jmp    c0011653 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 d4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fd4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 f8 0f 02 c0       	push   0xc0020ff8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 60 10 02 c0       	push   0xc0021060
c0009dad:	e8 a1 78 00 00       	call   c0011653 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 84 10 02 c0       	push   0xc0021084
c0009e99:	e8 b5 77 00 00       	call   c0011653 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 b0 10 02 c0       	push   0xc00210b0
c0009fed:	e8 61 76 00 00       	call   c0011653 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 6a 2a 00 00       	call   c000cc8e <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 80 12 02 c0       	push   0xc0021280
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 ac 36 02 c0       	mov    eax,ds:0xc00236ac
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 b8 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236b8
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 3e 3b 00 00       	call   c000de48 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d ac 36 02 c0    	cmp    DWORD PTR ds:0xc00236ac,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 d4 10 02 c0       	push   0xc00210d4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 8e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002128e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 b1 12 02 c0       	push   0xc00212b1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 9f 12 02 c0       	push   0xc002129f
c000a3db:	e8 73 72 00 00       	call   c0011653 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 b1 12 02 c0       	push   0xc00212b1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 ac 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236ac
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 b8 36 02 c0 	movsx  eax,BYTE PTR ds:0xc00236b8
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 55 39 00 00       	call   c000dddc <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 ac 36 02 c0    	cmp    DWORD PTR ds:0xc00236ac,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 c4 12 02 c0       	push   0xc00212c4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 04 11 02 c0       	push   0xc0021104
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 24 11 02 c0       	push   0xc0021124
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 84 11 02 c0 	mov    DWORD PTR [esp],0xc0021184
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 d9 12 02 c0       	push   0xc00212d9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ed 12 02 c0       	push   0xc00212ed
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 00 13 02 c0       	push   0xc0021300
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 0d 13 02 c0       	push   0xc002130d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 26 13 02 c0       	push   0xc0021326
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 26 13 02 c0       	push   0xc0021326
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 2e 13 02 c0 	mov    DWORD PTR [esp],0xc002132e
c000a7f8:	e8 56 6e 00 00       	call   c0011653 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 46 13 02 c0       	push   0xc0021346
c000a80a:	e8 44 6e 00 00       	call   c0011653 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 4f 0e 02 c0       	mov    esi,0xc0020e4f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 4e 0e 02 c0       	mov    al,ds:0xc0020e4e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 5c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeca4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 ac 14 02 c0       	push   0xc00214ac
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 c0 14 02 c0       	push   0xc00214c0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ca 14 02 c0       	push   0xc00214ca
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 d4 14 02 c0       	push   0xc00214d4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 18 16 02 c0       	push   0xc0021618
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 de 14 02 c0       	push   0xc00214de
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 38 16 02 c0       	push   0xc0021638
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 f3 14 02 c0       	push   0xc00214f3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 0d 15 02 c0       	push   0xc002150d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 c0 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc940]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 60 16 02 c0       	push   0xc0021660
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 18 16 02 c0       	push   0xc0021618
c000abb4:	e8 9a 6a 00 00       	call   c0011653 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 a8 16 02 c0       	push   0xc00216a8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 a8 16 02 c0       	push   0xc00216a8
c000abe3:	e8 6b 6a 00 00       	call   c0011653 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 18 15 02 c0       	push   0xc0021518
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 18 15 02 c0       	push   0xc0021518
c000ac0f:	e8 3f 6a 00 00       	call   c0011653 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 35 15 02 c0       	push   0xc0021535
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 35 15 02 c0       	push   0xc0021535
c000ac3b:	e8 13 6a 00 00       	call   c0011653 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 c8 16 02 c0       	push   0xc00216c8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 c8 16 02 c0       	push   0xc00216c8
c000ac67:	e8 e7 69 00 00       	call   c0011653 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ec 16 02 c0       	push   0xc00216ec
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ec 16 02 c0       	push   0xc00216ec
c000ac93:	e8 bb 69 00 00       	call   c0011653 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 51 15 02 c0       	push   0xc0021551
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 51 15 02 c0       	push   0xc0021551
c000acbf:	e8 8f 69 00 00       	call   c0011653 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 6d 15 02 c0       	push   0xc002156d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 6d 15 02 c0       	push   0xc002156d
c000aceb:	e8 63 69 00 00       	call   c0011653 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 0c 17 02 c0       	push   0xc002170c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 0c 17 02 c0       	push   0xc002170c
c000ad17:	e8 37 69 00 00       	call   c0011653 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 30 17 02 c0       	push   0xc0021730
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 30 17 02 c0       	push   0xc0021730
c000ad43:	e8 0b 69 00 00       	call   c0011653 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 4f 17 02 c0       	push   0xc002174f
c000adba:	50                   	push   eax
c000adbb:	e8 c2 0d 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 6d 17 02 c0       	push   0xc002176d
c000adcf:	e8 7f 68 00 00       	call   c0011653 <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 bf 0d 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 87 17 02 c0       	push   0xc0021787
c000adf0:	e8 5e 68 00 00       	call   c0011653 <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae12:	57                   	push   edi
c000ae13:	52                   	push   edx
c000ae14:	6a 00                	push   0x0
c000ae16:	6a 08                	push   0x8
c000ae18:	53                   	push   ebx
c000ae19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae1c:	83 c4 20             	add    esp,0x20
c000ae1f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae24:	74 10                	je     c000ae36 <KiFlushSymlinkChanges()+0x9c>
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	68 a1 17 02 c0       	push   0xc00217a1
c000ae2e:	e8 20 68 00 00       	call   c0011653 <KePanic(char const*)>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae3b:	89 f0                	mov    eax,esi
c000ae3d:	57                   	push   edi
c000ae3e:	c1 e0 08             	shl    eax,0x8
c000ae41:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae46:	50                   	push   eax
c000ae47:	6a 00                	push   0x0
c000ae49:	68 00 01 00 00       	push   0x100
c000ae4e:	53                   	push   ebx
c000ae4f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae52:	83 c4 20             	add    esp,0x20
c000ae55:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 bb 17 02 c0       	push   0xc00217bb
c000ae67:	e8 e7 67 00 00       	call   c0011653 <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 83 0d 00 00       	call   c000bbfe <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 1c 61 00 00       	call   c0010fd5 <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 ce 68 00 00       	call   c00117a1 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1b             	shl    eax,0x1b
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 d5 17 02 c0       	push   0xc00217d5
c000af0c:	e8 42 67 00 00       	call   c0011653 <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 d7 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 7b fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 4e 01 00 00    	je     c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000afe3:	31 db                	xor    ebx,ebx
c000afe5:	50                   	push   eax
c000afe6:	50                   	push   eax
c000afe7:	56                   	push   esi
c000afe8:	68 de 17 02 c0       	push   0xc00217de
c000afed:	e8 53 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff2:	83 c4 10             	add    esp,0x10
c000aff5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000affb:	7e 30                	jle    c000b02d <KiIsSymlinkRegistered(char const*)+0x78>
c000affd:	89 d8                	mov    eax,ebx
c000afff:	55                   	push   ebp
c000b000:	c1 e0 08             	shl    eax,0x8
c000b003:	55                   	push   ebp
c000b004:	05 00 70 02 c0       	add    eax,0xc0027000
c000b009:	50                   	push   eax
c000b00a:	56                   	push   esi
c000b00b:	e8 40 57 ff ff       	call   c0000750 <strcmp>
c000b010:	83 c4 10             	add    esp,0x10
c000b013:	85 c0                	test   eax,eax
c000b015:	75 13                	jne    c000b02a <KiIsSymlinkRegistered(char const*)+0x75>
c000b017:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b01e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b025:	e9 07 01 00 00       	jmp    c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b02a:	43                   	inc    ebx
c000b02b:	eb c8                	jmp    c000aff5 <KiIsSymlinkRegistered(char const*)+0x40>
c000b02d:	83 ec 0c             	sub    esp,0xc
c000b030:	68 14 01 00 00       	push   0x114
c000b035:	e8 7c ca ff ff       	call   c0007ab6 <malloc>
c000b03a:	83 c4 0c             	add    esp,0xc
c000b03d:	89 c3                	mov    ebx,eax
c000b03f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b045:	68 4f 17 02 c0       	push   0xc002174f
c000b04a:	50                   	push   eax
c000b04b:	e8 32 0b 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	85 db                	test   ebx,ebx
c000b055:	75 12                	jne    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	68 fd 17 02 c0       	push   0xc00217fd
c000b05f:	e8 ef 65 00 00       	call   c0011653 <KePanic(char const*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	eb 10                	jmp    c000b079 <KiIsSymlinkRegistered(char const*)+0xc4>
c000b069:	83 ec 0c             	sub    esp,0xc
c000b06c:	53                   	push   ebx
c000b06d:	e8 f2 0d 00 00       	call   c000be64 <File::exists()>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	84 c0                	test   al,al
c000b077:	74 de                	je     c000b057 <KiIsSymlinkRegistered(char const*)+0xa2>
c000b079:	57                   	push   edi
c000b07a:	57                   	push   edi
c000b07b:	6a 01                	push   0x1
c000b07d:	53                   	push   ebx
c000b07e:	e8 1d 0b 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	74 10                	je     c000b09a <KiIsSymlinkRegistered(char const*)+0xe5>
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	68 18 18 02 c0       	push   0xc0021818
c000b092:	e8 bc 65 00 00       	call   c0011653 <KePanic(char const*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b09f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b0a3:	55                   	push   ebp
c000b0a4:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b0a8:	57                   	push   edi
c000b0a9:	6a 00                	push   0x0
c000b0ab:	68 00 01 00 00       	push   0x100
c000b0b0:	53                   	push   ebx
c000b0b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0b4:	83 c4 20             	add    esp,0x20
c000b0b7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0bf:	75 58                	jne    c000b119 <KiIsSymlinkRegistered(char const*)+0x164>
c000b0c1:	83 ec 0c             	sub    esp,0xc
c000b0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0c6:	55                   	push   ebp
c000b0c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0cb:	52                   	push   edx
c000b0cc:	6a 00                	push   0x0
c000b0ce:	6a 08                	push   0x8
c000b0d0:	53                   	push   ebx
c000b0d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0d4:	83 c4 20             	add    esp,0x20
c000b0d7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0dc:	75 3b                	jne    c000b119 <KiIsSymlinkRegistered(char const*)+0x164>
c000b0de:	50                   	push   eax
c000b0df:	57                   	push   edi
c000b0e0:	56                   	push   esi
c000b0e1:	68 33 18 02 c0       	push   0xc0021833
c000b0e6:	e8 5a f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0eb:	5a                   	pop    edx
c000b0ec:	59                   	pop    ecx
c000b0ed:	57                   	push   edi
c000b0ee:	56                   	push   esi
c000b0ef:	e8 5c 56 ff ff       	call   c0000750 <strcmp>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	85 c0                	test   eax,eax
c000b0f9:	75 9f                	jne    c000b09a <KiIsSymlinkRegistered(char const*)+0xe5>
c000b0fb:	83 ec 0c             	sub    esp,0xc
c000b0fe:	53                   	push   ebx
c000b0ff:	e8 fa 0a 00 00       	call   c000bbfe <File::close()>
c000b104:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b106:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b109:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b110:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	eb 18                	jmp    c000b131 <KiIsSymlinkRegistered(char const*)+0x17c>
c000b119:	83 ec 0c             	sub    esp,0xc
c000b11c:	53                   	push   ebx
c000b11d:	e8 dc 0a 00 00       	call   c000bbfe <File::close()>
c000b122:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b127:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b12a:	83 c4 10             	add    esp,0x10
c000b12d:	31 c0                	xor    eax,eax
c000b12f:	31 d2                	xor    edx,edx
c000b131:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b137:	5b                   	pop    ebx
c000b138:	5e                   	pop    esi
c000b139:	5f                   	pop    edi
c000b13a:	5d                   	pop    ebp
c000b13b:	c3                   	ret    

c000b13c <KeDereferenceSymlink(char const*, char*)>:
c000b13c:	55                   	push   ebp
c000b13d:	57                   	push   edi
c000b13e:	56                   	push   esi
c000b13f:	53                   	push   ebx
c000b140:	83 ec 44             	sub    esp,0x44
c000b143:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b147:	56                   	push   esi
c000b148:	68 3d 18 02 c0       	push   0xc002183d
c000b14d:	e8 f3 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b152:	89 34 24             	mov    DWORD PTR [esp],esi
c000b155:	e8 5b fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	89 c7                	mov    edi,eax
c000b15f:	89 d0                	mov    eax,edx
c000b161:	09 f8                	or     eax,edi
c000b163:	75 07                	jne    c000b16c <KeDereferenceSymlink(char const*, char*)+0x30>
c000b165:	31 c0                	xor    eax,eax
c000b167:	e9 e3 01 00 00       	jmp    c000b34f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b16c:	89 d5                	mov    ebp,edx
c000b16e:	53                   	push   ebx
c000b16f:	53                   	push   ebx
c000b170:	57                   	push   edi
c000b171:	68 57 18 02 c0       	push   0xc0021857
c000b176:	e8 ca f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b17b:	58                   	pop    eax
c000b17c:	5a                   	pop    edx
c000b17d:	55                   	push   ebp
c000b17e:	68 65 18 02 c0       	push   0xc0021865
c000b183:	e8 bd f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b188:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b18f:	e8 22 c9 ff ff       	call   c0007ab6 <malloc>
c000b194:	83 c4 0c             	add    esp,0xc
c000b197:	89 c3                	mov    ebx,eax
c000b199:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b19f:	56                   	push   esi
c000b1a0:	50                   	push   eax
c000b1a1:	e8 dc 09 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b1a6:	83 c4 10             	add    esp,0x10
c000b1a9:	85 db                	test   ebx,ebx
c000b1ab:	0f 84 68 01 00 00    	je     c000b319 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b1b1:	83 ec 0c             	sub    esp,0xc
c000b1b4:	68 a0 24 02 c0       	push   0xc00224a0
c000b1b9:	e8 87 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1be:	5a                   	pop    edx
c000b1bf:	59                   	pop    ecx
c000b1c0:	6a 01                	push   0x1
c000b1c2:	53                   	push   ebx
c000b1c3:	e8 d8 09 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	85 c0                	test   eax,eax
c000b1cd:	74 0b                	je     c000b1da <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d4:	53                   	push   ebx
c000b1d5:	e9 39 01 00 00       	jmp    c000b313 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	68 e6 0d 02 c0       	push   0xc0020de6
c000b1e2:	e8 5e f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1e7:	58                   	pop    eax
c000b1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ea:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1ee:	56                   	push   esi
c000b1ef:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1f3:	52                   	push   edx
c000b1f4:	6a 00                	push   0x0
c000b1f6:	6a 08                	push   0x8
c000b1f8:	53                   	push   ebx
c000b1f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1fc:	83 c4 20             	add    esp,0x20
c000b1ff:	85 c0                	test   eax,eax
c000b201:	0f 85 fe 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b207:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b20c:	0f 85 f3 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b212:	83 ec 0c             	sub    esp,0xc
c000b215:	68 d2 24 02 c0       	push   0xc00224d2
c000b21a:	e8 26 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b21f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b221:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b225:	89 34 24             	mov    DWORD PTR [esp],esi
c000b228:	52                   	push   edx
c000b229:	6a 00                	push   0x0
c000b22b:	6a 08                	push   0x8
c000b22d:	53                   	push   ebx
c000b22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b231:	83 c4 20             	add    esp,0x20
c000b234:	85 c0                	test   eax,eax
c000b236:	0f 85 c9 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b23c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b241:	0f 85 be 00 00 00    	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b247:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b24b:	0f 85 14 ff ff ff    	jne    c000b165 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b251:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b255:	0f 85 0a ff ff ff    	jne    c000b165 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b25b:	83 ec 0c             	sub    esp,0xc
c000b25e:	68 73 18 02 c0       	push   0xc0021873
c000b263:	e8 dd f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b268:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b270:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b278:	83 c4 0c             	add    esp,0xc
c000b27b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b27f:	50                   	push   eax
c000b280:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b284:	50                   	push   eax
c000b285:	53                   	push   ebx
c000b286:	e8 17 0c 00 00       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b293:	75 70                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b295:	31 ff                	xor    edi,edi
c000b297:	b8 0f 00 00 00       	mov    eax,0xf
c000b29c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2a0:	89 f8                	mov    eax,edi
c000b2a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b2a6:	73 5d                	jae    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2a8:	83 ec 0c             	sub    esp,0xc
c000b2ab:	68 73 18 02 c0       	push   0xc0021873
c000b2b0:	e8 90 f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b2b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b2bd:	83 c0 f0             	add    eax,0xfffffff0
c000b2c0:	b9 ff 00 00 00       	mov    ecx,0xff
c000b2c5:	83 d2 ff             	adc    edx,0xffffffff
c000b2c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	39 c1                	cmp    ecx,eax
c000b2d5:	19 d7                	sbb    edi,edx
c000b2d7:	72 40                	jb     c000b319 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b2d9:	83 ec 0c             	sub    esp,0xc
c000b2dc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b2de:	56                   	push   esi
c000b2df:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	53                   	push   ebx
c000b2e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b2e9:	83 c4 20             	add    esp,0x20
c000b2ec:	85 c0                	test   eax,eax
c000b2ee:	75 15                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f4:	89 c7                	mov    edi,eax
c000b2f6:	c1 ff 1f             	sar    edi,0x1f
c000b2f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2fd:	75 06                	jne    c000b305 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2ff:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b303:	74 19                	je     c000b31e <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b305:	83 ec 0c             	sub    esp,0xc
c000b308:	53                   	push   ebx
c000b309:	e8 f0 08 00 00       	call   c000bbfe <File::close()>
c000b30e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b310:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b313:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	83 c8 ff             	or     eax,0xffffffff
c000b31c:	eb 31                	jmp    c000b34f <KeDereferenceSymlink(char const*, char*)+0x213>
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 b2 2f 02 c0       	push   0xc0022fb2
c000b326:	e8 1a f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b32b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b32e:	e8 cb 08 00 00       	call   c000bbfe <File::close()>
c000b333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b338:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33b:	c7 04 24 76 18 02 c0 	mov    DWORD PTR [esp],0xc0021876
c000b342:	e8 fe f5 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	b8 01 00 00 00       	mov    eax,0x1
c000b34f:	83 c4 3c             	add    esp,0x3c
c000b352:	5b                   	pop    ebx
c000b353:	5e                   	pop    esi
c000b354:	5f                   	pop    edi
c000b355:	5d                   	pop    ebp
c000b356:	c3                   	ret    

c000b357 <KeCreateSymlink(char const*, char const*)>:
c000b357:	55                   	push   ebp
c000b358:	57                   	push   edi
c000b359:	56                   	push   esi
c000b35a:	53                   	push   ebx
c000b35b:	83 ec 38             	sub    esp,0x38
c000b35e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b362:	68 14 01 00 00       	push   0x114
c000b367:	e8 4a c7 ff ff       	call   c0007ab6 <malloc>
c000b36c:	6a 00                	push   0x0
c000b36e:	89 c3                	mov    ebx,eax
c000b370:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b376:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b37a:	50                   	push   eax
c000b37b:	e8 24 07 00 00       	call   c000baa4 <File::File(char const*, Process*, bool)>
c000b380:	83 c4 20             	add    esp,0x20
c000b383:	b8 01 00 00 00       	mov    eax,0x1
c000b388:	85 db                	test   ebx,ebx
c000b38a:	0f 84 fb 00 00 00    	je     c000b48b <KeCreateSymlink(char const*, char const*)+0x134>
c000b390:	52                   	push   edx
c000b391:	52                   	push   edx
c000b392:	6a 12                	push   0x12
c000b394:	53                   	push   ebx
c000b395:	e8 06 08 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	85 c0                	test   eax,eax
c000b39f:	74 0b                	je     c000b3ac <KeCreateSymlink(char const*, char const*)+0x55>
c000b3a1:	83 ec 0c             	sub    esp,0xc
c000b3a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a6:	53                   	push   ebx
c000b3a7:	e9 d4 00 00 00       	jmp    c000b480 <KeCreateSymlink(char const*, char const*)+0x129>
c000b3ac:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b3b0:	be 79 18 02 c0       	mov    esi,0xc0021879
c000b3b5:	b9 09 00 00 00       	mov    ecx,0x9
c000b3ba:	fc                   	cld    
c000b3bb:	83 ec 0c             	sub    esp,0xc
c000b3be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3c0:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b3c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c6:	56                   	push   esi
c000b3c7:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b3cb:	52                   	push   edx
c000b3cc:	6a 00                	push   0x0
c000b3ce:	6a 08                	push   0x8
c000b3d0:	53                   	push   ebx
c000b3d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3d4:	83 c4 20             	add    esp,0x20
c000b3d7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3dc:	0f 85 90 00 00 00    	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	0f 85 88 00 00 00    	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3ea:	e8 d6 fa ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3fc:	56                   	push   esi
c000b3fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b401:	52                   	push   edx
c000b402:	6a 00                	push   0x0
c000b404:	6a 08                	push   0x8
c000b406:	53                   	push   ebx
c000b407:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b40a:	83 c4 20             	add    esp,0x20
c000b40d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b412:	75 5e                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b414:	85 c0                	test   eax,eax
c000b416:	75 5a                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b420:	55                   	push   ebp
c000b421:	e8 4a 51 ff ff       	call   c0000570 <strlen>
c000b426:	89 34 24             	mov    DWORD PTR [esp],esi
c000b429:	31 d2                	xor    edx,edx
c000b42b:	55                   	push   ebp
c000b42c:	52                   	push   edx
c000b42d:	50                   	push   eax
c000b42e:	53                   	push   ebx
c000b42f:	ff d7                	call   edi
c000b431:	83 c4 14             	add    esp,0x14
c000b434:	89 c6                	mov    esi,eax
c000b436:	55                   	push   ebp
c000b437:	e8 34 51 ff ff       	call   c0000570 <strlen>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b443:	75 2d                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b445:	85 f6                	test   esi,esi
c000b447:	75 29                	jne    c000b472 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b449:	50                   	push   eax
c000b44a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b44e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b452:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b456:	e8 d7 fa ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b45b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b45e:	e8 9b 07 00 00       	call   c000bbfe <File::close()>
c000b463:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b468:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46b:	83 c4 10             	add    esp,0x10
c000b46e:	31 c0                	xor    eax,eax
c000b470:	eb 19                	jmp    c000b48b <KeCreateSymlink(char const*, char const*)+0x134>
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	53                   	push   ebx
c000b476:	e8 83 07 00 00       	call   c000bbfe <File::close()>
c000b47b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	b8 01 00 00 00       	mov    eax,0x1
c000b48b:	83 c4 2c             	add    esp,0x2c
c000b48e:	5b                   	pop    ebx
c000b48f:	5e                   	pop    esi
c000b490:	5f                   	pop    edi
c000b491:	5d                   	pop    ebp
c000b492:	c3                   	ret    

c000b493 <KeInitialiseSymlinks()>:
c000b493:	57                   	push   edi
c000b494:	56                   	push   esi
c000b495:	53                   	push   ebx
c000b496:	81 ec 14 01 00 00    	sub    esp,0x114
c000b49c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b4a6:	68 00 20 00 00       	push   0x2000
c000b4ab:	6a 00                	push   0x0
c000b4ad:	68 00 74 02 c0       	push   0xc0027400
c000b4b2:	e8 39 50 ff ff       	call   c00004f0 <memset>
c000b4b7:	5f                   	pop    edi
c000b4b8:	58                   	pop    eax
c000b4b9:	6a 00                	push   0x0
c000b4bb:	68 9f ae 00 c0       	push   0xc000ae9f
c000b4c0:	e8 7b 59 00 00       	call   c0010e40 <KeRegisterAtexit(void (*)(void*), void*)>
c000b4c5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b4cc:	e8 e5 c5 ff ff       	call   c0007ab6 <malloc>
c000b4d1:	83 c4 0c             	add    esp,0xc
c000b4d4:	89 c3                	mov    ebx,eax
c000b4d6:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4dc:	68 4f 17 02 c0       	push   0xc002174f
c000b4e1:	50                   	push   eax
c000b4e2:	e8 9b 06 00 00       	call   c000bb82 <File::File(char const*, Process*)>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	85 db                	test   ebx,ebx
c000b4ec:	75 10                	jne    c000b4fe <KeInitialiseSymlinks()+0x6b>
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	68 82 18 02 c0       	push   0xc0021882
c000b4f6:	e8 58 61 00 00       	call   c0011653 <KePanic(char const*)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 ec 0c             	sub    esp,0xc
c000b501:	53                   	push   ebx
c000b502:	e8 5d 09 00 00       	call   c000be64 <File::exists()>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	84 c0                	test   al,al
c000b50c:	75 3a                	jne    c000b548 <KeInitialiseSymlinks()+0xb5>
c000b50e:	56                   	push   esi
c000b50f:	56                   	push   esi
c000b510:	6a 12                	push   0x12
c000b512:	53                   	push   ebx
c000b513:	e8 88 06 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	85 c0                	test   eax,eax
c000b51d:	74 10                	je     c000b52f <KeInitialiseSymlinks()+0x9c>
c000b51f:	83 ec 0c             	sub    esp,0xc
c000b522:	68 9f 18 02 c0       	push   0xc002189f
c000b527:	e8 27 61 00 00       	call   c0011653 <KePanic(char const*)>
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	83 ec 0c             	sub    esp,0xc
c000b532:	53                   	push   ebx
c000b533:	e8 c6 06 00 00       	call   c000bbfe <File::close()>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	85 db                	test   ebx,ebx
c000b53d:	0f 84 a5 00 00 00    	je     c000b5e8 <KeInitialiseSymlinks()+0x155>
c000b543:	e9 94 00 00 00       	jmp    c000b5dc <KeInitialiseSymlinks()+0x149>
c000b548:	51                   	push   ecx
c000b549:	51                   	push   ecx
c000b54a:	6a 01                	push   0x1
c000b54c:	53                   	push   ebx
c000b54d:	e8 4e 06 00 00       	call   c000bba0 <File::open(FileOpenMode)>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	85 c0                	test   eax,eax
c000b557:	74 10                	je     c000b569 <KeInitialiseSymlinks()+0xd6>
c000b559:	83 ec 0c             	sub    esp,0xc
c000b55c:	68 bc 18 02 c0       	push   0xc00218bc
c000b561:	e8 ed 60 00 00       	call   c0011653 <KePanic(char const*)>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	83 ec 0c             	sub    esp,0xc
c000b56c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b56e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b572:	57                   	push   edi
c000b573:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b577:	56                   	push   esi
c000b578:	6a 00                	push   0x0
c000b57a:	68 00 01 00 00       	push   0x100
c000b57f:	53                   	push   ebx
c000b580:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b583:	83 c4 20             	add    esp,0x20
c000b586:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b58e:	75 40                	jne    c000b5d0 <KeInitialiseSymlinks()+0x13d>
c000b590:	83 ec 0c             	sub    esp,0xc
c000b593:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b595:	57                   	push   edi
c000b596:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b59a:	52                   	push   edx
c000b59b:	6a 00                	push   0x0
c000b59d:	6a 08                	push   0x8
c000b59f:	53                   	push   ebx
c000b5a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5a3:	83 c4 20             	add    esp,0x20
c000b5a6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b5ab:	75 23                	jne    c000b5d0 <KeInitialiseSymlinks()+0x13d>
c000b5ad:	52                   	push   edx
c000b5ae:	52                   	push   edx
c000b5af:	56                   	push   esi
c000b5b0:	68 d7 18 02 c0       	push   0xc00218d7
c000b5b5:	e8 8b f3 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b5ba:	89 f0                	mov    eax,esi
c000b5bc:	e8 e3 f8 ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b5c1:	ba 01 00 00 00       	mov    edx,0x1
c000b5c6:	0f b7 c0             	movzx  eax,ax
c000b5c9:	e8 9c f7 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b5ce:	eb 96                	jmp    c000b566 <KeInitialiseSymlinks()+0xd3>
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	53                   	push   ebx
c000b5d4:	e8 25 06 00 00       	call   c000bbfe <File::close()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	83 ec 0c             	sub    esp,0xc
c000b5df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5e1:	53                   	push   ebx
c000b5e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5e5:	83 c4 10             	add    esp,0x10
c000b5e8:	50                   	push   eax
c000b5e9:	50                   	push   eax
c000b5ea:	68 0f 19 02 c0       	push   0xc002190f
c000b5ef:	68 1d 19 02 c0       	push   0xc002191d
c000b5f4:	e8 5e fd ff ff       	call   c000b357 <KeCreateSymlink(char const*, char const*)>
c000b5f9:	81 c4 20 01 00 00    	add    esp,0x120
c000b5ff:	5b                   	pop    ebx
c000b600:	5e                   	pop    esi
c000b601:	5f                   	pop    edi
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <File::read(unsigned long long, void*, int*)>:
c000b604:	53                   	push   ebx
c000b605:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b609:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b60d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b614:	83 f8 19             	cmp    eax,0x19
c000b617:	77 35                	ja     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b619:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b620:	85 c0                	test   eax,eax
c000b622:	74 2a                	je     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b624:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b62a:	85 c0                	test   eax,eax
c000b62c:	74 20                	je     c000b64e <File::read(unsigned long long, void*, int*)+0x4a>
c000b62e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b632:	74 21                	je     c000b655 <File::read(unsigned long long, void*, int*)+0x51>
c000b634:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b636:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b63a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b648:	5b                   	pop    ebx
c000b649:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b64c:	ff e0                	jmp    eax
c000b64e:	b8 0b 00 00 00       	mov    eax,0xb
c000b653:	eb 05                	jmp    c000b65a <File::read(unsigned long long, void*, int*)+0x56>
c000b655:	b8 05 00 00 00       	mov    eax,0x5
c000b65a:	5b                   	pop    ebx
c000b65b:	c3                   	ret    

c000b65c <File::write(unsigned long long, void*, int*)>:
c000b65c:	53                   	push   ebx
c000b65d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b661:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b665:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b66c:	83 f8 19             	cmp    eax,0x19
c000b66f:	77 35                	ja     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b671:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b678:	85 c0                	test   eax,eax
c000b67a:	74 2a                	je     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b67c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b682:	85 c0                	test   eax,eax
c000b684:	74 20                	je     c000b6a6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b686:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68a:	74 21                	je     c000b6ad <File::write(unsigned long long, void*, int*)+0x51>
c000b68c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b68e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b692:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a0:	5b                   	pop    ebx
c000b6a1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b6a4:	ff e0                	jmp    eax
c000b6a6:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ab:	eb 05                	jmp    c000b6b2 <File::write(unsigned long long, void*, int*)+0x56>
c000b6ad:	b8 05 00 00 00       	mov    eax,0x5
c000b6b2:	5b                   	pop    ebx
c000b6b3:	c3                   	ret    

c000b6b4 <Directory::read(unsigned long long, void*, int*)>:
c000b6b4:	53                   	push   ebx
c000b6b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6bd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6c4:	83 f8 19             	cmp    eax,0x19
c000b6c7:	77 35                	ja     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6c9:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6d0:	85 c0                	test   eax,eax
c000b6d2:	74 2a                	je     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6d4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6da:	85 c0                	test   eax,eax
c000b6dc:	74 20                	je     c000b6fe <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6e2:	74 21                	je     c000b705 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6ea:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f8:	5b                   	pop    ebx
c000b6f9:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6fc:	ff e0                	jmp    eax
c000b6fe:	b8 0b 00 00 00       	mov    eax,0xb
c000b703:	eb 05                	jmp    c000b70a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b705:	b8 05 00 00 00       	mov    eax,0x5
c000b70a:	5b                   	pop    ebx
c000b70b:	c3                   	ret    

c000b70c <Directory::write(unsigned long long, void*, int*)>:
c000b70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b710:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b717:	b8 0b 00 00 00       	mov    eax,0xb
c000b71c:	83 fa 19             	cmp    edx,0x19
c000b71f:	77 18                	ja     c000b739 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b721:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b728:	85 d2                	test   edx,edx
c000b72a:	74 0d                	je     c000b739 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b72c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b733:	19 c0                	sbb    eax,eax
c000b735:	83 e0 0a             	and    eax,0xa
c000b738:	40                   	inc    eax
c000b739:	c3                   	ret    

c000b73a <File::isAtty()>:
c000b73a:	31 c0                	xor    eax,eax
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <Directory::isAtty()>:
c000b73e:	31 c0                	xor    eax,eax
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b742:	b8 0a 00 00 00       	mov    eax,0xa
c000b747:	c3                   	ret    

c000b748 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b748:	b8 0a 00 00 00       	mov    eax,0xa
c000b74d:	c3                   	ret    

c000b74e <Filesystem::allocateSwapfile(char const*, int)>:
c000b74e:	31 c0                	xor    eax,eax
c000b750:	31 d2                	xor    edx,edx
c000b752:	c3                   	ret    
c000b753:	90                   	nop

c000b754 <File::~File()>:
c000b754:	83 ec 0c             	sub    esp,0xc
c000b757:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	89 10                	mov    DWORD PTR [eax],edx
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	50                   	push   eax
c000b76a:	e8 35 dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	90                   	nop
c000b773:	83 c4 0c             	add    esp,0xc
c000b776:	c3                   	ret    
c000b777:	90                   	nop

c000b778 <File::~File()>:
c000b778:	83 ec 0c             	sub    esp,0xc
c000b77b:	83 ec 0c             	sub    esp,0xc
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	e8 cd ff ff ff       	call   c000b754 <File::~File()>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	83 ec 08             	sub    esp,0x8
c000b78d:	68 14 01 00 00       	push   0x114
c000b792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b796:	e8 7d f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b79b:	83 c4 10             	add    esp,0x10
c000b79e:	83 c4 0c             	add    esp,0xc
c000b7a1:	c3                   	ret    

c000b7a2 <Directory::~Directory()>:
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	ba f4 19 02 c0       	mov    edx,0xc00219f4
c000b7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ae:	89 10                	mov    DWORD PTR [eax],edx
c000b7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7b4:	83 ec 0c             	sub    esp,0xc
c000b7b7:	50                   	push   eax
c000b7b8:	e8 e7 db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	90                   	nop
c000b7c1:	83 c4 0c             	add    esp,0xc
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <Directory::~Directory()>:
c000b7c6:	83 ec 0c             	sub    esp,0xc
c000b7c9:	83 ec 0c             	sub    esp,0xc
c000b7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d0:	e8 cd ff ff ff       	call   c000b7a2 <Directory::~Directory()>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	83 ec 08             	sub    esp,0x8
c000b7db:	68 14 01 00 00       	push   0x114
c000b7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e4:	e8 2f f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7e9:	83 c4 10             	add    esp,0x10
c000b7ec:	83 c4 0c             	add    esp,0xc
c000b7ef:	c3                   	ret    

c000b7f0 <Filesystem::Filesystem()>:
c000b7f0:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000b7f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f9:	89 10                	mov    DWORD PTR [eax],edx
c000b7fb:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b805:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80c:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b811:	90                   	nop
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <Filesystem::~Filesystem()>:
c000b814:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000b819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b81d:	89 10                	mov    DWORD PTR [eax],edx
c000b81f:	90                   	nop
c000b820:	c3                   	ret    
c000b821:	90                   	nop

c000b822 <Filesystem::~Filesystem()>:
c000b822:	83 ec 0c             	sub    esp,0xc
c000b825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b829:	e8 e6 ff ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c000b82e:	83 c4 04             	add    esp,0x4
c000b831:	83 ec 08             	sub    esp,0x8
c000b834:	6a 08                	push   0x8
c000b836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83a:	e8 d9 ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b83f:	83 c4 10             	add    esp,0x10
c000b842:	83 c4 0c             	add    esp,0xc
c000b845:	c3                   	ret    

c000b846 <Fs::getcwd(Process*, char*, int)>:
c000b846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b84a:	31 c0                	xor    eax,eax
c000b84c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b84f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b853:	7d 15                	jge    c000b86a <Fs::getcwd(Process*, char*, int)+0x24>
c000b855:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b859:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b860:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b863:	84 c9                	test   cl,cl
c000b865:	74 06                	je     c000b86d <Fs::getcwd(Process*, char*, int)+0x27>
c000b867:	40                   	inc    eax
c000b868:	eb e2                	jmp    c000b84c <Fs::getcwd(Process*, char*, int)+0x6>
c000b86a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b86d:	31 c0                	xor    eax,eax
c000b86f:	c3                   	ret    

c000b870 <Fs::initVFS()>:
c000b870:	83 ec 18             	sub    esp,0x18
c000b873:	6a 08                	push   0x8
c000b875:	e8 3c c2 ff ff       	call   c0007ab6 <malloc>
c000b87a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b87d:	e8 a2 e3 00 00       	call   c0019c24 <FAT::FAT()>
c000b882:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b889:	e8 28 c2 ff ff       	call   c0007ab6 <malloc>
c000b88e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b891:	e8 ba f2 00 00       	call   c001ab50 <ISO9660::ISO9660()>
c000b896:	83 c4 1c             	add    esp,0x1c
c000b899:	c3                   	ret    

c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b89a:	55                   	push   ebp
c000b89b:	57                   	push   edi
c000b89c:	56                   	push   esi
c000b89d:	53                   	push   ebx
c000b89e:	81 ec 10 04 00 00    	sub    esp,0x410
c000b8a4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b8ab:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b8b2:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b8ba:	68 00 04 00 00       	push   0x400
c000b8bf:	6a 00                	push   0x0
c000b8c1:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b8c5:	57                   	push   edi
c000b8c6:	e8 25 4c ff ff       	call   c00004f0 <memset>
c000b8cb:	83 c4 10             	add    esp,0x10
c000b8ce:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8d2:	75 0b                	jne    c000b8df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8d4:	50                   	push   eax
c000b8d5:	50                   	push   eax
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	e8 63 4d ff ff       	call   c0000640 <strcpy>
c000b8dd:	eb 51                	jmp    c000b930 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8df:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8e3:	83 f8 5c             	cmp    eax,0x5c
c000b8e6:	74 05                	je     c000b8ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8e8:	83 f8 2f             	cmp    eax,0x2f
c000b8eb:	75 1e                	jne    c000b90b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8ed:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8f4:	8a 00                	mov    al,BYTE PTR [eax]
c000b8f6:	3c 60                	cmp    al,0x60
c000b8f8:	7e 03                	jle    c000b8fd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8fa:	83 e8 20             	sub    eax,0x20
c000b8fd:	88 04 24             	mov    BYTE PTR [esp],al
c000b900:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b907:	50                   	push   eax
c000b908:	50                   	push   eax
c000b909:	eb 1e                	jmp    c000b929 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b90b:	50                   	push   eax
c000b90c:	50                   	push   eax
c000b90d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b914:	57                   	push   edi
c000b915:	e8 26 4d ff ff       	call   c0000640 <strcpy>
c000b91a:	58                   	pop    eax
c000b91b:	5a                   	pop    edx
c000b91c:	68 23 29 02 c0       	push   0xc0022923
c000b921:	57                   	push   edi
c000b922:	e8 19 4f ff ff       	call   c0000840 <strcat>
c000b927:	59                   	pop    ecx
c000b928:	58                   	pop    eax
c000b929:	55                   	push   ebp
c000b92a:	57                   	push   edi
c000b92b:	e8 10 4f ff ff       	call   c0000840 <strcat>
c000b930:	83 c4 10             	add    esp,0x10
c000b933:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b936:	3c 60                	cmp    al,0x60
c000b938:	7e 03                	jle    c000b93d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b93a:	83 e8 20             	sub    eax,0x20
c000b93d:	88 04 24             	mov    BYTE PTR [esp],al
c000b940:	88 06                	mov    BYTE PTR [esi],al
c000b942:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b949:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b94f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b953:	bf 03 00 00 00       	mov    edi,0x3
c000b958:	b8 03 00 00 00       	mov    eax,0x3
c000b95d:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b961:	89 e9                	mov    ecx,ebp
c000b963:	85 ed                	test   ebp,ebp
c000b965:	0f 84 97 00 00 00    	je     c000ba02 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b96b:	8d 57 01             	lea    edx,[edi+0x1]
c000b96e:	83 fd 5c             	cmp    ebp,0x5c
c000b971:	74 05                	je     c000b978 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b973:	83 fd 2f             	cmp    ebp,0x2f
c000b976:	75 12                	jne    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b978:	89 c5                	mov    ebp,eax
c000b97a:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b97f:	74 09                	je     c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b981:	40                   	inc    eax
c000b982:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b986:	89 d7                	mov    edi,edx
c000b988:	eb d3                	jmp    c000b95d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b98a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b98f:	0f be e9             	movsx  ebp,cl
c000b992:	75 5e                	jne    c000b9f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b994:	83 fd 2e             	cmp    ebp,0x2e
c000b997:	75 59                	jne    c000b9f2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b999:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b99d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b9a2:	74 18                	je     c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b9a4:	83 fd 2e             	cmp    ebp,0x2e
c000b9a7:	74 53                	je     c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9a9:	89 fa                	mov    edx,edi
c000b9ab:	42                   	inc    edx
c000b9ac:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9b0:	83 f9 2f             	cmp    ecx,0x2f
c000b9b3:	74 f6                	je     c000b9ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9b5:	83 f9 5c             	cmp    ecx,0x5c
c000b9b8:	74 f1                	je     c000b9ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9ba:	eb ca                	jmp    c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9bc:	83 fd 2e             	cmp    ebp,0x2e
c000b9bf:	74 3b                	je     c000b9fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9c1:	83 f8 03             	cmp    eax,0x3
c000b9c4:	74 c0                	je     c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9c6:	42                   	inc    edx
c000b9c7:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9cb:	83 f9 5c             	cmp    ecx,0x5c
c000b9ce:	74 f6                	je     c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9d0:	83 f9 2f             	cmp    ecx,0x2f
c000b9d3:	74 f1                	je     c000b9c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9d5:	48                   	dec    eax
c000b9d6:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9da:	75 06                	jne    c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9dc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9e0:	eb f3                	jmp    c000b9d5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9e2:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9e6:	74 07                	je     c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9e8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9ec:	48                   	dec    eax
c000b9ed:	eb f3                	jmp    c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9ef:	40                   	inc    eax
c000b9f0:	eb 94                	jmp    c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9f2:	83 fd 5c             	cmp    ebp,0x5c
c000b9f5:	74 8f                	je     c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9f7:	83 fd 2f             	cmp    ebp,0x2f
c000b9fa:	74 8a                	je     c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9fc:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9ff:	40                   	inc    eax
c000ba00:	eb 84                	jmp    c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba02:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	56                   	push   esi
c000ba0a:	e8 61 4b ff ff       	call   c0000570 <strlen>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba17:	74 17                	je     c000ba30 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba19:	83 ec 0c             	sub    esp,0xc
c000ba1c:	56                   	push   esi
c000ba1d:	e8 4e 4b ff ff       	call   c0000570 <strlen>
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba2a:	74 04                	je     c000ba30 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba2c:	31 ff                	xor    edi,edi
c000ba2e:	eb 4c                	jmp    c000ba7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba30:	83 ec 0c             	sub    esp,0xc
c000ba33:	56                   	push   esi
c000ba34:	e8 37 4b ff ff       	call   c0000570 <strlen>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba41:	74 e9                	je     c000ba2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba43:	83 ec 0c             	sub    esp,0xc
c000ba46:	56                   	push   esi
c000ba47:	e8 24 4b ff ff       	call   c0000570 <strlen>
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba54:	eb b0                	jmp    c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba56:	50                   	push   eax
c000ba57:	50                   	push   eax
c000ba58:	56                   	push   esi
c000ba59:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba5d:	55                   	push   ebp
c000ba5e:	e8 dd 4b ff ff       	call   c0000640 <strcpy>
c000ba63:	5a                   	pop    edx
c000ba64:	59                   	pop    ecx
c000ba65:	56                   	push   esi
c000ba66:	55                   	push   ebp
c000ba67:	e8 d0 f6 ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c000ba6c:	83 c4 10             	add    esp,0x10
c000ba6f:	48                   	dec    eax
c000ba70:	75 27                	jne    c000ba99 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000ba72:	8d 47 01             	lea    eax,[edi+0x1]
c000ba75:	83 ff 14             	cmp    edi,0x14
c000ba78:	74 08                	je     c000ba82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000ba7a:	89 c7                	mov    edi,eax
c000ba7c:	85 db                	test   ebx,ebx
c000ba7e:	75 d6                	jne    c000ba56 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba80:	eb 17                	jmp    c000ba99 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000ba82:	83 ec 0c             	sub    esp,0xc
c000ba85:	bf 15 00 00 00       	mov    edi,0x15
c000ba8a:	68 3b 19 02 c0       	push   0xc002193b
c000ba8f:	e8 bf 5b 00 00       	call   c0011653 <KePanic(char const*)>
c000ba94:	83 c4 10             	add    esp,0x10
c000ba97:	eb e3                	jmp    c000ba7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba99:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba9f:	5b                   	pop    ebx
c000baa0:	5e                   	pop    esi
c000baa1:	5f                   	pop    edi
c000baa2:	5d                   	pop    ebp
c000baa3:	c3                   	ret    

c000baa4 <File::File(char const*, Process*, bool)>:
c000baa4:	83 ec 1c             	sub    esp,0x1c
c000baa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab3:	83 ec 08             	sub    esp,0x8
c000bab6:	6a 00                	push   0x0
c000bab8:	50                   	push   eax
c000bab9:	e8 00 d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000babe:	83 c4 10             	add    esp,0x10
c000bac1:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	89 10                	mov    DWORD PTR [eax],edx
c000bacc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bad1:	85 c0                	test   eax,eax
c000bad3:	74 0f                	je     c000bae4 <File::File(char const*, Process*, bool)+0x40>
c000bad5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bada:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bade:	74 04                	je     c000bae4 <File::File(char const*, Process*, bool)+0x40>
c000bae0:	b0 01                	mov    al,0x1
c000bae2:	eb 02                	jmp    c000bae6 <File::File(char const*, Process*, bool)+0x42>
c000bae4:	b0 00                	mov    al,0x0
c000bae6:	0f b6 c0             	movzx  eax,al
c000bae9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baed:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000baf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf7:	83 c2 0d             	add    edx,0xd
c000bafa:	50                   	push   eax
c000bafb:	51                   	push   ecx
c000bafc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb00:	52                   	push   edx
c000bb01:	e8 94 fd ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb10:	83 e8 41             	sub    eax,0x41
c000bb13:	88 c2                	mov    dl,al
c000bb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb19:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb23:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb31:	0f b6 c0             	movzx  eax,al
c000bb34:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb3b:	85 c0                	test   eax,eax
c000bb3d:	74 3e                	je     c000bb7d <File::File(char const*, Process*, bool)+0xd9>
c000bb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb43:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb49:	0f b6 c0             	movzx  eax,al
c000bb4c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb53:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb59:	85 c0                	test   eax,eax
c000bb5b:	75 20                	jne    c000bb7d <File::File(char const*, Process*, bool)+0xd9>
c000bb5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb61:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb67:	0f b6 c0             	movzx  eax,al
c000bb6a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb71:	83 ec 0c             	sub    esp,0xc
c000bb74:	50                   	push   eax
c000bb75:	e8 a0 21 00 00       	call   c000dd1a <LogicalDisk::mount()>
c000bb7a:	83 c4 10             	add    esp,0x10
c000bb7d:	90                   	nop
c000bb7e:	83 c4 1c             	add    esp,0x1c
c000bb81:	c3                   	ret    

c000bb82 <File::File(char const*, Process*)>:
c000bb82:	83 ec 0c             	sub    esp,0xc
c000bb85:	6a 01                	push   0x1
c000bb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb93:	e8 0c ff ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	90                   	nop
c000bb9c:	83 c4 0c             	add    esp,0xc
c000bb9f:	c3                   	ret    

c000bba0 <File::open(FileOpenMode)>:
c000bba0:	53                   	push   ebx
c000bba1:	b8 0b 00 00 00       	mov    eax,0xb
c000bba6:	83 ec 08             	sub    esp,0x8
c000bba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbb4:	83 fa 19             	cmp    edx,0x19
c000bbb7:	77 40                	ja     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbb9:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbc0:	85 d2                	test   edx,edx
c000bbc2:	74 35                	je     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbc4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbca:	85 d2                	test   edx,edx
c000bbcc:	74 2b                	je     c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbce:	b8 06 00 00 00       	mov    eax,0x6
c000bbd3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbd7:	75 20                	jne    c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbd9:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbdb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbe1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe5:	51                   	push   ecx
c000bbe6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbe9:	51                   	push   ecx
c000bbea:	52                   	push   edx
c000bbeb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	85 c0                	test   eax,eax
c000bbf3:	75 04                	jne    c000bbf9 <File::open(FileOpenMode)+0x59>
c000bbf5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbf9:	83 c4 08             	add    esp,0x8
c000bbfc:	5b                   	pop    ebx
c000bbfd:	c3                   	ret    

c000bbfe <File::close()>:
c000bbfe:	53                   	push   ebx
c000bbff:	b8 0b 00 00 00       	mov    eax,0xb
c000bc04:	83 ec 08             	sub    esp,0x8
c000bc07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc0b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc12:	83 f9 19             	cmp    ecx,0x19
c000bc15:	77 41                	ja     c000bc58 <File::close()+0x5a>
c000bc17:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc1e:	85 db                	test   ebx,ebx
c000bc20:	74 36                	je     c000bc58 <File::close()+0x5a>
c000bc22:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc29:	74 2d                	je     c000bc58 <File::close()+0x5a>
c000bc2b:	b8 05 00 00 00       	mov    eax,0x5
c000bc30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc34:	74 22                	je     c000bc58 <File::close()+0x5a>
c000bc36:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc3a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc41:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc47:	53                   	push   ebx
c000bc48:	53                   	push   ebx
c000bc49:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc4b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc51:	50                   	push   eax
c000bc52:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	83 c4 08             	add    esp,0x8
c000bc5b:	5b                   	pop    ebx
c000bc5c:	c3                   	ret    
c000bc5d:	90                   	nop

c000bc5e <File::seek(unsigned long long)>:
c000bc5e:	56                   	push   esi
c000bc5f:	53                   	push   ebx
c000bc60:	b8 0b 00 00 00       	mov    eax,0xb
c000bc65:	51                   	push   ecx
c000bc66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc6e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc79:	83 fa 19             	cmp    edx,0x19
c000bc7c:	77 31                	ja     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc7e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc85:	85 d2                	test   edx,edx
c000bc87:	74 26                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc89:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc8f:	85 d2                	test   edx,edx
c000bc91:	74 1c                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc93:	b8 05 00 00 00       	mov    eax,0x5
c000bc98:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc9c:	74 11                	je     c000bcaf <File::seek(unsigned long long)+0x51>
c000bc9e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bca0:	53                   	push   ebx
c000bca1:	51                   	push   ecx
c000bca2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bca8:	52                   	push   edx
c000bca9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bcac:	83 c4 10             	add    esp,0x10
c000bcaf:	5a                   	pop    edx
c000bcb0:	5b                   	pop    ebx
c000bcb1:	5e                   	pop    esi
c000bcb2:	c3                   	ret    
c000bcb3:	90                   	nop

c000bcb4 <File::truncate(unsigned long long)>:
c000bcb4:	56                   	push   esi
c000bcb5:	53                   	push   ebx
c000bcb6:	b8 0b 00 00 00       	mov    eax,0xb
c000bcbb:	51                   	push   ecx
c000bcbc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcc4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bccb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bccf:	83 fa 19             	cmp    edx,0x19
c000bcd2:	77 31                	ja     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcd4:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcdb:	85 d2                	test   edx,edx
c000bcdd:	74 26                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcdf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bce5:	85 d2                	test   edx,edx
c000bce7:	74 1c                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bce9:	b8 05 00 00 00       	mov    eax,0x5
c000bcee:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcf2:	74 11                	je     c000bd05 <File::truncate(unsigned long long)+0x51>
c000bcf4:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcf6:	53                   	push   ebx
c000bcf7:	51                   	push   ecx
c000bcf8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcfe:	52                   	push   edx
c000bcff:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	5a                   	pop    edx
c000bd06:	5b                   	pop    ebx
c000bd07:	5e                   	pop    esi
c000bd08:	c3                   	ret    
c000bd09:	90                   	nop

c000bd0a <File::tell(unsigned long long*)>:
c000bd0a:	83 ec 0c             	sub    esp,0xc
c000bd0d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd16:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd1d:	83 fa 19             	cmp    edx,0x19
c000bd20:	77 34                	ja     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd22:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd29:	85 d2                	test   edx,edx
c000bd2b:	74 29                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd33:	85 d2                	test   edx,edx
c000bd35:	74 1f                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd37:	b8 05 00 00 00       	mov    eax,0x5
c000bd3c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd40:	74 14                	je     c000bd56 <File::tell(unsigned long long*)+0x4c>
c000bd42:	50                   	push   eax
c000bd43:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd49:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd4f:	52                   	push   edx
c000bd50:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	83 c4 0c             	add    esp,0xc
c000bd59:	c3                   	ret    

c000bd5a <File::rewind()>:
c000bd5a:	83 ec 10             	sub    esp,0x10
c000bd5d:	6a 00                	push   0x0
c000bd5f:	6a 00                	push   0x0
c000bd61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd65:	e8 f4 fe ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c000bd6a:	83 c4 1c             	add    esp,0x1c
c000bd6d:	c3                   	ret    

c000bd6e <File::unlink()>:
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	b8 0b 00 00 00       	mov    eax,0xb
c000bd76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd81:	83 f9 19             	cmp    ecx,0x19
c000bd84:	77 2f                	ja     c000bdb5 <File::unlink()+0x47>
c000bd86:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd8d:	85 c9                	test   ecx,ecx
c000bd8f:	74 24                	je     c000bdb5 <File::unlink()+0x47>
c000bd91:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd97:	85 c9                	test   ecx,ecx
c000bd99:	74 1a                	je     c000bdb5 <File::unlink()+0x47>
c000bd9b:	b8 06 00 00 00       	mov    eax,0x6
c000bda0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bda4:	75 0f                	jne    c000bdb5 <File::unlink()+0x47>
c000bda6:	83 c2 0d             	add    edx,0xd
c000bda9:	50                   	push   eax
c000bdaa:	50                   	push   eax
c000bdab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdad:	52                   	push   edx
c000bdae:	51                   	push   ecx
c000bdaf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdb2:	83 c4 10             	add    esp,0x10
c000bdb5:	83 c4 0c             	add    esp,0xc
c000bdb8:	c3                   	ret    
c000bdb9:	90                   	nop

c000bdba <File::rename(char const*)>:
c000bdba:	83 ec 0c             	sub    esp,0xc
c000bdbd:	b8 0b 00 00 00       	mov    eax,0xb
c000bdc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdcd:	83 f9 19             	cmp    ecx,0x19
c000bdd0:	77 32                	ja     c000be04 <File::rename(char const*)+0x4a>
c000bdd2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdd9:	85 c9                	test   ecx,ecx
c000bddb:	74 27                	je     c000be04 <File::rename(char const*)+0x4a>
c000bddd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bde3:	85 c9                	test   ecx,ecx
c000bde5:	74 1d                	je     c000be04 <File::rename(char const*)+0x4a>
c000bde7:	b8 06 00 00 00       	mov    eax,0x6
c000bdec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdf0:	75 12                	jne    c000be04 <File::rename(char const*)+0x4a>
c000bdf2:	83 c2 0d             	add    edx,0xd
c000bdf5:	50                   	push   eax
c000bdf6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdfc:	52                   	push   edx
c000bdfd:	51                   	push   ecx
c000bdfe:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be01:	83 c4 10             	add    esp,0x10
c000be04:	83 c4 0c             	add    esp,0xc
c000be07:	c3                   	ret    

c000be08 <File::chfatattr(unsigned char, unsigned char)>:
c000be08:	57                   	push   edi
c000be09:	b8 0b 00 00 00       	mov    eax,0xb
c000be0e:	56                   	push   esi
c000be0f:	53                   	push   ebx
c000be10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be1f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be23:	83 f9 19             	cmp    ecx,0x19
c000be26:	77 37                	ja     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be28:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be2f:	85 c9                	test   ecx,ecx
c000be31:	74 2c                	je     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be33:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be39:	85 c9                	test   ecx,ecx
c000be3b:	74 22                	je     c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be3d:	b8 06 00 00 00       	mov    eax,0x6
c000be42:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be46:	75 17                	jne    c000be5f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be48:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be4a:	89 f0                	mov    eax,esi
c000be4c:	83 c2 0d             	add    edx,0xd
c000be4f:	0f b6 f0             	movzx  esi,al
c000be52:	0f b6 db             	movzx  ebx,bl
c000be55:	56                   	push   esi
c000be56:	53                   	push   ebx
c000be57:	52                   	push   edx
c000be58:	51                   	push   ecx
c000be59:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be5c:	83 c4 10             	add    esp,0x10
c000be5f:	5b                   	pop    ebx
c000be60:	5e                   	pop    esi
c000be61:	5f                   	pop    edi
c000be62:	c3                   	ret    
c000be63:	90                   	nop

c000be64 <File::exists()>:
c000be64:	83 ec 0c             	sub    esp,0xc
c000be67:	31 c0                	xor    eax,eax
c000be69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be74:	83 f9 19             	cmp    ecx,0x19
c000be77:	77 24                	ja     c000be9d <File::exists()+0x39>
c000be79:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be80:	85 c9                	test   ecx,ecx
c000be82:	74 19                	je     c000be9d <File::exists()+0x39>
c000be84:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be8a:	85 c9                	test   ecx,ecx
c000be8c:	74 0f                	je     c000be9d <File::exists()+0x39>
c000be8e:	83 c2 0d             	add    edx,0xd
c000be91:	50                   	push   eax
c000be92:	50                   	push   eax
c000be93:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be95:	52                   	push   edx
c000be96:	51                   	push   ecx
c000be97:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	83 c4 0c             	add    esp,0xc
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <File::stat(unsigned long long*, bool*)>:
c000bea2:	56                   	push   esi
c000bea3:	53                   	push   ebx
c000bea4:	50                   	push   eax
c000bea5:	b8 0b 00 00 00       	mov    eax,0xb
c000beaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beb2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bebd:	83 f9 19             	cmp    ecx,0x19
c000bec0:	77 3d                	ja     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000bec2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec9:	85 c9                	test   ecx,ecx
c000becb:	74 32                	je     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000becd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bed3:	85 c9                	test   ecx,ecx
c000bed5:	74 28                	je     c000beff <File::stat(unsigned long long*, bool*)+0x5d>
c000bed7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bedd:	74 13                	je     c000bef2 <File::stat(unsigned long long*, bool*)+0x50>
c000bedf:	83 ec 04             	sub    esp,0x4
c000bee2:	56                   	push   esi
c000bee3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bee9:	51                   	push   ecx
c000beea:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000beed:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bef0:	eb 0a                	jmp    c000befc <File::stat(unsigned long long*, bool*)+0x5a>
c000bef2:	53                   	push   ebx
c000bef3:	83 c2 0d             	add    edx,0xd
c000bef6:	56                   	push   esi
c000bef7:	52                   	push   edx
c000bef8:	51                   	push   ecx
c000bef9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000befc:	83 c4 10             	add    esp,0x10
c000beff:	5a                   	pop    edx
c000bf00:	5b                   	pop    ebx
c000bf01:	5e                   	pop    esi
c000bf02:	c3                   	ret    

c000bf03 <Fs::setcwd(Process*, char*)>:
c000bf03:	55                   	push   ebp
c000bf04:	57                   	push   edi
c000bf05:	56                   	push   esi
c000bf06:	53                   	push   ebx
c000bf07:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf0d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf14:	6a 00                	push   0x0
c000bf16:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf1c:	57                   	push   edi
c000bf1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf24:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf28:	56                   	push   esi
c000bf29:	e8 6c f9 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf2e:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf31:	e8 3a 46 ff ff       	call   c0000570 <strlen>
c000bf36:	83 c4 10             	add    esp,0x10
c000bf39:	83 f8 02             	cmp    eax,0x2
c000bf3c:	77 15                	ja     c000bf53 <Fs::setcwd(Process*, char*)+0x50>
c000bf3e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf43:	83 eb 41             	sub    ebx,0x41
c000bf46:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf4d:	85 c0                	test   eax,eax
c000bf4f:	75 1c                	jne    c000bf6d <Fs::setcwd(Process*, char*)+0x6a>
c000bf51:	eb 2f                	jmp    c000bf82 <Fs::setcwd(Process*, char*)+0x7f>
c000bf53:	83 ec 0c             	sub    esp,0xc
c000bf56:	56                   	push   esi
c000bf57:	e8 14 46 ff ff       	call   c0000570 <strlen>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	83 f8 03             	cmp    eax,0x3
c000bf62:	75 57                	jne    c000bfbb <Fs::setcwd(Process*, char*)+0xb8>
c000bf64:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf69:	75 50                	jne    c000bfbb <Fs::setcwd(Process*, char*)+0xb8>
c000bf6b:	eb d1                	jmp    c000bf3e <Fs::setcwd(Process*, char*)+0x3b>
c000bf6d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf74:	75 0c                	jne    c000bf82 <Fs::setcwd(Process*, char*)+0x7f>
c000bf76:	83 ec 0c             	sub    esp,0xc
c000bf79:	50                   	push   eax
c000bf7a:	e8 9b 1d 00 00       	call   c000dd1a <LogicalDisk::mount()>
c000bf7f:	83 c4 10             	add    esp,0x10
c000bf82:	b8 03 00 00 00       	mov    eax,0x3
c000bf87:	83 fb 19             	cmp    ebx,0x19
c000bf8a:	0f 87 c6 00 00 00    	ja     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bf90:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf97:	b8 05 00 00 00       	mov    eax,0x5
c000bf9c:	85 d2                	test   edx,edx
c000bf9e:	0f 84 b2 00 00 00    	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bfa4:	b8 06 00 00 00       	mov    eax,0x6
c000bfa9:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfb0:	0f 85 92 00 00 00    	jne    c000c048 <Fs::setcwd(Process*, char*)+0x145>
c000bfb6:	e9 9b 00 00 00       	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000bfbb:	83 ec 0c             	sub    esp,0xc
c000bfbe:	68 14 01 00 00       	push   0x114
c000bfc3:	e8 ee ba ff ff       	call   c0007ab6 <malloc>
c000bfc8:	83 c4 0c             	add    esp,0xc
c000bfcb:	89 c3                	mov    ebx,eax
c000bfcd:	55                   	push   ebp
c000bfce:	56                   	push   esi
c000bfcf:	50                   	push   eax
c000bfd0:	e8 ad fb ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000bfd5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfda:	83 c4 0c             	add    esp,0xc
c000bfdd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfe1:	50                   	push   eax
c000bfe2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfe6:	50                   	push   eax
c000bfe7:	53                   	push   ebx
c000bfe8:	e8 b5 fe ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c000bfed:	83 c4 10             	add    esp,0x10
c000bff0:	83 f8 02             	cmp    eax,0x2
c000bff3:	74 27                	je     c000c01c <Fs::setcwd(Process*, char*)+0x119>
c000bff5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bffa:	75 1c                	jne    c000c018 <Fs::setcwd(Process*, char*)+0x115>
c000bffc:	b8 02 00 00 00       	mov    eax,0x2
c000c001:	85 db                	test   ebx,ebx
c000c003:	74 51                	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c005:	83 ec 0c             	sub    esp,0xc
c000c008:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c00a:	53                   	push   ebx
c000c00b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c00e:	83 c4 10             	add    esp,0x10
c000c011:	b8 02 00 00 00       	mov    eax,0x2
c000c016:	eb 3e                	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c018:	85 c0                	test   eax,eax
c000c01a:	74 1c                	je     c000c038 <Fs::setcwd(Process*, char*)+0x135>
c000c01c:	b8 01 00 00 00       	mov    eax,0x1
c000c021:	85 db                	test   ebx,ebx
c000c023:	74 31                	je     c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c025:	83 ec 0c             	sub    esp,0xc
c000c028:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c02a:	53                   	push   ebx
c000c02b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	b8 01 00 00 00       	mov    eax,0x1
c000c036:	eb 1e                	jmp    c000c056 <Fs::setcwd(Process*, char*)+0x153>
c000c038:	85 db                	test   ebx,ebx
c000c03a:	74 0c                	je     c000c048 <Fs::setcwd(Process*, char*)+0x145>
c000c03c:	83 ec 0c             	sub    esp,0xc
c000c03f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c041:	53                   	push   ebx
c000c042:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	50                   	push   eax
c000c049:	50                   	push   eax
c000c04a:	56                   	push   esi
c000c04b:	57                   	push   edi
c000c04c:	e8 ef 45 ff ff       	call   c0000640 <strcpy>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	31 c0                	xor    eax,eax
c000c056:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c05c:	5b                   	pop    ebx
c000c05d:	5e                   	pop    esi
c000c05e:	5f                   	pop    edi
c000c05f:	5d                   	pop    ebp
c000c060:	c3                   	ret    
c000c061:	90                   	nop

c000c062 <Directory::Directory(char const*, Process*)>:
c000c062:	83 ec 0c             	sub    esp,0xc
c000c065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c069:	83 ec 08             	sub    esp,0x8
c000c06c:	6a 00                	push   0x0
c000c06e:	50                   	push   eax
c000c06f:	e8 4a d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c074:	83 c4 10             	add    esp,0x10
c000c077:	ba f4 19 02 c0       	mov    edx,0xc00219f4
c000c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c080:	89 10                	mov    DWORD PTR [eax],edx
c000c082:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c087:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c08b:	0f 95 c0             	setne  al
c000c08e:	0f b6 c0             	movzx  eax,al
c000c091:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c095:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c09b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c09f:	83 c2 0d             	add    edx,0xd
c000c0a2:	50                   	push   eax
c000c0a3:	51                   	push   ecx
c000c0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a8:	52                   	push   edx
c000c0a9:	e8 ec f7 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0ae:	83 c4 10             	add    esp,0x10
c000c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b5:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0b8:	83 e8 41             	sub    eax,0x41
c000c0bb:	88 c2                	mov    dl,al
c000c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c1:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cb:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d9:	0f b6 c0             	movzx  eax,al
c000c0dc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e3:	85 c0                	test   eax,eax
c000c0e5:	74 3e                	je     c000c125 <Directory::Directory(char const*, Process*)+0xc3>
c000c0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0f1:	0f b6 c0             	movzx  eax,al
c000c0f4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c101:	85 c0                	test   eax,eax
c000c103:	75 20                	jne    c000c125 <Directory::Directory(char const*, Process*)+0xc3>
c000c105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c109:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c10f:	0f b6 c0             	movzx  eax,al
c000c112:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	50                   	push   eax
c000c11d:	e8 f8 1b 00 00       	call   c000dd1a <LogicalDisk::mount()>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	90                   	nop
c000c126:	83 c4 0c             	add    esp,0xc
c000c129:	c3                   	ret    

c000c12a <Directory::open()>:
c000c12a:	53                   	push   ebx
c000c12b:	b8 0b 00 00 00       	mov    eax,0xb
c000c130:	83 ec 08             	sub    esp,0x8
c000c133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c13e:	83 fa 19             	cmp    edx,0x19
c000c141:	77 3d                	ja     c000c180 <Directory::open()+0x56>
c000c143:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c14a:	85 d2                	test   edx,edx
c000c14c:	74 32                	je     c000c180 <Directory::open()+0x56>
c000c14e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c154:	85 d2                	test   edx,edx
c000c156:	74 28                	je     c000c180 <Directory::open()+0x56>
c000c158:	b8 06 00 00 00       	mov    eax,0x6
c000c15d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c161:	75 1d                	jne    c000c180 <Directory::open()+0x56>
c000c163:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c169:	50                   	push   eax
c000c16a:	8b 02                	mov    eax,DWORD PTR [edx]
c000c16c:	51                   	push   ecx
c000c16d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c170:	51                   	push   ecx
c000c171:	52                   	push   edx
c000c172:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c175:	83 c4 10             	add    esp,0x10
c000c178:	85 c0                	test   eax,eax
c000c17a:	75 04                	jne    c000c180 <Directory::open()+0x56>
c000c17c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c180:	83 c4 08             	add    esp,0x8
c000c183:	5b                   	pop    ebx
c000c184:	c3                   	ret    
c000c185:	90                   	nop

c000c186 <Directory::close()>:
c000c186:	53                   	push   ebx
c000c187:	b8 0b 00 00 00       	mov    eax,0xb
c000c18c:	83 ec 08             	sub    esp,0x8
c000c18f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c193:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c19a:	83 f9 19             	cmp    ecx,0x19
c000c19d:	77 41                	ja     c000c1e0 <Directory::close()+0x5a>
c000c19f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a6:	85 db                	test   ebx,ebx
c000c1a8:	74 36                	je     c000c1e0 <Directory::close()+0x5a>
c000c1aa:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1b1:	74 2d                	je     c000c1e0 <Directory::close()+0x5a>
c000c1b3:	b8 05 00 00 00       	mov    eax,0x5
c000c1b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1bc:	74 22                	je     c000c1e0 <Directory::close()+0x5a>
c000c1be:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1c2:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1c9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1cf:	53                   	push   ebx
c000c1d0:	53                   	push   ebx
c000c1d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1d3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1d9:	50                   	push   eax
c000c1da:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1dd:	83 c4 10             	add    esp,0x10
c000c1e0:	83 c4 08             	add    esp,0x8
c000c1e3:	5b                   	pop    ebx
c000c1e4:	c3                   	ret    
c000c1e5:	90                   	nop

c000c1e6 <Directory::unlink()>:
c000c1e6:	83 ec 0c             	sub    esp,0xc
c000c1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f9:	83 f9 19             	cmp    ecx,0x19
c000c1fc:	77 2f                	ja     c000c22d <Directory::unlink()+0x47>
c000c1fe:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c205:	85 c9                	test   ecx,ecx
c000c207:	74 24                	je     c000c22d <Directory::unlink()+0x47>
c000c209:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c20f:	85 c9                	test   ecx,ecx
c000c211:	74 1a                	je     c000c22d <Directory::unlink()+0x47>
c000c213:	b8 06 00 00 00       	mov    eax,0x6
c000c218:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c21c:	75 0f                	jne    c000c22d <Directory::unlink()+0x47>
c000c21e:	83 c2 0d             	add    edx,0xd
c000c221:	50                   	push   eax
c000c222:	50                   	push   eax
c000c223:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c225:	52                   	push   edx
c000c226:	51                   	push   ecx
c000c227:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c22a:	83 c4 10             	add    esp,0x10
c000c22d:	83 c4 0c             	add    esp,0xc
c000c230:	c3                   	ret    
c000c231:	90                   	nop

c000c232 <Directory::rename(char const*)>:
c000c232:	83 ec 0c             	sub    esp,0xc
c000c235:	b8 0b 00 00 00       	mov    eax,0xb
c000c23a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c23e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c245:	83 f9 19             	cmp    ecx,0x19
c000c248:	77 32                	ja     c000c27c <Directory::rename(char const*)+0x4a>
c000c24a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c251:	85 c9                	test   ecx,ecx
c000c253:	74 27                	je     c000c27c <Directory::rename(char const*)+0x4a>
c000c255:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c25b:	85 c9                	test   ecx,ecx
c000c25d:	74 1d                	je     c000c27c <Directory::rename(char const*)+0x4a>
c000c25f:	b8 06 00 00 00       	mov    eax,0x6
c000c264:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c268:	75 12                	jne    c000c27c <Directory::rename(char const*)+0x4a>
c000c26a:	83 c2 0d             	add    edx,0xd
c000c26d:	50                   	push   eax
c000c26e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c270:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c274:	52                   	push   edx
c000c275:	51                   	push   ecx
c000c276:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	83 c4 0c             	add    esp,0xc
c000c27f:	c3                   	ret    

c000c280 <Directory::exists()>:
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	31 c0                	xor    eax,eax
c000c285:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c289:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c290:	83 f9 19             	cmp    ecx,0x19
c000c293:	77 24                	ja     c000c2b9 <Directory::exists()+0x39>
c000c295:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c29c:	85 c9                	test   ecx,ecx
c000c29e:	74 19                	je     c000c2b9 <Directory::exists()+0x39>
c000c2a0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2a6:	85 c9                	test   ecx,ecx
c000c2a8:	74 0f                	je     c000c2b9 <Directory::exists()+0x39>
c000c2aa:	83 c2 0d             	add    edx,0xd
c000c2ad:	50                   	push   eax
c000c2ae:	50                   	push   eax
c000c2af:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2b1:	52                   	push   edx
c000c2b2:	51                   	push   ecx
c000c2b3:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	83 c4 0c             	add    esp,0xc
c000c2bc:	c3                   	ret    
c000c2bd:	90                   	nop

c000c2be <Directory::read(dirent*)>:
c000c2be:	83 ec 1c             	sub    esp,0x1c
c000c2c1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2d1:	83 f9 19             	cmp    ecx,0x19
c000c2d4:	77 30                	ja     c000c306 <Directory::read(dirent*)+0x48>
c000c2d6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2dd:	85 c9                	test   ecx,ecx
c000c2df:	74 25                	je     c000c306 <Directory::read(dirent*)+0x48>
c000c2e1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2e8:	74 1c                	je     c000c306 <Directory::read(dirent*)+0x48>
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2ef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2f3:	51                   	push   ecx
c000c2f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f8:	6a 00                	push   0x0
c000c2fa:	68 10 01 00 00       	push   0x110
c000c2ff:	52                   	push   edx
c000c300:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c303:	83 c4 20             	add    esp,0x20
c000c306:	83 c4 1c             	add    esp,0x1c
c000c309:	c3                   	ret    

c000c30a <Directory::create()>:
c000c30a:	83 ec 0c             	sub    esp,0xc
c000c30d:	b8 0b 00 00 00       	mov    eax,0xb
c000c312:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c316:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c31d:	83 f9 19             	cmp    ecx,0x19
c000c320:	77 2f                	ja     c000c351 <Directory::create()+0x47>
c000c322:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c329:	85 c9                	test   ecx,ecx
c000c32b:	74 24                	je     c000c351 <Directory::create()+0x47>
c000c32d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c333:	85 c9                	test   ecx,ecx
c000c335:	74 1a                	je     c000c351 <Directory::create()+0x47>
c000c337:	b8 06 00 00 00       	mov    eax,0x6
c000c33c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c340:	75 0f                	jne    c000c351 <Directory::create()+0x47>
c000c342:	83 c2 0d             	add    edx,0xd
c000c345:	50                   	push   eax
c000c346:	50                   	push   eax
c000c347:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c349:	52                   	push   edx
c000c34a:	51                   	push   ecx
c000c34b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c34e:	83 c4 10             	add    esp,0x10
c000c351:	83 c4 0c             	add    esp,0xc
c000c354:	c3                   	ret    
c000c355:	90                   	nop

c000c356 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c356:	b8 0a 00 00 00       	mov    eax,0xa
c000c35b:	c3                   	ret    

c000c35c <Bus::Bus(char const*)>:
c000c35c:	83 ec 0c             	sub    esp,0xc
c000c35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c363:	83 ec 08             	sub    esp,0x8
c000c366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36a:	50                   	push   eax
c000c36b:	e8 22 08 00 00       	call   c000cb92 <Device::Device(char const*)>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	ba 10 1a 02 c0       	mov    edx,0xc0021a10
c000c378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37c:	89 10                	mov    DWORD PTR [eax],edx
c000c37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c382:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c38c:	90                   	nop
c000c38d:	83 c4 0c             	add    esp,0xc
c000c390:	c3                   	ret    
c000c391:	90                   	nop
c000c392:	66 90                	xchg   ax,ax

c000c394 <Bus::~Bus()>:
c000c394:	83 ec 0c             	sub    esp,0xc
c000c397:	ba 10 1a 02 c0       	mov    edx,0xc0021a10
c000c39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a0:	89 10                	mov    DWORD PTR [eax],edx
c000c3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a6:	83 ec 0c             	sub    esp,0xc
c000c3a9:	50                   	push   eax
c000c3aa:	e8 4d 05 00 00       	call   c000c8fc <Device::~Device()>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	90                   	nop
c000c3b3:	83 c4 0c             	add    esp,0xc
c000c3b6:	c3                   	ret    
c000c3b7:	90                   	nop

c000c3b8 <Bus::~Bus()>:
c000c3b8:	83 ec 0c             	sub    esp,0xc
c000c3bb:	83 ec 0c             	sub    esp,0xc
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	e8 cd ff ff ff       	call   c000c394 <Bus::~Bus()>
c000c3c7:	83 c4 10             	add    esp,0x10
c000c3ca:	83 ec 08             	sub    esp,0x8
c000c3cd:	68 58 01 00 00       	push   0x158
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	e8 3d e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c3db:	83 c4 10             	add    esp,0x10
c000c3de:	83 c4 0c             	add    esp,0xc
c000c3e1:	c3                   	ret    

c000c3e2 <beepThread(void*)>:
c000c3e2:	83 ec 0c             	sub    esp,0xc
c000c3e5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ee:	48                   	dec    eax
c000c3ef:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3f4:	75 01                	jne    c000c3f7 <beepThread(void*)+0x15>
c000c3f6:	fb                   	sti    
c000c3f7:	83 ec 0c             	sub    esp,0xc
c000c3fa:	6b c2 0a             	imul   eax,edx,0xa
c000c3fd:	50                   	push   eax
c000c3fe:	e8 e5 9f 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c000c403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c40a:	e8 34 bf 00 00       	call   c0018343 <HalMakeBeep(int)>
c000c40f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c417:	83 c4 1c             	add    esp,0x1c
c000c41a:	e9 ad 9e 00 00       	jmp    c00162cc <blockTask(TaskState)>

c000c41f <Krnl::beep(int, int, bool)>:
c000c41f:	56                   	push   esi
c000c420:	53                   	push   ebx
c000c421:	83 ec 10             	sub    esp,0x10
c000c424:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c428:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c430:	e8 0e bf 00 00       	call   c0018343 <HalMakeBeep(int)>
c000c435:	83 c4 10             	add    esp,0x10
c000c438:	89 f0                	mov    eax,esi
c000c43a:	84 c0                	test   al,al
c000c43c:	74 1e                	je     c000c45c <Krnl::beep(int, int, bool)+0x3d>
c000c43e:	83 ec 0c             	sub    esp,0xc
c000c441:	6b db 0a             	imul   ebx,ebx,0xa
c000c444:	53                   	push   ebx
c000c445:	e8 9e 9f 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c000c44a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c452:	83 c4 14             	add    esp,0x14
c000c455:	5b                   	pop    ebx
c000c456:	5e                   	pop    esi
c000c457:	e9 e7 be 00 00       	jmp    c0018343 <HalMakeBeep(int)>
c000c45c:	68 e6 00 00 00       	push   0xe6
c000c461:	53                   	push   ebx
c000c462:	68 e2 c3 00 c0       	push   0xc000c3e2
c000c467:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c46d:	e8 f6 99 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c000c472:	83 c4 14             	add    esp,0x14
c000c475:	5b                   	pop    ebx
c000c476:	5e                   	pop    esi
c000c477:	c3                   	ret    

c000c478 <User::loadClockSettings(int)>:
c000c478:	53                   	push   ebx
c000c479:	83 ec 14             	sub    esp,0x14
c000c47c:	68 14 01 00 00       	push   0x114
c000c481:	e8 30 b6 ff ff       	call   c0007ab6 <malloc>
c000c486:	83 c4 0c             	add    esp,0xc
c000c489:	89 c3                	mov    ebx,eax
c000c48b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c491:	68 34 1a 02 c0       	push   0xc0021a34
c000c496:	50                   	push   eax
c000c497:	e8 e6 f6 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000c49c:	58                   	pop    eax
c000c49d:	5a                   	pop    edx
c000c49e:	6a 01                	push   0x1
c000c4a0:	53                   	push   ebx
c000c4a1:	e8 fa f6 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c000c4a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4a9:	e8 50 f7 ff ff       	call   c000bbfe <File::close()>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	85 db                	test   ebx,ebx
c000c4b3:	74 0f                	je     c000c4c4 <User::loadClockSettings(int)+0x4c>
c000c4b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4be:	83 c4 08             	add    esp,0x8
c000c4c1:	5b                   	pop    ebx
c000c4c2:	ff e0                	jmp    eax
c000c4c4:	83 c4 08             	add    esp,0x8
c000c4c7:	5b                   	pop    ebx
c000c4c8:	c3                   	ret    
c000c4c9:	90                   	nop

c000c4ca <Clock::Clock(char const*)>:
c000c4ca:	83 ec 0c             	sub    esp,0xc
c000c4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d1:	83 ec 08             	sub    esp,0x8
c000c4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d8:	50                   	push   eax
c000c4d9:	e8 b4 06 00 00       	call   c000cb92 <Device::Device(char const*)>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c000c4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ea:	89 10                	mov    DWORD PTR [eax],edx
c000c4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4fa:	90                   	nop
c000c4fb:	83 c4 0c             	add    esp,0xc
c000c4fe:	c3                   	ret    
c000c4ff:	90                   	nop

c000c500 <Clock::~Clock()>:
c000c500:	83 ec 0c             	sub    esp,0xc
c000c503:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c000c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50c:	89 10                	mov    DWORD PTR [eax],edx
c000c50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c512:	83 ec 0c             	sub    esp,0xc
c000c515:	50                   	push   eax
c000c516:	e8 e1 03 00 00       	call   c000c8fc <Device::~Device()>
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	90                   	nop
c000c51f:	83 c4 0c             	add    esp,0xc
c000c522:	c3                   	ret    
c000c523:	90                   	nop

c000c524 <Clock::~Clock()>:
c000c524:	83 ec 0c             	sub    esp,0xc
c000c527:	83 ec 0c             	sub    esp,0xc
c000c52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52e:	e8 cd ff ff ff       	call   c000c500 <Clock::~Clock()>
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	83 ec 08             	sub    esp,0x8
c000c539:	68 58 01 00 00       	push   0x158
c000c53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c542:	e8 d1 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	83 c4 0c             	add    esp,0xc
c000c54d:	c3                   	ret    

c000c54e <Clock::timeInSecondsLocal()>:
c000c54e:	53                   	push   ebx
c000c54f:	83 ec 14             	sub    esp,0x14
c000c552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c556:	8b 10                	mov    edx,DWORD PTR [eax]
c000c558:	50                   	push   eax
c000c559:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c55c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c563:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c569:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c56f:	89 cb                	mov    ebx,ecx
c000c571:	c1 fb 1f             	sar    ebx,0x1f
c000c574:	01 c8                	add    eax,ecx
c000c576:	11 da                	adc    edx,ebx
c000c578:	83 c4 10             	add    esp,0x10
c000c57b:	31 c9                	xor    ecx,ecx
c000c57d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c584:	74 05                	je     c000c58b <Clock::timeInSecondsLocal()+0x3d>
c000c586:	b9 08 07 00 00       	mov    ecx,0x708
c000c58b:	31 db                	xor    ebx,ebx
c000c58d:	01 c8                	add    eax,ecx
c000c58f:	11 da                	adc    edx,ebx
c000c591:	83 c4 08             	add    esp,0x8
c000c594:	5b                   	pop    ebx
c000c595:	c3                   	ret    

c000c596 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c596:	57                   	push   edi
c000c597:	56                   	push   esi
c000c598:	53                   	push   ebx
c000c599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c59d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c5a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5aa:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5b1:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5bd:	99                   	cdq    
c000c5be:	29 c6                	sub    esi,eax
c000c5c0:	19 d7                	sbb    edi,edx
c000c5c2:	89 f0                	mov    eax,esi
c000c5c4:	89 fa                	mov    edx,edi
c000c5c6:	31 f6                	xor    esi,esi
c000c5c8:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5cf:	74 05                	je     c000c5d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5d1:	be 08 07 00 00       	mov    esi,0x708
c000c5d6:	31 ff                	xor    edi,edi
c000c5d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5dc:	29 f0                	sub    eax,esi
c000c5de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5e2:	19 fa                	sbb    edx,edi
c000c5e4:	89 d8                	mov    eax,ebx
c000c5e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5ea:	5b                   	pop    ebx
c000c5eb:	5e                   	pop    esi
c000c5ec:	5f                   	pop    edi
c000c5ed:	ff e0                	jmp    eax

c000c5ef <datetimeToSeconds(datetime_t)>:
c000c5ef:	55                   	push   ebp
c000c5f0:	57                   	push   edi
c000c5f1:	56                   	push   esi
c000c5f2:	53                   	push   ebx
c000c5f3:	83 ec 0c             	sub    esp,0xc
c000c5f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5fa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5fe:	89 d6                	mov    esi,edx
c000c600:	0f b6 c7             	movzx  eax,bh
c000c603:	c1 ee 10             	shr    esi,0x10
c000c606:	6b e8 3c             	imul   ebp,eax,0x3c
c000c609:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c60f:	0f b6 ce             	movzx  ecx,dh
c000c612:	89 df                	mov    edi,ebx
c000c614:	49                   	dec    ecx
c000c615:	c1 ef 10             	shr    edi,0x10
c000c618:	0f b6 db             	movzx  ebx,bl
c000c61b:	89 f8                	mov    eax,edi
c000c61d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c623:	0f b6 f8             	movzx  edi,al
c000c626:	0f b6 d2             	movzx  edx,dl
c000c629:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c62d:	01 d8                	add    eax,ebx
c000c62f:	0f b7 de             	movzx  ebx,si
c000c632:	89 04 24             	mov    DWORD PTR [esp],eax
c000c635:	c1 f8 1f             	sar    eax,0x1f
c000c638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c63c:	0f b6 c1             	movzx  eax,cl
c000c63f:	8b 0c 85 a0 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde560]
c000c646:	83 f8 01             	cmp    eax,0x1
c000c649:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c64d:	76 27                	jbe    c000c676 <datetimeToSeconds(datetime_t)+0x87>
c000c64f:	83 e6 03             	and    esi,0x3
c000c652:	75 22                	jne    c000c676 <datetimeToSeconds(datetime_t)+0x87>
c000c654:	31 d2                	xor    edx,edx
c000c656:	be 64 00 00 00       	mov    esi,0x64
c000c65b:	89 d8                	mov    eax,ebx
c000c65d:	f7 f6                	div    esi
c000c65f:	85 d2                	test   edx,edx
c000c661:	75 12                	jne    c000c675 <datetimeToSeconds(datetime_t)+0x86>
c000c663:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c669:	be 90 01 00 00       	mov    esi,0x190
c000c66e:	99                   	cdq    
c000c66f:	f7 fe                	idiv   esi
c000c671:	85 d2                	test   edx,edx
c000c673:	75 01                	jne    c000c676 <datetimeToSeconds(datetime_t)+0x87>
c000c675:	41                   	inc    ecx
c000c676:	83 fb 46             	cmp    ebx,0x46
c000c679:	76 48                	jbe    c000c6c3 <datetimeToSeconds(datetime_t)+0xd4>
c000c67b:	be 46 00 00 00       	mov    esi,0x46
c000c680:	bf 64 00 00 00       	mov    edi,0x64
c000c685:	bd 90 01 00 00       	mov    ebp,0x190
c000c68a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c68f:	f7 c6 03 00 00 00    	test   esi,0x3
c000c695:	75 23                	jne    c000c6ba <datetimeToSeconds(datetime_t)+0xcb>
c000c697:	89 f0                	mov    eax,esi
c000c699:	99                   	cdq    
c000c69a:	f7 ff                	idiv   edi
c000c69c:	b8 6e 01 00 00       	mov    eax,0x16e
c000c6a1:	85 d2                	test   edx,edx
c000c6a3:	75 15                	jne    c000c6ba <datetimeToSeconds(datetime_t)+0xcb>
c000c6a5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6ab:	99                   	cdq    
c000c6ac:	f7 fd                	idiv   ebp
c000c6ae:	83 fa 01             	cmp    edx,0x1
c000c6b1:	19 c0                	sbb    eax,eax
c000c6b3:	f7 d0                	not    eax
c000c6b5:	05 6e 01 00 00       	add    eax,0x16e
c000c6ba:	01 c1                	add    ecx,eax
c000c6bc:	46                   	inc    esi
c000c6bd:	39 de                	cmp    esi,ebx
c000c6bf:	7c c9                	jl     c000c68a <datetimeToSeconds(datetime_t)+0x9b>
c000c6c1:	eb 34                	jmp    c000c6f7 <datetimeToSeconds(datetime_t)+0x108>
c000c6c3:	74 32                	je     c000c6f7 <datetimeToSeconds(datetime_t)+0x108>
c000c6c5:	b8 45 00 00 00       	mov    eax,0x45
c000c6ca:	89 c2                	mov    edx,eax
c000c6cc:	83 e2 03             	and    edx,0x3
c000c6cf:	39 d8                	cmp    eax,ebx
c000c6d1:	7e 0f                	jle    c000c6e2 <datetimeToSeconds(datetime_t)+0xf3>
c000c6d3:	83 fa 01             	cmp    edx,0x1
c000c6d6:	19 d2                	sbb    edx,edx
c000c6d8:	48                   	dec    eax
c000c6d9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6e0:	eb e8                	jmp    c000c6ca <datetimeToSeconds(datetime_t)+0xdb>
c000c6e2:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6e7:	85 d2                	test   edx,edx
c000c6e9:	75 0a                	jne    c000c6f5 <datetimeToSeconds(datetime_t)+0x106>
c000c6eb:	83 fb 01             	cmp    ebx,0x1
c000c6ee:	19 c0                	sbb    eax,eax
c000c6f0:	05 6e 01 00 00       	add    eax,0x16e
c000c6f5:	29 c1                	sub    ecx,eax
c000c6f7:	b8 80 51 01 00       	mov    eax,0x15180
c000c6fc:	f7 e9                	imul   ecx
c000c6fe:	03 04 24             	add    eax,DWORD PTR [esp]
c000c701:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c705:	83 c4 0c             	add    esp,0xc
c000c708:	5b                   	pop    ebx
c000c709:	5e                   	pop    esi
c000c70a:	5f                   	pop    edi
c000c70b:	5d                   	pop    ebp
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c70e:	57                   	push   edi
c000c70f:	56                   	push   esi
c000c710:	53                   	push   ebx
c000c711:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c715:	8b 06                	mov    eax,DWORD PTR [esi]
c000c717:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c71a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c71e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c722:	e8 c8 fe ff ff       	call   c000c5ef <datetimeToSeconds(datetime_t)>
c000c727:	59                   	pop    ecx
c000c728:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c72f:	5b                   	pop    ebx
c000c730:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c736:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c73c:	89 cb                	mov    ebx,ecx
c000c73e:	c1 fb 1f             	sar    ebx,0x1f
c000c741:	29 c8                	sub    eax,ecx
c000c743:	19 da                	sbb    edx,ebx
c000c745:	31 c9                	xor    ecx,ecx
c000c747:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c74e:	74 05                	je     c000c755 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c750:	b9 08 07 00 00       	mov    ecx,0x708
c000c755:	31 db                	xor    ebx,ebx
c000c757:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c75b:	29 c8                	sub    eax,ecx
c000c75d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c761:	19 da                	sbb    edx,ebx
c000c763:	89 f8                	mov    eax,edi
c000c765:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c769:	5b                   	pop    ebx
c000c76a:	5e                   	pop    esi
c000c76b:	5f                   	pop    edi
c000c76c:	ff e0                	jmp    eax

c000c76e <secondsToDatetime(unsigned long long)>:
c000c76e:	55                   	push   ebp
c000c76f:	57                   	push   edi
c000c770:	56                   	push   esi
c000c771:	53                   	push   ebx
c000c772:	83 ec 1c             	sub    esp,0x1c
c000c775:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c779:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c77d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c781:	6a 00                	push   0x0
c000c783:	68 80 51 01 00       	push   0x15180
c000c788:	55                   	push   ebp
c000c789:	57                   	push   edi
c000c78a:	e8 a1 2f 01 00       	call   c001f730 <__udivdi3>
c000c78f:	83 c4 10             	add    esp,0x10
c000c792:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79c:	6a 00                	push   0x0
c000c79e:	68 80 51 01 00       	push   0x15180
c000c7a3:	55                   	push   ebp
c000c7a4:	57                   	push   edi
c000c7a5:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7aa:	e8 81 30 01 00       	call   c001f830 <__umoddi3>
c000c7af:	83 c4 10             	add    esp,0x10
c000c7b2:	99                   	cdq    
c000c7b3:	f7 ff                	idiv   edi
c000c7b5:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7bd:	89 d0                	mov    eax,edx
c000c7bf:	99                   	cdq    
c000c7c0:	f7 ff                	idiv   edi
c000c7c2:	85 db                	test   ebx,ebx
c000c7c4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7c7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7ca:	79 11                	jns    c000c7dd <secondsToDatetime(unsigned long long)+0x6f>
c000c7cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7d0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7d6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7db:	eb 07                	jmp    c000c7e4 <secondsToDatetime(unsigned long long)+0x76>
c000c7dd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7e2:	89 d8                	mov    eax,ebx
c000c7e4:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7e9:	99                   	cdq    
c000c7ea:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7ef:	f7 f9                	idiv   ecx
c000c7f1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7fa:	31 d2                	xor    edx,edx
c000c7fc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c804:	01 c3                	add    ebx,eax
c000c806:	89 d8                	mov    eax,ebx
c000c808:	f7 f1                	div    ecx
c000c80a:	31 d2                	xor    edx,edx
c000c80c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c80f:	89 d8                	mov    eax,ebx
c000c811:	f7 f7                	div    edi
c000c813:	31 d2                	xor    edx,edx
c000c815:	29 c1                	sub    ecx,eax
c000c817:	89 d8                	mov    eax,ebx
c000c819:	f7 f5                	div    ebp
c000c81b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c820:	29 c1                	sub    ecx,eax
c000c822:	31 d2                	xor    edx,edx
c000c824:	89 c8                	mov    eax,ecx
c000c826:	f7 f5                	div    ebp
c000c828:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c82d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c831:	31 d2                	xor    edx,edx
c000c833:	89 c8                	mov    eax,ecx
c000c835:	f7 f5                	div    ebp
c000c837:	31 d2                	xor    edx,edx
c000c839:	01 c3                	add    ebx,eax
c000c83b:	89 c8                	mov    eax,ecx
c000c83d:	f7 f7                	div    edi
c000c83f:	bf 99 00 00 00       	mov    edi,0x99
c000c844:	29 c3                	sub    ebx,eax
c000c846:	31 d2                	xor    edx,edx
c000c848:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c850:	29 c3                	sub    ebx,eax
c000c852:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c855:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c858:	bb 05 00 00 00       	mov    ebx,0x5
c000c85d:	83 c1 02             	add    ecx,0x2
c000c860:	89 c8                	mov    eax,ecx
c000c862:	f7 f7                	div    edi
c000c864:	31 d2                	xor    edx,edx
c000c866:	89 c7                	mov    edi,eax
c000c868:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c86e:	83 c0 02             	add    eax,0x2
c000c871:	f7 f3                	div    ebx
c000c873:	89 eb                	mov    ebx,ebp
c000c875:	29 c3                	sub    ebx,eax
c000c877:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c87d:	88 1e                	mov    BYTE PTR [esi],bl
c000c87f:	19 c0                	sbb    eax,eax
c000c881:	31 d2                	xor    edx,edx
c000c883:	83 e0 0c             	and    eax,0xc
c000c886:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c88a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c892:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c896:	83 f9 01             	cmp    ecx,0x1
c000c899:	0f 96 c2             	setbe  dl
c000c89c:	41                   	inc    ecx
c000c89d:	01 d0                	add    eax,edx
c000c89f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c8a2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8a6:	83 c4 1c             	add    esp,0x1c
c000c8a9:	89 f0                	mov    eax,esi
c000c8ab:	5b                   	pop    ebx
c000c8ac:	5e                   	pop    esi
c000c8ad:	5f                   	pop    edi
c000c8ae:	5d                   	pop    ebp
c000c8af:	c2 04 00             	ret    0x4

c000c8b2 <Clock::timeInDatetimeLocal()>:
c000c8b2:	53                   	push   ebx
c000c8b3:	83 ec 14             	sub    esp,0x14
c000c8b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8be:	e8 8b fc ff ff       	call   c000c54e <Clock::timeInSecondsLocal()>
c000c8c3:	83 c4 0c             	add    esp,0xc
c000c8c6:	52                   	push   edx
c000c8c7:	50                   	push   eax
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 a0 fe ff ff       	call   c000c76e <secondsToDatetime(unsigned long long)>
c000c8ce:	89 d8                	mov    eax,ebx
c000c8d0:	83 c4 14             	add    esp,0x14
c000c8d3:	5b                   	pop    ebx
c000c8d4:	c2 04 00             	ret    0x4
c000c8d7:	90                   	nop

c000c8d8 <Device::hibernate()>:
c000c8d8:	c3                   	ret    
c000c8d9:	90                   	nop

c000c8da <Device::wake()>:
c000c8da:	c3                   	ret    
c000c8db:	90                   	nop

c000c8dc <Device::detect()>:
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <Device::disableLegacy()>:
c000c8de:	c3                   	ret    
c000c8df:	90                   	nop

c000c8e0 <Device::powerSaving(PowerSavingLevel)>:
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <DriverlessDevice::close(int, int, void*)>:
c000c8e2:	31 c0                	xor    eax,eax
c000c8e4:	c3                   	ret    
c000c8e5:	90                   	nop

c000c8e6 <DriverlessDevice::detect()>:
c000c8e6:	c3                   	ret    
c000c8e7:	90                   	nop

c000c8e8 <DriverlessDevice::open(int, int, void*)>:
c000c8e8:	83 ec 18             	sub    esp,0x18
c000c8eb:	68 d0 1a 02 c0       	push   0xc0021ad0
c000c8f0:	e8 5e 4d 00 00       	call   c0011653 <KePanic(char const*)>
c000c8f5:	83 c8 ff             	or     eax,0xffffffff
c000c8f8:	83 c4 1c             	add    esp,0x1c
c000c8fb:	c3                   	ret    

c000c8fc <Device::~Device()>:
c000c8fc:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c000c901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c905:	89 10                	mov    DWORD PTR [eax],edx
c000c907:	90                   	nop
c000c908:	c3                   	ret    
c000c909:	90                   	nop

c000c90a <Device::~Device()>:
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c911:	e8 e6 ff ff ff       	call   c000c8fc <Device::~Device()>
c000c916:	83 c4 04             	add    esp,0x4
c000c919:	83 ec 08             	sub    esp,0x8
c000c91c:	68 58 01 00 00       	push   0x158
c000c921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c925:	e8 ee de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c92a:	83 c4 10             	add    esp,0x10
c000c92d:	83 c4 0c             	add    esp,0xc
c000c930:	c3                   	ret    
c000c931:	90                   	nop

c000c932 <Device::findAndLoadDriver()>:
c000c932:	c7 44 24 04 ee 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021aee
c000c93a:	e9 06 e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c93f:	90                   	nop

c000c940 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c940:	57                   	push   edi
c000c941:	b9 09 00 00 00       	mov    ecx,0x9
c000c946:	56                   	push   esi
c000c947:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c94b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c94f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c959:	81 c7 18 01 00 00    	add    edi,0x118
c000c95f:	fc                   	cld    
c000c960:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c962:	5e                   	pop    esi
c000c963:	5f                   	pop    edi
c000c964:	c3                   	ret    
c000c965:	90                   	nop

c000c966 <Device::preOpenACPI(void*, char*, char*)>:
c000c966:	57                   	push   edi
c000c967:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c96c:	56                   	push   esi
c000c96d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c971:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c97f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c985:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c98b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c98f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c991:	b9 0e 00 00 00       	mov    ecx,0xe
c000c996:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c99c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c9a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9a2:	5e                   	pop    esi
c000c9a3:	5f                   	pop    edi
c000c9a4:	c3                   	ret    
c000c9a5:	90                   	nop

c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9a6:	53                   	push   ebx
c000c9a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9b7:	0f b6 c0             	movzx  eax,al
c000c9ba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9ca:	5b                   	pop    ebx
c000c9cb:	e9 a8 05 00 00       	jmp    c000cf78 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9d0 <Device::getParent()>:
c000c9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9d4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9da:	c3                   	ret    
c000c9db:	90                   	nop

c000c9dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9e4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9f5:	e9 e6 06 00 00       	jmp    c000d0e0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9fa <Device::addChild(Device*)>:
c000c9fa:	53                   	push   ebx
c000c9fb:	83 ec 08             	sub    esp,0x8
c000c9fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca06:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca0c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca12:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca14:	85 d2                	test   edx,edx
c000ca16:	74 04                	je     c000ca1c <Device::addChild(Device*)+0x22>
c000ca18:	89 d3                	mov    ebx,edx
c000ca1a:	eb f6                	jmp    c000ca12 <Device::addChild(Device*)+0x18>
c000ca1c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca1f:	83 ec 0c             	sub    esp,0xc
c000ca22:	6a 08                	push   0x8
c000ca24:	e8 8d b0 ff ff       	call   c0007ab6 <malloc>
c000ca29:	89 03                	mov    DWORD PTR [ebx],eax
c000ca2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca38:	83 c4 18             	add    esp,0x18
c000ca3b:	5b                   	pop    ebx
c000ca3c:	c3                   	ret    
c000ca3d:	90                   	nop

c000ca3e <Device::removeAllChildren()>:
c000ca3e:	56                   	push   esi
c000ca3f:	53                   	push   ebx
c000ca40:	52                   	push   edx
c000ca41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca45:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4e:	74 17                	je     c000ca67 <Device::removeAllChildren()+0x29>
c000ca50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca53:	85 c0                	test   eax,eax
c000ca55:	74 0c                	je     c000ca63 <Device::removeAllChildren()+0x25>
c000ca57:	83 ec 0c             	sub    esp,0xc
c000ca5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca5c:	50                   	push   eax
c000ca5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca65:	eb e4                	jmp    c000ca4b <Device::removeAllChildren()+0xd>
c000ca67:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca80:	58                   	pop    eax
c000ca81:	5b                   	pop    ebx
c000ca82:	5e                   	pop    esi
c000ca83:	c3                   	ret    

c000ca84 <Device::hibernateAll()>:
c000ca84:	53                   	push   ebx
c000ca85:	83 ec 14             	sub    esp,0x14
c000ca88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8e:	53                   	push   ebx
c000ca8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9e:	74 0f                	je     c000caaf <Device::hibernateAll()+0x2b>
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa6:	e8 d9 ff ff ff       	call   c000ca84 <Device::hibernateAll()>
c000caab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caad:	eb e9                	jmp    c000ca98 <Device::hibernateAll()+0x14>
c000caaf:	83 c4 08             	add    esp,0x8
c000cab2:	5b                   	pop    ebx
c000cab3:	c3                   	ret    

c000cab4 <Device::wakeAll()>:
c000cab4:	53                   	push   ebx
c000cab5:	83 ec 14             	sub    esp,0x14
c000cab8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cabc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cabe:	53                   	push   ebx
c000cabf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cac2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cace:	74 0f                	je     c000cadf <Device::wakeAll()+0x2b>
c000cad0:	83 ec 0c             	sub    esp,0xc
c000cad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad6:	e8 d9 ff ff ff       	call   c000cab4 <Device::wakeAll()>
c000cadb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cadd:	eb e9                	jmp    c000cac8 <Device::wakeAll()+0x14>
c000cadf:	83 c4 08             	add    esp,0x8
c000cae2:	5b                   	pop    ebx
c000cae3:	c3                   	ret    

c000cae4 <Device::detectAll()>:
c000cae4:	53                   	push   ebx
c000cae5:	83 ec 14             	sub    esp,0x14
c000cae8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caee:	53                   	push   ebx
c000caef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caf2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf8:	83 c4 10             	add    esp,0x10
c000cafb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafe:	74 0f                	je     c000cb0f <Device::detectAll()+0x2b>
c000cb00:	83 ec 0c             	sub    esp,0xc
c000cb03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb06:	e8 d9 ff ff ff       	call   c000cae4 <Device::detectAll()>
c000cb0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb0d:	eb e9                	jmp    c000caf8 <Device::detectAll()+0x14>
c000cb0f:	83 c4 08             	add    esp,0x8
c000cb12:	5b                   	pop    ebx
c000cb13:	c3                   	ret    

c000cb14 <Device::disableLegacyAll()>:
c000cb14:	c3                   	ret    
c000cb15:	90                   	nop

c000cb16 <Device::loadDriversForAll()>:
c000cb16:	c3                   	ret    
c000cb17:	90                   	nop

c000cb18 <Device::closeAll()>:
c000cb18:	53                   	push   ebx
c000cb19:	83 ec 08             	sub    esp,0x8
c000cb1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb22:	6a 00                	push   0x0
c000cb24:	6a 00                	push   0x0
c000cb26:	6a 00                	push   0x0
c000cb28:	53                   	push   ebx
c000cb29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb32:	83 c4 10             	add    esp,0x10
c000cb35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb38:	74 0f                	je     c000cb49 <Device::closeAll()+0x31>
c000cb3a:	83 ec 0c             	sub    esp,0xc
c000cb3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb40:	e8 d3 ff ff ff       	call   c000cb18 <Device::closeAll()>
c000cb45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb47:	eb e9                	jmp    c000cb32 <Device::closeAll()+0x1a>
c000cb49:	83 c4 08             	add    esp,0x8
c000cb4c:	5b                   	pop    ebx
c000cb4d:	c3                   	ret    

c000cb4e <Device::powerSavingAll(PowerSavingLevel)>:
c000cb4e:	56                   	push   esi
c000cb4f:	53                   	push   ebx
c000cb50:	83 ec 0c             	sub    esp,0xc
c000cb53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb57:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb5d:	56                   	push   esi
c000cb5e:	53                   	push   ebx
c000cb5f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb6e:	74 0f                	je     c000cb7f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb70:	52                   	push   edx
c000cb71:	52                   	push   edx
c000cb72:	56                   	push   esi
c000cb73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb76:	e8 d3 ff ff ff       	call   c000cb4e <Device::powerSavingAll(PowerSavingLevel)>
c000cb7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb7d:	eb e9                	jmp    c000cb68 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb7f:	58                   	pop    eax
c000cb80:	5b                   	pop    ebx
c000cb81:	5e                   	pop    esi
c000cb82:	c3                   	ret    
c000cb83:	90                   	nop

c000cb84 <Device::setName(char const*)>:
c000cb84:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb8c:	e9 af 3a ff ff       	jmp    c0000640 <strcpy>
c000cb91:	90                   	nop

c000cb92 <Device::Device(char const*)>:
c000cb92:	83 ec 1c             	sub    esp,0x1c
c000cb95:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c000cb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9e:	89 10                	mov    DWORD PTR [eax],edx
c000cba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbd8:	83 ec 08             	sub    esp,0x8
c000cbdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe3:	e8 9c ff ff ff       	call   c000cb84 <Device::setName(char const*)>
c000cbe8:	83 c4 10             	add    esp,0x10
c000cbeb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbf3:	83 ec 0c             	sub    esp,0xc
c000cbf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbfa:	e8 b7 ae ff ff       	call   c0007ab6 <malloc>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc13:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc49:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc54:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc62:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc70:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc88:	90                   	nop
c000cc89:	83 c4 1c             	add    esp,0x1c
c000cc8c:	c3                   	ret    
c000cc8d:	90                   	nop

c000cc8e <Device::getName()>:
c000cc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc92:	05 d0 00 00 00       	add    eax,0xd0
c000cc97:	c3                   	ret    

c000cc98 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9f:	83 ec 08             	sub    esp,0x8
c000cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca6:	50                   	push   eax
c000cca7:	e8 e6 fe ff ff       	call   c000cb92 <Device::Device(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c000ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccb8:	89 10                	mov    DWORD PTR [eax],edx
c000ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccbe:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccc8:	90                   	nop
c000ccc9:	83 c4 0c             	add    esp,0xc
c000cccc:	c3                   	ret    
c000cccd:	90                   	nop

c000ccce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccce:	57                   	push   edi
c000cccf:	56                   	push   esi
c000ccd0:	53                   	push   ebx
c000ccd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccd5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccdd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cce3:	75 0c                	jne    c000ccf1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cce5:	52                   	push   edx
c000cce6:	52                   	push   edx
c000cce7:	53                   	push   ebx
c000cce8:	56                   	push   esi
c000cce9:	e8 f4 2e 01 00       	call   c001fbe2 <LinkedList<Device>::addElement(Device*)>
c000ccee:	83 c4 10             	add    esp,0x10
c000ccf1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ccf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccfa:	74 12                	je     c000cd0e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccfc:	50                   	push   eax
c000ccfd:	57                   	push   edi
c000ccfe:	56                   	push   esi
c000ccff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd02:	e8 c7 ff ff ff       	call   c000ccce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd09:	83 c4 10             	add    esp,0x10
c000cd0c:	eb e9                	jmp    c000ccf7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd0e:	5b                   	pop    ebx
c000cd0f:	5e                   	pop    esi
c000cd10:	5f                   	pop    edi
c000cd11:	c3                   	ret    

c000cd12 <getDevicesOfType(DeviceType)>:
c000cd12:	53                   	push   ebx
c000cd13:	83 ec 14             	sub    esp,0x14
c000cd16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd1a:	53                   	push   ebx
c000cd1b:	e8 9e 2f 01 00       	call   c001fcbe <LinkedList<Device>::LinkedList()>
c000cd20:	83 c4 0c             	add    esp,0xc
c000cd23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd27:	53                   	push   ebx
c000cd28:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd2e:	e8 9b ff ff ff       	call   c000ccce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd33:	89 d8                	mov    eax,ebx
c000cd35:	83 c4 18             	add    esp,0x18
c000cd38:	5b                   	pop    ebx
c000cd39:	c2 04 00             	ret    0x4

c000cd3c <HardDiskController::HardDiskController(char const*)>:
c000cd3c:	83 ec 0c             	sub    esp,0xc
c000cd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd43:	83 ec 08             	sub    esp,0x8
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	50                   	push   eax
c000cd4b:	e8 42 fe ff ff       	call   c000cb92 <Device::Device(char const*)>
c000cd50:	83 c4 10             	add    esp,0x10
c000cd53:	ba 88 1b 02 c0       	mov    edx,0xc0021b88
c000cd58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5c:	89 10                	mov    DWORD PTR [eax],edx
c000cd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd62:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd6c:	90                   	nop
c000cd6d:	83 c4 0c             	add    esp,0xc
c000cd70:	c3                   	ret    
c000cd71:	90                   	nop
c000cd72:	66 90                	xchg   ax,ax

c000cd74 <HardDiskController::~HardDiskController()>:
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	ba 88 1b 02 c0       	mov    edx,0xc0021b88
c000cd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd80:	89 10                	mov    DWORD PTR [eax],edx
c000cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd86:	83 ec 0c             	sub    esp,0xc
c000cd89:	50                   	push   eax
c000cd8a:	e8 6d fb ff ff       	call   c000c8fc <Device::~Device()>
c000cd8f:	83 c4 10             	add    esp,0x10
c000cd92:	90                   	nop
c000cd93:	83 c4 0c             	add    esp,0xc
c000cd96:	c3                   	ret    
c000cd97:	90                   	nop

c000cd98 <HardDiskController::~HardDiskController()>:
c000cd98:	83 ec 0c             	sub    esp,0xc
c000cd9b:	83 ec 0c             	sub    esp,0xc
c000cd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda2:	e8 cd ff ff ff       	call   c000cd74 <HardDiskController::~HardDiskController()>
c000cda7:	83 c4 10             	add    esp,0x10
c000cdaa:	83 ec 08             	sub    esp,0x8
c000cdad:	68 58 01 00 00       	push   0x158
c000cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb6:	e8 5d da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	83 c4 0c             	add    esp,0xc
c000cdc1:	c3                   	ret    

c000cdc2 <PhysicalDisk::eject()>:
c000cdc2:	83 c8 ff             	or     eax,0xffffffff
c000cdc5:	c3                   	ret    

c000cdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdc6:	83 ec 0c             	sub    esp,0xc
c000cdc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcd:	83 ec 08             	sub    esp,0x8
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	50                   	push   eax
c000cdd5:	e8 b8 fd ff ff       	call   c000cb92 <Device::Device(char const*)>
c000cdda:	83 c4 10             	add    esp,0x10
c000cddd:	ba b4 1b 02 c0       	mov    edx,0xc0021bb4
c000cde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde6:	89 10                	mov    DWORD PTR [eax],edx
c000cde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdec:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce02:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce14:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce28:	90                   	nop
c000ce29:	83 c4 0c             	add    esp,0xc
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <PhysicalDisk::startCache()>:
c000ce2e:	56                   	push   esi
c000ce2f:	53                   	push   ebx
c000ce30:	83 ec 10             	sub    esp,0x10
c000ce33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce37:	6a 44                	push   0x44
c000ce39:	e8 78 ac ff ff       	call   c0007ab6 <malloc>
c000ce3e:	89 c6                	mov    esi,eax
c000ce40:	58                   	pop    eax
c000ce41:	5a                   	pop    edx
c000ce42:	53                   	push   ebx
c000ce43:	56                   	push   esi
c000ce44:	e8 7b 17 00 00       	call   c000e5c4 <VCache::VCache(PhysicalDisk*)>
c000ce49:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce4f:	83 c4 14             	add    esp,0x14
c000ce52:	5b                   	pop    ebx
c000ce53:	5e                   	pop    esi
c000ce54:	c3                   	ret    
c000ce55:	90                   	nop

c000ce56 <PhysicalDisk::~PhysicalDisk()>:
c000ce56:	83 ec 0c             	sub    esp,0xc
c000ce59:	ba b4 1b 02 c0       	mov    edx,0xc0021bb4
c000ce5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce62:	89 10                	mov    DWORD PTR [eax],edx
c000ce64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce68:	83 ec 0c             	sub    esp,0xc
c000ce6b:	50                   	push   eax
c000ce6c:	e8 8b fa ff ff       	call   c000c8fc <Device::~Device()>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	90                   	nop
c000ce75:	83 c4 0c             	add    esp,0xc
c000ce78:	c3                   	ret    
c000ce79:	90                   	nop

c000ce7a <PhysicalDisk::~PhysicalDisk()>:
c000ce7a:	83 ec 0c             	sub    esp,0xc
c000ce7d:	83 ec 0c             	sub    esp,0xc
c000ce80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce84:	e8 cd ff ff ff       	call   c000ce56 <PhysicalDisk::~PhysicalDisk()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	83 ec 08             	sub    esp,0x8
c000ce8f:	68 6c 01 00 00       	push   0x16c
c000ce94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce98:	e8 7b d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	83 c4 0c             	add    esp,0xc
c000cea3:	c3                   	ret    

c000cea4 <int_handler>:
c000cea4:	55                   	push   ebp
c000cea5:	57                   	push   edi
c000cea6:	56                   	push   esi
c000cea7:	53                   	push   ebx
c000cea8:	83 ec 0c             	sub    esp,0xc
c000ceab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ceaf:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceb6:	74 0b                	je     c000cec3 <int_handler+0x1f>
c000ceb8:	fa                   	cli    
c000ceb9:	f4                   	hlt    
c000ceba:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cec1:	75 f5                	jne    c000ceb8 <int_handler+0x14>
c000cec3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cec6:	8d 46 e0             	lea    eax,[esi-0x20]
c000cec9:	83 f8 17             	cmp    eax,0x17
c000cecc:	76 40                	jbe    c000cf0e <int_handler+0x6a>
c000cece:	c1 e6 04             	shl    esi,0x4
c000ced1:	31 db                	xor    ebx,ebx
c000ced3:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ced9:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cedf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cee3:	85 c0                	test   eax,eax
c000cee5:	74 13                	je     c000cefa <int_handler+0x56>
c000cee7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ceea:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ceee:	74 2c                	je     c000cf1c <int_handler+0x78>
c000cef0:	83 ec 08             	sub    esp,0x8
c000cef3:	52                   	push   edx
c000cef4:	57                   	push   edi
c000cef5:	ff d0                	call   eax
c000cef7:	83 c4 10             	add    esp,0x10
c000cefa:	83 c3 01             	add    ebx,0x1
c000cefd:	83 fb 04             	cmp    ebx,0x4
c000cf00:	75 dd                	jne    c000cedf <int_handler+0x3b>
c000cf02:	83 c4 0c             	add    esp,0xc
c000cf05:	31 c0                	xor    eax,eax
c000cf07:	5b                   	pop    ebx
c000cf08:	31 d2                	xor    edx,edx
c000cf0a:	5e                   	pop    esi
c000cf0b:	5f                   	pop    edi
c000cf0c:	5d                   	pop    ebp
c000cf0d:	c3                   	ret    
c000cf0e:	83 ec 0c             	sub    esp,0xc
c000cf11:	50                   	push   eax
c000cf12:	e8 69 b4 00 00       	call   c0018380 <HalEndOfInterrupt(int)>
c000cf17:	83 c4 10             	add    esp,0x10
c000cf1a:	eb b2                	jmp    c000cece <int_handler+0x2a>
c000cf1c:	83 ec 08             	sub    esp,0x8
c000cf1f:	52                   	push   edx
c000cf20:	57                   	push   edi
c000cf21:	ff d0                	call   eax
c000cf23:	83 c4 10             	add    esp,0x10
c000cf26:	83 c4 0c             	add    esp,0xc
c000cf29:	5b                   	pop    ebx
c000cf2a:	5e                   	pop    esi
c000cf2b:	5f                   	pop    edi
c000cf2c:	5d                   	pop    ebp
c000cf2d:	c3                   	ret    

c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf2e:	56                   	push   esi
c000cf2f:	31 c0                	xor    eax,eax
c000cf31:	53                   	push   ebx
c000cf32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf3a:	89 ca                	mov    edx,ecx
c000cf3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf40:	c1 e2 04             	shl    edx,0x4
c000cf43:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf4b:	74 17                	je     c000cf64 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf4d:	83 c0 01             	add    eax,0x1
c000cf50:	83 f8 04             	cmp    eax,0x4
c000cf53:	75 ee                	jne    c000cf43 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf55:	c7 44 24 0c e4 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021be4
c000cf5d:	5b                   	pop    ebx
c000cf5e:	5e                   	pop    esi
c000cf5f:	e9 ef 46 00 00       	jmp    c0011653 <KePanic(char const*)>
c000cf64:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf67:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf6e:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf75:	5b                   	pop    ebx
c000cf76:	5e                   	pop    esi
c000cf77:	c3                   	ret    

c000cf78 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf78:	57                   	push   edi
c000cf79:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf7f:	56                   	push   esi
c000cf80:	53                   	push   ebx
c000cf81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf89:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf90:	74 54                	je     c000cfe6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf92:	89 c7                	mov    edi,eax
c000cf94:	84 c0                	test   al,al
c000cf96:	74 1d                	je     c000cfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf98:	83 fe 0f             	cmp    esi,0xf
c000cf9b:	0f 8f d5 00 00 00    	jg     c000d076 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cfa1:	0f b6 b6 e8 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc918]
c000cfa8:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfb0:	d1 ef                	shr    edi,1
c000cfb2:	83 e7 01             	and    edi,0x1
c000cfb5:	83 ec 08             	sub    esp,0x8
c000cfb8:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfbd:	31 db                	xor    ebx,ebx
c000cfbf:	50                   	push   eax
c000cfc0:	68 f1 1b 02 c0       	push   0xc0021bf1
c000cfc5:	e8 7b d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cfca:	83 c4 10             	add    esp,0x10
c000cfcd:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfd2:	85 c0                	test   eax,eax
c000cfd4:	7f 55                	jg     c000d02b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	68 08 1c 02 c0       	push   0xc0021c08
c000cfde:	e8 70 46 00 00       	call   c0011653 <KePanic(char const*)>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfe9:	89 f8                	mov    eax,edi
c000cfeb:	31 d2                	xor    edx,edx
c000cfed:	c1 e0 04             	shl    eax,0x4
c000cff0:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cff7:	85 c9                	test   ecx,ecx
c000cff9:	0f 84 8e 00 00 00    	je     c000d08d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfff:	83 c2 01             	add    edx,0x1
c000d002:	83 fa 04             	cmp    edx,0x4
c000d005:	75 e9                	jne    c000cff0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d007:	83 ec 0c             	sub    esp,0xc
c000d00a:	68 5c 1c 02 c0       	push   0xc0021c5c
c000d00f:	e8 3f 46 00 00       	call   c0011653 <KePanic(char const*)>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d01c:	5b                   	pop    ebx
c000d01d:	5e                   	pop    esi
c000d01e:	5f                   	pop    edi
c000d01f:	c3                   	ret    
c000d020:	83 c3 01             	add    ebx,0x1
c000d023:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d029:	7e ab                	jle    c000cfd6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d035:	56                   	push   esi
c000d036:	50                   	push   eax
c000d037:	e8 ce 1a 01 00       	call   c001eb0a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	84 c0                	test   al,al
c000d041:	74 dd                	je     c000d020 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d043:	83 ec 04             	sub    esp,0x4
c000d046:	89 f8                	mov    eax,edi
c000d048:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d04f:	0f b6 f8             	movzx  edi,al
c000d052:	57                   	push   edi
c000d053:	8d 7e 20             	lea    edi,[esi+0x20]
c000d056:	6a 00                	push   0x0
c000d058:	89 f8                	mov    eax,edi
c000d05a:	0f b6 c0             	movzx  eax,al
c000d05d:	50                   	push   eax
c000d05e:	89 f0                	mov    eax,esi
c000d060:	6a 00                	push   0x0
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	6a 00                	push   0x0
c000d067:	50                   	push   eax
c000d068:	53                   	push   ebx
c000d069:	e8 08 1c 01 00       	call   c001ec76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d06e:	83 c4 20             	add    esp,0x20
c000d071:	e9 73 ff ff ff       	jmp    c000cfe9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d076:	83 ec 0c             	sub    esp,0xc
c000d079:	31 ff                	xor    edi,edi
c000d07b:	68 24 1c 02 c0       	push   0xc0021c24
c000d080:	e8 ce 45 00 00       	call   c0011653 <KePanic(char const*)>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	e9 28 ff ff ff       	jmp    c000cfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d08d:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d090:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d094:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d09b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d09f:	5b                   	pop    ebx
c000d0a0:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0a7:	89 f0                	mov    eax,esi
c000d0a9:	5e                   	pop    esi
c000d0aa:	5f                   	pop    edi
c000d0ab:	c3                   	ret    

c000d0ac <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0b4:	c1 e0 04             	shl    eax,0x4
c000d0b7:	8d 50 10             	lea    edx,[eax+0x10]
c000d0ba:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0c0:	74 08                	je     c000d0ca <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0c2:	83 c0 04             	add    eax,0x4
c000d0c5:	39 d0                	cmp    eax,edx
c000d0c7:	75 f1                	jne    c000d0ba <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0c9:	c3                   	ret    
c000d0ca:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0d4:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0de:	eb e2                	jmp    c000d0c2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0e0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0e0:	53                   	push   ebx
c000d0e1:	83 ec 08             	sub    esp,0x8
c000d0e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0e8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0ed:	74 0e                	je     c000d0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0ef:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0f4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0fb:	75 37                	jne    c000d134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d101:	83 c0 20             	add    eax,0x20
c000d104:	c1 e0 04             	shl    eax,0x4
c000d107:	8d 50 10             	lea    edx,[eax+0x10]
c000d10a:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d110:	74 0c                	je     c000d11e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d112:	83 c0 04             	add    eax,0x4
c000d115:	39 d0                	cmp    eax,edx
c000d117:	75 f1                	jne    c000d10a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d119:	83 c4 08             	add    esp,0x8
c000d11c:	5b                   	pop    ebx
c000d11d:	c3                   	ret    
c000d11e:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d128:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d132:	eb de                	jmp    c000d112 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d134:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d139:	7f 11                	jg     c000d14c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13f:	0f b6 80 e8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc918]
c000d146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d14a:	eb b1                	jmp    c000d0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d14c:	83 ec 0c             	sub    esp,0xc
c000d14f:	68 15 1c 02 c0       	push   0xc0021c15
c000d154:	e8 fa 44 00 00       	call   c0011653 <KePanic(char const*)>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	eb 9f                	jmp    c000d0fd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d15e <setupINTS()>:
c000d15e:	31 c0                	xor    eax,eax
c000d160:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d16a:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d174:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d17e:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d188:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d192:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d19c:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d1a6:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d1b0:	83 c0 10             	add    eax,0x10
c000d1b3:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1b8:	75 a6                	jne    c000d160 <setupINTS()+0x2>
c000d1ba:	c3                   	ret    

c000d1bb <convertLegacyIRQNumber(int)>:
c000d1bb:	83 ec 0c             	sub    esp,0xc
c000d1be:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c8:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1cf:	74 0c                	je     c000d1dd <convertLegacyIRQNumber(int)+0x22>
c000d1d1:	83 f8 0f             	cmp    eax,0xf
c000d1d4:	7f 0b                	jg     c000d1e1 <convertLegacyIRQNumber(int)+0x26>
c000d1d6:	0f b6 80 e8 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc918]
c000d1dd:	83 c4 0c             	add    esp,0xc
c000d1e0:	c3                   	ret    
c000d1e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1e5:	83 ec 0c             	sub    esp,0xc
c000d1e8:	68 24 1c 02 c0       	push   0xc0021c24
c000d1ed:	e8 61 44 00 00       	call   c0011653 <KePanic(char const*)>
c000d1f2:	83 c4 10             	add    esp,0x10
c000d1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop

c000d1fe <startGUI(void*)>:
c000d1fe:	55                   	push   ebp
c000d1ff:	89 e5                	mov    ebp,esp
c000d201:	53                   	push   ebx
c000d202:	83 ec 04             	sub    esp,0x4
c000d205:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d20a:	83 e8 01             	sub    eax,0x1
c000d20d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d212:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d217:	85 c0                	test   eax,eax
c000d219:	75 01                	jne    c000d21c <startGUI(void*)+0x1e>
c000d21b:	fb                   	sti    
c000d21c:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d222:	83 ec 08             	sub    esp,0x8
c000d225:	6a 01                	push   0x1
c000d227:	68 81 1c 02 c0       	push   0xc0021c81
c000d22c:	e8 26 84 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c000d231:	83 c4 10             	add    esp,0x10
c000d234:	83 ec 08             	sub    esp,0x8
c000d237:	53                   	push   ebx
c000d238:	50                   	push   eax
c000d239:	e8 4a 86 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c000d23e:	83 c4 10             	add    esp,0x10
c000d241:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d247:	83 ec 08             	sub    esp,0x8
c000d24a:	6a 01                	push   0x1
c000d24c:	68 9b 1c 02 c0       	push   0xc0021c9b
c000d251:	e8 01 84 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c000d256:	83 c4 10             	add    esp,0x10
c000d259:	83 ec 08             	sub    esp,0x8
c000d25c:	53                   	push   ebx
c000d25d:	50                   	push   eax
c000d25e:	e8 25 86 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c000d263:	83 c4 10             	add    esp,0x10
c000d266:	90                   	nop
c000d267:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d26a:	c9                   	leave  
c000d26b:	c3                   	ret    

c000d26c <startGUIVESA(void*)>:
c000d26c:	55                   	push   ebp
c000d26d:	89 e5                	mov    ebp,esp
c000d26f:	53                   	push   ebx
c000d270:	83 ec 04             	sub    esp,0x4
c000d273:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d278:	83 e8 01             	sub    eax,0x1
c000d27b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d280:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d285:	85 c0                	test   eax,eax
c000d287:	75 01                	jne    c000d28a <startGUIVESA(void*)+0x1e>
c000d289:	fb                   	sti    
c000d28a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d290:	83 ec 08             	sub    esp,0x8
c000d293:	6a 01                	push   0x1
c000d295:	68 b9 1c 02 c0       	push   0xc0021cb9
c000d29a:	e8 b8 83 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	83 ec 08             	sub    esp,0x8
c000d2a5:	53                   	push   ebx
c000d2a6:	50                   	push   eax
c000d2a7:	e8 dc 85 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c000d2ac:	83 c4 10             	add    esp,0x10
c000d2af:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2b5:	83 ec 08             	sub    esp,0x8
c000d2b8:	6a 01                	push   0x1
c000d2ba:	68 9b 1c 02 c0       	push   0xc0021c9b
c000d2bf:	e8 93 83 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	83 ec 08             	sub    esp,0x8
c000d2ca:	53                   	push   ebx
c000d2cb:	50                   	push   eax
c000d2cc:	e8 b7 85 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	90                   	nop
c000d2d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2d8:	c9                   	leave  
c000d2d9:	c3                   	ret    

c000d2da <sendKeyToTerminal(unsigned char)>:
c000d2da:	55                   	push   ebp
c000d2db:	89 e5                	mov    ebp,esp
c000d2dd:	83 ec 28             	sub    esp,0x28
c000d2e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2e6:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2eb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2ef:	83 ec 08             	sub    esp,0x8
c000d2f2:	52                   	push   edx
c000d2f3:	50                   	push   eax
c000d2f4:	e8 bd ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d2f9:	83 c4 10             	add    esp,0x10
c000d2fc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d300:	83 f8 0a             	cmp    eax,0xa
c000d303:	74 16                	je     c000d31b <sendKeyToTerminal(unsigned char)+0x41>
c000d305:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d309:	83 f8 03             	cmp    eax,0x3
c000d30c:	74 0d                	je     c000d31b <sendKeyToTerminal(unsigned char)+0x41>
c000d30e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d312:	83 f8 1c             	cmp    eax,0x1c
c000d315:	0f 85 97 00 00 00    	jne    c000d3b2 <sendKeyToTerminal(unsigned char)+0xd8>
c000d31b:	fa                   	cli    
c000d31c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d321:	83 c0 01             	add    eax,0x1
c000d324:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d329:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d32e:	83 c0 01             	add    eax,0x1
c000d331:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d336:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d33b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d33e:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d348:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d34c:	74 1f                	je     c000d36d <sendKeyToTerminal(unsigned char)+0x93>
c000d34e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d351:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d354:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d357:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d35a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d35d:	83 ec 0c             	sub    esp,0xc
c000d360:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d363:	e8 68 92 00 00       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c000d368:	83 c4 10             	add    esp,0x10
c000d36b:	eb db                	jmp    c000d348 <sendKeyToTerminal(unsigned char)+0x6e>
c000d36d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d372:	83 e8 01             	sub    eax,0x1
c000d375:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d37a:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d37f:	85 c0                	test   eax,eax
c000d381:	75 18                	jne    c000d39b <sendKeyToTerminal(unsigned char)+0xc1>
c000d383:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d388:	85 c0                	test   eax,eax
c000d38a:	74 0f                	je     c000d39b <sendKeyToTerminal(unsigned char)+0xc1>
c000d38c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d396:	e8 1d 8d 00 00       	call   c00160b8 <schedule()>
c000d39b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3a0:	83 e8 01             	sub    eax,0x1
c000d3a3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	75 01                	jne    c000d3b2 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3b1:	fb                   	sti    
c000d3b2:	90                   	nop
c000d3b3:	c9                   	leave  
c000d3b4:	c3                   	ret    

c000d3b5 <sendKeyboardToken(KeyboardToken)>:
c000d3b5:	55                   	push   ebp
c000d3b6:	89 e5                	mov    ebp,esp
c000d3b8:	83 ec 18             	sub    esp,0x18
c000d3bb:	e8 e3 42 00 00       	call   c00116a3 <KeUserIOReceived()>
c000d3c0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c6:	0f b7 c0             	movzx  eax,ax
c000d3c9:	83 f2 01             	xor    edx,0x1
c000d3cc:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3d2:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3d7:	85 c0                	test   eax,eax
c000d3d9:	74 24                	je     c000d3ff <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3db:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3e1:	83 ec 04             	sub    esp,0x4
c000d3e4:	68 40 b4 02 c0       	push   0xc002b440
c000d3e9:	83 ec 08             	sub    esp,0x8
c000d3ec:	89 e2                	mov    edx,esp
c000d3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f1:	89 02                	mov    DWORD PTR [edx],eax
c000d3f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3f6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3fa:	ff d1                	call   ecx
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d403:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d406:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d40b:	0f b6 d2             	movzx  edx,dl
c000d40e:	0f b6 c0             	movzx  eax,al
c000d411:	39 c2                	cmp    edx,eax
c000d413:	74 1c                	je     c000d431 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d415:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d418:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d41d:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d422:	0f b6 c0             	movzx  eax,al
c000d425:	83 ec 0c             	sub    esp,0xc
c000d428:	50                   	push   eax
c000d429:	e8 d4 b0 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d434:	0f b6 c0             	movzx  eax,al
c000d437:	85 c0                	test   eax,eax
c000d439:	0f 84 da 00 00 00    	je     c000d519 <sendKeyboardToken(KeyboardToken)+0x164>
c000d43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d442:	0f b7 c0             	movzx  eax,ax
c000d445:	3d 18 03 00 00       	cmp    eax,0x318
c000d44a:	75 06                	jne    c000d452 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d44c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d455:	0f b7 c0             	movzx  eax,ax
c000d458:	3d 19 03 00 00       	cmp    eax,0x319
c000d45d:	75 06                	jne    c000d465 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d45f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d468:	0f b7 c0             	movzx  eax,ax
c000d46b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d470:	75 06                	jne    c000d478 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d472:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47b:	0f b7 c0             	movzx  eax,ax
c000d47e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d483:	75 06                	jne    c000d48b <sendKeyboardToken(KeyboardToken)+0xd6>
c000d485:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48e:	0f b7 c0             	movzx  eax,ax
c000d491:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d496:	75 06                	jne    c000d49e <sendKeyboardToken(KeyboardToken)+0xe9>
c000d498:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a1:	0f b7 c0             	movzx  eax,ax
c000d4a4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4a9:	75 06                	jne    c000d4b1 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4ab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b4:	0f b7 c0             	movzx  eax,ax
c000d4b7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4bc:	75 06                	jne    c000d4c4 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4be:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c7:	0f b7 c0             	movzx  eax,ax
c000d4ca:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4cf:	75 06                	jne    c000d4d7 <sendKeyboardToken(KeyboardToken)+0x122>
c000d4d1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4da:	0f b7 c0             	movzx  eax,ax
c000d4dd:	3d 20 03 00 00       	cmp    eax,0x320
c000d4e2:	75 06                	jne    c000d4ea <sendKeyboardToken(KeyboardToken)+0x135>
c000d4e4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ed:	0f b7 c0             	movzx  eax,ax
c000d4f0:	3d 21 03 00 00       	cmp    eax,0x321
c000d4f5:	75 06                	jne    c000d4fd <sendKeyboardToken(KeyboardToken)+0x148>
c000d4f7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d500:	0f b7 c0             	movzx  eax,ax
c000d503:	3d 22 03 00 00       	cmp    eax,0x322
c000d508:	0f 85 f1 00 00 00    	jne    c000d5ff <sendKeyboardToken(KeyboardToken)+0x24a>
c000d50e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d514:	e9 e6 00 00 00       	jmp    c000d5ff <sendKeyboardToken(KeyboardToken)+0x24a>
c000d519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51c:	0f b7 c0             	movzx  eax,ax
c000d51f:	3d 18 03 00 00       	cmp    eax,0x318
c000d524:	75 0a                	jne    c000d530 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d526:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d52c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d533:	0f b7 c0             	movzx  eax,ax
c000d536:	3d 19 03 00 00       	cmp    eax,0x319
c000d53b:	75 0a                	jne    c000d547 <sendKeyboardToken(KeyboardToken)+0x192>
c000d53d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d543:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54a:	0f b7 c0             	movzx  eax,ax
c000d54d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d552:	75 0a                	jne    c000d55e <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d554:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d55a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d561:	0f b7 c0             	movzx  eax,ax
c000d564:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d569:	75 0a                	jne    c000d575 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d56b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d571:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d578:	0f b7 c0             	movzx  eax,ax
c000d57b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d580:	75 0a                	jne    c000d58c <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d582:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d588:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58f:	0f b7 c0             	movzx  eax,ax
c000d592:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d597:	75 0a                	jne    c000d5a3 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d599:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d59f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a6:	0f b7 c0             	movzx  eax,ax
c000d5a9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5ae:	75 0a                	jne    c000d5ba <sendKeyboardToken(KeyboardToken)+0x205>
c000d5b0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bd:	0f b7 c0             	movzx  eax,ax
c000d5c0:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5c5:	75 0a                	jne    c000d5d1 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5c7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	0f b7 c0             	movzx  eax,ax
c000d5d7:	3d 20 03 00 00       	cmp    eax,0x320
c000d5dc:	75 0a                	jne    c000d5e8 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5de:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5e4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5eb:	0f b7 c0             	movzx  eax,ax
c000d5ee:	3d 21 03 00 00       	cmp    eax,0x321
c000d5f3:	75 0a                	jne    c000d5ff <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5f5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d602:	0f b7 c0             	movzx  eax,ax
c000d605:	3d 00 02 00 00       	cmp    eax,0x200
c000d60a:	75 2f                	jne    c000d63b <sendKeyboardToken(KeyboardToken)+0x286>
c000d60c:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d611:	83 f0 01             	xor    eax,0x1
c000d614:	0f b6 c0             	movzx  eax,al
c000d617:	85 c0                	test   eax,eax
c000d619:	74 20                	je     c000d63b <sendKeyboardToken(KeyboardToken)+0x286>
c000d61b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d620:	6a 01                	push   0x1
c000d622:	6a 00                	push   0x0
c000d624:	68 fe d1 00 c0       	push   0xc000d1fe
c000d629:	50                   	push   eax
c000d62a:	e8 39 88 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c000d62f:	83 c4 10             	add    esp,0x10
c000d632:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d639:	eb 3a                	jmp    c000d675 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63e:	0f b7 c0             	movzx  eax,ax
c000d641:	3d 01 02 00 00       	cmp    eax,0x201
c000d646:	75 2d                	jne    c000d675 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d648:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d64d:	83 f0 01             	xor    eax,0x1
c000d650:	0f b6 c0             	movzx  eax,al
c000d653:	85 c0                	test   eax,eax
c000d655:	74 1e                	je     c000d675 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d657:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d65c:	6a 01                	push   0x1
c000d65e:	6a 00                	push   0x0
c000d660:	68 6c d2 00 c0       	push   0xc000d26c
c000d665:	50                   	push   eax
c000d666:	e8 fd 87 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c000d66b:	83 c4 10             	add    esp,0x10
c000d66e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d678:	0f b7 c0             	movzx  eax,ax
c000d67b:	3d 25 03 00 00       	cmp    eax,0x325
c000d680:	75 06                	jne    c000d688 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d682:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68b:	0f b7 c0             	movzx  eax,ax
c000d68e:	3d 24 03 00 00       	cmp    eax,0x324
c000d693:	75 06                	jne    c000d69b <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d695:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	3d 23 03 00 00       	cmp    eax,0x323
c000d6a6:	75 06                	jne    c000d6ae <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6a8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b1:	0f b7 c0             	movzx  eax,ax
c000d6b4:	3d 26 03 00 00       	cmp    eax,0x326
c000d6b9:	75 06                	jne    c000d6c1 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6bb:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c4:	0f b7 c0             	movzx  eax,ax
c000d6c7:	3d 27 03 00 00       	cmp    eax,0x327
c000d6cc:	75 06                	jne    c000d6d4 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6ce:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d7:	0f b7 c0             	movzx  eax,ax
c000d6da:	3d 22 03 00 00       	cmp    eax,0x322
c000d6df:	75 06                	jne    c000d6e7 <sendKeyboardToken(KeyboardToken)+0x332>
c000d6e1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6e7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6eb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6ee:	83 f0 01             	xor    eax,0x1
c000d6f1:	0f b6 c0             	movzx  eax,al
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	74 7c                	je     c000d774 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6f8:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6fd:	0f b6 c0             	movzx  eax,al
c000d700:	85 c0                	test   eax,eax
c000d702:	74 43                	je     c000d747 <sendKeyboardToken(KeyboardToken)+0x392>
c000d704:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d708:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d70c:	85 c0                	test   eax,eax
c000d70e:	74 2b                	je     c000d73b <sendKeyboardToken(KeyboardToken)+0x386>
c000d710:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d716:	89 d0                	mov    eax,edx
c000d718:	c1 e0 02             	shl    eax,0x2
c000d71b:	01 d0                	add    eax,edx
c000d71d:	01 c0                	add    eax,eax
c000d71f:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d727:	0f b7 c0             	movzx  eax,ax
c000d72a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d72d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d732:	01 d0                	add    eax,edx
c000d734:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d739:	eb 71                	jmp    c000d7ac <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d73b:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d745:	eb 65                	jmp    c000d7ac <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d747:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d74c:	85 c0                	test   eax,eax
c000d74e:	74 18                	je     c000d768 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d750:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d755:	0f b6 c0             	movzx  eax,al
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	50                   	push   eax
c000d75c:	e8 79 fb ff ff       	call   c000d2da <sendKeyToTerminal(unsigned char)>
c000d761:	83 c4 10             	add    esp,0x10
c000d764:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d768:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d772:	eb 38                	jmp    c000d7ac <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	3d 01 01 00 00       	cmp    eax,0x101
c000d77f:	75 2b                	jne    c000d7ac <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d781:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d786:	85 c0                	test   eax,eax
c000d788:	74 18                	je     c000d7a2 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d78a:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78f:	0f b6 c0             	movzx  eax,al
c000d792:	83 ec 0c             	sub    esp,0xc
c000d795:	50                   	push   eax
c000d796:	e8 3f fb ff ff       	call   c000d2da <sendKeyToTerminal(unsigned char)>
c000d79b:	83 c4 10             	add    esp,0x10
c000d79e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7a2:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7ac:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7af:	83 f0 01             	xor    eax,0x1
c000d7b2:	0f b6 c0             	movzx  eax,al
c000d7b5:	85 c0                	test   eax,eax
c000d7b7:	74 5a                	je     c000d813 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7b9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7bc:	83 f0 01             	xor    eax,0x1
c000d7bf:	0f b6 c0             	movzx  eax,al
c000d7c2:	85 c0                	test   eax,eax
c000d7c4:	74 4d                	je     c000d813 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7c6:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7cb:	83 f0 01             	xor    eax,0x1
c000d7ce:	0f b6 c0             	movzx  eax,al
c000d7d1:	85 c0                	test   eax,eax
c000d7d3:	74 3e                	je     c000d813 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d8:	0f b7 c0             	movzx  eax,ax
c000d7db:	83 f8 1f             	cmp    eax,0x1f
c000d7de:	76 0b                	jbe    c000d7eb <sendKeyboardToken(KeyboardToken)+0x436>
c000d7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e3:	0f b7 c0             	movzx  eax,ax
c000d7e6:	83 f8 7e             	cmp    eax,0x7e
c000d7e9:	76 16                	jbe    c000d801 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ee:	0f b7 c0             	movzx  eax,ax
c000d7f1:	83 f8 0a             	cmp    eax,0xa
c000d7f4:	74 0b                	je     c000d801 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f9:	0f b7 c0             	movzx  eax,ax
c000d7fc:	83 f8 08             	cmp    eax,0x8
c000d7ff:	75 12                	jne    c000d813 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d804:	0f b6 c0             	movzx  eax,al
c000d807:	83 ec 0c             	sub    esp,0xc
c000d80a:	50                   	push   eax
c000d80b:	e8 ca fa ff ff       	call   c000d2da <sendKeyToTerminal(unsigned char)>
c000d810:	83 c4 10             	add    esp,0x10
c000d813:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d816:	83 f0 01             	xor    eax,0x1
c000d819:	0f b6 c0             	movzx  eax,al
c000d81c:	85 c0                	test   eax,eax
c000d81e:	74 5d                	je     c000d87d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d820:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d823:	83 f0 01             	xor    eax,0x1
c000d826:	0f b6 c0             	movzx  eax,al
c000d829:	85 c0                	test   eax,eax
c000d82b:	74 50                	je     c000d87d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d82d:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d832:	0f b6 c0             	movzx  eax,al
c000d835:	85 c0                	test   eax,eax
c000d837:	74 44                	je     c000d87d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83c:	0f b7 c0             	movzx  eax,ax
c000d83f:	83 f8 3f             	cmp    eax,0x3f
c000d842:	76 39                	jbe    c000d87d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d847:	0f b7 c0             	movzx  eax,ax
c000d84a:	83 f8 7f             	cmp    eax,0x7f
c000d84d:	77 2e                	ja     c000d87d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d84f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d852:	88 c2                	mov    dl,al
c000d854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d857:	0f b7 c0             	movzx  eax,ax
c000d85a:	83 f8 5f             	cmp    eax,0x5f
c000d85d:	76 04                	jbe    c000d863 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d85f:	b0 20                	mov    al,0x20
c000d861:	eb 02                	jmp    c000d865 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d863:	b0 00                	mov    al,0x0
c000d865:	89 d1                	mov    ecx,edx
c000d867:	29 c1                	sub    ecx,eax
c000d869:	89 c8                	mov    eax,ecx
c000d86b:	83 e8 40             	sub    eax,0x40
c000d86e:	0f b6 c0             	movzx  eax,al
c000d871:	83 ec 0c             	sub    esp,0xc
c000d874:	50                   	push   eax
c000d875:	e8 60 fa ff ff       	call   c000d2da <sendKeyToTerminal(unsigned char)>
c000d87a:	83 c4 10             	add    esp,0x10
c000d87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d880:	0f b7 c0             	movzx  eax,ax
c000d883:	3d 00 03 00 00       	cmp    eax,0x300
c000d888:	75 12                	jne    c000d89c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d88a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d88d:	83 f0 01             	xor    eax,0x1
c000d890:	0f b6 c0             	movzx  eax,al
c000d893:	85 c0                	test   eax,eax
c000d895:	74 05                	je     c000d89c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d897:	e8 67 ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d89c:	90                   	nop
c000d89d:	c9                   	leave  
c000d89e:	c3                   	ret    

c000d89f <clearInternalKeybuffer(VgaText*)>:
c000d89f:	55                   	push   ebp
c000d8a0:	89 e5                	mov    ebp,esp
c000d8a2:	83 ec 08             	sub    esp,0x8
c000d8a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a8:	05 02 01 00 00       	add    eax,0x102
c000d8ad:	83 ec 0c             	sub    esp,0xc
c000d8b0:	50                   	push   eax
c000d8b1:	e8 ba 2c ff ff       	call   c0000570 <strlen>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8bc:	81 c2 02 01 00 00    	add    edx,0x102
c000d8c2:	83 ec 04             	sub    esp,0x4
c000d8c5:	50                   	push   eax
c000d8c6:	6a 00                	push   0x0
c000d8c8:	52                   	push   edx
c000d8c9:	e8 22 2c ff ff       	call   c00004f0 <memset>
c000d8ce:	83 c4 10             	add    esp,0x10
c000d8d1:	90                   	nop
c000d8d2:	c9                   	leave  
c000d8d3:	c3                   	ret    

c000d8d4 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8d4:	55                   	push   ebp
c000d8d5:	89 e5                	mov    ebp,esp
c000d8d7:	83 ec 18             	sub    esp,0x18
c000d8da:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8df:	85 c0                	test   eax,eax
c000d8e1:	74 2a                	je     c000d90d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8e3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8e9:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8ef:	83 ec 04             	sub    esp,0x4
c000d8f2:	68 40 b4 02 c0       	push   0xc002b440
c000d8f7:	83 ec 08             	sub    esp,0x8
c000d8fa:	89 e2                	mov    edx,esp
c000d8fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8ff:	89 02                	mov    DWORD PTR [edx],eax
c000d901:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d904:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d908:	ff d1                	call   ecx
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	fb                   	sti    
c000d90e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d915:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d919:	0f 84 0d 01 00 00    	je     c000da2c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d91f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d922:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d928:	0f be c0             	movsx  eax,al
c000d92b:	85 c0                	test   eax,eax
c000d92d:	75 2c                	jne    c000d95b <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d92f:	fa                   	cli    
c000d930:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d935:	83 c0 01             	add    eax,0x1
c000d938:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d93d:	e8 76 87 00 00       	call   c00160b8 <schedule()>
c000d942:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d947:	83 e8 01             	sub    eax,0x1
c000d94a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d94f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d954:	85 c0                	test   eax,eax
c000d956:	75 c7                	jne    c000d91f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d958:	fb                   	sti    
c000d959:	eb c4                	jmp    c000d91f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d95b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d95e:	8d 50 01             	lea    edx,[eax+0x1]
c000d961:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d964:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d967:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d96d:	88 10                	mov    BYTE PTR [eax],dl
c000d96f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d972:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d978:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d97b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97f:	83 f8 03             	cmp    eax,0x3
c000d982:	75 1e                	jne    c000d9a2 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d984:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d989:	8b 00                	mov    eax,DWORD PTR [eax]
c000d98b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d994:	83 ec 08             	sub    esp,0x8
c000d997:	6a 02                	push   0x2
c000d999:	50                   	push   eax
c000d99a:	e8 57 41 00 00       	call   c0011af6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d99f:	83 c4 10             	add    esp,0x10
c000d9a2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a6:	83 f8 1c             	cmp    eax,0x1c
c000d9a9:	75 1e                	jne    c000d9c9 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9b5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9bb:	83 ec 08             	sub    esp,0x8
c000d9be:	6a 09                	push   0x9
c000d9c0:	50                   	push   eax
c000d9c1:	e8 30 41 00 00       	call   c0011af6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9c6:	83 c4 10             	add    esp,0x10
c000d9c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9cc:	05 02 01 00 00       	add    eax,0x102
c000d9d1:	83 ec 0c             	sub    esp,0xc
c000d9d4:	50                   	push   eax
c000d9d5:	e8 96 2b ff ff       	call   c0000570 <strlen>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9e0:	81 c2 02 01 00 00    	add    edx,0x102
c000d9e6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9ec:	81 c2 02 01 00 00    	add    edx,0x102
c000d9f2:	83 ec 04             	sub    esp,0x4
c000d9f5:	50                   	push   eax
c000d9f6:	51                   	push   ecx
c000d9f7:	52                   	push   edx
c000d9f8:	e8 d3 29 ff ff       	call   c00003d0 <memmove>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da04:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da08:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da0c:	83 f8 0a             	cmp    eax,0xa
c000da0f:	74 16                	je     c000da27 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da11:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da15:	83 f8 03             	cmp    eax,0x3
c000da18:	74 0d                	je     c000da27 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da1a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da1e:	83 f8 1c             	cmp    eax,0x1c
c000da21:	0f 85 ee fe ff ff    	jne    c000d915 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da2a:	eb 03                	jmp    c000da2f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da2f:	c9                   	leave  
c000da30:	c3                   	ret    
c000da31:	90                   	nop

c000da32 <Keyboard::Keyboard(char const*)>:
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da39:	83 ec 08             	sub    esp,0x8
c000da3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da40:	50                   	push   eax
c000da41:	e8 4c f1 ff ff       	call   c000cb92 <Device::Device(char const*)>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c000da4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da52:	89 10                	mov    DWORD PTR [eax],edx
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da62:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da69:	90                   	nop
c000da6a:	83 c4 0c             	add    esp,0xc
c000da6d:	c3                   	ret    

c000da6e <Keyboard::~Keyboard()>:
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	ba dc 1c 02 c0       	mov    edx,0xc0021cdc
c000da76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7a:	89 10                	mov    DWORD PTR [eax],edx
c000da7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	50                   	push   eax
c000da84:	e8 73 ee ff ff       	call   c000c8fc <Device::~Device()>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	90                   	nop
c000da8d:	83 c4 0c             	add    esp,0xc
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <Keyboard::~Keyboard()>:
c000da92:	83 ec 0c             	sub    esp,0xc
c000da95:	83 ec 0c             	sub    esp,0xc
c000da98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da9c:	e8 cd ff ff ff       	call   c000da6e <Keyboard::~Keyboard()>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	83 ec 08             	sub    esp,0x8
c000daa7:	68 5c 01 00 00       	push   0x15c
c000daac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab0:	e8 63 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dab5:	83 c4 10             	add    esp,0x10
c000dab8:	83 c4 0c             	add    esp,0xc
c000dabb:	c3                   	ret    

c000dabc <LogicalDisk::close(int, int, void*)>:
c000dabc:	83 c8 ff             	or     eax,0xffffffff
c000dabf:	c3                   	ret    

c000dac0 <LogicalDisk::~LogicalDisk()>:
c000dac0:	83 ec 0c             	sub    esp,0xc
c000dac3:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c000dac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dacc:	89 10                	mov    DWORD PTR [eax],edx
c000dace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	50                   	push   eax
c000dad6:	e8 21 ee ff ff       	call   c000c8fc <Device::~Device()>
c000dadb:	83 c4 10             	add    esp,0x10
c000dade:	90                   	nop
c000dadf:	83 c4 0c             	add    esp,0xc
c000dae2:	c3                   	ret    
c000dae3:	90                   	nop

c000dae4 <LogicalDisk::~LogicalDisk()>:
c000dae4:	83 ec 0c             	sub    esp,0xc
c000dae7:	83 ec 0c             	sub    esp,0xc
c000daea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daee:	e8 cd ff ff ff       	call   c000dac0 <LogicalDisk::~LogicalDisk()>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	83 ec 08             	sub    esp,0x8
c000daf9:	68 78 01 00 00       	push   0x178
c000dafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db02:	e8 11 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	83 c4 0c             	add    esp,0xc
c000db0d:	c3                   	ret    

c000db0e <LogicalDisk::open(int, int, void*)>:
c000db0e:	83 ec 18             	sub    esp,0x18
c000db11:	68 08 1d 02 c0       	push   0xc0021d08
c000db16:	e8 38 3b 00 00       	call   c0011653 <KePanic(char const*)>
c000db1b:	83 c8 ff             	or     eax,0xffffffff
c000db1e:	83 c4 1c             	add    esp,0x1c
c000db21:	c3                   	ret    

c000db22 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db22:	53                   	push   ebx
c000db23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db2f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db35:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db3b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db41:	77 10                	ja     c000db53 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db43:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db49:	89 d3                	mov    ebx,edx
c000db4b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db51:	72 05                	jb     c000db58 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db53:	83 c8 ff             	or     eax,0xffffffff
c000db56:	89 c2                	mov    edx,eax
c000db58:	5b                   	pop    ebx
c000db59:	c3                   	ret    

c000db5a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db5a:	56                   	push   esi
c000db5b:	83 c8 ff             	or     eax,0xffffffff
c000db5e:	53                   	push   ebx
c000db5f:	89 c2                	mov    edx,eax
c000db61:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db73:	77 27                	ja     c000db9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db75:	89 d8                	mov    eax,ebx
c000db77:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db7d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db88:	89 c2                	mov    edx,eax
c000db8a:	73 10                	jae    c000db9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db8c:	89 c8                	mov    eax,ecx
c000db8e:	89 da                	mov    edx,ebx
c000db90:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db96:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db9c:	5b                   	pop    ebx
c000db9d:	5e                   	pop    esi
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dba0:	83 ec 1c             	sub    esp,0x1c
c000dba3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbb7:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc6:	83 ec 08             	sub    esp,0x8
c000dbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcd:	50                   	push   eax
c000dbce:	e8 bf ef ff ff       	call   c000cb92 <Device::Device(char const*)>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c000dbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdf:	89 10                	mov    DWORD PTR [eax],edx
c000dbe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc06:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc1c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc22:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc28:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc33:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc39:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc47:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc5b:	90                   	nop
c000dc5c:	83 c4 1c             	add    esp,0x1c
c000dc5f:	c3                   	ret    

c000dc60 <LogicalDisk::assignDriveLetter()>:
c000dc60:	55                   	push   ebp
c000dc61:	57                   	push   edi
c000dc62:	56                   	push   esi
c000dc63:	53                   	push   ebx
c000dc64:	83 ec 14             	sub    esp,0x14
c000dc67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc6b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc71:	b0 41                	mov    al,0x41
c000dc73:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc79:	84 d2                	test   dl,dl
c000dc7b:	75 02                	jne    c000dc7f <LogicalDisk::assignDriveLetter()+0x1f>
c000dc7d:	b0 43                	mov    al,0x43
c000dc7f:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc85:	0f b6 ca             	movzx  ecx,dl
c000dc88:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc8c:	0f be e8             	movsx  ebp,al
c000dc8f:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc99:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc9d:	3c 43                	cmp    al,0x43
c000dc9f:	75 10                	jne    c000dcb1 <LogicalDisk::assignDriveLetter()+0x51>
c000dca1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dca8:	75 5a                	jne    c000dd04 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcaa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcaf:	75 53                	jne    c000dd04 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcb1:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcb4:	ba 01 00 00 00       	mov    edx,0x1
c000dcb9:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcbc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcbf:	d3 e2                	shl    edx,cl
c000dcc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcc5:	89 d7                	mov    edi,edx
c000dcc7:	89 d6                	mov    esi,edx
c000dcc9:	c1 ff 1f             	sar    edi,0x1f
c000dccc:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dcd0:	21 f9                	and    ecx,edi
c000dcd2:	09 d1                	or     ecx,edx
c000dcd4:	75 2e                	jne    c000dd04 <LogicalDisk::assignDriveLetter()+0xa4>
c000dcd6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcde:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dce4:	09 f2                	or     edx,esi
c000dce6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dce9:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcef:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcfa:	09 fa                	or     edx,edi
c000dcfc:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd02:	eb 0d                	jmp    c000dd11 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd04:	8d 50 01             	lea    edx,[eax+0x1]
c000dd07:	45                   	inc    ebp
c000dd08:	88 d0                	mov    al,dl
c000dd0a:	80 fa 5b             	cmp    dl,0x5b
c000dd0d:	75 8e                	jne    c000dc9d <LogicalDisk::assignDriveLetter()+0x3d>
c000dd0f:	31 c0                	xor    eax,eax
c000dd11:	83 c4 14             	add    esp,0x14
c000dd14:	5b                   	pop    ebx
c000dd15:	5e                   	pop    esi
c000dd16:	5f                   	pop    edi
c000dd17:	5d                   	pop    ebp
c000dd18:	c3                   	ret    
c000dd19:	90                   	nop

c000dd1a <LogicalDisk::mount()>:
c000dd1a:	56                   	push   esi
c000dd1b:	53                   	push   ebx
c000dd1c:	53                   	push   ebx
c000dd1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd21:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd27:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd31:	85 db                	test   ebx,ebx
c000dd33:	74 27                	je     c000dd5c <LogicalDisk::mount()+0x42>
c000dd35:	51                   	push   ecx
c000dd36:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd3f:	83 e8 41             	sub    eax,0x41
c000dd42:	50                   	push   eax
c000dd43:	56                   	push   esi
c000dd44:	53                   	push   ebx
c000dd45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd48:	83 c4 10             	add    esp,0x10
c000dd4b:	84 c0                	test   al,al
c000dd4d:	74 08                	je     c000dd57 <LogicalDisk::mount()+0x3d>
c000dd4f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd55:	eb 07                	jmp    c000dd5e <LogicalDisk::mount()+0x44>
c000dd57:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd5a:	eb d5                	jmp    c000dd31 <LogicalDisk::mount()+0x17>
c000dd5c:	31 c0                	xor    eax,eax
c000dd5e:	5a                   	pop    edx
c000dd5f:	5b                   	pop    ebx
c000dd60:	5e                   	pop    esi
c000dd61:	c3                   	ret    

c000dd62 <LogicalDisk::unmount()>:
c000dd62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd66:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd70:	c3                   	ret    
c000dd71:	90                   	nop

c000dd72 <LogicalDisk::eject()>:
c000dd72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd76:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd7c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd82:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd85:	90                   	nop

c000dd86 <LogicalDisk::unassignDriveLetter()>:
c000dd86:	57                   	push   edi
c000dd87:	56                   	push   esi
c000dd88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd8c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd93:	85 c9                	test   ecx,ecx
c000dd95:	75 0f                	jne    c000dda6 <LogicalDisk::unassignDriveLetter()+0x20>
c000dd97:	c7 44 24 0c 2c 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d2c
c000dd9f:	5e                   	pop    esi
c000dda0:	5f                   	pop    edi
c000dda1:	e9 ad 38 00 00       	jmp    c0011653 <KePanic(char const*)>
c000dda6:	83 e9 41             	sub    ecx,0x41
c000dda9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddb0:	b8 01 00 00 00       	mov    eax,0x1
c000ddb5:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddc0:	d3 e0                	shl    eax,cl
c000ddc2:	89 c7                	mov    edi,eax
c000ddc4:	f7 d0                	not    eax
c000ddc6:	c1 ff 1f             	sar    edi,0x1f
c000ddc9:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000ddcf:	89 fe                	mov    esi,edi
c000ddd1:	f7 d6                	not    esi
c000ddd3:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddd9:	5e                   	pop    esi
c000ddda:	5f                   	pop    edi
c000dddb:	c3                   	ret    

c000dddc <LogicalDisk::read(unsigned long long, int, void*)>:
c000dddc:	57                   	push   edi
c000dddd:	56                   	push   esi
c000ddde:	53                   	push   ebx
c000dddf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dde3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dde7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddf5:	77 41                	ja     c000de38 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddf7:	99                   	cdq    
c000ddf8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddfe:	01 c8                	add    eax,ecx
c000de00:	11 da                	adc    edx,ebx
c000de02:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de08:	19 d7                	sbb    edi,edx
c000de0a:	72 33                	jb     c000de3f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de0c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de12:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de1c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de20:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de30:	5b                   	pop    ebx
c000de31:	5e                   	pop    esi
c000de32:	5f                   	pop    edi
c000de33:	e9 c6 0a 00 00       	jmp    c000e8fe <VCache::read(unsigned long long, int, void*)>
c000de38:	b8 05 00 00 00       	mov    eax,0x5
c000de3d:	eb 05                	jmp    c000de44 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de3f:	b8 07 00 00 00       	mov    eax,0x7
c000de44:	5b                   	pop    ebx
c000de45:	5e                   	pop    esi
c000de46:	5f                   	pop    edi
c000de47:	c3                   	ret    

c000de48 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de48:	57                   	push   edi
c000de49:	56                   	push   esi
c000de4a:	53                   	push   ebx
c000de4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de61:	77 41                	ja     c000dea4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de63:	99                   	cdq    
c000de64:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de6a:	01 c8                	add    eax,ecx
c000de6c:	11 da                	adc    edx,ebx
c000de6e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de74:	19 d7                	sbb    edi,edx
c000de76:	72 33                	jb     c000deab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de78:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de7e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de88:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de8c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de9c:	5b                   	pop    ebx
c000de9d:	5e                   	pop    esi
c000de9e:	5f                   	pop    edi
c000de9f:	e9 6c 09 00 00       	jmp    c000e810 <VCache::write(unsigned long long, int, void*)>
c000dea4:	b8 05 00 00 00       	mov    eax,0x5
c000dea9:	eb 05                	jmp    c000deb0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000deab:	b8 07 00 00 00       	mov    eax,0x7
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	5f                   	pop    edi
c000deb3:	c3                   	ret    

c000deb4 <Mouse::Mouse(char const*)>:
c000deb4:	83 ec 0c             	sub    esp,0xc
c000deb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debb:	83 ec 08             	sub    esp,0x8
c000debe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec2:	50                   	push   eax
c000dec3:	e8 ca ec ff ff       	call   c000cb92 <Device::Device(char const*)>
c000dec8:	83 c4 10             	add    esp,0x10
c000decb:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c000ded0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded4:	89 10                	mov    DWORD PTR [eax],edx
c000ded6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deda:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dee4:	90                   	nop
c000dee5:	83 c4 0c             	add    esp,0xc
c000dee8:	c3                   	ret    
c000dee9:	90                   	nop
c000deea:	66 90                	xchg   ax,ax

c000deec <Mouse::~Mouse()>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	ba 80 1d 02 c0       	mov    edx,0xc0021d80
c000def4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def8:	89 10                	mov    DWORD PTR [eax],edx
c000defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defe:	83 ec 0c             	sub    esp,0xc
c000df01:	50                   	push   eax
c000df02:	e8 f5 e9 ff ff       	call   c000c8fc <Device::~Device()>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <Mouse::~Mouse()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	83 ec 0c             	sub    esp,0xc
c000df16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df1a:	e8 cd ff ff ff       	call   c000deec <Mouse::~Mouse()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	68 58 01 00 00       	push   0x158
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	e8 e5 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	c3                   	ret    

c000df3a <NIC::getMAC()>:
c000df3a:	31 c0                	xor    eax,eax
c000df3c:	31 d2                	xor    edx,edx
c000df3e:	c3                   	ret    
c000df3f:	90                   	nop

c000df40 <NIC::write(int, unsigned char*, int*)>:
c000df40:	b8 01 00 00 00       	mov    eax,0x1
c000df45:	c3                   	ret    

c000df46 <NIC::NIC(char const*)>:
c000df46:	83 ec 0c             	sub    esp,0xc
c000df49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4d:	83 ec 08             	sub    esp,0x8
c000df50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df54:	50                   	push   eax
c000df55:	e8 38 ec ff ff       	call   c000cb92 <Device::Device(char const*)>
c000df5a:	83 c4 10             	add    esp,0x10
c000df5d:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df66:	89 10                	mov    DWORD PTR [eax],edx
c000df68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df76:	90                   	nop
c000df77:	83 c4 0c             	add    esp,0xc
c000df7a:	c3                   	ret    
c000df7b:	90                   	nop

c000df7c <NIC::~NIC()>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	ba ac 1d 02 c0       	mov    edx,0xc0021dac
c000df84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df88:	89 10                	mov    DWORD PTR [eax],edx
c000df8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	50                   	push   eax
c000df92:	e8 65 e9 ff ff       	call   c000c8fc <Device::~Device()>
c000df97:	83 c4 10             	add    esp,0x10
c000df9a:	90                   	nop
c000df9b:	83 c4 0c             	add    esp,0xc
c000df9e:	c3                   	ret    
c000df9f:	90                   	nop

c000dfa0 <NIC::~NIC()>:
c000dfa0:	83 ec 0c             	sub    esp,0xc
c000dfa3:	83 ec 0c             	sub    esp,0xc
c000dfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfaa:	e8 cd ff ff ff       	call   c000df7c <NIC::~NIC()>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	83 ec 08             	sub    esp,0x8
c000dfb5:	68 58 01 00 00       	push   0x158
c000dfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbe:	e8 55 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	83 c4 0c             	add    esp,0xc
c000dfc9:	c3                   	ret    

c000dfca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfca:	55                   	push   ebp
c000dfcb:	57                   	push   edi
c000dfcc:	56                   	push   esi
c000dfcd:	53                   	push   ebx
c000dfce:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfd4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfdb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfe2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfe9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dff0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dff4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dff8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfff:	e8 8a ec ff ff       	call   c000cc8e <Device::getName()>
c000e004:	5a                   	pop    edx
c000e005:	59                   	pop    ecx
c000e006:	50                   	push   eax
c000e007:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e00b:	55                   	push   ebp
c000e00c:	e8 2f 26 ff ff       	call   c0000640 <strcpy>
c000e011:	5b                   	pop    ebx
c000e012:	58                   	pop    eax
c000e013:	68 d8 1d 02 c0       	push   0xc0021dd8
c000e018:	55                   	push   ebp
c000e019:	e8 22 28 ff ff       	call   c0000840 <strcat>
c000e01e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e025:	e8 8c 9a ff ff       	call   c0007ab6 <malloc>
c000e02a:	83 c4 0c             	add    esp,0xc
c000e02d:	89 c3                	mov    ebx,eax
c000e02f:	57                   	push   edi
c000e030:	56                   	push   esi
c000e031:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e039:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e040:	55                   	push   ebp
c000e041:	50                   	push   eax
c000e042:	e8 59 fb ff ff       	call   c000dba0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e047:	83 c4 14             	add    esp,0x14
c000e04a:	53                   	push   ebx
c000e04b:	e8 10 fc ff ff       	call   c000dc60 <LogicalDisk::assignDriveLetter()>
c000e050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e053:	e8 c2 fc ff ff       	call   c000dd1a <LogicalDisk::mount()>
c000e058:	58                   	pop    eax
c000e059:	5a                   	pop    edx
c000e05a:	53                   	push   ebx
c000e05b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e062:	e8 93 e9 ff ff       	call   c000c9fa <Device::addChild(Device*)>
c000e067:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e06d:	5b                   	pop    ebx
c000e06e:	5e                   	pop    esi
c000e06f:	5f                   	pop    edi
c000e070:	5d                   	pop    ebp
c000e071:	c3                   	ret    

c000e072 <createPartitionsForDisk(PhysicalDisk*)>:
c000e072:	55                   	push   ebp
c000e073:	57                   	push   edi
c000e074:	56                   	push   esi
c000e075:	53                   	push   ebx
c000e076:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e07c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e083:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e089:	3d 00 02 00 00       	cmp    eax,0x200
c000e08e:	74 27                	je     c000e0b7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e090:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e096:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e09c:	83 ec 10             	sub    esp,0x10
c000e09f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0a3:	99                   	cdq    
c000e0a4:	c1 e6 0a             	shl    esi,0xa
c000e0a7:	52                   	push   edx
c000e0a8:	89 fd                	mov    ebp,edi
c000e0aa:	50                   	push   eax
c000e0ab:	55                   	push   ebp
c000e0ac:	56                   	push   esi
c000e0ad:	e8 7e 16 01 00       	call   c001f730 <__udivdi3>
c000e0b2:	e9 b9 00 00 00       	jmp    c000e170 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0b7:	83 ec 0c             	sub    esp,0xc
c000e0ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0bc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0c0:	56                   	push   esi
c000e0c1:	6a 01                	push   0x1
c000e0c3:	6a 00                	push   0x0
c000e0c5:	6a 00                	push   0x0
c000e0c7:	53                   	push   ebx
c000e0c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0cb:	83 c4 20             	add    esp,0x20
c000e0ce:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0d6:	75 0a                	jne    c000e0e2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0d8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0e0:	74 2c                	je     c000e10e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0f4:	83 ec 10             	sub    esp,0x10
c000e0f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0fb:	89 f7                	mov    edi,esi
c000e0fd:	c1 e0 0a             	shl    eax,0xa
c000e100:	c1 ff 1f             	sar    edi,0x1f
c000e103:	57                   	push   edi
c000e104:	56                   	push   esi
c000e105:	52                   	push   edx
c000e106:	50                   	push   eax
c000e107:	e8 24 16 01 00       	call   c001f730 <__udivdi3>
c000e10c:	eb 62                	jmp    c000e170 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e10e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e115:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e11c:	89 cf                	mov    edi,ecx
c000e11e:	83 e2 7f             	and    edx,0x7f
c000e121:	83 e7 7f             	and    edi,0x7f
c000e124:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e12b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e12e:	83 e0 7f             	and    eax,0x7f
c000e131:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e134:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e13b:	83 e0 7f             	and    eax,0x7f
c000e13e:	01 d0                	add    eax,edx
c000e140:	89 c5                	mov    ebp,eax
c000e142:	84 c0                	test   al,al
c000e144:	74 41                	je     c000e187 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e146:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e14c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e152:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e158:	83 ec 10             	sub    esp,0x10
c000e15b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e15f:	89 f7                	mov    edi,esi
c000e161:	c1 e0 0a             	shl    eax,0xa
c000e164:	c1 ff 1f             	sar    edi,0x1f
c000e167:	57                   	push   edi
c000e168:	56                   	push   esi
c000e169:	52                   	push   edx
c000e16a:	50                   	push   eax
c000e16b:	e8 c0 15 01 00       	call   c001f730 <__udivdi3>
c000e170:	83 c4 14             	add    esp,0x14
c000e173:	52                   	push   edx
c000e174:	50                   	push   eax
c000e175:	6a 00                	push   0x0
c000e177:	6a 00                	push   0x0
c000e179:	53                   	push   ebx
c000e17a:	e8 4b fe ff ff       	call   c000dfca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e17f:	83 c4 20             	add    esp,0x20
c000e182:	e9 73 01 00 00       	jmp    c000e2fa <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e187:	89 f0                	mov    eax,esi
c000e189:	31 c9                	xor    ecx,ecx
c000e18b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e192:	75 02                	jne    c000e196 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e194:	89 cd                	mov    ebp,ecx
c000e196:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e19d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e1a4:	c1 e2 08             	shl    edx,0x8
c000e1a7:	c1 e6 10             	shl    esi,0x10
c000e1aa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1b2:	09 f2                	or     edx,esi
c000e1b4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1bc:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1c3:	83 c0 10             	add    eax,0x10
c000e1c6:	09 f2                	or     edx,esi
c000e1c8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1cf:	c1 e6 18             	shl    esi,0x18
c000e1d2:	09 f2                	or     edx,esi
c000e1d4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1db:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1df:	c1 e6 10             	shl    esi,0x10
c000e1e2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1e9:	c1 e2 08             	shl    edx,0x8
c000e1ec:	09 f2                	or     edx,esi
c000e1ee:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1f5:	09 f2                	or     edx,esi
c000e1f7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1fe:	c1 e6 18             	shl    esi,0x18
c000e201:	09 f2                	or     edx,esi
c000e203:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e207:	41                   	inc    ecx
c000e208:	83 f9 04             	cmp    ecx,0x4
c000e20b:	0f 85 7a ff ff ff    	jne    c000e18b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e215:	83 f0 01             	xor    eax,0x1
c000e218:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e21c:	75 4f                	jne    c000e26d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e222:	83 f0 01             	xor    eax,0x1
c000e225:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e229:	75 42                	jne    c000e26d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e22b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e233:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e23b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e241:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e247:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e24d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e251:	89 f7                	mov    edi,esi
c000e253:	c1 e0 0a             	shl    eax,0xa
c000e256:	c1 ff 1f             	sar    edi,0x1f
c000e259:	57                   	push   edi
c000e25a:	56                   	push   esi
c000e25b:	52                   	push   edx
c000e25c:	50                   	push   eax
c000e25d:	e8 ce 14 01 00       	call   c001f730 <__udivdi3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e269:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e26d:	89 e8                	mov    eax,ebp
c000e26f:	0f b6 e8             	movzx  ebp,al
c000e272:	85 ed                	test   ebp,ebp
c000e274:	74 50                	je     c000e2c6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e27a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e27e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e282:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e286:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e28a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e28e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e292:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e29a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2a2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2a6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2aa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2ae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2b6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2ba:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2be:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2c2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2c6:	31 ed                	xor    ebp,ebp
c000e2c8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2d0:	89 f8                	mov    eax,edi
c000e2d2:	09 f0                	or     eax,esi
c000e2d4:	74 1e                	je     c000e2f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2de:	89 d1                	mov    ecx,edx
c000e2e0:	09 c1                	or     ecx,eax
c000e2e2:	74 10                	je     c000e2f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	57                   	push   edi
c000e2e8:	56                   	push   esi
c000e2e9:	52                   	push   edx
c000e2ea:	50                   	push   eax
c000e2eb:	53                   	push   ebx
c000e2ec:	e8 d9 fc ff ff       	call   c000dfca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2f1:	83 c4 20             	add    esp,0x20
c000e2f4:	45                   	inc    ebp
c000e2f5:	83 fd 04             	cmp    ebp,0x4
c000e2f8:	75 ce                	jne    c000e2c8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2fa:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e300:	5b                   	pop    ebx
c000e301:	5e                   	pop    esi
c000e302:	5f                   	pop    edi
c000e303:	5d                   	pop    ebp
c000e304:	c3                   	ret    
c000e305:	66 90                	xchg   ax,ax
c000e307:	90                   	nop

c000e308 <Serial::Serial(char const*)>:
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	83 ec 08             	sub    esp,0x8
c000e312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e316:	50                   	push   eax
c000e317:	e8 76 e8 ff ff       	call   c000cb92 <Device::Device(char const*)>
c000e31c:	83 c4 10             	add    esp,0x10
c000e31f:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c000e324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e328:	89 10                	mov    DWORD PTR [eax],edx
c000e32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e338:	90                   	nop
c000e339:	83 c4 0c             	add    esp,0xc
c000e33c:	c3                   	ret    
c000e33d:	90                   	nop
c000e33e:	66 90                	xchg   ax,ax

c000e340 <Serial::~Serial()>:
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c000e348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34c:	89 10                	mov    DWORD PTR [eax],edx
c000e34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	50                   	push   eax
c000e356:	e8 a1 e5 ff ff       	call   c000c8fc <Device::~Device()>
c000e35b:	83 c4 10             	add    esp,0x10
c000e35e:	90                   	nop
c000e35f:	83 c4 0c             	add    esp,0xc
c000e362:	c3                   	ret    
c000e363:	90                   	nop

c000e364 <Serial::~Serial()>:
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	83 ec 0c             	sub    esp,0xc
c000e36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36e:	e8 cd ff ff ff       	call   c000e340 <Serial::~Serial()>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	83 ec 08             	sub    esp,0x8
c000e379:	68 58 01 00 00       	push   0x158
c000e37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e382:	e8 91 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e387:	83 c4 10             	add    esp,0x10
c000e38a:	83 c4 0c             	add    esp,0xc
c000e38d:	c3                   	ret    
c000e38e:	66 90                	xchg   ax,ax

c000e390 <Timer::Timer(char const*)>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	83 ec 08             	sub    esp,0x8
c000e39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39e:	50                   	push   eax
c000e39f:	e8 ee e7 ff ff       	call   c000cb92 <Device::Device(char const*)>
c000e3a4:	83 c4 10             	add    esp,0x10
c000e3a7:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c000e3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b0:	89 10                	mov    DWORD PTR [eax],edx
c000e3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3c0:	90                   	nop
c000e3c1:	83 c4 0c             	add    esp,0xc
c000e3c4:	c3                   	ret    
c000e3c5:	90                   	nop
c000e3c6:	66 90                	xchg   ax,ax

c000e3c8 <Timer::~Timer()>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	ba 30 1e 02 c0       	mov    edx,0xc0021e30
c000e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d4:	89 10                	mov    DWORD PTR [eax],edx
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	83 ec 0c             	sub    esp,0xc
c000e3dd:	50                   	push   eax
c000e3de:	e8 19 e5 ff ff       	call   c000c8fc <Device::~Device()>
c000e3e3:	83 c4 10             	add    esp,0x10
c000e3e6:	90                   	nop
c000e3e7:	83 c4 0c             	add    esp,0xc
c000e3ea:	c3                   	ret    
c000e3eb:	90                   	nop

c000e3ec <Timer::~Timer()>:
c000e3ec:	83 ec 0c             	sub    esp,0xc
c000e3ef:	83 ec 0c             	sub    esp,0xc
c000e3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3f6:	e8 cd ff ff ff       	call   c000e3c8 <Timer::~Timer()>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	83 ec 08             	sub    esp,0x8
c000e401:	68 5c 01 00 00       	push   0x15c
c000e406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40a:	e8 09 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	83 c4 0c             	add    esp,0xc
c000e415:	c3                   	ret    

c000e416 <Timer::read()>:
c000e416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e420:	c3                   	ret    

c000e421 <setupTimer(int)>:
c000e421:	53                   	push   ebx
c000e422:	83 ec 14             	sub    esp,0x14
c000e425:	68 5c 01 00 00       	push   0x15c
c000e42a:	e8 87 96 ff ff       	call   c0007ab6 <malloc>
c000e42f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e432:	89 c3                	mov    ebx,eax
c000e434:	e8 5b 0b 01 00       	call   c001ef94 <PIT::PIT()>
c000e439:	58                   	pop    eax
c000e43a:	5a                   	pop    edx
c000e43b:	53                   	push   ebx
c000e43c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e442:	e8 b3 e5 ff ff       	call   c000c9fa <Device::addChild(Device*)>
c000e447:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e449:	6a 00                	push   0x0
c000e44b:	6a 00                	push   0x0
c000e44d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e451:	53                   	push   ebx
c000e452:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e455:	89 d8                	mov    eax,ebx
c000e457:	83 c4 28             	add    esp,0x28
c000e45a:	5b                   	pop    ebx
c000e45b:	c3                   	ret    

c000e45c <timerHandler(unsigned int)>:
c000e45c:	56                   	push   esi
c000e45d:	53                   	push   ebx
c000e45e:	51                   	push   ecx
c000e45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e463:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e469:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e470:	0f 84 4a 01 00 00    	je     c000e5c0 <timerHandler(unsigned int)+0x164>
c000e476:	fa                   	cli    
c000e477:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e47d:	83 ec 0c             	sub    esp,0xc
c000e480:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e486:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e48b:	e8 70 18 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	84 c0                	test   al,al
c000e495:	0f 85 a1 00 00 00    	jne    c000e53c <timerHandler(unsigned int)+0xe0>
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4a3:	e8 74 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	89 c6                	mov    esi,eax
c000e4ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4b8:	e8 5f 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4bd:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4c4:	89 c3                	mov    ebx,eax
c000e4c6:	e8 59 18 01 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4ce:	83 c4 10             	add    esp,0x10
c000e4d1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4d7:	77 23                	ja     c000e4fc <timerHandler(unsigned int)+0xa0>
c000e4d9:	83 ec 0c             	sub    esp,0xc
c000e4dc:	53                   	push   ebx
c000e4dd:	e8 ee 80 00 00       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c000e4e2:	83 c4 10             	add    esp,0x10
c000e4e5:	39 de                	cmp    esi,ebx
c000e4e7:	75 27                	jne    c000e510 <timerHandler(unsigned int)+0xb4>
c000e4e9:	83 ec 0c             	sub    esp,0xc
c000e4ec:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f1:	e8 26 18 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4f6:	89 c6                	mov    esi,eax
c000e4f8:	eb 12                	jmp    c000e50c <timerHandler(unsigned int)+0xb0>
c000e4fa:	66 90                	xchg   ax,ax
c000e4fc:	52                   	push   edx
c000e4fd:	52                   	push   edx
c000e4fe:	53                   	push   ebx
c000e4ff:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e504:	e8 d7 18 01 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e509:	8d 76 00             	lea    esi,[esi+0x0]
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	90                   	nop
c000e510:	83 ec 0c             	sub    esp,0xc
c000e513:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e518:	e8 e3 17 01 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e51d:	83 c4 10             	add    esp,0x10
c000e520:	84 c0                	test   al,al
c000e522:	75 18                	jne    c000e53c <timerHandler(unsigned int)+0xe0>
c000e524:	83 ec 0c             	sub    esp,0xc
c000e527:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e52c:	e8 eb 17 01 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e531:	83 c4 10             	add    esp,0x10
c000e534:	39 f0                	cmp    eax,esi
c000e536:	0f 85 74 ff ff ff    	jne    c000e4b0 <timerHandler(unsigned int)+0x54>
c000e53c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e541:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e545:	74 41                	je     c000e588 <timerHandler(unsigned int)+0x12c>
c000e547:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e54e:	74 38                	je     c000e588 <timerHandler(unsigned int)+0x12c>
c000e550:	fa                   	cli    
c000e551:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e557:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e55c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e562:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e565:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e56b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e56e:	72 08                	jb     c000e578 <timerHandler(unsigned int)+0x11c>
c000e570:	e8 43 7b 00 00       	call   c00160b8 <schedule()>
c000e575:	8d 76 00             	lea    esi,[esi+0x0]
c000e578:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e57d:	48                   	dec    eax
c000e57e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e583:	75 03                	jne    c000e588 <timerHandler(unsigned int)+0x12c>
c000e585:	fb                   	sti    
c000e586:	66 90                	xchg   ax,ax
c000e588:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e58d:	48                   	dec    eax
c000e58e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e593:	75 1b                	jne    c000e5b0 <timerHandler(unsigned int)+0x154>
c000e595:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e59c:	74 12                	je     c000e5b0 <timerHandler(unsigned int)+0x154>
c000e59e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5a8:	e8 0b 7b 00 00       	call   c00160b8 <schedule()>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5b5:	48                   	dec    eax
c000e5b6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5bb:	75 03                	jne    c000e5c0 <timerHandler(unsigned int)+0x164>
c000e5bd:	fb                   	sti    
c000e5be:	66 90                	xchg   ax,ax
c000e5c0:	58                   	pop    eax
c000e5c1:	5b                   	pop    ebx
c000e5c2:	5e                   	pop    esi
c000e5c3:	c3                   	ret    

c000e5c4 <VCache::VCache(PhysicalDisk*)>:
c000e5c4:	53                   	push   ebx
c000e5c5:	83 ec 18             	sub    esp,0x18
c000e5c8:	ba 60 1e 02 c0       	mov    edx,0xc0021e60
c000e5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d1:	89 10                	mov    DWORD PTR [eax],edx
c000e5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e606:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e624:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e62b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e636:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e646:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e655:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e65d:	83 ec 0c             	sub    esp,0xc
c000e660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e664:	e8 4d 94 ff ff       	call   c0007ab6 <malloc>
c000e669:	83 c4 10             	add    esp,0x10
c000e66c:	89 c3                	mov    ebx,eax
c000e66e:	83 ec 0c             	sub    esp,0xc
c000e671:	53                   	push   ebx
c000e672:	e8 dd 77 00 00       	call   c0015e54 <Mutex::Mutex()>
c000e677:	83 c4 10             	add    esp,0x10
c000e67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e685:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e689:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e690:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e69b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6d4:	05 00 02 00 00       	add    eax,0x200
c000e6d9:	c1 e0 03             	shl    eax,0x3
c000e6dc:	83 ec 0c             	sub    esp,0xc
c000e6df:	50                   	push   eax
c000e6e0:	e8 d1 93 ff ff       	call   c0007ab6 <malloc>
c000e6e5:	83 c4 10             	add    esp,0x10
c000e6e8:	89 c2                	mov    edx,eax
c000e6ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e700:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e704:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e708:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e70e:	89 d0                	mov    eax,edx
c000e710:	c1 e0 02             	shl    eax,0x2
c000e713:	01 d0                	add    eax,edx
c000e715:	c1 e0 04             	shl    eax,0x4
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	50                   	push   eax
c000e71c:	e8 95 93 ff ff       	call   c0007ab6 <malloc>
c000e721:	83 c4 10             	add    esp,0x10
c000e724:	89 c2                	mov    edx,eax
c000e726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e72d:	90                   	nop
c000e72e:	83 c4 18             	add    esp,0x18
c000e731:	5b                   	pop    ebx
c000e732:	c3                   	ret    
c000e733:	90                   	nop

c000e734 <VCache::invalidateReadBuffer()>:
c000e734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e738:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e73e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e742:	c3                   	ret    
c000e743:	90                   	nop

c000e744 <VCache::writeWriteBuffer()>:
c000e744:	53                   	push   ebx
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e74c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e750:	74 1e                	je     c000e770 <VCache::writeWriteBuffer()+0x2c>
c000e752:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e755:	83 ec 0c             	sub    esp,0xc
c000e758:	8b 10                	mov    edx,DWORD PTR [eax]
c000e75a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e75d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e760:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e763:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e766:	50                   	push   eax
c000e767:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e76a:	83 c4 20             	add    esp,0x20
c000e76d:	8d 76 00             	lea    esi,[esi+0x0]
c000e770:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e777:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e77e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e782:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e789:	83 c4 08             	add    esp,0x8
c000e78c:	5b                   	pop    ebx
c000e78d:	c3                   	ret    
c000e78e:	66 90                	xchg   ax,ax

c000e790 <VCache::~VCache()>:
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	ba 60 1e 02 c0       	mov    edx,0xc0021e60
c000e798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79c:	89 10                	mov    DWORD PTR [eax],edx
c000e79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7a5:	0f b6 c0             	movzx  eax,al
c000e7a8:	85 c0                	test   eax,eax
c000e7aa:	74 10                	je     c000e7bc <VCache::~VCache()+0x2c>
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b3:	e8 8c ff ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c000e7b8:	83 c4 10             	add    esp,0x10
c000e7bb:	90                   	nop
c000e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7c3:	83 ec 0c             	sub    esp,0xc
c000e7c6:	50                   	push   eax
c000e7c7:	e8 fa 92 ff ff       	call   c0007ac6 <free>
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	50                   	push   eax
c000e7da:	e8 e7 92 ff ff       	call   c0007ac6 <free>
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	90                   	nop
c000e7e3:	83 c4 0c             	add    esp,0xc
c000e7e6:	c3                   	ret    
c000e7e7:	90                   	nop

c000e7e8 <VCache::~VCache()>:
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	83 ec 0c             	sub    esp,0xc
c000e7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f2:	e8 99 ff ff ff       	call   c000e790 <VCache::~VCache()>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	83 ec 08             	sub    esp,0x8
c000e7fd:	6a 44                	push   0x44
c000e7ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e803:	e8 10 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e808:	83 c4 10             	add    esp,0x10
c000e80b:	83 c4 0c             	add    esp,0xc
c000e80e:	c3                   	ret    
c000e80f:	90                   	nop

c000e810 <VCache::write(unsigned long long, int, void*)>:
c000e810:	55                   	push   ebp
c000e811:	57                   	push   edi
c000e812:	56                   	push   esi
c000e813:	53                   	push   ebx
c000e814:	83 ec 1c             	sub    esp,0x1c
c000e817:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e81b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e81f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e827:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e82b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e82f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e833:	74 07                	je     c000e83c <VCache::write(unsigned long long, int, void*)+0x2c>
c000e835:	53                   	push   ebx
c000e836:	e8 f9 fe ff ff       	call   c000e734 <VCache::invalidateReadBuffer()>
c000e83b:	58                   	pop    eax
c000e83c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e840:	74 62                	je     c000e8a4 <VCache::write(unsigned long long, int, void*)+0x94>
c000e842:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e845:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e849:	99                   	cdq    
c000e84a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e84e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e851:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e854:	31 c1                	xor    ecx,eax
c000e856:	89 d0                	mov    eax,edx
c000e858:	89 ca                	mov    edx,ecx
c000e85a:	31 e8                	xor    eax,ebp
c000e85c:	09 c2                	or     edx,eax
c000e85e:	75 38                	jne    c000e898 <VCache::write(unsigned long long, int, void*)+0x88>
c000e860:	83 ff 01             	cmp    edi,0x1
c000e863:	75 33                	jne    c000e898 <VCache::write(unsigned long long, int, void*)+0x88>
c000e865:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e868:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e86c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e872:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e875:	0f af c8             	imul   ecx,eax
c000e878:	01 cf                	add    edi,ecx
c000e87a:	89 c1                	mov    ecx,eax
c000e87c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e87e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e881:	40                   	inc    eax
c000e882:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e885:	83 f8 50             	cmp    eax,0x50
c000e888:	75 6a                	jne    c000e8f4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e88a:	83 ec 0c             	sub    esp,0xc
c000e88d:	53                   	push   ebx
c000e88e:	e8 b1 fe ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c000e893:	83 c4 10             	add    esp,0x10
c000e896:	eb 5c                	jmp    c000e8f4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	53                   	push   ebx
c000e89c:	e8 a3 fe ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8a7:	83 ff 4f             	cmp    edi,0x4f
c000e8aa:	7f 20                	jg     c000e8cc <VCache::write(unsigned long long, int, void*)+0xbc>
c000e8ac:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8b3:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8b6:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8b9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8bd:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8c0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8c8:	eb 2a                	jmp    c000e8f4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8ca:	66 90                	xchg   ax,ax
c000e8cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8d2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8d6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8da:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8de:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8e6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8e9:	83 c4 1c             	add    esp,0x1c
c000e8ec:	5b                   	pop    ebx
c000e8ed:	5e                   	pop    esi
c000e8ee:	5f                   	pop    edi
c000e8ef:	5d                   	pop    ebp
c000e8f0:	ff e0                	jmp    eax
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	83 c4 1c             	add    esp,0x1c
c000e8f7:	31 c0                	xor    eax,eax
c000e8f9:	5b                   	pop    ebx
c000e8fa:	5e                   	pop    esi
c000e8fb:	5f                   	pop    edi
c000e8fc:	5d                   	pop    ebp
c000e8fd:	c3                   	ret    

c000e8fe <VCache::read(unsigned long long, int, void*)>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e90d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e911:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e915:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e919:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e91d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e921:	74 0d                	je     c000e930 <VCache::read(unsigned long long, int, void*)+0x32>
c000e923:	83 ec 0c             	sub    esp,0xc
c000e926:	57                   	push   edi
c000e927:	e8 18 fe ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c000e92c:	83 c4 10             	add    esp,0x10
c000e92f:	90                   	nop
c000e930:	83 fd 01             	cmp    ebp,0x1
c000e933:	0f 85 93 00 00 00    	jne    c000e9cc <VCache::read(unsigned long long, int, void*)+0xce>
c000e939:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e93c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e93f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e946:	0f 85 80 00 00 00    	jne    c000e9cc <VCache::read(unsigned long long, int, void*)+0xce>
c000e94c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e94f:	89 e9                	mov    ecx,ebp
c000e951:	f7 d9                	neg    ecx
c000e953:	89 c8                	mov    eax,ecx
c000e955:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e959:	c1 f8 1f             	sar    eax,0x1f
c000e95c:	21 d9                	and    ecx,ebx
c000e95e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e962:	89 c8                	mov    eax,ecx
c000e964:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e968:	21 f1                	and    ecx,esi
c000e96a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e96e:	89 ca                	mov    edx,ecx
c000e970:	74 2e                	je     c000e9a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e972:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e975:	75 29                	jne    c000e9a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e977:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e97a:	75 24                	jne    c000e9a0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e97c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e97f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e985:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e988:	8d 70 ff             	lea    esi,[eax-0x1]
c000e98b:	21 f3                	and    ebx,esi
c000e98d:	0f af d9             	imul   ebx,ecx
c000e990:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e993:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e997:	89 de                	mov    esi,ebx
c000e999:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e99b:	31 c0                	xor    eax,eax
c000e99d:	eb 61                	jmp    c000ea00 <VCache::read(unsigned long long, int, void*)+0x102>
c000e99f:	90                   	nop
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9a7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9ab:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9ae:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e9b3:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9b6:	55                   	push   ebp
c000e9b7:	52                   	push   edx
c000e9b8:	50                   	push   eax
c000e9b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9bd:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9c0:	83 c4 20             	add    esp,0x20
c000e9c3:	85 c0                	test   eax,eax
c000e9c5:	75 39                	jne    c000ea00 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9c7:	eb b3                	jmp    c000e97c <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9cc:	83 ec 0c             	sub    esp,0xc
c000e9cf:	57                   	push   edi
c000e9d0:	e8 5f fd ff ff       	call   c000e734 <VCache::invalidateReadBuffer()>
c000e9d5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9de:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9e6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9ea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9f2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9f5:	83 c4 2c             	add    esp,0x2c
c000e9f8:	5b                   	pop    ebx
c000e9f9:	5e                   	pop    esi
c000e9fa:	5f                   	pop    edi
c000e9fb:	5d                   	pop    ebp
c000e9fc:	ff e0                	jmp    eax
c000e9fe:	66 90                	xchg   ax,ax
c000ea00:	83 c4 1c             	add    esp,0x1c
c000ea03:	5b                   	pop    ebx
c000ea04:	5e                   	pop    esi
c000ea05:	5f                   	pop    edi
c000ea06:	5d                   	pop    ebp
c000ea07:	c3                   	ret    

c000ea08 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea08:	55                   	push   ebp
c000ea09:	57                   	push   edi
c000ea0a:	56                   	push   esi
c000ea0b:	53                   	push   ebx
c000ea0c:	83 ec 1c             	sub    esp,0x1c
c000ea0f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea17:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea1b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea27:	01 df                	add    edi,ebx
c000ea29:	39 fb                	cmp    ebx,edi
c000ea2b:	7d 1f                	jge    c000ea4c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea2d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea31:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea35:	7d 12                	jge    c000ea49 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea37:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea3d:	53                   	push   ebx
c000ea3e:	55                   	push   ebp
c000ea3f:	45                   	inc    ebp
c000ea40:	56                   	push   esi
c000ea41:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea44:	83 c4 10             	add    esp,0x10
c000ea47:	eb e8                	jmp    c000ea31 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea49:	43                   	inc    ebx
c000ea4a:	eb dd                	jmp    c000ea29 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea4c:	83 c4 1c             	add    esp,0x1c
c000ea4f:	5b                   	pop    ebx
c000ea50:	5e                   	pop    esi
c000ea51:	5f                   	pop    edi
c000ea52:	5d                   	pop    ebp
c000ea53:	c3                   	ret    

c000ea54 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea54:	55                   	push   ebp
c000ea55:	57                   	push   edi
c000ea56:	31 ff                	xor    edi,edi
c000ea58:	56                   	push   esi
c000ea59:	53                   	push   ebx
c000ea5a:	83 ec 1c             	sub    esp,0x1c
c000ea5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea65:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea6c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea75:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea79:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea7d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea80:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea84:	01 f9                	add    ecx,edi
c000ea86:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea8a:	7d 2f                	jge    c000eabb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea8c:	31 f6                	xor    esi,esi
c000ea8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea92:	01 f2                	add    edx,esi
c000ea94:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea98:	7d 1a                	jge    c000eab4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea9a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea9d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eaa0:	46                   	inc    esi
c000eaa1:	51                   	push   ecx
c000eaa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eaa6:	52                   	push   edx
c000eaa7:	55                   	push   ebp
c000eaa8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eab2:	eb da                	jmp    c000ea8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eab4:	47                   	inc    edi
c000eab5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eab9:	eb c5                	jmp    c000ea80 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eabb:	83 c4 1c             	add    esp,0x1c
c000eabe:	5b                   	pop    ebx
c000eabf:	5e                   	pop    esi
c000eac0:	5f                   	pop    edi
c000eac1:	5d                   	pop    ebp
c000eac2:	c3                   	ret    
c000eac3:	90                   	nop

c000eac4 <Video::blit(unsigned int*, int, int, int, int)>:
c000eac4:	55                   	push   ebp
c000eac5:	57                   	push   edi
c000eac6:	56                   	push   esi
c000eac7:	53                   	push   ebx
c000eac8:	83 ec 1c             	sub    esp,0x1c
c000eacb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eacf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ead3:	85 c0                	test   eax,eax
c000ead5:	79 02                	jns    c000ead9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ead7:	31 c0                	xor    eax,eax
c000ead9:	c1 e0 02             	shl    eax,0x2
c000eadc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eae4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eae8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eaec:	39 d8                	cmp    eax,ebx
c000eaee:	7e 49                	jle    c000eb39 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eaf0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eaf6:	7c 41                	jl     c000eb39 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eaf8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eafc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb04:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb08:	39 f9                	cmp    ecx,edi
c000eb0a:	7e 22                	jle    c000eb2e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb0c:	83 c5 04             	add    ebp,0x4
c000eb0f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb15:	7c 14                	jl     c000eb2b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb17:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb19:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb24:	56                   	push   esi
c000eb25:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb28:	83 c4 10             	add    esp,0x10
c000eb2b:	47                   	inc    edi
c000eb2c:	eb d2                	jmp    c000eb00 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb32:	43                   	inc    ebx
c000eb33:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb37:	eb ab                	jmp    c000eae4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb39:	83 c4 1c             	add    esp,0x1c
c000eb3c:	5b                   	pop    ebx
c000eb3d:	5e                   	pop    esi
c000eb3e:	5f                   	pop    edi
c000eb3f:	5d                   	pop    ebp
c000eb40:	c3                   	ret    
c000eb41:	90                   	nop

c000eb42 <Video::clearScreen(unsigned int)>:
c000eb42:	57                   	push   edi
c000eb43:	56                   	push   esi
c000eb44:	53                   	push   ebx
c000eb45:	31 db                	xor    ebx,ebx
c000eb47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb4b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb51:	7e 1f                	jle    c000eb72 <Video::clearScreen(unsigned int)+0x30>
c000eb53:	31 ff                	xor    edi,edi
c000eb55:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb5b:	7e 12                	jle    c000eb6f <Video::clearScreen(unsigned int)+0x2d>
c000eb5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb63:	53                   	push   ebx
c000eb64:	57                   	push   edi
c000eb65:	47                   	inc    edi
c000eb66:	56                   	push   esi
c000eb67:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	eb e6                	jmp    c000eb55 <Video::clearScreen(unsigned int)+0x13>
c000eb6f:	43                   	inc    ebx
c000eb70:	eb d9                	jmp    c000eb4b <Video::clearScreen(unsigned int)+0x9>
c000eb72:	5b                   	pop    ebx
c000eb73:	5e                   	pop    esi
c000eb74:	5f                   	pop    edi
c000eb75:	c3                   	ret    

c000eb76 <Video::putpixel(int, int, unsigned int)>:
c000eb76:	c7 44 24 04 68 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e68
c000eb7e:	e9 d0 2a 00 00       	jmp    c0011653 <KePanic(char const*)>
c000eb83:	90                   	nop

c000eb84 <Video::readPixelApprox(int, int)>:
c000eb84:	83 ec 18             	sub    esp,0x18
c000eb87:	68 89 1e 02 c0       	push   0xc0021e89
c000eb8c:	e8 c2 2a 00 00       	call   c0011653 <KePanic(char const*)>
c000eb91:	31 c0                	xor    eax,eax
c000eb93:	83 c4 1c             	add    esp,0x1c
c000eb96:	c3                   	ret    
c000eb97:	90                   	nop

c000eb98 <Video::Video(char const*)>:
c000eb98:	83 ec 0c             	sub    esp,0xc
c000eb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eba6:	50                   	push   eax
c000eba7:	e8 e6 df ff ff       	call   c000cb92 <Device::Device(char const*)>
c000ebac:	83 c4 10             	add    esp,0x10
c000ebaf:	ba 04 1f 02 c0       	mov    edx,0xc0021f04
c000ebb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb8:	89 10                	mov    DWORD PTR [eax],edx
c000ebba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebbe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebc8:	90                   	nop
c000ebc9:	83 c4 0c             	add    esp,0xc
c000ebcc:	c3                   	ret    
c000ebcd:	90                   	nop

c000ebce <Video::~Video()>:
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	ba 04 1f 02 c0       	mov    edx,0xc0021f04
c000ebd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebda:	89 10                	mov    DWORD PTR [eax],edx
c000ebdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	50                   	push   eax
c000ebe4:	e8 13 dd ff ff       	call   c000c8fc <Device::~Device()>
c000ebe9:	83 c4 10             	add    esp,0x10
c000ebec:	90                   	nop
c000ebed:	83 c4 0c             	add    esp,0xc
c000ebf0:	c3                   	ret    
c000ebf1:	90                   	nop

c000ebf2 <Video::~Video()>:
c000ebf2:	83 ec 0c             	sub    esp,0xc
c000ebf5:	83 ec 0c             	sub    esp,0xc
c000ebf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebfc:	e8 cd ff ff ff       	call   c000ebce <Video::~Video()>
c000ec01:	83 c4 10             	add    esp,0x10
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	68 64 01 00 00       	push   0x164
c000ec0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec10:	e8 03 bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ec15:	83 c4 10             	add    esp,0x10
c000ec18:	83 c4 0c             	add    esp,0xc
c000ec1b:	c3                   	ret    

c000ec1c <Video::isMonochrome()>:
c000ec1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec20:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec26:	c3                   	ret    
c000ec27:	90                   	nop

c000ec28 <Video::getWidth()>:
c000ec28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec32:	c3                   	ret    
c000ec33:	90                   	nop

c000ec34 <Video::getHeight()>:
c000ec34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec38:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec3e:	c3                   	ret    
c000ec3f:	90                   	nop

c000ec40 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec40:	55                   	push   ebp
c000ec41:	57                   	push   edi
c000ec42:	56                   	push   esi
c000ec43:	53                   	push   ebx
c000ec44:	83 ec 2c             	sub    esp,0x2c
c000ec47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec4b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec4f:	83 f8 01             	cmp    eax,0x1
c000ec52:	19 c9                	sbb    ecx,ecx
c000ec54:	31 db                	xor    ebx,ebx
c000ec56:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec5a:	89 cd                	mov    ebp,ecx
c000ec5c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec64:	f7 d5                	not    ebp
c000ec66:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec6c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec70:	01 d8                	add    eax,ebx
c000ec72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec76:	56                   	push   esi
c000ec77:	e8 b8 ff ff ff       	call   c000ec34 <Video::getHeight()>
c000ec7c:	59                   	pop    ecx
c000ec7d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec81:	7e 70                	jle    c000ecf3 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec87:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec8b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec96:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eca1:	89 f8                	mov    eax,edi
c000eca3:	83 c0 20             	add    eax,0x20
c000eca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ecaa:	56                   	push   esi
c000ecab:	e8 78 ff ff ff       	call   c000ec28 <Video::getWidth()>
c000ecb0:	5a                   	pop    edx
c000ecb1:	39 c7                	cmp    edi,eax
c000ecb3:	7d 34                	jge    c000ece9 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ecb5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecba:	74 05                	je     c000ecc1 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecbc:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecbe:	55                   	push   ebp
c000ecbf:	eb 0d                	jmp    c000ecce <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecc1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecc6:	74 12                	je     c000ecda <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecc8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecd2:	57                   	push   edi
c000ecd3:	56                   	push   esi
c000ecd4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecde:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ece2:	47                   	inc    edi
c000ece3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ece7:	75 c1                	jne    c000ecaa <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ece9:	43                   	inc    ebx
c000ecea:	83 fb 20             	cmp    ebx,0x20
c000eced:	0f 85 79 ff ff ff    	jne    c000ec6c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ecf3:	83 c4 2c             	add    esp,0x2c
c000ecf6:	5b                   	pop    ebx
c000ecf7:	5e                   	pop    esi
c000ecf8:	5f                   	pop    edi
c000ecf9:	5d                   	pop    ebp
c000ecfa:	c3                   	ret    
c000ecfb:	90                   	nop

c000ecfc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecfc:	55                   	push   ebp
c000ecfd:	57                   	push   edi
c000ecfe:	56                   	push   esi
c000ecff:	53                   	push   ebx
c000ed00:	83 ec 28             	sub    esp,0x28
c000ed03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed07:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed0b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed0f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed13:	c1 e6 08             	shl    esi,0x8
c000ed16:	01 c6                	add    esi,eax
c000ed18:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed1c:	c1 e0 08             	shl    eax,0x8
c000ed1f:	01 d0                	add    eax,edx
c000ed21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed29:	0f af c6             	imul   eax,esi
c000ed2c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed33:	50                   	push   eax
c000ed34:	e8 7d 8d ff ff       	call   c0007ab6 <malloc>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	89 c7                	mov    edi,eax
c000ed3e:	85 c0                	test   eax,eax
c000ed40:	75 10                	jne    c000ed52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	68 b4 1e 02 c0       	push   0xc0021eb4
c000ed4a:	e8 04 29 00 00       	call   c0011653 <KePanic(char const*)>
c000ed4f:	83 c4 10             	add    esp,0x10
c000ed52:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed56:	ba 12 00 00 00       	mov    edx,0x12
c000ed5b:	85 c0                	test   eax,eax
c000ed5d:	74 11                	je     c000ed70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed5f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed63:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed67:	c1 fa 03             	sar    edx,0x3
c000ed6a:	0f af d1             	imul   edx,ecx
c000ed6d:	83 c2 12             	add    edx,0x12
c000ed70:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed74:	74 04                	je     c000ed7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed76:	85 f6                	test   esi,esi
c000ed78:	75 12                	jne    c000ed8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed7a:	83 ec 0c             	sub    esp,0xc
c000ed7d:	68 c4 1e 02 c0       	push   0xc0021ec4
c000ed82:	e8 be bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed87:	e9 b8 00 00 00       	jmp    c000ee44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed8c:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed90:	83 f9 02             	cmp    ecx,0x2
c000ed93:	0f 85 96 00 00 00    	jne    c000ee2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed99:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed9e:	75 0e                	jne    c000edae <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eda0:	85 c0                	test   eax,eax
c000eda2:	75 0a                	jne    c000edae <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eda4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eda7:	83 e8 18             	sub    eax,0x18
c000edaa:	a8 f7                	test   al,0xf7
c000edac:	74 0a                	je     c000edb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	68 d9 1e 02 c0       	push   0xc0021ed9
c000edb6:	eb 7f                	jmp    c000ee37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edc0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edc8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000edcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edd4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edd8:	75 0c                	jne    c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edda:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eddf:	c1 e0 18             	shl    eax,0x18
c000ede2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ede6:	45                   	inc    ebp
c000ede7:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edec:	c1 e1 10             	shl    ecx,0x10
c000edef:	89 c8                	mov    eax,ecx
c000edf1:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edf6:	c1 e1 08             	shl    ecx,0x8
c000edf9:	09 c1                	or     ecx,eax
c000edfb:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edff:	09 c1                	or     ecx,eax
c000ee01:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee05:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee09:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee0d:	c1 f8 03             	sar    eax,0x3
c000ee10:	01 c2                	add    edx,eax
c000ee12:	89 e8                	mov    eax,ebp
c000ee14:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee18:	39 c6                	cmp    esi,eax
c000ee1a:	7f b0                	jg     c000edcc <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee1c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee27:	7e 22                	jle    c000ee4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee29:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee2d:	eb 99                	jmp    c000edc8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee2f:	50                   	push   eax
c000ee30:	50                   	push   eax
c000ee31:	51                   	push   ecx
c000ee32:	68 e7 1e 02 c0       	push   0xc0021ee7
c000ee37:	e8 09 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee3f:	e8 82 8c ff ff       	call   c0007ac6 <free>
c000ee44:	83 c4 10             	add    esp,0x10
c000ee47:	31 ff                	xor    edi,edi
c000ee49:	eb 0f                	jmp    c000ee5a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee4f:	89 30                	mov    DWORD PTR [eax],esi
c000ee51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee55:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee58:	89 30                	mov    DWORD PTR [eax],esi
c000ee5a:	83 c4 1c             	add    esp,0x1c
c000ee5d:	89 f8                	mov    eax,edi
c000ee5f:	5b                   	pop    ebx
c000ee60:	5e                   	pop    esi
c000ee61:	5f                   	pop    edi
c000ee62:	5d                   	pop    ebp
c000ee63:	c3                   	ret    

c000ee64 <Video::putTGA(int, int, unsigned char*, int)>:
c000ee64:	55                   	push   ebp
c000ee65:	57                   	push   edi
c000ee66:	56                   	push   esi
c000ee67:	53                   	push   ebx
c000ee68:	83 ec 28             	sub    esp,0x28
c000ee6b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee73:	50                   	push   eax
c000ee74:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee78:	50                   	push   eax
c000ee79:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee7d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee81:	56                   	push   esi
c000ee82:	e8 75 fe ff ff       	call   c000ecfc <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee87:	83 c4 20             	add    esp,0x20
c000ee8a:	85 c0                	test   eax,eax
c000ee8c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee90:	74 35                	je     c000eec7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee92:	89 c7                	mov    edi,eax
c000ee94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee98:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee9c:	39 d8                	cmp    eax,ebx
c000ee9e:	7e 27                	jle    c000eec7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eea0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eea8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eeac:	39 e8                	cmp    eax,ebp
c000eeae:	7e 14                	jle    c000eec4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eeb0:	8b 06                	mov    eax,DWORD PTR [esi]
c000eeb2:	83 c7 04             	add    edi,0x4
c000eeb5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eeb8:	53                   	push   ebx
c000eeb9:	55                   	push   ebp
c000eeba:	45                   	inc    ebp
c000eebb:	56                   	push   esi
c000eebc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eebf:	83 c4 10             	add    esp,0x10
c000eec2:	eb e0                	jmp    c000eea4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eec4:	43                   	inc    ebx
c000eec5:	eb cd                	jmp    c000ee94 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eec7:	83 c4 1c             	add    esp,0x1c
c000eeca:	5b                   	pop    ebx
c000eecb:	5e                   	pop    esi
c000eecc:	5f                   	pop    edi
c000eecd:	5d                   	pop    ebp
c000eece:	c3                   	ret    
c000eecf:	90                   	nop

c000eed0 <ACPI::close(int, int, void*)>:
c000eed0:	83 ec 1c             	sub    esp,0x1c
c000eed3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eedb:	74 0b                	je     c000eee8 <ACPI::close(int, int, void*)+0x18>
c000eedd:	b8 00 00 00 00       	mov    eax,0x0
c000eee2:	e9 99 00 00 00       	jmp    c000ef80 <ACPI::close(int, int, void*)+0xb0>
c000eee7:	90                   	nop
c000eee8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eeed:	75 29                	jne    c000ef18 <ACPI::close(int, int, void*)+0x48>
c000eeef:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eef4:	85 c0                	test   eax,eax
c000eef6:	74 08                	je     c000ef00 <ACPI::close(int, int, void*)+0x30>
c000eef8:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eefd:	ff d0                	call   eax
c000eeff:	90                   	nop
c000ef00:	83 ec 0c             	sub    esp,0xc
c000ef03:	68 48 1f 02 c0       	push   0xc0021f48
c000ef08:	e8 46 27 00 00       	call   c0011653 <KePanic(char const*)>
c000ef0d:	83 c4 10             	add    esp,0x10
c000ef10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef15:	eb 69                	jmp    c000ef80 <ACPI::close(int, int, void*)+0xb0>
c000ef17:	90                   	nop
c000ef18:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef1d:	75 59                	jne    c000ef78 <ACPI::close(int, int, void*)+0xa8>
c000ef1f:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef24:	85 c0                	test   eax,eax
c000ef26:	74 08                	je     c000ef30 <ACPI::close(int, int, void*)+0x60>
c000ef28:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef2d:	ff d0                	call   eax
c000ef2f:	90                   	nop
c000ef30:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef35:	8d 76 00             	lea    esi,[esi+0x0]
c000ef38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef3d:	83 e0 02             	and    eax,0x2
c000ef40:	74 1e                	je     c000ef60 <ACPI::close(int, int, void*)+0x90>
c000ef42:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef4d:	89 c2                	mov    edx,eax
c000ef4f:	ec                   	in     al,dx
c000ef50:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef54:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef58:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef5c:	eb da                	jmp    c000ef38 <ACPI::close(int, int, void*)+0x68>
c000ef5e:	66 90                	xchg   ax,ax
c000ef60:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef67:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef6c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef74:	ee                   	out    dx,al
c000ef75:	8d 76 00             	lea    esi,[esi+0x0]
c000ef78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 c4 1c             	add    esp,0x1c
c000ef83:	c3                   	ret    

c000ef84 <findRSDP()>:
c000ef84:	83 ec 1c             	sub    esp,0x1c
c000ef87:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef8c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef92:	83 e0 04             	and    eax,0x4
c000ef95:	0f b6 c0             	movzx  eax,al
c000ef98:	85 c0                	test   eax,eax
c000ef9a:	75 08                	jne    c000efa4 <findRSDP()+0x20>
c000ef9c:	b8 00 00 00 00       	mov    eax,0x0
c000efa1:	eb 75                	jmp    c000f018 <findRSDP()+0x94>
c000efa3:	90                   	nop
c000efa4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000efa9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000efae:	7f 1c                	jg     c000efcc <findRSDP()+0x48>
c000efb0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efb5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000efbb:	83 e2 fb             	and    edx,0xfffffffb
c000efbe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000efc4:	b8 00 00 00 00       	mov    eax,0x0
c000efc9:	eb 4d                	jmp    c000f018 <findRSDP()+0x94>
c000efcb:	90                   	nop
c000efcc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efd4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efdc:	77 32                	ja     c000f010 <findRSDP()+0x8c>
c000efde:	83 ec 04             	sub    esp,0x4
c000efe1:	6a 08                	push   0x8
c000efe3:	68 e3 1f 02 c0       	push   0xc0021fe3
c000efe8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efec:	e8 8f 13 ff ff       	call   c0000380 <memcmp>
c000eff1:	83 c4 10             	add    esp,0x10
c000eff4:	85 c0                	test   eax,eax
c000eff6:	0f 94 c0             	sete   al
c000eff9:	0f b6 c0             	movzx  eax,al
c000effc:	85 c0                	test   eax,eax
c000effe:	74 08                	je     c000f008 <findRSDP()+0x84>
c000f000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f004:	eb 12                	jmp    c000f018 <findRSDP()+0x94>
c000f006:	66 90                	xchg   ax,ax
c000f008:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f00d:	eb c5                	jmp    c000efd4 <findRSDP()+0x50>
c000f00f:	90                   	nop
c000f010:	b8 00 00 00 00       	mov    eax,0x0
c000f015:	8d 76 00             	lea    esi,[esi+0x0]
c000f018:	83 c4 1c             	add    esp,0x1c
c000f01b:	c3                   	ret    

c000f01c <loadACPITables(unsigned char*)>:
c000f01c:	57                   	push   edi
c000f01d:	56                   	push   esi
c000f01e:	53                   	push   ebx
c000f01f:	83 ec 60             	sub    esp,0x60
c000f022:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f027:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f02d:	83 e0 04             	and    eax,0x4
c000f030:	0f b6 c0             	movzx  eax,al
c000f033:	85 c0                	test   eax,eax
c000f035:	0f 84 41 02 00 00    	je     c000f27c <loadACPITables(unsigned char*)+0x260>
c000f03b:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f040:	0f b6 c0             	movzx  eax,al
c000f043:	85 c0                	test   eax,eax
c000f045:	74 79                	je     c000f0c0 <loadACPITables(unsigned char*)+0xa4>
c000f047:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f04b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f04f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f056:	83 e8 24             	sub    eax,0x24
c000f059:	c1 e8 03             	shr    eax,0x3
c000f05c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f060:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f068:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f06c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f070:	0f 8d ba 00 00 00    	jge    c000f130 <loadACPITables(unsigned char*)+0x114>
c000f076:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f07a:	83 c0 24             	add    eax,0x24
c000f07d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f081:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f085:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f089:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f08d:	c1 e0 03             	shl    eax,0x3
c000f090:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f094:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f098:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f09b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f09d:	89 c1                	mov    ecx,eax
c000f09f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0a4:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a7:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0ad:	89 ca                	mov    edx,ecx
c000f0af:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0b6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f0bb:	eb ab                	jmp    c000f068 <loadACPITables(unsigned char*)+0x4c>
c000f0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0cf:	83 e8 24             	sub    eax,0x24
c000f0d2:	c1 e8 02             	shr    eax,0x2
c000f0d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0ec:	7d 42                	jge    c000f130 <loadACPITables(unsigned char*)+0x114>
c000f0ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0f2:	83 c0 24             	add    eax,0x24
c000f0f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f101:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f105:	c1 e0 02             	shl    eax,0x2
c000f108:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f10c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f110:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f112:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f117:	8d 50 01             	lea    edx,[eax+0x1]
c000f11a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f120:	89 ca                	mov    edx,ecx
c000f122:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f129:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f12e:	eb b4                	jmp    c000f0e4 <loadACPITables(unsigned char*)+0xc8>
c000f130:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f138:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f13d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f141:	0f 8d 39 01 00 00    	jge    c000f280 <loadACPITables(unsigned char*)+0x264>
c000f147:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f14b:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f152:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f15a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f162:	25 ff 0f 00 00       	and    eax,0xfff
c000f167:	89 c6                	mov    esi,eax
c000f169:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f16f:	83 ec 0c             	sub    esp,0xc
c000f172:	6a 01                	push   0x1
c000f174:	e8 94 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f179:	83 c4 10             	add    esp,0x10
c000f17c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f180:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f186:	83 ec 0c             	sub    esp,0xc
c000f189:	6a 01                	push   0x1
c000f18b:	6a 01                	push   0x1
c000f18d:	50                   	push   eax
c000f18e:	52                   	push   edx
c000f18f:	53                   	push   ebx
c000f190:	e8 85 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f195:	83 c4 20             	add    esp,0x20
c000f198:	09 f0                	or     eax,esi
c000f19a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f19e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1a2:	c1 e0 03             	shl    eax,0x3
c000f1a5:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f1aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f1b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f1be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f1c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1d2:	89 c6                	mov    esi,eax
c000f1d4:	89 d7                	mov    edi,edx
c000f1d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1d8:	89 c8                	mov    eax,ecx
c000f1da:	89 fa                	mov    edx,edi
c000f1dc:	89 f3                	mov    ebx,esi
c000f1de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1f9:	05 00 10 00 00       	add    eax,0x1000
c000f1fe:	c1 e8 0c             	shr    eax,0xc
c000f201:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f209:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f20d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f211:	25 ff 0f 00 00       	and    eax,0xfff
c000f216:	89 c6                	mov    esi,eax
c000f218:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f21e:	83 ec 0c             	sub    esp,0xc
c000f221:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f225:	e8 e3 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f22a:	83 c4 10             	add    esp,0x10
c000f22d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f231:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f237:	83 ec 0c             	sub    esp,0xc
c000f23a:	6a 01                	push   0x1
c000f23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f240:	50                   	push   eax
c000f241:	52                   	push   edx
c000f242:	53                   	push   ebx
c000f243:	e8 d2 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f248:	83 c4 20             	add    esp,0x20
c000f24b:	09 f0                	or     eax,esi
c000f24d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f255:	83 ec 0c             	sub    esp,0xc
c000f258:	50                   	push   eax
c000f259:	e8 cd a6 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f25e:	83 c4 10             	add    esp,0x10
c000f261:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f265:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f269:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f270:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f275:	e9 be fe ff ff       	jmp    c000f138 <loadACPITables(unsigned char*)+0x11c>
c000f27a:	66 90                	xchg   ax,ax
c000f27c:	90                   	nop
c000f27d:	8d 76 00             	lea    esi,[esi+0x0]
c000f280:	83 c4 60             	add    esp,0x60
c000f283:	5b                   	pop    ebx
c000f284:	5e                   	pop    esi
c000f285:	5f                   	pop    edi
c000f286:	c3                   	ret    
c000f287:	90                   	nop

c000f288 <findRSDT(unsigned char*)>:
c000f288:	57                   	push   edi
c000f289:	56                   	push   esi
c000f28a:	53                   	push   ebx
c000f28b:	83 ec 50             	sub    esp,0x50
c000f28e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f293:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f299:	83 e0 04             	and    eax,0x4
c000f29c:	0f b6 c0             	movzx  eax,al
c000f29f:	85 c0                	test   eax,eax
c000f2a1:	75 0d                	jne    c000f2b0 <findRSDT(unsigned char*)+0x28>
c000f2a3:	b8 00 00 00 00       	mov    eax,0x0
c000f2a8:	e9 2b 01 00 00       	jmp    c000f3d8 <findRSDT(unsigned char*)+0x150>
c000f2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b0:	89 e0                	mov    eax,esp
c000f2b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2b6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f2be:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f2c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2da:	89 c6                	mov    esi,eax
c000f2dc:	89 d7                	mov    edi,edx
c000f2de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e0:	89 c8                	mov    eax,ecx
c000f2e2:	89 fa                	mov    edx,edi
c000f2e4:	89 f3                	mov    ebx,esi
c000f2e6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2ea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2ee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2f2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2f6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2fa:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f306:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f30a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f312:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f316:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f31a:	25 ff 0f 00 00       	and    eax,0xfff
c000f31f:	89 c6                	mov    esi,eax
c000f321:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f327:	83 ec 0c             	sub    esp,0xc
c000f32a:	6a 02                	push   0x2
c000f32c:	e8 dc a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f338:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f33e:	83 ec 0c             	sub    esp,0xc
c000f341:	6a 01                	push   0x1
c000f343:	6a 02                	push   0x2
c000f345:	50                   	push   eax
c000f346:	52                   	push   edx
c000f347:	53                   	push   ebx
c000f348:	e8 cd ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f34d:	83 c4 20             	add    esp,0x20
c000f350:	09 f0                	or     eax,esi
c000f352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f356:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f35a:	25 ff 0f 00 00       	and    eax,0xfff
c000f35f:	89 c6                	mov    esi,eax
c000f361:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	6a 02                	push   0x2
c000f36c:	e8 9c a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f371:	83 c4 10             	add    esp,0x10
c000f374:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f378:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f37e:	83 ec 0c             	sub    esp,0xc
c000f381:	6a 01                	push   0x1
c000f383:	6a 02                	push   0x2
c000f385:	50                   	push   eax
c000f386:	52                   	push   edx
c000f387:	53                   	push   ebx
c000f388:	e8 8d ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f38d:	83 c4 20             	add    esp,0x20
c000f390:	09 f0                	or     eax,esi
c000f392:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f396:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f39b:	85 c0                	test   eax,eax
c000f39d:	75 11                	jne    c000f3b0 <findRSDT(unsigned char*)+0x128>
c000f39f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f3a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3aa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3ae:	eb 24                	jmp    c000f3d4 <findRSDT(unsigned char*)+0x14c>
c000f3b0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f3b5:	83 f8 02             	cmp    eax,0x2
c000f3b8:	75 12                	jne    c000f3cc <findRSDT(unsigned char*)+0x144>
c000f3ba:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f3c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3c9:	eb 09                	jmp    c000f3d4 <findRSDT(unsigned char*)+0x14c>
c000f3cb:	90                   	nop
c000f3cc:	b8 00 00 00 00       	mov    eax,0x0
c000f3d1:	eb 05                	jmp    c000f3d8 <findRSDT(unsigned char*)+0x150>
c000f3d3:	90                   	nop
c000f3d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3d8:	83 c4 50             	add    esp,0x50
c000f3db:	5b                   	pop    ebx
c000f3dc:	5e                   	pop    esi
c000f3dd:	5f                   	pop    edi
c000f3de:	c3                   	ret    
c000f3df:	90                   	nop

c000f3e0 <findDataTable(unsigned char*, char*)>:
c000f3e0:	83 ec 1c             	sub    esp,0x1c
c000f3e3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3e8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3ee:	83 e0 04             	and    eax,0x4
c000f3f1:	0f b6 c0             	movzx  eax,al
c000f3f4:	85 c0                	test   eax,eax
c000f3f6:	75 08                	jne    c000f400 <findDataTable(unsigned char*, char*)+0x20>
c000f3f8:	b8 00 00 00 00       	mov    eax,0x0
c000f3fd:	eb 5d                	jmp    c000f45c <findDataTable(unsigned char*, char*)+0x7c>
c000f3ff:	90                   	nop
c000f400:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f408:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f40d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f411:	7d 41                	jge    c000f454 <findDataTable(unsigned char*, char*)+0x74>
c000f413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f417:	c1 e0 03             	shl    eax,0x3
c000f41a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f41f:	83 ec 04             	sub    esp,0x4
c000f422:	6a 04                	push   0x4
c000f424:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f428:	50                   	push   eax
c000f429:	e8 52 0f ff ff       	call   c0000380 <memcmp>
c000f42e:	83 c4 10             	add    esp,0x10
c000f431:	85 c0                	test   eax,eax
c000f433:	0f 94 c0             	sete   al
c000f436:	0f b6 c0             	movzx  eax,al
c000f439:	85 c0                	test   eax,eax
c000f43b:	74 0f                	je     c000f44c <findDataTable(unsigned char*, char*)+0x6c>
c000f43d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f441:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f448:	eb 12                	jmp    c000f45c <findDataTable(unsigned char*, char*)+0x7c>
c000f44a:	66 90                	xchg   ax,ax
c000f44c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f451:	eb b5                	jmp    c000f408 <findDataTable(unsigned char*, char*)+0x28>
c000f453:	90                   	nop
c000f454:	b8 00 00 00 00       	mov    eax,0x0
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	83 c4 1c             	add    esp,0x1c
c000f45f:	c3                   	ret    

c000f460 <scanMADT()>:
c000f460:	53                   	push   ebx
c000f461:	83 ec 38             	sub    esp,0x38
c000f464:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f469:	25 00 04 00 00       	and    eax,0x400
c000f46e:	74 14                	je     c000f484 <scanMADT()+0x24>
c000f470:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f475:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f47b:	83 e2 fb             	and    edx,0xfffffffb
c000f47e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f484:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f489:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f48f:	83 e0 04             	and    eax,0x4
c000f492:	0f b6 c0             	movzx  eax,al
c000f495:	85 c0                	test   eax,eax
c000f497:	0f 84 6b 04 00 00    	je     c000f908 <scanMADT()+0x4a8>
c000f49d:	e8 e2 fa ff ff       	call   c000ef84 <findRSDP()>
c000f4a2:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f4a7:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4ac:	85 c0                	test   eax,eax
c000f4ae:	75 1c                	jne    c000f4cc <scanMADT()+0x6c>
c000f4b0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4bb:	83 e2 fb             	and    edx,0xfffffffb
c000f4be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4c4:	e9 47 04 00 00       	jmp    c000f910 <scanMADT()+0x4b0>
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4d1:	83 ec 0c             	sub    esp,0xc
c000f4d4:	50                   	push   eax
c000f4d5:	e8 ae fd ff ff       	call   c000f288 <findRSDT(unsigned char*)>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4e2:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4e7:	85 c0                	test   eax,eax
c000f4e9:	75 19                	jne    c000f504 <scanMADT()+0xa4>
c000f4eb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4f6:	83 e2 fb             	and    edx,0xfffffffb
c000f4f9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4ff:	e9 0c 04 00 00       	jmp    c000f910 <scanMADT()+0x4b0>
c000f504:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f509:	83 ec 0c             	sub    esp,0xc
c000f50c:	50                   	push   eax
c000f50d:	e8 0a fb ff ff       	call   c000f01c <loadACPITables(unsigned char*)>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f51a:	83 ec 08             	sub    esp,0x8
c000f51d:	68 ec 1f 02 c0       	push   0xc0021fec
c000f522:	50                   	push   eax
c000f523:	e8 b8 fe ff ff       	call   c000f3e0 <findDataTable(unsigned char*, char*)>
c000f528:	83 c4 10             	add    esp,0x10
c000f52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f52f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f534:	75 1a                	jne    c000f550 <scanMADT()+0xf0>
c000f536:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f53b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f541:	83 e2 fe             	and    edx,0xfffffffe
c000f544:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f54a:	e9 c1 03 00 00       	jmp    c000f910 <scanMADT()+0x4b0>
c000f54f:	90                   	nop
c000f550:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f558:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f55c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f55f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f563:	0f 87 a7 03 00 00    	ja     c000f910 <scanMADT()+0x4b0>
c000f569:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f571:	0f 87 99 03 00 00    	ja     c000f910 <scanMADT()+0x4b0>
c000f577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f57b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f583:	8d 50 01             	lea    edx,[eax+0x1]
c000f586:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f58a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f58e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f592:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f59a:	8d 50 01             	lea    edx,[eax+0x1]
c000f59d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5a9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f5ad:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f5b2:	83 f8 02             	cmp    eax,0x2
c000f5b5:	0f 86 51 03 00 00    	jbe    c000f90c <scanMADT()+0x4ac>
c000f5bb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5c0:	85 c0                	test   eax,eax
c000f5c2:	75 58                	jne    c000f61c <scanMADT()+0x1bc>
c000f5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c8:	8d 50 01             	lea    edx,[eax+0x1]
c000f5cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5cf:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5d5:	0f b6 d2             	movzx  edx,dl
c000f5d8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5dc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5e0:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f1:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5fa:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f600:	0f b6 d2             	movzx  edx,dl
c000f603:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f607:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f60b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f611:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f616:	e9 d9 02 00 00       	jmp    c000f8f4 <scanMADT()+0x494>
c000f61b:	90                   	nop
c000f61c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f621:	83 f8 01             	cmp    eax,0x1
c000f624:	0f 85 1a 01 00 00    	jne    c000f744 <scanMADT()+0x2e4>
c000f62a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62e:	8d 50 01             	lea    edx,[eax+0x1]
c000f631:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f635:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f63b:	0f b6 d2             	movzx  edx,dl
c000f63e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f642:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f646:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f64c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f651:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f655:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f659:	01 d0                	add    eax,edx
c000f65b:	83 c0 2c             	add    eax,0x2c
c000f65e:	8a 00                	mov    al,BYTE PTR [eax]
c000f660:	0f b6 d0             	movzx  edx,al
c000f663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f667:	8d 48 01             	lea    ecx,[eax+0x1]
c000f66a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f66e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f672:	0f b6 c0             	movzx  eax,al
c000f675:	c1 e0 08             	shl    eax,0x8
c000f678:	89 d1                	mov    ecx,edx
c000f67a:	09 c1                	or     ecx,eax
c000f67c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f680:	8d 50 02             	lea    edx,[eax+0x2]
c000f683:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f687:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f68b:	0f b6 c0             	movzx  eax,al
c000f68e:	c1 e0 10             	shl    eax,0x10
c000f691:	09 c1                	or     ecx,eax
c000f693:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f697:	8d 50 03             	lea    edx,[eax+0x3]
c000f69a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f69e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6a2:	0f b6 c0             	movzx  eax,al
c000f6a5:	c1 e0 18             	shl    eax,0x18
c000f6a8:	09 c1                	or     ecx,eax
c000f6aa:	89 ca                	mov    edx,ecx
c000f6ac:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6b1:	0f b6 c0             	movzx  eax,al
c000f6b4:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f6bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c8:	01 d0                	add    eax,edx
c000f6ca:	83 c0 2c             	add    eax,0x2c
c000f6cd:	8a 00                	mov    al,BYTE PTR [eax]
c000f6cf:	0f b6 d0             	movzx  edx,al
c000f6d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6dd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6e1:	0f b6 c0             	movzx  eax,al
c000f6e4:	c1 e0 08             	shl    eax,0x8
c000f6e7:	89 d1                	mov    ecx,edx
c000f6e9:	09 c1                	or     ecx,eax
c000f6eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ef:	8d 50 02             	lea    edx,[eax+0x2]
c000f6f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6fa:	0f b6 c0             	movzx  eax,al
c000f6fd:	c1 e0 10             	shl    eax,0x10
c000f700:	09 c1                	or     ecx,eax
c000f702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f706:	8d 50 03             	lea    edx,[eax+0x3]
c000f709:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f711:	0f b6 c0             	movzx  eax,al
c000f714:	c1 e0 18             	shl    eax,0x18
c000f717:	09 c1                	or     ecx,eax
c000f719:	89 ca                	mov    edx,ecx
c000f71b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f720:	0f b6 c0             	movzx  eax,al
c000f723:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f72a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f72f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f734:	83 c0 01             	add    eax,0x1
c000f737:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f73c:	e9 b3 01 00 00       	jmp    c000f8f4 <scanMADT()+0x494>
c000f741:	8d 76 00             	lea    esi,[esi+0x0]
c000f744:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f749:	83 f8 02             	cmp    eax,0x2
c000f74c:	0f 85 ea 00 00 00    	jne    c000f83c <scanMADT()+0x3dc>
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	8d 50 01             	lea    edx,[eax+0x1]
c000f759:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f75d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f761:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f765:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f769:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f76d:	8d 50 01             	lea    edx,[eax+0x1]
c000f770:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f774:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f778:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f77c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f788:	01 d0                	add    eax,edx
c000f78a:	83 c0 2c             	add    eax,0x2c
c000f78d:	8a 00                	mov    al,BYTE PTR [eax]
c000f78f:	0f b6 d0             	movzx  edx,al
c000f792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f796:	8d 48 01             	lea    ecx,[eax+0x1]
c000f799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7a1:	0f b6 c0             	movzx  eax,al
c000f7a4:	c1 e0 08             	shl    eax,0x8
c000f7a7:	89 d1                	mov    ecx,edx
c000f7a9:	09 c1                	or     ecx,eax
c000f7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7af:	8d 50 02             	lea    edx,[eax+0x2]
c000f7b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7ba:	0f b6 c0             	movzx  eax,al
c000f7bd:	c1 e0 10             	shl    eax,0x10
c000f7c0:	09 c1                	or     ecx,eax
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	8d 50 03             	lea    edx,[eax+0x3]
c000f7c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7d1:	0f b6 c0             	movzx  eax,al
c000f7d4:	c1 e0 18             	shl    eax,0x18
c000f7d7:	09 c8                	or     eax,ecx
c000f7d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7dd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ea:	01 d0                	add    eax,edx
c000f7ec:	83 c0 2c             	add    eax,0x2c
c000f7ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f1:	0f b6 c0             	movzx  eax,al
c000f7f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f7fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ff:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f803:	0f b6 d2             	movzx  edx,dl
c000f806:	c1 e2 08             	shl    edx,0x8
c000f809:	09 d0                	or     eax,edx
c000f80b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f810:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f815:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f81a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f81e:	88 90 e8 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc918],dl
c000f824:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f829:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f82e:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f836:	e9 b9 00 00 00       	jmp    c000f8f4 <scanMADT()+0x494>
c000f83b:	90                   	nop
c000f83c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f841:	83 f8 04             	cmp    eax,0x4
c000f844:	0f 85 9a 00 00 00    	jne    c000f8e4 <scanMADT()+0x484>
c000f84a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f84e:	8d 50 01             	lea    edx,[eax+0x1]
c000f851:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f855:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f859:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f85d:	0f b6 c0             	movzx  eax,al
c000f860:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f864:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f868:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86c:	01 d0                	add    eax,edx
c000f86e:	83 c0 2c             	add    eax,0x2c
c000f871:	8a 00                	mov    al,BYTE PTR [eax]
c000f873:	0f b6 d0             	movzx  edx,al
c000f876:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f87a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f87d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f881:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f885:	0f b6 c0             	movzx  eax,al
c000f888:	c1 e0 08             	shl    eax,0x8
c000f88b:	09 d0                	or     eax,edx
c000f88d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f891:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f89a:	8d 50 01             	lea    edx,[eax+0x1]
c000f89d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8a9:	0f b6 c0             	movzx  eax,al
c000f8ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b4:	c1 e0 08             	shl    eax,0x8
c000f8b7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f8bb:	89 c1                	mov    ecx,eax
c000f8bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c1:	c1 e0 18             	shl    eax,0x18
c000f8c4:	89 c3                	mov    ebx,eax
c000f8c6:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f8cb:	8d 50 01             	lea    edx,[eax+0x1]
c000f8ce:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8d4:	09 d9                	or     ecx,ebx
c000f8d6:	89 ca                	mov    edx,ecx
c000f8d8:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8df:	eb 13                	jmp    c000f8f4 <scanMADT()+0x494>
c000f8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8e9:	83 f8 05             	cmp    eax,0x5
c000f8ec:	75 06                	jne    c000f8f4 <scanMADT()+0x494>
c000f8ee:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8f3:	90                   	nop
c000f8f4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8fd:	01 d0                	add    eax,edx
c000f8ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f903:	e9 50 fc ff ff       	jmp    c000f558 <scanMADT()+0xf8>
c000f908:	90                   	nop
c000f909:	eb 05                	jmp    c000f910 <scanMADT()+0x4b0>
c000f90b:	90                   	nop
c000f90c:	90                   	nop
c000f90d:	8d 76 00             	lea    esi,[esi+0x0]
c000f910:	83 c4 38             	add    esp,0x38
c000f913:	5b                   	pop    ebx
c000f914:	c3                   	ret    
c000f915:	90                   	nop
c000f916:	66 90                	xchg   ax,ax

c000f918 <ACPI::ACPI()>:
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f91f:	83 ec 08             	sub    esp,0x8
c000f922:	68 f1 1f 02 c0       	push   0xc0021ff1
c000f927:	50                   	push   eax
c000f928:	e8 65 d2 ff ff       	call   c000cb92 <Device::Device(char const*)>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	ba 44 21 02 c0       	mov    edx,0xc0022144
c000f935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f939:	89 10                	mov    DWORD PTR [eax],edx
c000f93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f93f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f94a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f958:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f962:	e8 f9 fa ff ff       	call   c000f460 <scanMADT()>
c000f967:	90                   	nop
c000f968:	83 c4 0c             	add    esp,0xc
c000f96b:	c3                   	ret    

c000f96c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f96c:	83 ec 2c             	sub    esp,0x2c
c000f96f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f977:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f97b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f97f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f984:	88 d0                	mov    al,dl
c000f986:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f98a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f98f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f997:	90                   	nop
c000f998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f99c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f9a2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f9a6:	0f 8d b0 00 00 00    	jge    c000fa5c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f9ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9b4:	83 c2 2a             	add    edx,0x2a
c000f9b7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f9bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f9c0:	0f b7 c0             	movzx  eax,ax
c000f9c3:	39 c2                	cmp    edx,eax
c000f9c5:	0f 85 85 00 00 00    	jne    c000fa50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9d3:	83 c2 2a             	add    edx,0x2a
c000f9d6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9da:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9df:	0f b6 c0             	movzx  eax,al
c000f9e2:	39 c2                	cmp    edx,eax
c000f9e4:	75 6a                	jne    c000fa50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9e6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9eb:	85 c0                	test   eax,eax
c000f9ed:	74 3d                	je     c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9f7:	83 c2 2a             	add    edx,0x2a
c000f9fa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa05:	39 c2                	cmp    edx,eax
c000fa07:	74 13                	je     c000fa1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa09:	83 ec 0c             	sub    esp,0xc
c000fa0c:	68 6c 1f 02 c0       	push   0xc0021f6c
c000fa11:	e8 3d 1c 00 00       	call   c0011653 <KePanic(char const*)>
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	8d 76 00             	lea    esi,[esi+0x0]
c000fa1c:	83 ec 0c             	sub    esp,0xc
c000fa1f:	68 f6 1f 02 c0       	push   0xc0021ff6
c000fa24:	e8 2a 1c 00 00       	call   c0011653 <KePanic(char const*)>
c000fa29:	83 c4 10             	add    esp,0x10
c000fa2c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa38:	83 c2 2a             	add    edx,0x2a
c000fa3b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa3f:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa41:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa44:	89 01                	mov    DWORD PTR [ecx],eax
c000fa46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa49:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa4e:	66 90                	xchg   ax,ax
c000fa50:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa55:	e9 3e ff ff ff       	jmp    c000f998 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa5a:	66 90                	xchg   ax,ax
c000fa5c:	90                   	nop
c000fa5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa61:	83 c4 2c             	add    esp,0x2c
c000fa64:	c2 04 00             	ret    0x4
c000fa67:	90                   	nop

c000fa68 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa68:	83 ec 1c             	sub    esp,0x1c
c000fa6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa6f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa73:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa77:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa7c:	88 c8                	mov    al,cl
c000fa7e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa82:	88 d0                	mov    al,dl
c000fa84:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa96:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa99:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa9d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000faa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000faaf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fab6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fabf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fac5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fac9:	83 c0 01             	add    eax,0x1
c000facc:	88 c1                	mov    cl,al
c000face:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad2:	83 c2 2a             	add    edx,0x2a
c000fad5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000faea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000faee:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000faf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fafc:	8d 50 01             	lea    edx,[eax+0x1]
c000faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb03:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb13:	3d 00 02 00 00       	cmp    eax,0x200
c000fb18:	75 12                	jne    c000fb2c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb1a:	83 ec 0c             	sub    esp,0xc
c000fb1d:	68 05 20 02 c0       	push   0xc0022005
c000fb22:	e8 2c 1b 00 00       	call   c0011653 <KePanic(char const*)>
c000fb27:	83 c4 10             	add    esp,0x10
c000fb2a:	66 90                	xchg   ax,ax
c000fb2c:	90                   	nop
c000fb2d:	83 c4 1c             	add    esp,0x1c
c000fb30:	c3                   	ret    
c000fb31:	90                   	nop
c000fb32:	66 90                	xchg   ax,ax

c000fb34 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb34:	b8 00 00 00 00       	mov    eax,0x0
c000fb39:	c3                   	ret    
c000fb3a:	66 90                	xchg   ax,ax

c000fb3c <ACPI::detectPCI()>:
c000fb3c:	53                   	push   ebx
c000fb3d:	83 ec 28             	sub    esp,0x28
c000fb40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb45:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb4a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb4f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb55:	83 e0 04             	and    eax,0x4
c000fb58:	0f b6 c0             	movzx  eax,al
c000fb5b:	85 c0                	test   eax,eax
c000fb5d:	74 2d                	je     c000fb8c <ACPI::detectPCI()+0x50>
c000fb5f:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb64:	83 ec 08             	sub    esp,0x8
c000fb67:	68 22 20 02 c0       	push   0xc0022022
c000fb6c:	50                   	push   eax
c000fb6d:	e8 6e f8 ff ff       	call   c000f3e0 <findDataTable(unsigned char*, char*)>
c000fb72:	83 c4 10             	add    esp,0x10
c000fb75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb79:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb7e:	74 0c                	je     c000fb8c <ACPI::detectPCI()+0x50>
c000fb80:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb85:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb8a:	66 90                	xchg   ax,ax
c000fb8c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb98:	8a 00                	mov    al,BYTE PTR [eax]
c000fb9a:	0f b6 c0             	movzx  eax,al
c000fb9d:	83 f8 01             	cmp    eax,0x1
c000fba0:	75 0e                	jne    c000fbb0 <ACPI::detectPCI()+0x74>
c000fba2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fba7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbac:	eb 2e                	jmp    c000fbdc <ACPI::detectPCI()+0xa0>
c000fbae:	66 90                	xchg   ax,ax
c000fbb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbb4:	8a 00                	mov    al,BYTE PTR [eax]
c000fbb6:	0f b6 c0             	movzx  eax,al
c000fbb9:	83 f8 02             	cmp    eax,0x2
c000fbbc:	75 1e                	jne    c000fbdc <ACPI::detectPCI()+0xa0>
c000fbbe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbc3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbc8:	85 c0                	test   eax,eax
c000fbca:	74 10                	je     c000fbdc <ACPI::detectPCI()+0xa0>
c000fbcc:	83 ec 0c             	sub    esp,0xc
c000fbcf:	68 9c 1f 02 c0       	push   0xc0021f9c
c000fbd4:	e8 7a 1a 00 00       	call   c0011653 <KePanic(char const*)>
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbe0:	83 f0 01             	xor    eax,0x1
c000fbe3:	0f b6 c0             	movzx  eax,al
c000fbe6:	85 c0                	test   eax,eax
c000fbe8:	74 46                	je     c000fc30 <ACPI::detectPCI()+0xf4>
c000fbea:	e8 41 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbf3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbf8:	75 0e                	jne    c000fc08 <ACPI::detectPCI()+0xcc>
c000fbfa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc04:	eb 2a                	jmp    c000fc30 <ACPI::detectPCI()+0xf4>
c000fc06:	66 90                	xchg   ax,ax
c000fc08:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc0d:	75 21                	jne    c000fc30 <ACPI::detectPCI()+0xf4>
c000fc0f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc14:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc19:	85 c0                	test   eax,eax
c000fc1b:	74 13                	je     c000fc30 <ACPI::detectPCI()+0xf4>
c000fc1d:	83 ec 0c             	sub    esp,0xc
c000fc20:	68 9c 1f 02 c0       	push   0xc0021f9c
c000fc25:	e8 29 1a 00 00       	call   c0011653 <KePanic(char const*)>
c000fc2a:	83 c4 10             	add    esp,0x10
c000fc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc30:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc35:	85 c0                	test   eax,eax
c000fc37:	0f 84 87 00 00 00    	je     c000fcc4 <ACPI::detectPCI()+0x188>
c000fc3d:	83 ec 0c             	sub    esp,0xc
c000fc40:	68 27 20 02 c0       	push   0xc0022027
c000fc45:	e8 09 13 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000fc4a:	83 c4 10             	add    esp,0x10
c000fc4d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc55:	83 ec 0c             	sub    esp,0xc
c000fc58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc5c:	e8 55 7e ff ff       	call   c0007ab6 <malloc>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	89 c3                	mov    ebx,eax
c000fc66:	83 ec 0c             	sub    esp,0xc
c000fc69:	53                   	push   ebx
c000fc6a:	e8 21 b5 00 00       	call   c001b190 <PCI::PCI()>
c000fc6f:	83 c4 10             	add    esp,0x10
c000fc72:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc7a:	83 ec 08             	sub    esp,0x8
c000fc7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc81:	50                   	push   eax
c000fc82:	e8 73 cd ff ff       	call   c000c9fa <Device::addChild(Device*)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc90:	83 c0 08             	add    eax,0x8
c000fc93:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc95:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc9a:	85 d2                	test   edx,edx
c000fc9c:	74 0a                	je     c000fca8 <ACPI::detectPCI()+0x16c>
c000fc9e:	ba 01 00 00 00       	mov    edx,0x1
c000fca3:	eb 0b                	jmp    c000fcb0 <ACPI::detectPCI()+0x174>
c000fca5:	8d 76 00             	lea    esi,[esi+0x0]
c000fca8:	ba 02 00 00 00       	mov    edx,0x2
c000fcad:	8d 76 00             	lea    esi,[esi+0x0]
c000fcb0:	6a 00                	push   0x0
c000fcb2:	6a 00                	push   0x0
c000fcb4:	52                   	push   edx
c000fcb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcb9:	ff d0                	call   eax
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	e9 91 00 00 00       	jmp    c000fd54 <ACPI::detectPCI()+0x218>
c000fcc3:	90                   	nop
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	68 3f 20 02 c0       	push   0xc002203f
c000fccc:	e8 82 12 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fcdb:	83 ec 0c             	sub    esp,0xc
c000fcde:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fce2:	e8 cf 7d ff ff       	call   c0007ab6 <malloc>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	89 c3                	mov    ebx,eax
c000fcec:	83 ec 0c             	sub    esp,0xc
c000fcef:	53                   	push   ebx
c000fcf0:	e8 35 c0 00 00       	call   c001bd2a <IDE::IDE()>
c000fcf5:	83 c4 10             	add    esp,0x10
c000fcf8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd00:	83 ec 08             	sub    esp,0x8
c000fd03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd07:	50                   	push   eax
c000fd08:	e8 ed cc ff ff       	call   c000c9fa <Device::addChild(Device*)>
c000fd0d:	83 c4 10             	add    esp,0x10
c000fd10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd14:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd22:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd2f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3e:	83 c0 08             	add    eax,0x8
c000fd41:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd43:	6a 00                	push   0x0
c000fd45:	6a 00                	push   0x0
c000fd47:	6a 00                	push   0x0
c000fd49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd4d:	ff d0                	call   eax
c000fd4f:	83 c4 10             	add    esp,0x10
c000fd52:	66 90                	xchg   ax,ax
c000fd54:	90                   	nop
c000fd55:	83 c4 28             	add    esp,0x28
c000fd58:	5b                   	pop    ebx
c000fd59:	c3                   	ret    
c000fd5a:	66 90                	xchg   ax,ax

c000fd5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd5c:	83 ec 1c             	sub    esp,0x1c
c000fd5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd63:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd6a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd6f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd74:	83 ec 08             	sub    esp,0x8
c000fd77:	52                   	push   edx
c000fd78:	50                   	push   eax
c000fd79:	e8 fa 73 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd7e:	83 c4 10             	add    esp,0x10
c000fd81:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd85:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd8a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd8f:	83 ec 04             	sub    esp,0x4
c000fd92:	6a 01                	push   0x1
c000fd94:	52                   	push   edx
c000fd95:	50                   	push   eax
c000fd96:	e8 f7 74 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	90                   	nop
c000fd9f:	83 c4 1c             	add    esp,0x1c
c000fda2:	c3                   	ret    
c000fda3:	90                   	nop

c000fda4 <ACPI::sleep()>:
c000fda4:	83 ec 0c             	sub    esp,0xc
c000fda7:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdac:	85 c0                	test   eax,eax
c000fdae:	74 08                	je     c000fdb8 <ACPI::sleep()+0x14>
c000fdb0:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fdb5:	ff d0                	call   eax
c000fdb7:	90                   	nop
c000fdb8:	90                   	nop
c000fdb9:	83 c4 0c             	add    esp,0xc
c000fdbc:	c3                   	ret    
c000fdbd:	90                   	nop
c000fdbe:	66 90                	xchg   ax,ax

c000fdc0 <ACPI::open(int, int, void*)>:
c000fdc0:	57                   	push   edi
c000fdc1:	56                   	push   esi
c000fdc2:	53                   	push   ebx
c000fdc3:	81 ec 70 01 00 00    	sub    esp,0x170
c000fdc9:	83 ec 0c             	sub    esp,0xc
c000fdcc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fdd3:	e8 64 fd ff ff       	call   c000fb3c <ACPI::detectPCI()>
c000fdd8:	83 c4 10             	add    esp,0x10
c000fddb:	83 ec 0c             	sub    esp,0xc
c000fdde:	68 c4 1f 02 c0       	push   0xc0021fc4
c000fde3:	e8 6b 11 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000fde8:	83 c4 10             	add    esp,0x10
c000fdeb:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdf0:	8a 00                	mov    al,BYTE PTR [eax]
c000fdf2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fdf9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe01:	83 f8 01             	cmp    eax,0x1
c000fe04:	75 12                	jne    c000fe18 <ACPI::open(int, int, void*)+0x58>
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	68 1d 19 02 c0       	push   0xc002191d
c000fe0e:	e8 ca 4d 00 00       	call   c0014bdd <Thr::loadKernelSymbolTable(char const*)>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	eb 34                	jmp    c000fe4c <ACPI::open(int, int, void*)+0x8c>
c000fe18:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe20:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe25:	75 15                	jne    c000fe3c <ACPI::open(int, int, void*)+0x7c>
c000fe27:	83 ec 0c             	sub    esp,0xc
c000fe2a:	68 54 20 02 c0       	push   0xc0022054
c000fe2f:	e8 a9 4d 00 00       	call   c0014bdd <Thr::loadKernelSymbolTable(char const*)>
c000fe34:	83 c4 10             	add    esp,0x10
c000fe37:	eb 13                	jmp    c000fe4c <ACPI::open(int, int, void*)+0x8c>
c000fe39:	8d 76 00             	lea    esi,[esi+0x0]
c000fe3c:	83 ec 0c             	sub    esp,0xc
c000fe3f:	68 72 20 02 c0       	push   0xc0022072
c000fe44:	e8 0a 18 00 00       	call   c0011653 <KePanic(char const*)>
c000fe49:	83 c4 10             	add    esp,0x10
c000fe4c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe54:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fe5f:	83 ec 0c             	sub    esp,0xc
c000fe62:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe69:	e8 48 7c ff ff       	call   c0007ab6 <malloc>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	89 c3                	mov    ebx,eax
c000fe73:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe78:	83 ec 04             	sub    esp,0x4
c000fe7b:	50                   	push   eax
c000fe7c:	68 8c 20 02 c0       	push   0xc002208c
c000fe81:	53                   	push   ebx
c000fe82:	e8 fb bc ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe91:	83 ec 08             	sub    esp,0x8
c000fe94:	6a 01                	push   0x1
c000fe96:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe9d:	e8 fe bc ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000feac:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000feb4:	75 16                	jne    c000fecc <ACPI::open(int, int, void*)+0x10c>
c000feb6:	83 ec 0c             	sub    esp,0xc
c000feb9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fec0:	e8 39 bd ff ff       	call   c000bbfe <File::close()>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb 0a                	jmp    c000fed4 <ACPI::open(int, int, void*)+0x114>
c000feca:	66 90                	xchg   ax,ax
c000fecc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fed4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fedc:	74 1e                	je     c000fefc <ACPI::open(int, int, void*)+0x13c>
c000fede:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fee5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fee7:	83 c0 08             	add    eax,0x8
c000feea:	8b 00                	mov    eax,DWORD PTR [eax]
c000feec:	83 ec 0c             	sub    esp,0xc
c000feef:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fef6:	ff d0                	call   eax
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	90                   	nop
c000fefc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff03:	83 f0 01             	xor    eax,0x1
c000ff06:	0f b6 c0             	movzx  eax,al
c000ff09:	85 c0                	test   eax,eax
c000ff0b:	74 43                	je     c000ff50 <ACPI::open(int, int, void*)+0x190>
c000ff0d:	83 ec 0c             	sub    esp,0xc
c000ff10:	68 aa 20 02 c0       	push   0xc00220aa
c000ff15:	e8 39 10 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	83 ec 04             	sub    esp,0x4
c000ff20:	6a 0c                	push   0xc
c000ff22:	68 c5 20 02 c0       	push   0xc00220c5
c000ff27:	68 d6 20 02 c0       	push   0xc00220d6
c000ff2c:	e8 2f 3f 00 00       	call   c0013e60 <Reg::readIntWithDefault(char*, char*, int)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff3b:	83 ec 0c             	sub    esp,0xc
c000ff3e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff45:	e8 f2 98 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	68 15 0b 02 c0       	push   0xc0020b15
c000ff58:	e8 f6 0f 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ff67:	83 ec 08             	sub    esp,0x8
c000ff6a:	6a 13                	push   0x13
c000ff6c:	50                   	push   eax
c000ff6d:	e8 a0 cd ff ff       	call   c000cd12 <getDevicesOfType(DeviceType)>
c000ff72:	83 c4 0c             	add    esp,0xc
c000ff75:	8d 76 00             	lea    esi,[esi+0x0]
c000ff78:	83 ec 0c             	sub    esp,0xc
c000ff7b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff82:	50                   	push   eax
c000ff83:	e8 88 ff 00 00       	call   c001ff10 <LinkedList<Device>::isEmpty()>
c000ff88:	83 c4 10             	add    esp,0x10
c000ff8b:	83 f0 01             	xor    eax,0x1
c000ff8e:	0f b6 c0             	movzx  eax,al
c000ff91:	85 c0                	test   eax,eax
c000ff93:	0f 84 47 01 00 00    	je     c00100e0 <ACPI::open(int, int, void*)+0x320>
c000ff99:	83 ec 0c             	sub    esp,0xc
c000ff9c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffa3:	50                   	push   eax
c000ffa4:	e8 83 ff 00 00       	call   c001ff2c <LinkedList<Device>::getFirstElement()>
c000ffa9:	83 c4 10             	add    esp,0x10
c000ffac:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ffb3:	83 ec 0c             	sub    esp,0xc
c000ffb6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffbd:	50                   	push   eax
c000ffbe:	e8 71 ff 00 00       	call   c001ff34 <LinkedList<Device>::removeFirst()>
c000ffc3:	83 c4 10             	add    esp,0x10
c000ffc6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ffcd:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ffd4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ffdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffdf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ffe5:	ba 09 00 00 00       	mov    edx,0x9
c000ffea:	fc                   	cld    
c000ffeb:	89 c7                	mov    edi,eax
c000ffed:	89 de                	mov    esi,ebx
c000ffef:	89 d1                	mov    ecx,edx
c000fff1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fff3:	83 ec 08             	sub    esp,0x8
c000fff6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fffa:	50                   	push   eax
c000fffb:	83 ec 24             	sub    esp,0x24
c000fffe:	89 e0                	mov    eax,esp
c0010000:	89 c3                	mov    ebx,eax
c0010002:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010006:	ba 09 00 00 00       	mov    edx,0x9
c001000b:	89 df                	mov    edi,ebx
c001000d:	89 c6                	mov    esi,eax
c001000f:	89 d1                	mov    ecx,edx
c0010011:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010013:	e8 62 b6 00 00       	call   c001b67a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010018:	83 c4 30             	add    esp,0x30
c001001b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0010022:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001002a:	0f 84 48 ff ff ff    	je     c000ff78 <ACPI::open(int, int, void*)+0x1b8>
c0010030:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010045:	e8 6c 7a ff ff       	call   c0007ab6 <malloc>
c001004a:	83 c4 10             	add    esp,0x10
c001004d:	89 c3                	mov    ebx,eax
c001004f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010054:	83 ec 04             	sub    esp,0x4
c0010057:	50                   	push   eax
c0010058:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001005f:	53                   	push   ebx
c0010060:	e8 1d bb ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001006f:	83 ec 0c             	sub    esp,0xc
c0010072:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010079:	e8 e6 bd ff ff       	call   c000be64 <File::exists()>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	0f b6 c0             	movzx  eax,al
c0010084:	85 c0                	test   eax,eax
c0010086:	74 28                	je     c00100b0 <ACPI::open(int, int, void*)+0x2f0>
c0010088:	83 ec 08             	sub    esp,0x8
c001008b:	6a 01                	push   0x1
c001008d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010094:	e8 be 55 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	83 ec 08             	sub    esp,0x8
c001009f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00100a6:	50                   	push   eax
c00100a7:	e8 dc 57 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c00100ac:	83 c4 10             	add    esp,0x10
c00100af:	90                   	nop
c00100b0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00100b8:	0f 84 ba fe ff ff    	je     c000ff78 <ACPI::open(int, int, void*)+0x1b8>
c00100be:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00100c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c7:	83 c0 08             	add    eax,0x8
c00100ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00100cc:	83 ec 0c             	sub    esp,0xc
c00100cf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100d6:	ff d0                	call   eax
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	e9 98 fe ff ff       	jmp    c000ff78 <ACPI::open(int, int, void*)+0x1b8>
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00100ea:	50                   	push   eax
c00100eb:	e8 1c fe 00 00       	call   c001ff0c <LinkedList<Device>::~LinkedList()>
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100f9:	83 ec 08             	sub    esp,0x8
c00100fc:	6a 01                	push   0x1
c00100fe:	68 dd 20 02 c0       	push   0xc00220dd
c0010103:	e8 4f 55 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	83 ec 08             	sub    esp,0x8
c001010e:	53                   	push   ebx
c001010f:	50                   	push   eax
c0010110:	e8 73 57 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001011d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010123:	83 e0 04             	and    eax,0x4
c0010126:	0f b6 c0             	movzx  eax,al
c0010129:	85 c0                	test   eax,eax
c001012b:	0f 84 1b 01 00 00    	je     c001024c <ACPI::open(int, int, void*)+0x48c>
c0010131:	83 ec 0c             	sub    esp,0xc
c0010134:	68 fa 20 02 c0       	push   0xc00220fa
c0010139:	e8 15 0e 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001014c:	83 ec 0c             	sub    esp,0xc
c001014f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010156:	e8 5b 79 ff ff       	call   c0007ab6 <malloc>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	89 c3                	mov    ebx,eax
c0010160:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010165:	83 ec 04             	sub    esp,0x4
c0010168:	50                   	push   eax
c0010169:	68 17 21 02 c0       	push   0xc0022117
c001016e:	53                   	push   ebx
c001016f:	e8 0e ba ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0010174:	83 c4 10             	add    esp,0x10
c0010177:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001017e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010186:	74 20                	je     c00101a8 <ACPI::open(int, int, void*)+0x3e8>
c0010188:	83 ec 0c             	sub    esp,0xc
c001018b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010192:	e8 cd bc ff ff       	call   c000be64 <File::exists()>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	0f b6 c0             	movzx  eax,al
c001019d:	85 c0                	test   eax,eax
c001019f:	74 07                	je     c00101a8 <ACPI::open(int, int, void*)+0x3e8>
c00101a1:	b0 01                	mov    al,0x1
c00101a3:	eb 07                	jmp    c00101ac <ACPI::open(int, int, void*)+0x3ec>
c00101a5:	8d 76 00             	lea    esi,[esi+0x0]
c00101a8:	b0 00                	mov    al,0x0
c00101aa:	66 90                	xchg   ax,ax
c00101ac:	0f b6 c0             	movzx  eax,al
c00101af:	85 c0                	test   eax,eax
c00101b1:	74 25                	je     c00101d8 <ACPI::open(int, int, void*)+0x418>
c00101b3:	83 ec 08             	sub    esp,0x8
c00101b6:	6a 01                	push   0x1
c00101b8:	68 17 21 02 c0       	push   0xc0022117
c00101bd:	e8 95 54 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c00101c2:	83 c4 10             	add    esp,0x10
c00101c5:	83 ec 08             	sub    esp,0x8
c00101c8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00101cf:	50                   	push   eax
c00101d0:	e8 b3 56 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101e0:	74 2a                	je     c001020c <ACPI::open(int, int, void*)+0x44c>
c00101e2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101ea:	74 20                	je     c001020c <ACPI::open(int, int, void*)+0x44c>
c00101ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00101f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f5:	83 c0 08             	add    eax,0x8
c00101f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010204:	ff d0                	call   eax
c0010206:	83 c4 10             	add    esp,0x10
c0010209:	8d 76 00             	lea    esi,[esi+0x0]
c001020c:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c0010211:	83 ec 08             	sub    esp,0x8
c0010214:	68 34 21 02 c0       	push   0xc0022134
c0010219:	50                   	push   eax
c001021a:	e8 c1 f1 ff ff       	call   c000f3e0 <findDataTable(unsigned char*, char*)>
c001021f:	83 c4 10             	add    esp,0x10
c0010222:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010229:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010231:	74 19                	je     c001024c <ACPI::open(int, int, void*)+0x48c>
c0010233:	83 ec 08             	sub    esp,0x8
c0010236:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001023d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010244:	e8 13 fb ff ff       	call   c000fd5c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010249:	83 c4 10             	add    esp,0x10
c001024c:	b8 00 00 00 00       	mov    eax,0x0
c0010251:	81 c4 70 01 00 00    	add    esp,0x170
c0010257:	5b                   	pop    ebx
c0010258:	5e                   	pop    esi
c0010259:	5f                   	pop    edi
c001025a:	c3                   	ret    
c001025b:	90                   	nop

c001025c <CPU::close(int, int, void*)>:
c001025c:	31 c0                	xor    eax,eax
c001025e:	c3                   	ret    
c001025f:	90                   	nop

c0010260 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010260:	60                   	pusha  
c0010261:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010269:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001026d:	9c                   	pushf  
c001026e:	fa                   	cli    
c001026f:	0f 09                	wbinvd 
c0010271:	0f 30                	wrmsr  
c0010273:	9d                   	popf   
c0010274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010278:	89 02                	mov    DWORD PTR [edx],eax
c001027a:	61                   	popa   
c001027b:	c3                   	ret    

c001027c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001027c:	60                   	pusha  
c001027d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010281:	9c                   	pushf  
c0010282:	fa                   	cli    
c0010283:	0f 09                	wbinvd 
c0010285:	31 c0                	xor    eax,eax
c0010287:	31 d2                	xor    edx,edx
c0010289:	0f 32                	rdmsr  
c001028b:	9d                   	popf   
c001028c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010290:	89 02                	mov    DWORD PTR [edx],eax
c0010292:	61                   	popa   
c0010293:	c3                   	ret    

c0010294 <CPU::AMD_K6_writeback(int, int, int)>:
c0010294:	56                   	push   esi
c0010295:	53                   	push   ebx
c0010296:	83 ec 10             	sub    esp,0x10
c0010299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001029d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00102a2:	75 5d                	jne    c0010301 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102a4:	83 f8 08             	cmp    eax,0x8
c00102a7:	75 09                	jne    c00102b2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00102a9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00102ae:	7e 13                	jle    c00102c3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102b0:	eb 30                	jmp    c00102e2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102b2:	83 f8 06             	cmp    eax,0x6
c00102b5:	7c 4a                	jl     c0010301 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102b7:	83 f8 07             	cmp    eax,0x7
c00102ba:	7e 07                	jle    c00102c3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102bc:	83 f8 09             	cmp    eax,0x9
c00102bf:	74 21                	je     c00102e2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102c1:	eb 3e                	jmp    c0010301 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102c3:	89 e6                	mov    esi,esp
c00102c5:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00102cb:	56                   	push   esi
c00102cc:	c1 eb 15             	shr    ebx,0x15
c00102cf:	68 82 00 00 c0       	push   0xc0000082
c00102d4:	83 e3 7e             	and    ebx,0x7e
c00102d7:	e8 a0 ff ff ff       	call   c001027c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102dc:	56                   	push   esi
c00102dd:	6a 00                	push   0x0
c00102df:	53                   	push   ebx
c00102e0:	eb 12                	jmp    c00102f4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102e2:	89 e3                	mov    ebx,esp
c00102e4:	53                   	push   ebx
c00102e5:	68 82 00 00 c0       	push   0xc0000082
c00102ea:	e8 8d ff ff ff       	call   c001027c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102ef:	53                   	push   ebx
c00102f0:	6a 00                	push   0x0
c00102f2:	6a 00                	push   0x0
c00102f4:	68 82 00 00 c0       	push   0xc0000082
c00102f9:	e8 62 ff ff ff       	call   c0010260 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102fe:	83 c4 18             	add    esp,0x18
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	5b                   	pop    ebx
c0010305:	5e                   	pop    esi
c0010306:	c3                   	ret    
c0010307:	90                   	nop

c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010308:	55                   	push   ebp
c0010309:	57                   	push   edi
c001030a:	56                   	push   esi
c001030b:	53                   	push   ebx
c001030c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010310:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010314:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010318:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001031c:	39 05 f8 36 02 c0    	cmp    DWORD PTR ds:0xc00236f8,eax
c0010322:	75 23                	jne    c0010347 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010324:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010329:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001032d:	89 06                	mov    DWORD PTR [esi],eax
c001032f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0010334:	89 07                	mov    DWORD PTR [edi],eax
c0010336:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c001033b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001033e:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010343:	89 02                	mov    DWORD PTR [edx],eax
c0010345:	eb 3f                	jmp    c0010386 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010347:	31 c9                	xor    ecx,ecx
c0010349:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034d:	0f a2                	cpuid  
c001034f:	89 06                	mov    DWORD PTR [esi],eax
c0010351:	89 1f                	mov    DWORD PTR [edi],ebx
c0010353:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010357:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001035a:	89 10                	mov    DWORD PTR [eax],edx
c001035c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010360:	a3 f8 36 02 c0       	mov    ds:0xc00236f8,eax
c0010365:	8b 06                	mov    eax,DWORD PTR [esi]
c0010367:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c001036c:	8b 07                	mov    eax,DWORD PTR [edi]
c001036e:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010373:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010376:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c001037b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001037f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010381:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010386:	5b                   	pop    ebx
c0010387:	5e                   	pop    esi
c0010388:	5f                   	pop    edi
c0010389:	5d                   	pop    ebp
c001038a:	c3                   	ret    
c001038b:	90                   	nop

c001038c <CPU::cpuidCheckEDX(unsigned int)>:
c001038c:	83 ec 10             	sub    esp,0x10
c001038f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010393:	50                   	push   eax
c0010394:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010398:	50                   	push   eax
c0010399:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039d:	50                   	push   eax
c001039e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a2:	50                   	push   eax
c00103a3:	6a 01                	push   0x1
c00103a5:	e8 5e ff ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ae:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00103b2:	0f 95 c0             	setne  al
c00103b5:	83 c4 24             	add    esp,0x24
c00103b8:	c3                   	ret    
c00103b9:	90                   	nop

c00103ba <CPU::cpuidCheckECX(unsigned int)>:
c00103ba:	83 ec 10             	sub    esp,0x10
c00103bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c1:	50                   	push   eax
c00103c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c6:	50                   	push   eax
c00103c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103cb:	50                   	push   eax
c00103cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d0:	50                   	push   eax
c00103d1:	6a 01                	push   0x1
c00103d3:	e8 30 ff ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103dc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103e0:	0f 95 c0             	setne  al
c00103e3:	83 c4 24             	add    esp,0x24
c00103e6:	c3                   	ret    
c00103e7:	90                   	nop

c00103e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ef:	50                   	push   eax
c00103f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f4:	50                   	push   eax
c00103f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f9:	50                   	push   eax
c00103fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103fe:	50                   	push   eax
c00103ff:	6a 07                	push   0x7
c0010401:	e8 02 ff ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001040a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001040e:	0f 95 c0             	setne  al
c0010411:	83 c4 24             	add    esp,0x24
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010416:	83 ec 10             	sub    esp,0x10
c0010419:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001041d:	50                   	push   eax
c001041e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010422:	50                   	push   eax
c0010423:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010427:	50                   	push   eax
c0010428:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001042c:	50                   	push   eax
c001042d:	6a 07                	push   0x7
c001042f:	e8 d4 fe ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010434:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010438:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001043c:	0f 95 c0             	setne  al
c001043f:	83 c4 24             	add    esp,0x24
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <CPU::CPU()>:
c0010444:	83 ec 0c             	sub    esp,0xc
c0010447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044b:	83 ec 08             	sub    esp,0x8
c001044e:	68 59 22 02 c0       	push   0xc0022259
c0010453:	50                   	push   eax
c0010454:	e8 39 c7 ff ff       	call   c000cb92 <Device::Device(char const*)>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	ba ec 22 02 c0       	mov    edx,0xc00222ec
c0010461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010465:	89 10                	mov    DWORD PTR [eax],edx
c0010467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010479:	05 78 01 00 00       	add    eax,0x178
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	50                   	push   eax
c0010482:	e8 d5 6e ff ff       	call   c000735c <GDT::GDT()>
c0010487:	83 c4 10             	add    esp,0x10
c001048a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001048e:	05 7c 09 00 00       	add    eax,0x97c
c0010493:	83 ec 0c             	sub    esp,0xc
c0010496:	50                   	push   eax
c0010497:	e8 10 71 ff ff       	call   c00075ac <IDT::IDT()>
c001049c:	83 c4 10             	add    esp,0x10
c001049f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a3:	05 7c 11 00 00       	add    eax,0x117c
c00104a8:	83 ec 0c             	sub    esp,0xc
c00104ab:	50                   	push   eax
c00104ac:	e8 93 8a ff ff       	call   c0008f44 <TSS::TSS()>
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00104bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c3:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00104cd:	90                   	nop
c00104ce:	83 c4 0c             	add    esp,0xc
c00104d1:	c3                   	ret    

c00104d2 <CPU::displayFeatures()>:
c00104d2:	c3                   	ret    
c00104d3:	90                   	nop

c00104d4 <CPU::detectFeatures()>:
c00104d4:	55                   	push   ebp
c00104d5:	57                   	push   edi
c00104d6:	56                   	push   esi
c00104d7:	53                   	push   ebx
c00104d8:	83 ec 30             	sub    esp,0x30
c00104db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104df:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104e9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104f0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104f6:	6a 0d                	push   0xd
c00104f8:	6a 00                	push   0x0
c00104fa:	55                   	push   ebp
c00104fb:	e8 f0 ff fe ff       	call   c00004f0 <memset>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010508:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001050f:	0f 84 db 05 00 00    	je     c0010af0 <CPU::detectFeatures()+0x61c>
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	89 ef                	mov    edi,ebp
c001051a:	6a 10                	push   0x10
c001051c:	e8 6b fe ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0010521:	83 e0 01             	and    eax,0x1
c0010524:	8d 14 00             	lea    edx,[eax+eax*1]
c0010527:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052d:	83 e0 fd             	and    eax,0xfffffffd
c0010530:	09 d0                	or     eax,edx
c0010532:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010538:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001053f:	e8 48 fe ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0010544:	83 e0 01             	and    eax,0x1
c0010547:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001054e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010554:	83 e0 fb             	and    eax,0xfffffffb
c0010557:	09 d0                	or     eax,edx
c0010559:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001055f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010566:	e8 21 fe ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c001056b:	83 e0 01             	and    eax,0x1
c001056e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010575:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001057b:	83 e0 f7             	and    eax,0xfffffff7
c001057e:	09 d0                	or     eax,edx
c0010580:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010586:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001058d:	e8 fa fd ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c0010592:	83 e0 01             	and    eax,0x1
c0010595:	c1 e0 04             	shl    eax,0x4
c0010598:	89 c2                	mov    edx,eax
c001059a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105a0:	83 e0 ef             	and    eax,0xffffffef
c00105a3:	09 d0                	or     eax,edx
c00105a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105ab:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00105b2:	e8 d5 fd ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c00105b7:	83 e0 01             	and    eax,0x1
c00105ba:	c1 e0 05             	shl    eax,0x5
c00105bd:	89 c2                	mov    edx,eax
c00105bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105c5:	83 e0 df             	and    eax,0xffffffdf
c00105c8:	09 d0                	or     eax,edx
c00105ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105d0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00105d7:	e8 b0 fd ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c00105dc:	83 e0 01             	and    eax,0x1
c00105df:	8d 14 00             	lea    edx,[eax+eax*1]
c00105e2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105e8:	83 e0 fd             	and    eax,0xfffffffd
c00105eb:	09 d0                	or     eax,edx
c00105ed:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105f3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105fa:	e8 8d fd ff ff       	call   c001038c <CPU::cpuidCheckEDX(unsigned int)>
c00105ff:	83 e0 01             	and    eax,0x1
c0010602:	c1 e0 06             	shl    eax,0x6
c0010605:	89 c2                	mov    edx,eax
c0010607:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001060d:	83 e0 bf             	and    eax,0xffffffbf
c0010610:	09 d0                	or     eax,edx
c0010612:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010618:	58                   	pop    eax
c0010619:	8d 44 24 28          	lea    eax,[esp+0x28]
c001061d:	50                   	push   eax
c001061e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010622:	50                   	push   eax
c0010623:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010627:	56                   	push   esi
c0010628:	8d 44 24 28          	lea    eax,[esp+0x28]
c001062c:	50                   	push   eax
c001062d:	6a 00                	push   0x0
c001062f:	e8 d4 fc ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010634:	b8 04 00 00 00       	mov    eax,0x4
c0010639:	89 c1                	mov    ecx,eax
c001063b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001063d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010643:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010647:	89 c1                	mov    ecx,eax
c0010649:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001064b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010651:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010655:	89 c1                	mov    ecx,eax
c0010657:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010659:	83 c4 18             	add    esp,0x18
c001065c:	68 68 21 02 c0       	push   0xc0022168
c0010661:	55                   	push   ebp
c0010662:	e8 e9 00 ff ff       	call   c0000750 <strcmp>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	85 c0                	test   eax,eax
c001066c:	75 0f                	jne    c001067d <CPU::detectFeatures()+0x1a9>
c001066e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010678:	e9 22 02 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c001067d:	50                   	push   eax
c001067e:	50                   	push   eax
c001067f:	68 75 21 02 c0       	push   0xc0022175
c0010684:	55                   	push   ebp
c0010685:	e8 c6 00 ff ff       	call   c0000750 <strcmp>
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	85 c0                	test   eax,eax
c001068f:	74 dd                	je     c001066e <CPU::detectFeatures()+0x19a>
c0010691:	50                   	push   eax
c0010692:	50                   	push   eax
c0010693:	68 82 21 02 c0       	push   0xc0022182
c0010698:	55                   	push   ebp
c0010699:	e8 b2 00 ff ff       	call   c0000750 <strcmp>
c001069e:	83 c4 10             	add    esp,0x10
c00106a1:	85 c0                	test   eax,eax
c00106a3:	74 2a                	je     c00106cf <CPU::detectFeatures()+0x1fb>
c00106a5:	50                   	push   eax
c00106a6:	50                   	push   eax
c00106a7:	68 8f 21 02 c0       	push   0xc002218f
c00106ac:	55                   	push   ebp
c00106ad:	e8 9e 00 ff ff       	call   c0000750 <strcmp>
c00106b2:	83 c4 10             	add    esp,0x10
c00106b5:	85 c0                	test   eax,eax
c00106b7:	74 16                	je     c00106cf <CPU::detectFeatures()+0x1fb>
c00106b9:	50                   	push   eax
c00106ba:	50                   	push   eax
c00106bb:	68 9c 21 02 c0       	push   0xc002219c
c00106c0:	55                   	push   ebp
c00106c1:	e8 8a 00 ff ff       	call   c0000750 <strcmp>
c00106c6:	83 c4 10             	add    esp,0x10
c00106c9:	85 c0                	test   eax,eax
c00106cb:	74 48                	je     c0010715 <CPU::detectFeatures()+0x241>
c00106cd:	eb 0f                	jmp    c00106de <CPU::detectFeatures()+0x20a>
c00106cf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106d9:	e9 c1 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c00106de:	50                   	push   eax
c00106df:	50                   	push   eax
c00106e0:	68 a9 21 02 c0       	push   0xc00221a9
c00106e5:	55                   	push   ebp
c00106e6:	e8 65 00 ff ff       	call   c0000750 <strcmp>
c00106eb:	83 c4 10             	add    esp,0x10
c00106ee:	85 c0                	test   eax,eax
c00106f0:	74 23                	je     c0010715 <CPU::detectFeatures()+0x241>
c00106f2:	57                   	push   edi
c00106f3:	57                   	push   edi
c00106f4:	68 b6 21 02 c0       	push   0xc00221b6
c00106f9:	55                   	push   ebp
c00106fa:	e8 51 00 ff ff       	call   c0000750 <strcmp>
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	85 c0                	test   eax,eax
c0010704:	75 1e                	jne    c0010724 <CPU::detectFeatures()+0x250>
c0010706:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010710:	e9 8a 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010715:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001071f:	e9 7b 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010724:	56                   	push   esi
c0010725:	56                   	push   esi
c0010726:	68 c3 21 02 c0       	push   0xc00221c3
c001072b:	55                   	push   ebp
c001072c:	e8 1f 00 ff ff       	call   c0000750 <strcmp>
c0010731:	83 c4 10             	add    esp,0x10
c0010734:	85 c0                	test   eax,eax
c0010736:	75 0f                	jne    c0010747 <CPU::detectFeatures()+0x273>
c0010738:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010742:	e9 58 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010747:	51                   	push   ecx
c0010748:	51                   	push   ecx
c0010749:	68 82 21 02 c0       	push   0xc0022182
c001074e:	55                   	push   ebp
c001074f:	e8 fc ff fe ff       	call   c0000750 <strcmp>
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	85 c0                	test   eax,eax
c0010759:	75 0f                	jne    c001076a <CPU::detectFeatures()+0x296>
c001075b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010765:	e9 35 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c001076a:	52                   	push   edx
c001076b:	52                   	push   edx
c001076c:	68 d0 21 02 c0       	push   0xc00221d0
c0010771:	55                   	push   ebp
c0010772:	e8 d9 ff fe ff       	call   c0000750 <strcmp>
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	85 c0                	test   eax,eax
c001077c:	75 0f                	jne    c001078d <CPU::detectFeatures()+0x2b9>
c001077e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010788:	e9 12 01 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c001078d:	50                   	push   eax
c001078e:	50                   	push   eax
c001078f:	68 dd 21 02 c0       	push   0xc00221dd
c0010794:	55                   	push   ebp
c0010795:	e8 b6 ff fe ff       	call   c0000750 <strcmp>
c001079a:	83 c4 10             	add    esp,0x10
c001079d:	85 c0                	test   eax,eax
c001079f:	75 0f                	jne    c00107b0 <CPU::detectFeatures()+0x2dc>
c00107a1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00107ab:	e9 ef 00 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c00107b0:	50                   	push   eax
c00107b1:	50                   	push   eax
c00107b2:	68 ea 21 02 c0       	push   0xc00221ea
c00107b7:	55                   	push   ebp
c00107b8:	e8 93 ff fe ff       	call   c0000750 <strcmp>
c00107bd:	83 c4 10             	add    esp,0x10
c00107c0:	85 c0                	test   eax,eax
c00107c2:	75 0f                	jne    c00107d3 <CPU::detectFeatures()+0x2ff>
c00107c4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00107ce:	e9 cc 00 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c00107d3:	50                   	push   eax
c00107d4:	50                   	push   eax
c00107d5:	68 f7 21 02 c0       	push   0xc00221f7
c00107da:	55                   	push   ebp
c00107db:	e8 70 ff fe ff       	call   c0000750 <strcmp>
c00107e0:	83 c4 10             	add    esp,0x10
c00107e3:	85 c0                	test   eax,eax
c00107e5:	75 0f                	jne    c00107f6 <CPU::detectFeatures()+0x322>
c00107e7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107f1:	e9 a9 00 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c00107f6:	50                   	push   eax
c00107f7:	50                   	push   eax
c00107f8:	68 04 22 02 c0       	push   0xc0022204
c00107fd:	55                   	push   ebp
c00107fe:	e8 4d ff fe ff       	call   c0000750 <strcmp>
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	85 c0                	test   eax,eax
c0010808:	75 0f                	jne    c0010819 <CPU::detectFeatures()+0x345>
c001080a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010814:	e9 86 00 00 00       	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010819:	50                   	push   eax
c001081a:	50                   	push   eax
c001081b:	68 11 22 02 c0       	push   0xc0022211
c0010820:	55                   	push   ebp
c0010821:	e8 2a ff fe ff       	call   c0000750 <strcmp>
c0010826:	83 c4 10             	add    esp,0x10
c0010829:	85 c0                	test   eax,eax
c001082b:	75 0c                	jne    c0010839 <CPU::detectFeatures()+0x365>
c001082d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010837:	eb 66                	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010839:	50                   	push   eax
c001083a:	50                   	push   eax
c001083b:	68 1e 22 02 c0       	push   0xc002221e
c0010840:	55                   	push   ebp
c0010841:	e8 0a ff fe ff       	call   c0000750 <strcmp>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	85 c0                	test   eax,eax
c001084b:	75 0c                	jne    c0010859 <CPU::detectFeatures()+0x385>
c001084d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010857:	eb 46                	jmp    c001089f <CPU::detectFeatures()+0x3cb>
c0010859:	57                   	push   edi
c001085a:	57                   	push   edi
c001085b:	68 2b 22 02 c0       	push   0xc002222b
c0010860:	55                   	push   ebp
c0010861:	e8 ea fe fe ff       	call   c0000750 <strcmp>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	85 c0                	test   eax,eax
c001086b:	74 e0                	je     c001084d <CPU::detectFeatures()+0x379>
c001086d:	56                   	push   esi
c001086e:	56                   	push   esi
c001086f:	68 38 22 02 c0       	push   0xc0022238
c0010874:	55                   	push   ebp
c0010875:	e8 d6 fe fe ff       	call   c0000750 <strcmp>
c001087a:	83 c4 10             	add    esp,0x10
c001087d:	85 c0                	test   eax,eax
c001087f:	74 cc                	je     c001084d <CPU::detectFeatures()+0x379>
c0010881:	51                   	push   ecx
c0010882:	51                   	push   ecx
c0010883:	68 45 22 02 c0       	push   0xc0022245
c0010888:	55                   	push   ebp
c0010889:	e8 c2 fe fe ff       	call   c0000750 <strcmp>
c001088e:	83 c4 10             	add    esp,0x10
c0010891:	85 c0                	test   eax,eax
c0010893:	74 b8                	je     c001084d <CPU::detectFeatures()+0x379>
c0010895:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001089f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00108a4:	0f 86 be 00 00 00    	jbe    c0010968 <CPU::detectFeatures()+0x494>
c00108aa:	83 ec 0c             	sub    esp,0xc
c00108ad:	68 80 00 00 00       	push   0x80
c00108b2:	e8 31 fb ff ff       	call   c00103e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108b7:	83 e0 01             	and    eax,0x1
c00108ba:	c1 e0 06             	shl    eax,0x6
c00108bd:	89 c2                	mov    edx,eax
c00108bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108c5:	83 e0 bf             	and    eax,0xffffffbf
c00108c8:	09 d0                	or     eax,edx
c00108ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108d0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00108d7:	e8 0c fb ff ff       	call   c00103e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108dc:	83 e0 01             	and    eax,0x1
c00108df:	c1 e0 04             	shl    eax,0x4
c00108e2:	89 c2                	mov    edx,eax
c00108e4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108ea:	83 e0 ef             	and    eax,0xffffffef
c00108ed:	09 d0                	or     eax,edx
c00108ef:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108f5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108fc:	e8 e7 fa ff ff       	call   c00103e8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010901:	89 c2                	mov    edx,eax
c0010903:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010909:	c1 e2 07             	shl    edx,0x7
c001090c:	83 e0 7f             	and    eax,0x7f
c001090f:	09 d0                	or     eax,edx
c0010911:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010917:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001091e:	e8 f3 fa ff ff       	call   c0010416 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010923:	83 e0 01             	and    eax,0x1
c0010926:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001092d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010933:	83 e0 f7             	and    eax,0xfffffff7
c0010936:	09 d0                	or     eax,edx
c0010938:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001093e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010945:	e8 cc fa ff ff       	call   c0010416 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001094a:	83 c4 10             	add    esp,0x10
c001094d:	83 e0 01             	and    eax,0x1
c0010950:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010957:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001095d:	83 e0 fb             	and    eax,0xfffffffb
c0010960:	09 d0                	or     eax,edx
c0010962:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001096f:	50                   	push   eax
c0010970:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010974:	50                   	push   eax
c0010975:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010979:	57                   	push   edi
c001097a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001097e:	56                   	push   esi
c001097f:	6a 01                	push   0x1
c0010981:	e8 82 f9 ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001098a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010990:	89 c1                	mov    ecx,eax
c0010992:	83 e2 f0             	and    edx,0xfffffff0
c0010995:	83 e1 0f             	and    ecx,0xf
c0010998:	09 ca                	or     edx,ecx
c001099a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00109a0:	89 c2                	mov    edx,eax
c00109a2:	c1 ea 04             	shr    edx,0x4
c00109a5:	83 e2 0f             	and    edx,0xf
c00109a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109ac:	89 d1                	mov    ecx,edx
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00109b7:	c1 e1 06             	shl    ecx,0x6
c00109ba:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00109c0:	09 ca                	or     edx,ecx
c00109c2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00109c9:	89 c2                	mov    edx,eax
c00109cb:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00109d1:	c1 ea 08             	shr    edx,0x8
c00109d4:	83 e1 3f             	and    ecx,0x3f
c00109d7:	83 e2 0f             	and    edx,0xf
c00109da:	89 d5                	mov    ebp,edx
c00109dc:	83 e5 03             	and    ebp,0x3
c00109df:	c1 e5 06             	shl    ebp,0x6
c00109e2:	09 e9                	or     ecx,ebp
c00109e4:	89 d5                	mov    ebp,edx
c00109e6:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109ec:	c1 ed 02             	shr    ebp,0x2
c00109ef:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109f5:	83 e1 c0             	and    ecx,0xffffffc0
c00109f8:	09 e9                	or     ecx,ebp
c00109fa:	89 c5                	mov    ebp,eax
c00109fc:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a02:	c1 ed 08             	shr    ebp,0x8
c0010a05:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a0b:	83 e5 30             	and    ebp,0x30
c0010a0e:	83 e1 cf             	and    ecx,0xffffffcf
c0010a11:	09 e9                	or     ecx,ebp
c0010a13:	83 fa 06             	cmp    edx,0x6
c0010a16:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a1c:	74 05                	je     c0010a23 <CPU::detectFeatures()+0x54f>
c0010a1e:	83 fa 0f             	cmp    edx,0xf
c0010a21:	75 64                	jne    c0010a87 <CPU::detectFeatures()+0x5b3>
c0010a23:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a29:	89 c1                	mov    ecx,eax
c0010a2b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a31:	c1 e9 10             	shr    ecx,0x10
c0010a34:	c1 e1 04             	shl    ecx,0x4
c0010a37:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a3b:	0f b6 c9             	movzx  ecx,cl
c0010a3e:	c1 e1 06             	shl    ecx,0x6
c0010a41:	09 e9                	or     ecx,ebp
c0010a43:	83 fa 0f             	cmp    edx,0xf
c0010a46:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a4d:	75 38                	jne    c0010a87 <CPU::detectFeatures()+0x5b3>
c0010a4f:	c1 e8 14             	shr    eax,0x14
c0010a52:	83 c0 0f             	add    eax,0xf
c0010a55:	0f b6 c0             	movzx  eax,al
c0010a58:	89 c2                	mov    edx,eax
c0010a5a:	c1 e8 02             	shr    eax,0x2
c0010a5d:	83 e2 03             	and    edx,0x3
c0010a60:	89 d1                	mov    ecx,edx
c0010a62:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a68:	c1 e1 06             	shl    ecx,0x6
c0010a6b:	83 e2 3f             	and    edx,0x3f
c0010a6e:	09 ca                	or     edx,ecx
c0010a70:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a76:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a7c:	83 e2 c0             	and    edx,0xffffffc0
c0010a7f:	09 d0                	or     eax,edx
c0010a81:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a90:	83 c8 07             	or     eax,0x7
c0010a93:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a99:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a9d:	50                   	push   eax
c0010a9e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010aa2:	55                   	push   ebp
c0010aa3:	57                   	push   edi
c0010aa4:	56                   	push   esi
c0010aa5:	68 00 00 00 80       	push   0x80000000
c0010aaa:	e8 59 f8 ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010aaf:	83 c4 20             	add    esp,0x20
c0010ab2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010aba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010abe:	76 1e                	jbe    c0010ade <CPU::detectFeatures()+0x60a>
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	50                   	push   eax
c0010ac4:	55                   	push   ebp
c0010ac5:	57                   	push   edi
c0010ac6:	56                   	push   esi
c0010ac7:	68 01 00 00 80       	push   0x80000001
c0010acc:	e8 37 f8 ff ff       	call   c0010308 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010ad1:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010adb:	83 c4 20             	add    esp,0x20
c0010ade:	52                   	push   edx
c0010adf:	52                   	push   edx
c0010ae0:	68 51 22 02 c0       	push   0xc0022251
c0010ae5:	53                   	push   ebx
c0010ae6:	e8 99 c0 ff ff       	call   c000cb84 <Device::setName(char const*)>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	eb 69                	jmp    c0010b59 <CPU::detectFeatures()+0x685>
c0010af0:	50                   	push   eax
c0010af1:	50                   	push   eax
c0010af2:	68 b6 21 02 c0       	push   0xc00221b6
c0010af7:	55                   	push   ebp
c0010af8:	e8 43 fb fe ff       	call   c0000640 <strcpy>
c0010afd:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b07:	e8 b7 f6 fe ff       	call   c00001c3 <is486>
c0010b0c:	83 c4 10             	add    esp,0x10
c0010b0f:	85 c0                	test   eax,eax
c0010b11:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b17:	74 1f                	je     c0010b38 <CPU::detectFeatures()+0x664>
c0010b19:	83 c8 07             	or     eax,0x7
c0010b1c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b22:	0f 20 c0             	mov    eax,cr0
c0010b25:	83 e0 14             	and    eax,0x14
c0010b28:	83 f8 04             	cmp    eax,0x4
c0010b2b:	75 10                	jne    c0010b3d <CPU::detectFeatures()+0x669>
c0010b2d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b33:	83 e0 fd             	and    eax,0xfffffffd
c0010b36:	eb 1b                	jmp    c0010b53 <CPU::detectFeatures()+0x67f>
c0010b38:	83 e0 f8             	and    eax,0xfffffff8
c0010b3b:	eb df                	jmp    c0010b1c <CPU::detectFeatures()+0x648>
c0010b3d:	e8 5c f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b42:	83 e0 01             	and    eax,0x1
c0010b45:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b48:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b4e:	83 e0 fd             	and    eax,0xfffffffd
c0010b51:	09 d0                	or     eax,edx
c0010b53:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b59:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b60:	74 17                	je     c0010b79 <CPU::detectFeatures()+0x6a5>
c0010b62:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b68:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b6e:	83 c8 10             	or     eax,0x10
c0010b71:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b77:	eb 20                	jmp    c0010b99 <CPU::detectFeatures()+0x6c5>
c0010b79:	e8 20 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b7e:	83 e0 01             	and    eax,0x1
c0010b81:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b84:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b8a:	83 e0 fd             	and    eax,0xfffffffd
c0010b8d:	09 d0                	or     eax,edx
c0010b8f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b95:	a8 02                	test   al,0x2
c0010b97:	75 c9                	jne    c0010b62 <CPU::detectFeatures()+0x68e>
c0010b99:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010ba0:	83 c4 2c             	add    esp,0x2c
c0010ba3:	5b                   	pop    ebx
c0010ba4:	5e                   	pop    esi
c0010ba5:	5f                   	pop    edi
c0010ba6:	5d                   	pop    ebp
c0010ba7:	c3                   	ret    

c0010ba8 <CPU::setupSMEP()>:
c0010ba8:	0f 20 e0             	mov    eax,cr4
c0010bab:	0d 00 00 10 00       	or     eax,0x100000
c0010bb0:	0f 22 e0             	mov    cr4,eax
c0010bb3:	c3                   	ret    

c0010bb4 <CPU::setupUMIP()>:
c0010bb4:	0f 20 e0             	mov    eax,cr4
c0010bb7:	80 cc 08             	or     ah,0x8
c0010bba:	0f 22 e0             	mov    cr4,eax
c0010bbd:	c3                   	ret    

c0010bbe <CPU::setupTSC()>:
c0010bbe:	0f 20 e0             	mov    eax,cr4
c0010bc1:	83 c8 04             	or     eax,0x4
c0010bc4:	0f 22 e0             	mov    cr4,eax
c0010bc7:	c3                   	ret    

c0010bc8 <CPU::setupLargePages()>:
c0010bc8:	0f 20 e0             	mov    eax,cr4
c0010bcb:	83 c8 10             	or     eax,0x10
c0010bce:	0f 22 e0             	mov    cr4,eax
c0010bd1:	c3                   	ret    

c0010bd2 <CPU::setupPAT()>:
c0010bd2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010bd7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010bde:	74 2c                	je     c0010c0c <CPU::setupPAT()+0x3a>
c0010be0:	53                   	push   ebx
c0010be1:	83 ec 10             	sub    esp,0x10
c0010be4:	68 77 02 00 00       	push   0x277
c0010be9:	50                   	push   eax
c0010bea:	e8 d1 64 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010bef:	83 e2 f8             	and    edx,0xfffffff8
c0010bf2:	83 ca 01             	or     edx,0x1
c0010bf5:	52                   	push   edx
c0010bf6:	50                   	push   eax
c0010bf7:	68 77 02 00 00       	push   0x277
c0010bfc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c02:	e8 e5 64 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c07:	83 c4 28             	add    esp,0x28
c0010c0a:	5b                   	pop    ebx
c0010c0b:	c3                   	ret    
c0010c0c:	c3                   	ret    
c0010c0d:	90                   	nop

c0010c0e <CPU::setupMTRR()>:
c0010c0e:	c3                   	ret    
c0010c0f:	90                   	nop

c0010c10 <CPU::setupGlobalPages()>:
c0010c10:	0f 20 e0             	mov    eax,cr4
c0010c13:	0c 80                	or     al,0x80
c0010c15:	0f 22 e0             	mov    cr4,eax
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop

c0010c1a <CPU::allowUsermodeDataAccess()>:
c0010c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c1e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c25:	74 03                	je     c0010c2a <CPU::allowUsermodeDataAccess()+0x10>
c0010c27:	0f 01 cb             	stac   
c0010c2a:	c3                   	ret    
c0010c2b:	90                   	nop

c0010c2c <CPU::prohibitUsermodeDataAccess()>:
c0010c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c30:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c37:	74 03                	je     c0010c3c <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c39:	0f 01 ca             	clac   
c0010c3c:	c3                   	ret    
c0010c3d:	90                   	nop

c0010c3e <CPU::setupSMAP()>:
c0010c3e:	0f 20 e0             	mov    eax,cr4
c0010c41:	0d 00 00 20 00       	or     eax,0x200000
c0010c46:	0f 22 e0             	mov    cr4,eax
c0010c49:	eb e1                	jmp    c0010c2c <CPU::prohibitUsermodeDataAccess()>
c0010c4b:	90                   	nop

c0010c4c <CPU::setupFeatures()>:
c0010c4c:	53                   	push   ebx
c0010c4d:	83 ec 08             	sub    esp,0x8
c0010c50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c54:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c5b:	74 18                	je     c0010c75 <CPU::setupFeatures()+0x29>
c0010c5d:	83 ec 0c             	sub    esp,0xc
c0010c60:	68 5d 22 02 c0       	push   0xc002225d
c0010c65:	e8 db 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c6d:	e8 42 ff ff ff       	call   c0010bb4 <CPU::setupUMIP()>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c7c:	74 18                	je     c0010c96 <CPU::setupFeatures()+0x4a>
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	68 67 22 02 c0       	push   0xc0022267
c0010c86:	e8 ba 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c8e:	e8 2b ff ff ff       	call   c0010bbe <CPU::setupTSC()>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c9d:	74 18                	je     c0010cb7 <CPU::setupFeatures()+0x6b>
c0010c9f:	83 ec 0c             	sub    esp,0xc
c0010ca2:	68 70 22 02 c0       	push   0xc0022270
c0010ca7:	e8 99 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010caf:	e8 14 ff ff ff       	call   c0010bc8 <CPU::setupLargePages()>
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010cbe:	74 18                	je     c0010cd8 <CPU::setupFeatures()+0x8c>
c0010cc0:	83 ec 0c             	sub    esp,0xc
c0010cc3:	68 79 22 02 c0       	push   0xc0022279
c0010cc8:	e8 78 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ccd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd0:	e8 3b ff ff ff       	call   c0010c10 <CPU::setupGlobalPages()>
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010cdf:	74 18                	je     c0010cf9 <CPU::setupFeatures()+0xad>
c0010ce1:	83 ec 0c             	sub    esp,0xc
c0010ce4:	68 8b 22 02 c0       	push   0xc002228b
c0010ce9:	e8 57 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf1:	e8 dc fe ff ff       	call   c0010bd2 <CPU::setupPAT()>
c0010cf6:	83 c4 10             	add    esp,0x10
c0010cf9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d00:	74 11                	je     c0010d13 <CPU::setupFeatures()+0xc7>
c0010d02:	c7 44 24 10 94 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022294
c0010d0a:	83 c4 08             	add    esp,0x8
c0010d0d:	5b                   	pop    ebx
c0010d0e:	e9 32 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010d13:	83 c4 08             	add    esp,0x8
c0010d16:	5b                   	pop    ebx
c0010d17:	c3                   	ret    

c0010d18 <CPU::open(int, int, void*)>:
c0010d18:	55                   	push   ebp
c0010d19:	57                   	push   edi
c0010d1a:	56                   	push   esi
c0010d1b:	53                   	push   ebx
c0010d1c:	83 ec 18             	sub    esp,0x18
c0010d1f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d27:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d2b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d31:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d37:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d3d:	50                   	push   eax
c0010d3e:	e8 7b 66 ff ff       	call   c00073be <GDT::setup()>
c0010d43:	83 c4 0c             	add    esp,0xc
c0010d46:	6a 00                	push   0x0
c0010d48:	68 ef be ad de       	push   0xdeadbeef
c0010d4d:	55                   	push   ebp
c0010d4e:	e8 35 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010d53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d56:	e8 0d 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010d5b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d64:	e8 b9 68 ff ff       	call   c0007622 <IDT::setup()>
c0010d69:	b8 00 04 00 00       	mov    eax,0x400
c0010d6e:	0f 23 f8             	mov    db7,eax
c0010d71:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d7b:	e8 3f 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d89:	85 f6                	test   esi,esi
c0010d8b:	89 38                	mov    DWORD PTR [eax],edi
c0010d8d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d93:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d96:	74 10                	je     c0010da8 <CPU::open(int, int, void*)+0x90>
c0010d98:	50                   	push   eax
c0010d99:	50                   	push   eax
c0010d9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010da0:	56                   	push   esi
c0010da1:	e8 08 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010da6:	eb 0d                	jmp    c0010db5 <CPU::open(int, int, void*)+0x9d>
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	68 9e 22 02 c0       	push   0xc002229e
c0010db0:	e8 9e 08 00 00       	call   c0011653 <KePanic(char const*)>
c0010db5:	83 c4 10             	add    esp,0x10
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	68 ac 22 02 c0       	push   0xc00222ac
c0010dc0:	e8 8e 01 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0010dc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc8:	e8 07 f7 ff ff       	call   c00104d4 <CPU::detectFeatures()>
c0010dcd:	c7 04 24 cf 22 02 c0 	mov    DWORD PTR [esp],0xc00222cf
c0010dd4:	e8 7a 01 00 00       	call   c0010f53 <KeSetBootMessage(char const*)>
c0010dd9:	e8 af 73 00 00       	call   c001818d <HalInitialise()>
c0010dde:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010de3:	83 e0 10             	and    eax,0x10
c0010de6:	83 f8 01             	cmp    eax,0x1
c0010de9:	19 c0                	sbb    eax,eax
c0010deb:	83 e0 46             	and    eax,0x46
c0010dee:	83 c0 1e             	add    eax,0x1e
c0010df1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010df4:	e8 28 d6 ff ff       	call   c000e421 <setupTimer(int)>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e02:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e09:	74 0c                	je     c0010e17 <CPU::open(int, int, void*)+0xff>
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	53                   	push   ebx
c0010e0f:	e8 38 fe ff ff       	call   c0010c4c <CPU::setupFeatures()>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	83 c4 0c             	add    esp,0xc
c0010e1a:	31 c0                	xor    eax,eax
c0010e1c:	5b                   	pop    ebx
c0010e1d:	5e                   	pop    esi
c0010e1e:	5f                   	pop    edi
c0010e1f:	5d                   	pop    ebp
c0010e20:	c3                   	ret    

c0010e21 <KeInitialiseAtexit()>:
c0010e21:	83 ec 10             	sub    esp,0x10
c0010e24:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e2e:	6a 60                	push   0x60
c0010e30:	6a 00                	push   0x0
c0010e32:	68 20 be 02 c0       	push   0xc002be20
c0010e37:	e8 b4 f6 fe ff       	call   c00004f0 <memset>
c0010e3c:	83 c4 1c             	add    esp,0x1c
c0010e3f:	c3                   	ret    

c0010e40 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e40:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e49:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e54:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e5b:	40                   	inc    eax
c0010e5c:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e61:	83 f8 17             	cmp    eax,0x17
c0010e64:	7e 0d                	jle    c0010e73 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e66:	c7 44 24 04 10 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022310
c0010e6e:	e9 e0 07 00 00       	jmp    c0011653 <KePanic(char const*)>
c0010e73:	c3                   	ret    

c0010e74 <KeExecuteAtexit()>:
c0010e74:	53                   	push   ebx
c0010e75:	31 db                	xor    ebx,ebx
c0010e77:	83 ec 08             	sub    esp,0x8
c0010e7a:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e80:	7e 50                	jle    c0010ed2 <KeExecuteAtexit()+0x5e>
c0010e82:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e89:	85 c0                	test   eax,eax
c0010e8b:	74 42                	je     c0010ecf <KeExecuteAtexit()+0x5b>
c0010e8d:	51                   	push   ecx
c0010e8e:	50                   	push   eax
c0010e8f:	53                   	push   ebx
c0010e90:	68 29 23 02 c0       	push   0xc0022329
c0010e95:	e8 ab 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e9a:	58                   	pop    eax
c0010e9b:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010ea2:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010ea9:	c7 04 24 4b 23 02 c0 	mov    DWORD PTR [esp],0xc002234b
c0010eb0:	e8 90 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010eb5:	c7 04 24 ab 34 02 c0 	mov    DWORD PTR [esp],0xc00234ab
c0010ebc:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010ec7:	e8 79 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ecc:	83 c4 10             	add    esp,0x10
c0010ecf:	43                   	inc    ebx
c0010ed0:	eb a8                	jmp    c0010e7a <KeExecuteAtexit()+0x6>
c0010ed2:	83 c4 08             	add    esp,0x8
c0010ed5:	5b                   	pop    ebx
c0010ed6:	c3                   	ret    

c0010ed7 <KeDisplaySplashScreen()>:
c0010ed7:	55                   	push   ebp
c0010ed8:	bd 05 00 00 00       	mov    ebp,0x5
c0010edd:	57                   	push   edi
c0010ede:	bf 0a 00 00 00       	mov    edi,0xa
c0010ee3:	56                   	push   esi
c0010ee4:	31 f6                	xor    esi,esi
c0010ee6:	53                   	push   ebx
c0010ee7:	31 db                	xor    ebx,ebx
c0010ee9:	83 ec 0c             	sub    esp,0xc
c0010eec:	0f b6 96 00 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc900]
c0010ef3:	89 d0                	mov    eax,edx
c0010ef5:	85 d2                	test   edx,edx
c0010ef7:	74 52                	je     c0010f4b <KeDisplaySplashScreen()+0x74>
c0010ef9:	80 bb 36 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc8ca],0xdb
c0010f00:	75 13                	jne    c0010f15 <KeDisplaySplashScreen()+0x3e>
c0010f02:	0f b6 8b 35 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc8cb]
c0010f09:	83 e1 fe             	and    ecx,0xfffffffe
c0010f0c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f12:	75 01                	jne    c0010f15 <KeDisplaySplashScreen()+0x3e>
c0010f14:	47                   	inc    edi
c0010f15:	83 fa 0d             	cmp    edx,0xd
c0010f18:	74 28                	je     c0010f42 <KeDisplaySplashScreen()+0x6b>
c0010f1a:	83 fa 0a             	cmp    edx,0xa
c0010f1d:	75 0a                	jne    c0010f29 <KeDisplaySplashScreen()+0x52>
c0010f1f:	45                   	inc    ebp
c0010f20:	bf 0a 00 00 00       	mov    edi,0xa
c0010f25:	31 db                	xor    ebx,ebx
c0010f27:	eb 19                	jmp    c0010f42 <KeDisplaySplashScreen()+0x6b>
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f2f:	55                   	push   ebp
c0010f30:	0f be c0             	movsx  eax,al
c0010f33:	52                   	push   edx
c0010f34:	43                   	inc    ebx
c0010f35:	6a 00                	push   0x0
c0010f37:	6a 0e                	push   0xe
c0010f39:	50                   	push   eax
c0010f3a:	e8 cd 7e 00 00       	call   c0018e0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f3f:	83 c4 20             	add    esp,0x20
c0010f42:	46                   	inc    esi
c0010f43:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f49:	75 a1                	jne    c0010eec <KeDisplaySplashScreen()+0x15>
c0010f4b:	83 c4 0c             	add    esp,0xc
c0010f4e:	5b                   	pop    ebx
c0010f4f:	5e                   	pop    esi
c0010f50:	5f                   	pop    edi
c0010f51:	5d                   	pop    ebp
c0010f52:	c3                   	ret    

c0010f53 <KeSetBootMessage(char const*)>:
c0010f53:	57                   	push   edi
c0010f54:	56                   	push   esi
c0010f55:	53                   	push   ebx
c0010f56:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f5c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f63:	68 9e 00 00 00       	push   0x9e
c0010f68:	6a 00                	push   0x0
c0010f6a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f6e:	56                   	push   esi
c0010f6f:	e8 7c f5 fe ff       	call   c00004f0 <memset>
c0010f74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f77:	e8 f4 f5 fe ff       	call   c0000570 <strlen>
c0010f7c:	ba 50 00 00 00       	mov    edx,0x50
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	29 c2                	sub    edx,eax
c0010f86:	31 c9                	xor    ecx,ecx
c0010f88:	83 e2 fe             	and    edx,0xfffffffe
c0010f8b:	01 f2                	add    edx,esi
c0010f8d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f92:	84 c0                	test   al,al
c0010f94:	74 0a                	je     c0010fa0 <KeSetBootMessage(char const*)+0x4d>
c0010f96:	80 cc 0f             	or     ah,0xf
c0010f99:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f9d:	41                   	inc    ecx
c0010f9e:	eb ed                	jmp    c0010f8d <KeSetBootMessage(char const*)+0x3a>
c0010fa0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010fa5:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010faa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fac:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010fb2:	5b                   	pop    ebx
c0010fb3:	5e                   	pop    esi
c0010fb4:	5f                   	pop    edi
c0010fb5:	c3                   	ret    
c0010fb6:	66 90                	xchg   ax,ax

c0010fb8 <Krnl::handlePowerButton()>:
c0010fb8:	83 ec 0c             	sub    esp,0xc
c0010fbb:	e8 ee 06 00 00       	call   c00116ae <KeHandlePowerButton()>
c0010fc0:	90                   	nop
c0010fc1:	83 c4 0c             	add    esp,0xc
c0010fc4:	c3                   	ret    
c0010fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0010fc8 <Krnl::handleSleepButton()>:
c0010fc8:	83 ec 0c             	sub    esp,0xc
c0010fcb:	e8 13 07 00 00       	call   c00116e3 <KeHandleSleepButton()>
c0010fd0:	90                   	nop
c0010fd1:	83 c4 0c             	add    esp,0xc
c0010fd4:	c3                   	ret    

c0010fd5 <KeCalculateCRC32(unsigned char*, int)>:
c0010fd5:	53                   	push   ebx
c0010fd6:	83 c8 ff             	or     eax,0xffffffff
c0010fd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fdd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fe1:	01 cb                	add    ebx,ecx
c0010fe3:	39 d9                	cmp    ecx,ebx
c0010fe5:	74 15                	je     c0010ffc <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010fe7:	41                   	inc    ecx
c0010fe8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010feb:	31 c2                	xor    edx,eax
c0010fed:	c1 e8 08             	shr    eax,0x8
c0010ff0:	0f b6 d2             	movzx  edx,dl
c0010ff3:	33 04 95 60 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc7a0]
c0010ffa:	eb e7                	jmp    c0010fe3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010ffc:	f7 d0                	not    eax
c0010ffe:	5b                   	pop    ebx
c0010fff:	c3                   	ret    

c0011000 <EnvVarContainer::getEnv(char const*)>:
c0011000:	57                   	push   edi
c0011001:	56                   	push   esi
c0011002:	53                   	push   ebx
c0011003:	31 db                	xor    ebx,ebx
c0011005:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011009:	39 1e                	cmp    DWORD PTR [esi],ebx
c001100b:	7e 2b                	jle    c0011038 <EnvVarContainer::getEnv(char const*)+0x38>
c001100d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011014:	50                   	push   eax
c0011015:	50                   	push   eax
c0011016:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011019:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001101c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011020:	e8 2b f7 fe ff       	call   c0000750 <strcmp>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	85 c0                	test   eax,eax
c001102a:	75 09                	jne    c0011035 <EnvVarContainer::getEnv(char const*)+0x35>
c001102c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001102f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0011033:	eb 05                	jmp    c001103a <EnvVarContainer::getEnv(char const*)+0x3a>
c0011035:	43                   	inc    ebx
c0011036:	eb d1                	jmp    c0011009 <EnvVarContainer::getEnv(char const*)+0x9>
c0011038:	31 c0                	xor    eax,eax
c001103a:	5b                   	pop    ebx
c001103b:	5e                   	pop    esi
c001103c:	5f                   	pop    edi
c001103d:	c3                   	ret    

c001103e <EnvVarContainer::setEnv(char const*, char const*)>:
c001103e:	55                   	push   ebp
c001103f:	57                   	push   edi
c0011040:	56                   	push   esi
c0011041:	53                   	push   ebx
c0011042:	83 ec 28             	sub    esp,0x28
c0011045:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011049:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001104d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011051:	56                   	push   esi
c0011052:	e8 19 f5 fe ff       	call   c0000570 <strlen>
c0011057:	40                   	inc    eax
c0011058:	89 04 24             	mov    DWORD PTR [esp],eax
c001105b:	e8 56 6a ff ff       	call   c0007ab6 <malloc>
c0011060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011063:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011067:	e8 04 f5 fe ff       	call   c0000570 <strlen>
c001106c:	40                   	inc    eax
c001106d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011070:	e8 41 6a ff ff       	call   c0007ab6 <malloc>
c0011075:	89 34 24             	mov    DWORD PTR [esp],esi
c0011078:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001107c:	e8 ef f4 fe ff       	call   c0000570 <strlen>
c0011081:	83 c4 0c             	add    esp,0xc
c0011084:	40                   	inc    eax
c0011085:	50                   	push   eax
c0011086:	6a 00                	push   0x0
c0011088:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001108c:	e8 5f f4 fe ff       	call   c00004f0 <memset>
c0011091:	89 34 24             	mov    DWORD PTR [esp],esi
c0011094:	e8 d7 f4 fe ff       	call   c0000570 <strlen>
c0011099:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001109d:	8d 48 01             	lea    ecx,[eax+0x1]
c00110a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a5:	89 de                	mov    esi,ebx
c00110a7:	e8 c4 f4 fe ff       	call   c0000570 <strlen>
c00110ac:	83 c4 0c             	add    esp,0xc
c00110af:	40                   	inc    eax
c00110b0:	50                   	push   eax
c00110b1:	6a 00                	push   0x0
c00110b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110b7:	e8 34 f4 fe ff       	call   c00004f0 <memset>
c00110bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110bf:	e8 ac f4 fe ff       	call   c0000570 <strlen>
c00110c4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00110c8:	8d 48 01             	lea    ecx,[eax+0x1]
c00110cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110d0:	40                   	inc    eax
c00110d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00110d4:	c1 e0 03             	shl    eax,0x3
c00110d7:	5a                   	pop    edx
c00110d8:	59                   	pop    ecx
c00110d9:	50                   	push   eax
c00110da:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110dd:	e8 c0 69 ff ff       	call   c0007aa2 <realloc>
c00110e2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110e9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110ec:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110f0:	b9 08 00 00 00       	mov    ecx,0x8
c00110f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110f7:	83 c4 2c             	add    esp,0x2c
c00110fa:	5b                   	pop    ebx
c00110fb:	5e                   	pop    esi
c00110fc:	5f                   	pop    edi
c00110fd:	5d                   	pop    ebp
c00110fe:	c3                   	ret    
c00110ff:	90                   	nop

c0011100 <EnvVarContainer::deleteEnv(char const*)>:
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011102:	55                   	push   ebp
c0011103:	57                   	push   edi
c0011104:	56                   	push   esi
c0011105:	53                   	push   ebx
c0011106:	81 ec 38 01 00 00    	sub    esp,0x138
c001110c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011113:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001111a:	68 14 01 00 00       	push   0x114
c001111f:	e8 92 69 ff ff       	call   c0007ab6 <malloc>
c0011124:	83 c4 0c             	add    esp,0xc
c0011127:	89 c3                	mov    ebx,eax
c0011129:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001112c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011133:	50                   	push   eax
c0011134:	e8 49 aa ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0011139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001113c:	e8 23 ad ff ff       	call   c000be64 <File::exists()>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	84 c0                	test   al,al
c0011146:	75 31                	jne    c0011179 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011148:	50                   	push   eax
c0011149:	50                   	push   eax
c001114a:	6a 12                	push   0x12
c001114c:	53                   	push   ebx
c001114d:	e8 4e aa ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0011152:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011154:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011157:	89 34 24             	mov    DWORD PTR [esp],esi
c001115a:	e8 11 f4 fe ff       	call   c0000570 <strlen>
c001115f:	5a                   	pop    edx
c0011160:	31 d2                	xor    edx,edx
c0011162:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011166:	51                   	push   ecx
c0011167:	56                   	push   esi
c0011168:	52                   	push   edx
c0011169:	50                   	push   eax
c001116a:	53                   	push   ebx
c001116b:	ff d7                	call   edi
c001116d:	83 c4 14             	add    esp,0x14
c0011170:	53                   	push   ebx
c0011171:	e8 88 aa ff ff       	call   c000bbfe <File::close()>
c0011176:	83 c4 10             	add    esp,0x10
c0011179:	56                   	push   esi
c001117a:	31 f6                	xor    esi,esi
c001117c:	68 00 01 00 00       	push   0x100
c0011181:	6a 00                	push   0x0
c0011183:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011187:	50                   	push   eax
c0011188:	e8 63 f3 fe ff       	call   c00004f0 <memset>
c001118d:	5f                   	pop    edi
c001118e:	58                   	pop    eax
c001118f:	6a 01                	push   0x1
c0011191:	53                   	push   ebx
c0011192:	e8 09 aa ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111a2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00111aa:	83 ec 0c             	sub    esp,0xc
c00111ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111af:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111b3:	51                   	push   ecx
c00111b4:	8d 54 24 23          	lea    edx,[esp+0x23]
c00111b8:	52                   	push   edx
c00111b9:	6a 00                	push   0x0
c00111bb:	6a 01                	push   0x1
c00111bd:	53                   	push   ebx
c00111be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00111c1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00111c6:	83 c4 20             	add    esp,0x20
c00111c9:	89 c2                	mov    edx,eax
c00111cb:	85 c0                	test   eax,eax
c00111cd:	0f 84 36 01 00 00    	je     c0011309 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00111d3:	83 f8 0d             	cmp    eax,0xd
c00111d6:	0f 84 22 01 00 00    	je     c00112fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111e1:	0f 84 f0 00 00 00    	je     c00112d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111e7:	83 f8 0a             	cmp    eax,0xa
c00111ea:	74 13                	je     c00111ff <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111f1:	74 0c                	je     c00111ff <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111f3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111f9:	0f 8e f6 00 00 00    	jle    c00112f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011203:	83 ec 0c             	sub    esp,0xc
c0011206:	8d 78 01             	lea    edi,[eax+0x1]
c0011209:	57                   	push   edi
c001120a:	e8 a7 68 ff ff       	call   c0007ab6 <malloc>
c001120f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011217:	8d 56 04             	lea    edx,[esi+0x4]
c001121a:	89 14 24             	mov    DWORD PTR [esp],edx
c001121d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011221:	e8 90 68 ff ff       	call   c0007ab6 <malloc>
c0011226:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001122a:	83 c4 0c             	add    esp,0xc
c001122d:	57                   	push   edi
c001122e:	6a 00                	push   0x0
c0011230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011234:	e8 b7 f2 fe ff       	call   c00004f0 <memset>
c0011239:	8d 74 24 30          	lea    esi,[esp+0x30]
c001123d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011241:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011247:	83 c4 0c             	add    esp,0xc
c001124a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001124e:	52                   	push   edx
c001124f:	6a 00                	push   0x0
c0011251:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011255:	e8 96 f2 fe ff       	call   c00004f0 <memset>
c001125a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001125e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011262:	89 34 24             	mov    DWORD PTR [esp],esi
c0011265:	e8 06 f3 fe ff       	call   c0000570 <strlen>
c001126a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001126e:	89 c1                	mov    ecx,eax
c0011270:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011272:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011275:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011278:	40                   	inc    eax
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001127f:	85 d2                	test   edx,edx
c0011281:	75 0c                	jne    c001128f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011283:	83 ec 0c             	sub    esp,0xc
c0011286:	6a 08                	push   0x8
c0011288:	e8 29 68 ff ff       	call   c0007ab6 <malloc>
c001128d:	eb 0c                	jmp    c001129b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001128f:	c1 e0 03             	shl    eax,0x3
c0011292:	51                   	push   ecx
c0011293:	51                   	push   ecx
c0011294:	50                   	push   eax
c0011295:	52                   	push   edx
c0011296:	e8 07 68 ff ff       	call   c0007aa2 <realloc>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00112a1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00112a4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00112a7:	8d 74 24 18          	lea    esi,[esp+0x18]
c00112ab:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00112af:	b9 08 00 00 00       	mov    ecx,0x8
c00112b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112b6:	31 f6                	xor    esi,esi
c00112b8:	50                   	push   eax
c00112b9:	68 00 01 00 00       	push   0x100
c00112be:	6a 00                	push   0x0
c00112c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00112c4:	50                   	push   eax
c00112c5:	e8 26 f2 fe ff       	call   c00004f0 <memset>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00112d5:	eb 27                	jmp    c00112fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112d7:	83 f8 3d             	cmp    eax,0x3d
c00112da:	74 1e                	je     c00112fa <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112dc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112e2:	7f 07                	jg     c00112eb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112e4:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00112e8:	46                   	inc    esi
c00112e9:	eb 13                	jmp    c00112fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112eb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112f3:	eb 09                	jmp    c00112fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112f5:	83 f8 3d             	cmp    eax,0x3d
c00112f8:	75 ea                	jne    c00112e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112fa:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112fe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011303:	0f 85 99 fe ff ff    	jne    c00111a2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011309:	83 ec 0c             	sub    esp,0xc
c001130c:	53                   	push   ebx
c001130d:	e8 ec a8 ff ff       	call   c000bbfe <File::close()>
c0011312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011317:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001131a:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011320:	5b                   	pop    ebx
c0011321:	5e                   	pop    esi
c0011322:	5f                   	pop    edi
c0011323:	5d                   	pop    ebp
c0011324:	c3                   	ret    
c0011325:	90                   	nop

c0011326 <EnvVarContainer::__loadSystem()>:
c0011326:	83 ec 10             	sub    esp,0x10
c0011329:	68 60 3c 02 c0       	push   0xc0023c60
c001132e:	68 50 23 02 c0       	push   0xc0022350
c0011333:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011337:	e8 c6 fd ff ff       	call   c0011102 <EnvVarContainer::loadFrom(char const*, char const*)>
c001133c:	83 c4 1c             	add    esp,0x1c
c001133f:	c3                   	ret    

c0011340 <EnvVarContainer::__loadUser()>:
c0011340:	c3                   	ret    
c0011341:	90                   	nop

c0011342 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001134c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011354:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001135b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011362:	90                   	nop
c0011363:	c3                   	ret    

c0011364 <EnvVarContainer::~EnvVarContainer()>:
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001136e:	85 c0                	test   eax,eax
c0011370:	74 1d                	je     c001138f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011376:	8b 00                	mov    eax,DWORD PTR [eax]
c0011378:	85 c0                	test   eax,eax
c001137a:	74 13                	je     c001138f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001137c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011383:	83 ec 0c             	sub    esp,0xc
c0011386:	50                   	push   eax
c0011387:	e8 3a 67 ff ff       	call   c0007ac6 <free>
c001138c:	83 c4 10             	add    esp,0x10
c001138f:	90                   	nop
c0011390:	83 c4 0c             	add    esp,0xc
c0011393:	c3                   	ret    

c0011394 <KeGetEnv(Process*, char const*)>:
c0011394:	53                   	push   ebx
c0011395:	83 ec 08             	sub    esp,0x8
c0011398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001139c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113a0:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00113a6:	74 04                	je     c00113ac <KeGetEnv(Process*, char const*)+0x18>
c00113a8:	85 c0                	test   eax,eax
c00113aa:	75 0b                	jne    c00113b7 <KeGetEnv(Process*, char const*)+0x23>
c00113ac:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113b1:	85 c0                	test   eax,eax
c00113b3:	75 19                	jne    c00113ce <KeGetEnv(Process*, char const*)+0x3a>
c00113b5:	eb 27                	jmp    c00113de <KeGetEnv(Process*, char const*)+0x4a>
c00113b7:	52                   	push   edx
c00113b8:	52                   	push   edx
c00113b9:	53                   	push   ebx
c00113ba:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00113c0:	e8 3b fc ff ff       	call   c0011000 <EnvVarContainer::getEnv(char const*)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	85 c0                	test   eax,eax
c00113ca:	75 28                	jne    c00113f4 <KeGetEnv(Process*, char const*)+0x60>
c00113cc:	eb de                	jmp    c00113ac <KeGetEnv(Process*, char const*)+0x18>
c00113ce:	52                   	push   edx
c00113cf:	52                   	push   edx
c00113d0:	53                   	push   ebx
c00113d1:	50                   	push   eax
c00113d2:	e8 29 fc ff ff       	call   c0011000 <EnvVarContainer::getEnv(char const*)>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	85 c0                	test   eax,eax
c00113dc:	75 16                	jne    c00113f4 <KeGetEnv(Process*, char const*)+0x60>
c00113de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113e2:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113eb:	83 c4 08             	add    esp,0x8
c00113ee:	5b                   	pop    ebx
c00113ef:	e9 0c fc ff ff       	jmp    c0011000 <EnvVarContainer::getEnv(char const*)>
c00113f4:	83 c4 08             	add    esp,0x8
c00113f7:	5b                   	pop    ebx
c00113f8:	c3                   	ret    

c00113f9 <KeSetEnvSystem(char const*, char const*)>:
c00113f9:	83 ec 10             	sub    esp,0x10
c00113fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011404:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001140a:	e8 2f fc ff ff       	call   c001103e <EnvVarContainer::setEnv(char const*, char const*)>
c001140f:	83 c4 1c             	add    esp,0x1c
c0011412:	c3                   	ret    

c0011413 <KeSetEnvUser(char const*, char const*)>:
c0011413:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011418:	85 c0                	test   eax,eax
c001141a:	74 15                	je     c0011431 <KeSetEnvUser(char const*, char const*)+0x1e>
c001141c:	83 ec 10             	sub    esp,0x10
c001141f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011427:	50                   	push   eax
c0011428:	e8 11 fc ff ff       	call   c001103e <EnvVarContainer::setEnv(char const*, char const*)>
c001142d:	83 c4 1c             	add    esp,0x1c
c0011430:	c3                   	ret    
c0011431:	c3                   	ret    

c0011432 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011436:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001143c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011440:	e9 f9 fb ff ff       	jmp    c001103e <EnvVarContainer::setEnv(char const*, char const*)>

c0011445 <KeDeleteEnvSystem(char const*)>:
c0011445:	c3                   	ret    

c0011446 <KeDeleteEnvUser(char const*)>:
c0011446:	c3                   	ret    

c0011447 <KeDeleteEnvProcess(Process*, char const*)>:
c0011447:	c3                   	ret    

c0011448 <KeNewProcessEnv(Process*)>:
c0011448:	83 ec 28             	sub    esp,0x28
c001144b:	6a 0c                	push   0xc
c001144d:	e8 64 66 ff ff       	call   c0007ab6 <malloc>
c0011452:	5a                   	pop    edx
c0011453:	59                   	pop    ecx
c0011454:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011458:	50                   	push   eax
c0011459:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001145d:	e8 e0 fe ff ff       	call   c0011342 <EnvVarContainer::EnvVarContainer(Process*)>
c0011462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011466:	83 c4 2c             	add    esp,0x2c
c0011469:	c3                   	ret    

c001146a <KeCopyProcessEnv(Process*, Process*)>:
c001146a:	57                   	push   edi
c001146b:	56                   	push   esi
c001146c:	53                   	push   ebx
c001146d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011471:	83 ec 0c             	sub    esp,0xc
c0011474:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001147a:	6a 0c                	push   0xc
c001147c:	e8 35 66 ff ff       	call   c0007ab6 <malloc>
c0011481:	89 c3                	mov    ebx,eax
c0011483:	58                   	pop    eax
c0011484:	5a                   	pop    edx
c0011485:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011489:	53                   	push   ebx
c001148a:	e8 b3 fe ff ff       	call   c0011342 <EnvVarContainer::EnvVarContainer(Process*)>
c001148f:	8b 07                	mov    eax,DWORD PTR [edi]
c0011491:	89 03                	mov    DWORD PTR [ebx],eax
c0011493:	c1 e0 03             	shl    eax,0x3
c0011496:	89 04 24             	mov    DWORD PTR [esp],eax
c0011499:	e8 18 66 ff ff       	call   c0007ab6 <malloc>
c001149e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00114a1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00114a3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00114a6:	c1 e1 03             	shl    ecx,0x3
c00114a9:	89 c7                	mov    edi,eax
c00114ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	89 d8                	mov    eax,ebx
c00114b2:	5b                   	pop    ebx
c00114b3:	5e                   	pop    esi
c00114b4:	5f                   	pop    edi
c00114b5:	c3                   	ret    

c00114b6 <KeLoadSystemEnv()>:
c00114b6:	53                   	push   ebx
c00114b7:	83 ec 14             	sub    esp,0x14
c00114ba:	6a 0c                	push   0xc
c00114bc:	e8 f5 65 ff ff       	call   c0007ab6 <malloc>
c00114c1:	89 c3                	mov    ebx,eax
c00114c3:	58                   	pop    eax
c00114c4:	5a                   	pop    edx
c00114c5:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114cb:	53                   	push   ebx
c00114cc:	e8 71 fe ff ff       	call   c0011342 <EnvVarContainer::EnvVarContainer(Process*)>
c00114d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114d4:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114da:	e8 47 fe ff ff       	call   c0011326 <EnvVarContainer::__loadSystem()>
c00114df:	83 c4 18             	add    esp,0x18
c00114e2:	5b                   	pop    ebx
c00114e3:	c3                   	ret    

c00114e4 <KeLoadUserEnv()>:
c00114e4:	53                   	push   ebx
c00114e5:	83 ec 14             	sub    esp,0x14
c00114e8:	6a 0c                	push   0xc
c00114ea:	e8 c7 65 ff ff       	call   c0007ab6 <malloc>
c00114ef:	89 c3                	mov    ebx,eax
c00114f1:	58                   	pop    eax
c00114f2:	5a                   	pop    edx
c00114f3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114f9:	53                   	push   ebx
c00114fa:	e8 43 fe ff ff       	call   c0011342 <EnvVarContainer::EnvVarContainer(Process*)>
c00114ff:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011505:	83 c4 18             	add    esp,0x18
c0011508:	5b                   	pop    ebx
c0011509:	c3                   	ret    

c001150a <KeFlushEnv()>:
c001150a:	c3                   	ret    

c001150b <KeGetProcessTotalEnvCount(Process*)>:
c001150b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001150f:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011515:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001151b:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011520:	8b 00                	mov    eax,DWORD PTR [eax]
c0011522:	03 01                	add    eax,DWORD PTR [ecx]
c0011524:	85 d2                	test   edx,edx
c0011526:	74 02                	je     c001152a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011528:	03 02                	add    eax,DWORD PTR [edx]
c001152a:	c3                   	ret    

c001152b <KeGetProcessEnvPair(Process*, int)>:
c001152b:	57                   	push   edi
c001152c:	56                   	push   esi
c001152d:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011533:	53                   	push   ebx
c0011534:	85 f6                	test   esi,esi
c0011536:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001153a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001153e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011544:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011548:	8b 01                	mov    eax,DWORD PTR [ecx]
c001154a:	75 16                	jne    c0011562 <KeGetProcessEnvPair(Process*, int)+0x37>
c001154c:	39 c2                	cmp    edx,eax
c001154e:	7c 16                	jl     c0011566 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011550:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011556:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011558:	01 c6                	add    esi,eax
c001155a:	39 d6                	cmp    esi,edx
c001155c:	7e 3c                	jle    c001159a <KeGetProcessEnvPair(Process*, int)+0x6f>
c001155e:	29 c2                	sub    edx,eax
c0011560:	eb 04                	jmp    c0011566 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011562:	39 c2                	cmp    edx,eax
c0011564:	7d 05                	jge    c001156b <KeGetProcessEnvPair(Process*, int)+0x40>
c0011566:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011569:	eb 20                	jmp    c001158b <KeGetProcessEnvPair(Process*, int)+0x60>
c001156b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001156d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011570:	39 d1                	cmp    ecx,edx
c0011572:	7e 04                	jle    c0011578 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011574:	29 c2                	sub    edx,eax
c0011576:	eb 10                	jmp    c0011588 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011578:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001157e:	03 0e                	add    ecx,DWORD PTR [esi]
c0011580:	39 d1                	cmp    ecx,edx
c0011582:	7e 16                	jle    c001159a <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011584:	29 c2                	sub    edx,eax
c0011586:	29 fa                	sub    edx,edi
c0011588:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001158b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001158e:	8b 02                	mov    eax,DWORD PTR [edx]
c0011590:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011593:	89 03                	mov    DWORD PTR [ebx],eax
c0011595:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011598:	eb 1d                	jmp    c00115b7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001159a:	83 ec 0c             	sub    esp,0xc
c001159d:	68 72 23 02 c0       	push   0xc0022372
c00115a2:	e8 ac 00 00 00       	call   c0011653 <KePanic(char const*)>
c00115a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00115ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	89 d8                	mov    eax,ebx
c00115b9:	5b                   	pop    ebx
c00115ba:	5e                   	pop    esi
c00115bb:	5f                   	pop    edi
c00115bc:	c2 04 00             	ret    0x4

c00115bf <CPU::current()>:
c00115bf:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00115c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ca:	c3                   	ret    

c00115cb <operator new(unsigned long)>:
c00115cb:	e9 e6 64 ff ff       	jmp    c0007ab6 <malloc>

c00115d0 <operator delete(void*)>:
c00115d0:	e9 01 65 ff ff       	jmp    c0007ad6 <rfree>

c00115d5 <disableIRQs()>:
c00115d5:	fa                   	cli    
c00115d6:	c3                   	ret    

c00115d7 <enableIRQs()>:
c00115d7:	fb                   	sti    
c00115d8:	c3                   	ret    

c00115d9 <lockScheduler()>:
c00115d9:	fa                   	cli    
c00115da:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115e0:	c3                   	ret    

c00115e1 <unlockScheduler()>:
c00115e1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115e6:	48                   	dec    eax
c00115e7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115ec:	75 01                	jne    c00115ef <unlockScheduler()+0xe>
c00115ee:	fb                   	sti    
c00115ef:	c3                   	ret    

c00115f0 <lockStuff()>:
c00115f0:	fa                   	cli    
c00115f1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115f7:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115fd:	c3                   	ret    

c00115fe <unlockStuff()>:
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011606:	48                   	dec    eax
c0011607:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001160c:	75 18                	jne    c0011626 <unlockStuff()+0x28>
c001160e:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011615:	74 0f                	je     c0011626 <unlockStuff()+0x28>
c0011617:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011621:	e8 92 4a 00 00       	call   c00160b8 <schedule()>
c0011626:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001162b:	48                   	dec    eax
c001162c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011631:	75 01                	jne    c0011634 <unlockStuff()+0x36>
c0011633:	fb                   	sti    
c0011634:	83 c4 0c             	add    esp,0xc
c0011637:	c3                   	ret    

c0011638 <Virt::getAKernelVAS()>:
c0011638:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001163d:	c3                   	ret    

c001163e <__not_memcpy>:
c001163e:	57                   	push   edi
c001163f:	56                   	push   esi
c0011640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011644:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011648:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001164c:	89 c7                	mov    edi,eax
c001164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011650:	5e                   	pop    esi
c0011651:	5f                   	pop    edi
c0011652:	c3                   	ret    

c0011653 <KePanic(char const*)>:
c0011653:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001165a:	e9 ff 69 00 00       	jmp    c001805e <HalPanic(char const*)>

c001165f <KePowerThread(void*)>:
c001165f:	83 ec 0c             	sub    esp,0xc
c0011662:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011667:	48                   	dec    eax
c0011668:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001166d:	75 01                	jne    c0011670 <KePowerThread(void*)+0x11>
c001166f:	fb                   	sti    
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001167a:	6a 0a                	push   0xa
c001167c:	e8 7b 4d 00 00       	call   c00163fc <sleep(unsigned int)>
c0011681:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	eb e3                	jmp    c0011670 <KePowerThread(void*)+0x11>

c001168d <KeChangePowerSettings(PowerSettings)>:
c001168d:	57                   	push   edi
c001168e:	b9 09 00 00 00       	mov    ecx,0x9
c0011693:	56                   	push   esi
c0011694:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011699:	fc                   	cld    
c001169a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001169e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116a0:	5e                   	pop    esi
c00116a1:	5f                   	pop    edi
c00116a2:	c3                   	ret    

c00116a3 <KeUserIOReceived()>:
c00116a3:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116ad:	c3                   	ret    

c00116ae <KeHandlePowerButton()>:
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00116b6:	83 f8 02             	cmp    eax,0x2
c00116b9:	75 10                	jne    c00116cb <KeHandlePowerButton()+0x1d>
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c4:	e8 5f 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116c9:	eb 11                	jmp    c00116dc <KeHandlePowerButton()+0x2e>
c00116cb:	48                   	dec    eax
c00116cc:	75 11                	jne    c00116df <KeHandlePowerButton()+0x31>
c00116ce:	83 ec 0c             	sub    esp,0xc
c00116d1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116d7:	e8 7c 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116dc:	83 c4 10             	add    esp,0x10
c00116df:	83 c4 0c             	add    esp,0xc
c00116e2:	c3                   	ret    

c00116e3 <KeHandleSleepButton()>:
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116eb:	83 f8 02             	cmp    eax,0x2
c00116ee:	75 10                	jne    c0011700 <KeHandleSleepButton()+0x1d>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116f9:	e8 2a 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116fe:	eb 11                	jmp    c0011711 <KeHandleSleepButton()+0x2e>
c0011700:	48                   	dec    eax
c0011701:	75 11                	jne    c0011714 <KeHandleSleepButton()+0x31>
c0011703:	83 ec 0c             	sub    esp,0xc
c0011706:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001170c:	e8 47 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	83 c4 0c             	add    esp,0xc
c0011717:	c3                   	ret    

c0011718 <KeSetupPowerManager()>:
c0011718:	83 ec 0c             	sub    esp,0xc
c001171b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011725:	68 f0 00 00 00       	push   0xf0
c001172a:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011731:	6a 00                	push   0x0
c0011733:	68 5f 16 01 c0       	push   0xc001165f
c0011738:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001173e:	e8 25 47 00 00       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c0011743:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c001174d:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011757:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011761:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001176b:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011775:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001177f:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011789:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011793:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c001179d:	83 c4 1c             	add    esp,0x1c
c00117a0:	c3                   	ret    

c00117a1 <KeRand()>:
c00117a1:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00117ab:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00117b5:	53                   	push   ebx
c00117b6:	01 c1                	add    ecx,eax
c00117b8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00117bd:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00117c3:	01 ca                	add    edx,ecx
c00117c5:	05 ef 04 b5 00       	add    eax,0xb504ef
c00117ca:	83 d2 00             	adc    edx,0x0
c00117cd:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117d2:	0f b7 da             	movzx  ebx,dx
c00117d5:	89 da                	mov    edx,ebx
c00117d7:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117dd:	0f ac d0 0e          	shrd   eax,edx,0xe
c00117e1:	5b                   	pop    ebx
c00117e2:	c3                   	ret    

c00117e3 <KeSeedRand(unsigned int)>:
c00117e3:	53                   	push   ebx
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117eb:	e8 8d 6b 00 00       	call   c001837d <HalGetRand()>
c00117f0:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117fa:	31 d8                	xor    eax,ebx
c00117fc:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011801:	e8 9b ff ff ff       	call   c00117a1 <KeRand()>
c0011806:	83 c4 08             	add    esp,0x8
c0011809:	5b                   	pop    ebx
c001180a:	eb 95                	jmp    c00117a1 <KeRand()>

c001180c <KeInitRand()>:
c001180c:	83 ec 0c             	sub    esp,0xc
c001180f:	e8 5e 69 00 00       	call   c0018172 <HalQueryPerformanceCounter()>
c0011814:	0f 20 da             	mov    edx,cr3
c0011817:	0f 22 da             	mov    cr3,edx
c001181a:	0f 20 da             	mov    edx,cr3
c001181d:	0f 22 da             	mov    cr3,edx
c0011820:	0f 20 da             	mov    edx,cr3
c0011823:	0f 22 da             	mov    cr3,edx
c0011826:	0f 20 da             	mov    edx,cr3
c0011829:	0f 22 da             	mov    cr3,edx
c001182c:	83 ec 0c             	sub    esp,0xc
c001182f:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011834:	50                   	push   eax
c0011835:	e8 a9 ff ff ff       	call   c00117e3 <KeSeedRand(unsigned int)>
c001183a:	83 c4 1c             	add    esp,0x1c
c001183d:	c3                   	ret    
c001183e:	66 90                	xchg   ax,ax

c0011840 <KeResolveCompatibilitySymbol(char*)>:
c0011840:	83 ec 0c             	sub    esp,0xc
c0011843:	83 ec 08             	sub    esp,0x8
c0011846:	68 8c 23 02 c0       	push   0xc002238c
c001184b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001184f:	e8 fc ee fe ff       	call   c0000750 <strcmp>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	85 c0                	test   eax,eax
c0011859:	0f 94 c0             	sete   al
c001185c:	0f b6 c0             	movzx  eax,al
c001185f:	85 c0                	test   eax,eax
c0011861:	74 0d                	je     c0011870 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011863:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011868:	e9 8b 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001186d:	8d 76 00             	lea    esi,[esi+0x0]
c0011870:	83 ec 08             	sub    esp,0x8
c0011873:	68 95 23 02 c0       	push   0xc0022395
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 cf ee fe ff       	call   c0000750 <strcmp>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	85 c0                	test   eax,eax
c0011886:	0f 94 c0             	sete   al
c0011889:	0f b6 c0             	movzx  eax,al
c001188c:	85 c0                	test   eax,eax
c001188e:	74 0c                	je     c001189c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011890:	b8 30 f7 01 c0       	mov    eax,0xc001f730
c0011895:	e9 5e 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001189a:	66 90                	xchg   ax,ax
c001189c:	83 ec 08             	sub    esp,0x8
c001189f:	68 9f 23 02 c0       	push   0xc002239f
c00118a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a8:	e8 a3 ee fe ff       	call   c0000750 <strcmp>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	85 c0                	test   eax,eax
c00118b2:	0f 94 c0             	sete   al
c00118b5:	0f b6 c0             	movzx  eax,al
c00118b8:	85 c0                	test   eax,eax
c00118ba:	74 0c                	je     c00118c8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00118bc:	b8 64 f4 01 c0       	mov    eax,0xc001f464
c00118c1:	e9 32 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118c6:	66 90                	xchg   ax,ax
c00118c8:	83 ec 08             	sub    esp,0x8
c00118cb:	68 a8 23 02 c0       	push   0xc00223a8
c00118d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d4:	e8 77 ee fe ff       	call   c0000750 <strcmp>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	85 c0                	test   eax,eax
c00118de:	0f 94 c0             	sete   al
c00118e1:	0f b6 c0             	movzx  eax,al
c00118e4:	85 c0                	test   eax,eax
c00118e6:	74 0c                	je     c00118f4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118e8:	b8 53 16 01 c0       	mov    eax,0xc0011653
c00118ed:	e9 06 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118f2:	66 90                	xchg   ax,ax
c00118f4:	83 ec 08             	sub    esp,0x8
c00118f7:	68 bb 23 02 c0       	push   0xc00223bb
c00118fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011900:	e8 4b ee fe ff       	call   c0000750 <strcmp>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	85 c0                	test   eax,eax
c001190a:	0f 94 c0             	sete   al
c001190d:	0f b6 c0             	movzx  eax,al
c0011910:	85 c0                	test   eax,eax
c0011912:	74 0c                	je     c0011920 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011914:	b8 53 0f 01 c0       	mov    eax,0xc0010f53
c0011919:	e9 da 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001191e:	66 90                	xchg   ax,ax
c0011920:	83 ec 08             	sub    esp,0x8
c0011923:	68 d8 23 02 c0       	push   0xc00223d8
c0011928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001192c:	e8 1f ee fe ff       	call   c0000750 <strcmp>
c0011931:	83 c4 10             	add    esp,0x10
c0011934:	85 c0                	test   eax,eax
c0011936:	0f 94 c0             	sete   al
c0011939:	0f b6 c0             	movzx  eax,al
c001193c:	85 c0                	test   eax,eax
c001193e:	74 0c                	je     c001194c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011940:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c0011945:	e9 ae 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194a:	66 90                	xchg   ax,ax
c001194c:	83 ec 08             	sub    esp,0x8
c001194f:	68 e2 23 02 c0       	push   0xc00223e2
c0011954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011958:	e8 f3 ed fe ff       	call   c0000750 <strcmp>
c001195d:	83 c4 10             	add    esp,0x10
c0011960:	85 c0                	test   eax,eax
c0011962:	0f 94 c0             	sete   al
c0011965:	0f b6 c0             	movzx  eax,al
c0011968:	85 c0                	test   eax,eax
c001196a:	74 0c                	je     c0011978 <KeResolveCompatibilitySymbol(char*)+0x138>
c001196c:	b8 b0 f5 01 c0       	mov    eax,0xc001f5b0
c0011971:	e9 82 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011976:	66 90                	xchg   ax,ax
c0011978:	83 ec 08             	sub    esp,0x8
c001197b:	68 eb 23 02 c0       	push   0xc00223eb
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 c7 ed fe ff       	call   c0000750 <strcmp>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	85 c0                	test   eax,eax
c001198e:	0f 94 c0             	sete   al
c0011991:	0f b6 c0             	movzx  eax,al
c0011994:	85 c0                	test   eax,eax
c0011996:	74 08                	je     c00119a0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011998:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001199d:	eb 59                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001199f:	90                   	nop
c00119a0:	83 ec 08             	sub    esp,0x8
c00119a3:	68 03 24 02 c0       	push   0xc0022403
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 9f ed fe ff       	call   c0000750 <strcmp>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	85 c0                	test   eax,eax
c00119b6:	0f 94 c0             	sete   al
c00119b9:	0f b6 c0             	movzx  eax,al
c00119bc:	85 c0                	test   eax,eax
c00119be:	74 08                	je     c00119c8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00119c0:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119c5:	eb 31                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119c7:	90                   	nop
c00119c8:	83 ec 08             	sub    esp,0x8
c00119cb:	68 10 24 02 c0       	push   0xc0022410
c00119d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d4:	e8 77 ed fe ff       	call   c0000750 <strcmp>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	85 c0                	test   eax,eax
c00119de:	0f 94 c0             	sete   al
c00119e1:	0f b6 c0             	movzx  eax,al
c00119e4:	85 c0                	test   eax,eax
c00119e6:	74 08                	je     c00119f0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119e8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119ed:	eb 09                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ef:	90                   	nop
c00119f0:	b8 00 00 00 00       	mov    eax,0x0
c00119f5:	8d 76 00             	lea    esi,[esi+0x0]
c00119f8:	83 c4 0c             	add    esp,0xc
c00119fb:	c3                   	ret    

c00119fc <KiSigKill(int)>:
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	6a 00                	push   0x0
c0011a01:	6a 00                	push   0x0
c0011a03:	6a ff                	push   0xffffffff
c0011a05:	6a 01                	push   0x1
c0011a07:	e8 46 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	c3                   	ret    

c0011a10 <KiDefaultSignalHandlerIgnore(int)>:
c0011a10:	c3                   	ret    

c0011a11 <KiDefaultSignalHandlerPause(int)>:
c0011a11:	57                   	push   edi
c0011a12:	b9 07 00 00 00       	mov    ecx,0x7
c0011a17:	56                   	push   esi
c0011a18:	be 59 24 02 c0       	mov    esi,0xc0022459
c0011a1d:	83 ec 24             	sub    esp,0x24
c0011a20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a24:	fc                   	cld    
c0011a25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a27:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a2b:	50                   	push   eax
c0011a2c:	6a 00                	push   0x0
c0011a2e:	6a 00                	push   0x0
c0011a30:	6a 27                	push   0x27
c0011a32:	e8 1b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a37:	83 c4 34             	add    esp,0x34
c0011a3a:	5e                   	pop    esi
c0011a3b:	5f                   	pop    edi
c0011a3c:	c3                   	ret    

c0011a3d <KiDefaultSignalHandlerResume(int)>:
c0011a3d:	57                   	push   edi
c0011a3e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a43:	56                   	push   esi
c0011a44:	be 75 24 02 c0       	mov    esi,0xc0022475
c0011a49:	83 ec 24             	sub    esp,0x24
c0011a4c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a50:	fc                   	cld    
c0011a51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a53:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a57:	50                   	push   eax
c0011a58:	6a 00                	push   0x0
c0011a5a:	6a 00                	push   0x0
c0011a5c:	6a 27                	push   0x27
c0011a5e:	e8 ef 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a63:	83 c4 34             	add    esp,0x34
c0011a66:	5e                   	pop    esi
c0011a67:	5f                   	pop    edi
c0011a68:	c3                   	ret    

c0011a69 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a69:	e9 58 60 ff ff       	jmp    c0007ac6 <free>

c0011a6e <KeInitSignals()>:
c0011a6e:	53                   	push   ebx
c0011a6f:	83 ec 14             	sub    esp,0x14
c0011a72:	68 c8 00 00 00       	push   0xc8
c0011a77:	e8 3a 60 ff ff       	call   c0007ab6 <malloc>
c0011a7c:	83 c4 0c             	add    esp,0xc
c0011a7f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a89:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a93:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a9a:	89 c3                	mov    ebx,eax
c0011a9c:	6a 20                	push   0x20
c0011a9e:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011aa4:	6a 00                	push   0x0
c0011aa6:	50                   	push   eax
c0011aa7:	e8 44 ea fe ff       	call   c00004f0 <memset>
c0011aac:	83 c4 0c             	add    esp,0xc
c0011aaf:	6a 44                	push   0x44
c0011ab1:	6a 00                	push   0x0
c0011ab3:	53                   	push   ebx
c0011ab4:	e8 37 ea fe ff       	call   c00004f0 <memset>
c0011ab9:	89 d8                	mov    eax,ebx
c0011abb:	83 c4 18             	add    esp,0x18
c0011abe:	5b                   	pop    ebx
c0011abf:	c3                   	ret    

c0011ac0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011ac0:	53                   	push   ebx
c0011ac1:	b8 01 00 00 00       	mov    eax,0x1
c0011ac6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011aca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ace:	83 f9 10             	cmp    ecx,0x10
c0011ad1:	7f 21                	jg     c0011af4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011ad3:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ada:	89 03                	mov    DWORD PTR [ebx],eax
c0011adc:	b8 01 00 00 00       	mov    eax,0x1
c0011ae1:	d3 e0                	shl    eax,cl
c0011ae3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ae7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011aea:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011af2:	31 c0                	xor    eax,eax
c0011af4:	5b                   	pop    ebx
c0011af5:	c3                   	ret    

c0011af6 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011af6:	55                   	push   ebp
c0011af7:	57                   	push   edi
c0011af8:	bf 08 00 00 00       	mov    edi,0x8
c0011afd:	56                   	push   esi
c0011afe:	53                   	push   ebx
c0011aff:	83 ec 18             	sub    esp,0x18
c0011b02:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b06:	68 92 24 02 c0       	push   0xc0022492
c0011b0b:	e8 35 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b10:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b17:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	31 c9                	xor    ecx,ecx
c0011b22:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b26:	99                   	cdq    
c0011b27:	f7 ff                	idiv   edi
c0011b29:	8d 42 24             	lea    eax,[edx+0x24]
c0011b2c:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b30:	85 f6                	test   esi,esi
c0011b32:	75 1a                	jne    c0011b4e <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b38:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b3c:	50                   	push   eax
c0011b3d:	50                   	push   eax
c0011b3e:	52                   	push   edx
c0011b3f:	68 a3 24 02 c0       	push   0xc00224a3
c0011b44:	e8 fc 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b49:	83 c4 10             	add    esp,0x10
c0011b4c:	eb 1b                	jmp    c0011b69 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b4e:	41                   	inc    ecx
c0011b4f:	83 f9 08             	cmp    ecx,0x8
c0011b52:	75 ce                	jne    c0011b22 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b54:	83 ec 0c             	sub    esp,0xc
c0011b57:	be 01 00 00 00       	mov    esi,0x1
c0011b5c:	68 c4 24 02 c0       	push   0xc00224c4
c0011b61:	e8 df 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	83 c4 0c             	add    esp,0xc
c0011b6c:	89 f0                	mov    eax,esi
c0011b6e:	5b                   	pop    ebx
c0011b6f:	5e                   	pop    esi
c0011b70:	5f                   	pop    edi
c0011b71:	5d                   	pop    ebp
c0011b72:	c3                   	ret    

c0011b73 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b73:	55                   	push   ebp
c0011b74:	57                   	push   edi
c0011b75:	56                   	push   esi
c0011b76:	53                   	push   ebx
c0011b77:	51                   	push   ecx
c0011b78:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b7c:	85 db                	test   ebx,ebx
c0011b7e:	0f 84 bc 00 00 00    	je     c0011c40 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b84:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b8b:	0f 84 af 00 00 00    	je     c0011c40 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b91:	31 c9                	xor    ecx,ecx
c0011b93:	bf 08 00 00 00       	mov    edi,0x8
c0011b98:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b9e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011ba1:	99                   	cdq    
c0011ba2:	f7 ff                	idiv   edi
c0011ba4:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011bab:	85 ed                	test   ebp,ebp
c0011bad:	0f 84 9e 00 00 00    	je     c0011c51 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011bb3:	89 e9                	mov    ecx,ebp
c0011bb5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011bbb:	bf 01 00 00 00       	mov    edi,0x1
c0011bc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bc3:	d3 e7                	shl    edi,cl
c0011bc5:	31 c9                	xor    ecx,ecx
c0011bc7:	b8 01 00 00 00       	mov    eax,0x1
c0011bcc:	d3 e0                	shl    eax,cl
c0011bce:	85 04 24             	test   DWORD PTR [esp],eax
c0011bd1:	74 06                	je     c0011bd9 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011bd3:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011bd7:	75 67                	jne    c0011c40 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bd9:	41                   	inc    ecx
c0011bda:	83 f9 11             	cmp    ecx,0x11
c0011bdd:	75 e8                	jne    c0011bc7 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011bdf:	46                   	inc    esi
c0011be0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011be3:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011be9:	09 f8                	or     eax,edi
c0011beb:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bf6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bfc:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c03:	31 c0                	xor    eax,eax
c0011c05:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c0d:	74 09                	je     c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c0f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c16:	eb 06                	jmp    c0011c1e <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c18:	40                   	inc    eax
c0011c19:	83 f8 08             	cmp    eax,0x8
c0011c1c:	75 e7                	jne    c0011c05 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c1e:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c25:	83 fd 09             	cmp    ebp,0x9
c0011c28:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c2a:	75 07                	jne    c0011c33 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c2c:	b8 fc 19 01 c0       	mov    eax,0xc00119fc
c0011c31:	eb 31                	jmp    c0011c64 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c33:	83 f8 01             	cmp    eax,0x1
c0011c36:	75 0c                	jne    c0011c44 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c38:	f7 d7                	not    edi
c0011c3a:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c40:	31 c0                	xor    eax,eax
c0011c42:	eb 20                	jmp    c0011c64 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c44:	85 c0                	test   eax,eax
c0011c46:	75 1c                	jne    c0011c64 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c48:	8b 04 ad c0 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc340]
c0011c4f:	eb 13                	jmp    c0011c64 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c51:	46                   	inc    esi
c0011c52:	41                   	inc    ecx
c0011c53:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c59:	83 f9 08             	cmp    ecx,0x8
c0011c5c:	0f 85 36 ff ff ff    	jne    c0011b98 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c62:	eb dc                	jmp    c0011c40 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c64:	5a                   	pop    edx
c0011c65:	5b                   	pop    ebx
c0011c66:	5e                   	pop    esi
c0011c67:	5f                   	pop    edi
c0011c68:	5d                   	pop    ebp
c0011c69:	c3                   	ret    

c0011c6a <KiCheckSignalZ>:
c0011c6a:	83 ec 10             	sub    esp,0x10
c0011c6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c71:	50                   	push   eax
c0011c72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c7a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c80:	e8 ee fe ff ff       	call   c0011b73 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c85:	5a                   	pop    edx
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	59                   	pop    ecx
c0011c89:	85 c0                	test   eax,eax
c0011c8b:	74 19                	je     c0011ca6 <KiCheckSignalZ+0x3c>
c0011c8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c93:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c96:	89 02                	mov    DWORD PTR [edx],eax
c0011c98:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ca3:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011ca6:	89 d0                	mov    eax,edx
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	c3                   	ret    

c0011cac <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011cac:	56                   	push   esi
c0011cad:	53                   	push   ebx
c0011cae:	bb 01 00 00 00       	mov    ebx,0x1
c0011cb3:	52                   	push   edx
c0011cb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cb8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cbc:	d3 e3                	shl    ebx,cl
c0011cbe:	83 f9 10             	cmp    ecx,0x10
c0011cc1:	7f 08                	jg     c0011ccb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011cc3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011cc9:	75 10                	jne    c0011cdb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011ccb:	83 ec 0c             	sub    esp,0xc
c0011cce:	68 d5 24 02 c0       	push   0xc00224d5
c0011cd3:	e8 7b f9 ff ff       	call   c0011653 <KePanic(char const*)>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	f7 d3                	not    ebx
c0011cdd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011ce3:	58                   	pop    eax
c0011ce4:	5b                   	pop    ebx
c0011ce5:	5e                   	pop    esi
c0011ce6:	c3                   	ret    

c0011ce7 <KiFinishSignalZ>:
c0011ce7:	53                   	push   ebx
c0011ce8:	83 ec 10             	sub    esp,0x10
c0011ceb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cef:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cfa:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d00:	e8 a7 ff ff ff       	call   c0011cac <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d05:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d12:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d19:	83 c4 18             	add    esp,0x18
c0011d1c:	5b                   	pop    ebx
c0011d1d:	c3                   	ret    

c0011d1e <SysSeekDir(regs*)>:
c0011d1e:	31 c0                	xor    eax,eax
c0011d20:	31 d2                	xor    edx,edx
c0011d22:	c3                   	ret    

c0011d23 <SysTellDir(regs*)>:
c0011d23:	31 c0                	xor    eax,eax
c0011d25:	31 d2                	xor    edx,edx
c0011d27:	c3                   	ret    

c0011d28 <SysVerify(regs*)>:
c0011d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d2c:	31 d2                	xor    edx,edx
c0011d2e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d31:	c3                   	ret    

c0011d32 <SysGetArgc(regs*)>:
c0011d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d3a:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d40:	89 c2                	mov    edx,eax
c0011d42:	c1 fa 1f             	sar    edx,0x1f
c0011d45:	c3                   	ret    

c0011d46 <SysTTYName(regs*)>:
c0011d46:	b8 01 00 00 00       	mov    eax,0x1
c0011d4b:	31 d2                	xor    edx,edx
c0011d4d:	c3                   	ret    

c0011d4e <SysFormatDisk(regs*)>:
c0011d4e:	56                   	push   esi
c0011d4f:	53                   	push   ebx
c0011d50:	83 ec 04             	sub    esp,0x4
c0011d53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d57:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d5d:	eb 28                	jmp    c0011d87 <SysFormatDisk(regs*)+0x39>
c0011d5f:	83 ec 0c             	sub    esp,0xc
c0011d62:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d65:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d68:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d6a:	51                   	push   ecx
c0011d6b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d6e:	51                   	push   ecx
c0011d6f:	50                   	push   eax
c0011d70:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d77:	50                   	push   eax
c0011d78:	53                   	push   ebx
c0011d79:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d7c:	83 c4 20             	add    esp,0x20
c0011d7f:	83 f8 08             	cmp    eax,0x8
c0011d82:	75 14                	jne    c0011d98 <SysFormatDisk(regs*)+0x4a>
c0011d84:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d87:	85 db                	test   ebx,ebx
c0011d89:	75 d4                	jne    c0011d5f <SysFormatDisk(regs*)+0x11>
c0011d8b:	83 c4 04             	add    esp,0x4
c0011d8e:	b8 03 00 00 00       	mov    eax,0x3
c0011d93:	31 d2                	xor    edx,edx
c0011d95:	5b                   	pop    ebx
c0011d96:	5e                   	pop    esi
c0011d97:	c3                   	ret    
c0011d98:	85 c0                	test   eax,eax
c0011d9a:	74 1f                	je     c0011dbb <SysFormatDisk(regs*)+0x6d>
c0011d9c:	83 f8 09             	cmp    eax,0x9
c0011d9f:	74 0d                	je     c0011dae <SysFormatDisk(regs*)+0x60>
c0011da1:	83 c4 04             	add    esp,0x4
c0011da4:	b8 02 00 00 00       	mov    eax,0x2
c0011da9:	31 d2                	xor    edx,edx
c0011dab:	5b                   	pop    ebx
c0011dac:	5e                   	pop    esi
c0011dad:	c3                   	ret    
c0011dae:	83 c4 04             	add    esp,0x4
c0011db1:	b8 01 00 00 00       	mov    eax,0x1
c0011db6:	31 d2                	xor    edx,edx
c0011db8:	5b                   	pop    ebx
c0011db9:	5e                   	pop    esi
c0011dba:	c3                   	ret    
c0011dbb:	83 c4 04             	add    esp,0x4
c0011dbe:	31 c0                	xor    eax,eax
c0011dc0:	31 d2                	xor    edx,edx
c0011dc2:	5b                   	pop    ebx
c0011dc3:	5e                   	pop    esi
c0011dc4:	c3                   	ret    

c0011dc5 <SysSetDiskVolumeLabel(regs*)>:
c0011dc5:	56                   	push   esi
c0011dc6:	53                   	push   ebx
c0011dc7:	83 ec 04             	sub    esp,0x4
c0011dca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011dce:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011dd1:	83 f8 19             	cmp    eax,0x19
c0011dd4:	77 33                	ja     c0011e09 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dd6:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011ddd:	85 c9                	test   ecx,ecx
c0011ddf:	74 28                	je     c0011e09 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011de1:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011de4:	85 db                	test   ebx,ebx
c0011de6:	74 21                	je     c0011e09 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011de8:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011dee:	85 d2                	test   edx,edx
c0011df0:	74 17                	je     c0011e09 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011df2:	8b 32                	mov    esi,DWORD PTR [edx]
c0011df4:	53                   	push   ebx
c0011df5:	50                   	push   eax
c0011df6:	51                   	push   ecx
c0011df7:	52                   	push   edx
c0011df8:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	89 c2                	mov    edx,eax
c0011e00:	83 c4 04             	add    esp,0x4
c0011e03:	c1 fa 1f             	sar    edx,0x1f
c0011e06:	5b                   	pop    ebx
c0011e07:	5e                   	pop    esi
c0011e08:	c3                   	ret    
c0011e09:	83 c4 04             	add    esp,0x4
c0011e0c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e11:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e16:	5b                   	pop    ebx
c0011e17:	5e                   	pop    esi
c0011e18:	c3                   	ret    

c0011e19 <SysGetDiskVolumeLabel(regs*)>:
c0011e19:	57                   	push   edi
c0011e1a:	56                   	push   esi
c0011e1b:	53                   	push   ebx
c0011e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e20:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e23:	83 fa 19             	cmp    edx,0x19
c0011e26:	77 3c                	ja     c0011e64 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e28:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e2f:	85 c9                	test   ecx,ecx
c0011e31:	74 31                	je     c0011e64 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e33:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e36:	85 db                	test   ebx,ebx
c0011e38:	74 2a                	je     c0011e64 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e3a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e3d:	85 f6                	test   esi,esi
c0011e3f:	74 23                	je     c0011e64 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e41:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e47:	85 c0                	test   eax,eax
c0011e49:	74 19                	je     c0011e64 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e4b:	83 ec 0c             	sub    esp,0xc
c0011e4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e50:	56                   	push   esi
c0011e51:	53                   	push   ebx
c0011e52:	52                   	push   edx
c0011e53:	51                   	push   ecx
c0011e54:	50                   	push   eax
c0011e55:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e58:	83 c4 20             	add    esp,0x20
c0011e5b:	89 c2                	mov    edx,eax
c0011e5d:	5b                   	pop    ebx
c0011e5e:	c1 fa 1f             	sar    edx,0x1f
c0011e61:	5e                   	pop    esi
c0011e62:	5f                   	pop    edi
c0011e63:	c3                   	ret    
c0011e64:	5b                   	pop    ebx
c0011e65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e6f:	5e                   	pop    esi
c0011e70:	5f                   	pop    edi
c0011e71:	c3                   	ret    

c0011e72 <SysShutdown(regs*)>:
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e7c:	85 c0                	test   eax,eax
c0011e7e:	74 18                	je     c0011e98 <SysShutdown(regs*)+0x26>
c0011e80:	83 f8 01             	cmp    eax,0x1
c0011e83:	74 38                	je     c0011ebd <SysShutdown(regs*)+0x4b>
c0011e85:	83 f8 02             	cmp    eax,0x2
c0011e88:	74 24                	je     c0011eae <SysShutdown(regs*)+0x3c>
c0011e8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e94:	83 c4 0c             	add    esp,0xc
c0011e97:	c3                   	ret    
c0011e98:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e9d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e9f:	6a 00                	push   0x0
c0011ea1:	6a 00                	push   0x0
c0011ea3:	6a 00                	push   0x0
c0011ea5:	50                   	push   eax
c0011ea6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	eb dc                	jmp    c0011e8a <SysShutdown(regs*)+0x18>
c0011eae:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011eb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011eb5:	6a 00                	push   0x0
c0011eb7:	6a 00                	push   0x0
c0011eb9:	6a 01                	push   0x1
c0011ebb:	eb e8                	jmp    c0011ea5 <SysShutdown(regs*)+0x33>
c0011ebd:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011ec2:	85 c0                	test   eax,eax
c0011ec4:	74 02                	je     c0011ec8 <SysShutdown(regs*)+0x56>
c0011ec6:	ff d0                	call   eax
c0011ec8:	31 c0                	xor    eax,eax
c0011eca:	31 d2                	xor    edx,edx
c0011ecc:	83 c4 0c             	add    esp,0xc
c0011ecf:	c3                   	ret    

c0011ed0 <SysRealpath(regs*)>:
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011eda:	85 d2                	test   edx,edx
c0011edc:	74 07                	je     c0011ee5 <SysRealpath(regs*)+0x15>
c0011ede:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011ee1:	85 c0                	test   eax,eax
c0011ee3:	75 0b                	jne    c0011ef0 <SysRealpath(regs*)+0x20>
c0011ee5:	b8 01 00 00 00       	mov    eax,0x1
c0011eea:	31 d2                	xor    edx,edx
c0011eec:	83 c4 0c             	add    esp,0xc
c0011eef:	c3                   	ret    
c0011ef0:	6a 00                	push   0x0
c0011ef2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ef8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011efb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f01:	51                   	push   ecx
c0011f02:	52                   	push   edx
c0011f03:	50                   	push   eax
c0011f04:	e8 91 99 ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	31 c0                	xor    eax,eax
c0011f0e:	31 d2                	xor    edx,edx
c0011f10:	83 c4 0c             	add    esp,0xc
c0011f13:	c3                   	ret    

c0011f14 <SysReadDir(regs*)>:
c0011f14:	53                   	push   ebx
c0011f15:	83 ec 18             	sub    esp,0x18
c0011f18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f1c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f1f:	83 f8 02             	cmp    eax,0x2
c0011f22:	76 61                	jbe    c0011f85 <SysReadDir(regs*)+0x71>
c0011f24:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f2b:	77 49                	ja     c0011f76 <SysReadDir(regs*)+0x62>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	50                   	push   eax
c0011f31:	e8 7d 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	85 c0                	test   eax,eax
c0011f3b:	74 39                	je     c0011f76 <SysReadDir(regs*)+0x62>
c0011f3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f45:	83 ec 0c             	sub    esp,0xc
c0011f48:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f4a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f4e:	51                   	push   ecx
c0011f4f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f52:	51                   	push   ecx
c0011f53:	6a 00                	push   0x0
c0011f55:	68 10 01 00 00       	push   0x110
c0011f5a:	50                   	push   eax
c0011f5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f5e:	83 c4 20             	add    esp,0x20
c0011f61:	85 c0                	test   eax,eax
c0011f63:	74 29                	je     c0011f8e <SysReadDir(regs*)+0x7a>
c0011f65:	83 f8 07             	cmp    eax,0x7
c0011f68:	74 1b                	je     c0011f85 <SysReadDir(regs*)+0x71>
c0011f6a:	b8 02 00 00 00       	mov    eax,0x2
c0011f6f:	31 d2                	xor    edx,edx
c0011f71:	83 c4 18             	add    esp,0x18
c0011f74:	5b                   	pop    ebx
c0011f75:	c3                   	ret    
c0011f76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f80:	83 c4 18             	add    esp,0x18
c0011f83:	5b                   	pop    ebx
c0011f84:	c3                   	ret    
c0011f85:	b8 01 00 00 00       	mov    eax,0x1
c0011f8a:	31 d2                	xor    edx,edx
c0011f8c:	eb e3                	jmp    c0011f71 <SysReadDir(regs*)+0x5d>
c0011f8e:	31 c0                	xor    eax,eax
c0011f90:	31 d2                	xor    edx,edx
c0011f92:	eb dd                	jmp    c0011f71 <SysReadDir(regs*)+0x5d>

c0011f94 <SysIsATTY(regs*)>:
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f9e:	83 f8 02             	cmp    eax,0x2
c0011fa1:	76 07                	jbe    c0011faa <SysIsATTY(regs*)+0x16>
c0011fa3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011fa8:	75 26                	jne    c0011fd0 <SysIsATTY(regs*)+0x3c>
c0011faa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011faf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011fb8:	85 c0                	test   eax,eax
c0011fba:	74 24                	je     c0011fe0 <SysIsATTY(regs*)+0x4c>
c0011fbc:	83 ec 0c             	sub    esp,0xc
c0011fbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fc1:	50                   	push   eax
c0011fc2:	ff 12                	call   DWORD PTR [edx]
c0011fc4:	31 d2                	xor    edx,edx
c0011fc6:	0f b6 c0             	movzx  eax,al
c0011fc9:	83 c4 10             	add    esp,0x10
c0011fcc:	83 c4 0c             	add    esp,0xc
c0011fcf:	c3                   	ret    
c0011fd0:	83 ec 0c             	sub    esp,0xc
c0011fd3:	50                   	push   eax
c0011fd4:	e8 da 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	85 c0                	test   eax,eax
c0011fde:	75 dc                	jne    c0011fbc <SysIsATTY(regs*)+0x28>
c0011fe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fe5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fea:	83 c4 0c             	add    esp,0xc
c0011fed:	c3                   	ret    

c0011fee <SysSeek(regs*)>:
c0011fee:	53                   	push   ebx
c0011fef:	83 ec 08             	sub    esp,0x8
c0011ff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ff6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ff9:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ffc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012002:	77 32                	ja     c0012036 <SysSeek(regs*)+0x48>
c0012004:	83 ec 0c             	sub    esp,0xc
c0012007:	50                   	push   eax
c0012008:	e8 a6 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001200d:	83 c4 0c             	add    esp,0xc
c0012010:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012013:	31 db                	xor    ebx,ebx
c0012015:	53                   	push   ebx
c0012016:	51                   	push   ecx
c0012017:	50                   	push   eax
c0012018:	e8 41 9c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	85 c0                	test   eax,eax
c0012022:	0f 95 c0             	setne  al
c0012025:	31 d2                	xor    edx,edx
c0012027:	0f b6 c0             	movzx  eax,al
c001202a:	f7 d8                	neg    eax
c001202c:	83 d2 00             	adc    edx,0x0
c001202f:	83 c4 08             	add    esp,0x8
c0012032:	f7 da                	neg    edx
c0012034:	5b                   	pop    ebx
c0012035:	c3                   	ret    
c0012036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001203b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012040:	83 c4 08             	add    esp,0x8
c0012043:	5b                   	pop    ebx
c0012044:	c3                   	ret    

c0012045 <SysTell(regs*)>:
c0012045:	53                   	push   ebx
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001204d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012050:	83 f8 02             	cmp    eax,0x2
c0012053:	76 4e                	jbe    c00120a3 <SysTell(regs*)+0x5e>
c0012055:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001205a:	76 19                	jbe    c0012075 <SysTell(regs*)+0x30>
c001205c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001205f:	31 d2                	xor    edx,edx
c0012061:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001206e:	31 c0                	xor    eax,eax
c0012070:	83 c4 08             	add    esp,0x8
c0012073:	5b                   	pop    ebx
c0012074:	c3                   	ret    
c0012075:	83 ec 0c             	sub    esp,0xc
c0012078:	50                   	push   eax
c0012079:	e8 35 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001207e:	5a                   	pop    edx
c001207f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012082:	59                   	pop    ecx
c0012083:	53                   	push   ebx
c0012084:	50                   	push   eax
c0012085:	e8 80 9c ff ff       	call   c000bd0a <File::tell(unsigned long long*)>
c001208a:	83 c4 10             	add    esp,0x10
c001208d:	85 c0                	test   eax,eax
c001208f:	0f 95 c0             	setne  al
c0012092:	31 d2                	xor    edx,edx
c0012094:	0f b6 c0             	movzx  eax,al
c0012097:	f7 d8                	neg    eax
c0012099:	83 d2 00             	adc    edx,0x0
c001209c:	83 c4 08             	add    esp,0x8
c001209f:	f7 da                	neg    edx
c00120a1:	5b                   	pop    ebx
c00120a2:	c3                   	ret    
c00120a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ad:	83 c4 08             	add    esp,0x8
c00120b0:	5b                   	pop    ebx
c00120b1:	c3                   	ret    

c00120b2 <SysSize(regs*)>:
c00120b2:	53                   	push   ebx
c00120b3:	83 ec 18             	sub    esp,0x18
c00120b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120bd:	83 f8 02             	cmp    eax,0x2
c00120c0:	76 54                	jbe    c0012116 <SysSize(regs*)+0x64>
c00120c2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120c7:	76 19                	jbe    c00120e2 <SysSize(regs*)+0x30>
c00120c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120cc:	31 d2                	xor    edx,edx
c00120ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120db:	31 c0                	xor    eax,eax
c00120dd:	83 c4 18             	add    esp,0x18
c00120e0:	5b                   	pop    ebx
c00120e1:	c3                   	ret    
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	50                   	push   eax
c00120e6:	e8 c8 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120eb:	83 c4 0c             	add    esp,0xc
c00120ee:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120f2:	52                   	push   edx
c00120f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120f6:	52                   	push   edx
c00120f7:	50                   	push   eax
c00120f8:	e8 a5 9d ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00120fd:	83 c4 10             	add    esp,0x10
c0012100:	85 c0                	test   eax,eax
c0012102:	0f 95 c0             	setne  al
c0012105:	31 d2                	xor    edx,edx
c0012107:	0f b6 c0             	movzx  eax,al
c001210a:	f7 d8                	neg    eax
c001210c:	83 d2 00             	adc    edx,0x0
c001210f:	83 c4 18             	add    esp,0x18
c0012112:	f7 da                	neg    edx
c0012114:	5b                   	pop    ebx
c0012115:	c3                   	ret    
c0012116:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001211b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012120:	83 c4 18             	add    esp,0x18
c0012123:	5b                   	pop    ebx
c0012124:	c3                   	ret    

c0012125 <SysSizeFromFilename(regs*)>:
c0012125:	55                   	push   ebp
c0012126:	57                   	push   edi
c0012127:	56                   	push   esi
c0012128:	53                   	push   ebx
c0012129:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001212f:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0012136:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012139:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001213c:	85 f6                	test   esi,esi
c001213e:	74 34                	je     c0012174 <SysSizeFromFilename(regs*)+0x4f>
c0012140:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012146:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012149:	83 f8 02             	cmp    eax,0x2
c001214c:	76 2d                	jbe    c001217b <SysSizeFromFilename(regs*)+0x56>
c001214e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012153:	76 3b                	jbe    c0012190 <SysSizeFromFilename(regs*)+0x6b>
c0012155:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001215e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012165:	81 c4 3c 01 00 00    	add    esp,0x13c
c001216b:	31 c0                	xor    eax,eax
c001216d:	5b                   	pop    ebx
c001216e:	31 d2                	xor    edx,edx
c0012170:	5e                   	pop    esi
c0012171:	5f                   	pop    edi
c0012172:	5d                   	pop    ebp
c0012173:	c3                   	ret    
c0012174:	89 f8                	mov    eax,edi
c0012176:	83 f8 02             	cmp    eax,0x2
c0012179:	77 d3                	ja     c001214e <SysSizeFromFilename(regs*)+0x29>
c001217b:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012181:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012186:	5b                   	pop    ebx
c0012187:	ba ff ff ff ff       	mov    edx,0xffffffff
c001218c:	5e                   	pop    esi
c001218d:	5f                   	pop    edi
c001218e:	5d                   	pop    ebp
c001218f:	c3                   	ret    
c0012190:	83 ec 0c             	sub    esp,0xc
c0012193:	68 14 01 00 00       	push   0x114
c0012198:	e8 19 59 ff ff       	call   c0007ab6 <malloc>
c001219d:	6a 01                	push   0x1
c001219f:	89 c5                	mov    ebp,eax
c00121a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121a9:	50                   	push   eax
c00121aa:	57                   	push   edi
c00121ab:	55                   	push   ebp
c00121ac:	e8 f3 98 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00121b1:	83 c4 1c             	add    esp,0x1c
c00121b4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00121b8:	50                   	push   eax
c00121b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121bc:	52                   	push   edx
c00121bd:	55                   	push   ebp
c00121be:	e8 df 9c ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	85 ed                	test   ebp,ebp
c00121c8:	74 15                	je     c00121df <SysSizeFromFilename(regs*)+0xba>
c00121ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	55                   	push   ebp
c00121d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121d8:	83 c4 10             	add    esp,0x10
c00121db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121df:	85 c0                	test   eax,eax
c00121e1:	75 98                	jne    c001217b <SysSizeFromFilename(regs*)+0x56>
c00121e3:	83 ec 08             	sub    esp,0x8
c00121e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00121ea:	50                   	push   eax
c00121eb:	57                   	push   edi
c00121ec:	e8 4b 8f ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	83 f8 01             	cmp    eax,0x1
c00121f7:	74 1a                	je     c0012213 <SysSizeFromFilename(regs*)+0xee>
c00121f9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00121fe:	74 26                	je     c0012226 <SysSizeFromFilename(regs*)+0x101>
c0012200:	85 f6                	test   esi,esi
c0012202:	0f 84 5d ff ff ff    	je     c0012165 <SysSizeFromFilename(regs*)+0x40>
c0012208:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001220e:	e9 52 ff ff ff       	jmp    c0012165 <SysSizeFromFilename(regs*)+0x40>
c0012213:	85 f6                	test   esi,esi
c0012215:	0f 84 4a ff ff ff    	je     c0012165 <SysSizeFromFilename(regs*)+0x40>
c001221b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012221:	e9 3f ff ff ff       	jmp    c0012165 <SysSizeFromFilename(regs*)+0x40>
c0012226:	85 f6                	test   esi,esi
c0012228:	0f 84 37 ff ff ff    	je     c0012165 <SysSizeFromFilename(regs*)+0x40>
c001222e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012234:	e9 2c ff ff ff       	jmp    c0012165 <SysSizeFromFilename(regs*)+0x40>

c0012239 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012239:	55                   	push   ebp
c001223a:	57                   	push   edi
c001223b:	56                   	push   esi
c001223c:	53                   	push   ebx
c001223d:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0012243:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c001224a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001224d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012250:	85 f6                	test   esi,esi
c0012252:	74 34                	je     c0012288 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012254:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001225a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001225d:	83 f8 02             	cmp    eax,0x2
c0012260:	76 2d                	jbe    c001228f <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012262:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012267:	76 3b                	jbe    c00122a4 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012269:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001226c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012279:	81 c4 3c 01 00 00    	add    esp,0x13c
c001227f:	31 c0                	xor    eax,eax
c0012281:	5b                   	pop    ebx
c0012282:	31 d2                	xor    edx,edx
c0012284:	5e                   	pop    esi
c0012285:	5f                   	pop    edi
c0012286:	5d                   	pop    ebp
c0012287:	c3                   	ret    
c0012288:	89 f8                	mov    eax,edi
c001228a:	83 f8 02             	cmp    eax,0x2
c001228d:	77 d3                	ja     c0012262 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c001228f:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012295:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001229a:	5b                   	pop    ebx
c001229b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122a0:	5e                   	pop    esi
c00122a1:	5f                   	pop    edi
c00122a2:	5d                   	pop    ebp
c00122a3:	c3                   	ret    
c00122a4:	83 ec 0c             	sub    esp,0xc
c00122a7:	68 14 01 00 00       	push   0x114
c00122ac:	e8 05 58 ff ff       	call   c0007ab6 <malloc>
c00122b1:	6a 00                	push   0x0
c00122b3:	89 c5                	mov    ebp,eax
c00122b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122bd:	50                   	push   eax
c00122be:	57                   	push   edi
c00122bf:	55                   	push   ebp
c00122c0:	e8 df 97 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00122c5:	83 c4 1c             	add    esp,0x1c
c00122c8:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00122cc:	50                   	push   eax
c00122cd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00122d0:	52                   	push   edx
c00122d1:	55                   	push   ebp
c00122d2:	e8 cb 9b ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00122d7:	83 c4 10             	add    esp,0x10
c00122da:	85 ed                	test   ebp,ebp
c00122dc:	74 15                	je     c00122f3 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00122de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	55                   	push   ebp
c00122e9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122f3:	85 c0                	test   eax,eax
c00122f5:	75 98                	jne    c001228f <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122f7:	83 ec 08             	sub    esp,0x8
c00122fa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00122fe:	50                   	push   eax
c00122ff:	57                   	push   edi
c0012300:	e8 37 8e ff ff       	call   c000b13c <KeDereferenceSymlink(char const*, char*)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	83 f8 01             	cmp    eax,0x1
c001230b:	74 1a                	je     c0012327 <SysSizeFromFilenameNoSymlink(regs*)+0xee>
c001230d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012312:	74 26                	je     c001233a <SysSizeFromFilenameNoSymlink(regs*)+0x101>
c0012314:	85 f6                	test   esi,esi
c0012316:	0f 84 5d ff ff ff    	je     c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001231c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012322:	e9 52 ff ff ff       	jmp    c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012327:	85 f6                	test   esi,esi
c0012329:	0f 84 4a ff ff ff    	je     c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001232f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012335:	e9 3f ff ff ff       	jmp    c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001233a:	85 f6                	test   esi,esi
c001233c:	0f 84 37 ff ff ff    	je     c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012342:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012348:	e9 2c ff ff ff       	jmp    c0012279 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001234d <SysClose(regs*)>:
c001234d:	53                   	push   ebx
c001234e:	83 ec 08             	sub    esp,0x8
c0012351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012355:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012358:	83 f8 02             	cmp    eax,0x2
c001235b:	76 41                	jbe    c001239e <SysClose(regs*)+0x51>
c001235d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012363:	83 fa 01             	cmp    edx,0x1
c0012366:	76 2d                	jbe    c0012395 <SysClose(regs*)+0x48>
c0012368:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001236d:	77 2f                	ja     c001239e <SysClose(regs*)+0x51>
c001236f:	83 ec 0c             	sub    esp,0xc
c0012372:	50                   	push   eax
c0012373:	e8 3b 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012378:	89 c3                	mov    ebx,eax
c001237a:	89 04 24             	mov    DWORD PTR [esp],eax
c001237d:	e8 7c 98 ff ff       	call   c000bbfe <File::close()>
c0012382:	83 c4 10             	add    esp,0x10
c0012385:	85 db                	test   ebx,ebx
c0012387:	74 0c                	je     c0012395 <SysClose(regs*)+0x48>
c0012389:	83 ec 0c             	sub    esp,0xc
c001238c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001238e:	53                   	push   ebx
c001238f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012392:	83 c4 10             	add    esp,0x10
c0012395:	31 c0                	xor    eax,eax
c0012397:	31 d2                	xor    edx,edx
c0012399:	83 c4 08             	add    esp,0x8
c001239c:	5b                   	pop    ebx
c001239d:	c3                   	ret    
c001239e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123a8:	83 c4 08             	add    esp,0x8
c00123ab:	5b                   	pop    ebx
c00123ac:	c3                   	ret    

c00123ad <SysOpenDir(regs*)>:
c00123ad:	56                   	push   esi
c00123ae:	53                   	push   ebx
c00123af:	83 ec 04             	sub    esp,0x4
c00123b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123b6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123b9:	85 c9                	test   ecx,ecx
c00123bb:	74 5d                	je     c001241a <SysOpenDir(regs*)+0x6d>
c00123bd:	83 ec 0c             	sub    esp,0xc
c00123c0:	68 14 01 00 00       	push   0x114
c00123c5:	e8 ec 56 ff ff       	call   c0007ab6 <malloc>
c00123ca:	83 c4 0c             	add    esp,0xc
c00123cd:	89 c6                	mov    esi,eax
c00123cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123d7:	50                   	push   eax
c00123d8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123db:	52                   	push   edx
c00123dc:	56                   	push   esi
c00123dd:	e8 80 9c ff ff       	call   c000c062 <Directory::Directory(char const*, Process*)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	85 f6                	test   esi,esi
c00123e7:	74 31                	je     c001241a <SysOpenDir(regs*)+0x6d>
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	56                   	push   esi
c00123ed:	e8 38 9d ff ff       	call   c000c12a <Directory::open()>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	85 c0                	test   eax,eax
c00123f7:	75 21                	jne    c001241a <SysOpenDir(regs*)+0x6d>
c00123f9:	83 ec 0c             	sub    esp,0xc
c00123fc:	56                   	push   esi
c00123fd:	e8 b4 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012402:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	89 02                	mov    DWORD PTR [edx],eax
c001240a:	c1 f8 1f             	sar    eax,0x1f
c001240d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012410:	83 c4 04             	add    esp,0x4
c0012413:	31 c0                	xor    eax,eax
c0012415:	31 d2                	xor    edx,edx
c0012417:	5b                   	pop    ebx
c0012418:	5e                   	pop    esi
c0012419:	c3                   	ret    
c001241a:	83 c4 04             	add    esp,0x4
c001241d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012422:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012427:	5b                   	pop    ebx
c0012428:	5e                   	pop    esi
c0012429:	c3                   	ret    

c001242a <SysMakeDir(regs*)>:
c001242a:	56                   	push   esi
c001242b:	53                   	push   ebx
c001242c:	83 ec 10             	sub    esp,0x10
c001242f:	68 14 01 00 00       	push   0x114
c0012434:	e8 7d 56 ff ff       	call   c0007ab6 <malloc>
c0012439:	83 c4 0c             	add    esp,0xc
c001243c:	89 c3                	mov    ebx,eax
c001243e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012443:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012446:	50                   	push   eax
c0012447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001244b:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001244e:	52                   	push   edx
c001244f:	53                   	push   ebx
c0012450:	e8 0d 9c ff ff       	call   c000c062 <Directory::Directory(char const*, Process*)>
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	85 db                	test   ebx,ebx
c001245a:	74 2c                	je     c0012488 <SysMakeDir(regs*)+0x5e>
c001245c:	83 ec 0c             	sub    esp,0xc
c001245f:	53                   	push   ebx
c0012460:	e8 a5 9e ff ff       	call   c000c30a <Directory::create()>
c0012465:	89 c6                	mov    esi,eax
c0012467:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001246c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	31 c0                	xor    eax,eax
c0012474:	85 f6                	test   esi,esi
c0012476:	0f 95 c0             	setne  al
c0012479:	31 d2                	xor    edx,edx
c001247b:	f7 d8                	neg    eax
c001247d:	83 d2 00             	adc    edx,0x0
c0012480:	83 c4 04             	add    esp,0x4
c0012483:	f7 da                	neg    edx
c0012485:	5b                   	pop    ebx
c0012486:	5e                   	pop    esi
c0012487:	c3                   	ret    
c0012488:	83 c4 04             	add    esp,0x4
c001248b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012490:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012495:	5b                   	pop    ebx
c0012496:	5e                   	pop    esi
c0012497:	c3                   	ret    

c0012498 <SysCloseDir(regs*)>:
c0012498:	53                   	push   ebx
c0012499:	83 ec 08             	sub    esp,0x8
c001249c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124a3:	8d 50 fd             	lea    edx,[eax-0x3]
c00124a6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00124ac:	77 2f                	ja     c00124dd <SysCloseDir(regs*)+0x45>
c00124ae:	83 ec 0c             	sub    esp,0xc
c00124b1:	50                   	push   eax
c00124b2:	e8 fc 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00124b7:	89 c3                	mov    ebx,eax
c00124b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00124bc:	e8 c5 9c ff ff       	call   c000c186 <Directory::close()>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	85 db                	test   ebx,ebx
c00124c6:	74 0c                	je     c00124d4 <SysCloseDir(regs*)+0x3c>
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124cd:	53                   	push   ebx
c00124ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124d1:	83 c4 10             	add    esp,0x10
c00124d4:	31 c0                	xor    eax,eax
c00124d6:	31 d2                	xor    edx,edx
c00124d8:	83 c4 08             	add    esp,0x8
c00124db:	5b                   	pop    ebx
c00124dc:	c3                   	ret    
c00124dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124e7:	83 c4 08             	add    esp,0x8
c00124ea:	5b                   	pop    ebx
c00124eb:	c3                   	ret    

c00124ec <SysWait(regs*)>:
c00124ec:	83 ec 10             	sub    esp,0x10
c00124ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124f6:	52                   	push   edx
c00124f7:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124fa:	51                   	push   ecx
c00124fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124fe:	50                   	push   eax
c00124ff:	e8 00 3e 00 00       	call   c0016304 <waitTask(int, int*, int)>
c0012504:	83 c4 1c             	add    esp,0x1c
c0012507:	89 c2                	mov    edx,eax
c0012509:	c1 fa 1f             	sar    edx,0x1f
c001250c:	c3                   	ret    

c001250d <SysNotImpl(regs*)>:
c001250d:	83 ec 18             	sub    esp,0x18
c0012510:	68 e6 24 02 c0       	push   0xc00224e6
c0012515:	e8 39 f1 ff ff       	call   c0011653 <KePanic(char const*)>
c001251a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001251f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012524:	83 c4 1c             	add    esp,0x1c
c0012527:	c3                   	ret    

c0012528 <SysPanic(regs*)>:
c0012528:	83 ec 18             	sub    esp,0x18
c001252b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001252f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012532:	50                   	push   eax
c0012533:	e8 1b f1 ff ff       	call   c0011653 <KePanic(char const*)>
c0012538:	b8 01 00 00 00       	mov    eax,0x1
c001253d:	31 d2                	xor    edx,edx
c001253f:	83 c4 1c             	add    esp,0x1c
c0012542:	c3                   	ret    

c0012543 <SysRmdir(regs*)>:
c0012543:	56                   	push   esi
c0012544:	53                   	push   ebx
c0012545:	83 ec 20             	sub    esp,0x20
c0012548:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001254c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001254f:	68 14 01 00 00       	push   0x114
c0012554:	e8 5d 55 ff ff       	call   c0007ab6 <malloc>
c0012559:	6a 00                	push   0x0
c001255b:	89 c3                	mov    ebx,eax
c001255d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012562:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012565:	50                   	push   eax
c0012566:	56                   	push   esi
c0012567:	53                   	push   ebx
c0012568:	e8 37 95 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c001256d:	83 c4 14             	add    esp,0x14
c0012570:	53                   	push   ebx
c0012571:	e8 f8 97 ff ff       	call   c000bd6e <File::unlink()>
c0012576:	83 c4 10             	add    esp,0x10
c0012579:	85 db                	test   ebx,ebx
c001257b:	74 14                	je     c0012591 <SysRmdir(regs*)+0x4e>
c001257d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012581:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012583:	83 ec 0c             	sub    esp,0xc
c0012586:	53                   	push   ebx
c0012587:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012591:	85 c0                	test   eax,eax
c0012593:	0f 95 c0             	setne  al
c0012596:	31 d2                	xor    edx,edx
c0012598:	0f b6 c0             	movzx  eax,al
c001259b:	f7 d8                	neg    eax
c001259d:	83 d2 00             	adc    edx,0x0
c00125a0:	83 c4 14             	add    esp,0x14
c00125a3:	f7 da                	neg    edx
c00125a5:	5b                   	pop    ebx
c00125a6:	5e                   	pop    esi
c00125a7:	c3                   	ret    

c00125a8 <SysUnlink(regs*)>:
c00125a8:	56                   	push   esi
c00125a9:	53                   	push   ebx
c00125aa:	83 ec 20             	sub    esp,0x20
c00125ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125b1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125b4:	68 14 01 00 00       	push   0x114
c00125b9:	e8 f8 54 ff ff       	call   c0007ab6 <malloc>
c00125be:	6a 00                	push   0x0
c00125c0:	89 c3                	mov    ebx,eax
c00125c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125ca:	50                   	push   eax
c00125cb:	56                   	push   esi
c00125cc:	53                   	push   ebx
c00125cd:	e8 d2 94 ff ff       	call   c000baa4 <File::File(char const*, Process*, bool)>
c00125d2:	83 c4 14             	add    esp,0x14
c00125d5:	53                   	push   ebx
c00125d6:	e8 93 97 ff ff       	call   c000bd6e <File::unlink()>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	85 db                	test   ebx,ebx
c00125e0:	74 14                	je     c00125f6 <SysUnlink(regs*)+0x4e>
c00125e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125e8:	83 ec 0c             	sub    esp,0xc
c00125eb:	53                   	push   ebx
c00125ec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125ef:	83 c4 10             	add    esp,0x10
c00125f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125f6:	85 c0                	test   eax,eax
c00125f8:	0f 95 c0             	setne  al
c00125fb:	31 d2                	xor    edx,edx
c00125fd:	0f b6 c0             	movzx  eax,al
c0012600:	f7 d8                	neg    eax
c0012602:	83 d2 00             	adc    edx,0x0
c0012605:	83 c4 14             	add    esp,0x14
c0012608:	f7 da                	neg    edx
c001260a:	5b                   	pop    ebx
c001260b:	5e                   	pop    esi
c001260c:	c3                   	ret    

c001260d <SysGetArgv(regs*)>:
c001260d:	83 ec 0c             	sub    esp,0xc
c0012610:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012614:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012617:	85 c0                	test   eax,eax
c0012619:	78 2c                	js     c0012647 <SysGetArgv(regs*)+0x3a>
c001261b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012621:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012624:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001262a:	7d 1b                	jge    c0012647 <SysGetArgv(regs*)+0x3a>
c001262c:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012633:	85 c0                	test   eax,eax
c0012635:	74 18                	je     c001264f <SysGetArgv(regs*)+0x42>
c0012637:	83 ec 08             	sub    esp,0x8
c001263a:	50                   	push   eax
c001263b:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001263e:	50                   	push   eax
c001263f:	e8 fc df fe ff       	call   c0000640 <strcpy>
c0012644:	83 c4 10             	add    esp,0x10
c0012647:	31 c0                	xor    eax,eax
c0012649:	31 d2                	xor    edx,edx
c001264b:	83 c4 0c             	add    esp,0xc
c001264e:	c3                   	ret    
c001264f:	b8 01 00 00 00       	mov    eax,0x1
c0012654:	31 d2                	xor    edx,edx
c0012656:	83 c4 0c             	add    esp,0xc
c0012659:	c3                   	ret    

c001265a <SysUSleep(regs*)>:
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012661:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012664:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012667:	6a 00                	push   0x0
c0012669:	6a 64                	push   0x64
c001266b:	52                   	push   edx
c001266c:	50                   	push   eax
c001266d:	e8 be d0 00 00       	call   c001f730 <__udivdi3>
c0012672:	83 c4 14             	add    esp,0x14
c0012675:	50                   	push   eax
c0012676:	e8 6d 3d 00 00       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001267b:	31 c0                	xor    eax,eax
c001267d:	31 d2                	xor    edx,edx
c001267f:	83 c4 1c             	add    esp,0x1c
c0012682:	c3                   	ret    

c0012683 <SysSpawn(regs*)>:
c0012683:	56                   	push   esi
c0012684:	53                   	push   ebx
c0012685:	83 ec 04             	sub    esp,0x4
c0012688:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001268c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001268f:	85 f6                	test   esi,esi
c0012691:	75 0a                	jne    c001269d <SysSpawn(regs*)+0x1a>
c0012693:	83 c4 04             	add    esp,0x4
c0012696:	31 c0                	xor    eax,eax
c0012698:	31 d2                	xor    edx,edx
c001269a:	5b                   	pop    ebx
c001269b:	5e                   	pop    esi
c001269c:	c3                   	ret    
c001269d:	83 ec 0c             	sub    esp,0xc
c00126a0:	68 24 07 00 00       	push   0x724
c00126a5:	e8 0c 54 ff ff       	call   c0007ab6 <malloc>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00126b0:	89 c6                	mov    esi,eax
c00126b2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00126b5:	85 c9                	test   ecx,ecx
c00126b7:	75 39                	jne    c00126f2 <SysSpawn(regs*)+0x6f>
c00126b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126c1:	52                   	push   edx
c00126c2:	50                   	push   eax
c00126c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126c6:	50                   	push   eax
c00126c7:	56                   	push   esi
c00126c8:	e8 6b 33 00 00       	call   c0015a38 <Process::Process(char const*, Process*, char**)>
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126d7:	75 ba                	jne    c0012693 <SysSpawn(regs*)+0x10>
c00126d9:	83 ec 0c             	sub    esp,0xc
c00126dc:	56                   	push   esi
c00126dd:	e8 92 38 00 00       	call   c0015f74 <Process::createUserThread()>
c00126e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	89 c2                	mov    edx,eax
c00126e9:	83 c4 04             	add    esp,0x4
c00126ec:	c1 fa 1f             	sar    edx,0x1f
c00126ef:	5b                   	pop    ebx
c00126f0:	5e                   	pop    esi
c00126f1:	c3                   	ret    
c00126f2:	31 c0                	xor    eax,eax
c00126f4:	eb cb                	jmp    c00126c1 <SysSpawn(regs*)+0x3e>

c00126f6 <SysGetEnv(regs*)>:
c00126f6:	57                   	push   edi
c00126f7:	56                   	push   esi
c00126f8:	53                   	push   ebx
c00126f9:	83 ec 1c             	sub    esp,0x1c
c00126fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012705:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012708:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001270b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001270e:	51                   	push   ecx
c001270f:	e8 f7 ed ff ff       	call   c001150b <KeGetProcessTotalEnvCount(Process*)>
c0012714:	83 c4 10             	add    esp,0x10
c0012717:	39 c7                	cmp    edi,eax
c0012719:	7c 14                	jl     c001272f <SysGetEnv(regs*)+0x39>
c001271b:	85 f6                	test   esi,esi
c001271d:	75 0b                	jne    c001272a <SysGetEnv(regs*)+0x34>
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	31 c0                	xor    eax,eax
c0012724:	5b                   	pop    ebx
c0012725:	31 d2                	xor    edx,edx
c0012727:	5e                   	pop    esi
c0012728:	5f                   	pop    edi
c0012729:	c3                   	ret    
c001272a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001272d:	eb f0                	jmp    c001271f <SysGetEnv(regs*)+0x29>
c001272f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012733:	83 ec 04             	sub    esp,0x4
c0012736:	57                   	push   edi
c0012737:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001273d:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012740:	57                   	push   edi
c0012741:	50                   	push   eax
c0012742:	e8 e4 ed ff ff       	call   c001152b <KeGetProcessEnvPair(Process*, int)>
c0012747:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001274a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001274e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012752:	83 c4 0c             	add    esp,0xc
c0012755:	85 d2                	test   edx,edx
c0012757:	75 23                	jne    c001277c <SysGetEnv(regs*)+0x86>
c0012759:	83 ec 0c             	sub    esp,0xc
c001275c:	50                   	push   eax
c001275d:	e8 0e de fe ff       	call   c0000570 <strlen>
c0012762:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012765:	89 c3                	mov    ebx,eax
c0012767:	e8 04 de fe ff       	call   c0000570 <strlen>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	31 d2                	xor    edx,edx
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	c3                   	ret    
c001277c:	83 ec 08             	sub    esp,0x8
c001277f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012782:	50                   	push   eax
c0012783:	56                   	push   esi
c0012784:	e8 b7 de fe ff       	call   c0000640 <strcpy>
c0012789:	58                   	pop    eax
c001278a:	5a                   	pop    edx
c001278b:	68 00 25 02 c0       	push   0xc0022500
c0012790:	56                   	push   esi
c0012791:	e8 aa e0 fe ff       	call   c0000840 <strcat>
c0012796:	59                   	pop    ecx
c0012797:	5b                   	pop    ebx
c0012798:	57                   	push   edi
c0012799:	56                   	push   esi
c001279a:	e8 a1 e0 fe ff       	call   c0000840 <strcat>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	e9 78 ff ff ff       	jmp    c001271f <SysGetEnv(regs*)+0x29>

c00127a7 <SysSetFatAttrib(regs*)>:
c00127a7:	57                   	push   edi
c00127a8:	56                   	push   esi
c00127a9:	53                   	push   ebx
c00127aa:	83 ec 1c             	sub    esp,0x1c
c00127ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00127b1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00127b4:	68 14 01 00 00       	push   0x114
c00127b9:	e8 f8 52 ff ff       	call   c0007ab6 <malloc>
c00127be:	83 c4 0c             	add    esp,0xc
c00127c1:	89 c3                	mov    ebx,eax
c00127c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127cb:	50                   	push   eax
c00127cc:	57                   	push   edi
c00127cd:	53                   	push   ebx
c00127ce:	e8 af 93 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c00127d3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127d6:	83 c4 0c             	add    esp,0xc
c00127d9:	0f b6 d4             	movzx  edx,ah
c00127dc:	0f b6 c0             	movzx  eax,al
c00127df:	52                   	push   edx
c00127e0:	50                   	push   eax
c00127e1:	53                   	push   ebx
c00127e2:	e8 21 96 ff ff       	call   c000be08 <File::chfatattr(unsigned char, unsigned char)>
c00127e7:	83 c4 10             	add    esp,0x10
c00127ea:	85 db                	test   ebx,ebx
c00127ec:	74 14                	je     c0012802 <SysSetFatAttrib(regs*)+0x5b>
c00127ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127f4:	83 ec 0c             	sub    esp,0xc
c00127f7:	53                   	push   ebx
c00127f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012802:	85 c0                	test   eax,eax
c0012804:	0f 95 c0             	setne  al
c0012807:	31 d2                	xor    edx,edx
c0012809:	0f b6 c0             	movzx  eax,al
c001280c:	f7 d8                	neg    eax
c001280e:	83 d2 00             	adc    edx,0x0
c0012811:	83 c4 10             	add    esp,0x10
c0012814:	f7 da                	neg    edx
c0012816:	5b                   	pop    ebx
c0012817:	5e                   	pop    esi
c0012818:	5f                   	pop    edi
c0012819:	c3                   	ret    

c001281a <SysPipe(regs*)>:
c001281a:	57                   	push   edi
c001281b:	56                   	push   esi
c001281c:	53                   	push   ebx
c001281d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012821:	83 ec 0c             	sub    esp,0xc
c0012824:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012827:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001282a:	6a 20                	push   0x20
c001282c:	e8 85 52 ff ff       	call   c0007ab6 <malloc>
c0012831:	89 c3                	mov    ebx,eax
c0012833:	58                   	pop    eax
c0012834:	5a                   	pop    edx
c0012835:	68 00 50 00 00       	push   0x5000
c001283a:	53                   	push   ebx
c001283b:	e8 e8 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012843:	e8 6e 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012848:	89 07                	mov    DWORD PTR [edi],eax
c001284a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001284d:	e8 64 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012852:	83 c4 10             	add    esp,0x10
c0012855:	89 06                	mov    DWORD PTR [esi],eax
c0012857:	31 d2                	xor    edx,edx
c0012859:	5b                   	pop    ebx
c001285a:	31 c0                	xor    eax,eax
c001285c:	5e                   	pop    esi
c001285d:	5f                   	pop    edi
c001285e:	c3                   	ret    

c001285f <SysGetUnixTime(regs*)>:
c001285f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012864:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001286a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001286e:	e9 db 9c ff ff       	jmp    c000c54e <Clock::timeInSecondsLocal()>

c0012873 <string_ends_with(char const*, char const*)>:
c0012873:	57                   	push   edi
c0012874:	56                   	push   esi
c0012875:	53                   	push   ebx
c0012876:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001287a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	53                   	push   ebx
c0012882:	e8 e9 dc fe ff       	call   c0000570 <strlen>
c0012887:	89 3c 24             	mov    DWORD PTR [esp],edi
c001288a:	89 c6                	mov    esi,eax
c001288c:	e8 df dc fe ff       	call   c0000570 <strlen>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	39 c6                	cmp    esi,eax
c0012896:	7d 06                	jge    c001289e <string_ends_with(char const*, char const*)+0x2b>
c0012898:	5b                   	pop    ebx
c0012899:	31 c0                	xor    eax,eax
c001289b:	5e                   	pop    esi
c001289c:	5f                   	pop    edi
c001289d:	c3                   	ret    
c001289e:	83 ec 08             	sub    esp,0x8
c00128a1:	29 c6                	sub    esi,eax
c00128a3:	57                   	push   edi
c00128a4:	01 f3                	add    ebx,esi
c00128a6:	53                   	push   ebx
c00128a7:	e8 a4 de fe ff       	call   c0000750 <strcmp>
c00128ac:	83 c4 10             	add    esp,0x10
c00128af:	85 c0                	test   eax,eax
c00128b1:	5b                   	pop    ebx
c00128b2:	0f 94 c0             	sete   al
c00128b5:	5e                   	pop    esi
c00128b6:	0f b6 c0             	movzx  eax,al
c00128b9:	5f                   	pop    edi
c00128ba:	c3                   	ret    

c00128bb <SysOpen(regs*)>:
c00128bb:	56                   	push   esi
c00128bc:	53                   	push   ebx
c00128bd:	81 ec 04 01 00 00    	sub    esp,0x104
c00128c3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128cd:	85 c0                	test   eax,eax
c00128cf:	0f 84 bc 01 00 00    	je     c0012a91 <SysOpen(regs*)+0x1d6>
c00128d5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128d8:	85 c0                	test   eax,eax
c00128da:	0f 84 b1 01 00 00    	je     c0012a91 <SysOpen(regs*)+0x1d6>
c00128e0:	6a 00                	push   0x0
c00128e2:	68 02 25 02 c0       	push   0xc0022502
c00128e7:	50                   	push   eax
c00128e8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ec:	56                   	push   esi
c00128ed:	e8 a8 8f ff ff       	call   c000b89a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f5:	e8 76 dc fe ff       	call   c0000570 <strlen>
c00128fa:	83 c4 10             	add    esp,0x10
c00128fd:	83 e8 01             	sub    eax,0x1
c0012900:	74 21                	je     c0012923 <SysOpen(regs*)+0x68>
c0012902:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012906:	eb 12                	jmp    c001291a <SysOpen(regs*)+0x5f>
c0012908:	83 fa 3a             	cmp    edx,0x3a
c001290b:	74 12                	je     c001291f <SysOpen(regs*)+0x64>
c001290d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012911:	83 e8 01             	sub    eax,0x1
c0012914:	74 0d                	je     c0012923 <SysOpen(regs*)+0x68>
c0012916:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001291a:	83 fa 2e             	cmp    edx,0x2e
c001291d:	75 e9                	jne    c0012908 <SysOpen(regs*)+0x4d>
c001291f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012923:	83 ec 08             	sub    esp,0x8
c0012926:	68 06 25 02 c0       	push   0xc0022506
c001292b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001292e:	50                   	push   eax
c001292f:	e8 3f ff ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	85 c0                	test   eax,eax
c0012939:	74 1d                	je     c0012958 <SysOpen(regs*)+0x9d>
c001293b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001293e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001294b:	81 c4 04 01 00 00    	add    esp,0x104
c0012951:	31 c0                	xor    eax,eax
c0012953:	31 d2                	xor    edx,edx
c0012955:	5b                   	pop    ebx
c0012956:	5e                   	pop    esi
c0012957:	c3                   	ret    
c0012958:	83 ec 08             	sub    esp,0x8
c001295b:	68 0b 25 02 c0       	push   0xc002250b
c0012960:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012963:	50                   	push   eax
c0012964:	e8 0a ff ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	85 c0                	test   eax,eax
c001296e:	75 cb                	jne    c001293b <SysOpen(regs*)+0x80>
c0012970:	83 ec 08             	sub    esp,0x8
c0012973:	68 07 25 02 c0       	push   0xc0022507
c0012978:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001297b:	50                   	push   eax
c001297c:	e8 cf dd fe ff       	call   c0000750 <strcmp>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	85 c0                	test   eax,eax
c0012986:	74 b3                	je     c001293b <SysOpen(regs*)+0x80>
c0012988:	83 ec 08             	sub    esp,0x8
c001298b:	68 06 25 02 c0       	push   0xc0022506
c0012990:	56                   	push   esi
c0012991:	e8 dd fe ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c0012996:	83 c4 10             	add    esp,0x10
c0012999:	85 c0                	test   eax,eax
c001299b:	75 9e                	jne    c001293b <SysOpen(regs*)+0x80>
c001299d:	83 ec 08             	sub    esp,0x8
c00129a0:	68 10 25 02 c0       	push   0xc0022510
c00129a5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129a8:	50                   	push   eax
c00129a9:	e8 c5 fe ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	85 c0                	test   eax,eax
c00129b3:	0f 85 eb 00 00 00    	jne    c0012aa4 <SysOpen(regs*)+0x1e9>
c00129b9:	83 ec 08             	sub    esp,0x8
c00129bc:	68 15 25 02 c0       	push   0xc0022515
c00129c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129c4:	50                   	push   eax
c00129c5:	e8 a9 fe ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c00129ca:	83 c4 10             	add    esp,0x10
c00129cd:	85 c0                	test   eax,eax
c00129cf:	0f 85 cf 00 00 00    	jne    c0012aa4 <SysOpen(regs*)+0x1e9>
c00129d5:	83 ec 08             	sub    esp,0x8
c00129d8:	68 11 25 02 c0       	push   0xc0022511
c00129dd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129e0:	51                   	push   ecx
c00129e1:	e8 6a dd fe ff       	call   c0000750 <strcmp>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	85 c0                	test   eax,eax
c00129eb:	0f 84 b3 00 00 00    	je     c0012aa4 <SysOpen(regs*)+0x1e9>
c00129f1:	83 ec 08             	sub    esp,0x8
c00129f4:	68 10 25 02 c0       	push   0xc0022510
c00129f9:	56                   	push   esi
c00129fa:	e8 74 fe ff ff       	call   c0012873 <string_ends_with(char const*, char const*)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	85 c0                	test   eax,eax
c0012a04:	0f 85 9a 00 00 00    	jne    c0012aa4 <SysOpen(regs*)+0x1e9>
c0012a0a:	83 ec 0c             	sub    esp,0xc
c0012a0d:	68 14 01 00 00       	push   0x114
c0012a12:	e8 9f 50 ff ff       	call   c0007ab6 <malloc>
c0012a17:	83 c4 0c             	add    esp,0xc
c0012a1a:	89 c6                	mov    esi,eax
c0012a1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a24:	50                   	push   eax
c0012a25:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a28:	52                   	push   edx
c0012a29:	56                   	push   esi
c0012a2a:	e8 53 91 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	85 f6                	test   esi,esi
c0012a34:	74 5b                	je     c0012a91 <SysOpen(regs*)+0x1d6>
c0012a36:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a39:	0f b6 c2             	movzx  eax,dl
c0012a3c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a3f:	89 d0                	mov    eax,edx
c0012a41:	83 e0 01             	and    eax,0x1
c0012a44:	f6 c2 02             	test   dl,0x2
c0012a47:	74 03                	je     c0012a4c <SysOpen(regs*)+0x191>
c0012a49:	83 c8 02             	or     eax,0x2
c0012a4c:	f6 c2 04             	test   dl,0x4
c0012a4f:	74 03                	je     c0012a54 <SysOpen(regs*)+0x199>
c0012a51:	83 c8 04             	or     eax,0x4
c0012a54:	f6 c2 08             	test   dl,0x8
c0012a57:	74 03                	je     c0012a5c <SysOpen(regs*)+0x1a1>
c0012a59:	83 c8 0a             	or     eax,0xa
c0012a5c:	80 e2 10             	and    dl,0x10
c0012a5f:	74 03                	je     c0012a64 <SysOpen(regs*)+0x1a9>
c0012a61:	83 c8 12             	or     eax,0x12
c0012a64:	83 ec 08             	sub    esp,0x8
c0012a67:	50                   	push   eax
c0012a68:	56                   	push   esi
c0012a69:	e8 32 91 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	85 c0                	test   eax,eax
c0012a73:	75 1c                	jne    c0012a91 <SysOpen(regs*)+0x1d6>
c0012a75:	83 ec 0c             	sub    esp,0xc
c0012a78:	56                   	push   esi
c0012a79:	e8 38 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a7e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	89 02                	mov    DWORD PTR [edx],eax
c0012a86:	c1 f8 1f             	sar    eax,0x1f
c0012a89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a8c:	e9 ba fe ff ff       	jmp    c001294b <SysOpen(regs*)+0x90>
c0012a91:	81 c4 04 01 00 00    	add    esp,0x104
c0012a97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a9c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012aa1:	5b                   	pop    ebx
c0012aa2:	5e                   	pop    esi
c0012aa3:	c3                   	ret    
c0012aa4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012aa7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012aad:	e9 92 fe ff ff       	jmp    c0012944 <SysOpen(regs*)+0x89>

c0012ab2 <KeSystemCall(regs*, void*)>:
c0012ab2:	53                   	push   ebx
c0012ab3:	83 ec 08             	sub    esp,0x8
c0012ab6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012aba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012abd:	83 f8 3e             	cmp    eax,0x3e
c0012ac0:	77 16                	ja     c0012ad8 <KeSystemCall(regs*, void*)+0x26>
c0012ac2:	8b 14 85 20 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2e0]
c0012ac9:	85 d2                	test   edx,edx
c0012acb:	74 0b                	je     c0012ad8 <KeSystemCall(regs*, void*)+0x26>
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	53                   	push   ebx
c0012ad1:	ff d2                	call   edx
c0012ad3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012ad6:	eb 0d                	jmp    c0012ae5 <KeSystemCall(regs*, void*)+0x33>
c0012ad8:	52                   	push   edx
c0012ad9:	52                   	push   edx
c0012ada:	50                   	push   eax
c0012adb:	68 1a 25 02 c0       	push   0xc002251a
c0012ae0:	e8 60 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012aed:	31 d2                	xor    edx,edx
c0012aef:	83 c4 08             	add    esp,0x8
c0012af2:	5b                   	pop    ebx
c0012af3:	c3                   	ret    

c0012af4 <KeSwitchEndian16(unsigned short)>:
c0012af4:	83 ec 04             	sub    esp,0x4
c0012af7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012afb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012aff:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b03:	c1 f8 08             	sar    eax,0x8
c0012b06:	89 c2                	mov    edx,eax
c0012b08:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b0c:	c1 e0 08             	shl    eax,0x8
c0012b0f:	09 d0                	or     eax,edx
c0012b11:	83 c4 04             	add    esp,0x4
c0012b14:	c3                   	ret    
c0012b15:	8d 76 00             	lea    esi,[esi+0x0]

c0012b18 <KeSwitchEndian32(unsigned int)>:
c0012b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1c:	c1 e8 18             	shr    eax,0x18
c0012b1f:	89 c2                	mov    edx,eax
c0012b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b25:	c1 e0 08             	shl    eax,0x8
c0012b28:	25 00 00 ff 00       	and    eax,0xff0000
c0012b2d:	09 c2                	or     edx,eax
c0012b2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b33:	c1 e8 08             	shr    eax,0x8
c0012b36:	25 00 ff 00 00       	and    eax,0xff00
c0012b3b:	09 c2                	or     edx,eax
c0012b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b41:	c1 e0 18             	shl    eax,0x18
c0012b44:	09 d0                	or     eax,edx
c0012b46:	c3                   	ret    
c0012b47:	90                   	nop

c0012b48 <EthernetCRC32(unsigned char*, int)>:
c0012b48:	83 ec 10             	sub    esp,0x10
c0012b4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b50:	75 0a                	jne    c0012b5c <EthernetCRC32(unsigned char*, int)+0x14>
c0012b52:	b8 00 00 00 00       	mov    eax,0x0
c0012b57:	e9 8c 00 00 00       	jmp    c0012be8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b5c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b61:	7f 09                	jg     c0012b6c <EthernetCRC32(unsigned char*, int)+0x24>
c0012b63:	b8 00 00 00 00       	mov    eax,0x0
c0012b68:	eb 7e                	jmp    c0012be8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b6a:	66 90                	xchg   ax,ax
c0012b6c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b80:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b84:	7d 5a                	jge    c0012be0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b8e:	01 d0                	add    eax,edx
c0012b90:	8a 00                	mov    al,BYTE PTR [eax]
c0012b92:	0f b6 c0             	movzx  eax,al
c0012b95:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ba4:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ba9:	7f 2d                	jg     c0012bd8 <EthernetCRC32(unsigned char*, int)+0x90>
c0012bab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012baf:	83 e0 01             	and    eax,0x1
c0012bb2:	74 10                	je     c0012bc4 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb8:	d1 e8                	shr    eax,1
c0012bba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012bbf:	eb 0b                	jmp    c0012bcc <EthernetCRC32(unsigned char*, int)+0x84>
c0012bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc8:	d1 e8                	shr    eax,1
c0012bca:	66 90                	xchg   ax,ax
c0012bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012bd0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bd5:	eb cd                	jmp    c0012ba4 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012bd7:	90                   	nop
c0012bd8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bdd:	eb 9d                	jmp    c0012b7c <EthernetCRC32(unsigned char*, int)+0x34>
c0012bdf:	90                   	nop
c0012be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be4:	f7 d0                	not    eax
c0012be6:	66 90                	xchg   ax,ax
c0012be8:	83 c4 10             	add    esp,0x10
c0012beb:	c3                   	ret    

c0012bec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bec:	83 ec 2c             	sub    esp,0x2c
c0012bef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bf3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c07:	0f b7 c0             	movzx  eax,ax
c0012c0a:	3d 06 08 00 00       	cmp    eax,0x806
c0012c0f:	75 13                	jne    c0012c24 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c11:	83 ec 0c             	sub    esp,0xc
c0012c14:	68 2e 25 02 c0       	push   0xc002252e
c0012c19:	e8 27 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	eb 25                	jmp    c0012c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c23:	90                   	nop
c0012c24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c2b:	0f b7 c0             	movzx  eax,ax
c0012c2e:	3d 00 08 00 00       	cmp    eax,0x800
c0012c33:	75 13                	jne    c0012c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	68 44 25 02 c0       	push   0xc0022544
c0012c3d:	e8 03 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c42:	83 c4 10             	add    esp,0x10
c0012c45:	8d 76 00             	lea    esi,[esi+0x0]
c0012c48:	90                   	nop
c0012c49:	83 c4 2c             	add    esp,0x2c
c0012c4c:	c3                   	ret    

c0012c4d <CmOpen(char const*)>:
c0012c4d:	57                   	push   edi
c0012c4e:	56                   	push   esi
c0012c4f:	53                   	push   ebx
c0012c50:	83 ec 1c             	sub    esp,0x1c
c0012c53:	6a 30                	push   0x30
c0012c55:	e8 5c 4e ff ff       	call   c0007ab6 <malloc>
c0012c5a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c61:	89 c3                	mov    ebx,eax
c0012c63:	e8 4e 4e ff ff       	call   c0007ab6 <malloc>
c0012c68:	83 c4 0c             	add    esp,0xc
c0012c6b:	89 c6                	mov    esi,eax
c0012c6d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c77:	50                   	push   eax
c0012c78:	e8 05 8f ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0012c7d:	83 c4 0c             	add    esp,0xc
c0012c80:	89 33                	mov    DWORD PTR [ebx],esi
c0012c82:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c86:	50                   	push   eax
c0012c87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c8b:	50                   	push   eax
c0012c8c:	56                   	push   esi
c0012c8d:	e8 10 92 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0012c92:	5a                   	pop    edx
c0012c93:	59                   	pop    ecx
c0012c94:	6a 01                	push   0x1
c0012c96:	ff 33                	push   DWORD PTR [ebx]
c0012c98:	e8 03 8f ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012c9d:	5e                   	pop    esi
c0012c9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ca2:	e8 0f 4e ff ff       	call   c0007ab6 <malloc>
c0012ca7:	5a                   	pop    edx
c0012ca8:	89 c7                	mov    edi,eax
c0012caa:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012cae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb0:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cb2:	56                   	push   esi
c0012cb3:	57                   	push   edi
c0012cb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cbc:	50                   	push   eax
c0012cbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cc0:	83 c4 14             	add    esp,0x14
c0012cc3:	ff 33                	push   DWORD PTR [ebx]
c0012cc5:	e8 34 8f ff ff       	call   c000bbfe <File::close()>
c0012cca:	59                   	pop    ecx
c0012ccb:	58                   	pop    eax
c0012ccc:	6a 13                	push   0x13
c0012cce:	ff 33                	push   DWORD PTR [ebx]
c0012cd0:	e8 cb 8e ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0012cd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cdc:	57                   	push   edi
c0012cdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ce5:	50                   	push   eax
c0012ce6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ce9:	83 c4 14             	add    esp,0x14
c0012cec:	57                   	push   edi
c0012ced:	e8 d4 4d ff ff       	call   c0007ac6 <free>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cf8:	75 10                	jne    c0012d0a <CmOpen(char const*)+0xbd>
c0012cfa:	83 ec 0c             	sub    esp,0xc
c0012cfd:	68 59 25 02 c0       	push   0xc0022559
c0012d02:	e8 4c e9 ff ff       	call   c0011653 <KePanic(char const*)>
c0012d07:	83 c4 10             	add    esp,0x10
c0012d0a:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d0d:	50                   	push   eax
c0012d0e:	6a 00                	push   0x0
c0012d10:	6a 00                	push   0x0
c0012d12:	ff 33                	push   DWORD PTR [ebx]
c0012d14:	e8 45 8f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d20:	57                   	push   edi
c0012d21:	6a 00                	push   0x0
c0012d23:	6a 2b                	push   0x2b
c0012d25:	50                   	push   eax
c0012d26:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d29:	83 c4 1c             	add    esp,0x1c
c0012d2c:	6a 00                	push   0x0
c0012d2e:	6a 00                	push   0x0
c0012d30:	ff 33                	push   DWORD PTR [ebx]
c0012d32:	e8 27 8f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012d37:	83 c4 0c             	add    esp,0xc
c0012d3a:	6a 08                	push   0x8
c0012d3c:	68 6a 25 02 c0       	push   0xc002256a
c0012d41:	57                   	push   edi
c0012d42:	e8 39 d6 fe ff       	call   c0000380 <memcmp>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	85 c0                	test   eax,eax
c0012d4c:	74 10                	je     c0012d5e <CmOpen(char const*)+0x111>
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	68 73 25 02 c0       	push   0xc0022573
c0012d56:	e8 f8 e8 ff ff       	call   c0011653 <KePanic(char const*)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d62:	89 d8                	mov    eax,ebx
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	5b                   	pop    ebx
c0012d68:	5e                   	pop    esi
c0012d69:	5f                   	pop    edi
c0012d6a:	c3                   	ret    

c0012d6b <CmClose(Reghive_Tag*)>:
c0012d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d6f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d73:	74 0b                	je     c0012d80 <CmClose(Reghive_Tag*)+0x15>
c0012d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d7b:	e9 7e 8e ff ff       	jmp    c000bbfe <File::close()>
c0012d80:	c3                   	ret    

c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d81:	53                   	push   ebx
c0012d82:	83 ec 18             	sub    esp,0x18
c0012d85:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d89:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d8d:	74 29                	je     c0012db8 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d8f:	50                   	push   eax
c0012d90:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d95:	99                   	cdq    
c0012d96:	52                   	push   edx
c0012d97:	50                   	push   eax
c0012d98:	ff 33                	push   DWORD PTR [ebx]
c0012d9a:	e8 bf 8e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012d9f:	5a                   	pop    edx
c0012da0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012da2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012da6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012da8:	51                   	push   ecx
c0012da9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dad:	6a 00                	push   0x0
c0012daf:	6a 2b                	push   0x2b
c0012db1:	50                   	push   eax
c0012db2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012db5:	83 c4 20             	add    esp,0x20
c0012db8:	83 c4 18             	add    esp,0x18
c0012dbb:	5b                   	pop    ebx
c0012dbc:	c3                   	ret    

c0012dbd <CmGetString(Reghive_Tag*, int, char*)>:
c0012dbd:	55                   	push   ebp
c0012dbe:	57                   	push   edi
c0012dbf:	56                   	push   esi
c0012dc0:	53                   	push   ebx
c0012dc1:	31 db                	xor    ebx,ebx
c0012dc3:	83 ec 70             	sub    esp,0x70
c0012dc6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012dcd:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012dd1:	50                   	push   eax
c0012dd2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012dd9:	55                   	push   ebp
c0012dda:	e8 a2 ff ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012de7:	c1 e0 08             	shl    eax,0x8
c0012dea:	89 c2                	mov    edx,eax
c0012dec:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012df1:	09 d0                	or     eax,edx
c0012df3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012df8:	c1 e0 08             	shl    eax,0x8
c0012dfb:	09 d0                	or     eax,edx
c0012dfd:	74 25                	je     c0012e24 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dff:	6b fb 0d             	imul   edi,ebx,0xd
c0012e02:	52                   	push   edx
c0012e03:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e07:	52                   	push   edx
c0012e08:	50                   	push   eax
c0012e09:	55                   	push   ebp
c0012e0a:	e8 72 ff ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0f:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e13:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e1a:	b9 27 00 00 00       	mov    ecx,0x27
c0012e1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	83 c3 03             	add    ebx,0x3
c0012e27:	83 fb 15             	cmp    ebx,0x15
c0012e2a:	75 b6                	jne    c0012de2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e2c:	83 c4 6c             	add    esp,0x6c
c0012e2f:	5b                   	pop    ebx
c0012e30:	5e                   	pop    esi
c0012e31:	5f                   	pop    edi
c0012e32:	5d                   	pop    ebp
c0012e33:	c3                   	ret    

c0012e34 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e34:	83 ec 40             	sub    esp,0x40
c0012e37:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e3b:	50                   	push   eax
c0012e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e44:	e8 38 ff ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e49:	83 c4 10             	add    esp,0x10
c0012e4c:	83 c8 ff             	or     eax,0xffffffff
c0012e4f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e54:	75 19                	jne    c0012e6f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e56:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e5b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e60:	c1 e0 08             	shl    eax,0x8
c0012e63:	09 c2                	or     edx,eax
c0012e65:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e6a:	c1 e0 10             	shl    eax,0x10
c0012e6d:	09 d0                	or     eax,edx
c0012e6f:	83 c4 3c             	add    esp,0x3c
c0012e72:	c3                   	ret    

c0012e73 <CmGetNext(Reghive_Tag*, int)>:
c0012e73:	83 ec 40             	sub    esp,0x40
c0012e76:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e7a:	50                   	push   eax
c0012e7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e83:	e8 f9 fe ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e88:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e8d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e92:	c1 e0 08             	shl    eax,0x8
c0012e95:	09 c2                	or     edx,eax
c0012e97:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e9c:	83 c4 4c             	add    esp,0x4c
c0012e9f:	c1 e0 10             	shl    eax,0x10
c0012ea2:	09 d0                	or     eax,edx
c0012ea4:	c3                   	ret    

c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ea5:	53                   	push   ebx
c0012ea6:	83 ec 18             	sub    esp,0x18
c0012ea9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ead:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012eb1:	74 29                	je     c0012edc <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012eb3:	50                   	push   eax
c0012eb4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012eb9:	99                   	cdq    
c0012eba:	52                   	push   edx
c0012ebb:	50                   	push   eax
c0012ebc:	ff 33                	push   DWORD PTR [ebx]
c0012ebe:	e8 9b 8d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012ec3:	5a                   	pop    edx
c0012ec4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ec6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012eca:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ecc:	51                   	push   ecx
c0012ecd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ed1:	6a 00                	push   0x0
c0012ed3:	6a 2b                	push   0x2b
c0012ed5:	50                   	push   eax
c0012ed6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ed9:	83 c4 20             	add    esp,0x20
c0012edc:	83 c4 18             	add    esp,0x18
c0012edf:	5b                   	pop    ebx
c0012ee0:	c3                   	ret    

c0012ee1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ee1:	53                   	push   ebx
c0012ee2:	83 ec 3c             	sub    esp,0x3c
c0012ee5:	6a 2b                	push   0x2b
c0012ee7:	6a 00                	push   0x0
c0012ee9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012eed:	53                   	push   ebx
c0012eee:	e8 fd d5 fe ff       	call   c00004f0 <memset>
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	53                   	push   ebx
c0012ef7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eff:	e8 a1 ff ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f04:	83 c4 48             	add    esp,0x48
c0012f07:	5b                   	pop    ebx
c0012f08:	c3                   	ret    

c0012f09 <CmUpdateHeader(Reghive_Tag*)>:
c0012f09:	83 ec 0c             	sub    esp,0xc
c0012f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f10:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f14:	74 10                	je     c0012f26 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f16:	52                   	push   edx
c0012f17:	8d 50 05             	lea    edx,[eax+0x5]
c0012f1a:	52                   	push   edx
c0012f1b:	6a 00                	push   0x0
c0012f1d:	50                   	push   eax
c0012f1e:	e8 82 ff ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	83 c4 0c             	add    esp,0xc
c0012f29:	c3                   	ret    

c0012f2a <CmExpand(Reghive_Tag*, int)>:
c0012f2a:	57                   	push   edi
c0012f2b:	56                   	push   esi
c0012f2c:	83 ce ff             	or     esi,0xffffffff
c0012f2f:	53                   	push   ebx
c0012f30:	83 ec 30             	sub    esp,0x30
c0012f33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f37:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f3b:	74 5f                	je     c0012f9c <CmExpand(Reghive_Tag*, int)+0x72>
c0012f3d:	31 d2                	xor    edx,edx
c0012f3f:	31 f6                	xor    esi,esi
c0012f41:	50                   	push   eax
c0012f42:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f46:	52                   	push   edx
c0012f47:	50                   	push   eax
c0012f48:	ff 33                	push   DWORD PTR [ebx]
c0012f4a:	e8 0f 8d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012f4f:	83 c4 0c             	add    esp,0xc
c0012f52:	6a 2b                	push   0x2b
c0012f54:	6a 00                	push   0x0
c0012f56:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f5a:	57                   	push   edi
c0012f5b:	e8 90 d5 fe ff       	call   c00004f0 <memset>
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f67:	7d 1b                	jge    c0012f84 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f6e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f74:	46                   	inc    esi
c0012f75:	51                   	push   ecx
c0012f76:	57                   	push   edi
c0012f77:	6a 00                	push   0x0
c0012f79:	6a 2b                	push   0x2b
c0012f7b:	50                   	push   eax
c0012f7c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f7f:	83 c4 20             	add    esp,0x20
c0012f82:	eb df                	jmp    c0012f63 <CmExpand(Reghive_Tag*, int)+0x39>
c0012f84:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f88:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f8b:	83 ec 0c             	sub    esp,0xc
c0012f8e:	01 f2                	add    edx,esi
c0012f90:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f93:	53                   	push   ebx
c0012f94:	e8 70 ff ff ff       	call   c0012f09 <CmUpdateHeader(Reghive_Tag*)>
c0012f99:	83 c4 10             	add    esp,0x10
c0012f9c:	83 c4 30             	add    esp,0x30
c0012f9f:	89 f0                	mov    eax,esi
c0012fa1:	5b                   	pop    ebx
c0012fa2:	5e                   	pop    esi
c0012fa3:	5f                   	pop    edi
c0012fa4:	c3                   	ret    

c0012fa5 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012fa5:	55                   	push   ebp
c0012fa6:	57                   	push   edi
c0012fa7:	56                   	push   esi
c0012fa8:	53                   	push   ebx
c0012fa9:	83 cb ff             	or     ebx,0xffffffff
c0012fac:	83 ec 1c             	sub    esp,0x1c
c0012faf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012fb3:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012fb7:	74 68                	je     c0013021 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fb9:	be 2b 00 00 00       	mov    esi,0x2b
c0012fbe:	51                   	push   ecx
c0012fbf:	31 ff                	xor    edi,edi
c0012fc1:	6a 00                	push   0x0
c0012fc3:	31 db                	xor    ebx,ebx
c0012fc5:	6a 00                	push   0x0
c0012fc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fca:	e8 8f 8c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0012fcf:	83 c4 10             	add    esp,0x10
c0012fd2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fd5:	76 3b                	jbe    c0013012 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fd7:	83 ec 0c             	sub    esp,0xc
c0012fda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fdd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fe3:	51                   	push   ecx
c0012fe4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fe8:	51                   	push   ecx
c0012fe9:	6a 00                	push   0x0
c0012feb:	6a 01                	push   0x1
c0012fed:	50                   	push   eax
c0012fee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ff1:	83 c4 20             	add    esp,0x20
c0012ff4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ff9:	74 26                	je     c0013021 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ffb:	43                   	inc    ebx
c0012ffc:	52                   	push   edx
c0012ffd:	57                   	push   edi
c0012ffe:	56                   	push   esi
c0012fff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013002:	e8 57 8c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0013007:	83 c6 2b             	add    esi,0x2b
c001300a:	83 d7 00             	adc    edi,0x0
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	eb c0                	jmp    c0012fd2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0013012:	50                   	push   eax
c0013013:	50                   	push   eax
c0013014:	6a 40                	push   0x40
c0013016:	55                   	push   ebp
c0013017:	e8 0e ff ff ff       	call   c0012f2a <CmExpand(Reghive_Tag*, int)>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	89 c3                	mov    ebx,eax
c0013021:	83 c4 1c             	add    esp,0x1c
c0013024:	89 d8                	mov    eax,ebx
c0013026:	5b                   	pop    ebx
c0013027:	5e                   	pop    esi
c0013028:	5f                   	pop    edi
c0013029:	5d                   	pop    ebp
c001302a:	c3                   	ret    

c001302b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001302b:	55                   	push   ebp
c001302c:	57                   	push   edi
c001302d:	56                   	push   esi
c001302e:	53                   	push   ebx
c001302f:	81 ec 88 00 00 00    	sub    esp,0x88
c0013035:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001303c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013043:	e8 5d ff ff ff       	call   c0012fa5 <CmFindUnusedExtent(Reghive_Tag*)>
c0013048:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001304c:	83 c4 0c             	add    esp,0xc
c001304f:	6a 2b                	push   0x2b
c0013051:	6a 00                	push   0x0
c0013053:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013057:	55                   	push   ebp
c0013058:	e8 93 d4 fe ff       	call   c00004f0 <memset>
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	85 db                	test   ebx,ebx
c0013062:	74 12                	je     c0013076 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013064:	51                   	push   ecx
c0013065:	55                   	push   ebp
c0013066:	53                   	push   ebx
c0013067:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001306e:	e8 0e fd ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001307a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013081:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013086:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013088:	85 db                	test   ebx,ebx
c001308a:	74 49                	je     c00130d5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001308c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013091:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013096:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001309a:	c1 e0 08             	shl    eax,0x8
c001309d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130a3:	09 c8                	or     eax,ecx
c00130a5:	74 11                	je     c00130b8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00130a7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00130ab:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00130af:	c1 e8 10             	shr    eax,0x10
c00130b2:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00130b6:	eb 0f                	jmp    c00130c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00130b8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130bd:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130c2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130c7:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130cb:	c1 ea 08             	shr    edx,0x8
c00130ce:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130d3:	eb 0f                	jmp    c00130e4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130d5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130da:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130df:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130e4:	52                   	push   edx
c00130e5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130e9:	50                   	push   eax
c00130ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130ee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130f5:	e8 ab fd ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130fa:	83 c4 10             	add    esp,0x10
c00130fd:	85 db                	test   ebx,ebx
c00130ff:	74 12                	je     c0013113 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0013101:	50                   	push   eax
c0013102:	55                   	push   ebp
c0013103:	53                   	push   ebx
c0013104:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001310b:	e8 95 fd ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013117:	83 c4 7c             	add    esp,0x7c
c001311a:	5b                   	pop    ebx
c001311b:	5e                   	pop    esi
c001311c:	5f                   	pop    edi
c001311d:	5d                   	pop    ebp
c001311e:	c3                   	ret    

c001311f <CmSetString(Reghive_Tag*, int, char const*)>:
c001311f:	55                   	push   ebp
c0013120:	57                   	push   edi
c0013121:	56                   	push   esi
c0013122:	53                   	push   ebx
c0013123:	bb 27 00 00 00       	mov    ebx,0x27
c0013128:	81 ec 88 00 00 00    	sub    esp,0x88
c001312e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013135:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001313c:	e8 2f d4 fe ff       	call   c0000570 <strlen>
c0013141:	8d 48 26             	lea    ecx,[eax+0x26]
c0013144:	89 c8                	mov    eax,ecx
c0013146:	99                   	cdq    
c0013147:	f7 fb                	idiv   ebx
c0013149:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013156:	7e 10                	jle    c0013168 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013158:	83 ec 0c             	sub    esp,0xc
c001315b:	68 84 25 02 c0       	push   0xc0022584
c0013160:	e8 ee e4 ff ff       	call   c0011653 <KePanic(char const*)>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	31 ff                	xor    edi,edi
c001316a:	50                   	push   eax
c001316b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001316f:	53                   	push   ebx
c0013170:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013177:	56                   	push   esi
c0013178:	e8 04 fc ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013184:	89 d0                	mov    eax,edx
c0013186:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001318a:	c1 e0 08             	shl    eax,0x8
c001318d:	09 c2                	or     edx,eax
c001318f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013193:	c1 e2 08             	shl    edx,0x8
c0013196:	09 c2                	or     edx,eax
c0013198:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001319c:	7e 76                	jle    c0013214 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001319e:	85 d2                	test   edx,edx
c00131a0:	75 25                	jne    c00131c7 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131a2:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00131a7:	8d 44 24 45          	lea    eax,[esp+0x45]
c00131ab:	50                   	push   eax
c00131ac:	6a 00                	push   0x0
c00131ae:	6a 00                	push   0x0
c00131b0:	56                   	push   esi
c00131b1:	e8 75 fe ff ff       	call   c001302b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	89 c2                	mov    edx,eax
c00131bb:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00131be:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00131c1:	c1 f8 10             	sar    eax,0x10
c00131c4:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00131c7:	55                   	push   ebp
c00131c8:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00131cc:	55                   	push   ebp
c00131cd:	52                   	push   edx
c00131ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131d2:	56                   	push   esi
c00131d3:	e8 a9 fb ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131d8:	83 c4 0c             	add    esp,0xc
c00131db:	6a 27                	push   0x27
c00131dd:	6a 00                	push   0x0
c00131df:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131e3:	51                   	push   ecx
c00131e4:	e8 07 d3 fe ff       	call   c00004f0 <memset>
c00131e9:	83 c4 0c             	add    esp,0xc
c00131ec:	6b c7 27             	imul   eax,edi,0x27
c00131ef:	6a 27                	push   0x27
c00131f1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131f8:	50                   	push   eax
c00131f9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131fd:	51                   	push   ecx
c00131fe:	e8 7d d4 fe ff       	call   c0000680 <strncpy>
c0013203:	83 c4 0c             	add    esp,0xc
c0013206:	55                   	push   ebp
c0013207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001320b:	52                   	push   edx
c001320c:	56                   	push   esi
c001320d:	e8 93 fc ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013212:	eb 19                	jmp    c001322d <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0013214:	85 d2                	test   edx,edx
c0013216:	74 18                	je     c0013230 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013218:	51                   	push   ecx
c0013219:	51                   	push   ecx
c001321a:	52                   	push   edx
c001321b:	56                   	push   esi
c001321c:	e8 c0 fc ff ff       	call   c0012ee1 <CmFreeExtent(Reghive_Tag*, int)>
c0013221:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013225:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013229:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001322d:	83 c4 10             	add    esp,0x10
c0013230:	47                   	inc    edi
c0013231:	83 c3 03             	add    ebx,0x3
c0013234:	83 ff 07             	cmp    edi,0x7
c0013237:	0f 85 43 ff ff ff    	jne    c0013180 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001323d:	50                   	push   eax
c001323e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013242:	50                   	push   eax
c0013243:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001324a:	56                   	push   esi
c001324b:	e8 55 fc ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013250:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013256:	5b                   	pop    ebx
c0013257:	5e                   	pop    esi
c0013258:	5f                   	pop    edi
c0013259:	5d                   	pop    ebp
c001325a:	c3                   	ret    

c001325b <CmGetMatch(char*, char*, bool, bool*)>:
c001325b:	56                   	push   esi
c001325c:	53                   	push   ebx
c001325d:	50                   	push   eax
c001325e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013262:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013267:	74 25                	je     c001328e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013269:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001326c:	31 db                	xor    ebx,ebx
c001326e:	50                   	push   eax
c001326f:	50                   	push   eax
c0013270:	8d 04 9d 20 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1e0]
c0013277:	50                   	push   eax
c0013278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001327c:	e8 cf d4 fe ff       	call   c0000750 <strcmp>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	85 c0                	test   eax,eax
c0013286:	74 2e                	je     c00132b6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013288:	43                   	inc    ebx
c0013289:	83 fb 3f             	cmp    ebx,0x3f
c001328c:	75 e0                	jne    c001326e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001328e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013291:	31 db                	xor    ebx,ebx
c0013293:	8d 04 9d 20 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc1e0]
c001329a:	51                   	push   ecx
c001329b:	51                   	push   ecx
c001329c:	50                   	push   eax
c001329d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132a1:	e8 aa d4 fe ff       	call   c0000750 <strcmp>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	85 c0                	test   eax,eax
c00132ab:	74 09                	je     c00132b6 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132ad:	43                   	inc    ebx
c00132ae:	83 fb 3f             	cmp    ebx,0x3f
c00132b1:	75 e0                	jne    c0013293 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00132b3:	83 cb ff             	or     ebx,0xffffffff
c00132b6:	89 d8                	mov    eax,ebx
c00132b8:	5a                   	pop    edx
c00132b9:	5b                   	pop    ebx
c00132ba:	5e                   	pop    esi
c00132bb:	c3                   	ret    

c00132bc <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00132bc:	55                   	push   ebp
c00132bd:	31 c0                	xor    eax,eax
c00132bf:	57                   	push   edi
c00132c0:	56                   	push   esi
c00132c1:	53                   	push   ebx
c00132c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132c6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132ca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132cc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132d0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132d7:	83 fd 1f             	cmp    ebp,0x1f
c00132da:	7f 0b                	jg     c00132e7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132dc:	0f b6 c2             	movzx  eax,dl
c00132df:	d3 e0                	shl    eax,cl
c00132e1:	09 07                	or     DWORD PTR [edi],eax
c00132e3:	b0 01                	mov    al,0x1
c00132e5:	01 33                	add    DWORD PTR [ebx],esi
c00132e7:	5b                   	pop    ebx
c00132e8:	5e                   	pop    esi
c00132e9:	5f                   	pop    edi
c00132ea:	5d                   	pop    ebp
c00132eb:	c3                   	ret    

c00132ec <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132ec:	57                   	push   edi
c00132ed:	56                   	push   esi
c00132ee:	53                   	push   ebx
c00132ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132f7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132ff:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013301:	7c 17                	jl     c001331a <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0013303:	8b 17                	mov    edx,DWORD PTR [edi]
c0013305:	b8 01 00 00 00       	mov    eax,0x1
c001330a:	d3 e0                	shl    eax,cl
c001330c:	48                   	dec    eax
c001330d:	21 d0                	and    eax,edx
c001330f:	d3 ea                	shr    edx,cl
c0013311:	89 17                	mov    DWORD PTR [edi],edx
c0013313:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013315:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013318:	eb 05                	jmp    c001331f <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001331a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001331d:	31 c0                	xor    eax,eax
c001331f:	5b                   	pop    ebx
c0013320:	5e                   	pop    esi
c0013321:	5f                   	pop    edi
c0013322:	c3                   	ret    

c0013323 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0013323:	83 ec 40             	sub    esp,0x40
c0013326:	8d 44 24 09          	lea    eax,[esp+0x9]
c001332a:	50                   	push   eax
c001332b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001332f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013333:	e8 49 fa ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013338:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001333c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013340:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013344:	89 10                	mov    DWORD PTR [eax],edx
c0013346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013349:	83 c4 4c             	add    esp,0x4c
c001334c:	c3                   	ret    

c001334d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001334d:	55                   	push   ebp
c001334e:	57                   	push   edi
c001334f:	56                   	push   esi
c0013350:	53                   	push   ebx
c0013351:	83 ec 40             	sub    esp,0x40
c0013354:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013358:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001335c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013360:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013364:	53                   	push   ebx
c0013365:	56                   	push   esi
c0013366:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001336a:	e8 12 fa ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001336f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013373:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013377:	83 c4 0c             	add    esp,0xc
c001337a:	53                   	push   ebx
c001337b:	56                   	push   esi
c001337c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013380:	e8 20 fb ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013385:	83 c4 4c             	add    esp,0x4c
c0013388:	5b                   	pop    ebx
c0013389:	5e                   	pop    esi
c001338a:	5f                   	pop    edi
c001338b:	5d                   	pop    ebp
c001338c:	c3                   	ret    

c001338d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001338d:	55                   	push   ebp
c001338e:	57                   	push   edi
c001338f:	56                   	push   esi
c0013390:	31 f6                	xor    esi,esi
c0013392:	53                   	push   ebx
c0013393:	31 db                	xor    ebx,ebx
c0013395:	83 ec 40             	sub    esp,0x40
c0013398:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00133a8:	6a 12                	push   0x12
c00133aa:	68 ee 00 00 00       	push   0xee
c00133af:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133b3:	e8 38 d1 fe ff       	call   c00004f0 <memset>
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00133bf:	6a 08                	push   0x8
c00133c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133c5:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133c9:	50                   	push   eax
c00133ca:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133ce:	55                   	push   ebp
c00133cf:	57                   	push   edi
c00133d0:	e8 e7 fe ff ff       	call   c00132bc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133d5:	83 c4 10             	add    esp,0x10
c00133d8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133dc:	50                   	push   eax
c00133dd:	6a 06                	push   0x6
c00133df:	55                   	push   ebp
c00133e0:	57                   	push   edi
c00133e1:	e8 06 ff ff ff       	call   c00132ec <CmGetShift(unsigned int*, int*, int, bool*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133ee:	74 07                	je     c00133f7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133f0:	46                   	inc    esi
c00133f1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133f5:	eb e1                	jmp    c00133d8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133f7:	43                   	inc    ebx
c00133f8:	83 fb 12             	cmp    ebx,0x12
c00133fb:	75 c2                	jne    c00133bf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013401:	31 db                	xor    ebx,ebx
c0013403:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013406:	50                   	push   eax
c0013407:	50                   	push   eax
c0013408:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c001340d:	43                   	inc    ebx
c001340e:	8d 04 85 20 3e 02 c0 	lea    eax,[eax*4-0x3ffdc1e0]
c0013415:	50                   	push   eax
c0013416:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001341a:	e8 21 d4 fe ff       	call   c0000840 <strcat>
c001341f:	83 c4 10             	add    esp,0x10
c0013422:	83 fb 18             	cmp    ebx,0x18
c0013425:	75 df                	jne    c0013406 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013427:	83 c4 3c             	add    esp,0x3c
c001342a:	31 c0                	xor    eax,eax
c001342c:	5b                   	pop    ebx
c001342d:	5e                   	pop    esi
c001342e:	5f                   	pop    edi
c001342f:	5d                   	pop    ebp
c0013430:	c3                   	ret    

c0013431 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013431:	83 ec 40             	sub    esp,0x40
c0013434:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013438:	50                   	push   eax
c0013439:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001343d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013441:	e8 3b f9 ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013446:	58                   	pop    eax
c0013447:	5a                   	pop    edx
c0013448:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001344c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013450:	50                   	push   eax
c0013451:	e8 37 ff ff ff       	call   c001338d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013456:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001345b:	83 c4 4c             	add    esp,0x4c
c001345e:	c3                   	ret    

c001345f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001345f:	55                   	push   ebp
c0013460:	57                   	push   edi
c0013461:	56                   	push   esi
c0013462:	53                   	push   ebx
c0013463:	31 db                	xor    ebx,ebx
c0013465:	83 ec 70             	sub    esp,0x70
c0013468:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001346f:	6a 30                	push   0x30
c0013471:	6a 00                	push   0x0
c0013473:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013477:	56                   	push   esi
c0013478:	e8 73 d0 fe ff       	call   c00004f0 <memset>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	83 ec 0c             	sub    esp,0xc
c0013483:	57                   	push   edi
c0013484:	e8 e7 d0 fe ff       	call   c0000570 <strlen>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	39 d8                	cmp    eax,ebx
c001348e:	76 16                	jbe    c00134a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013497:	50                   	push   eax
c0013498:	e8 93 d4 fe ff       	call   c0000930 <toupper>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134a3:	43                   	inc    ebx
c00134a4:	eb da                	jmp    c0013480 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134a6:	31 f6                	xor    esi,esi
c00134a8:	52                   	push   edx
c00134a9:	31 ff                	xor    edi,edi
c00134ab:	6a 18                	push   0x18
c00134ad:	6a 3f                	push   0x3f
c00134af:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134b3:	50                   	push   eax
c00134b4:	e8 37 d0 fe ff       	call   c00004f0 <memset>
c00134b9:	83 c4 10             	add    esp,0x10
c00134bc:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00134c0:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00134c4:	84 c0                	test   al,al
c00134c6:	0f 84 b0 00 00 00    	je     c001357c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00134cc:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134d0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00134d5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134d9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134de:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134e1:	83 ec 0c             	sub    esp,0xc
c00134e4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134e8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134ec:	53                   	push   ebx
c00134ed:	e8 7e d0 fe ff       	call   c0000570 <strlen>
c00134f2:	83 c4 10             	add    esp,0x10
c00134f5:	85 c0                	test   eax,eax
c00134f7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134fb:	74 0b                	je     c0013508 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134fd:	50                   	push   eax
c00134fe:	6a 01                	push   0x1
c0013500:	53                   	push   ebx
c0013501:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013505:	50                   	push   eax
c0013506:	eb 0a                	jmp    c0013512 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013508:	50                   	push   eax
c0013509:	6a 00                	push   0x0
c001350b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001350f:	50                   	push   eax
c0013510:	6a 00                	push   0x0
c0013512:	e8 44 fd ff ff       	call   c001325b <CmGetMatch(char*, char*, bool, bool*)>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	83 f8 ff             	cmp    eax,0xffffffff
c001351d:	75 1a                	jne    c0013539 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001351f:	83 ec 0c             	sub    esp,0xc
c0013522:	68 99 25 02 c0       	push   0xc0022599
c0013527:	e8 27 e1 ff ff       	call   c0011653 <KePanic(char const*)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	b8 02 00 00 00       	mov    eax,0x2
c0013534:	e9 bc 00 00 00       	jmp    c00135f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013539:	83 ff 18             	cmp    edi,0x18
c001353c:	75 1a                	jne    c0013558 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001353e:	83 ec 0c             	sub    esp,0xc
c0013541:	68 ae 25 02 c0       	push   0xc00225ae
c0013546:	e8 08 e1 ff ff       	call   c0011653 <KePanic(char const*)>
c001354b:	83 c4 10             	add    esp,0x10
c001354e:	b8 01 00 00 00       	mov    eax,0x1
c0013553:	e9 9d 00 00 00       	jmp    c00135f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013558:	47                   	inc    edi
c0013559:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001355e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013562:	74 02                	je     c0013566 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013564:	89 ee                	mov    esi,ebp
c0013566:	83 ec 0c             	sub    esp,0xc
c0013569:	53                   	push   ebx
c001356a:	e8 01 d0 fe ff       	call   c0000570 <strlen>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	85 c0                	test   eax,eax
c0013574:	74 06                	je     c001357c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013576:	46                   	inc    esi
c0013577:	e9 40 ff ff ff       	jmp    c00134bc <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001357c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013584:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001358c:	31 f6                	xor    esi,esi
c001358e:	50                   	push   eax
c001358f:	31 ff                	xor    edi,edi
c0013591:	6a 12                	push   0x12
c0013593:	68 ee 00 00 00       	push   0xee
c0013598:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001359f:	e8 4c cf fe ff       	call   c00004f0 <memset>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	83 fe 17             	cmp    esi,0x17
c00135aa:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00135ae:	7e 26                	jle    c00135d6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00135b0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135b4:	50                   	push   eax
c00135b5:	6a 08                	push   0x8
c00135b7:	55                   	push   ebp
c00135b8:	53                   	push   ebx
c00135b9:	e8 2e fd ff ff       	call   c00132ec <CmGetShift(unsigned int*, int*, int, bool*)>
c00135be:	83 c4 10             	add    esp,0x10
c00135c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135c6:	74 26                	je     c00135ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00135c8:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135cf:	4e                   	dec    esi
c00135d0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135d3:	47                   	inc    edi
c00135d4:	eb 1c                	jmp    c00135f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135d6:	6a 06                	push   0x6
c00135d8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135dd:	50                   	push   eax
c00135de:	55                   	push   ebp
c00135df:	53                   	push   ebx
c00135e0:	e8 d7 fc ff ff       	call   c00132bc <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135e5:	83 c4 10             	add    esp,0x10
c00135e8:	84 c0                	test   al,al
c00135ea:	75 06                	jne    c00135f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135ec:	eb c2                	jmp    c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135ee:	31 c0                	xor    eax,eax
c00135f0:	eb 03                	jmp    c00135f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135f2:	46                   	inc    esi
c00135f3:	eb b2                	jmp    c00135a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135f5:	83 c4 6c             	add    esp,0x6c
c00135f8:	5b                   	pop    ebx
c00135f9:	5e                   	pop    esi
c00135fa:	5f                   	pop    edi
c00135fb:	5d                   	pop    ebp
c00135fc:	c3                   	ret    

c00135fd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135fd:	53                   	push   ebx
c00135fe:	83 ec 3c             	sub    esp,0x3c
c0013601:	6a 2b                	push   0x2b
c0013603:	6a 00                	push   0x0
c0013605:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013609:	53                   	push   ebx
c001360a:	e8 e1 ce fe ff       	call   c00004f0 <memset>
c001360f:	58                   	pop    eax
c0013610:	5a                   	pop    edx
c0013611:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013615:	50                   	push   eax
c0013616:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001361a:	e8 40 fe ff ff       	call   c001345f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001361f:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013624:	83 c4 0c             	add    esp,0xc
c0013627:	6a 15                	push   0x15
c0013629:	6a 00                	push   0x0
c001362b:	8d 44 24 27          	lea    eax,[esp+0x27]
c001362f:	50                   	push   eax
c0013630:	e8 bb ce fe ff       	call   c00004f0 <memset>
c0013635:	53                   	push   ebx
c0013636:	6a 00                	push   0x0
c0013638:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001363c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013640:	e8 e6 f9 ff ff       	call   c001302b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013645:	83 c4 58             	add    esp,0x58
c0013648:	5b                   	pop    ebx
c0013649:	c3                   	ret    

c001364a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001364a:	56                   	push   esi
c001364b:	53                   	push   ebx
c001364c:	83 ec 48             	sub    esp,0x48
c001364f:	6a 12                	push   0x12
c0013651:	68 ff 00 00 00       	push   0xff
c0013656:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001365a:	56                   	push   esi
c001365b:	e8 90 ce fe ff       	call   c00004f0 <memset>
c0013660:	5a                   	pop    edx
c0013661:	59                   	pop    ecx
c0013662:	56                   	push   esi
c0013663:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013667:	e8 f3 fd ff ff       	call   c001345f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013673:	85 db                	test   ebx,ebx
c0013675:	74 42                	je     c00136b9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013677:	50                   	push   eax
c0013678:	8d 44 24 19          	lea    eax,[esp+0x19]
c001367c:	50                   	push   eax
c001367d:	53                   	push   ebx
c001367e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013682:	e8 fa f6 ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013687:	83 c4 0c             	add    esp,0xc
c001368a:	6a 12                	push   0x12
c001368c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013690:	50                   	push   eax
c0013691:	56                   	push   esi
c0013692:	e8 e9 cc fe ff       	call   c0000380 <memcmp>
c0013697:	83 c4 10             	add    esp,0x10
c001369a:	85 c0                	test   eax,eax
c001369c:	74 1e                	je     c00136bc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001369e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136a3:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136a8:	c1 e3 08             	shl    ebx,0x8
c00136ab:	09 d8                	or     eax,ebx
c00136ad:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00136b2:	c1 e3 10             	shl    ebx,0x10
c00136b5:	09 c3                	or     ebx,eax
c00136b7:	eb ba                	jmp    c0013673 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00136b9:	83 cb ff             	or     ebx,0xffffffff
c00136bc:	89 d8                	mov    eax,ebx
c00136be:	83 c4 44             	add    esp,0x44
c00136c1:	5b                   	pop    ebx
c00136c2:	5e                   	pop    esi
c00136c3:	c3                   	ret    

c00136c4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00136c4:	57                   	push   edi
c00136c5:	56                   	push   esi
c00136c6:	53                   	push   ebx
c00136c7:	83 ec 34             	sub    esp,0x34
c00136ca:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136ce:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136d2:	6a 2b                	push   0x2b
c00136d4:	6a 00                	push   0x0
c00136d6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136da:	53                   	push   ebx
c00136db:	e8 10 ce fe ff       	call   c00004f0 <memset>
c00136e0:	58                   	pop    eax
c00136e1:	5a                   	pop    edx
c00136e2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136e6:	50                   	push   eax
c00136e7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136eb:	e8 6f fd ff ff       	call   c001345f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136f0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136f4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136f8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136fc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013700:	53                   	push   ebx
c0013701:	6a 00                	push   0x0
c0013703:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013707:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001370b:	e8 1b f9 ff ff       	call   c001302b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013710:	83 c4 50             	add    esp,0x50
c0013713:	5b                   	pop    ebx
c0013714:	5e                   	pop    esi
c0013715:	5f                   	pop    edi
c0013716:	c3                   	ret    

c0013717 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013717:	55                   	push   ebp
c0013718:	57                   	push   edi
c0013719:	56                   	push   esi
c001371a:	53                   	push   ebx
c001371b:	83 ec 40             	sub    esp,0x40
c001371e:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013722:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013726:	6a 2b                	push   0x2b
c0013728:	6a 00                	push   0x0
c001372a:	8d 74 24 11          	lea    esi,[esp+0x11]
c001372e:	56                   	push   esi
c001372f:	e8 bc cd fe ff       	call   c00004f0 <memset>
c0013734:	5f                   	pop    edi
c0013735:	89 ef                	mov    edi,ebp
c0013737:	58                   	pop    eax
c0013738:	8d 44 24 11          	lea    eax,[esp+0x11]
c001373c:	50                   	push   eax
c001373d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013741:	e8 19 fd ff ff       	call   c001345f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013746:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001374b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013750:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013755:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	85 ed                	test   ebp,ebp
c001375f:	74 14                	je     c0013775 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013761:	51                   	push   ecx
c0013762:	51                   	push   ecx
c0013763:	57                   	push   edi
c0013764:	53                   	push   ebx
c0013765:	e8 09 f7 ff ff       	call   c0012e73 <CmGetNext(Reghive_Tag*, int)>
c001376a:	83 c4 10             	add    esp,0x10
c001376d:	85 c0                	test   eax,eax
c001376f:	74 04                	je     c0013775 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013771:	89 c7                	mov    edi,eax
c0013773:	eb e8                	jmp    c001375d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013775:	56                   	push   esi
c0013776:	6a 00                	push   0x0
c0013778:	57                   	push   edi
c0013779:	53                   	push   ebx
c001377a:	e8 ac f8 ff ff       	call   c001302b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001377f:	83 c4 0c             	add    esp,0xc
c0013782:	89 c7                	mov    edi,eax
c0013784:	56                   	push   esi
c0013785:	50                   	push   eax
c0013786:	53                   	push   ebx
c0013787:	e8 f5 f5 ff ff       	call   c0012d81 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001378c:	58                   	pop    eax
c001378d:	5a                   	pop    edx
c001378e:	6a 6c                	push   0x6c
c0013790:	6a 00                	push   0x0
c0013792:	6a 00                	push   0x0
c0013794:	68 bf 25 02 c0       	push   0xc00225bf
c0013799:	57                   	push   edi
c001379a:	53                   	push   ebx
c001379b:	e8 24 ff ff ff       	call   c00136c4 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137a0:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137a4:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137a8:	c1 e8 10             	shr    eax,0x10
c00137ab:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00137af:	83 c4 1c             	add    esp,0x1c
c00137b2:	56                   	push   esi
c00137b3:	57                   	push   edi
c00137b4:	53                   	push   ebx
c00137b5:	e8 eb f6 ff ff       	call   c0012ea5 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00137ba:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00137bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00137c4:	c1 e0 08             	shl    eax,0x8
c00137c7:	09 c2                	or     edx,eax
c00137c9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137ce:	83 c4 4c             	add    esp,0x4c
c00137d1:	c1 e0 10             	shl    eax,0x10
c00137d4:	5b                   	pop    ebx
c00137d5:	09 d0                	or     eax,edx
c00137d7:	5e                   	pop    esi
c00137d8:	5f                   	pop    edi
c00137d9:	5d                   	pop    ebp
c00137da:	c3                   	ret    

c00137db <zStrtok(char*, char const*)>:
c00137db:	55                   	push   ebp
c00137dc:	57                   	push   edi
c00137dd:	56                   	push   esi
c00137de:	53                   	push   ebx
c00137df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137e7:	85 db                	test   ebx,ebx
c00137e9:	74 2f                	je     c001381a <zStrtok(char*, char const*)+0x3f>
c00137eb:	85 c0                	test   eax,eax
c00137ed:	75 09                	jne    c00137f8 <zStrtok(char*, char const*)+0x1d>
c00137ef:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137f4:	85 c0                	test   eax,eax
c00137f6:	74 50                	je     c0013848 <zStrtok(char*, char const*)+0x6d>
c00137f8:	31 c9                	xor    ecx,ecx
c00137fa:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137fe:	74 03                	je     c0013803 <zStrtok(char*, char const*)+0x28>
c0013800:	41                   	inc    ecx
c0013801:	eb f7                	jmp    c00137fa <zStrtok(char*, char const*)+0x1f>
c0013803:	31 d2                	xor    edx,edx
c0013805:	39 ca                	cmp    edx,ecx
c0013807:	74 15                	je     c001381e <zStrtok(char*, char const*)+0x43>
c0013809:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c001380d:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013810:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013813:	39 ee                	cmp    esi,ebp
c0013815:	74 13                	je     c001382a <zStrtok(char*, char const*)+0x4f>
c0013817:	42                   	inc    edx
c0013818:	eb eb                	jmp    c0013805 <zStrtok(char*, char const*)+0x2a>
c001381a:	31 c0                	xor    eax,eax
c001381c:	eb 2a                	jmp    c0013848 <zStrtok(char*, char const*)+0x6d>
c001381e:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013828:	eb 1e                	jmp    c0013848 <zStrtok(char*, char const*)+0x6d>
c001382a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001382d:	39 ce                	cmp    esi,ecx
c001382f:	75 0a                	jne    c001383b <zStrtok(char*, char const*)+0x60>
c0013831:	40                   	inc    eax
c0013832:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013837:	89 d8                	mov    eax,ebx
c0013839:	eb 0d                	jmp    c0013848 <zStrtok(char*, char const*)+0x6d>
c001383b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001383f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013842:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013848:	5b                   	pop    ebx
c0013849:	5e                   	pop    esi
c001384a:	5f                   	pop    edi
c001384b:	5d                   	pop    ebp
c001384c:	c3                   	ret    

c001384d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001384d:	57                   	push   edi
c001384e:	56                   	push   esi
c001384f:	53                   	push   ebx
c0013850:	81 ec 08 01 00 00    	sub    esp,0x108
c0013856:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001385d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013864:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013868:	53                   	push   ebx
c0013869:	e8 d2 cd fe ff       	call   c0000640 <strcpy>
c001386e:	59                   	pop    ecx
c001386f:	5e                   	pop    esi
c0013870:	68 23 29 02 c0       	push   0xc0022923
c0013875:	53                   	push   ebx
c0013876:	bb 01 00 00 00       	mov    ebx,0x1
c001387b:	e8 5b ff ff ff       	call   c00137db <zStrtok(char*, char const*)>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	85 c0                	test   eax,eax
c0013885:	74 3b                	je     c00138c2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013887:	52                   	push   edx
c0013888:	50                   	push   eax
c0013889:	6a 01                	push   0x1
c001388b:	57                   	push   edi
c001388c:	e8 b9 fd ff ff       	call   c001364a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013891:	59                   	pop    ecx
c0013892:	89 c3                	mov    ebx,eax
c0013894:	5e                   	pop    esi
c0013895:	68 23 29 02 c0       	push   0xc0022923
c001389a:	6a 00                	push   0x0
c001389c:	e8 3a ff ff ff       	call   c00137db <zStrtok(char*, char const*)>
c00138a1:	83 c4 10             	add    esp,0x10
c00138a4:	89 c6                	mov    esi,eax
c00138a6:	85 c0                	test   eax,eax
c00138a8:	74 18                	je     c00138c2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138aa:	52                   	push   edx
c00138ab:	52                   	push   edx
c00138ac:	53                   	push   ebx
c00138ad:	57                   	push   edi
c00138ae:	e8 81 f5 ff ff       	call   c0012e34 <CmEnterDirectory(Reghive_Tag*, int)>
c00138b3:	83 c4 10             	add    esp,0x10
c00138b6:	89 c3                	mov    ebx,eax
c00138b8:	83 f8 ff             	cmp    eax,0xffffffff
c00138bb:	74 05                	je     c00138c2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138bd:	50                   	push   eax
c00138be:	56                   	push   esi
c00138bf:	53                   	push   ebx
c00138c0:	eb c9                	jmp    c001388b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00138c2:	81 c4 00 01 00 00    	add    esp,0x100
c00138c8:	89 d8                	mov    eax,ebx
c00138ca:	5b                   	pop    ebx
c00138cb:	5e                   	pop    esi
c00138cc:	5f                   	pop    edi
c00138cd:	c3                   	ret    

c00138ce <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138ce:	55                   	push   ebp
c00138cf:	57                   	push   edi
c00138d0:	56                   	push   esi
c00138d1:	53                   	push   ebx
c00138d2:	83 ec 5c             	sub    esp,0x5c
c00138d5:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138d9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138dd:	85 db                	test   ebx,ebx
c00138df:	0f 8e 84 00 00 00    	jle    c0013969 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138e5:	31 ed                	xor    ebp,ebp
c00138e7:	57                   	push   edi
c00138e8:	6a 32                	push   0x32
c00138ea:	6a 00                	push   0x0
c00138ec:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138f0:	57                   	push   edi
c00138f1:	e8 fa cb fe ff       	call   c00004f0 <memset>
c00138f6:	83 c4 0c             	add    esp,0xc
c00138f9:	57                   	push   edi
c00138fa:	53                   	push   ebx
c00138fb:	56                   	push   esi
c00138fc:	e8 30 fb ff ff       	call   c0013431 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013901:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013905:	83 c4 10             	add    esp,0x10
c0013908:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001390c:	7d 13                	jge    c0013921 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001390e:	83 ec 0c             	sub    esp,0xc
c0013911:	45                   	inc    ebp
c0013912:	68 c7 2c 02 c0       	push   0xc0022cc7
c0013917:	e8 29 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	eb e7                	jmp    c0013908 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013921:	51                   	push   ecx
c0013922:	57                   	push   edi
c0013923:	53                   	push   ebx
c0013924:	68 c5 25 02 c0       	push   0xc00225c5
c0013929:	e8 17 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013936:	75 1e                	jne    c0013956 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013938:	52                   	push   edx
c0013939:	52                   	push   edx
c001393a:	53                   	push   ebx
c001393b:	56                   	push   esi
c001393c:	e8 f3 f4 ff ff       	call   c0012e34 <CmEnterDirectory(Reghive_Tag*, int)>
c0013941:	83 c4 0c             	add    esp,0xc
c0013944:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013948:	8d 51 04             	lea    edx,[ecx+0x4]
c001394b:	52                   	push   edx
c001394c:	50                   	push   eax
c001394d:	56                   	push   esi
c001394e:	e8 7b ff ff ff       	call   c00138ce <CmDisplayTree(Reghive_Tag*, int, int)>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	50                   	push   eax
c0013957:	50                   	push   eax
c0013958:	53                   	push   ebx
c0013959:	56                   	push   esi
c001395a:	e8 14 f5 ff ff       	call   c0012e73 <CmGetNext(Reghive_Tag*, int)>
c001395f:	83 c4 10             	add    esp,0x10
c0013962:	89 c3                	mov    ebx,eax
c0013964:	e9 74 ff ff ff       	jmp    c00138dd <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013969:	83 c4 5c             	add    esp,0x5c
c001396c:	5b                   	pop    ebx
c001396d:	5e                   	pop    esi
c001396e:	5f                   	pop    edi
c001396f:	5d                   	pop    ebp
c0013970:	c3                   	ret    

c0013971 <CmSplitFinalSlashInPlace(char*)>:
c0013971:	53                   	push   ebx
c0013972:	83 ec 14             	sub    esp,0x14
c0013975:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013979:	53                   	push   ebx
c001397a:	e8 f1 cb fe ff       	call   c0000570 <strlen>
c001397f:	83 c4 10             	add    esp,0x10
c0013982:	48                   	dec    eax
c0013983:	85 c0                	test   eax,eax
c0013985:	74 15                	je     c001399c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013987:	8d 14 03             	lea    edx,[ebx+eax*1]
c001398a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001398e:	75 09                	jne    c0013999 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013990:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013993:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013997:	eb 05                	jmp    c001399e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013999:	48                   	dec    eax
c001399a:	eb e7                	jmp    c0013983 <CmSplitFinalSlashInPlace(char*)+0x12>
c001399c:	31 c0                	xor    eax,eax
c001399e:	83 c4 08             	add    esp,0x8
c00139a1:	5b                   	pop    ebx
c00139a2:	c3                   	ret    

c00139a3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139a3:	55                   	push   ebp
c00139a4:	57                   	push   edi
c00139a5:	56                   	push   esi
c00139a6:	53                   	push   ebx
c00139a7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00139ad:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00139b4:	8a 13                	mov    dl,BYTE PTR [ebx]
c00139b6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139b9:	80 fa 40             	cmp    dl,0x40
c00139bc:	75 1c                	jne    c00139da <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00139be:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00139c1:	85 c9                	test   ecx,ecx
c00139c3:	0f 84 09 01 00 00    	je     c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139c9:	8d 43 01             	lea    eax,[ebx+0x1]
c00139cc:	83 f9 3a             	cmp    ecx,0x3a
c00139cf:	74 04                	je     c00139d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00139d1:	89 c3                	mov    ebx,eax
c00139d3:	eb e9                	jmp    c00139be <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00139d5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139d8:	89 c3                	mov    ebx,eax
c00139da:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139de:	50                   	push   eax
c00139df:	6a 40                	push   0x40
c00139e1:	6a 00                	push   0x0
c00139e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139e7:	50                   	push   eax
c00139e8:	e8 03 cb fe ff       	call   c00004f0 <memset>
c00139ed:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139f4:	31 c0                	xor    eax,eax
c00139f6:	83 c4 10             	add    esp,0x10
c00139f9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00139fe:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a01:	89 d1                	mov    ecx,edx
c0013a03:	85 d2                	test   edx,edx
c0013a05:	0f 84 c7 00 00 00    	je     c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a0b:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a10:	0f 8f bc 00 00 00    	jg     c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a16:	83 fa 0a             	cmp    edx,0xa
c0013a19:	0f 85 a4 00 00 00    	jne    c0013ac3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013a1f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a24:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a29:	89 c8                	mov    eax,ecx
c0013a2b:	a8 df                	test   al,0xdf
c0013a2d:	0f 94 c2             	sete   dl
c0013a30:	83 f9 23             	cmp    ecx,0x23
c0013a33:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a38:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a3c:	80 e2 01             	and    dl,0x1
c0013a3f:	75 4a                	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a41:	83 e8 09             	sub    eax,0x9
c0013a44:	3c 01                	cmp    al,0x1
c0013a46:	76 43                	jbe    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a48:	83 f9 5b             	cmp    ecx,0x5b
c0013a4b:	75 42                	jne    c0013a8f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a4d:	83 fe 40             	cmp    esi,0x40
c0013a50:	75 39                	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a52:	83 ec 0c             	sub    esp,0xc
c0013a55:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a59:	52                   	push   edx
c0013a5a:	e8 11 cb fe ff       	call   c0000570 <strlen>
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	83 f8 3f             	cmp    eax,0x3f
c0013a65:	77 6b                	ja     c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a67:	50                   	push   eax
c0013a68:	50                   	push   eax
c0013a69:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a6d:	52                   	push   edx
c0013a6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a72:	52                   	push   edx
c0013a73:	e8 c8 cb fe ff       	call   c0000640 <strcpy>
c0013a78:	58                   	pop    eax
c0013a79:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a7d:	52                   	push   edx
c0013a7e:	e8 ed ca fe ff       	call   c0000570 <strlen>
c0013a83:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a88:	83 c4 10             	add    esp,0x10
c0013a8b:	31 d2                	xor    edx,edx
c0013a8d:	eb 3b                	jmp    c0013aca <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a8f:	83 fe 40             	cmp    esi,0x40
c0013a92:	74 06                	je     c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a94:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a98:	eb 20                	jmp    c0013aba <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a9a:	50                   	push   eax
c0013a9b:	50                   	push   eax
c0013a9c:	55                   	push   ebp
c0013a9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013aa1:	50                   	push   eax
c0013aa2:	e8 a9 cc fe ff       	call   c0000750 <strcmp>
c0013aa7:	83 c4 10             	add    esp,0x10
c0013aaa:	85 c0                	test   eax,eax
c0013aac:	75 dd                	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013aae:	eb e4                	jmp    c0013a94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013ab0:	8d 50 01             	lea    edx,[eax+0x1]
c0013ab3:	83 f9 3d             	cmp    ecx,0x3d
c0013ab6:	74 1e                	je     c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013ab8:	89 d0                	mov    eax,edx
c0013aba:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013abd:	85 c9                	test   ecx,ecx
c0013abf:	75 ef                	jne    c0013ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013ac1:	eb 0f                	jmp    c0013ad2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac3:	8d 50 01             	lea    edx,[eax+0x1]
c0013ac6:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013aca:	47                   	inc    edi
c0013acb:	89 d0                	mov    eax,edx
c0013acd:	e9 2c ff ff ff       	jmp    c00139fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013ad2:	31 c0                	xor    eax,eax
c0013ad4:	eb 33                	jmp    c0013b09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013ad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013add:	50                   	push   eax
c0013ade:	50                   	push   eax
c0013adf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013ae3:	50                   	push   eax
c0013ae4:	53                   	push   ebx
c0013ae5:	e8 66 cc fe ff       	call   c0000750 <strcmp>
c0013aea:	83 c4 10             	add    esp,0x10
c0013aed:	85 c0                	test   eax,eax
c0013aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013af3:	75 96                	jne    c0013a8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af5:	51                   	push   ecx
c0013af6:	51                   	push   ecx
c0013af7:	52                   	push   edx
c0013af8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013aff:	e8 3c cb fe ff       	call   c0000640 <strcpy>
c0013b04:	83 c4 10             	add    esp,0x10
c0013b07:	b0 01                	mov    al,0x1
c0013b09:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b0f:	5b                   	pop    ebx
c0013b10:	5e                   	pop    esi
c0013b11:	5f                   	pop    edi
c0013b12:	5d                   	pop    ebp
c0013b13:	c3                   	ret    

c0013b14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b14:	57                   	push   edi
c0013b15:	56                   	push   esi
c0013b16:	53                   	push   ebx
c0013b17:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b1d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b24:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b2b:	53                   	push   ebx
c0013b2c:	e8 3f ca fe ff       	call   c0000570 <strlen>
c0013b31:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b34:	89 c7                	mov    edi,eax
c0013b36:	e8 35 ca fe ff       	call   c0000570 <strlen>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b42:	3d ff 00 00 00       	cmp    eax,0xff
c0013b47:	0f 87 d3 00 00 00    	ja     c0013c20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b4d:	57                   	push   edi
c0013b4e:	57                   	push   edi
c0013b4f:	56                   	push   esi
c0013b50:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b54:	56                   	push   esi
c0013b55:	e8 e6 ca fe ff       	call   c0000640 <strcpy>
c0013b5a:	58                   	pop    eax
c0013b5b:	5a                   	pop    edx
c0013b5c:	68 23 29 02 c0       	push   0xc0022923
c0013b61:	56                   	push   esi
c0013b62:	e8 d9 cc fe ff       	call   c0000840 <strcat>
c0013b67:	59                   	pop    ecx
c0013b68:	5f                   	pop    edi
c0013b69:	53                   	push   ebx
c0013b6a:	56                   	push   esi
c0013b6b:	e8 d0 cc fe ff       	call   c0000840 <strcat>
c0013b70:	58                   	pop    eax
c0013b71:	5a                   	pop    edx
c0013b72:	68 cf 25 02 c0       	push   0xc00225cf
c0013b77:	56                   	push   esi
c0013b78:	e8 c3 cc fe ff       	call   c0000840 <strcat>
c0013b7d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b84:	e8 2d 3f ff ff       	call   c0007ab6 <malloc>
c0013b89:	83 c4 0c             	add    esp,0xc
c0013b8c:	89 c3                	mov    ebx,eax
c0013b8e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b94:	56                   	push   esi
c0013b95:	50                   	push   eax
c0013b96:	e8 e7 7f ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	85 db                	test   ebx,ebx
c0013ba0:	74 7e                	je     c0013c20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013ba2:	51                   	push   ecx
c0013ba3:	51                   	push   ecx
c0013ba4:	6a 01                	push   0x1
c0013ba6:	53                   	push   ebx
c0013ba7:	e8 f4 7f ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0013bac:	83 c4 10             	add    esp,0x10
c0013baf:	85 c0                	test   eax,eax
c0013bb1:	74 08                	je     c0013bbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013bb3:	83 ec 0c             	sub    esp,0xc
c0013bb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb8:	53                   	push   ebx
c0013bb9:	eb 5f                	jmp    c0013c1a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013bbb:	52                   	push   edx
c0013bbc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013bc0:	50                   	push   eax
c0013bc1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013bc5:	50                   	push   eax
c0013bc6:	53                   	push   ebx
c0013bc7:	e8 d6 82 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0013bcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	89 c1                	mov    ecx,eax
c0013bd5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bd9:	74 31                	je     c0013c0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bdb:	83 ec 0c             	sub    esp,0xc
c0013bde:	50                   	push   eax
c0013bdf:	e8 d2 3e ff ff       	call   c0007ab6 <malloc>
c0013be4:	89 c6                	mov    esi,eax
c0013be6:	58                   	pop    eax
c0013be7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bed:	52                   	push   edx
c0013bee:	56                   	push   esi
c0013bef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bf3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bf7:	53                   	push   ebx
c0013bf8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bfb:	83 c4 20             	add    esp,0x20
c0013bfe:	85 c0                	test   eax,eax
c0013c00:	75 0a                	jne    c0013c0c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c06:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c0a:	74 18                	je     c0013c24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	53                   	push   ebx
c0013c10:	e8 e9 7f ff ff       	call   c000bbfe <File::close()>
c0013c15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c1d:	83 c4 10             	add    esp,0x10
c0013c20:	31 c0                	xor    eax,eax
c0013c22:	eb 3b                	jmp    c0013c5f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	53                   	push   ebx
c0013c28:	e8 d1 7f ff ff       	call   c000bbfe <File::close()>
c0013c2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c35:	83 c4 0c             	add    esp,0xc
c0013c38:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c3f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c46:	56                   	push   esi
c0013c47:	e8 57 fd ff ff       	call   c00139a3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c4c:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c53:	e8 6e 3e ff ff       	call   c0007ac6 <free>
c0013c58:	83 c4 10             	add    esp,0x10
c0013c5b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c5f:	81 c4 20 01 00 00    	add    esp,0x120
c0013c65:	5b                   	pop    ebx
c0013c66:	5e                   	pop    esi
c0013c67:	5f                   	pop    edi
c0013c68:	c3                   	ret    

c0013c69 <Reg::getLine(char*, char*, char*)>:
c0013c69:	57                   	push   edi
c0013c6a:	56                   	push   esi
c0013c6b:	53                   	push   ebx
c0013c6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c70:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c74:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c78:	57                   	push   edi
c0013c79:	56                   	push   esi
c0013c7a:	53                   	push   ebx
c0013c7b:	68 d4 25 02 c0       	push   0xc00225d4
c0013c80:	e8 8f fe ff ff       	call   c0013b14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	84 c0                	test   al,al
c0013c8a:	75 10                	jne    c0013c9c <Reg::getLine(char*, char*, char*)+0x33>
c0013c8c:	57                   	push   edi
c0013c8d:	56                   	push   esi
c0013c8e:	53                   	push   ebx
c0013c8f:	68 f9 25 02 c0       	push   0xc00225f9
c0013c94:	e8 7b fe ff ff       	call   c0013b14 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c99:	83 c4 10             	add    esp,0x10
c0013c9c:	5b                   	pop    ebx
c0013c9d:	5e                   	pop    esi
c0013c9e:	5f                   	pop    edi
c0013c9f:	c3                   	ret    

c0013ca0 <Reg::readInt(char*, char*, int*)>:
c0013ca0:	55                   	push   ebp
c0013ca1:	57                   	push   edi
c0013ca2:	56                   	push   esi
c0013ca3:	53                   	push   ebx
c0013ca4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013caa:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013cae:	55                   	push   ebp
c0013caf:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cb6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013cbd:	e8 a7 ff ff ff       	call   c0013c69 <Reg::getLine(char*, char*, char*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	84 c0                	test   al,al
c0013cc7:	0f 84 b6 00 00 00    	je     c0013d83 <Reg::readInt(char*, char*, int*)+0xe3>
c0013ccd:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013cd2:	83 fa 2b             	cmp    edx,0x2b
c0013cd5:	74 0c                	je     c0013ce3 <Reg::readInt(char*, char*, int*)+0x43>
c0013cd7:	83 fa 2d             	cmp    edx,0x2d
c0013cda:	75 0e                	jne    c0013cea <Reg::readInt(char*, char*, int*)+0x4a>
c0013cdc:	ba 01 00 00 00       	mov    edx,0x1
c0013ce1:	eb 0b                	jmp    c0013cee <Reg::readInt(char*, char*, int*)+0x4e>
c0013ce3:	ba 01 00 00 00       	mov    edx,0x1
c0013ce8:	eb 02                	jmp    c0013cec <Reg::readInt(char*, char*, int*)+0x4c>
c0013cea:	31 d2                	xor    edx,edx
c0013cec:	31 c0                	xor    eax,eax
c0013cee:	be 0a 00 00 00       	mov    esi,0xa
c0013cf3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cf8:	75 21                	jne    c0013d1b <Reg::readInt(char*, char*, int*)+0x7b>
c0013cfa:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013cff:	83 f9 78             	cmp    ecx,0x78
c0013d02:	75 0a                	jne    c0013d0e <Reg::readInt(char*, char*, int*)+0x6e>
c0013d04:	83 c2 02             	add    edx,0x2
c0013d07:	be 10 00 00 00       	mov    esi,0x10
c0013d0c:	eb 0d                	jmp    c0013d1b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d0e:	83 f9 62             	cmp    ecx,0x62
c0013d11:	75 08                	jne    c0013d1b <Reg::readInt(char*, char*, int*)+0x7b>
c0013d13:	83 c2 02             	add    edx,0x2
c0013d16:	be 02 00 00 00       	mov    esi,0x2
c0013d1b:	01 d5                	add    ebp,edx
c0013d1d:	31 d2                	xor    edx,edx
c0013d1f:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d23:	83 f9 0d             	cmp    ecx,0xd
c0013d26:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d2a:	0f 94 c3             	sete   bl
c0013d2d:	85 c9                	test   ecx,ecx
c0013d2f:	89 df                	mov    edi,ebx
c0013d31:	0f 94 c3             	sete   bl
c0013d34:	09 df                	or     edi,ebx
c0013d36:	89 fb                	mov    ebx,edi
c0013d38:	83 e7 01             	and    edi,0x1
c0013d3b:	75 35                	jne    c0013d72 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d3d:	0f af d6             	imul   edx,esi
c0013d40:	83 fe 10             	cmp    esi,0x10
c0013d43:	75 26                	jne    c0013d6b <Reg::readInt(char*, char*, int*)+0xcb>
c0013d45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d49:	83 ef 41             	sub    edi,0x41
c0013d4c:	89 fb                	mov    ebx,edi
c0013d4e:	80 fb 05             	cmp    bl,0x5
c0013d51:	77 06                	ja     c0013d59 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d53:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d57:	eb 16                	jmp    c0013d6f <Reg::readInt(char*, char*, int*)+0xcf>
c0013d59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d5d:	83 eb 61             	sub    ebx,0x61
c0013d60:	80 fb 05             	cmp    bl,0x5
c0013d63:	77 06                	ja     c0013d6b <Reg::readInt(char*, char*, int*)+0xcb>
c0013d65:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d69:	eb 04                	jmp    c0013d6f <Reg::readInt(char*, char*, int*)+0xcf>
c0013d6b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d6f:	45                   	inc    ebp
c0013d70:	eb ad                	jmp    c0013d1f <Reg::readInt(char*, char*, int*)+0x7f>
c0013d72:	84 c0                	test   al,al
c0013d74:	74 02                	je     c0013d78 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d76:	f7 da                	neg    edx
c0013d78:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d7f:	89 10                	mov    DWORD PTR [eax],edx
c0013d81:	88 d8                	mov    al,bl
c0013d83:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d89:	5b                   	pop    ebx
c0013d8a:	5e                   	pop    esi
c0013d8b:	5f                   	pop    edi
c0013d8c:	5d                   	pop    ebp
c0013d8d:	c3                   	ret    

c0013d8e <Reg::readString(char*, char*, char*, int)>:
c0013d8e:	57                   	push   edi
c0013d8f:	56                   	push   esi
c0013d90:	53                   	push   ebx
c0013d91:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d97:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d9e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013da2:	57                   	push   edi
c0013da3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013daa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013db1:	e8 b3 fe ff ff       	call   c0013c69 <Reg::getLine(char*, char*, char*)>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	89 c6                	mov    esi,eax
c0013dbb:	84 c0                	test   al,al
c0013dbd:	74 44                	je     c0013e03 <Reg::readString(char*, char*, char*, int)+0x75>
c0013dbf:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013dc6:	31 c0                	xor    eax,eax
c0013dc8:	4a                   	dec    edx
c0013dc9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013dcc:	84 c9                	test   cl,cl
c0013dce:	74 0f                	je     c0013ddf <Reg::readString(char*, char*, char*, int)+0x51>
c0013dd0:	39 c2                	cmp    edx,eax
c0013dd2:	7e 0b                	jle    c0013ddf <Reg::readString(char*, char*, char*, int)+0x51>
c0013dd4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013dd7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013ddc:	40                   	inc    eax
c0013ddd:	eb ea                	jmp    c0013dc9 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013ddf:	83 ec 0c             	sub    esp,0xc
c0013de2:	53                   	push   ebx
c0013de3:	e8 88 c7 fe ff       	call   c0000570 <strlen>
c0013de8:	83 c4 10             	add    esp,0x10
c0013deb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013df0:	75 11                	jne    c0013e03 <Reg::readString(char*, char*, char*, int)+0x75>
c0013df2:	83 ec 0c             	sub    esp,0xc
c0013df5:	53                   	push   ebx
c0013df6:	e8 75 c7 fe ff       	call   c0000570 <strlen>
c0013dfb:	83 c4 10             	add    esp,0x10
c0013dfe:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e03:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e09:	89 f0                	mov    eax,esi
c0013e0b:	5b                   	pop    ebx
c0013e0c:	5e                   	pop    esi
c0013e0d:	5f                   	pop    edi
c0013e0e:	c3                   	ret    

c0013e0f <Reg::readBool(char*, char*, bool*)>:
c0013e0f:	83 ec 20             	sub    esp,0x20
c0013e12:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e16:	50                   	push   eax
c0013e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1f:	e8 7c fe ff ff       	call   c0013ca0 <Reg::readInt(char*, char*, int*)>
c0013e24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e2d:	0f 95 02             	setne  BYTE PTR [edx]
c0013e30:	83 c4 2c             	add    esp,0x2c
c0013e33:	c3                   	ret    

c0013e34 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e34:	53                   	push   ebx
c0013e35:	83 ec 1c             	sub    esp,0x1c
c0013e38:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e3c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e40:	50                   	push   eax
c0013e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e49:	e8 c1 ff ff ff       	call   c0013e0f <Reg::readBool(char*, char*, bool*)>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	84 c0                	test   al,al
c0013e53:	74 04                	je     c0013e59 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e55:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e59:	88 d8                	mov    al,bl
c0013e5b:	83 c4 18             	add    esp,0x18
c0013e5e:	5b                   	pop    ebx
c0013e5f:	c3                   	ret    

c0013e60 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e60:	53                   	push   ebx
c0013e61:	83 ec 1c             	sub    esp,0x1c
c0013e64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e68:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e6c:	50                   	push   eax
c0013e6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e75:	e8 26 fe ff ff       	call   c0013ca0 <Reg::readInt(char*, char*, int*)>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	84 c0                	test   al,al
c0013e7f:	74 04                	je     c0013e85 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e85:	89 d8                	mov    eax,ebx
c0013e87:	83 c4 18             	add    esp,0x18
c0013e8a:	5b                   	pop    ebx
c0013e8b:	c3                   	ret    

c0013e8c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e8c:	57                   	push   edi
c0013e8d:	56                   	push   esi
c0013e8e:	56                   	push   esi
c0013e8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e97:	56                   	push   esi
c0013e98:	57                   	push   edi
c0013e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea1:	e8 e8 fe ff ff       	call   c0013d8e <Reg::readString(char*, char*, char*, int)>
c0013ea6:	83 c4 10             	add    esp,0x10
c0013ea9:	84 c0                	test   al,al
c0013eab:	75 1a                	jne    c0013ec7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013ead:	51                   	push   ecx
c0013eae:	56                   	push   esi
c0013eaf:	6a 00                	push   0x0
c0013eb1:	57                   	push   edi
c0013eb2:	e8 39 c6 fe ff       	call   c00004f0 <memset>
c0013eb7:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013eba:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ebe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013ec7:	89 f8                	mov    eax,edi
c0013ec9:	5a                   	pop    edx
c0013eca:	5e                   	pop    esi
c0013ecb:	5f                   	pop    edi
c0013ecc:	c3                   	ret    

c0013ecd <SysEject(regs*)>:
c0013ecd:	83 ec 0c             	sub    esp,0xc
c0013ed0:	83 ca ff             	or     edx,0xffffffff
c0013ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013eda:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013edf:	83 e9 41             	sub    ecx,0x41
c0013ee2:	83 f9 19             	cmp    ecx,0x19
c0013ee5:	77 18                	ja     c0013eff <SysEject(regs*)+0x32>
c0013ee7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013eee:	85 c9                	test   ecx,ecx
c0013ef0:	74 0d                	je     c0013eff <SysEject(regs*)+0x32>
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	51                   	push   ecx
c0013ef6:	e8 77 9e ff ff       	call   c000dd72 <LogicalDisk::eject()>
c0013efb:	83 c4 10             	add    esp,0x10
c0013efe:	99                   	cdq    
c0013eff:	83 c4 0c             	add    esp,0xc
c0013f02:	c3                   	ret    

c0013f03 <SysExit(regs*)>:
c0013f03:	83 ec 18             	sub    esp,0x18
c0013f06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f0a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f0d:	e8 46 2b 00 00       	call   c0016a58 <terminateTask(int)>
c0013f12:	83 c8 ff             	or     eax,0xffffffff
c0013f15:	83 c4 1c             	add    esp,0x1c
c0013f18:	89 c2                	mov    edx,eax
c0013f1a:	c3                   	ret    

c0013f1b <SysGetCwd(regs*)>:
c0013f1b:	83 ec 10             	sub    esp,0x10
c0013f1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f22:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f25:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f30:	e8 11 79 ff ff       	call   c000b846 <Fs::getcwd(Process*, char*, int)>
c0013f35:	83 c4 1c             	add    esp,0x1c
c0013f38:	99                   	cdq    
c0013f39:	c3                   	ret    

c0013f3a <SysGetPID(regs*)>:
c0013f3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f42:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f44:	99                   	cdq    
c0013f45:	c3                   	ret    

c0013f46 <SysGetRAMData(regs*)>:
c0013f46:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f4c:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f56:	99                   	cdq    
c0013f57:	f7 f9                	idiv   ecx
c0013f59:	c1 e0 18             	shl    eax,0x18
c0013f5c:	09 c8                	or     eax,ecx
c0013f5e:	99                   	cdq    
c0013f5f:	c3                   	ret    

c0013f60 <SysGetVGAPtr(regs*)>:
c0013f60:	55                   	push   ebp
c0013f61:	57                   	push   edi
c0013f62:	56                   	push   esi
c0013f63:	53                   	push   ebx
c0013f64:	83 ec 18             	sub    esp,0x18
c0013f67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f6b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f6e:	e8 b1 25 00 00       	call   c0016524 <Thr::processFromPID(int)>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	89 c1                	mov    ecx,eax
c0013f78:	b8 01 00 00 00       	mov    eax,0x1
c0013f7d:	85 c9                	test   ecx,ecx
c0013f7f:	74 57                	je     c0013fd8 <SysGetVGAPtr(regs*)+0x78>
c0013f81:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f87:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f8b:	74 0c                	je     c0013f99 <SysGetVGAPtr(regs*)+0x39>
c0013f8d:	83 ec 0c             	sub    esp,0xc
c0013f90:	55                   	push   ebp
c0013f91:	e8 c3 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f9c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f9f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fa4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fa6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fac:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fb2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fb5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fb8:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fbe:	50                   	push   eax
c0013fbf:	50                   	push   eax
c0013fc0:	68 14 26 02 c0       	push   0xc0022614
c0013fc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fc8:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fcd:	50                   	push   eax
c0013fce:	e8 6d c6 fe ff       	call   c0000640 <strcpy>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	31 c0                	xor    eax,eax
c0013fd8:	83 c4 0c             	add    esp,0xc
c0013fdb:	31 d2                	xor    edx,edx
c0013fdd:	5b                   	pop    ebx
c0013fde:	5e                   	pop    esi
c0013fdf:	5f                   	pop    edi
c0013fe0:	5d                   	pop    ebp
c0013fe1:	c3                   	ret    
c0013fe2:	66 90                	xchg   ax,ax

c0013fe4 <SysKill(regs*)>:
c0013fe4:	53                   	push   ebx
c0013fe5:	83 ec 08             	sub    esp,0x8
c0013fe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fec:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013ff0:	75 16                	jne    c0014008 <SysKill(regs*)+0x24>
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	68 1e 26 02 c0       	push   0xc002261e
c0013ffa:	e8 54 d6 ff ff       	call   c0011653 <KePanic(char const*)>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	e9 89 00 00 00       	jmp    c0014090 <SysKill(regs*)+0xac>
c0014007:	90                   	nop
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014010:	e8 07 bd 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014015:	8d 76 00             	lea    esi,[esi+0x0]
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	85 c0                	test   eax,eax
c001401d:	74 19                	je     c0014038 <SysKill(regs*)+0x54>
c001401f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014022:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014025:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014027:	74 33                	je     c001405c <SysKill(regs*)+0x78>
c0014029:	52                   	push   edx
c001402a:	52                   	push   edx
c001402b:	50                   	push   eax
c001402c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014031:	e8 06 c0 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014036:	eb e0                	jmp    c0014018 <SysKill(regs*)+0x34>
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014040:	e8 d7 bc 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014045:	8d 76 00             	lea    esi,[esi+0x0]
c0014048:	83 c4 10             	add    esp,0x10
c001404b:	85 c0                	test   eax,eax
c001404d:	74 41                	je     c0014090 <SysKill(regs*)+0xac>
c001404f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014052:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014055:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014057:	75 27                	jne    c0014080 <SysKill(regs*)+0x9c>
c0014059:	8d 76 00             	lea    esi,[esi+0x0]
c001405c:	51                   	push   ecx
c001405d:	51                   	push   ecx
c001405e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014066:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014069:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001406f:	e8 82 da ff ff       	call   c0011af6 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014074:	83 c4 10             	add    esp,0x10
c0014077:	31 c0                	xor    eax,eax
c0014079:	31 d2                	xor    edx,edx
c001407b:	eb 1b                	jmp    c0014098 <SysKill(regs*)+0xb4>
c001407d:	8d 76 00             	lea    esi,[esi+0x0]
c0014080:	52                   	push   edx
c0014081:	52                   	push   edx
c0014082:	50                   	push   eax
c0014083:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014088:	e8 af bf 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001408d:	eb b9                	jmp    c0014048 <SysKill(regs*)+0x64>
c001408f:	90                   	nop
c0014090:	83 c8 ff             	or     eax,0xffffffff
c0014093:	89 c2                	mov    edx,eax
c0014095:	8d 76 00             	lea    esi,[esi+0x0]
c0014098:	83 c4 08             	add    esp,0x8
c001409b:	5b                   	pop    ebx
c001409c:	c3                   	ret    

c001409d <SysLoadDLL(regs*)>:
c001409d:	56                   	push   esi
c001409e:	53                   	push   ebx
c001409f:	31 d2                	xor    edx,edx
c00140a1:	51                   	push   ecx
c00140a2:	b8 01 00 00 00       	mov    eax,0x1
c00140a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140ab:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140af:	0f 84 8c 00 00 00    	je     c0014141 <SysLoadDLL(regs*)+0xa4>
c00140b5:	83 ec 0c             	sub    esp,0xc
c00140b8:	68 14 01 00 00       	push   0x114
c00140bd:	e8 f4 39 ff ff       	call   c0007ab6 <malloc>
c00140c2:	83 c4 0c             	add    esp,0xc
c00140c5:	89 c3                	mov    ebx,eax
c00140c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140d2:	53                   	push   ebx
c00140d3:	e8 aa 7a ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	31 d2                	xor    edx,edx
c00140dd:	b8 02 00 00 00       	mov    eax,0x2
c00140e2:	85 db                	test   ebx,ebx
c00140e4:	74 5b                	je     c0014141 <SysLoadDLL(regs*)+0xa4>
c00140e6:	83 ec 0c             	sub    esp,0xc
c00140e9:	53                   	push   ebx
c00140ea:	e8 75 7d ff ff       	call   c000be64 <File::exists()>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	84 c0                	test   al,al
c00140f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f6:	75 11                	jne    c0014109 <SysLoadDLL(regs*)+0x6c>
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	53                   	push   ebx
c00140fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	b8 03 00 00 00       	mov    eax,0x3
c0014107:	eb 36                	jmp    c001413f <SysLoadDLL(regs*)+0xa2>
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	53                   	push   ebx
c001410d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014110:	58                   	pop    eax
c0014111:	5a                   	pop    edx
c0014112:	6a 00                	push   0x0
c0014114:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014117:	e8 3b 15 00 00       	call   c0015657 <Thr::loadDLL(char const*, bool)>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	89 c1                	mov    ecx,eax
c0014121:	31 d2                	xor    edx,edx
c0014123:	b8 04 00 00 00       	mov    eax,0x4
c0014128:	85 c9                	test   ecx,ecx
c001412a:	74 15                	je     c0014141 <SysLoadDLL(regs*)+0xa4>
c001412c:	53                   	push   ebx
c001412d:	53                   	push   ebx
c001412e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014134:	51                   	push   ecx
c0014135:	e8 4e 17 00 00       	call   c0015888 <Thr::executeDLL(unsigned long, void*)>
c001413a:	83 c4 10             	add    esp,0x10
c001413d:	31 c0                	xor    eax,eax
c001413f:	31 d2                	xor    edx,edx
c0014141:	59                   	pop    ecx
c0014142:	5b                   	pop    ebx
c0014143:	5e                   	pop    esi
c0014144:	c3                   	ret    

c0014145 <SysRead(regs*)>:
c0014145:	57                   	push   edi
c0014146:	56                   	push   esi
c0014147:	53                   	push   ebx
c0014148:	83 ec 10             	sub    esp,0x10
c001414b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001414f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014152:	83 f8 02             	cmp    eax,0x2
c0014155:	77 10                	ja     c0014167 <SysRead(regs*)+0x22>
c0014157:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001415c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001415f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014165:	eb 0e                	jmp    c0014175 <SysRead(regs*)+0x30>
c0014167:	83 ec 0c             	sub    esp,0xc
c001416a:	50                   	push   eax
c001416b:	e8 43 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	89 c1                	mov    ecx,eax
c0014175:	83 c8 ff             	or     eax,0xffffffff
c0014178:	85 c9                	test   ecx,ecx
c001417a:	89 c2                	mov    edx,eax
c001417c:	74 28                	je     c00141a6 <SysRead(regs*)+0x61>
c001417e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014186:	31 ff                	xor    edi,edi
c0014188:	83 ec 0c             	sub    esp,0xc
c001418b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001418d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014191:	52                   	push   edx
c0014192:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014195:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014198:	57                   	push   edi
c0014199:	56                   	push   esi
c001419a:	51                   	push   ecx
c001419b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001419e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141a2:	83 c4 20             	add    esp,0x20
c00141a5:	99                   	cdq    
c00141a6:	83 c4 10             	add    esp,0x10
c00141a9:	5b                   	pop    ebx
c00141aa:	5e                   	pop    esi
c00141ab:	5f                   	pop    edi
c00141ac:	c3                   	ret    

c00141ad <SysRegisterSignal(regs*)>:
c00141ad:	83 ec 18             	sub    esp,0x18
c00141b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141b4:	6a 00                	push   0x0
c00141b6:	6a 00                	push   0x0
c00141b8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141bb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141c6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141cc:	e8 ef d8 ff ff       	call   c0011ac0 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141d1:	83 c4 2c             	add    esp,0x2c
c00141d4:	99                   	cdq    
c00141d5:	c3                   	ret    

c00141d6 <SysRegistryGetTypeFromPath(regs*)>:
c00141d6:	57                   	push   edi
c00141d7:	56                   	push   esi
c00141d8:	53                   	push   ebx
c00141d9:	81 ec 38 01 00 00    	sub    esp,0x138
c00141df:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141e9:	68 3f 26 02 c0       	push   0xc002263f
c00141ee:	e8 52 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141f3:	5a                   	pop    edx
c00141f4:	59                   	pop    ecx
c00141f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141fb:	e8 4d f6 ff ff       	call   c001384d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014200:	5f                   	pop    edi
c0014201:	89 c6                	mov    esi,eax
c0014203:	5a                   	pop    edx
c0014204:	50                   	push   eax
c0014205:	68 5f 26 02 c0       	push   0xc002265f
c001420a:	e8 36 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001420f:	83 c4 10             	add    esp,0x10
c0014212:	85 f6                	test   esi,esi
c0014214:	74 28                	je     c001423e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014216:	50                   	push   eax
c0014217:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001421b:	57                   	push   edi
c001421c:	56                   	push   esi
c001421d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014220:	e8 0c f2 ff ff       	call   c0013431 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014225:	83 c4 0c             	add    esp,0xc
c0014228:	89 c3                	mov    ebx,eax
c001422a:	57                   	push   edi
c001422b:	50                   	push   eax
c001422c:	68 67 26 02 c0       	push   0xc0022667
c0014231:	e8 0f 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014236:	89 d8                	mov    eax,ebx
c0014238:	83 c4 10             	add    esp,0x10
c001423b:	99                   	cdq    
c001423c:	eb 05                	jmp    c0014243 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001423e:	83 c8 ff             	or     eax,0xffffffff
c0014241:	89 c2                	mov    edx,eax
c0014243:	81 c4 30 01 00 00    	add    esp,0x130
c0014249:	5b                   	pop    ebx
c001424a:	5e                   	pop    esi
c001424b:	5f                   	pop    edi
c001424c:	c3                   	ret    

c001424d <SysRegistryReadExtent(regs*)>:
c001424d:	83 ec 1c             	sub    esp,0x1c
c0014250:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014254:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014257:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001425a:	85 c0                	test   eax,eax
c001425c:	79 1f                	jns    c001427d <SysRegistryReadExtent(regs*)+0x30>
c001425e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014263:	52                   	push   edx
c0014264:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014268:	52                   	push   edx
c0014269:	50                   	push   eax
c001426a:	51                   	push   ecx
c001426b:	e8 b3 f0 ff ff       	call   c0013323 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014274:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014278:	83 c4 10             	add    esp,0x10
c001427b:	eb 14                	jmp    c0014291 <SysRegistryReadExtent(regs*)+0x44>
c001427d:	83 ec 04             	sub    esp,0x4
c0014280:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014283:	50                   	push   eax
c0014284:	51                   	push   ecx
c0014285:	e8 33 eb ff ff       	call   c0012dbd <CmGetString(Reghive_Tag*, int, char*)>
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	31 c0                	xor    eax,eax
c001428f:	31 d2                	xor    edx,edx
c0014291:	83 c4 1c             	add    esp,0x1c
c0014294:	c3                   	ret    

c0014295 <SysRegistryPathToExtentLookup(regs*)>:
c0014295:	53                   	push   ebx
c0014296:	83 ec 10             	sub    esp,0x10
c0014299:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001429d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a0:	68 7d 26 02 c0       	push   0xc002267d
c00142a5:	e8 9b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142aa:	58                   	pop    eax
c00142ab:	5a                   	pop    edx
c00142ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142b2:	e8 96 f5 ff ff       	call   c001384d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142b7:	83 c4 18             	add    esp,0x18
c00142ba:	99                   	cdq    
c00142bb:	5b                   	pop    ebx
c00142bc:	c3                   	ret    

c00142bd <SysRegistryEnterDirectory(regs*)>:
c00142bd:	53                   	push   ebx
c00142be:	83 ec 10             	sub    esp,0x10
c00142c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c8:	68 a0 26 02 c0       	push   0xc00226a0
c00142cd:	e8 73 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142d2:	58                   	pop    eax
c00142d3:	5a                   	pop    edx
c00142d4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142da:	e8 55 eb ff ff       	call   c0012e34 <CmEnterDirectory(Reghive_Tag*, int)>
c00142df:	83 c4 18             	add    esp,0x18
c00142e2:	99                   	cdq    
c00142e3:	5b                   	pop    ebx
c00142e4:	c3                   	ret    

c00142e5 <SysRegistryGetNext(regs*)>:
c00142e5:	53                   	push   ebx
c00142e6:	83 ec 10             	sub    esp,0x10
c00142e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142f0:	68 be 26 02 c0       	push   0xc00226be
c00142f5:	e8 4b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142fa:	58                   	pop    eax
c00142fb:	5a                   	pop    edx
c00142fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014302:	e8 6c eb ff ff       	call   c0012e73 <CmGetNext(Reghive_Tag*, int)>
c0014307:	83 c4 18             	add    esp,0x18
c001430a:	99                   	cdq    
c001430b:	5b                   	pop    ebx
c001430c:	c3                   	ret    

c001430d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001430d:	57                   	push   edi
c001430e:	56                   	push   esi
c001430f:	53                   	push   ebx
c0014310:	81 ec 34 01 00 00    	sub    esp,0x134
c0014316:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001431d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014321:	57                   	push   edi
c0014322:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014325:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014328:	e8 04 f1 ff ff       	call   c0013431 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001432d:	89 c3                	mov    ebx,eax
c001432f:	58                   	pop    eax
c0014330:	5a                   	pop    edx
c0014331:	57                   	push   edi
c0014332:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014335:	e8 06 c3 fe ff       	call   c0000640 <strcpy>
c001433a:	89 d8                	mov    eax,ebx
c001433c:	81 c4 40 01 00 00    	add    esp,0x140
c0014342:	99                   	cdq    
c0014343:	5b                   	pop    ebx
c0014344:	5e                   	pop    esi
c0014345:	5f                   	pop    edi
c0014346:	c3                   	ret    

c0014347 <SysRegistryOpen(regs*)>:
c0014347:	83 ec 18             	sub    esp,0x18
c001434a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001434e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014351:	e8 f7 e8 ff ff       	call   c0012c4d <CmOpen(char const*)>
c0014356:	83 c4 1c             	add    esp,0x1c
c0014359:	99                   	cdq    
c001435a:	c3                   	ret    

c001435b <SysRegistryClose(regs*)>:
c001435b:	83 ec 18             	sub    esp,0x18
c001435e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014362:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014365:	e8 01 ea ff ff       	call   c0012d6b <CmClose(Reghive_Tag*)>
c001436a:	31 c0                	xor    eax,eax
c001436c:	31 d2                	xor    edx,edx
c001436e:	83 c4 1c             	add    esp,0x1c
c0014371:	c3                   	ret    

c0014372 <SysSbrk(regs*)>:
c0014372:	56                   	push   esi
c0014373:	53                   	push   ebx
c0014374:	50                   	push   eax
c0014375:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001437e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014381:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014384:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001438a:	85 db                	test   ebx,ebx
c001438c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001438f:	74 02                	je     c0014393 <SysSbrk(regs*)+0x21>
c0014391:	79 06                	jns    c0014399 <SysSbrk(regs*)+0x27>
c0014393:	89 f0                	mov    eax,esi
c0014395:	31 d2                	xor    edx,edx
c0014397:	eb 2a                	jmp    c00143c3 <SysSbrk(regs*)+0x51>
c0014399:	83 c8 ff             	or     eax,0xffffffff
c001439c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143a2:	89 c2                	mov    edx,eax
c00143a4:	77 1d                	ja     c00143c3 <SysSbrk(regs*)+0x51>
c00143a6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143ac:	50                   	push   eax
c00143ad:	c1 ea 0c             	shr    edx,0xc
c00143b0:	68 07 0c 00 00       	push   0xc07
c00143b5:	52                   	push   edx
c00143b6:	51                   	push   ecx
c00143b7:	e8 68 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00143bc:	89 f0                	mov    eax,esi
c00143be:	31 d2                	xor    edx,edx
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	59                   	pop    ecx
c00143c4:	5b                   	pop    ebx
c00143c5:	5e                   	pop    esi
c00143c6:	c3                   	ret    

c00143c7 <SysSetCwd(regs*)>:
c00143c7:	83 ec 14             	sub    esp,0x14
c00143ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143d6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143d9:	e8 25 7b ff ff       	call   c000bf03 <Fs::setcwd(Process*, char*)>
c00143de:	83 c4 1c             	add    esp,0x1c
c00143e1:	99                   	cdq    
c00143e2:	c3                   	ret    

c00143e3 <SysSetTime(regs*)>:
c00143e3:	55                   	push   ebp
c00143e4:	31 c9                	xor    ecx,ecx
c00143e6:	57                   	push   edi
c00143e7:	bd 0c 00 00 00       	mov    ebp,0xc
c00143ec:	56                   	push   esi
c00143ed:	53                   	push   ebx
c00143ee:	31 db                	xor    ebx,ebx
c00143f0:	83 ec 10             	sub    esp,0x10
c00143f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143f7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143fa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143fd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014400:	89 c2                	mov    edx,eax
c0014402:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014408:	83 e2 1f             	and    edx,0x1f
c001440b:	c1 e7 10             	shl    edi,0x10
c001440e:	42                   	inc    edx
c001440f:	c1 e8 05             	shr    eax,0x5
c0014412:	88 d1                	mov    cl,dl
c0014414:	31 d2                	xor    edx,edx
c0014416:	f7 f5                	div    ebp
c0014418:	89 dd                	mov    ebp,ebx
c001441a:	88 d5                	mov    ch,dl
c001441c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014422:	0f b7 c1             	movzx  eax,cx
c0014425:	31 d2                	xor    edx,edx
c0014427:	09 f8                	or     eax,edi
c0014429:	bf 3c 00 00 00       	mov    edi,0x3c
c001442e:	89 c1                	mov    ecx,eax
c0014430:	89 f0                	mov    eax,esi
c0014432:	f7 f7                	div    edi
c0014434:	c1 e2 10             	shl    edx,0x10
c0014437:	09 d5                	or     ebp,edx
c0014439:	31 d2                	xor    edx,edx
c001443b:	89 eb                	mov    ebx,ebp
c001443d:	f7 f7                	div    edi
c001443f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014444:	88 d7                	mov    bh,dl
c0014446:	89 f0                	mov    eax,esi
c0014448:	31 d2                	xor    edx,edx
c001444a:	f7 f7                	div    edi
c001444c:	bf 18 00 00 00       	mov    edi,0x18
c0014451:	31 d2                	xor    edx,edx
c0014453:	f7 f7                	div    edi
c0014455:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001445a:	88 d3                	mov    bl,dl
c001445c:	53                   	push   ebx
c001445d:	51                   	push   ecx
c001445e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014464:	e8 a5 82 ff ff       	call   c000c70e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014469:	83 c4 1c             	add    esp,0x1c
c001446c:	83 f0 01             	xor    eax,0x1
c001446f:	5b                   	pop    ebx
c0014470:	0f b6 c0             	movzx  eax,al
c0014473:	5e                   	pop    esi
c0014474:	31 d2                	xor    edx,edx
c0014476:	5f                   	pop    edi
c0014477:	5d                   	pop    ebp
c0014478:	c3                   	ret    

c0014479 <SysSymlink(regs*)>:
c0014479:	53                   	push   ebx
c001447a:	83 c8 ff             	or     eax,0xffffffff
c001447d:	83 ec 08             	sub    esp,0x8
c0014480:	89 c2                	mov    edx,eax
c0014482:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014486:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014489:	85 c9                	test   ecx,ecx
c001448b:	74 14                	je     c00144a1 <SysSymlink(regs*)+0x28>
c001448d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014490:	85 db                	test   ebx,ebx
c0014492:	74 0d                	je     c00144a1 <SysSymlink(regs*)+0x28>
c0014494:	50                   	push   eax
c0014495:	50                   	push   eax
c0014496:	53                   	push   ebx
c0014497:	51                   	push   ecx
c0014498:	e8 ba 6e ff ff       	call   c000b357 <KeCreateSymlink(char const*, char const*)>
c001449d:	83 c4 10             	add    esp,0x10
c00144a0:	99                   	cdq    
c00144a1:	83 c4 08             	add    esp,0x8
c00144a4:	5b                   	pop    ebx
c00144a5:	c3                   	ret    

c00144a6 <SysTimezone(regs*)>:
c00144a6:	53                   	push   ebx
c00144a7:	83 ec 08             	sub    esp,0x8
c00144aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144ae:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00144b2:	75 17                	jne    c00144cb <SysTimezone(regs*)+0x25>
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	68 d5 26 02 c0       	push   0xc00226d5
c00144bc:	e8 84 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144c1:	83 c8 ff             	or     eax,0xffffffff
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	89 c2                	mov    edx,eax
c00144c9:	eb 20                	jmp    c00144eb <SysTimezone(regs*)+0x45>
c00144cb:	83 ec 0c             	sub    esp,0xc
c00144ce:	68 ea 26 02 c0       	push   0xc00226ea
c00144d3:	e8 6d 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144d8:	58                   	pop    eax
c00144d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144dc:	e8 97 7f ff ff       	call   c000c478 <User::loadClockSettings(int)>
c00144e1:	83 c4 10             	add    esp,0x10
c00144e4:	b8 01 00 00 00       	mov    eax,0x1
c00144e9:	31 d2                	xor    edx,edx
c00144eb:	83 c4 08             	add    esp,0x8
c00144ee:	5b                   	pop    ebx
c00144ef:	c3                   	ret    

c00144f0 <SysTruncate(regs*)>:
c00144f0:	55                   	push   ebp
c00144f1:	57                   	push   edi
c00144f2:	31 ff                	xor    edi,edi
c00144f4:	56                   	push   esi
c00144f5:	53                   	push   ebx
c00144f6:	83 ec 0c             	sub    esp,0xc
c00144f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014500:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014503:	89 ce                	mov    esi,ecx
c0014505:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014509:	0f 84 9a 00 00 00    	je     c00145a9 <SysTruncate(regs*)+0xb9>
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	68 14 01 00 00       	push   0x114
c0014517:	e8 9a 35 ff ff       	call   c0007ab6 <malloc>
c001451c:	83 c4 0c             	add    esp,0xc
c001451f:	89 c3                	mov    ebx,eax
c0014521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014526:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014529:	55                   	push   ebp
c001452a:	53                   	push   ebx
c001452b:	e8 52 76 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	31 d2                	xor    edx,edx
c0014535:	b8 03 00 00 00       	mov    eax,0x3
c001453a:	85 db                	test   ebx,ebx
c001453c:	0f 84 a2 00 00 00    	je     c00145e4 <SysTruncate(regs*)+0xf4>
c0014542:	51                   	push   ecx
c0014543:	51                   	push   ecx
c0014544:	6a 02                	push   0x2
c0014546:	53                   	push   ebx
c0014547:	e8 54 76 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001454c:	83 c4 10             	add    esp,0x10
c001454f:	85 c0                	test   eax,eax
c0014551:	74 13                	je     c0014566 <SysTruncate(regs*)+0x76>
c0014553:	83 ec 0c             	sub    esp,0xc
c0014556:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014558:	53                   	push   ebx
c0014559:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	b8 04 00 00 00       	mov    eax,0x4
c0014564:	eb 7c                	jmp    c00145e2 <SysTruncate(regs*)+0xf2>
c0014566:	52                   	push   edx
c0014567:	57                   	push   edi
c0014568:	56                   	push   esi
c0014569:	53                   	push   ebx
c001456a:	e8 45 77 ff ff       	call   c000bcb4 <File::truncate(unsigned long long)>
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	85 c0                	test   eax,eax
c0014574:	74 1b                	je     c0014591 <SysTruncate(regs*)+0xa1>
c0014576:	83 ec 0c             	sub    esp,0xc
c0014579:	53                   	push   ebx
c001457a:	e8 7f 76 ff ff       	call   c000bbfe <File::close()>
c001457f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014581:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014587:	83 c4 10             	add    esp,0x10
c001458a:	b8 05 00 00 00       	mov    eax,0x5
c001458f:	eb 51                	jmp    c00145e2 <SysTruncate(regs*)+0xf2>
c0014591:	83 ec 0c             	sub    esp,0xc
c0014594:	53                   	push   ebx
c0014595:	e8 64 76 ff ff       	call   c000bbfe <File::close()>
c001459a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001459c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001459f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145a2:	83 c4 10             	add    esp,0x10
c00145a5:	31 c0                	xor    eax,eax
c00145a7:	eb 39                	jmp    c00145e2 <SysTruncate(regs*)+0xf2>
c00145a9:	31 d2                	xor    edx,edx
c00145ab:	b8 01 00 00 00       	mov    eax,0x1
c00145b0:	83 fd 02             	cmp    ebp,0x2
c00145b3:	7e 2f                	jle    c00145e4 <SysTruncate(regs*)+0xf4>
c00145b5:	83 ec 0c             	sub    esp,0xc
c00145b8:	51                   	push   ecx
c00145b9:	e8 f5 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00145be:	83 c4 10             	add    esp,0x10
c00145c1:	89 c1                	mov    ecx,eax
c00145c3:	31 d2                	xor    edx,edx
c00145c5:	b8 02 00 00 00       	mov    eax,0x2
c00145ca:	85 c9                	test   ecx,ecx
c00145cc:	74 16                	je     c00145e4 <SysTruncate(regs*)+0xf4>
c00145ce:	50                   	push   eax
c00145cf:	57                   	push   edi
c00145d0:	56                   	push   esi
c00145d1:	51                   	push   ecx
c00145d2:	e8 dd 76 ff ff       	call   c000bcb4 <File::truncate(unsigned long long)>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	85 c0                	test   eax,eax
c00145dc:	0f 95 c0             	setne  al
c00145df:	0f b6 c0             	movzx  eax,al
c00145e2:	31 d2                	xor    edx,edx
c00145e4:	83 c4 0c             	add    esp,0xc
c00145e7:	5b                   	pop    ebx
c00145e8:	5e                   	pop    esi
c00145e9:	5f                   	pop    edi
c00145ea:	5d                   	pop    ebp
c00145eb:	c3                   	ret    

c00145ec <SysWrite(regs*)>:
c00145ec:	57                   	push   edi
c00145ed:	56                   	push   esi
c00145ee:	53                   	push   ebx
c00145ef:	83 ec 10             	sub    esp,0x10
c00145f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145f9:	83 f8 02             	cmp    eax,0x2
c00145fc:	77 10                	ja     c001460e <SysWrite(regs*)+0x22>
c00145fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014603:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014606:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001460c:	eb 0e                	jmp    c001461c <SysWrite(regs*)+0x30>
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	50                   	push   eax
c0014612:	e8 9c 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	89 c1                	mov    ecx,eax
c001461c:	83 c8 ff             	or     eax,0xffffffff
c001461f:	85 c9                	test   ecx,ecx
c0014621:	89 c2                	mov    edx,eax
c0014623:	74 28                	je     c001464d <SysWrite(regs*)+0x61>
c0014625:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001462d:	31 ff                	xor    edi,edi
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014634:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014638:	52                   	push   edx
c0014639:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001463c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001463f:	57                   	push   edi
c0014640:	56                   	push   esi
c0014641:	51                   	push   ecx
c0014642:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014649:	83 c4 20             	add    esp,0x20
c001464c:	99                   	cdq    
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	5b                   	pop    ebx
c0014651:	5e                   	pop    esi
c0014652:	5f                   	pop    edi
c0014653:	c3                   	ret    

c0014654 <SysWsbe(regs*)>:
c0014654:	57                   	push   edi
c0014655:	b9 0b 00 00 00       	mov    ecx,0xb
c001465a:	56                   	push   esi
c001465b:	be 29 27 02 c0       	mov    esi,0xc0022729
c0014660:	53                   	push   ebx
c0014661:	83 ec 30             	sub    esp,0x30
c0014664:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014668:	fc                   	cld    
c0014669:	83 ec 0c             	sub    esp,0xc
c001466c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001466e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014677:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001467a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014680:	8b 06                	mov    eax,DWORD PTR [esi]
c0014682:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014685:	57                   	push   edi
c0014686:	e8 e5 be fe ff       	call   c0000570 <strlen>
c001468b:	5a                   	pop    edx
c001468c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014690:	52                   	push   edx
c0014691:	31 d2                	xor    edx,edx
c0014693:	57                   	push   edi
c0014694:	52                   	push   edx
c0014695:	50                   	push   eax
c0014696:	56                   	push   esi
c0014697:	ff d3                	call   ebx
c0014699:	83 c4 14             	add    esp,0x14
c001469c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00146a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146a3:	e8 b0 23 00 00       	call   c0016a58 <terminateTask(int)>
c00146a8:	83 c4 40             	add    esp,0x40
c00146ab:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00146b0:	5b                   	pop    ebx
c00146b1:	31 d2                	xor    edx,edx
c00146b3:	5e                   	pop    esi
c00146b4:	5f                   	pop    edi
c00146b5:	c3                   	ret    

c00146b6 <SysYield(regs*)>:
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	fa                   	cli    
c00146ba:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146c0:	e8 f3 19 00 00       	call   c00160b8 <schedule()>
c00146c5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00146ca:	48                   	dec    eax
c00146cb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146d0:	75 01                	jne    c00146d3 <SysYield(regs*)+0x1d>
c00146d2:	fb                   	sti    
c00146d3:	31 c0                	xor    eax,eax
c00146d5:	31 d2                	xor    edx,edx
c00146d7:	83 c4 0c             	add    esp,0xc
c00146da:	c3                   	ret    

c00146db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146db:	55                   	push   ebp
c00146dc:	57                   	push   edi
c00146dd:	56                   	push   esi
c00146de:	53                   	push   ebx
c00146df:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146e5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146ed:	0f 95 c0             	setne  al
c00146f0:	31 d2                	xor    edx,edx
c00146f2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146fa:	0f 94 c2             	sete   dl
c00146fd:	85 c2                	test   edx,eax
c00146ff:	74 34                	je     c0014735 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014701:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001470c:	74 27                	je     c0014735 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001470e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014715:	05 00 10 00 00       	add    eax,0x1000
c001471a:	89 c1                	mov    ecx,eax
c001471c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014721:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014727:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001472e:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014735:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014745:	6a 01                	push   0x1
c0014747:	e8 c1 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001474c:	83 c4 10             	add    esp,0x10
c001474f:	89 c3                	mov    ebx,eax
c0014751:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014757:	0f 86 25 01 00 00    	jbe    c0014882 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001475d:	c1 ee 0c             	shr    esi,0xc
c0014760:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014767:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001476b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014773:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001477a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001477e:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014785:	29 ef                	sub    edi,ebp
c0014787:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001478b:	0f 83 f8 00 00 00    	jae    c0014889 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014791:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014797:	76 05                	jbe    c001479e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014799:	bf 00 10 00 00       	mov    edi,0x1000
c001479e:	83 ec 0c             	sub    esp,0xc
c00147a1:	31 d2                	xor    edx,edx
c00147a3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00147aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00147ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00147b0:	50                   	push   eax
c00147b1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00147b5:	56                   	push   esi
c00147b6:	52                   	push   edx
c00147b7:	57                   	push   edi
c00147b8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00147bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147c2:	83 c4 20             	add    esp,0x20
c00147c5:	85 c0                	test   eax,eax
c00147c7:	75 06                	jne    c00147cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00147c9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00147cd:	74 13                	je     c00147e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00147cf:	83 ec 0c             	sub    esp,0xc
c00147d2:	53                   	push   ebx
c00147d3:	e8 53 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00147d8:	83 c4 10             	add    esp,0x10
c00147db:	31 c0                	xor    eax,eax
c00147dd:	e9 7c 01 00 00       	jmp    c001495e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00147e2:	fa                   	cli    
c00147e3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147e9:	e8 d1 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00147ee:	6a 07                	push   0x7
c00147f0:	89 c7                	mov    edi,eax
c00147f2:	53                   	push   ebx
c00147f3:	50                   	push   eax
c00147f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014802:	e8 19 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014807:	83 c4 0c             	add    esp,0xc
c001480a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014811:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014817:	6a 00                	push   0x0
c0014819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001481e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014821:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014827:	e8 5a 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001482c:	58                   	pop    eax
c001482d:	5a                   	pop    edx
c001482e:	68 07 0c 00 00       	push   0xc07
c0014833:	55                   	push   ebp
c0014834:	57                   	push   edi
c0014835:	89 df                	mov    edi,ebx
c0014837:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001483e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014844:	6a 00                	push   0x0
c0014846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001484e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014854:	e8 19 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014859:	b9 00 10 00 00       	mov    ecx,0x1000
c001485e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014860:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014865:	83 c4 20             	add    esp,0x20
c0014868:	48                   	dec    eax
c0014869:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001486e:	85 c0                	test   eax,eax
c0014870:	75 01                	jne    c0014873 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014872:	fb                   	sti    
c0014873:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014879:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001487d:	e9 f1 fe ff ff       	jmp    c0014773 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014882:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014889:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014890:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014896:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001489c:	0f 86 ae 00 00 00    	jbe    c0014950 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00148a2:	fa                   	cli    
c00148a3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00148a9:	c1 ee 0c             	shr    esi,0xc
c00148ac:	51                   	push   ecx
c00148ad:	31 ff                	xor    edi,edi
c00148af:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148bc:	6a 00                	push   0x0
c00148be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148cc:	e8 b5 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148d1:	83 c4 10             	add    esp,0x10
c00148d4:	e8 e6 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00148d9:	47                   	inc    edi
c00148da:	6a 07                	push   0x7
c00148dc:	53                   	push   ebx
c00148dd:	50                   	push   eax
c00148de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148e8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148eb:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148f1:	e8 2a 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148f6:	58                   	pop    eax
c00148f7:	5a                   	pop    edx
c00148f8:	68 07 0c 00 00       	push   0xc07
c00148fd:	55                   	push   ebp
c00148fe:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014904:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014908:	50                   	push   eax
c0014909:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014910:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014916:	6a 00                	push   0x0
c0014918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001491d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014920:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014926:	e8 47 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001492b:	83 c4 1c             	add    esp,0x1c
c001492e:	68 00 10 00 00       	push   0x1000
c0014933:	6a 00                	push   0x0
c0014935:	53                   	push   ebx
c0014936:	e8 b5 bb fe ff       	call   c00004f0 <memset>
c001493b:	83 c4 10             	add    esp,0x10
c001493e:	39 fe                	cmp    esi,edi
c0014940:	77 92                	ja     c00148d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014942:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014947:	48                   	dec    eax
c0014948:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001494d:	75 01                	jne    c0014950 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001494f:	fb                   	sti    
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	53                   	push   ebx
c0014954:	e8 d2 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	b0 01                	mov    al,0x1
c001495e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014964:	5b                   	pop    ebx
c0014965:	5e                   	pop    esi
c0014966:	5f                   	pop    edi
c0014967:	5d                   	pop    ebp
c0014968:	c3                   	ret    

c0014969 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014969:	55                   	push   ebp
c001496a:	57                   	push   edi
c001496b:	56                   	push   esi
c001496c:	53                   	push   ebx
c001496d:	83 ec 48             	sub    esp,0x48
c0014970:	68 14 01 00 00       	push   0x114
c0014975:	e8 3c 31 ff ff       	call   c0007ab6 <malloc>
c001497a:	83 c4 0c             	add    esp,0xc
c001497d:	89 c6                	mov    esi,eax
c001497f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014983:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014987:	50                   	push   eax
c0014988:	e8 f5 71 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c001498d:	58                   	pop    eax
c001498e:	5a                   	pop    edx
c001498f:	6a 01                	push   0x1
c0014991:	56                   	push   esi
c0014992:	e8 09 72 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014997:	83 c4 10             	add    esp,0x10
c001499a:	85 c0                	test   eax,eax
c001499c:	0f 85 43 01 00 00    	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149a2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00149aa:	83 ec 0c             	sub    esp,0xc
c00149ad:	6a 34                	push   0x34
c00149af:	e8 02 31 ff ff       	call   c0007ab6 <malloc>
c00149b4:	89 c3                	mov    ebx,eax
c00149b6:	58                   	pop    eax
c00149b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00149b9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00149bd:	57                   	push   edi
c00149be:	53                   	push   ebx
c00149bf:	6a 00                	push   0x0
c00149c1:	6a 34                	push   0x34
c00149c3:	56                   	push   esi
c00149c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149c7:	83 c4 20             	add    esp,0x20
c00149ca:	85 c0                	test   eax,eax
c00149cc:	0f 85 13 01 00 00    	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149d2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149d8:	0f 85 07 01 00 00    	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149e1:	85 c0                	test   eax,eax
c00149e3:	0f 84 fc 00 00 00    	je     c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149e9:	31 d2                	xor    edx,edx
c00149eb:	55                   	push   ebp
c00149ec:	52                   	push   edx
c00149ed:	50                   	push   eax
c00149ee:	56                   	push   esi
c00149ef:	e8 6a 72 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c00149f4:	83 c4 10             	add    esp,0x10
c00149f7:	85 c0                	test   eax,eax
c00149f9:	0f 85 e6 00 00 00    	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149ff:	83 ec 0c             	sub    esp,0xc
c0014a02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014a05:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a0d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a11:	0f af c2             	imul   eax,edx
c0014a14:	50                   	push   eax
c0014a15:	e8 9c 30 ff ff       	call   c0007ab6 <malloc>
c0014a1a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a20:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a27:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a2b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a2f:	0f af c2             	imul   eax,edx
c0014a32:	99                   	cdq    
c0014a33:	52                   	push   edx
c0014a34:	50                   	push   eax
c0014a35:	56                   	push   esi
c0014a36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a39:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a3c:	83 c4 20             	add    esp,0x20
c0014a3f:	85 c0                	test   eax,eax
c0014a41:	0f 84 9e 00 00 00    	je     c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a47:	31 d2                	xor    edx,edx
c0014a49:	51                   	push   ecx
c0014a4a:	52                   	push   edx
c0014a4b:	50                   	push   eax
c0014a4c:	56                   	push   esi
c0014a4d:	e8 0c 72 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014a52:	83 c4 10             	add    esp,0x10
c0014a55:	85 c0                	test   eax,eax
c0014a57:	0f 85 88 00 00 00    	jne    c0014ae5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a64:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a68:	31 ed                	xor    ebp,ebp
c0014a6a:	0f af c2             	imul   eax,edx
c0014a6d:	50                   	push   eax
c0014a6e:	e8 43 30 ff ff       	call   c0007ab6 <malloc>
c0014a73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a79:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a80:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a84:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a88:	0f af c2             	imul   eax,edx
c0014a8b:	99                   	cdq    
c0014a8c:	52                   	push   edx
c0014a8d:	50                   	push   eax
c0014a8e:	56                   	push   esi
c0014a8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a92:	83 c4 20             	add    esp,0x20
c0014a95:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a9d:	0f b7 fd             	movzx  edi,bp
c0014aa0:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014aa4:	73 7d                	jae    c0014b23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014aa6:	c1 e7 05             	shl    edi,0x5
c0014aa9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014aad:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014ab0:	75 6b                	jne    c0014b1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ab2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014ab5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ab9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014abc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ac0:	52                   	push   edx
c0014ac1:	31 d2                	xor    edx,edx
c0014ac3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014ac6:	52                   	push   edx
c0014ac7:	50                   	push   eax
c0014ac8:	56                   	push   esi
c0014ac9:	e8 90 71 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014ace:	83 c4 10             	add    esp,0x10
c0014ad1:	85 c0                	test   eax,eax
c0014ad3:	74 17                	je     c0014aec <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014ad5:	83 ec 0c             	sub    esp,0xc
c0014ad8:	68 55 27 02 c0       	push   0xc0022755
c0014add:	e8 63 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	31 c0                	xor    eax,eax
c0014ae7:	e9 87 00 00 00       	jmp    c0014b73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014af2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014af5:	50                   	push   eax
c0014af6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014afa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014afe:	56                   	push   esi
c0014aff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014b03:	e8 d3 fb ff ff       	call   c00146db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014b08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b0c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014b10:	83 c4 20             	add    esp,0x20
c0014b13:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014b17:	73 04                	jae    c0014b1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014b1d:	45                   	inc    ebp
c0014b1e:	e9 7a ff ff ff       	jmp    c0014a9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014b23:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014b27:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b2f:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b43:	05 00 10 00 00       	add    eax,0x1000
c0014b48:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b4f:	e8 72 2f ff ff       	call   c0007ac6 <free>
c0014b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b57:	e8 6a 2f ff ff       	call   c0007ac6 <free>
c0014b5c:	58                   	pop    eax
c0014b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b61:	e8 60 2f ff ff       	call   c0007ac6 <free>
c0014b66:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b69:	e8 90 70 ff ff       	call   c000bbfe <File::close()>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	b0 01                	mov    al,0x1
c0014b73:	83 c4 3c             	add    esp,0x3c
c0014b76:	5b                   	pop    ebx
c0014b77:	5e                   	pop    esi
c0014b78:	5f                   	pop    edi
c0014b79:	5d                   	pop    ebp
c0014b7a:	c3                   	ret    

c0014b7b <Thr::runtimeReferenceHelper()>:
c0014b7b:	83 ec 18             	sub    esp,0x18
c0014b7e:	68 5d 27 02 c0       	push   0xc002275d
c0014b83:	e8 bd 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b88:	fa                   	cli    
c0014b89:	83 c4 10             	add    esp,0x10
c0014b8c:	eb fe                	jmp    c0014b8c <Thr::runtimeReferenceHelper()+0x11>

c0014b8e <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b8e:	57                   	push   edi
c0014b8f:	56                   	push   esi
c0014b90:	53                   	push   ebx
c0014b91:	31 db                	xor    ebx,ebx
c0014b93:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b99:	7e 3c                	jle    c0014bd7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b9b:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014ba2:	31 ff                	xor    edi,edi
c0014ba4:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014bab:	7e 27                	jle    c0014bd4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014bad:	50                   	push   eax
c0014bae:	50                   	push   eax
c0014baf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bb3:	8b 06                	mov    eax,DWORD PTR [esi]
c0014bb5:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014bbc:	50                   	push   eax
c0014bbd:	e8 8e bb fe ff       	call   c0000750 <strcmp>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	85 c0                	test   eax,eax
c0014bc7:	75 05                	jne    c0014bce <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014bc9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bcc:	eb 0b                	jmp    c0014bd9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014bce:	83 c6 10             	add    esi,0x10
c0014bd1:	47                   	inc    edi
c0014bd2:	eb d0                	jmp    c0014ba4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bd4:	43                   	inc    ebx
c0014bd5:	eb bc                	jmp    c0014b93 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014bd7:	31 c0                	xor    eax,eax
c0014bd9:	5b                   	pop    ebx
c0014bda:	5e                   	pop    esi
c0014bdb:	5f                   	pop    edi
c0014bdc:	c3                   	ret    

c0014bdd <Thr::loadKernelSymbolTable(char const*)>:
c0014bdd:	55                   	push   ebp
c0014bde:	57                   	push   edi
c0014bdf:	56                   	push   esi
c0014be0:	53                   	push   ebx
c0014be1:	83 ec 68             	sub    esp,0x68
c0014be4:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bea:	68 14 01 00 00       	push   0x114
c0014bef:	e8 c2 2e ff ff       	call   c0007ab6 <malloc>
c0014bf4:	83 c4 0c             	add    esp,0xc
c0014bf7:	89 c3                	mov    ebx,eax
c0014bf9:	56                   	push   esi
c0014bfa:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bfe:	50                   	push   eax
c0014bff:	e8 7e 6f ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014c04:	5e                   	pop    esi
c0014c05:	5f                   	pop    edi
c0014c06:	6a 01                	push   0x1
c0014c08:	53                   	push   ebx
c0014c09:	e8 92 6f ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014c0e:	83 c4 10             	add    esp,0x10
c0014c11:	85 c0                	test   eax,eax
c0014c13:	74 0a                	je     c0014c1f <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014c15:	83 ec 0c             	sub    esp,0xc
c0014c18:	68 7f 27 02 c0       	push   0xc002277f
c0014c1d:	eb 34                	jmp    c0014c53 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014c1f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014c27:	83 ec 0c             	sub    esp,0xc
c0014c2a:	6a 34                	push   0x34
c0014c2c:	e8 85 2e ff ff       	call   c0007ab6 <malloc>
c0014c31:	59                   	pop    ecx
c0014c32:	89 c7                	mov    edi,eax
c0014c34:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c3a:	56                   	push   esi
c0014c3b:	57                   	push   edi
c0014c3c:	6a 00                	push   0x0
c0014c3e:	6a 34                	push   0x34
c0014c40:	53                   	push   ebx
c0014c41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c44:	83 c4 20             	add    esp,0x20
c0014c47:	85 c0                	test   eax,eax
c0014c49:	74 17                	je     c0014c62 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c4b:	83 ec 0c             	sub    esp,0xc
c0014c4e:	68 96 27 02 c0       	push   0xc0022796
c0014c53:	e8 fb c9 ff ff       	call   c0011653 <KePanic(char const*)>
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	31 c0                	xor    eax,eax
c0014c5d:	e9 31 02 00 00       	jmp    c0014e93 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c62:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c68:	75 e1                	jne    c0014c4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c6a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c6d:	85 c0                	test   eax,eax
c0014c6f:	74 da                	je     c0014c4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c71:	52                   	push   edx
c0014c72:	31 d2                	xor    edx,edx
c0014c74:	52                   	push   edx
c0014c75:	50                   	push   eax
c0014c76:	53                   	push   ebx
c0014c77:	e8 e2 6f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014c7c:	83 c4 10             	add    esp,0x10
c0014c7f:	85 c0                	test   eax,eax
c0014c81:	75 c8                	jne    c0014c4b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c83:	83 ec 0c             	sub    esp,0xc
c0014c86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c8e:	31 ed                	xor    ebp,ebp
c0014c90:	0f af c2             	imul   eax,edx
c0014c93:	50                   	push   eax
c0014c94:	e8 1d 2e ff ff       	call   c0007ab6 <malloc>
c0014c99:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c9f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ca6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014caa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014cae:	0f af c2             	imul   eax,edx
c0014cb1:	99                   	cdq    
c0014cb2:	52                   	push   edx
c0014cb3:	50                   	push   eax
c0014cb4:	53                   	push   ebx
c0014cb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cb8:	83 c4 20             	add    esp,0x20
c0014cbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014cc3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ccb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cdb:	0f b7 f5             	movzx  esi,bp
c0014cde:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014ce2:	0f 83 a7 00 00 00    	jae    c0014d8f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014ce8:	6b f6 28             	imul   esi,esi,0x28
c0014ceb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cf6:	50                   	push   eax
c0014cf7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cfb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014cff:	8b 16                	mov    edx,DWORD PTR [esi]
c0014d01:	6b c0 28             	imul   eax,eax,0x28
c0014d04:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014d08:	89 d0                	mov    eax,edx
c0014d0a:	31 d2                	xor    edx,edx
c0014d0c:	52                   	push   edx
c0014d0d:	50                   	push   eax
c0014d0e:	53                   	push   ebx
c0014d0f:	e8 4a 6f ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014d14:	83 c4 0c             	add    esp,0xc
c0014d17:	6a 20                	push   0x20
c0014d19:	6a 00                	push   0x0
c0014d1b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d1f:	52                   	push   edx
c0014d20:	e8 cb b7 fe ff       	call   c00004f0 <memset>
c0014d25:	58                   	pop    eax
c0014d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d28:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d2c:	51                   	push   ecx
c0014d2d:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d31:	52                   	push   edx
c0014d32:	6a 00                	push   0x0
c0014d34:	6a 1f                	push   0x1f
c0014d36:	53                   	push   ebx
c0014d37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d3a:	83 c4 18             	add    esp,0x18
c0014d3d:	68 ad 27 02 c0       	push   0xc00227ad
c0014d42:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d46:	52                   	push   edx
c0014d47:	e8 04 ba fe ff       	call   c0000750 <strcmp>
c0014d4c:	83 c4 10             	add    esp,0x10
c0014d4f:	85 c0                	test   eax,eax
c0014d51:	75 0f                	jne    c0014d62 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d62:	50                   	push   eax
c0014d63:	50                   	push   eax
c0014d64:	68 b5 27 02 c0       	push   0xc00227b5
c0014d69:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d6d:	50                   	push   eax
c0014d6e:	e8 dd b9 fe ff       	call   c0000750 <strcmp>
c0014d73:	83 c4 10             	add    esp,0x10
c0014d76:	85 c0                	test   eax,eax
c0014d78:	75 0f                	jne    c0014d89 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d7a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d7d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d89:	45                   	inc    ebp
c0014d8a:	e9 4c ff ff ff       	jmp    c0014cdb <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d94:	75 10                	jne    c0014da6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d96:	83 ec 0c             	sub    esp,0xc
c0014d99:	68 bd 27 02 c0       	push   0xc00227bd
c0014d9e:	e8 b0 c8 ff ff       	call   c0011653 <KePanic(char const*)>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dab:	75 10                	jne    c0014dbd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014dad:	83 ec 0c             	sub    esp,0xc
c0014db0:	68 bd 27 02 c0       	push   0xc00227bd
c0014db5:	e8 99 c8 ff ff       	call   c0011653 <KePanic(char const*)>
c0014dba:	83 c4 10             	add    esp,0x10
c0014dbd:	31 d2                	xor    edx,edx
c0014dbf:	50                   	push   eax
c0014dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc4:	52                   	push   edx
c0014dc5:	50                   	push   eax
c0014dc6:	53                   	push   ebx
c0014dc7:	e8 92 6e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014dcc:	5a                   	pop    edx
c0014dcd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dd1:	e8 e0 2c ff ff       	call   c0007ab6 <malloc>
c0014dd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014dda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014dde:	31 c9                	xor    ecx,ecx
c0014de0:	5e                   	pop    esi
c0014de1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014de7:	55                   	push   ebp
c0014de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dec:	51                   	push   ecx
c0014ded:	52                   	push   edx
c0014dee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014df2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014df6:	53                   	push   ebx
c0014df7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dfa:	83 c4 14             	add    esp,0x14
c0014dfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014e01:	e8 b0 2c ff ff       	call   c0007ab6 <malloc>
c0014e06:	89 c6                	mov    esi,eax
c0014e08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e0d:	56                   	push   esi
c0014e0e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014e12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014e16:	51                   	push   ecx
c0014e17:	52                   	push   edx
c0014e18:	53                   	push   ebx
c0014e19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e20:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014e26:	83 c4 1c             	add    esp,0x1c
c0014e29:	c1 e8 04             	shr    eax,0x4
c0014e2c:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e37:	31 d2                	xor    edx,edx
c0014e39:	52                   	push   edx
c0014e3a:	50                   	push   eax
c0014e3b:	53                   	push   ebx
c0014e3c:	e8 1d 6e ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014e41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e43:	31 d2                	xor    edx,edx
c0014e45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e48:	56                   	push   esi
c0014e49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e4d:	52                   	push   edx
c0014e4e:	50                   	push   eax
c0014e4f:	53                   	push   ebx
c0014e50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e53:	83 c4 14             	add    esp,0x14
c0014e56:	53                   	push   ebx
c0014e57:	e8 a2 6d ff ff       	call   c000bbfe <File::close()>
c0014e5c:	5d                   	pop    ebp
c0014e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e61:	e8 60 2c ff ff       	call   c0007ac6 <free>
c0014e66:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e69:	e8 58 2c ff ff       	call   c0007ac6 <free>
c0014e6e:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e77:	8d 50 01             	lea    edx,[eax+0x1]
c0014e7a:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e81:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e88:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	b0 01                	mov    al,0x1
c0014e93:	83 c4 5c             	add    esp,0x5c
c0014e96:	5b                   	pop    ebx
c0014e97:	5e                   	pop    esi
c0014e98:	5f                   	pop    edi
c0014e99:	5d                   	pop    ebp
c0014e9a:	c3                   	ret    

c0014e9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e9b:	55                   	push   ebp
c0014e9c:	57                   	push   edi
c0014e9d:	56                   	push   esi
c0014e9e:	53                   	push   ebx
c0014e9f:	81 ec 68 03 00 00    	sub    esp,0x368
c0014ea5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014eac:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014eb2:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014eb6:	68 14 01 00 00       	push   0x114
c0014ebb:	e8 f6 2b ff ff       	call   c0007ab6 <malloc>
c0014ec0:	83 c4 0c             	add    esp,0xc
c0014ec3:	89 c5                	mov    ebp,eax
c0014ec5:	53                   	push   ebx
c0014ec6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ecd:	50                   	push   eax
c0014ece:	e8 af 6c ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0014ed3:	5e                   	pop    esi
c0014ed4:	5f                   	pop    edi
c0014ed5:	6a 01                	push   0x1
c0014ed7:	55                   	push   ebp
c0014ed8:	e8 c3 6c ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0014edd:	83 c4 10             	add    esp,0x10
c0014ee0:	85 c0                	test   eax,eax
c0014ee2:	0f 85 aa 06 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ee8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ef0:	83 ec 0c             	sub    esp,0xc
c0014ef3:	6a 34                	push   0x34
c0014ef5:	e8 bc 2b ff ff       	call   c0007ab6 <malloc>
c0014efa:	5b                   	pop    ebx
c0014efb:	89 c7                	mov    edi,eax
c0014efd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f04:	53                   	push   ebx
c0014f05:	57                   	push   edi
c0014f06:	6a 00                	push   0x0
c0014f08:	6a 34                	push   0x34
c0014f0a:	55                   	push   ebp
c0014f0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f0e:	83 c4 20             	add    esp,0x20
c0014f11:	85 c0                	test   eax,eax
c0014f13:	0f 85 79 06 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f19:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014f1f:	0f 85 6d 06 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f25:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f28:	85 c0                	test   eax,eax
c0014f2a:	0f 84 62 06 00 00    	je     c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f30:	31 d2                	xor    edx,edx
c0014f32:	51                   	push   ecx
c0014f33:	52                   	push   edx
c0014f34:	50                   	push   eax
c0014f35:	55                   	push   ebp
c0014f36:	e8 23 6d ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014f3b:	83 c4 10             	add    esp,0x10
c0014f3e:	85 c0                	test   eax,eax
c0014f40:	0f 85 4c 06 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f46:	83 ec 0c             	sub    esp,0xc
c0014f49:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f4c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f50:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f54:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f58:	0f af c2             	imul   eax,edx
c0014f5b:	50                   	push   eax
c0014f5c:	e8 55 2b ff ff       	call   c0007ab6 <malloc>
c0014f61:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f6f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f77:	0f af c2             	imul   eax,edx
c0014f7a:	99                   	cdq    
c0014f7b:	52                   	push   edx
c0014f7c:	50                   	push   eax
c0014f7d:	55                   	push   ebp
c0014f7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f81:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f84:	83 c4 20             	add    esp,0x20
c0014f87:	85 c0                	test   eax,eax
c0014f89:	0f 84 03 06 00 00    	je     c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f8f:	52                   	push   edx
c0014f90:	31 d2                	xor    edx,edx
c0014f92:	52                   	push   edx
c0014f93:	50                   	push   eax
c0014f94:	55                   	push   ebp
c0014f95:	e8 c4 6c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0014f9a:	83 c4 10             	add    esp,0x10
c0014f9d:	85 c0                	test   eax,eax
c0014f9f:	0f 85 ed 05 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fa5:	83 ec 0c             	sub    esp,0xc
c0014fa8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014fac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fb0:	31 f6                	xor    esi,esi
c0014fb2:	0f af c2             	imul   eax,edx
c0014fb5:	50                   	push   eax
c0014fb6:	e8 fb 2a ff ff       	call   c0007ab6 <malloc>
c0014fbb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014fbe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014fc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fc9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014fcd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fd1:	0f af c2             	imul   eax,edx
c0014fd4:	99                   	cdq    
c0014fd5:	52                   	push   edx
c0014fd6:	50                   	push   eax
c0014fd7:	55                   	push   ebp
c0014fd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fdb:	83 c4 20             	add    esp,0x20
c0014fde:	0f b7 de             	movzx  ebx,si
c0014fe1:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014fe5:	0f 83 87 00 00 00    	jae    c0015072 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014feb:	c1 e3 05             	shl    ebx,0x5
c0014fee:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014ff2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014ff5:	75 75                	jne    c001506c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014ff7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014ffa:	31 d2                	xor    edx,edx
c0014ffc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015000:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015007:	50                   	push   eax
c0015008:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001500b:	52                   	push   edx
c001500c:	50                   	push   eax
c001500d:	55                   	push   ebp
c001500e:	e8 4b 6c ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0015013:	83 c4 10             	add    esp,0x10
c0015016:	85 c0                	test   eax,eax
c0015018:	0f 85 74 05 00 00    	jne    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001501e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015025:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015028:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001502c:	31 d2                	xor    edx,edx
c001502e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015032:	83 ec 0c             	sub    esp,0xc
c0015035:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015039:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015040:	50                   	push   eax
c0015041:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015049:	52                   	push   edx
c001504a:	50                   	push   eax
c001504b:	55                   	push   ebp
c001504c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001504f:	83 c4 1c             	add    esp,0x1c
c0015052:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015055:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015058:	50                   	push   eax
c0015059:	6a 00                	push   0x0
c001505b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001505f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015063:	50                   	push   eax
c0015064:	e8 87 b4 fe ff       	call   c00004f0 <memset>
c0015069:	83 c4 10             	add    esp,0x10
c001506c:	46                   	inc    esi
c001506d:	e9 6c ff ff ff       	jmp    c0014fde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015072:	53                   	push   ebx
c0015073:	31 db                	xor    ebx,ebx
c0015075:	68 00 01 00 00       	push   0x100
c001507a:	6a 00                	push   0x0
c001507c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015080:	50                   	push   eax
c0015081:	e8 6a b4 fe ff       	call   c00004f0 <memset>
c0015086:	83 c4 0c             	add    esp,0xc
c0015089:	68 00 01 00 00       	push   0x100
c001508e:	6a 00                	push   0x0
c0015090:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015097:	50                   	push   eax
c0015098:	e8 53 b4 fe ff       	call   c00004f0 <memset>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00150a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00150b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00150b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00150c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150c8:	0f b7 f3             	movzx  esi,bx
c00150cb:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00150cf:	0f 83 2d 01 00 00    	jae    c0015202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00150d5:	6b f6 28             	imul   esi,esi,0x28
c00150d8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00150dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150e3:	52                   	push   edx
c00150e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150e8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00150ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00150ee:	6b d2 28             	imul   edx,edx,0x28
c00150f1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150f5:	31 d2                	xor    edx,edx
c00150f7:	52                   	push   edx
c00150f8:	50                   	push   eax
c00150f9:	55                   	push   ebp
c00150fa:	e8 5f 6b ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c00150ff:	83 c4 0c             	add    esp,0xc
c0015102:	6a 20                	push   0x20
c0015104:	6a 00                	push   0x0
c0015106:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001510d:	51                   	push   ecx
c001510e:	e8 dd b3 fe ff       	call   c00004f0 <memset>
c0015113:	59                   	pop    ecx
c0015114:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015117:	8d 54 24 58          	lea    edx,[esp+0x58]
c001511b:	52                   	push   edx
c001511c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015123:	51                   	push   ecx
c0015124:	6a 00                	push   0x0
c0015126:	6a 1f                	push   0x1f
c0015128:	55                   	push   ebp
c0015129:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001512c:	83 c4 1c             	add    esp,0x1c
c001512f:	6a 09                	push   0x9
c0015131:	68 d7 27 02 c0       	push   0xc00227d7
c0015136:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001513d:	51                   	push   ecx
c001513e:	e8 3d b2 fe ff       	call   c0000380 <memcmp>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	85 c0                	test   eax,eax
c0015148:	75 21                	jne    c001516b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001514a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001514e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015152:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001515a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001515d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015164:	89 d0                	mov    eax,edx
c0015166:	40                   	inc    eax
c0015167:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001516b:	50                   	push   eax
c001516c:	6a 09                	push   0x9
c001516e:	68 e1 27 02 c0       	push   0xc00227e1
c0015173:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001517a:	50                   	push   eax
c001517b:	e8 00 b2 fe ff       	call   c0000380 <memcmp>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	85 c0                	test   eax,eax
c0015185:	75 21                	jne    c00151a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015187:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001518b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001518f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015193:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015197:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001519a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00151a1:	89 d0                	mov    eax,edx
c00151a3:	40                   	inc    eax
c00151a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151a8:	50                   	push   eax
c00151a9:	50                   	push   eax
c00151aa:	68 ad 27 02 c0       	push   0xc00227ad
c00151af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151b6:	50                   	push   eax
c00151b7:	e8 94 b5 fe ff       	call   c0000750 <strcmp>
c00151bc:	83 c4 10             	add    esp,0x10
c00151bf:	85 c0                	test   eax,eax
c00151c1:	75 0f                	jne    c00151d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00151c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00151ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151d2:	50                   	push   eax
c00151d3:	50                   	push   eax
c00151d4:	68 b5 27 02 c0       	push   0xc00227b5
c00151d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151e0:	50                   	push   eax
c00151e1:	e8 6a b5 fe ff       	call   c0000750 <strcmp>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	85 c0                	test   eax,eax
c00151eb:	75 0f                	jne    c00151fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00151ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151fc:	43                   	inc    ebx
c00151fd:	e9 c6 fe ff ff       	jmp    c00150c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015202:	31 d2                	xor    edx,edx
c0015204:	50                   	push   eax
c0015205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015209:	52                   	push   edx
c001520a:	50                   	push   eax
c001520b:	55                   	push   ebp
c001520c:	e8 4d 6a ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0015211:	58                   	pop    eax
c0015212:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015216:	e8 9b 28 ff ff       	call   c0007ab6 <malloc>
c001521b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001521e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015222:	31 d2                	xor    edx,edx
c0015224:	58                   	pop    eax
c0015225:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015229:	53                   	push   ebx
c001522a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001522e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015232:	52                   	push   edx
c0015233:	50                   	push   eax
c0015234:	55                   	push   ebp
c0015235:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015238:	83 c4 14             	add    esp,0x14
c001523b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001523f:	e8 72 28 ff ff       	call   c0007ab6 <malloc>
c0015244:	31 d2                	xor    edx,edx
c0015246:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001524a:	83 c4 0c             	add    esp,0xc
c001524d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015251:	52                   	push   edx
c0015252:	50                   	push   eax
c0015253:	55                   	push   ebp
c0015254:	e8 05 6a ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c0015259:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001525c:	31 d2                	xor    edx,edx
c001525e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015269:	52                   	push   edx
c001526a:	50                   	push   eax
c001526b:	55                   	push   ebp
c001526c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001526f:	83 c4 20             	add    esp,0x20
c0015272:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015277:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001527f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015283:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015287:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001528b:	0f 84 05 03 00 00    	je     c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015291:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015298:	31 d2                	xor    edx,edx
c001529a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001529e:	c1 e8 03             	shr    eax,0x3
c00152a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00152a5:	51                   	push   ecx
c00152a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152aa:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00152ae:	52                   	push   edx
c00152af:	50                   	push   eax
c00152b0:	55                   	push   ebp
c00152b1:	e8 a8 69 ff ff       	call   c000bc5e <File::seek(unsigned long long)>
c00152b6:	5b                   	pop    ebx
c00152b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152bb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00152c2:	e8 ef 27 ff ff       	call   c0007ab6 <malloc>
c00152c7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152ce:	31 d2                	xor    edx,edx
c00152d0:	5e                   	pop    esi
c00152d1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152d5:	50                   	push   eax
c00152d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152de:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152e5:	52                   	push   edx
c00152e6:	50                   	push   eax
c00152e7:	55                   	push   ebp
c00152e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152eb:	83 c4 20             	add    esp,0x20
c00152ee:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152f6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00152fa:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00152fe:	0f 8d 76 02 00 00    	jge    c001557a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015304:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001530c:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015311:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015314:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015318:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001531c:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015320:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015324:	c1 e8 08             	shr    eax,0x8
c0015327:	89 c6                	mov    esi,eax
c0015329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001532d:	c1 e6 04             	shl    esi,0x4
c0015330:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015334:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015337:	85 db                	test   ebx,ebx
c0015339:	0f 85 b3 00 00 00    	jne    c00153f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015346:	03 06                	add    eax,DWORD PTR [esi]
c0015348:	50                   	push   eax
c0015349:	e8 40 f8 ff ff       	call   c0014b8e <Thr::getAddressOfKernelSymbol(char const*)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	89 c3                	mov    ebx,eax
c0015353:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015358:	85 c0                	test   eax,eax
c001535a:	0f 85 92 00 00 00    	jne    c00153f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015360:	83 ec 0c             	sub    esp,0xc
c0015363:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015367:	03 06                	add    eax,DWORD PTR [esi]
c0015369:	50                   	push   eax
c001536a:	e8 d1 c4 ff ff       	call   c0011840 <KeResolveCompatibilitySymbol(char*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	89 c3                	mov    ebx,eax
c0015374:	85 c0                	test   eax,eax
c0015376:	75 7a                	jne    c00153f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015378:	51                   	push   ecx
c0015379:	51                   	push   ecx
c001537a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001537e:	03 06                	add    eax,DWORD PTR [esi]
c0015380:	50                   	push   eax
c0015381:	68 eb 27 02 c0       	push   0xc00227eb
c0015386:	e8 ba 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001538b:	58                   	pop    eax
c001538c:	5a                   	pop    edx
c001538d:	68 05 28 02 c0       	push   0xc0022805
c0015392:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015399:	50                   	push   eax
c001539a:	e8 a1 b2 fe ff       	call   c0000640 <strcpy>
c001539f:	59                   	pop    ecx
c00153a0:	58                   	pop    eax
c00153a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00153a5:	03 06                	add    eax,DWORD PTR [esi]
c00153a7:	50                   	push   eax
c00153a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153af:	50                   	push   eax
c00153b0:	e8 8b b4 fe ff       	call   c0000840 <strcat>
c00153b5:	58                   	pop    eax
c00153b6:	5a                   	pop    edx
c00153b7:	68 9b 28 02 c0       	push   0xc002289b
c00153bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153c3:	50                   	push   eax
c00153c4:	e8 77 b4 fe ff       	call   c0000840 <strcat>
c00153c9:	83 c4 10             	add    esp,0x10
c00153cc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00153d1:	0f 84 5d 01 00 00    	je     c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153e1:	50                   	push   eax
c00153e2:	e8 6c c2 ff ff       	call   c0011653 <KePanic(char const*)>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00153ee:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00153f2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00153f7:	83 f8 01             	cmp    eax,0x1
c00153fa:	0f 85 8f 00 00 00    	jne    c001548f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015400:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015407:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001540b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001540f:	01 ce                	add    esi,ecx
c0015411:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015419:	0f 94 c0             	sete   al
c001541c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015424:	0f 94 c2             	sete   dl
c0015427:	09 c2                	or     edx,eax
c0015429:	8b 06                	mov    eax,DWORD PTR [esi]
c001542b:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015430:	0f b6 d2             	movzx  edx,dl
c0015433:	74 41                	je     c0015476 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015435:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015438:	85 d2                	test   edx,edx
c001543a:	75 15                	jne    c0015451 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001543c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015440:	66 83 f8 0c          	cmp    ax,0xc
c0015444:	76 05                	jbe    c001544b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015446:	b8 0c 00 00 00       	mov    eax,0xc
c001544b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001544f:	76 37                	jbe    c0015488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015451:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015455:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001545a:	0f 84 d4 00 00 00    	je     c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	68 1c 28 02 c0       	push   0xc002281c
c0015468:	e8 e6 c1 ff ff       	call   c0011653 <KePanic(char const*)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015474:	eb 12                	jmp    c0015488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015476:	01 c1                	add    ecx,eax
c0015478:	85 d2                	test   edx,edx
c001547a:	75 0c                	jne    c0015488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001547c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015480:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015484:	77 02                	ja     c0015488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015486:	01 d9                	add    ecx,ebx
c0015488:	89 0e                	mov    DWORD PTR [esi],ecx
c001548a:	e9 e2 00 00 00       	jmp    c0015571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001548f:	83 f8 02             	cmp    eax,0x2
c0015492:	75 77                	jne    c001550b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015494:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001549b:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001549f:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00154a3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154ab:	74 21                	je     c00154ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00154ad:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00154b5:	74 17                	je     c00154ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00154b7:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00154bb:	b8 0a 00 00 00       	mov    eax,0xa
c00154c0:	83 fa 0e             	cmp    edx,0xe
c00154c3:	77 03                	ja     c00154c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00154c5:	8d 42 fc             	lea    eax,[edx-0x4]
c00154c8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154cc:	76 17                	jbe    c00154e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00154ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154d3:	74 5f                	je     c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154d5:	83 ec 0c             	sub    esp,0xc
c00154d8:	68 38 28 02 c0       	push   0xc0022838
c00154dd:	e8 71 c1 ff ff       	call   c0011653 <KePanic(char const*)>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00154e7:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154ec:	74 13                	je     c0015501 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00154ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154f2:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00154f9:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00154fd:	01 d0                	add    eax,edx
c00154ff:	eb 04                	jmp    c0015505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015501:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015505:	01 c3                	add    ebx,eax
c0015507:	89 1e                	mov    DWORD PTR [esi],ebx
c0015509:	eb 66                	jmp    c0015571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001550b:	52                   	push   edx
c001550c:	52                   	push   edx
c001550d:	50                   	push   eax
c001550e:	68 54 28 02 c0       	push   0xc0022854
c0015513:	e8 2d 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015520:	74 12                	je     c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015522:	83 ec 0c             	sub    esp,0xc
c0015525:	68 5f 28 02 c0       	push   0xc002285f
c001552a:	e8 24 c1 ff ff       	call   c0011653 <KePanic(char const*)>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	eb 3d                	jmp    c0015571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	55                   	push   ebp
c0015538:	e8 c1 66 ff ff       	call   c000bbfe <File::close()>
c001553d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015540:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015543:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015546:	59                   	pop    ecx
c0015547:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001554b:	e8 76 25 ff ff       	call   c0007ac6 <free>
c0015550:	5b                   	pop    ebx
c0015551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015555:	e8 6c 25 ff ff       	call   c0007ac6 <free>
c001555a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001555d:	e8 64 25 ff ff       	call   c0007ac6 <free>
c0015562:	5e                   	pop    esi
c0015563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015567:	e8 5a 25 ff ff       	call   c0007ac6 <free>
c001556c:	83 c4 10             	add    esp,0x10
c001556f:	eb 21                	jmp    c0015592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015571:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015575:	e9 7c fd ff ff       	jmp    c00152f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001557a:	83 ec 0c             	sub    esp,0xc
c001557d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015581:	e8 40 25 ff ff       	call   c0007ac6 <free>
c0015586:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	e9 f1 fc ff ff       	jmp    c0015283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015592:	31 c0                	xor    eax,eax
c0015594:	eb 33                	jmp    c00155c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015596:	83 ec 0c             	sub    esp,0xc
c0015599:	55                   	push   ebp
c001559a:	e8 5f 66 ff ff       	call   c000bbfe <File::close()>
c001559f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155a8:	58                   	pop    eax
c00155a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155ad:	e8 14 25 ff ff       	call   c0007ac6 <free>
c00155b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155b5:	e8 0c 25 ff ff       	call   c0007ac6 <free>
c00155ba:	5a                   	pop    edx
c00155bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155bf:	e8 02 25 ff ff       	call   c0007ac6 <free>
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	b0 01                	mov    al,0x1
c00155c9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00155cf:	5b                   	pop    ebx
c00155d0:	5e                   	pop    esi
c00155d1:	5f                   	pop    edi
c00155d2:	5d                   	pop    ebp
c00155d3:	c3                   	ret    

c00155d4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155d4:	56                   	push   esi
c00155d5:	31 d2                	xor    edx,edx
c00155d7:	53                   	push   ebx
c00155d8:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155e2:	39 d3                	cmp    ebx,edx
c00155e4:	7e 1b                	jle    c0015601 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155e6:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155ed:	39 c8                	cmp    eax,ecx
c00155ef:	77 0d                	ja     c00155fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155f1:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155f8:	01 c6                	add    esi,eax
c00155fa:	39 ce                	cmp    esi,ecx
c00155fc:	77 05                	ja     c0015603 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155fe:	42                   	inc    edx
c00155ff:	eb e1                	jmp    c00155e2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015601:	31 c0                	xor    eax,eax
c0015603:	5b                   	pop    ebx
c0015604:	5e                   	pop    esi
c0015605:	c3                   	ret    

c0015606 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015606:	53                   	push   ebx
c0015607:	31 c0                	xor    eax,eax
c0015609:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001560d:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015613:	39 c3                	cmp    ebx,eax
c0015615:	7e 22                	jle    c0015639 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015617:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001561e:	39 ca                	cmp    edx,ecx
c0015620:	77 14                	ja     c0015636 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015622:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015629:	39 ca                	cmp    edx,ecx
c001562b:	76 09                	jbe    c0015636 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001562d:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015634:	eb 05                	jmp    c001563b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015636:	40                   	inc    eax
c0015637:	eb da                	jmp    c0015613 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015639:	31 c0                	xor    eax,eax
c001563b:	5b                   	pop    ebx
c001563c:	c3                   	ret    

c001563d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001563d:	53                   	push   ebx
c001563e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015642:	53                   	push   ebx
c0015643:	e8 8c ff ff ff       	call   c00155d4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015648:	5a                   	pop    edx
c0015649:	31 d2                	xor    edx,edx
c001564b:	85 c0                	test   eax,eax
c001564d:	74 04                	je     c0015653 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001564f:	89 da                	mov    edx,ebx
c0015651:	29 c2                	sub    edx,eax
c0015653:	89 d0                	mov    eax,edx
c0015655:	5b                   	pop    ebx
c0015656:	c3                   	ret    

c0015657 <Thr::loadDLL(char const*, bool)>:
c0015657:	55                   	push   ebp
c0015658:	57                   	push   edi
c0015659:	56                   	push   esi
c001565a:	53                   	push   ebx
c001565b:	81 ec 34 01 00 00    	sub    esp,0x134
c0015661:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015668:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001566f:	56                   	push   esi
c0015670:	68 77 28 02 c0       	push   0xc0022877
c0015675:	e8 cb 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001567a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015681:	e8 30 24 ff ff       	call   c0007ab6 <malloc>
c0015686:	83 c4 0c             	add    esp,0xc
c0015689:	89 c3                	mov    ebx,eax
c001568b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015691:	56                   	push   esi
c0015692:	50                   	push   eax
c0015693:	e8 ea 64 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0015698:	83 c4 10             	add    esp,0x10
c001569b:	85 db                	test   ebx,ebx
c001569d:	75 3c                	jne    c00156db <Thr::loadDLL(char const*, bool)+0x84>
c001569f:	89 f8                	mov    eax,edi
c00156a1:	84 c0                	test   al,al
c00156a3:	0f 84 d2 01 00 00    	je     c001587b <Thr::loadDLL(char const*, bool)+0x224>
c00156a9:	55                   	push   ebp
c00156aa:	55                   	push   ebp
c00156ab:	68 88 28 02 c0       	push   0xc0022888
c00156b0:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00156b4:	55                   	push   ebp
c00156b5:	e8 86 af fe ff       	call   c0000640 <strcpy>
c00156ba:	58                   	pop    eax
c00156bb:	5a                   	pop    edx
c00156bc:	56                   	push   esi
c00156bd:	55                   	push   ebp
c00156be:	e8 7d b1 fe ff       	call   c0000840 <strcat>
c00156c3:	59                   	pop    ecx
c00156c4:	58                   	pop    eax
c00156c5:	68 9b 28 02 c0       	push   0xc002289b
c00156ca:	55                   	push   ebp
c00156cb:	e8 70 b1 fe ff       	call   c0000840 <strcat>
c00156d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156d3:	e8 7b bf ff ff       	call   c0011653 <KePanic(char const*)>
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	51                   	push   ecx
c00156dc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156e0:	50                   	push   eax
c00156e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156e5:	50                   	push   eax
c00156e6:	53                   	push   ebx
c00156e7:	e8 b6 67 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c00156ec:	83 c4 10             	add    esp,0x10
c00156ef:	85 db                	test   ebx,ebx
c00156f1:	74 0c                	je     c00156ff <Thr::loadDLL(char const*, bool)+0xa8>
c00156f3:	83 ec 0c             	sub    esp,0xc
c00156f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156f8:	53                   	push   ebx
c00156f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015704:	75 0a                	jne    c0015710 <Thr::loadDLL(char const*, bool)+0xb9>
c0015706:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001570a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001570e:	75 3c                	jne    c001574c <Thr::loadDLL(char const*, bool)+0xf5>
c0015710:	89 f8                	mov    eax,edi
c0015712:	84 c0                	test   al,al
c0015714:	0f 84 49 01 00 00    	je     c0015863 <Thr::loadDLL(char const*, bool)+0x20c>
c001571a:	51                   	push   ecx
c001571b:	51                   	push   ecx
c001571c:	68 88 28 02 c0       	push   0xc0022888
c0015721:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015725:	53                   	push   ebx
c0015726:	e8 15 af fe ff       	call   c0000640 <strcpy>
c001572b:	5d                   	pop    ebp
c001572c:	58                   	pop    eax
c001572d:	56                   	push   esi
c001572e:	53                   	push   ebx
c001572f:	e8 0c b1 fe ff       	call   c0000840 <strcat>
c0015734:	58                   	pop    eax
c0015735:	5a                   	pop    edx
c0015736:	68 9b 28 02 c0       	push   0xc002289b
c001573b:	53                   	push   ebx
c001573c:	e8 ff b0 fe ff       	call   c0000840 <strcat>
c0015741:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015744:	e8 0a bf ff ff       	call   c0011653 <KePanic(char const*)>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	52                   	push   edx
c001574d:	6a 03                	push   0x3
c001574f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015753:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015757:	05 ff 0f 00 00       	add    eax,0xfff
c001575c:	83 d2 00             	adc    edx,0x0
c001575f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015763:	50                   	push   eax
c0015764:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001576a:	e8 b5 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001576f:	59                   	pop    ecx
c0015770:	89 c3                	mov    ebx,eax
c0015772:	5d                   	pop    ebp
c0015773:	50                   	push   eax
c0015774:	68 b2 0d 02 c0       	push   0xc0020db2
c0015779:	e8 c7 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001577e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015781:	e8 ea ad fe ff       	call   c0000570 <strlen>
c0015786:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c001578c:	40                   	inc    eax
c001578d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015790:	e8 21 23 ff ff       	call   c0007ab6 <malloc>
c0015795:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c001579c:	58                   	pop    eax
c001579d:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157a2:	5a                   	pop    edx
c00157a3:	56                   	push   esi
c00157a4:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00157ab:	e8 90 ae fe ff       	call   c0000640 <strcpy>
c00157b0:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00157b5:	8d 50 01             	lea    edx,[eax+0x1]
c00157b8:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00157bf:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00157c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157c9:	83 c4 0c             	add    esp,0xc
c00157cc:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157d3:	6a 01                	push   0x1
c00157d5:	53                   	push   ebx
c00157d6:	56                   	push   esi
c00157d7:	e8 bf f6 ff ff       	call   c0014e9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	0f b6 c0             	movzx  eax,al
c00157e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157e6:	85 c0                	test   eax,eax
c00157e8:	0f 85 89 00 00 00    	jne    c0015877 <Thr::loadDLL(char const*, bool)+0x220>
c00157ee:	89 f8                	mov    eax,edi
c00157f0:	84 c0                	test   al,al
c00157f2:	74 73                	je     c0015867 <Thr::loadDLL(char const*, bool)+0x210>
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	68 9d 28 02 c0       	push   0xc002289d
c00157fc:	e8 52 be ff ff       	call   c0011653 <KePanic(char const*)>
c0015801:	83 c4 10             	add    esp,0x10
c0015804:	eb 61                	jmp    c0015867 <Thr::loadDLL(char const*, bool)+0x210>
c0015806:	50                   	push   eax
c0015807:	50                   	push   eax
c0015808:	89 e8                	mov    eax,ebp
c001580a:	c1 e0 0c             	shl    eax,0xc
c001580d:	01 d8                	add    eax,ebx
c001580f:	50                   	push   eax
c0015810:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015816:	e8 f1 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001581b:	83 c4 10             	add    esp,0x10
c001581e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015820:	a8 60                	test   al,0x60
c0015822:	75 11                	jne    c0015835 <Thr::loadDLL(char const*, bool)+0x1de>
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	25 00 f0 ff ff       	and    eax,0xfffff000
c001582c:	50                   	push   eax
c001582d:	e8 24 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	45                   	inc    ebp
c0015836:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001583a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001583e:	05 ff 0f 00 00       	add    eax,0xfff
c0015843:	bf 00 00 00 00       	mov    edi,0x0
c0015848:	83 d2 00             	adc    edx,0x0
c001584b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001584f:	c1 ea 0c             	shr    edx,0xc
c0015852:	39 c5                	cmp    ebp,eax
c0015854:	89 d1                	mov    ecx,edx
c0015856:	89 f8                	mov    eax,edi
c0015858:	19 c8                	sbb    eax,ecx
c001585a:	72 aa                	jb     c0015806 <Thr::loadDLL(char const*, bool)+0x1af>
c001585c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015861:	75 18                	jne    c001587b <Thr::loadDLL(char const*, bool)+0x224>
c0015863:	31 db                	xor    ebx,ebx
c0015865:	eb 14                	jmp    c001587b <Thr::loadDLL(char const*, bool)+0x224>
c0015867:	83 ec 0c             	sub    esp,0xc
c001586a:	68 bc 28 02 c0       	push   0xc00228bc
c001586f:	e8 df bd ff ff       	call   c0011653 <KePanic(char const*)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	31 ed                	xor    ebp,ebp
c0015879:	eb bb                	jmp    c0015836 <Thr::loadDLL(char const*, bool)+0x1df>
c001587b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015881:	89 d8                	mov    eax,ebx
c0015883:	5b                   	pop    ebx
c0015884:	5e                   	pop    esi
c0015885:	5f                   	pop    edi
c0015886:	5d                   	pop    ebp
c0015887:	c3                   	ret    

c0015888 <Thr::executeDLL(unsigned long, void*)>:
c0015888:	56                   	push   esi
c0015889:	53                   	push   ebx
c001588a:	52                   	push   edx
c001588b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001588f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015893:	85 db                	test   ebx,ebx
c0015895:	75 10                	jne    c00158a7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015897:	83 ec 0c             	sub    esp,0xc
c001589a:	68 d8 28 02 c0       	push   0xc00228d8
c001589f:	e8 af bd ff ff       	call   c0011653 <KePanic(char const*)>
c00158a4:	83 c4 10             	add    esp,0x10
c00158a7:	50                   	push   eax
c00158a8:	50                   	push   eax
c00158a9:	53                   	push   ebx
c00158aa:	68 02 29 02 c0       	push   0xc0022902
c00158af:	e8 91 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00158b4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00158b8:	89 d8                	mov    eax,ebx
c00158ba:	83 c4 14             	add    esp,0x14
c00158bd:	5b                   	pop    ebx
c00158be:	5e                   	pop    esi
c00158bf:	ff e0                	jmp    eax
c00158c1:	66 90                	xchg   ax,ax
c00158c3:	90                   	nop

c00158c4 <userModeEntryPoint(void*)>:
c00158c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00158c9:	83 e8 01             	sub    eax,0x1
c00158cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158d1:	75 01                	jne    c00158d4 <userModeEntryPoint(void*)+0x10>
c00158d3:	fb                   	sti    
c00158d4:	fb                   	sti    
c00158d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158dd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158e7:	e9 53 a9 fe ff       	jmp    c000023f <goToUsermode>

c00158ec <changeTSS>:
c00158ec:	83 ec 14             	sub    esp,0x14
c00158ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158f7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158fc:	c1 e2 15             	shl    edx,0x15
c00158ff:	29 d0                	sub    eax,edx
c0015901:	50                   	push   eax
c0015902:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015907:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001590d:	05 7c 11 00 00       	add    eax,0x117c
c0015912:	50                   	push   eax
c0015913:	e8 3c 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015918:	83 c4 1c             	add    esp,0x1c
c001591b:	c3                   	ret    

c001591c <switchToThread(ThreadControlBlock*)>:
c001591c:	57                   	push   edi
c001591d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015923:	56                   	push   esi
c0015924:	85 c9                	test   ecx,ecx
c0015926:	53                   	push   ebx
c0015927:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001592b:	0f 85 8b 00 00 00    	jne    c00159bc <switchToThread(ThreadControlBlock*)+0xa0>
c0015931:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015935:	81 fa ff 00 00 00    	cmp    edx,0xff
c001593b:	74 7b                	je     c00159b8 <switchToThread(ThreadControlBlock*)+0x9c>
c001593d:	b8 00 04 00 00       	mov    eax,0x400
c0015942:	29 d0                	sub    eax,edx
c0015944:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015947:	d1 f8                	sar    eax,1
c0015949:	01 d0                	add    eax,edx
c001594b:	90                   	nop
c001594c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001594f:	e8 1e 28 00 00       	call   c0018172 <HalQueryPerformanceCounter()>
c0015954:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015959:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c001595f:	89 c6                	mov    esi,eax
c0015961:	89 d7                	mov    edi,edx
c0015963:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015969:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c001596e:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015974:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c001597a:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015980:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015986:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c001598c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001598f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015992:	01 c6                	add    esi,eax
c0015994:	11 d7                	adc    edi,edx
c0015996:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015999:	83 ec 0c             	sub    esp,0xc
c001599c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001599f:	53                   	push   ebx
c00159a0:	e8 d2 a8 fe ff       	call   c0000277 <switchToThreadASM>
c00159a5:	0f 20 c0             	mov    eax,cr0
c00159a8:	83 c8 08             	or     eax,0x8
c00159ab:	0f 22 c0             	mov    cr0,eax
c00159ae:	83 c4 10             	add    esp,0x10
c00159b1:	5b                   	pop    ebx
c00159b2:	5e                   	pop    esi
c00159b3:	5f                   	pop    edi
c00159b4:	c3                   	ret    
c00159b5:	8d 76 00             	lea    esi,[esi+0x0]
c00159b8:	31 c0                	xor    eax,eax
c00159ba:	eb 90                	jmp    c001594c <switchToThread(ThreadControlBlock*)+0x30>
c00159bc:	5b                   	pop    ebx
c00159bd:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00159c7:	5e                   	pop    esi
c00159c8:	5f                   	pop    edi
c00159c9:	c3                   	ret    
c00159ca:	66 90                	xchg   ax,ax

c00159cc <Process::addArgs(char**)>:
c00159cc:	57                   	push   edi
c00159cd:	56                   	push   esi
c00159ce:	53                   	push   ebx
c00159cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00159d7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00159e1:	85 ff                	test   edi,edi
c00159e3:	74 4f                	je     c0015a34 <Process::addArgs(char**)+0x68>
c00159e5:	8b 07                	mov    eax,DWORD PTR [edi]
c00159e7:	85 c0                	test   eax,eax
c00159e9:	74 49                	je     c0015a34 <Process::addArgs(char**)+0x68>
c00159eb:	31 db                	xor    ebx,ebx
c00159ed:	8d 76 00             	lea    esi,[esi+0x0]
c00159f0:	83 ec 0c             	sub    esp,0xc
c00159f3:	50                   	push   eax
c00159f4:	e8 77 ab fe ff       	call   c0000570 <strlen>
c00159f9:	83 c0 01             	add    eax,0x1
c00159fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00159ff:	e8 b2 20 ff ff       	call   c0007ab6 <malloc>
c0015a04:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015a0b:	5a                   	pop    edx
c0015a0c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015a0f:	59                   	pop    ecx
c0015a10:	83 c3 01             	add    ebx,0x1
c0015a13:	52                   	push   edx
c0015a14:	50                   	push   eax
c0015a15:	e8 26 ac fe ff       	call   c0000640 <strcpy>
c0015a1a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	83 c1 01             	add    ecx,0x1
c0015a26:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015a2c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015a2f:	85 c0                	test   eax,eax
c0015a31:	75 bd                	jne    c00159f0 <Process::addArgs(char**)+0x24>
c0015a33:	90                   	nop
c0015a34:	5b                   	pop    ebx
c0015a35:	5e                   	pop    esi
c0015a36:	5f                   	pop    edi
c0015a37:	c3                   	ret    

c0015a38 <Process::Process(char const*, Process*, char**)>:
c0015a38:	56                   	push   esi
c0015a39:	53                   	push   ebx
c0015a3a:	83 ec 14             	sub    esp,0x14
c0015a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a41:	05 0c 02 00 00       	add    eax,0x20c
c0015a46:	bb 07 00 00 00       	mov    ebx,0x7
c0015a4b:	89 c6                	mov    esi,eax
c0015a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a50:	85 db                	test   ebx,ebx
c0015a52:	78 14                	js     c0015a68 <Process::Process(char const*, Process*, char**)+0x30>
c0015a54:	83 ec 0c             	sub    esp,0xc
c0015a57:	56                   	push   esi
c0015a58:	e8 eb a5 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	83 c6 5f             	add    esi,0x5f
c0015a63:	83 eb 01             	sub    ebx,0x1
c0015a66:	eb e8                	jmp    c0015a50 <Process::Process(char const*, Process*, char**)+0x18>
c0015a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a77:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a7e:	83 ec 0c             	sub    esp,0xc
c0015a81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a85:	e8 be b9 ff ff       	call   c0011448 <KeNewProcessEnv(Process*)>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	89 c2                	mov    edx,eax
c0015a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a93:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015aa6:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0015aab:	8d 50 01             	lea    edx,[eax+0x1]
c0015aae:	89 15 20 3f 02 c0    	mov    DWORD PTR ds:0xc0023f20,edx
c0015ab4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ab8:	89 02                	mov    DWORD PTR [edx],eax
c0015aba:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015ac2:	83 ec 0c             	sub    esp,0xc
c0015ac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ac9:	e8 e8 1f ff ff       	call   c0007ab6 <malloc>
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	89 c3                	mov    ebx,eax
c0015ad3:	83 ec 08             	sub    esp,0x8
c0015ad6:	6a 00                	push   0x0
c0015ad8:	53                   	push   ebx
c0015ad9:	e8 8a 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aef:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b01:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015b07:	e8 62 bf ff ff       	call   c0011a6e <KeInitSignals()>
c0015b0c:	89 c2                	mov    edx,eax
c0015b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b12:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b22:	85 c0                	test   eax,eax
c0015b24:	74 42                	je     c0015b68 <Process::Process(char const*, Process*, char**)+0x130>
c0015b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b30:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b44:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b4a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b54:	05 0c 01 00 00       	add    eax,0x10c
c0015b59:	83 ec 08             	sub    esp,0x8
c0015b5c:	52                   	push   edx
c0015b5d:	50                   	push   eax
c0015b5e:	e8 dd aa fe ff       	call   c0000640 <strcpy>
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	eb 64                	jmp    c0015bcc <Process::Process(char const*, Process*, char**)+0x194>
c0015b68:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b77:	e8 3a 1f ff ff       	call   c0007ab6 <malloc>
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	89 c3                	mov    ebx,eax
c0015b81:	83 ec 08             	sub    esp,0x8
c0015b84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b88:	53                   	push   ebx
c0015b89:	e8 d8 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b95:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b9f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	50                   	push   eax
c0015ba9:	e8 56 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb5:	05 0c 01 00 00       	add    eax,0x10c
c0015bba:	83 ec 08             	sub    esp,0x8
c0015bbd:	68 21 29 02 c0       	push   0xc0022921
c0015bc2:	50                   	push   eax
c0015bc3:	e8 78 aa fe ff       	call   c0000640 <strcpy>
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	90                   	nop
c0015bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd0:	83 c0 0c             	add    eax,0xc
c0015bd3:	83 ec 08             	sub    esp,0x8
c0015bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bda:	50                   	push   eax
c0015bdb:	e8 60 aa fe ff       	call   c0000640 <strcpy>
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	83 ec 08             	sub    esp,0x8
c0015be6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bee:	e8 d9 fd ff ff       	call   c00159cc <Process::addArgs(char**)>
c0015bf3:	83 c4 10             	add    esp,0x10
c0015bf6:	83 ec 08             	sub    esp,0x8
c0015bf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c01:	e8 63 ed ff ff       	call   c0014969 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015c0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c11:	83 f0 01             	xor    eax,0x1
c0015c14:	88 c2                	mov    dl,al
c0015c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015c20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015c25:	83 ec 04             	sub    esp,0x4
c0015c28:	50                   	push   eax
c0015c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2d:	68 78 29 02 c0       	push   0xc0022978
c0015c32:	e8 0e 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	90                   	nop
c0015c3b:	83 c4 14             	add    esp,0x14
c0015c3e:	5b                   	pop    ebx
c0015c3f:	5e                   	pop    esi
c0015c40:	c3                   	ret    
c0015c41:	90                   	nop
c0015c42:	66 90                	xchg   ax,ax

c0015c44 <Process::Process(bool, char const*, Process*, char**)>:
c0015c44:	56                   	push   esi
c0015c45:	53                   	push   ebx
c0015c46:	83 ec 24             	sub    esp,0x24
c0015c49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c4d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c55:	05 0c 02 00 00       	add    eax,0x20c
c0015c5a:	bb 07 00 00 00       	mov    ebx,0x7
c0015c5f:	89 c6                	mov    esi,eax
c0015c61:	8d 76 00             	lea    esi,[esi+0x0]
c0015c64:	85 db                	test   ebx,ebx
c0015c66:	78 14                	js     c0015c7c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c68:	83 ec 0c             	sub    esp,0xc
c0015c6b:	56                   	push   esi
c0015c6c:	e8 d7 a3 00 00       	call   c0020048 <ThreadControlBlock::ThreadControlBlock()>
c0015c71:	83 c4 10             	add    esp,0x10
c0015c74:	83 c6 5f             	add    esi,0x5f
c0015c77:	83 eb 01             	sub    ebx,0x1
c0015c7a:	eb e8                	jmp    c0015c64 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c80:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c8b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c92:	83 ec 0c             	sub    esp,0xc
c0015c95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c99:	e8 aa b7 ff ff       	call   c0011448 <KeNewProcessEnv(Process*)>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	89 c2                	mov    edx,eax
c0015ca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ca7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015cad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cb1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015cba:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0015cbf:	8d 50 01             	lea    edx,[eax+0x1]
c0015cc2:	89 15 20 3f 02 c0    	mov    DWORD PTR ds:0xc0023f20,edx
c0015cc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ccc:	89 02                	mov    DWORD PTR [edx],eax
c0015cce:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015cd6:	83 ec 0c             	sub    esp,0xc
c0015cd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015cdd:	e8 d4 1d ff ff       	call   c0007ab6 <malloc>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	89 c3                	mov    ebx,eax
c0015ce7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cec:	83 ec 08             	sub    esp,0x8
c0015cef:	50                   	push   eax
c0015cf0:	53                   	push   ebx
c0015cf1:	e8 72 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cfd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015d03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d07:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015d11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d15:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d19:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015d1f:	e8 4a bd ff ff       	call   c0011a6e <KeInitSignals()>
c0015d24:	89 c2                	mov    edx,eax
c0015d26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d3a:	85 c0                	test   eax,eax
c0015d3c:	74 42                	je     c0015d80 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d42:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d48:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d52:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d62:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d6c:	05 0c 01 00 00       	add    eax,0x10c
c0015d71:	83 ec 08             	sub    esp,0x8
c0015d74:	52                   	push   edx
c0015d75:	50                   	push   eax
c0015d76:	e8 c5 a8 fe ff       	call   c0000640 <strcpy>
c0015d7b:	83 c4 10             	add    esp,0x10
c0015d7e:	eb 64                	jmp    c0015de4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d80:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d8f:	e8 22 1d ff ff       	call   c0007ab6 <malloc>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	89 c3                	mov    ebx,eax
c0015d99:	83 ec 08             	sub    esp,0x8
c0015d9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015da0:	53                   	push   ebx
c0015da1:	e8 c0 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dad:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015db3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dbd:	83 ec 0c             	sub    esp,0xc
c0015dc0:	50                   	push   eax
c0015dc1:	e8 3e 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015dc6:	83 c4 10             	add    esp,0x10
c0015dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcd:	05 0c 01 00 00       	add    eax,0x10c
c0015dd2:	83 ec 08             	sub    esp,0x8
c0015dd5:	68 21 29 02 c0       	push   0xc0022921
c0015dda:	50                   	push   eax
c0015ddb:	e8 60 a8 fe ff       	call   c0000640 <strcpy>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	90                   	nop
c0015de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de8:	83 c0 0c             	add    eax,0xc
c0015deb:	83 ec 08             	sub    esp,0x8
c0015dee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015df2:	50                   	push   eax
c0015df3:	e8 48 a8 fe ff       	call   c0000640 <strcpy>
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	83 ec 08             	sub    esp,0x8
c0015dfe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e06:	e8 c1 fb ff ff       	call   c00159cc <Process::addArgs(char**)>
c0015e0b:	83 c4 10             	add    esp,0x10
c0015e0e:	90                   	nop
c0015e0f:	83 c4 24             	add    esp,0x24
c0015e12:	5b                   	pop    ebx
c0015e13:	5e                   	pop    esi
c0015e14:	c3                   	ret    
c0015e15:	8d 76 00             	lea    esi,[esi+0x0]

c0015e18 <taskStartupFunction>:
c0015e18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e1d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015e20:	c3                   	ret    
c0015e21:	90                   	nop
c0015e22:	66 90                	xchg   ax,ax

c0015e24 <Semaphore::Semaphore(int)>:
c0015e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e2c:	89 10                	mov    DWORD PTR [eax],edx
c0015e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e32:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e4f:	90                   	nop
c0015e50:	c3                   	ret    
c0015e51:	90                   	nop
c0015e52:	66 90                	xchg   ax,ax

c0015e54 <Mutex::Mutex()>:
c0015e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e58:	6a 01                	push   0x1
c0015e5a:	50                   	push   eax
c0015e5b:	e8 c4 ff ff ff       	call   c0015e24 <Semaphore::Semaphore(int)>
c0015e60:	83 c4 08             	add    esp,0x8
c0015e63:	90                   	nop
c0015e64:	c3                   	ret    
c0015e65:	90                   	nop
c0015e66:	66 90                	xchg   ax,ax

c0015e68 <Process::createThread(void (*)(void*), void*, int)>:
c0015e68:	57                   	push   edi
c0015e69:	31 c9                	xor    ecx,ecx
c0015e6b:	56                   	push   esi
c0015e6c:	53                   	push   ebx
c0015e6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e71:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e78:	89 f2                	mov    edx,esi
c0015e7a:	66 90                	xchg   ax,ax
c0015e7c:	0f b7 c2             	movzx  eax,dx
c0015e7f:	80 e2 01             	and    dl,0x1
c0015e82:	74 14                	je     c0015e98 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e84:	d1 f8                	sar    eax,1
c0015e86:	83 c1 01             	add    ecx,0x1
c0015e89:	89 c2                	mov    edx,eax
c0015e8b:	83 f9 10             	cmp    ecx,0x10
c0015e8e:	75 ec                	jne    c0015e7c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e90:	31 db                	xor    ebx,ebx
c0015e92:	89 d8                	mov    eax,ebx
c0015e94:	5b                   	pop    ebx
c0015e95:	5e                   	pop    esi
c0015e96:	5f                   	pop    edi
c0015e97:	c3                   	ret    
c0015e98:	b8 01 00 00 00       	mov    eax,0x1
c0015e9d:	d3 e0                	shl    eax,cl
c0015e9f:	09 c6                	or     esi,eax
c0015ea1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ea4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015eab:	01 c0                	add    eax,eax
c0015ead:	01 c8                	add    eax,ecx
c0015eaf:	8d 04 80             	lea    eax,[eax+eax*4]
c0015eb2:	01 d8                	add    eax,ebx
c0015eb4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ebb:	75 0b                	jne    c0015ec8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015ebd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015ec7:	90                   	nop
c0015ec8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ed4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ed7:	01 c0                	add    eax,eax
c0015ed9:	01 c8                	add    eax,ecx
c0015edb:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015ede:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015ee1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015ee7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015eed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ef1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ef7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015efd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015f03:	89 ca                	mov    edx,ecx
c0015f05:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015f0c:	f7 da                	neg    edx
c0015f0e:	c1 e2 15             	shl    edx,0x15
c0015f11:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015f17:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015f1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f21:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f2b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f35:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f3b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f45:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f4f:	68 00 01 00 00       	push   0x100
c0015f54:	e8 5d 1b ff ff       	call   c0007ab6 <malloc>
c0015f59:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015f5c:	58                   	pop    eax
c0015f5d:	5a                   	pop    edx
c0015f5e:	53                   	push   ebx
c0015f5f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f64:	e8 77 9e 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	89 d8                	mov    eax,ebx
c0015f6e:	5b                   	pop    ebx
c0015f6f:	5e                   	pop    esi
c0015f70:	5f                   	pop    edi
c0015f71:	c3                   	ret    
c0015f72:	66 90                	xchg   ax,ax

c0015f74 <Process::createUserThread()>:
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	68 80 00 00 00       	push   0x80
c0015f7c:	6a 00                	push   0x0
c0015f7e:	68 c4 58 01 c0       	push   0xc00158c4
c0015f83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f87:	50                   	push   eax
c0015f88:	e8 db fe ff ff       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c0015f8d:	83 c4 1c             	add    esp,0x1c
c0015f90:	c3                   	ret    
c0015f91:	8d 76 00             	lea    esi,[esi+0x0]

c0015f94 <setupMultitasking(void (*)())>:
c0015f94:	56                   	push   esi
c0015f95:	53                   	push   ebx
c0015f96:	83 ec 04             	sub    esp,0x4
c0015f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f9d:	eb 11                	jmp    c0015fb0 <setupMultitasking(void (*)())+0x1c>
c0015f9f:	90                   	nop
c0015fa0:	83 ec 0c             	sub    esp,0xc
c0015fa3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fa8:	e8 77 9d 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fad:	83 c4 10             	add    esp,0x10
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015fb8:	e8 43 9d 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015fbd:	83 c4 10             	add    esp,0x10
c0015fc0:	84 c0                	test   al,al
c0015fc2:	74 dc                	je     c0015fa0 <setupMultitasking(void (*)())+0xc>
c0015fc4:	83 ec 0c             	sub    esp,0xc
c0015fc7:	68 24 07 00 00       	push   0x724
c0015fcc:	e8 e5 1a ff ff       	call   c0007ab6 <malloc>
c0015fd1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fd8:	89 c3                	mov    ebx,eax
c0015fda:	6a 00                	push   0x0
c0015fdc:	68 25 29 02 c0       	push   0xc0022925
c0015fe1:	6a 01                	push   0x1
c0015fe3:	50                   	push   eax
c0015fe4:	e8 5b fc ff ff       	call   c0015c44 <Process::Process(bool, char const*, Process*, char**)>
c0015fe9:	83 c4 14             	add    esp,0x14
c0015fec:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015ff2:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015ff8:	50                   	push   eax
c0015ff9:	e8 5b 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015ffe:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016005:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001600f:	83 c8 01             	or     eax,0x1
c0016012:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016019:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001601f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016022:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001602c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016032:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016038:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016042:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001604c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016056:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001605c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016066:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001606c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016076:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001607d:	e8 34 1a ff ff       	call   c0007ab6 <malloc>
c0016082:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016088:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001608e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016094:	5a                   	pop    edx
c0016095:	59                   	pop    ecx
c0016096:	68 21 29 02 c0       	push   0xc0022921
c001609b:	50                   	push   eax
c001609c:	e8 9f a5 fe ff       	call   c0000640 <strcpy>
c00160a1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00160a8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00160ac:	83 c4 14             	add    esp,0x14
c00160af:	5b                   	pop    ebx
c00160b0:	5e                   	pop    esi
c00160b1:	e9 b3 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00160b6:	66 90                	xchg   ax,ax

c00160b8 <schedule()>:
c00160b8:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00160be:	85 d2                	test   edx,edx
c00160c0:	74 0e                	je     c00160d0 <schedule()+0x18>
c00160c2:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00160cc:	c3                   	ret    
c00160cd:	8d 76 00             	lea    esi,[esi+0x0]
c00160d0:	53                   	push   ebx
c00160d1:	83 ec 14             	sub    esp,0x14
c00160d4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160d9:	e8 22 9c 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160de:	83 c4 10             	add    esp,0x10
c00160e1:	84 c0                	test   al,al
c00160e3:	75 3f                	jne    c0016124 <schedule()+0x6c>
c00160e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160ed:	83 fa 01             	cmp    edx,0x1
c00160f0:	74 3a                	je     c001612c <schedule()+0x74>
c00160f2:	66 90                	xchg   ax,ax
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160fc:	e8 1b 9c 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016101:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016108:	89 c3                	mov    ebx,eax
c001610a:	e8 15 9c 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001610f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016116:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016119:	e8 fe f7 ff ff       	call   c001591c <switchToThread(ThreadControlBlock*)>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	83 c4 08             	add    esp,0x8
c0016127:	5b                   	pop    ebx
c0016128:	c3                   	ret    
c0016129:	8d 76 00             	lea    esi,[esi+0x0]
c001612c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016133:	83 ec 08             	sub    esp,0x8
c0016136:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001613b:	50                   	push   eax
c001613c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016141:	e8 9a 9c 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016146:	83 c4 10             	add    esp,0x10
c0016149:	eb a9                	jmp    c00160f4 <schedule()+0x3c>
c001614b:	90                   	nop

c001614c <Semaphore::tryAcquire()>:
c001614c:	53                   	push   ebx
c001614d:	83 ec 08             	sub    esp,0x8
c0016150:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016154:	fa                   	cli    
c0016155:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001615a:	8d 50 01             	lea    edx,[eax+0x1]
c001615d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016163:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016169:	8d 5a 01             	lea    ebx,[edx+0x1]
c001616c:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016172:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016175:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016177:	7c 33                	jl     c00161ac <Semaphore::tryAcquire()+0x60>
c0016179:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001617f:	85 d2                	test   edx,edx
c0016181:	75 0d                	jne    c0016190 <Semaphore::tryAcquire()+0x44>
c0016183:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016189:	85 d2                	test   edx,edx
c001618b:	75 6f                	jne    c00161fc <Semaphore::tryAcquire()+0xb0>
c001618d:	8d 76 00             	lea    esi,[esi+0x0]
c0016190:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016195:	85 c0                	test   eax,eax
c0016197:	74 0b                	je     c00161a4 <Semaphore::tryAcquire()+0x58>
c0016199:	8d 76 00             	lea    esi,[esi+0x0]
c001619c:	31 c0                	xor    eax,eax
c001619e:	83 c4 08             	add    esp,0x8
c00161a1:	5b                   	pop    ebx
c00161a2:	c3                   	ret    
c00161a3:	90                   	nop
c00161a4:	fb                   	sti    
c00161a5:	83 c4 08             	add    esp,0x8
c00161a8:	5b                   	pop    ebx
c00161a9:	c3                   	ret    
c00161aa:	66 90                	xchg   ax,ax
c00161ac:	83 c3 01             	add    ebx,0x1
c00161af:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00161b5:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00161b8:	85 d2                	test   edx,edx
c00161ba:	75 24                	jne    c00161e0 <Semaphore::tryAcquire()+0x94>
c00161bc:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00161c2:	85 c9                	test   ecx,ecx
c00161c4:	74 1a                	je     c00161e0 <Semaphore::tryAcquire()+0x94>
c00161c6:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161d0:	e8 e3 fe ff ff       	call   c00160b8 <schedule()>
c00161d5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161da:	83 e8 01             	sub    eax,0x1
c00161dd:	8d 76 00             	lea    esi,[esi+0x0]
c00161e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e5:	85 c0                	test   eax,eax
c00161e7:	75 0b                	jne    c00161f4 <Semaphore::tryAcquire()+0xa8>
c00161e9:	fb                   	sti    
c00161ea:	b0 01                	mov    al,0x1
c00161ec:	83 c4 08             	add    esp,0x8
c00161ef:	5b                   	pop    ebx
c00161f0:	c3                   	ret    
c00161f1:	8d 76 00             	lea    esi,[esi+0x0]
c00161f4:	b0 01                	mov    al,0x1
c00161f6:	83 c4 08             	add    esp,0x8
c00161f9:	5b                   	pop    ebx
c00161fa:	c3                   	ret    
c00161fb:	90                   	nop
c00161fc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016206:	e8 ad fe ff ff       	call   c00160b8 <schedule()>
c001620b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016210:	83 e8 01             	sub    eax,0x1
c0016213:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016218:	85 c0                	test   eax,eax
c001621a:	75 80                	jne    c001619c <Semaphore::tryAcquire()+0x50>
c001621c:	eb 86                	jmp    c00161a4 <Semaphore::tryAcquire()+0x58>
c001621e:	66 90                	xchg   ax,ax

c0016220 <Semaphore::assertLocked(char const*)>:
c0016220:	83 ec 0c             	sub    esp,0xc
c0016223:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016227:	fa                   	cli    
c0016228:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001622e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016233:	83 c1 01             	add    ecx,0x1
c0016236:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001623c:	8d 48 01             	lea    ecx,[eax+0x1]
c001623f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016245:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016247:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001624a:	7c 28                	jl     c0016274 <Semaphore::assertLocked(char const*)+0x54>
c001624c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016251:	85 c0                	test   eax,eax
c0016253:	75 0b                	jne    c0016260 <Semaphore::assertLocked(char const*)+0x40>
c0016255:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001625a:	85 c0                	test   eax,eax
c001625c:	75 32                	jne    c0016290 <Semaphore::assertLocked(char const*)+0x70>
c001625e:	66 90                	xchg   ax,ax
c0016260:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016265:	83 e8 01             	sub    eax,0x1
c0016268:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001626d:	75 01                	jne    c0016270 <Semaphore::assertLocked(char const*)+0x50>
c001626f:	fb                   	sti    
c0016270:	83 c4 0c             	add    esp,0xc
c0016273:	c3                   	ret    
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001627b:	52                   	push   edx
c001627c:	e8 d2 b3 ff ff       	call   c0011653 <KePanic(char const*)>
c0016281:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	83 e8 01             	sub    eax,0x1
c001628c:	eb be                	jmp    c001624c <Semaphore::assertLocked(char const*)+0x2c>
c001628e:	66 90                	xchg   ax,ax
c0016290:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001629a:	e8 19 fe ff ff       	call   c00160b8 <schedule()>
c001629f:	eb bf                	jmp    c0016260 <Semaphore::assertLocked(char const*)+0x40>
c00162a1:	8d 76 00             	lea    esi,[esi+0x0]

c00162a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162b0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162b3:	e8 00 fe ff ff       	call   c00160b8 <schedule()>
c00162b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162bd:	83 e8 01             	sub    eax,0x1
c00162c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162c5:	75 01                	jne    c00162c8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00162c7:	fb                   	sti    
c00162c8:	83 c4 0c             	add    esp,0xc
c00162cb:	c3                   	ret    

c00162cc <blockTask(TaskState)>:
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	fa                   	cli    
c00162d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162d9:	83 c0 01             	add    eax,0x1
c00162dc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162e9:	e8 ca fd ff ff       	call   c00160b8 <schedule()>
c00162ee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162f3:	83 e8 01             	sub    eax,0x1
c00162f6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162fb:	75 03                	jne    c0016300 <blockTask(TaskState)+0x34>
c00162fd:	fb                   	sti    
c00162fe:	66 90                	xchg   ax,ax
c0016300:	83 c4 0c             	add    esp,0xc
c0016303:	c3                   	ret    

c0016304 <waitTask(int, int*, int)>:
c0016304:	83 ec 18             	sub    esp,0x18
c0016307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016310:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016313:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001631c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001631f:	6a 07                	push   0x7
c0016321:	e8 a6 ff ff ff       	call   c00162cc <blockTask(TaskState)>
c0016326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016331:	85 d2                	test   edx,edx
c0016333:	74 0b                	je     c0016340 <waitTask(int, int*, int)+0x3c>
c0016335:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016338:	89 02                	mov    DWORD PTR [edx],eax
c001633a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001633f:	90                   	nop
c0016340:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016343:	83 c4 0c             	add    esp,0xc
c0016346:	c3                   	ret    
c0016347:	90                   	nop

c0016348 <milliTenthSleepUntil(unsigned int)>:
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001634f:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016355:	76 05                	jbe    c001635c <milliTenthSleepUntil(unsigned int)+0x14>
c0016357:	90                   	nop
c0016358:	83 c4 0c             	add    esp,0xc
c001635b:	c3                   	ret    
c001635c:	fa                   	cli    
c001635d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016363:	83 ec 08             	sub    esp,0x8
c0016366:	83 c2 01             	add    edx,0x1
c0016369:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001636f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016375:	83 c1 01             	add    ecx,0x1
c0016378:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001637e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016384:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638c:	50                   	push   eax
c001638d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016392:	e8 49 9a 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016397:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001639e:	e8 29 ff ff ff       	call   c00162cc <blockTask(TaskState)>
c00163a3:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163a8:	83 c4 10             	add    esp,0x10
c00163ab:	83 e8 01             	sub    eax,0x1
c00163ae:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00163b3:	85 c0                	test   eax,eax
c00163b5:	75 09                	jne    c00163c0 <milliTenthSleepUntil(unsigned int)+0x78>
c00163b7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00163bc:	85 c0                	test   eax,eax
c00163be:	75 14                	jne    c00163d4 <milliTenthSleepUntil(unsigned int)+0x8c>
c00163c0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163c5:	83 e8 01             	sub    eax,0x1
c00163c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163cd:	75 89                	jne    c0016358 <milliTenthSleepUntil(unsigned int)+0x10>
c00163cf:	fb                   	sti    
c00163d0:	83 c4 0c             	add    esp,0xc
c00163d3:	c3                   	ret    
c00163d4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163de:	e8 d5 fc ff ff       	call   c00160b8 <schedule()>
c00163e3:	eb db                	jmp    c00163c0 <milliTenthSleepUntil(unsigned int)+0x78>
c00163e5:	8d 76 00             	lea    esi,[esi+0x0]

c00163e8 <milliTenthSleep(unsigned int)>:
c00163e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163ec:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163f1:	01 c2                	add    edx,eax
c00163f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163f7:	e9 4c ff ff ff       	jmp    c0016348 <milliTenthSleepUntil(unsigned int)>

c00163fc <sleep(unsigned int)>:
c00163fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016400:	8d 04 80             	lea    eax,[eax+eax*4]
c0016403:	8d 04 80             	lea    eax,[eax+eax*4]
c0016406:	8d 04 80             	lea    eax,[eax+eax*4]
c0016409:	8d 04 80             	lea    eax,[eax+eax*4]
c001640c:	c1 e0 04             	shl    eax,0x4
c001640f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016413:	eb d3                	jmp    c00163e8 <milliTenthSleep(unsigned int)>
c0016415:	90                   	nop
c0016416:	66 90                	xchg   ax,ax

c0016418 <Semaphore::acquire()>:
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641f:	fa                   	cli    
c0016420:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016425:	83 c0 01             	add    eax,0x1
c0016428:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001642d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016432:	8d 48 01             	lea    ecx,[eax+0x1]
c0016435:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001643b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001643e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016440:	7d 2e                	jge    c0016470 <Semaphore::acquire()+0x58>
c0016442:	83 c1 01             	add    ecx,0x1
c0016445:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016448:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001644d:	85 c0                	test   eax,eax
c001644f:	75 0b                	jne    c001645c <Semaphore::acquire()+0x44>
c0016451:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016456:	85 c0                	test   eax,eax
c0016458:	75 66                	jne    c00164c0 <Semaphore::acquire()+0xa8>
c001645a:	66 90                	xchg   ax,ax
c001645c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016461:	83 e8 01             	sub    eax,0x1
c0016464:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016469:	75 01                	jne    c001646c <Semaphore::acquire()+0x54>
c001646b:	fb                   	sti    
c001646c:	83 c4 0c             	add    esp,0xc
c001646f:	c3                   	ret    
c0016470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016475:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001647c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001647f:	85 c9                	test   ecx,ecx
c0016481:	74 51                	je     c00164d4 <Semaphore::acquire()+0xbc>
c0016483:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016486:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001648c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001648f:	90                   	nop
c0016490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016495:	83 ec 0c             	sub    esp,0xc
c0016498:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001649b:	68 a4 29 02 c0       	push   0xc00229a4
c00164a0:	e8 a0 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00164a5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00164ac:	e8 1b fe ff ff       	call   c00162cc <blockTask(TaskState)>
c00164b1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164b6:	83 c4 10             	add    esp,0x10
c00164b9:	83 e8 01             	sub    eax,0x1
c00164bc:	eb 8a                	jmp    c0016448 <Semaphore::acquire()+0x30>
c00164be:	66 90                	xchg   ax,ax
c00164c0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164ca:	e8 e9 fb ff ff       	call   c00160b8 <schedule()>
c00164cf:	eb 8b                	jmp    c001645c <Semaphore::acquire()+0x44>
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164dc:	eb b2                	jmp    c0016490 <Semaphore::acquire()+0x78>
c00164de:	66 90                	xchg   ax,ax

c00164e0 <taskReturned>:
c00164e0:	83 ec 18             	sub    esp,0x18
c00164e3:	68 c4 29 02 c0       	push   0xc00229c4
c00164e8:	e8 66 b1 ff ff       	call   c0011653 <KePanic(char const*)>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 ec 0c             	sub    esp,0xc
c00164f3:	6a 02                	push   0x2
c00164f5:	e8 d2 fd ff ff       	call   c00162cc <blockTask(TaskState)>
c00164fa:	fa                   	cli    
c00164fb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016500:	83 c0 01             	add    eax,0x1
c0016503:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016508:	e8 ab fb ff ff       	call   c00160b8 <schedule()>
c001650d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016512:	83 c4 10             	add    esp,0x10
c0016515:	83 e8 01             	sub    eax,0x1
c0016518:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001651d:	85 c0                	test   eax,eax
c001651f:	75 cf                	jne    c00164f0 <taskReturned+0x10>
c0016521:	fb                   	sti    
c0016522:	eb cc                	jmp    c00164f0 <taskReturned+0x10>

c0016524 <Thr::processFromPID(int)>:
c0016524:	57                   	push   edi
c0016525:	56                   	push   esi
c0016526:	53                   	push   ebx
c0016527:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001652b:	fa                   	cli    
c001652c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016532:	83 ec 0c             	sub    esp,0xc
c0016535:	83 c1 01             	add    ecx,0x1
c0016538:	68 e4 c6 02 c0       	push   0xc002c6e4
c001653d:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016543:	e8 d4 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016548:	83 c4 10             	add    esp,0x10
c001654b:	89 c7                	mov    edi,eax
c001654d:	eb 15                	jmp    c0016564 <Thr::processFromPID(int)+0x40>
c001654f:	90                   	nop
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016558:	e8 bf 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001655d:	83 c4 10             	add    esp,0x10
c0016560:	39 f8                	cmp    eax,edi
c0016562:	74 50                	je     c00165b4 <Thr::processFromPID(int)+0x90>
c0016564:	83 ec 0c             	sub    esp,0xc
c0016567:	68 e4 c6 02 c0       	push   0xc002c6e4
c001656c:	e8 ab 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016571:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016578:	89 c3                	mov    ebx,eax
c001657a:	e8 a5 97 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001657f:	58                   	pop    eax
c0016580:	5a                   	pop    edx
c0016581:	53                   	push   ebx
c0016582:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016587:	e8 54 98 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001658c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	39 30                	cmp    DWORD PTR [eax],esi
c0016594:	75 ba                	jne    c0016550 <Thr::processFromPID(int)+0x2c>
c0016596:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001659b:	83 e8 01             	sub    eax,0x1
c001659e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165a3:	74 0b                	je     c00165b0 <Thr::processFromPID(int)+0x8c>
c00165a5:	8d 76 00             	lea    esi,[esi+0x0]
c00165a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165ab:	5b                   	pop    ebx
c00165ac:	5e                   	pop    esi
c00165ad:	5f                   	pop    edi
c00165ae:	c3                   	ret    
c00165af:	90                   	nop
c00165b0:	fb                   	sti    
c00165b1:	eb f5                	jmp    c00165a8 <Thr::processFromPID(int)+0x84>
c00165b3:	90                   	nop
c00165b4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165b9:	83 e8 01             	sub    eax,0x1
c00165bc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165c1:	75 05                	jne    c00165c8 <Thr::processFromPID(int)+0xa4>
c00165c3:	fb                   	sti    
c00165c4:	5b                   	pop    ebx
c00165c5:	5e                   	pop    esi
c00165c6:	5f                   	pop    edi
c00165c7:	c3                   	ret    
c00165c8:	5b                   	pop    ebx
c00165c9:	31 c0                	xor    eax,eax
c00165cb:	5e                   	pop    esi
c00165cc:	5f                   	pop    edi
c00165cd:	c3                   	ret    
c00165ce:	66 90                	xchg   ax,ax

c00165d0 <unblockTask(ThreadControlBlock*)>:
c00165d0:	53                   	push   ebx
c00165d1:	83 ec 08             	sub    esp,0x8
c00165d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165d8:	fa                   	cli    
c00165d9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165de:	83 c0 01             	add    eax,0x1
c00165e1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165e9:	85 c0                	test   eax,eax
c00165eb:	74 67                	je     c0016654 <unblockTask(ThreadControlBlock*)+0x84>
c00165ed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165f0:	83 f8 01             	cmp    eax,0x1
c00165f3:	74 37                	je     c001662c <unblockTask(ThreadControlBlock*)+0x5c>
c00165f5:	83 ec 0c             	sub    esp,0xc
c00165f8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165fd:	e8 1a 97 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	85 c0                	test   eax,eax
c0016607:	75 1b                	jne    c0016624 <unblockTask(ThreadControlBlock*)+0x54>
c0016609:	eb 5d                	jmp    c0016668 <unblockTask(ThreadControlBlock*)+0x98>
c001660b:	90                   	nop
c001660c:	83 ec 08             	sub    esp,0x8
c001660f:	50                   	push   eax
c0016610:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016615:	e8 22 9a 00 00       	call   c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001661a:	83 c4 10             	add    esp,0x10
c001661d:	85 c0                	test   eax,eax
c001661f:	74 47                	je     c0016668 <unblockTask(ThreadControlBlock*)+0x98>
c0016621:	8d 76 00             	lea    esi,[esi+0x0]
c0016624:	39 c3                	cmp    ebx,eax
c0016626:	75 e4                	jne    c001660c <unblockTask(ThreadControlBlock*)+0x3c>
c0016628:	eb 12                	jmp    c001663c <unblockTask(ThreadControlBlock*)+0x6c>
c001662a:	66 90                	xchg   ax,ax
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	68 43 29 02 c0       	push   0xc0022943
c0016634:	e8 0c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016641:	83 e8 01             	sub    eax,0x1
c0016644:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016649:	75 01                	jne    c001664c <unblockTask(ThreadControlBlock*)+0x7c>
c001664b:	fb                   	sti    
c001664c:	83 c4 08             	add    esp,0x8
c001664f:	5b                   	pop    ebx
c0016650:	c3                   	ret    
c0016651:	8d 76 00             	lea    esi,[esi+0x0]
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 2c 29 02 c0       	push   0xc002292c
c001665c:	e8 e4 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	eb d6                	jmp    c001663c <unblockTask(ThreadControlBlock*)+0x6c>
c0016666:	66 90                	xchg   ax,ax
c0016668:	83 ec 08             	sub    esp,0x8
c001666b:	53                   	push   ebx
c001666c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016671:	e8 6a 97 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	eb c1                	jmp    c001663c <unblockTask(ThreadControlBlock*)+0x6c>
c001667b:	90                   	nop

c001667c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001667c:	55                   	push   ebp
c001667d:	57                   	push   edi
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	83 ec 1c             	sub    esp,0x1c
c0016683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016687:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001668a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016690:	85 ed                	test   ebp,ebp
c0016692:	7e 28                	jle    c00166bc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016694:	31 f6                	xor    esi,esi
c0016696:	66 90                	xchg   ax,ax
c0016698:	83 ec 0c             	sub    esp,0xc
c001669b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00166a2:	83 c6 01             	add    esi,0x1
c00166a5:	57                   	push   edi
c00166a6:	e8 1b 14 ff ff       	call   c0007ac6 <free>
c00166ab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00166b7:	7f df                	jg     c0016698 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00166b9:	8d 76 00             	lea    esi,[esi+0x0]
c00166bc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00166c6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166cb:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00166ce:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166d1:	d3 c0                	rol    eax,cl
c00166d3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166da:	21 c8                	and    eax,ecx
c00166dc:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166e3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166e6:	89 f7                	mov    edi,esi
c00166e8:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166f0:	0f 85 72 01 00 00    	jne    c0016868 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166f6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166fc:	85 ed                	test   ebp,ebp
c00166fe:	74 1c                	je     c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	55                   	push   ebp
c0016704:	e8 5b ac ff ff       	call   c0011364 <EnvVarContainer::~EnvVarContainer()>
c0016709:	59                   	pop    ecx
c001670a:	5e                   	pop    esi
c001670b:	6a 0c                	push   0xc
c001670d:	55                   	push   ebp
c001670e:	e8 05 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016713:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016716:	83 c4 10             	add    esp,0x10
c0016719:	89 f7                	mov    edi,esi
c001671b:	90                   	nop
c001671c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016722:	85 c0                	test   eax,eax
c0016724:	0f 84 b2 00 00 00    	je     c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001672a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001672d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016731:	31 c9                	xor    ecx,ecx
c0016733:	eb 17                	jmp    c001674c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016735:	8d 76 00             	lea    esi,[esi+0x0]
c0016738:	83 c1 01             	add    ecx,0x1
c001673b:	83 f9 10             	cmp    ecx,0x10
c001673e:	0f 84 98 00 00 00    	je     c00167dc <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016744:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001674a:	66 90                	xchg   ax,ax
c001674c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016753:	d3 fa                	sar    edx,cl
c0016755:	80 e2 01             	and    dl,0x1
c0016758:	74 de                	je     c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001675a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001675d:	01 d2                	add    edx,edx
c001675f:	01 ca                	add    edx,ecx
c0016761:	8d 14 92             	lea    edx,[edx+edx*4]
c0016764:	01 d0                	add    eax,edx
c0016766:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001676c:	83 fd 07             	cmp    ebp,0x7
c001676f:	75 c7                	jne    c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016771:	05 40 02 00 00       	add    eax,0x240
c0016776:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016779:	83 fd ff             	cmp    ebp,0xffffffff
c001677c:	0f 8c ee 00 00 00    	jl     c0016870 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016782:	0f 84 ac 01 00 00    	je     c0016934 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016788:	85 ed                	test   ebp,ebp
c001678a:	0f 84 90 01 00 00    	je     c0016920 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016790:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016792:	75 a4                	jne    c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016794:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001679a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001679e:	01 d0                	add    eax,edx
c00167a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00167ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00167b6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00167bd:	50                   	push   eax
c00167be:	e8 0d fe ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167cd:	89 f7                	mov    edi,esi
c00167cf:	83 c1 01             	add    ecx,0x1
c00167d2:	83 f9 10             	cmp    ecx,0x10
c00167d5:	0f 85 69 ff ff ff    	jne    c0016744 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167db:	90                   	nop
c00167dc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167e2:	85 c0                	test   eax,eax
c00167e4:	74 62                	je     c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167e6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167ec:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167f2:	74 54                	je     c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167f4:	83 ec 0c             	sub    esp,0xc
c00167f7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167fc:	e8 1b 95 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016801:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016808:	89 c7                	mov    edi,eax
c001680a:	e8 f1 94 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	84 c0                	test   al,al
c0016814:	0f 84 ce 00 00 00    	je     c00168e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001681a:	66 90                	xchg   ax,ax
c001681c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001681f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016825:	85 d2                	test   edx,edx
c0016827:	74 0f                	je     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016829:	83 ec 0c             	sub    esp,0xc
c001682c:	8b 02                	mov    eax,DWORD PTR [edx]
c001682e:	52                   	push   edx
c001682f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016832:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016842:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016845:	8d 76 00             	lea    esi,[esi+0x0]
c0016848:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001684e:	85 db                	test   ebx,ebx
c0016850:	74 16                	je     c0016868 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016852:	83 ec 0c             	sub    esp,0xc
c0016855:	53                   	push   ebx
c0016856:	e8 57 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001685b:	58                   	pop    eax
c001685c:	5a                   	pop    edx
c001685d:	6a 14                	push   0x14
c001685f:	53                   	push   ebx
c0016860:	e8 b3 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	83 c4 1c             	add    esp,0x1c
c001686b:	5b                   	pop    ebx
c001686c:	5e                   	pop    esi
c001686d:	5f                   	pop    edi
c001686e:	5d                   	pop    ebp
c001686f:	c3                   	ret    
c0016870:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	68 f8 29 02 c0       	push   0xc00229f8
c001687c:	e8 d2 ad ff ff       	call   c0011653 <KePanic(char const*)>
c0016881:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	89 f7                	mov    edi,esi
c0016889:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001688d:	e9 a6 fe ff ff       	jmp    c0016738 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016892:	66 90                	xchg   ax,ax
c0016894:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001689a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00168a0:	75 1e                	jne    c00168c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	68 60 2a 02 c0       	push   0xc0022a60
c00168aa:	e8 96 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00168af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00168b6:	e8 11 fa ff ff       	call   c00162cc <blockTask(TaskState)>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	66 90                	xchg   ax,ax
c00168c0:	83 ec 08             	sub    esp,0x8
c00168c3:	56                   	push   esi
c00168c4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168c9:	e8 12 95 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168ce:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168d5:	e8 42 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	39 f8                	cmp    eax,edi
c00168df:	0f 84 37 ff ff ff    	je     c001681c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168e5:	8d 76 00             	lea    esi,[esi+0x0]
c00168e8:	83 ec 0c             	sub    esp,0xc
c00168eb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168f0:	e8 27 94 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168fc:	89 c6                	mov    esi,eax
c00168fe:	e8 21 94 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	39 f3                	cmp    ebx,esi
c0016908:	74 b6                	je     c00168c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001690a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001690d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016910:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016916:	75 a8                	jne    c00168c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016918:	e9 77 ff ff ff       	jmp    c0016894 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001691d:	8d 76 00             	lea    esi,[esi+0x0]
c0016920:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 2c 2a 02 c0       	push   0xc0022a2c
c001692c:	e9 4b ff ff ff       	jmp    c001687c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016931:	8d 76 00             	lea    esi,[esi+0x0]
c0016934:	8b 36                	mov    esi,DWORD PTR [esi]
c0016936:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001693a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001693d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016940:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016946:	01 d7                	add    edi,edx
c0016948:	89 f8                	mov    eax,edi
c001694a:	e9 51 fe ff ff       	jmp    c00167a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001694f:	90                   	nop

c0016950 <cleanerTaskFunction(void*)>:
c0016950:	53                   	push   ebx
c0016951:	83 ec 08             	sub    esp,0x8
c0016954:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016959:	83 e8 01             	sub    eax,0x1
c001695c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016961:	75 01                	jne    c0016964 <cleanerTaskFunction(void*)+0x14>
c0016963:	fb                   	sti    
c0016964:	fa                   	cli    
c0016965:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001696a:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016971:	8d 50 01             	lea    edx,[eax+0x1]
c0016974:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001697a:	0f 84 c4 00 00 00    	je     c0016a44 <cleanerTaskFunction(void*)+0xf4>
c0016980:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016985:	85 c0                	test   eax,eax
c0016987:	75 03                	jne    c001698c <cleanerTaskFunction(void*)+0x3c>
c0016989:	fb                   	sti    
c001698a:	66 90                	xchg   ax,ax
c001698c:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016993:	fa                   	cli    
c0016994:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001699a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00169a0:	83 c2 01             	add    edx,0x1
c00169a3:	83 c1 01             	add    ecx,0x1
c00169a6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00169ac:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00169b2:	fa                   	cli    
c00169b3:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00169b9:	83 c3 01             	add    ebx,0x1
c00169bc:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00169c2:	eb 28                	jmp    c00169ec <cleanerTaskFunction(void*)+0x9c>
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	68 cc c6 02 c0       	push   0xc002c6cc
c00169cc:	e8 4b 93 00 00       	call   c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169d8:	89 c3                	mov    ebx,eax
c00169da:	e8 45 93 00 00       	call   c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169e2:	e8 95 fc ff ff       	call   c001667c <cleanupTerminatedTask(ThreadControlBlock*)>
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	66 90                	xchg   ax,ax
c00169ec:	83 ec 0c             	sub    esp,0xc
c00169ef:	68 cc c6 02 c0       	push   0xc002c6cc
c00169f4:	e8 07 93 00 00       	call   c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	84 c0                	test   al,al
c00169fe:	74 c4                	je     c00169c4 <cleanerTaskFunction(void*)+0x74>
c0016a00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a05:	83 e8 01             	sub    eax,0x1
c0016a08:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a0d:	75 01                	jne    c0016a10 <cleanerTaskFunction(void*)+0xc0>
c0016a0f:	fb                   	sti    
c0016a10:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a15:	83 e8 01             	sub    eax,0x1
c0016a18:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a1d:	0f 85 31 ff ff ff    	jne    c0016954 <cleanerTaskFunction(void*)+0x4>
c0016a23:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a28:	85 c0                	test   eax,eax
c0016a2a:	0f 84 24 ff ff ff    	je     c0016954 <cleanerTaskFunction(void*)+0x4>
c0016a30:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a3a:	e8 79 f6 ff ff       	call   c00160b8 <schedule()>
c0016a3f:	e9 10 ff ff ff       	jmp    c0016954 <cleanerTaskFunction(void*)+0x4>
c0016a44:	83 ec 0c             	sub    esp,0xc
c0016a47:	6a 02                	push   0x2
c0016a49:	e8 56 f8 ff ff       	call   c00162a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	e9 36 ff ff ff       	jmp    c001698c <cleanerTaskFunction(void*)+0x3c>
c0016a56:	66 90                	xchg   ax,ax

c0016a58 <terminateTask(int)>:
c0016a58:	83 ec 14             	sub    esp,0x14
c0016a5b:	fa                   	cli    
c0016a5c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a62:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a68:	83 c2 01             	add    edx,0x1
c0016a6b:	83 c1 01             	add    ecx,0x1
c0016a6e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a74:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a7a:	fa                   	cli    
c0016a7b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a84:	83 c0 01             	add    eax,0x1
c0016a87:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a91:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a99:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a9c:	50                   	push   eax
c0016a9d:	68 cc c6 02 c0       	push   0xc002c6cc
c0016aa2:	e8 39 93 00 00       	call   c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016ab6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016abb:	85 c0                	test   eax,eax
c0016abd:	74 65                	je     c0016b24 <terminateTask(int)+0xcc>
c0016abf:	83 ec 0c             	sub    esp,0xc
c0016ac2:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016ac9:	50                   	push   eax
c0016aca:	e8 01 fb ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	66 90                	xchg   ax,ax
c0016ad4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ad9:	83 e8 01             	sub    eax,0x1
c0016adc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae1:	75 01                	jne    c0016ae4 <terminateTask(int)+0x8c>
c0016ae3:	fb                   	sti    
c0016ae4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ae9:	83 e8 01             	sub    eax,0x1
c0016aec:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016af1:	75 09                	jne    c0016afc <terminateTask(int)+0xa4>
c0016af3:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016afa:	75 3c                	jne    c0016b38 <terminateTask(int)+0xe0>
c0016afc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b01:	83 e8 01             	sub    eax,0x1
c0016b04:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b09:	75 01                	jne    c0016b0c <terminateTask(int)+0xb4>
c0016b0b:	fb                   	sti    
c0016b0c:	fa                   	cli    
c0016b0d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b12:	83 c0 01             	add    eax,0x1
c0016b15:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b1a:	66 90                	xchg   ax,ax
c0016b1c:	e8 97 f5 ff ff       	call   c00160b8 <schedule()>
c0016b21:	eb d9                	jmp    c0016afc <terminateTask(int)+0xa4>
c0016b23:	90                   	nop
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	68 5a 29 02 c0       	push   0xc002295a
c0016b2c:	e8 14 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	eb 9e                	jmp    c0016ad4 <terminateTask(int)+0x7c>
c0016b36:	66 90                	xchg   ax,ax
c0016b38:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b42:	eb d8                	jmp    c0016b1c <terminateTask(int)+0xc4>

c0016b44 <Thr::terminateFromIRQ(int)>:
c0016b44:	83 ec 18             	sub    esp,0x18
c0016b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4b:	50                   	push   eax
c0016b4c:	e8 07 ff ff ff       	call   c0016a58 <terminateTask(int)>
c0016b51:	90                   	nop
c0016b52:	66 90                	xchg   ax,ax

c0016b54 <Semaphore::release()>:
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b5b:	fa                   	cli    
c0016b5c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b61:	83 c0 01             	add    eax,0x1
c0016b64:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b69:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b71:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b77:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b7a:	85 c9                	test   ecx,ecx
c0016b7c:	74 42                	je     c0016bc0 <Semaphore::release()+0x6c>
c0016b7e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b81:	83 ec 0c             	sub    esp,0xc
c0016b84:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b87:	51                   	push   ecx
c0016b88:	e8 43 fa ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c0016b8d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	83 e8 01             	sub    eax,0x1
c0016b98:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b9d:	85 c0                	test   eax,eax
c0016b9f:	75 0b                	jne    c0016bac <Semaphore::release()+0x58>
c0016ba1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ba6:	85 c0                	test   eax,eax
c0016ba8:	75 22                	jne    c0016bcc <Semaphore::release()+0x78>
c0016baa:	66 90                	xchg   ax,ax
c0016bac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bb1:	83 e8 01             	sub    eax,0x1
c0016bb4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb9:	75 01                	jne    c0016bbc <Semaphore::release()+0x68>
c0016bbb:	fb                   	sti    
c0016bbc:	83 c4 0c             	add    esp,0xc
c0016bbf:	c3                   	ret    
c0016bc0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016bc3:	83 e9 01             	sub    ecx,0x1
c0016bc6:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016bc9:	eb cd                	jmp    c0016b98 <Semaphore::release()+0x44>
c0016bcb:	90                   	nop
c0016bcc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bd6:	e8 dd f4 ff ff       	call   c00160b8 <schedule()>
c0016bdb:	eb cf                	jmp    c0016bac <Semaphore::release()+0x58>
c0016bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0016be0 <__static_initialization_and_destruction_0(int, int)>:
c0016be0:	83 ec 0c             	sub    esp,0xc
c0016be3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016be8:	0f 85 8e 00 00 00    	jne    c0016c7c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bf6:	0f 85 80 00 00 00    	jne    c0016c7c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c04:	e8 8b 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	83 ec 04             	sub    esp,0x4
c0016c0f:	68 30 36 02 c0       	push   0xc0023630
c0016c14:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016c19:	68 44 00 02 c0       	push   0xc0020044
c0016c1e:	e8 a5 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c2e:	e8 61 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	83 ec 04             	sub    esp,0x4
c0016c39:	68 30 36 02 c0       	push   0xc0023630
c0016c3e:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c43:	68 44 00 02 c0       	push   0xc0020044
c0016c48:	e8 7b 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	83 ec 0c             	sub    esp,0xc
c0016c53:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c58:	e8 37 94 00 00       	call   c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c5d:	83 c4 10             	add    esp,0x10
c0016c60:	83 ec 04             	sub    esp,0x4
c0016c63:	68 30 36 02 c0       	push   0xc0023630
c0016c68:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c6d:	68 44 00 02 c0       	push   0xc0020044
c0016c72:	e8 51 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c77:	83 c4 10             	add    esp,0x10
c0016c7a:	66 90                	xchg   ax,ax
c0016c7c:	90                   	nop
c0016c7d:	83 c4 0c             	add    esp,0xc
c0016c80:	c3                   	ret    
c0016c81:	8d 76 00             	lea    esi,[esi+0x0]

c0016c84 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	83 ec 08             	sub    esp,0x8
c0016c8a:	68 ff ff 00 00       	push   0xffff
c0016c8f:	6a 01                	push   0x1
c0016c91:	e8 4a ff ff ff       	call   c0016be0 <__static_initialization_and_destruction_0(int, int)>
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	83 c4 0c             	add    esp,0xc
c0016c9c:	c3                   	ret    

c0016c9d <Vm::inbv(unsigned short)>:
c0016c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ca1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016ca6:	75 06                	jne    c0016cae <Vm::inbv(unsigned short)+0x11>
c0016ca8:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016cad:	c3                   	ret    
c0016cae:	ec                   	in     al,dx
c0016caf:	c3                   	ret    

c0016cb0 <Vm::outbv(unsigned short, unsigned char)>:
c0016cb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cb8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016cbd:	75 25                	jne    c0016ce4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016cbf:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016cc5:	8d 51 01             	lea    edx,[ecx+0x1]
c0016cc8:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016cce:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016cd4:	83 fa 20             	cmp    edx,0x20
c0016cd7:	75 0c                	jne    c0016ce5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016cd9:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016ce3:	c3                   	ret    
c0016ce4:	ee                   	out    dx,al
c0016ce5:	c3                   	ret    

c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016ce6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ceb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cf0:	c1 e0 04             	shl    eax,0x4
c0016cf3:	01 d0                	add    eax,edx
c0016cf5:	c3                   	ret    

c0016cf6 <Vm::getSegment(unsigned int)>:
c0016cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cfa:	c1 e8 10             	shr    eax,0x10
c0016cfd:	c3                   	ret    

c0016cfe <Vm::getOffset(unsigned int)>:
c0016cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d02:	c3                   	ret    

c0016d03 <Vm::mainloop2()>:
c0016d03:	83 ec 18             	sub    esp,0x18
c0016d06:	fa                   	cli    
c0016d07:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d0d:	6a 02                	push   0x2
c0016d0f:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016d16:	e8 89 f5 ff ff       	call   c00162a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d20:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016d24:	52                   	push   edx
c0016d25:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d29:	52                   	push   edx
c0016d2a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d2e:	52                   	push   edx
c0016d2f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d33:	50                   	push   eax
c0016d34:	e8 d6 94 fe ff       	call   c000020f <goToVM86>
c0016d39:	83 c4 2c             	add    esp,0x2c
c0016d3c:	c3                   	ret    

c0016d3d <Vm::mainVm8086Loop(void*)>:
c0016d3d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d42:	48                   	dec    eax
c0016d43:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d48:	75 01                	jne    c0016d4b <Vm::mainVm8086Loop(void*)+0xe>
c0016d4a:	fb                   	sti    
c0016d4b:	eb b6                	jmp    c0016d03 <Vm::mainloop2()>

c0016d4d <Vm::mainloop3(unsigned long)>:
c0016d4d:	83 ec 18             	sub    esp,0x18
c0016d50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d54:	fa                   	cli    
c0016d55:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d5b:	6a 02                	push   0x2
c0016d5d:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d64:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d69:	e8 36 f5 ff ff       	call   c00162a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d6e:	83 c4 1c             	add    esp,0x1c
c0016d71:	eb 90                	jmp    c0016d03 <Vm::mainloop2()>

c0016d73 <Vm::initialise8086()>:
c0016d73:	83 ec 0c             	sub    esp,0xc
c0016d76:	68 80 00 00 00       	push   0x80
c0016d7b:	6a 00                	push   0x0
c0016d7d:	68 3d 6d 01 c0       	push   0xc0016d3d
c0016d82:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d88:	e8 db f0 ff ff       	call   c0015e68 <Process::createThread(void (*)(void*), void*, int)>
c0016d8d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d94:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d99:	68 00 01 00 00       	push   0x100
c0016d9e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016da3:	6a 00                	push   0x0
c0016da5:	6a 00                	push   0x0
c0016da7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dad:	e8 68 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016db2:	83 c4 2c             	add    esp,0x2c
c0016db5:	c3                   	ret    

c0016db6 <Vm::finish8086()>:
c0016db6:	53                   	push   ebx
c0016db7:	83 ec 08             	sub    esp,0x8
c0016dba:	fa                   	cli    
c0016dbb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dc1:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016dc8:	75 15                	jne    c0016ddf <Vm::finish8086()+0x29>
c0016dca:	e8 e9 f2 ff ff       	call   c00160b8 <schedule()>
c0016dcf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dd4:	48                   	dec    eax
c0016dd5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dda:	75 de                	jne    c0016dba <Vm::finish8086()+0x4>
c0016ddc:	fb                   	sti    
c0016ddd:	eb db                	jmp    c0016dba <Vm::finish8086()+0x4>
c0016ddf:	83 ec 0c             	sub    esp,0xc
c0016de2:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016de8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dee:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016df5:	e8 d6 f7 ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c0016dfa:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	8d 50 ff             	lea    edx,[eax-0x1]
c0016e05:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016e0b:	85 d2                	test   edx,edx
c0016e0d:	75 01                	jne    c0016e10 <Vm::finish8086()+0x5a>
c0016e0f:	fb                   	sti    
c0016e10:	89 d8                	mov    eax,ebx
c0016e12:	83 c4 08             	add    esp,0x8
c0016e15:	5b                   	pop    ebx
c0016e16:	c3                   	ret    

c0016e17 <Vm::getOutput8086(unsigned char*)>:
c0016e17:	57                   	push   edi
c0016e18:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e1e:	56                   	push   esi
c0016e1f:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016e24:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2a:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e2f:	5e                   	pop    esi
c0016e30:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e3a:	5f                   	pop    edi
c0016e3b:	c3                   	ret    

c0016e3c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e3c:	55                   	push   ebp
c0016e3d:	57                   	push   edi
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	83 ec 0c             	sub    esp,0xc
c0016e43:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e47:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e53:	fa                   	cli    
c0016e54:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e5a:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e61:	75 15                	jne    c0016e78 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e63:	e8 50 f2 ff ff       	call   c00160b8 <schedule()>
c0016e68:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e6d:	48                   	dec    eax
c0016e6e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e73:	75 de                	jne    c0016e53 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e75:	fb                   	sti    
c0016e76:	eb db                	jmp    c0016e53 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e78:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e7d:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e87:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e8b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e8f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e93:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e97:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e9b:	0f b7 ff             	movzx  edi,di
c0016e9e:	0f b7 f6             	movzx  esi,si
c0016ea1:	50                   	push   eax
c0016ea2:	6a 20                	push   0x20
c0016ea4:	6a 00                	push   0x0
c0016ea6:	68 40 c7 02 c0       	push   0xc002c740
c0016eab:	e8 40 96 fe ff       	call   c00004f0 <memset>
c0016eb0:	5a                   	pop    edx
c0016eb1:	59                   	pop    ecx
c0016eb2:	57                   	push   edi
c0016eb3:	56                   	push   esi
c0016eb4:	e8 2d fe ff ff       	call   c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016eb9:	83 c4 10             	add    esp,0x10
c0016ebc:	89 c7                	mov    edi,eax
c0016ebe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016ec2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016ec6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ec8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ecd:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ed4:	48                   	dec    eax
c0016ed5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eda:	75 01                	jne    c0016edd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016edc:	fb                   	sti    
c0016edd:	83 ec 0c             	sub    esp,0xc
c0016ee0:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ee6:	e8 e5 f6 ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c0016eeb:	83 c4 1c             	add    esp,0x1c
c0016eee:	b0 01                	mov    al,0x1
c0016ef0:	5b                   	pop    ebx
c0016ef1:	5e                   	pop    esi
c0016ef2:	5f                   	pop    edi
c0016ef3:	5d                   	pop    ebp
c0016ef4:	c3                   	ret    

c0016ef5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ef5:	55                   	push   ebp
c0016ef6:	57                   	push   edi
c0016ef7:	56                   	push   esi
c0016ef8:	53                   	push   ebx
c0016ef9:	83 ec 34             	sub    esp,0x34
c0016efc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016f00:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016f04:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f08:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016f0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f10:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f14:	68 88 2a 02 c0       	push   0xc0022a88
c0016f19:	e8 27 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	fa                   	cli    
c0016f22:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f28:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f2e:	84 db                	test   bl,bl
c0016f30:	75 15                	jne    c0016f47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f32:	e8 81 f1 ff ff       	call   c00160b8 <schedule()>
c0016f37:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f3c:	48                   	dec    eax
c0016f3d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f42:	75 dd                	jne    c0016f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f44:	fb                   	sti    
c0016f45:	eb da                	jmp    c0016f21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f4b:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f50:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f5a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f5e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f62:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f66:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f6a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f6e:	50                   	push   eax
c0016f6f:	6a 20                	push   0x20
c0016f71:	6a 00                	push   0x0
c0016f73:	68 40 c7 02 c0       	push   0xc002c740
c0016f78:	e8 73 95 fe ff       	call   c00004f0 <memset>
c0016f7d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f84:	e8 2d 0b ff ff       	call   c0007ab6 <malloc>
c0016f89:	83 c4 0c             	add    esp,0xc
c0016f8c:	89 c5                	mov    ebp,eax
c0016f8e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f98:	50                   	push   eax
c0016f99:	e8 e4 4b ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	85 ed                	test   ebp,ebp
c0016fa3:	75 0a                	jne    c0016faf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016fa5:	83 ec 0c             	sub    esp,0xc
c0016fa8:	68 aa 2a 02 c0       	push   0xc0022aaa
c0016fad:	eb 2b                	jmp    c0016fda <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016faf:	50                   	push   eax
c0016fb0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016fb4:	50                   	push   eax
c0016fb5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016fb9:	50                   	push   eax
c0016fba:	55                   	push   ebp
c0016fbb:	e8 e2 4e ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c0016fc0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016fc4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016fc8:	83 c4 10             	add    esp,0x10
c0016fcb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fd0:	74 27                	je     c0016ff9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	68 be 2a 02 c0       	push   0xc0022abe
c0016fda:	e8 74 a6 ff ff       	call   c0011653 <KePanic(char const*)>
c0016fdf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	48                   	dec    eax
c0016fe8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fed:	85 c0                	test   eax,eax
c0016fef:	75 01                	jne    c0016ff2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff1:	fb                   	sti    
c0016ff2:	31 db                	xor    ebx,ebx
c0016ff4:	e9 90 00 00 00       	jmp    c0017089 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ff9:	51                   	push   ecx
c0016ffa:	51                   	push   ecx
c0016ffb:	6a 01                	push   0x1
c0016ffd:	55                   	push   ebp
c0016ffe:	e8 9d 4b ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	85 c0                	test   eax,eax
c0017008:	74 26                	je     c0017030 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001700a:	83 ec 0c             	sub    esp,0xc
c001700d:	68 d7 2a 02 c0       	push   0xc0022ad7
c0017012:	e8 3c a6 ff ff       	call   c0011653 <KePanic(char const*)>
c0017017:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001701c:	83 c4 10             	add    esp,0x10
c001701f:	48                   	dec    eax
c0017020:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017025:	85 c0                	test   eax,eax
c0017027:	75 c9                	jne    c0016ff2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017029:	fb                   	sti    
c001702a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001702e:	eb 59                	jmp    c0017089 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017030:	0f b7 ff             	movzx  edi,di
c0017033:	50                   	push   eax
c0017034:	0f b7 f6             	movzx  esi,si
c0017037:	50                   	push   eax
c0017038:	57                   	push   edi
c0017039:	56                   	push   esi
c001703a:	e8 a7 fc ff ff       	call   c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>
c001703f:	5a                   	pop    edx
c0017040:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017043:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017047:	51                   	push   ecx
c0017048:	50                   	push   eax
c0017049:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001704d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017051:	55                   	push   ebp
c0017052:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017055:	83 c4 14             	add    esp,0x14
c0017058:	55                   	push   ebp
c0017059:	e8 a0 4b ff ff       	call   c000bbfe <File::close()>
c001705e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	48                   	dec    eax
c0017067:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c001706e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017073:	85 c0                	test   eax,eax
c0017075:	75 01                	jne    c0017078 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017077:	fb                   	sti    
c0017078:	83 ec 0c             	sub    esp,0xc
c001707b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017081:	e8 4a f5 ff ff       	call   c00165d0 <unblockTask(ThreadControlBlock*)>
c0017086:	83 c4 10             	add    esp,0x10
c0017089:	83 c4 2c             	add    esp,0x2c
c001708c:	88 d8                	mov    al,bl
c001708e:	5b                   	pop    ebx
c001708f:	5e                   	pop    esi
c0017090:	5f                   	pop    edi
c0017091:	5d                   	pop    ebp
c0017092:	c3                   	ret    

c0017093 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017093:	57                   	push   edi
c0017094:	56                   	push   esi
c0017095:	53                   	push   ebx
c0017096:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001709a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170a2:	83 e8 06             	sub    eax,0x6
c00170a5:	0f b7 c0             	movzx  eax,ax
c00170a8:	50                   	push   eax
c00170a9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00170ae:	50                   	push   eax
c00170af:	e8 32 fc ff ff       	call   c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>
c00170b4:	5a                   	pop    edx
c00170b5:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00170b8:	59                   	pop    ecx
c00170b9:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00170bc:	8d 51 fa             	lea    edx,[ecx-0x6]
c00170bf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170c5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170c8:	8d 56 02             	lea    edx,[esi+0x2]
c00170cb:	66 89 10             	mov    WORD PTR [eax],dx
c00170ce:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170d2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170d9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170dd:	0f b6 f1             	movzx  esi,cl
c00170e0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170ea:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170ee:	0f b6 d5             	movzx  edx,ch
c00170f1:	74 0a                	je     c00170fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00170f3:	c1 e2 08             	shl    edx,0x8
c00170f6:	09 f2                	or     edx,esi
c00170f8:	80 ce 02             	or     dh,0x2
c00170fb:	eb 08                	jmp    c0017105 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00170fd:	c1 e2 08             	shl    edx,0x8
c0017100:	09 f2                	or     edx,esi
c0017102:	80 e6 fd             	and    dh,0xfd
c0017105:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001710e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017112:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001711a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001711d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017125:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017128:	5b                   	pop    ebx
c0017129:	5e                   	pop    esi
c001712a:	5f                   	pop    edi
c001712b:	c3                   	ret    

c001712c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001712c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017131:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017136:	c1 e0 04             	shl    eax,0x4
c0017139:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001713c:	c3                   	ret    

c001713d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001713d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017142:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017147:	c1 e0 04             	shl    eax,0x4
c001714a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001714e:	c3                   	ret    

c001714f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001714f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017154:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017159:	c1 e0 04             	shl    eax,0x4
c001715c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001715f:	c3                   	ret    

c0017160 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017160:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017165:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001716a:	c1 e0 04             	shl    eax,0x4
c001716d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017171:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017174:	c3                   	ret    

c0017175 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017175:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001717a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001717f:	c1 e0 04             	shl    eax,0x4
c0017182:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017186:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001718a:	c3                   	ret    

c001718b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001718b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017190:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017195:	c1 e0 04             	shl    eax,0x4
c0017198:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001719c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001719f:	c3                   	ret    

c00171a0 <Vm::faultHandler(regs*)>:
c00171a0:	55                   	push   ebp
c00171a1:	57                   	push   edi
c00171a2:	56                   	push   esi
c00171a3:	53                   	push   ebx
c00171a4:	83 ec 2c             	sub    esp,0x2c
c00171a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171ab:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171ae:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00171b2:	0f b7 f8             	movzx  edi,ax
c00171b5:	52                   	push   edx
c00171b6:	0f b7 c0             	movzx  eax,ax
c00171b9:	50                   	push   eax
c00171ba:	e8 27 fb ff ff       	call   c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>
c00171bf:	5a                   	pop    edx
c00171c0:	59                   	pop    ecx
c00171c1:	89 c1                	mov    ecx,eax
c00171c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171ca:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00171cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171d3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171da:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171eb:	e8 f6 fa ff ff       	call   c0016ce6 <Vm::realToLinear(unsigned short, unsigned short)>
c00171f0:	5e                   	pop    esi
c00171f1:	be 06 00 00 00       	mov    esi,0x6
c00171f6:	5d                   	pop    ebp
c00171f7:	31 ed                	xor    ebp,ebp
c00171f9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171fe:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017201:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017207:	0f 84 74 02 00 00    	je     c0017481 <Vm::faultHandler(regs*)+0x2e1>
c001720d:	0f 87 94 00 00 00    	ja     c00172a7 <Vm::faultHandler(regs*)+0x107>
c0017213:	83 fa 66             	cmp    edx,0x66
c0017216:	0f 84 e2 01 00 00    	je     c00173fe <Vm::faultHandler(regs*)+0x25e>
c001721c:	77 47                	ja     c0017265 <Vm::faultHandler(regs*)+0xc5>
c001721e:	83 fa 36             	cmp    edx,0x36
c0017221:	0f 84 ca 01 00 00    	je     c00173f1 <Vm::faultHandler(regs*)+0x251>
c0017227:	77 1a                	ja     c0017243 <Vm::faultHandler(regs*)+0xa3>
c0017229:	83 fa 26             	cmp    edx,0x26
c001722c:	0f 84 98 01 00 00    	je     c00173ca <Vm::faultHandler(regs*)+0x22a>
c0017232:	83 fa 2e             	cmp    edx,0x2e
c0017235:	0f 85 21 06 00 00    	jne    c001785c <Vm::faultHandler(regs*)+0x6bc>
c001723b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001723e:	31 f6                	xor    esi,esi
c0017240:	41                   	inc    ecx
c0017241:	eb bb                	jmp    c00171fe <Vm::faultHandler(regs*)+0x5e>
c0017243:	83 fa 64             	cmp    edx,0x64
c0017246:	0f 84 8b 01 00 00    	je     c00173d7 <Vm::faultHandler(regs*)+0x237>
c001724c:	0f 87 92 01 00 00    	ja     c00173e4 <Vm::faultHandler(regs*)+0x244>
c0017252:	83 fa 3e             	cmp    edx,0x3e
c0017255:	0f 85 01 06 00 00    	jne    c001785c <Vm::faultHandler(regs*)+0x6bc>
c001725b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001725e:	be 01 00 00 00       	mov    esi,0x1
c0017263:	eb db                	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c0017265:	83 fa 6d             	cmp    edx,0x6d
c0017268:	0f 84 34 03 00 00    	je     c00175a2 <Vm::faultHandler(regs*)+0x402>
c001726e:	77 17                	ja     c0017287 <Vm::faultHandler(regs*)+0xe7>
c0017270:	83 fa 67             	cmp    edx,0x67
c0017273:	0f 84 92 01 00 00    	je     c001740b <Vm::faultHandler(regs*)+0x26b>
c0017279:	83 fa 6c             	cmp    edx,0x6c
c001727c:	0f 84 b1 02 00 00    	je     c0017533 <Vm::faultHandler(regs*)+0x393>
c0017282:	e9 d5 05 00 00       	jmp    c001785c <Vm::faultHandler(regs*)+0x6bc>
c0017287:	83 fa 6f             	cmp    edx,0x6f
c001728a:	0f 84 3d 04 00 00    	je     c00176cd <Vm::faultHandler(regs*)+0x52d>
c0017290:	0f 82 9f 03 00 00    	jb     c0017635 <Vm::faultHandler(regs*)+0x495>
c0017296:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001729c:	0f 84 76 01 00 00    	je     c0017418 <Vm::faultHandler(regs*)+0x278>
c00172a2:	e9 b5 05 00 00       	jmp    c001785c <Vm::faultHandler(regs*)+0x6bc>
c00172a7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00172ad:	0f 84 51 05 00 00    	je     c0017804 <Vm::faultHandler(regs*)+0x664>
c00172b3:	0f 87 a9 00 00 00    	ja     c0017362 <Vm::faultHandler(regs*)+0x1c2>
c00172b9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00172bf:	0f 84 d0 04 00 00    	je     c0017795 <Vm::faultHandler(regs*)+0x5f5>
c00172c5:	77 78                	ja     c001733f <Vm::faultHandler(regs*)+0x19f>
c00172c7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00172cd:	0f 84 0e 02 00 00    	je     c00174e1 <Vm::faultHandler(regs*)+0x341>
c00172d3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172d9:	0f 85 7d 05 00 00    	jne    c001785c <Vm::faultHandler(regs*)+0x6bc>
c00172df:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172e3:	89 d1                	mov    ecx,edx
c00172e5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172e8:	c1 e1 08             	shl    ecx,0x8
c00172eb:	09 ca                	or     edx,ecx
c00172ed:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172f0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172f4:	89 d1                	mov    ecx,edx
c00172f6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172fa:	c1 e1 08             	shl    ecx,0x8
c00172fd:	09 ca                	or     edx,ecx
c00172ff:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017302:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017306:	89 d1                	mov    ecx,edx
c0017308:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001730c:	c1 e1 08             	shl    ecx,0x8
c001730f:	09 ca                	or     edx,ecx
c0017311:	81 ca 00 02 02 00    	or     edx,0x20200
c0017317:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001731a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001731e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017324:	d1 e8                	shr    eax,1
c0017326:	83 e0 01             	and    eax,0x1
c0017329:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001732c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001732f:	83 c0 06             	add    eax,0x6
c0017332:	25 ff ff 00 00       	and    eax,0xffff
c0017337:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001733a:	e9 19 05 00 00       	jmp    c0017858 <Vm::faultHandler(regs*)+0x6b8>
c001733f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017345:	0f 84 8f 04 00 00    	je     c00177da <Vm::faultHandler(regs*)+0x63a>
c001734b:	0f 82 60 04 00 00    	jb     c00177b1 <Vm::faultHandler(regs*)+0x611>
c0017351:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017357:	0f 84 94 04 00 00    	je     c00177f1 <Vm::faultHandler(regs*)+0x651>
c001735d:	e9 fa 04 00 00       	jmp    c001785c <Vm::faultHandler(regs*)+0x6bc>
c0017362:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017368:	0f 84 d7 04 00 00    	je     c0017845 <Vm::faultHandler(regs*)+0x6a5>
c001736e:	77 2e                	ja     c001739e <Vm::faultHandler(regs*)+0x1fe>
c0017370:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017376:	0f 84 a4 04 00 00    	je     c0017820 <Vm::faultHandler(regs*)+0x680>
c001737c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017382:	0f 85 d4 04 00 00    	jne    c001785c <Vm::faultHandler(regs*)+0x6bc>
c0017388:	50                   	push   eax
c0017389:	50                   	push   eax
c001738a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001738e:	50                   	push   eax
c001738f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017393:	50                   	push   eax
c0017394:	e8 17 f9 ff ff       	call   c0016cb0 <Vm::outbv(unsigned short, unsigned char)>
c0017399:	e9 9f 04 00 00       	jmp    c001783d <Vm::faultHandler(regs*)+0x69d>
c001739e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00173a4:	0f 84 6d 01 00 00    	je     c0017517 <Vm::faultHandler(regs*)+0x377>
c00173aa:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00173b0:	0f 84 6f 01 00 00    	je     c0017525 <Vm::faultHandler(regs*)+0x385>
c00173b6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00173bc:	0f 85 9a 04 00 00    	jne    c001785c <Vm::faultHandler(regs*)+0x6bc>
c00173c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173c5:	e9 76 fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c00173ca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173cd:	be 02 00 00 00       	mov    esi,0x2
c00173d2:	e9 69 fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c00173d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173da:	be 03 00 00 00       	mov    esi,0x3
c00173df:	e9 5c fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c00173e4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e7:	be 04 00 00 00       	mov    esi,0x4
c00173ec:	e9 4f fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c00173f1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173f4:	be 05 00 00 00       	mov    esi,0x5
c00173f9:	e9 42 fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c00173fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017401:	bd 01 00 00 00       	mov    ebp,0x1
c0017406:	e9 35 fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c001740b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001740e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017413:	e9 28 fe ff ff       	jmp    c0017240 <Vm::faultHandler(regs*)+0xa0>
c0017418:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001741b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001741f:	83 e5 01             	and    ebp,0x1
c0017422:	74 30                	je     c0017454 <Vm::faultHandler(regs*)+0x2b4>
c0017424:	83 e9 04             	sub    ecx,0x4
c0017427:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001742d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017433:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017436:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017439:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001743f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017443:	0f 84 0c 04 00 00    	je     c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017449:	80 ce 02             	or     dh,0x2
c001744c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001744f:	e9 01 04 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017454:	83 e9 02             	sub    ecx,0x2
c0017457:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001745d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017460:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017464:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001746a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001746e:	74 05                	je     c0017475 <Vm::faultHandler(regs*)+0x2d5>
c0017470:	80 ce 02             	or     dh,0x2
c0017473:	eb 03                	jmp    c0017478 <Vm::faultHandler(regs*)+0x2d8>
c0017475:	80 e6 fd             	and    dh,0xfd
c0017478:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001747c:	e9 d4 03 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017481:	83 e5 01             	and    ebp,0x1
c0017484:	74 2a                	je     c00174b0 <Vm::faultHandler(regs*)+0x310>
c0017486:	8b 10                	mov    edx,DWORD PTR [eax]
c0017488:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001748e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017494:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017497:	8b 00                	mov    eax,DWORD PTR [eax]
c0017499:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001749f:	c1 e8 09             	shr    eax,0x9
c00174a2:	83 e0 01             	and    eax,0x1
c00174a5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174a8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174ab:	83 c0 04             	add    eax,0x4
c00174ae:	eb 24                	jmp    c00174d4 <Vm::faultHandler(regs*)+0x334>
c00174b0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00174b3:	81 ca 00 02 02 00    	or     edx,0x20200
c00174b9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174bc:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00174bf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174c5:	c1 e8 09             	shr    eax,0x9
c00174c8:	83 e0 01             	and    eax,0x1
c00174cb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174ce:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174d1:	83 c0 02             	add    eax,0x2
c00174d4:	25 ff ff 00 00       	and    eax,0xffff
c00174d9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174dc:	e9 74 03 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c00174e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174e5:	3d ee 00 00 00       	cmp    eax,0xee
c00174ea:	75 10                	jne    c00174fc <Vm::faultHandler(regs*)+0x35c>
c00174ec:	83 ec 0c             	sub    esp,0xc
c00174ef:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174f2:	e8 56 f8 ff ff       	call   c0016d4d <Vm::mainloop3(unsigned long)>
c00174f7:	e9 44 03 00 00       	jmp    c0017840 <Vm::faultHandler(regs*)+0x6a0>
c00174fc:	83 ec 0c             	sub    esp,0xc
c00174ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017503:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017507:	51                   	push   ecx
c0017508:	50                   	push   eax
c0017509:	53                   	push   ebx
c001750a:	e8 84 fb ff ff       	call   c0017093 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001750f:	83 c4 20             	add    esp,0x20
c0017512:	e9 41 03 00 00       	jmp    c0017858 <Vm::faultHandler(regs*)+0x6b8>
c0017517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001751c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017520:	e9 30 03 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001752a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001752e:	e9 22 03 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017533:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017536:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001753b:	74 2b                	je     c0017568 <Vm::faultHandler(regs*)+0x3c8>
c001753d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017544:	76 22                	jbe    c0017568 <Vm::faultHandler(regs*)+0x3c8>
c0017546:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001754a:	50                   	push   eax
c001754b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001754f:	50                   	push   eax
c0017550:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017554:	50                   	push   eax
c0017555:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017559:	50                   	push   eax
c001755a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001755e:	50                   	push   eax
c001755f:	6a 6c                	push   0x6c
c0017561:	6a 6c                	push   0x6c
c0017563:	e9 bd 01 00 00       	jmp    c0017725 <Vm::faultHandler(regs*)+0x585>
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001756f:	0f b7 f6             	movzx  esi,si
c0017572:	50                   	push   eax
c0017573:	e8 25 f7 ff ff       	call   c0016c9d <Vm::inbv(unsigned short)>
c0017578:	83 c4 0c             	add    esp,0xc
c001757b:	0f b6 c0             	movzx  eax,al
c001757e:	50                   	push   eax
c001757f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017583:	50                   	push   eax
c0017584:	56                   	push   esi
c0017585:	e8 d6 fb ff ff       	call   c0017160 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017590:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017594:	74 03                	je     c0017599 <Vm::faultHandler(regs*)+0x3f9>
c0017596:	48                   	dec    eax
c0017597:	eb 01                	jmp    c001759a <Vm::faultHandler(regs*)+0x3fa>
c0017599:	40                   	inc    eax
c001759a:	0f b7 c0             	movzx  eax,ax
c001759d:	e9 8b 00 00 00       	jmp    c001762d <Vm::faultHandler(regs*)+0x48d>
c00175a2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175a8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175ad:	74 29                	je     c00175d8 <Vm::faultHandler(regs*)+0x438>
c00175af:	3d ff ff 00 00       	cmp    eax,0xffff
c00175b4:	76 22                	jbe    c00175d8 <Vm::faultHandler(regs*)+0x438>
c00175b6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175ba:	50                   	push   eax
c00175bb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175bf:	50                   	push   eax
c00175c0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175c4:	50                   	push   eax
c00175c5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175c9:	50                   	push   eax
c00175ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175ce:	50                   	push   eax
c00175cf:	6a 6d                	push   0x6d
c00175d1:	6a 6d                	push   0x6d
c00175d3:	e9 4d 01 00 00       	jmp    c0017725 <Vm::faultHandler(regs*)+0x585>
c00175d8:	0f b7 c8             	movzx  ecx,ax
c00175db:	0f b7 f6             	movzx  esi,si
c00175de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175e1:	83 e5 01             	and    ebp,0x1
c00175e4:	74 20                	je     c0017606 <Vm::faultHandler(regs*)+0x466>
c00175e6:	ed                   	in     eax,dx
c00175e7:	55                   	push   ebp
c00175e8:	50                   	push   eax
c00175e9:	51                   	push   ecx
c00175ea:	56                   	push   esi
c00175eb:	e8 9b fb ff ff       	call   c001718b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175fa:	74 05                	je     c0017601 <Vm::faultHandler(regs*)+0x461>
c00175fc:	83 e8 04             	sub    eax,0x4
c00175ff:	eb 27                	jmp    c0017628 <Vm::faultHandler(regs*)+0x488>
c0017601:	83 c0 04             	add    eax,0x4
c0017604:	eb 22                	jmp    c0017628 <Vm::faultHandler(regs*)+0x488>
c0017606:	66 ed                	in     ax,dx
c0017608:	0f b7 c0             	movzx  eax,ax
c001760b:	57                   	push   edi
c001760c:	50                   	push   eax
c001760d:	51                   	push   ecx
c001760e:	56                   	push   esi
c001760f:	e8 61 fb ff ff       	call   c0017175 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001761a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001761e:	74 05                	je     c0017625 <Vm::faultHandler(regs*)+0x485>
c0017620:	83 e8 02             	sub    eax,0x2
c0017623:	eb 03                	jmp    c0017628 <Vm::faultHandler(regs*)+0x488>
c0017625:	83 c0 02             	add    eax,0x2
c0017628:	25 ff ff 00 00       	and    eax,0xffff
c001762d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017630:	e9 20 02 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017635:	8d 46 ff             	lea    eax,[esi-0x1]
c0017638:	0f b6 f0             	movzx  esi,al
c001763b:	83 fe 05             	cmp    esi,0x5
c001763e:	77 23                	ja     c0017663 <Vm::faultHandler(regs*)+0x4c3>
c0017640:	ff 24 b5 4c 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd4b4]
c0017647:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001764c:	eb 15                	jmp    c0017663 <Vm::faultHandler(regs*)+0x4c3>
c001764e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017652:	eb 0f                	jmp    c0017663 <Vm::faultHandler(regs*)+0x4c3>
c0017654:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017658:	eb 09                	jmp    c0017663 <Vm::faultHandler(regs*)+0x4c3>
c001765a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001765e:	eb 03                	jmp    c0017663 <Vm::faultHandler(regs*)+0x4c3>
c0017660:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017663:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017666:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001766b:	74 29                	je     c0017696 <Vm::faultHandler(regs*)+0x4f6>
c001766d:	3d ff ff 00 00       	cmp    eax,0xffff
c0017672:	76 22                	jbe    c0017696 <Vm::faultHandler(regs*)+0x4f6>
c0017674:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017678:	50                   	push   eax
c0017679:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001767d:	50                   	push   eax
c001767e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017682:	50                   	push   eax
c0017683:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017687:	50                   	push   eax
c0017688:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001768c:	50                   	push   eax
c001768d:	6a 6e                	push   0x6e
c001768f:	6a 6e                	push   0x6e
c0017691:	e9 8f 00 00 00       	jmp    c0017725 <Vm::faultHandler(regs*)+0x585>
c0017696:	0f b7 c0             	movzx  eax,ax
c0017699:	52                   	push   edx
c001769a:	52                   	push   edx
c001769b:	50                   	push   eax
c001769c:	57                   	push   edi
c001769d:	e8 8a fa ff ff       	call   c001712c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176a2:	59                   	pop    ecx
c00176a3:	0f b6 c0             	movzx  eax,al
c00176a6:	5e                   	pop    esi
c00176a7:	50                   	push   eax
c00176a8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176ac:	50                   	push   eax
c00176ad:	e8 fe f5 ff ff       	call   c0016cb0 <Vm::outbv(unsigned short, unsigned char)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176b8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176bc:	74 03                	je     c00176c1 <Vm::faultHandler(regs*)+0x521>
c00176be:	48                   	dec    eax
c00176bf:	eb 01                	jmp    c00176c2 <Vm::faultHandler(regs*)+0x522>
c00176c1:	40                   	inc    eax
c00176c2:	0f b7 c0             	movzx  eax,ax
c00176c5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00176c8:	e9 88 01 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c00176cd:	8d 46 ff             	lea    eax,[esi-0x1]
c00176d0:	0f b6 f0             	movzx  esi,al
c00176d3:	83 fe 05             	cmp    esi,0x5
c00176d6:	77 1e                	ja     c00176f6 <Vm::faultHandler(regs*)+0x556>
c00176d8:	ff 24 b5 64 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd49c]
c00176df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176e3:	eb 11                	jmp    c00176f6 <Vm::faultHandler(regs*)+0x556>
c00176e5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176e8:	eb 0c                	jmp    c00176f6 <Vm::faultHandler(regs*)+0x556>
c00176ea:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176ed:	eb 07                	jmp    c00176f6 <Vm::faultHandler(regs*)+0x556>
c00176ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176f2:	eb 02                	jmp    c00176f6 <Vm::faultHandler(regs*)+0x556>
c00176f4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176f6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176f9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176fe:	74 37                	je     c0017737 <Vm::faultHandler(regs*)+0x597>
c0017700:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017706:	76 2f                	jbe    c0017737 <Vm::faultHandler(regs*)+0x597>
c0017708:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001770c:	50                   	push   eax
c001770d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017711:	50                   	push   eax
c0017712:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017716:	50                   	push   eax
c0017717:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001771b:	50                   	push   eax
c001771c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017720:	50                   	push   eax
c0017721:	6a 6f                	push   0x6f
c0017723:	6a 6f                	push   0x6f
c0017725:	68 f0 2a 02 c0       	push   0xc0022af0
c001772a:	e8 16 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001772f:	83 c4 20             	add    esp,0x20
c0017732:	e9 83 01 00 00       	jmp    c00178ba <Vm::faultHandler(regs*)+0x71a>
c0017737:	0f b7 d7             	movzx  edx,di
c001773a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001773d:	0f b7 c6             	movzx  eax,si
c0017740:	81 e1 00 04 00 00    	and    ecx,0x400
c0017746:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017749:	83 e5 01             	and    ebp,0x1
c001774c:	74 1d                	je     c001776b <Vm::faultHandler(regs*)+0x5cb>
c001774e:	55                   	push   ebp
c001774f:	55                   	push   ebp
c0017750:	50                   	push   eax
c0017751:	52                   	push   edx
c0017752:	e8 f8 f9 ff ff       	call   c001714f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017757:	83 c4 10             	add    esp,0x10
c001775a:	89 fa                	mov    edx,edi
c001775c:	ef                   	out    dx,eax
c001775d:	85 c9                	test   ecx,ecx
c001775f:	74 05                	je     c0017766 <Vm::faultHandler(regs*)+0x5c6>
c0017761:	83 ee 04             	sub    esi,0x4
c0017764:	eb 21                	jmp    c0017787 <Vm::faultHandler(regs*)+0x5e7>
c0017766:	83 c6 04             	add    esi,0x4
c0017769:	eb 1c                	jmp    c0017787 <Vm::faultHandler(regs*)+0x5e7>
c001776b:	55                   	push   ebp
c001776c:	55                   	push   ebp
c001776d:	50                   	push   eax
c001776e:	52                   	push   edx
c001776f:	e8 c9 f9 ff ff       	call   c001713d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	89 fa                	mov    edx,edi
c0017779:	66 ef                	out    dx,ax
c001777b:	85 c9                	test   ecx,ecx
c001777d:	74 05                	je     c0017784 <Vm::faultHandler(regs*)+0x5e4>
c001777f:	83 ee 02             	sub    esi,0x2
c0017782:	eb 03                	jmp    c0017787 <Vm::faultHandler(regs*)+0x5e7>
c0017784:	83 c6 02             	add    esi,0x2
c0017787:	81 e6 ff ff 00 00    	and    esi,0xffff
c001778d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017790:	e9 c0 00 00 00       	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017795:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001779c:	83 ec 0c             	sub    esp,0xc
c001779f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177a3:	50                   	push   eax
c00177a4:	e8 f4 f4 ff ff       	call   c0016c9d <Vm::inbv(unsigned short)>
c00177a9:	0f b6 c0             	movzx  eax,al
c00177ac:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177af:	eb 3a                	jmp    c00177eb <Vm::faultHandler(regs*)+0x64b>
c00177b1:	83 e5 01             	and    ebp,0x1
c00177b4:	74 07                	je     c00177bd <Vm::faultHandler(regs*)+0x61d>
c00177b6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177ba:	ed                   	in     eax,dx
c00177bb:	eb 14                	jmp    c00177d1 <Vm::faultHandler(regs*)+0x631>
c00177bd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00177c0:	66 31 f6             	xor    si,si
c00177c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00177c6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177ca:	66 ed                	in     ax,dx
c00177cc:	0f b7 c0             	movzx  eax,ax
c00177cf:	09 f0                	or     eax,esi
c00177d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177d4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177d8:	eb 7e                	jmp    c0017858 <Vm::faultHandler(regs*)+0x6b8>
c00177da:	52                   	push   edx
c00177db:	52                   	push   edx
c00177dc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177e0:	50                   	push   eax
c00177e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177e5:	50                   	push   eax
c00177e6:	e8 c5 f4 ff ff       	call   c0016cb0 <Vm::outbv(unsigned short, unsigned char)>
c00177eb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177ef:	eb 4f                	jmp    c0017840 <Vm::faultHandler(regs*)+0x6a0>
c00177f1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177f8:	83 e5 01             	and    ebp,0x1
c00177fb:	74 03                	je     c0017800 <Vm::faultHandler(regs*)+0x660>
c00177fd:	ef                   	out    dx,eax
c00177fe:	eb d4                	jmp    c00177d4 <Vm::faultHandler(regs*)+0x634>
c0017800:	66 ef                	out    dx,ax
c0017802:	eb d0                	jmp    c00177d4 <Vm::faultHandler(regs*)+0x634>
c0017804:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017812:	50                   	push   eax
c0017813:	e8 85 f4 ff ff       	call   c0016c9d <Vm::inbv(unsigned short)>
c0017818:	0f b6 c0             	movzx  eax,al
c001781b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001781e:	eb 1d                	jmp    c001783d <Vm::faultHandler(regs*)+0x69d>
c0017820:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017823:	83 e5 01             	and    ebp,0x1
c0017826:	74 03                	je     c001782b <Vm::faultHandler(regs*)+0x68b>
c0017828:	ed                   	in     eax,dx
c0017829:	eb 0d                	jmp    c0017838 <Vm::faultHandler(regs*)+0x698>
c001782b:	66 ed                	in     ax,dx
c001782d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017830:	0f b7 c0             	movzx  eax,ax
c0017833:	66 31 d2             	xor    dx,dx
c0017836:	09 d0                	or     eax,edx
c0017838:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001783b:	eb 18                	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c001783d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017840:	83 c4 10             	add    esp,0x10
c0017843:	eb 13                	jmp    c0017858 <Vm::faultHandler(regs*)+0x6b8>
c0017845:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017848:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001784b:	83 e5 01             	and    ebp,0x1
c001784e:	74 03                	je     c0017853 <Vm::faultHandler(regs*)+0x6b3>
c0017850:	ef                   	out    dx,eax
c0017851:	eb 02                	jmp    c0017855 <Vm::faultHandler(regs*)+0x6b5>
c0017853:	66 ef                	out    dx,ax
c0017855:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017858:	b0 01                	mov    al,0x1
c001785a:	eb 60                	jmp    c00178bc <Vm::faultHandler(regs*)+0x71c>
c001785c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017860:	50                   	push   eax
c0017861:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017865:	50                   	push   eax
c0017866:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001786a:	50                   	push   eax
c001786b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001786f:	50                   	push   eax
c0017870:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017874:	50                   	push   eax
c0017875:	52                   	push   edx
c0017876:	52                   	push   edx
c0017877:	68 1d 2b 02 c0       	push   0xc0022b1d
c001787c:	e8 c4 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017881:	83 c4 20             	add    esp,0x20
c0017884:	83 ec 0c             	sub    esp,0xc
c0017887:	6a 60                	push   0x60
c0017889:	e8 0f f4 ff ff       	call   c0016c9d <Vm::inbv(unsigned short)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	0f b6 d0             	movzx  edx,al
c0017894:	83 fa 1c             	cmp    edx,0x1c
c0017897:	74 05                	je     c001789e <Vm::faultHandler(regs*)+0x6fe>
c0017899:	83 fa 5a             	cmp    edx,0x5a
c001789c:	75 e6                	jne    c0017884 <Vm::faultHandler(regs*)+0x6e4>
c001789e:	0f b6 c0             	movzx  eax,al
c00178a1:	83 f8 1c             	cmp    eax,0x1c
c00178a4:	74 05                	je     c00178ab <Vm::faultHandler(regs*)+0x70b>
c00178a6:	83 f8 5a             	cmp    eax,0x5a
c00178a9:	75 0f                	jne    c00178ba <Vm::faultHandler(regs*)+0x71a>
c00178ab:	83 ec 0c             	sub    esp,0xc
c00178ae:	6a 60                	push   0x60
c00178b0:	e8 e8 f3 ff ff       	call   c0016c9d <Vm::inbv(unsigned short)>
c00178b5:	83 c4 10             	add    esp,0x10
c00178b8:	eb e4                	jmp    c001789e <Vm::faultHandler(regs*)+0x6fe>
c00178ba:	31 c0                	xor    eax,eax
c00178bc:	83 c4 2c             	add    esp,0x2c
c00178bf:	5b                   	pop    ebx
c00178c0:	5e                   	pop    esi
c00178c1:	5f                   	pop    edi
c00178c2:	5d                   	pop    ebp
c00178c3:	c3                   	ret    

c00178c4 <noCopro(unsigned long)>:
c00178c4:	c3                   	ret    

c00178c5 <nmiHandler(regs*, void*)>:
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	50                   	push   eax
c00178d1:	e8 e0 f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c00178d6:	83 c4 10             	add    esp,0x10
c00178d9:	90                   	nop
c00178da:	83 c4 0c             	add    esp,0xc
c00178dd:	c3                   	ret    

c00178de <doubleFault(regs*, void*)>:
c00178de:	55                   	push   ebp
c00178df:	89 e5                	mov    ebp,esp
c00178e1:	83 ec 08             	sub    esp,0x8
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	68 7c 2b 02 c0       	push   0xc0022b7c
c00178ec:	e8 62 9d ff ff       	call   c0011653 <KePanic(char const*)>
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	90                   	nop
c00178f5:	c9                   	leave  
c00178f6:	c3                   	ret    

c00178f7 <displayDebugInfo(regs*)>:
c00178f7:	83 ec 1c             	sub    esp,0x1c
c00178fa:	0f 20 c0             	mov    eax,cr0
c00178fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017901:	0f 20 d0             	mov    eax,cr2
c0017904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017908:	0f 20 d8             	mov    eax,cr3
c001790b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001790f:	0f 20 e0             	mov    eax,cr4
c0017912:	89 04 24             	mov    DWORD PTR [esp],eax
c0017915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017919:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001791c:	83 ec 08             	sub    esp,0x8
c001791f:	50                   	push   eax
c0017920:	68 98 2b 02 c0       	push   0xc0022b98
c0017925:	e8 1b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017931:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	50                   	push   eax
c0017938:	68 89 2b 02 c0       	push   0xc0022b89
c001793d:	e8 03 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017949:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001794c:	83 ec 08             	sub    esp,0x8
c001794f:	50                   	push   eax
c0017950:	68 94 2b 02 c0       	push   0xc0022b94
c0017955:	e8 eb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017961:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017964:	83 ec 08             	sub    esp,0x8
c0017967:	50                   	push   eax
c0017968:	68 a3 2b 02 c0       	push   0xc0022ba3
c001796d:	e8 d3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017972:	83 c4 10             	add    esp,0x10
c0017975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017979:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001797c:	83 ec 08             	sub    esp,0x8
c001797f:	50                   	push   eax
c0017980:	68 ae 2b 02 c0       	push   0xc0022bae
c0017985:	e8 bb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	83 ec 08             	sub    esp,0x8
c0017990:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017994:	68 b9 2b 02 c0       	push   0xc0022bb9
c0017999:	e8 a7 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001799e:	83 c4 10             	add    esp,0x10
c00179a1:	83 ec 08             	sub    esp,0x8
c00179a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179a8:	68 c4 2b 02 c0       	push   0xc0022bc4
c00179ad:	e8 93 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179bc:	c1 e0 05             	shl    eax,0x5
c00179bf:	8d 90 40 3f 02 c0    	lea    edx,[eax-0x3ffdc0c0]
c00179c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179cc:	83 ec 04             	sub    esp,0x4
c00179cf:	52                   	push   edx
c00179d0:	50                   	push   eax
c00179d1:	68 cf 2b 02 c0       	push   0xc0022bcf
c00179d6:	e8 6a 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179db:	83 c4 10             	add    esp,0x10
c00179de:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	50                   	push   eax
c00179ed:	e8 67 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00179f2:	83 c4 10             	add    esp,0x10
c00179f5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a00:	83 ec 08             	sub    esp,0x8
c0017a03:	68 de 2b 02 c0       	push   0xc0022bde
c0017a08:	50                   	push   eax
c0017a09:	e8 98 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a0e:	83 c4 10             	add    esp,0x10
c0017a11:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a20:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017a23:	83 ec 08             	sub    esp,0x8
c0017a26:	52                   	push   edx
c0017a27:	50                   	push   eax
c0017a28:	e8 33 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a2d:	83 c4 10             	add    esp,0x10
c0017a30:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a3b:	83 ec 08             	sub    esp,0x8
c0017a3e:	68 ec 2b 02 c0       	push   0xc0022bec
c0017a43:	50                   	push   eax
c0017a44:	e8 5d 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a57:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a5c:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a5e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a61:	83 c2 0c             	add    edx,0xc
c0017a64:	83 ec 08             	sub    esp,0x8
c0017a67:	52                   	push   edx
c0017a68:	50                   	push   eax
c0017a69:	e8 38 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a6e:	83 c4 10             	add    esp,0x10
c0017a71:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a7c:	83 ec 08             	sub    esp,0x8
c0017a7f:	68 f5 2b 02 c0       	push   0xc0022bf5
c0017a84:	50                   	push   eax
c0017a85:	e8 1c 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a8a:	83 c4 10             	add    esp,0x10
c0017a8d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a9c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a9f:	83 ec 08             	sub    esp,0x8
c0017aa2:	52                   	push   edx
c0017aa3:	50                   	push   eax
c0017aa4:	e8 b7 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab7:	83 ec 08             	sub    esp,0x8
c0017aba:	68 fd 2b 02 c0       	push   0xc0022bfd
c0017abf:	50                   	push   eax
c0017ac0:	e8 e1 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ac5:	83 c4 10             	add    esp,0x10
c0017ac8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017acd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ad7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ada:	83 ec 08             	sub    esp,0x8
c0017add:	52                   	push   edx
c0017ade:	50                   	push   eax
c0017adf:	e8 7c 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ae4:	83 c4 10             	add    esp,0x10
c0017ae7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af2:	83 ec 08             	sub    esp,0x8
c0017af5:	68 05 2c 02 c0       	push   0xc0022c05
c0017afa:	50                   	push   eax
c0017afb:	e8 a6 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b00:	83 c4 10             	add    esp,0x10
c0017b03:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b0e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b12:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017b15:	83 ec 08             	sub    esp,0x8
c0017b18:	52                   	push   edx
c0017b19:	50                   	push   eax
c0017b1a:	e8 41 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b2d:	83 ec 08             	sub    esp,0x8
c0017b30:	68 0d 2c 02 c0       	push   0xc0022c0d
c0017b35:	50                   	push   eax
c0017b36:	e8 6b 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b3b:	83 c4 10             	add    esp,0x10
c0017b3e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b4d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b50:	83 ec 08             	sub    esp,0x8
c0017b53:	52                   	push   edx
c0017b54:	50                   	push   eax
c0017b55:	e8 06 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b68:	83 ec 08             	sub    esp,0x8
c0017b6b:	68 15 2c 02 c0       	push   0xc0022c15
c0017b70:	50                   	push   eax
c0017b71:	e8 30 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b76:	83 c4 10             	add    esp,0x10
c0017b79:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b7e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b88:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b8b:	83 ec 08             	sub    esp,0x8
c0017b8e:	52                   	push   edx
c0017b8f:	50                   	push   eax
c0017b90:	e8 cb 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba3:	83 ec 08             	sub    esp,0x8
c0017ba6:	68 1d 2c 02 c0       	push   0xc0022c1d
c0017bab:	50                   	push   eax
c0017bac:	e8 f5 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017bc6:	83 ec 08             	sub    esp,0x8
c0017bc9:	52                   	push   edx
c0017bca:	50                   	push   eax
c0017bcb:	e8 90 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bde:	83 ec 08             	sub    esp,0x8
c0017be1:	68 25 2c 02 c0       	push   0xc0022c25
c0017be6:	50                   	push   eax
c0017be7:	e8 ba 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bec:	83 c4 10             	add    esp,0x10
c0017bef:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bfa:	83 ec 08             	sub    esp,0x8
c0017bfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c01:	50                   	push   eax
c0017c02:	e8 59 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c07:	83 c4 10             	add    esp,0x10
c0017c0a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c15:	83 ec 08             	sub    esp,0x8
c0017c18:	68 2e 2c 02 c0       	push   0xc0022c2e
c0017c1d:	50                   	push   eax
c0017c1e:	e8 83 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c23:	83 c4 10             	add    esp,0x10
c0017c26:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c31:	83 ec 08             	sub    esp,0x8
c0017c34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c38:	50                   	push   eax
c0017c39:	e8 22 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c4c:	83 ec 08             	sub    esp,0x8
c0017c4f:	68 36 2c 02 c0       	push   0xc0022c36
c0017c54:	50                   	push   eax
c0017c55:	e8 4c 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c5a:	83 c4 10             	add    esp,0x10
c0017c5d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c68:	83 ec 08             	sub    esp,0x8
c0017c6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c6f:	50                   	push   eax
c0017c70:	e8 eb 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	fa                   	cli    
c0017c79:	f4                   	hlt    
c0017c7a:	eb fe                	jmp    c0017c7a <displayDebugInfo(regs*)+0x383>

c0017c7c <HalSystemIdle()>:
c0017c7c:	56                   	push   esi
c0017c7d:	53                   	push   ebx
c0017c7e:	83 ec 14             	sub    esp,0x14
c0017c81:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c8c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c92:	83 e0 04             	and    eax,0x4
c0017c95:	0f b6 c0             	movzx  eax,al
c0017c98:	85 c0                	test   eax,eax
c0017c9a:	0f 95 c0             	setne  al
c0017c9d:	0f b6 c0             	movzx  eax,al
c0017ca0:	85 c0                	test   eax,eax
c0017ca2:	74 4c                	je     c0017cf0 <HalSystemIdle()+0x74>
c0017ca4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017ca9:	83 ec 08             	sub    esp,0x8
c0017cac:	68 e1 00 00 00       	push   0xe1
c0017cb1:	50                   	push   eax
c0017cb2:	e8 09 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017cb7:	83 c4 10             	add    esp,0x10
c0017cba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cc2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017cc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ccb:	83 e2 02             	and    edx,0x2
c0017cce:	89 d3                	mov    ebx,edx
c0017cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cd4:	83 e2 00             	and    edx,0x0
c0017cd7:	89 d6                	mov    esi,edx
c0017cd9:	56                   	push   esi
c0017cda:	53                   	push   ebx
c0017cdb:	68 e1 00 00 00       	push   0xe1
c0017ce0:	50                   	push   eax
c0017ce1:	e8 06 f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	e8 a6 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cee:	eb 01                	jmp    c0017cf1 <HalSystemIdle()+0x75>
c0017cf0:	f4                   	hlt    
c0017cf1:	90                   	nop
c0017cf2:	83 c4 14             	add    esp,0x14
c0017cf5:	5b                   	pop    ebx
c0017cf6:	5e                   	pop    esi
c0017cf7:	c3                   	ret    

c0017cf8 <displayProgramFault(char const*)>:
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	83 ec 0c             	sub    esp,0xc
c0017cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d02:	e8 3e 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d07:	83 c4 10             	add    esp,0x10
c0017d0a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d11:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d1a:	85 c0                	test   eax,eax
c0017d1c:	74 21                	je     c0017d3f <displayProgramFault(char const*)+0x47>
c0017d1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d23:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d28:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d2e:	6a 04                	push   0x4
c0017d30:	6a 0f                	push   0xf
c0017d32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d36:	50                   	push   eax
c0017d37:	e8 dc 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d3c:	83 c4 10             	add    esp,0x10
c0017d3f:	90                   	nop
c0017d40:	83 c4 0c             	add    esp,0xc
c0017d43:	c3                   	ret    

c0017d44 <gpFault(regs*, void*)>:
c0017d44:	83 ec 1c             	sub    esp,0x1c
c0017d47:	c7 05 74 c7 02 c0 a0 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00171a0
c0017d51:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d56:	85 c0                	test   eax,eax
c0017d58:	74 1e                	je     c0017d78 <gpFault(regs*, void*)+0x34>
c0017d5a:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d66:	ff d0                	call   eax
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d6f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d74:	85 c0                	test   eax,eax
c0017d76:	75 2e                	jne    c0017da6 <gpFault(regs*, void*)+0x62>
c0017d78:	83 ec 0c             	sub    esp,0xc
c0017d7b:	68 3e 2c 02 c0       	push   0xc0022c3e
c0017d80:	e8 73 ff ff ff       	call   c0017cf8 <displayProgramFault(char const*)>
c0017d85:	83 c4 10             	add    esp,0x10
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d8f:	e8 63 fb ff ff       	call   c00178f7 <displayDebugInfo(regs*)>
c0017d94:	83 c4 10             	add    esp,0x10
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	6a 00                	push   0x0
c0017d9c:	e8 a3 ed ff ff       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	eb 01                	jmp    c0017da7 <gpFault(regs*, void*)+0x63>
c0017da6:	90                   	nop
c0017da7:	83 c4 1c             	add    esp,0x1c
c0017daa:	c3                   	ret    

c0017dab <pgFault(regs*, void*)>:
c0017dab:	83 ec 1c             	sub    esp,0x1c
c0017dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017db5:	0f 20 d0             	mov    eax,cr2
c0017db8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dc0:	83 ec 04             	sub    esp,0x4
c0017dc3:	52                   	push   edx
c0017dc4:	50                   	push   eax
c0017dc5:	68 1c 2d 02 c0       	push   0xc0022d1c
c0017dca:	e8 76 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ddc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017de2:	0f 20 d2             	mov    edx,cr2
c0017de5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017de9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ded:	83 ec 08             	sub    esp,0x8
c0017df0:	52                   	push   edx
c0017df1:	50                   	push   eax
c0017df2:	e8 99 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	0f b6 c0             	movzx  eax,al
c0017dfd:	85 c0                	test   eax,eax
c0017dff:	75 2e                	jne    c0017e2f <pgFault(regs*, void*)+0x84>
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	68 57 2c 02 c0       	push   0xc0022c57
c0017e09:	e8 ea fe ff ff       	call   c0017cf8 <displayProgramFault(char const*)>
c0017e0e:	83 c4 10             	add    esp,0x10
c0017e11:	83 ec 0c             	sub    esp,0xc
c0017e14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e18:	e8 da fa ff ff       	call   c00178f7 <displayDebugInfo(regs*)>
c0017e1d:	83 c4 10             	add    esp,0x10
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	6a 00                	push   0x0
c0017e25:	e8 1a ed ff ff       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	eb 01                	jmp    c0017e30 <pgFault(regs*, void*)+0x85>
c0017e2f:	90                   	nop
c0017e30:	83 c4 1c             	add    esp,0x1c
c0017e33:	c3                   	ret    

c0017e34 <otherISRHandler(regs*, void*)>:
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	83 ec 0c             	sub    esp,0xc
c0017e3a:	68 44 2d 02 c0       	push   0xc0022d44
c0017e3f:	e8 b4 fe ff ff       	call   c0017cf8 <displayProgramFault(char const*)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e4e:	e8 a4 fa ff ff       	call   c00178f7 <displayDebugInfo(regs*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	83 ec 0c             	sub    esp,0xc
c0017e59:	6a 00                	push   0x0
c0017e5b:	e8 e4 ec ff ff       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	90                   	nop
c0017e64:	83 c4 0c             	add    esp,0xc
c0017e67:	c3                   	ret    

c0017e68 <opcodeFault(regs*, void*)>:
c0017e68:	55                   	push   ebp
c0017e69:	89 e5                	mov    ebp,esp
c0017e6b:	83 ec 08             	sub    esp,0x8
c0017e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e74:	83 ec 08             	sub    esp,0x8
c0017e77:	50                   	push   eax
c0017e78:	68 62 2c 02 c0       	push   0xc0022c62
c0017e7d:	e8 c3 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e90:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e96:	0f b6 c0             	movzx  eax,al
c0017e99:	85 c0                	test   eax,eax
c0017e9b:	74 21                	je     c0017ebe <opcodeFault(regs*, void*)+0x56>
c0017e9d:	83 ec 0c             	sub    esp,0xc
c0017ea0:	68 6c 2d 02 c0       	push   0xc0022d6c
c0017ea5:	e8 9b 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017eaa:	83 c4 10             	add    esp,0x10
c0017ead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017eb3:	8d 50 19             	lea    edx,[eax+0x19]
c0017eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eb9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ebc:	eb 2b                	jmp    c0017ee9 <opcodeFault(regs*, void*)+0x81>
c0017ebe:	83 ec 0c             	sub    esp,0xc
c0017ec1:	68 70 2c 02 c0       	push   0xc0022c70
c0017ec6:	e8 2d fe ff ff       	call   c0017cf8 <displayProgramFault(char const*)>
c0017ecb:	83 c4 10             	add    esp,0x10
c0017ece:	83 ec 0c             	sub    esp,0xc
c0017ed1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ed4:	e8 1e fa ff ff       	call   c00178f7 <displayDebugInfo(regs*)>
c0017ed9:	83 c4 10             	add    esp,0x10
c0017edc:	83 ec 0c             	sub    esp,0xc
c0017edf:	6a 00                	push   0x0
c0017ee1:	e8 5e ec ff ff       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	c9                   	leave  
c0017eea:	c3                   	ret    

c0017eeb <i386SaveCoprocessor(void*)>:
c0017eeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017eef:	83 c0 3f             	add    eax,0x3f
c0017ef2:	83 e0 c0             	and    eax,0xffffffc0
c0017ef5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ef9:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017eff <i386LoadCoprocessor(void*)>:
c0017eff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f03:	83 c0 3f             	add    eax,0x3f
c0017f06:	83 e0 c0             	and    eax,0xffffffc0
c0017f09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f0d:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017f13 <x87EmulHandler(regs*, void*)>:
c0017f13:	53                   	push   ebx
c0017f14:	83 ec 08             	sub    esp,0x8
c0017f17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f1c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017f20:	74 10                	je     c0017f32 <x87EmulHandler(regs*, void*)+0x1f>
c0017f22:	83 ec 0c             	sub    esp,0xc
c0017f25:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017f2a:	e8 24 97 ff ff       	call   c0011653 <KePanic(char const*)>
c0017f2f:	83 c4 10             	add    esp,0x10
c0017f32:	0f 20 c0             	mov    eax,cr0
c0017f35:	a8 08                	test   al,0x8
c0017f37:	74 59                	je     c0017f92 <x87EmulHandler(regs*, void*)+0x7f>
c0017f39:	0f 06                	clts   
c0017f3b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f40:	85 c0                	test   eax,eax
c0017f42:	74 0e                	je     c0017f52 <x87EmulHandler(regs*, void*)+0x3f>
c0017f44:	83 ec 0c             	sub    esp,0xc
c0017f47:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f4a:	e8 9c ff ff ff       	call   c0017eeb <i386SaveCoprocessor(void*)>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f58:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f5c:	75 12                	jne    c0017f70 <x87EmulHandler(regs*, void*)+0x5d>
c0017f5e:	83 ec 0c             	sub    esp,0xc
c0017f61:	68 40 02 00 00       	push   0x240
c0017f66:	e8 4b fb fe ff       	call   c0007ab6 <malloc>
c0017f6b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f6e:	eb 10                	jmp    c0017f80 <x87EmulHandler(regs*, void*)+0x6d>
c0017f70:	83 ec 0c             	sub    esp,0xc
c0017f73:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f78:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f7b:	e8 7f ff ff ff       	call   c0017eff <i386LoadCoprocessor(void*)>
c0017f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f8d:	83 c4 08             	add    esp,0x8
c0017f90:	5b                   	pop    ebx
c0017f91:	c3                   	ret    
c0017f92:	83 ec 0c             	sub    esp,0xc
c0017f95:	68 91 2c 02 c0       	push   0xc0022c91
c0017f9a:	e8 a6 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f9f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017fa7:	83 c4 18             	add    esp,0x18
c0017faa:	5b                   	pop    ebx
c0017fab:	e9 94 eb ff ff       	jmp    c0016b44 <Thr::terminateFromIRQ(int)>

c0017fb0 <HalInitialiseCoprocessor()>:
c0017fb0:	83 ec 10             	sub    esp,0x10
c0017fb3:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017fbd:	6a 00                	push   0x0
c0017fbf:	68 13 7f 01 c0       	push   0xc0017f13
c0017fc4:	6a 07                	push   0x7
c0017fc6:	e8 63 4f ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fcb:	e8 50 70 00 00       	call   c001f020 <avxDetect>
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	85 c0                	test   eax,eax
c0017fd5:	74 1c                	je     c0017ff3 <HalInitialiseCoprocessor()+0x43>
c0017fd7:	c7 05 70 c7 02 c0 4a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f04a
c0017fe1:	c7 05 6c c7 02 c0 5b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f05b
c0017feb:	83 c4 0c             	add    esp,0xc
c0017fee:	e9 79 70 00 00       	jmp    c001f06c <avxInit>
c0017ff3:	e8 b8 73 00 00       	call   c001f3b0 <absolutelyNoChanceInHell>
c0017ff8:	85 c0                	test   eax,eax
c0017ffa:	74 1c                	je     c0018018 <HalInitialiseCoprocessor()+0x68>
c0017ffc:	c7 05 70 c7 02 c0 c8 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3c8
c0018006:	c7 05 6c c7 02 c0 d0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3d0
c0018010:	83 c4 0c             	add    esp,0xc
c0018013:	e9 c0 73 00 00       	jmp    c001f3d8 <sseInit>
c0018018:	e8 d9 73 00 00       	call   c001f3f6 <x87Detect>
c001801d:	85 c0                	test   eax,eax
c001801f:	74 1c                	je     c001803d <HalInitialiseCoprocessor()+0x8d>
c0018021:	c7 05 70 c7 02 c0 11 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f411
c001802b:	c7 05 6c c7 02 c0 18 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f418
c0018035:	83 c4 0c             	add    esp,0xc
c0018038:	e9 e2 73 00 00       	jmp    c001f41f <x87Init>
c001803d:	c7 05 70 c7 02 c0 c4 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00178c4
c0018047:	c7 05 6c c7 02 c0 c4 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00178c4
c0018051:	0f 20 c0             	mov    eax,cr0
c0018054:	83 c8 04             	or     eax,0x4
c0018057:	0f 22 c0             	mov    cr0,eax
c001805a:	83 c4 0c             	add    esp,0xc
c001805d:	c3                   	ret    

c001805e <HalPanic(char const*)>:
c001805e:	53                   	push   ebx
c001805f:	83 ec 10             	sub    esp,0x10
c0018062:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018066:	fa                   	cli    
c0018067:	53                   	push   ebx
c0018068:	68 a7 2c 02 c0       	push   0xc0022ca7
c001806d:	e8 d3 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0018072:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018077:	83 c4 10             	add    esp,0x10
c001807a:	85 c0                	test   eax,eax
c001807c:	74 09                	je     c0018087 <HalPanic(char const*)+0x29>
c001807e:	83 ec 0c             	sub    esp,0xc
c0018081:	53                   	push   ebx
c0018082:	ff d0                	call   eax
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001808c:	85 c0                	test   eax,eax
c001808e:	0f 84 dc 00 00 00    	je     c0018170 <HalPanic(char const*)+0x112>
c0018094:	52                   	push   edx
c0018095:	6a 01                	push   0x1
c0018097:	6a 0f                	push   0xf
c0018099:	50                   	push   eax
c001809a:	e8 15 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001809f:	59                   	pop    ecx
c00180a0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a6:	e8 f9 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c00180ab:	58                   	pop    eax
c00180ac:	5a                   	pop    edx
c00180ad:	68 64 0e 02 c0       	push   0xc0020e64
c00180b2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b8:	e8 2f 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c00180bd:	83 c4 0c             	add    esp,0xc
c00180c0:	6a 01                	push   0x1
c00180c2:	6a 0f                	push   0xf
c00180c4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ca:	e8 e5 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180cf:	59                   	pop    ecx
c00180d0:	58                   	pop    eax
c00180d1:	68 c0 2c 02 c0       	push   0xc0022cc0
c00180d6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180dc:	e8 c5 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180e1:	83 c4 0c             	add    esp,0xc
c00180e4:	6a 0f                	push   0xf
c00180e6:	6a 01                	push   0x1
c00180e8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ee:	e8 c1 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180f3:	58                   	pop    eax
c00180f4:	5a                   	pop    edx
c00180f5:	68 c9 2c 02 c0       	push   0xc0022cc9
c00180fa:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018100:	e8 a1 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018105:	83 c4 0c             	add    esp,0xc
c0018108:	6a 01                	push   0x1
c001810a:	6a 0f                	push   0xf
c001810c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018112:	e8 9d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018117:	59                   	pop    ecx
c0018118:	58                   	pop    eax
c0018119:	68 0d 2d 02 c0       	push   0xc0022d0d
c001811e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018124:	e8 7d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018129:	58                   	pop    eax
c001812a:	5a                   	pop    edx
c001812b:	68 d6 2c 02 c0       	push   0xc0022cd6
c0018130:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018136:	e8 6b 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001813b:	59                   	pop    ecx
c001813c:	58                   	pop    eax
c001813d:	68 10 2d 02 c0       	push   0xc0022d10
c0018142:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018148:	e8 59 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001814d:	58                   	pop    eax
c001814e:	5a                   	pop    edx
c001814f:	53                   	push   ebx
c0018150:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018156:	e8 4b 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001815b:	59                   	pop    ecx
c001815c:	5b                   	pop    ebx
c001815d:	68 0d 2d 02 c0       	push   0xc0022d0d
c0018162:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018168:	e8 39 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001816d:	83 c4 10             	add    esp,0x10
c0018170:	eb fe                	jmp    c0018170 <HalPanic(char const*)+0x112>

c0018172 <HalQueryPerformanceCounter()>:
c0018172:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018177:	31 d2                	xor    edx,edx
c0018179:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001817f:	31 c0                	xor    eax,eax
c0018181:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018188:	74 02                	je     c001818c <HalQueryPerformanceCounter()+0x1a>
c001818a:	0f 31                	rdtsc  
c001818c:	c3                   	ret    

c001818d <HalInitialise()>:
c001818d:	53                   	push   ebx
c001818e:	83 ec 08             	sub    esp,0x8
c0018191:	e8 c8 4f ff ff       	call   c000d15e <setupINTS()>
c0018196:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c001819d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181a2:	75 0f                	jne    c00181b3 <HalInitialise()+0x26>
c00181a4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181aa:	83 e2 fe             	and    edx,0xfffffffe
c00181ad:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181b3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00181b9:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00181c0:	83 e2 fe             	and    edx,0xfffffffe
c00181c3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181c9:	e8 9e 02 00 00       	call   c001846c <picOpen()>
c00181ce:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181d5:	74 0a                	je     c00181e1 <HalInitialise()+0x54>
c00181d7:	e8 e0 01 00 00       	call   c00183bc <picDisable()>
c00181dc:	e8 ad 67 00 00       	call   c001e98e <apicOpen()>
c00181e1:	bb 0f 00 00 00       	mov    ebx,0xf
c00181e6:	50                   	push   eax
c00181e7:	6a 00                	push   0x0
c00181e9:	68 34 7e 01 c0       	push   0xc0017e34
c00181ee:	6a 00                	push   0x0
c00181f0:	e8 39 4d ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f5:	83 c4 0c             	add    esp,0xc
c00181f8:	6a 00                	push   0x0
c00181fa:	68 34 7e 01 c0       	push   0xc0017e34
c00181ff:	6a 01                	push   0x1
c0018201:	e8 28 4d ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018206:	83 c4 0c             	add    esp,0xc
c0018209:	6a 00                	push   0x0
c001820b:	68 c5 78 01 c0       	push   0xc00178c5
c0018210:	6a 02                	push   0x2
c0018212:	e8 17 4d ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018217:	83 c4 0c             	add    esp,0xc
c001821a:	6a 00                	push   0x0
c001821c:	68 34 7e 01 c0       	push   0xc0017e34
c0018221:	6a 03                	push   0x3
c0018223:	e8 06 4d ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018228:	83 c4 0c             	add    esp,0xc
c001822b:	6a 00                	push   0x0
c001822d:	68 34 7e 01 c0       	push   0xc0017e34
c0018232:	6a 04                	push   0x4
c0018234:	e8 f5 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018239:	83 c4 0c             	add    esp,0xc
c001823c:	6a 00                	push   0x0
c001823e:	68 34 7e 01 c0       	push   0xc0017e34
c0018243:	6a 05                	push   0x5
c0018245:	e8 e4 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001824a:	83 c4 0c             	add    esp,0xc
c001824d:	6a 00                	push   0x0
c001824f:	68 68 7e 01 c0       	push   0xc0017e68
c0018254:	6a 06                	push   0x6
c0018256:	e8 d3 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825b:	83 c4 0c             	add    esp,0xc
c001825e:	6a 00                	push   0x0
c0018260:	68 de 78 01 c0       	push   0xc00178de
c0018265:	6a 08                	push   0x8
c0018267:	e8 c2 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001826c:	83 c4 0c             	add    esp,0xc
c001826f:	6a 00                	push   0x0
c0018271:	68 34 7e 01 c0       	push   0xc0017e34
c0018276:	6a 09                	push   0x9
c0018278:	e8 b1 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001827d:	83 c4 0c             	add    esp,0xc
c0018280:	6a 00                	push   0x0
c0018282:	68 34 7e 01 c0       	push   0xc0017e34
c0018287:	6a 0a                	push   0xa
c0018289:	e8 a0 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001828e:	83 c4 0c             	add    esp,0xc
c0018291:	6a 00                	push   0x0
c0018293:	68 34 7e 01 c0       	push   0xc0017e34
c0018298:	6a 0b                	push   0xb
c001829a:	e8 8f 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c001829f:	83 c4 0c             	add    esp,0xc
c00182a2:	6a 00                	push   0x0
c00182a4:	68 44 7d 01 c0       	push   0xc0017d44
c00182a9:	6a 0d                	push   0xd
c00182ab:	e8 7e 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182b0:	83 c4 0c             	add    esp,0xc
c00182b3:	6a 00                	push   0x0
c00182b5:	68 ab 7d 01 c0       	push   0xc0017dab
c00182ba:	6a 0e                	push   0xe
c00182bc:	e8 6d 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	50                   	push   eax
c00182c5:	6a 00                	push   0x0
c00182c7:	68 34 7e 01 c0       	push   0xc0017e34
c00182cc:	53                   	push   ebx
c00182cd:	43                   	inc    ebx
c00182ce:	e8 5b 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d3:	83 c4 10             	add    esp,0x10
c00182d6:	83 fb 1e             	cmp    ebx,0x1e
c00182d9:	75 e9                	jne    c00182c4 <HalInitialise()+0x137>
c00182db:	50                   	push   eax
c00182dc:	6a 00                	push   0x0
c00182de:	68 b2 2a 01 c0       	push   0xc0012ab2
c00182e3:	6a 60                	push   0x60
c00182e5:	e8 44 4c ff ff       	call   c000cf2e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182ef:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182f9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018300:	e8 b1 f7 fe ff       	call   c0007ab6 <malloc>
c0018305:	89 04 24             	mov    DWORD PTR [esp],eax
c0018308:	89 c3                	mov    ebx,eax
c001830a:	e8 3b 09 00 00       	call   c0018c4a <RTC::RTC()>
c001830f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018319:	5a                   	pop    edx
c001831a:	59                   	pop    ecx
c001831b:	53                   	push   ebx
c001831c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018322:	e8 d3 46 ff ff       	call   c000c9fa <Device::addChild(Device*)>
c0018327:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018329:	6a 00                	push   0x0
c001832b:	6a 00                	push   0x0
c001832d:	6a 00                	push   0x0
c001832f:	53                   	push   ebx
c0018330:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018333:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018338:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001833e:	83 c4 28             	add    esp,0x28
c0018341:	5b                   	pop    ebx
c0018342:	c3                   	ret    

c0018343 <HalMakeBeep(int)>:
c0018343:	53                   	push   ebx
c0018344:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018348:	85 db                	test   ebx,ebx
c001834a:	75 07                	jne    c0018353 <HalMakeBeep(int)+0x10>
c001834c:	e4 61                	in     al,0x61
c001834e:	83 e0 fc             	and    eax,0xfffffffc
c0018351:	eb 26                	jmp    c0018379 <HalMakeBeep(int)+0x36>
c0018353:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018358:	99                   	cdq    
c0018359:	f7 fb                	idiv   ebx
c001835b:	89 c1                	mov    ecx,eax
c001835d:	b0 b6                	mov    al,0xb6
c001835f:	e6 43                	out    0x43,al
c0018361:	88 c8                	mov    al,cl
c0018363:	e6 42                	out    0x42,al
c0018365:	89 c8                	mov    eax,ecx
c0018367:	c1 e8 08             	shr    eax,0x8
c001836a:	e6 42                	out    0x42,al
c001836c:	e4 61                	in     al,0x61
c001836e:	89 c2                	mov    edx,eax
c0018370:	83 ca 03             	or     edx,0x3
c0018373:	38 d0                	cmp    al,dl
c0018375:	74 04                	je     c001837b <HalMakeBeep(int)+0x38>
c0018377:	88 d0                	mov    al,dl
c0018379:	e6 61                	out    0x61,al
c001837b:	5b                   	pop    ebx
c001837c:	c3                   	ret    

c001837d <HalGetRand()>:
c001837d:	31 c0                	xor    eax,eax
c001837f:	c3                   	ret    

c0018380 <HalEndOfInterrupt(int)>:
c0018380:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018387:	74 23                	je     c00183ac <HalEndOfInterrupt(int)+0x2c>
c0018389:	83 ec 14             	sub    esp,0x14
c001838c:	6a 1b                	push   0x1b
c001838e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018394:	e8 27 ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018399:	25 00 f0 ff ff       	and    eax,0xfffff000
c001839e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00183a8:	83 c4 1c             	add    esp,0x1c
c00183ab:	c3                   	ret    
c00183ac:	e9 3f 02 00 00       	jmp    c00185f0 <picEOI(int)>

c00183b1 <HalRestart()>:
c00183b1:	c3                   	ret    

c00183b2 <HalShutdown()>:
c00183b2:	c3                   	ret    

c00183b3 <HalSleep()>:
c00183b3:	c3                   	ret    

c00183b4 <picIoWait()>:
c00183b4:	eb 00                	jmp    c00183b6 <picIoWait()+0x2>
c00183b6:	eb 00                	jmp    c00183b8 <picIoWait()+0x4>
c00183b8:	90                   	nop
c00183b9:	c3                   	ret    
c00183ba:	66 90                	xchg   ax,ax

c00183bc <picDisable()>:
c00183bc:	83 ec 10             	sub    esp,0x10
c00183bf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00183c6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183cf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183d4:	ee                   	out    dx,al
c00183d5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183dc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183e1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183e5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183ea:	ee                   	out    dx,al
c00183eb:	90                   	nop
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	c3                   	ret    

c00183f0 <picGetIRQReg(int)>:
c00183f0:	83 ec 10             	sub    esp,0x10
c00183f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183f7:	0f b6 c0             	movzx  eax,al
c00183fa:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018401:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018405:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018409:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001840e:	ee                   	out    dx,al
c001840f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018413:	0f b6 c0             	movzx  eax,al
c0018416:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001841d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018421:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018425:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001842a:	ee                   	out    dx,al
c001842b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018432:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018437:	89 c2                	mov    edx,eax
c0018439:	ec                   	in     al,dx
c001843a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001843e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018442:	0f b6 c0             	movzx  eax,al
c0018445:	c1 e0 08             	shl    eax,0x8
c0018448:	89 c1                	mov    ecx,eax
c001844a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018451:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018456:	89 c2                	mov    edx,eax
c0018458:	ec                   	in     al,dx
c0018459:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001845d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018461:	0f b6 c0             	movzx  eax,al
c0018464:	09 c8                	or     eax,ecx
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	c3                   	ret    
c001846a:	66 90                	xchg   ax,ax

c001846c <picOpen()>:
c001846c:	83 ec 50             	sub    esp,0x50
c001846f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018476:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001847b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001847f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018483:	ee                   	out    dx,al
c0018484:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001848b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018490:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018494:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018498:	ee                   	out    dx,al
c0018499:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00184a1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00184a9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00184b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184b4:	89 c2                	mov    edx,eax
c00184b6:	ec                   	in     al,dx
c00184b7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00184bb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00184bf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00184c3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184ce:	89 c2                	mov    edx,eax
c00184d0:	ec                   	in     al,dx
c00184d1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184d5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184d9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184dd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184e4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184e9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184f1:	ee                   	out    dx,al
c00184f2:	e8 bd fe ff ff       	call   c00183b4 <picIoWait()>
c00184f7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184fe:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018503:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018507:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001850b:	ee                   	out    dx,al
c001850c:	e8 a3 fe ff ff       	call   c00183b4 <picIoWait()>
c0018511:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018515:	0f b6 c0             	movzx  eax,al
c0018518:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001851f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018523:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018527:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001852b:	ee                   	out    dx,al
c001852c:	e8 83 fe ff ff       	call   c00183b4 <picIoWait()>
c0018531:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018535:	0f b6 c0             	movzx  eax,al
c0018538:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001853f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018543:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018547:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001854b:	ee                   	out    dx,al
c001854c:	e8 63 fe ff ff       	call   c00183b4 <picIoWait()>
c0018551:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018558:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001855d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018561:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018565:	ee                   	out    dx,al
c0018566:	e8 49 fe ff ff       	call   c00183b4 <picIoWait()>
c001856b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018572:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018577:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001857b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001857f:	ee                   	out    dx,al
c0018580:	e8 2f fe ff ff       	call   c00183b4 <picIoWait()>
c0018585:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001858c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018591:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018595:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018599:	ee                   	out    dx,al
c001859a:	e8 15 fe ff ff       	call   c00183b4 <picIoWait()>
c001859f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00185a6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00185ab:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00185af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185b3:	ee                   	out    dx,al
c00185b4:	e8 fb fd ff ff       	call   c00183b4 <picIoWait()>
c00185b9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00185be:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00185c5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185c9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185cd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185d1:	ee                   	out    dx,al
c00185d2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185d7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185de:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185e2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185ea:	ee                   	out    dx,al
c00185eb:	90                   	nop
c00185ec:	83 c4 50             	add    esp,0x50
c00185ef:	c3                   	ret    

c00185f0 <picEOI(int)>:
c00185f0:	83 ec 10             	sub    esp,0x10
c00185f3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185f8:	75 1e                	jne    c0018618 <picEOI(int)+0x28>
c00185fa:	6a 0b                	push   0xb
c00185fc:	e8 ef fd ff ff       	call   c00183f0 <picGetIRQReg(int)>
c0018601:	83 c4 04             	add    esp,0x4
c0018604:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018609:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001860e:	25 80 00 00 00       	and    eax,0x80
c0018613:	74 73                	je     c0018688 <picEOI(int)+0x98>
c0018615:	8d 76 00             	lea    esi,[esi+0x0]
c0018618:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001861d:	75 31                	jne    c0018650 <picEOI(int)+0x60>
c001861f:	6a 0b                	push   0xb
c0018621:	e8 ca fd ff ff       	call   c00183f0 <picGetIRQReg(int)>
c0018626:	83 c4 04             	add    esp,0x4
c0018629:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001862e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018632:	98                   	cwde   
c0018633:	85 c0                	test   eax,eax
c0018635:	78 19                	js     c0018650 <picEOI(int)+0x60>
c0018637:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001863e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018643:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018647:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001864c:	ee                   	out    dx,al
c001864d:	eb 3d                	jmp    c001868c <picEOI(int)+0x9c>
c001864f:	90                   	nop
c0018650:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018655:	7e 19                	jle    c0018670 <picEOI(int)+0x80>
c0018657:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001865e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018663:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018667:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001866c:	ee                   	out    dx,al
c001866d:	8d 76 00             	lea    esi,[esi+0x0]
c0018670:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018677:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001867c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018680:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018685:	ee                   	out    dx,al
c0018686:	eb 04                	jmp    c001868c <picEOI(int)+0x9c>
c0018688:	90                   	nop
c0018689:	8d 76 00             	lea    esi,[esi+0x0]
c001868c:	83 c4 10             	add    esp,0x10
c001868f:	c3                   	ret    

c0018690 <RTC::open(int, int, void*)>:
c0018690:	31 c0                	xor    eax,eax
c0018692:	c3                   	ret    
c0018693:	90                   	nop

c0018694 <RTC::close(int, int, void*)>:
c0018694:	31 c0                	xor    eax,eax
c0018696:	c3                   	ret    
c0018697:	90                   	nop

c0018698 <RTC::timeInSecondsUTC()>:
c0018698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001869c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00186a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00186a8:	c3                   	ret    
c00186a9:	90                   	nop

c00186aa <RTC::timeInDatetimeUTC()>:
c00186aa:	53                   	push   ebx
c00186ab:	83 ec 14             	sub    esp,0x14
c00186ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00186b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00186b8:	50                   	push   eax
c00186b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00186bc:	83 c4 0c             	add    esp,0xc
c00186bf:	52                   	push   edx
c00186c0:	50                   	push   eax
c00186c1:	53                   	push   ebx
c00186c2:	e8 a7 40 ff ff       	call   c000c76e <secondsToDatetime(unsigned long long)>
c00186c7:	89 d8                	mov    eax,ebx
c00186c9:	83 c4 14             	add    esp,0x14
c00186cc:	5b                   	pop    ebx
c00186cd:	c2 04 00             	ret    0x4

c00186d0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186d0:	56                   	push   esi
c00186d1:	53                   	push   ebx
c00186d2:	83 ec 14             	sub    esp,0x14
c00186d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186db:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186e2:	52                   	push   edx
c00186e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186eb:	50                   	push   eax
c00186ec:	e8 7d 40 ff ff       	call   c000c76e <secondsToDatetime(unsigned long long)>
c00186f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186fd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018701:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018705:	89 f0                	mov    eax,esi
c0018707:	83 c4 20             	add    esp,0x20
c001870a:	5b                   	pop    ebx
c001870b:	5e                   	pop    esi
c001870c:	ff e0                	jmp    eax

c001870e <RTC::~RTC()>:
c001870e:	83 ec 0c             	sub    esp,0xc
c0018711:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0018716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001871a:	89 10                	mov    DWORD PTR [eax],edx
c001871c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018720:	83 ec 0c             	sub    esp,0xc
c0018723:	50                   	push   eax
c0018724:	e8 d7 3d ff ff       	call   c000c500 <Clock::~Clock()>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	90                   	nop
c001872d:	83 c4 0c             	add    esp,0xc
c0018730:	c3                   	ret    
c0018731:	90                   	nop

c0018732 <RTC::~RTC()>:
c0018732:	83 ec 0c             	sub    esp,0xc
c0018735:	83 ec 0c             	sub    esp,0xc
c0018738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001873c:	e8 cd ff ff ff       	call   c001870e <RTC::~RTC()>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	68 60 01 00 00       	push   0x160
c001874c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018750:	e8 c3 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	83 c4 0c             	add    esp,0xc
c001875b:	c3                   	ret    

c001875c <RTC::get_update_in_progress_flag()>:
c001875c:	83 ec 14             	sub    esp,0x14
c001875f:	6a 0a                	push   0xa
c0018761:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018767:	e8 0c ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001876c:	83 c4 1c             	add    esp,0x1c
c001876f:	0f b6 c0             	movzx  eax,al
c0018772:	c1 e8 07             	shr    eax,0x7
c0018775:	c3                   	ret    

c0018776 <RTC::completeRTCRefresh()>:
c0018776:	55                   	push   ebp
c0018777:	57                   	push   edi
c0018778:	56                   	push   esi
c0018779:	53                   	push   ebx
c001877a:	83 ec 3c             	sub    esp,0x3c
c001877d:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018783:	83 ec 0c             	sub    esp,0xc
c0018786:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001878a:	e8 cd ff ff ff       	call   c001875c <RTC::get_update_in_progress_flag()>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	84 c0                	test   al,al
c0018794:	74 0e                	je     c00187a4 <RTC::completeRTCRefresh()+0x2e>
c0018796:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001879c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00187a2:	73 df                	jae    c0018783 <RTC::completeRTCRefresh()+0xd>
c00187a4:	51                   	push   ecx
c00187a5:	51                   	push   ecx
c00187a6:	6a 00                	push   0x0
c00187a8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187ae:	e8 c5 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187b3:	5b                   	pop    ebx
c00187b4:	89 c7                	mov    edi,eax
c00187b6:	5e                   	pop    esi
c00187b7:	6a 02                	push   0x2
c00187b9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187bf:	e8 b4 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187c4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187c8:	5d                   	pop    ebp
c00187c9:	58                   	pop    eax
c00187ca:	6a 04                	push   0x4
c00187cc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d2:	e8 a1 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187d7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187db:	58                   	pop    eax
c00187dc:	5a                   	pop    edx
c00187dd:	6a 07                	push   0x7
c00187df:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e5:	e8 8e e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187ea:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187ee:	59                   	pop    ecx
c00187ef:	5b                   	pop    ebx
c00187f0:	6a 08                	push   0x8
c00187f2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187f8:	e8 7b e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187fd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018801:	5e                   	pop    esi
c0018802:	5d                   	pop    ebp
c0018803:	6a 09                	push   0x9
c0018805:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880b:	e8 68 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018810:	0f b6 c0             	movzx  eax,al
c0018813:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018817:	83 c4 10             	add    esp,0x10
c001881a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018820:	83 ec 0c             	sub    esp,0xc
c0018823:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018827:	e8 30 ff ff ff       	call   c001875c <RTC::get_update_in_progress_flag()>
c001882c:	83 c4 10             	add    esp,0x10
c001882f:	84 c0                	test   al,al
c0018831:	74 0e                	je     c0018841 <RTC::completeRTCRefresh()+0xcb>
c0018833:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018839:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001883f:	73 df                	jae    c0018820 <RTC::completeRTCRefresh()+0xaa>
c0018841:	51                   	push   ecx
c0018842:	51                   	push   ecx
c0018843:	6a 00                	push   0x0
c0018845:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884b:	e8 28 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018850:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018854:	5b                   	pop    ebx
c0018855:	5e                   	pop    esi
c0018856:	6a 02                	push   0x2
c0018858:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885e:	e8 15 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018863:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018867:	5d                   	pop    ebp
c0018868:	58                   	pop    eax
c0018869:	6a 04                	push   0x4
c001886b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018871:	e8 02 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018876:	88 c3                	mov    bl,al
c0018878:	58                   	pop    eax
c0018879:	5a                   	pop    edx
c001887a:	6a 07                	push   0x7
c001887c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018882:	e8 f1 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018887:	59                   	pop    ecx
c0018888:	89 c6                	mov    esi,eax
c001888a:	5d                   	pop    ebp
c001888b:	6a 08                	push   0x8
c001888d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018893:	e8 e0 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018898:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001889c:	58                   	pop    eax
c001889d:	5a                   	pop    edx
c001889e:	6a 09                	push   0x9
c00188a0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a6:	e8 cd e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188ab:	89 f9                	mov    ecx,edi
c00188ad:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00188b1:	0f b6 e8             	movzx  ebp,al
c00188b4:	83 c4 10             	add    esp,0x10
c00188b7:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00188bb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188c0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00188c5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00188c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188cd:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00188d1:	0f 94 c0             	sete   al
c00188d4:	0f b6 fb             	movzx  edi,bl
c00188d7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00188db:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00188e0:	0f 94 c2             	sete   dl
c00188e3:	21 d0                	and    eax,edx
c00188e5:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188e9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188ed:	0f 94 c2             	sete   dl
c00188f0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00188f4:	21 c2                	and    edx,eax
c00188f6:	89 f0                	mov    eax,esi
c00188f8:	0f b6 c0             	movzx  eax,al
c00188fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188ff:	89 f0                	mov    eax,esi
c0018901:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018905:	0f 94 c0             	sete   al
c0018908:	21 d0                	and    eax,edx
c001890a:	31 d2                	xor    edx,edx
c001890c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018910:	0f 94 c2             	sete   dl
c0018913:	85 c2                	test   edx,eax
c0018915:	75 27                	jne    c001893e <RTC::completeRTCRefresh()+0x1c8>
c0018917:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001891b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001891f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018923:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018927:	89 f0                	mov    eax,esi
c0018929:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001892d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018931:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018935:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018939:	e9 dc fe ff ff       	jmp    c001881a <RTC::completeRTCRefresh()+0xa4>
c001893e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018942:	75 d3                	jne    c0018917 <RTC::completeRTCRefresh()+0x1a1>
c0018944:	52                   	push   edx
c0018945:	52                   	push   edx
c0018946:	6a 0b                	push   0xb
c0018948:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001894e:	e8 25 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	a8 04                	test   al,0x4
c0018958:	75 7a                	jne    c00189d4 <RTC::completeRTCRefresh()+0x25e>
c001895a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001895e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018962:	83 e1 0f             	and    ecx,0xf
c0018965:	c1 ea 04             	shr    edx,0x4
c0018968:	c1 ef 04             	shr    edi,0x4
c001896b:	6b d2 0a             	imul   edx,edx,0xa
c001896e:	83 e6 0f             	and    esi,0xf
c0018971:	01 d1                	add    ecx,edx
c0018973:	c1 ed 04             	shr    ebp,0x4
c0018976:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001897a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001897e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018982:	c1 ea 04             	shr    edx,0x4
c0018985:	83 e1 0f             	and    ecx,0xf
c0018988:	6b d2 0a             	imul   edx,edx,0xa
c001898b:	6b ed 0a             	imul   ebp,ebp,0xa
c001898e:	01 d1                	add    ecx,edx
c0018990:	89 fa                	mov    edx,edi
c0018992:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018996:	83 e2 07             	and    edx,0x7
c0018999:	89 d9                	mov    ecx,ebx
c001899b:	6b d2 0a             	imul   edx,edx,0xa
c001899e:	83 e1 0f             	and    ecx,0xf
c00189a1:	83 e3 80             	and    ebx,0xffffff80
c00189a4:	01 d1                	add    ecx,edx
c00189a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189aa:	09 cb                	or     ebx,ecx
c00189ac:	c1 ea 04             	shr    edx,0x4
c00189af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00189b3:	6b d2 0a             	imul   edx,edx,0xa
c00189b6:	83 e1 0f             	and    ecx,0xf
c00189b9:	01 d6                	add    esi,edx
c00189bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189bf:	c1 ea 04             	shr    edx,0x4
c00189c2:	6b d2 0a             	imul   edx,edx,0xa
c00189c5:	01 d1                	add    ecx,edx
c00189c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189cb:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189cf:	83 e2 0f             	and    edx,0xf
c00189d2:	01 d5                	add    ebp,edx
c00189d4:	a8 02                	test   al,0x2
c00189d6:	75 15                	jne    c00189ed <RTC::completeRTCRefresh()+0x277>
c00189d8:	f6 c3 80             	test   bl,0x80
c00189db:	74 10                	je     c00189ed <RTC::completeRTCRefresh()+0x277>
c00189dd:	83 e3 7f             	and    ebx,0x7f
c00189e0:	b9 18 00 00 00       	mov    ecx,0x18
c00189e5:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189e8:	99                   	cdq    
c00189e9:	f7 f9                	idiv   ecx
c00189eb:	88 d3                	mov    bl,dl
c00189ed:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189f3:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189f9:	77 06                	ja     c0018a01 <RTC::completeRTCRefresh()+0x28b>
c00189fb:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018a01:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a06:	31 c9                	xor    ecx,ecx
c0018a08:	c1 e0 10             	shl    eax,0x10
c0018a0b:	89 cd                	mov    ebp,ecx
c0018a0d:	c1 e7 10             	shl    edi,0x10
c0018a10:	31 d2                	xor    edx,edx
c0018a12:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018a18:	09 c5                	or     ebp,eax
c0018a1a:	89 f0                	mov    eax,esi
c0018a1c:	89 e9                	mov    ecx,ebp
c0018a1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018a22:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018a26:	88 c2                	mov    dl,al
c0018a28:	88 d9                	mov    cl,bl
c0018a2a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018a2e:	0f b7 c2             	movzx  eax,dx
c0018a31:	09 f8                	or     eax,edi
c0018a33:	89 c2                	mov    edx,eax
c0018a35:	50                   	push   eax
c0018a36:	50                   	push   eax
c0018a37:	51                   	push   ecx
c0018a38:	52                   	push   edx
c0018a39:	e8 b1 3b ff ff       	call   c000c5ef <datetimeToSeconds(datetime_t)>
c0018a3e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a42:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a48:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a4e:	83 c4 4c             	add    esp,0x4c
c0018a51:	5b                   	pop    ebx
c0018a52:	5e                   	pop    esi
c0018a53:	5f                   	pop    edi
c0018a54:	5d                   	pop    ebp
c0018a55:	c3                   	ret    

c0018a56 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a56:	55                   	push   ebp
c0018a57:	57                   	push   edi
c0018a58:	56                   	push   esi
c0018a59:	53                   	push   ebx
c0018a5a:	83 ec 30             	sub    esp,0x30
c0018a5d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a61:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a65:	6a 00                	push   0x0
c0018a67:	6a 00                	push   0x0
c0018a69:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a6f:	e8 1e e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a74:	83 c4 0c             	add    esp,0xc
c0018a77:	6a 00                	push   0x0
c0018a79:	6a 02                	push   0x2
c0018a7b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a81:	e8 0c e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a86:	31 d2                	xor    edx,edx
c0018a88:	89 f9                	mov    ecx,edi
c0018a8a:	89 f8                	mov    eax,edi
c0018a8c:	c1 e9 10             	shr    ecx,0x10
c0018a8f:	0f b6 c4             	movzx  eax,ah
c0018a92:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a96:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a9e:	b9 64 00 00 00       	mov    ecx,0x64
c0018aa3:	89 f0                	mov    eax,esi
c0018aa5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018aa9:	89 f0                	mov    eax,esi
c0018aab:	0f b6 c4             	movzx  eax,ah
c0018aae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ab2:	89 f0                	mov    eax,esi
c0018ab4:	c1 e8 10             	shr    eax,0x10
c0018ab7:	f7 f1                	div    ecx
c0018ab9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018abd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018ac1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018ac5:	59                   	pop    ecx
c0018ac6:	5b                   	pop    ebx
c0018ac7:	89 fb                	mov    ebx,edi
c0018ac9:	6a 0b                	push   0xb
c0018acb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad1:	e8 a2 e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018ad6:	83 c4 10             	add    esp,0x10
c0018ad9:	89 c5                	mov    ebp,eax
c0018adb:	a8 04                	test   al,0x4
c0018add:	75 6e                	jne    c0018b4d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018adf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ae3:	31 d2                	xor    edx,edx
c0018ae5:	0f b6 c1             	movzx  eax,cl
c0018ae8:	b9 0a 00 00 00       	mov    ecx,0xa
c0018aed:	f7 f1                	div    ecx
c0018aef:	c1 e0 04             	shl    eax,0x4
c0018af2:	09 d0                	or     eax,edx
c0018af4:	31 d2                	xor    edx,edx
c0018af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018afa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018aff:	f7 f1                	div    ecx
c0018b01:	c1 e0 04             	shl    eax,0x4
c0018b04:	09 d0                	or     eax,edx
c0018b06:	31 d2                	xor    edx,edx
c0018b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b0c:	0f b6 c3             	movzx  eax,bl
c0018b0f:	f7 f1                	div    ecx
c0018b11:	c1 e0 04             	shl    eax,0x4
c0018b14:	09 d0                	or     eax,edx
c0018b16:	31 d2                	xor    edx,edx
c0018b18:	89 c3                	mov    ebx,eax
c0018b1a:	89 f0                	mov    eax,esi
c0018b1c:	0f b6 c0             	movzx  eax,al
c0018b1f:	f7 f1                	div    ecx
c0018b21:	c1 e0 04             	shl    eax,0x4
c0018b24:	09 d0                	or     eax,edx
c0018b26:	31 d2                	xor    edx,edx
c0018b28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b31:	f7 f1                	div    ecx
c0018b33:	c1 e0 04             	shl    eax,0x4
c0018b36:	09 d0                	or     eax,edx
c0018b38:	31 d2                	xor    edx,edx
c0018b3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b42:	f7 f1                	div    ecx
c0018b44:	c1 e0 04             	shl    eax,0x4
c0018b47:	09 d0                	or     eax,edx
c0018b49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b4d:	83 e5 02             	and    ebp,0x2
c0018b50:	75 1e                	jne    c0018b70 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b52:	0f b6 c3             	movzx  eax,bl
c0018b55:	83 f8 0b             	cmp    eax,0xb
c0018b58:	76 10                	jbe    c0018b6a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b5a:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b5d:	88 d3                	mov    bl,dl
c0018b5f:	84 d2                	test   dl,dl
c0018b61:	75 02                	jne    c0018b65 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b63:	b3 0c                	mov    bl,0xc
c0018b65:	83 cb 80             	or     ebx,0xffffff80
c0018b68:	eb 06                	jmp    c0018b70 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b6a:	85 c0                	test   eax,eax
c0018b6c:	75 02                	jne    c0018b70 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b6e:	b3 0c                	mov    bl,0xc
c0018b70:	0f b6 db             	movzx  ebx,bl
c0018b73:	50                   	push   eax
c0018b74:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b79:	52                   	push   edx
c0018b7a:	6a 00                	push   0x0
c0018b7c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b82:	e8 0b e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b87:	83 c4 0c             	add    esp,0xc
c0018b8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b8f:	50                   	push   eax
c0018b90:	6a 02                	push   0x2
c0018b92:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b98:	e8 f5 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b9d:	83 c4 0c             	add    esp,0xc
c0018ba0:	53                   	push   ebx
c0018ba1:	6a 04                	push   0x4
c0018ba3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba9:	e8 e4 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bae:	83 c4 0c             	add    esp,0xc
c0018bb1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018bb6:	52                   	push   edx
c0018bb7:	6a 07                	push   0x7
c0018bb9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bbf:	e8 ce e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc4:	83 c4 0c             	add    esp,0xc
c0018bc7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018bcc:	50                   	push   eax
c0018bcd:	6a 08                	push   0x8
c0018bcf:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bd5:	e8 b8 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bda:	83 c4 0c             	add    esp,0xc
c0018bdd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018be2:	55                   	push   ebp
c0018be3:	6a 09                	push   0x9
c0018be5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018beb:	e8 a2 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bf0:	5a                   	pop    edx
c0018bf1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bf5:	e8 7c fb ff ff       	call   c0018776 <RTC::completeRTCRefresh()>
c0018bfa:	83 c4 3c             	add    esp,0x3c
c0018bfd:	b0 01                	mov    al,0x1
c0018bff:	5b                   	pop    ebx
c0018c00:	5e                   	pop    esi
c0018c01:	5f                   	pop    edi
c0018c02:	5d                   	pop    ebp
c0018c03:	c3                   	ret    

c0018c04 <rtcIRQHandler(regs*, void*)>:
c0018c04:	53                   	push   ebx
c0018c05:	83 ec 10             	sub    esp,0x10
c0018c08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018c0c:	6a 0c                	push   0xc
c0018c0e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c14:	e8 5f e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c19:	83 c4 10             	add    esp,0x10
c0018c1c:	a8 80                	test   al,0x80
c0018c1e:	74 24                	je     c0018c44 <rtcIRQHandler(regs*, void*)+0x40>
c0018c20:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018c27:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c2e:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c35:	75 0d                	jne    c0018c44 <rtcIRQHandler(regs*, void*)+0x40>
c0018c37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c3b:	83 c4 08             	add    esp,0x8
c0018c3e:	5b                   	pop    ebx
c0018c3f:	e9 32 fb ff ff       	jmp    c0018776 <RTC::completeRTCRefresh()>
c0018c44:	83 c4 08             	add    esp,0x8
c0018c47:	5b                   	pop    ebx
c0018c48:	c3                   	ret    
c0018c49:	90                   	nop

c0018c4a <RTC::RTC()>:
c0018c4a:	83 ec 1c             	sub    esp,0x1c
c0018c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c51:	83 ec 08             	sub    esp,0x8
c0018c54:	68 8f 2d 02 c0       	push   0xc0022d8f
c0018c59:	50                   	push   eax
c0018c5a:	e8 6b 38 ff ff       	call   c000c4ca <Clock::Clock(char const*)>
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0018c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c6b:	89 10                	mov    DWORD PTR [eax],edx
c0018c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c71:	83 ec 0c             	sub    esp,0xc
c0018c74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c78:	6a 01                	push   0x1
c0018c7a:	68 04 8c 01 c0       	push   0xc0018c04
c0018c7f:	6a 08                	push   0x8
c0018c81:	50                   	push   eax
c0018c82:	e8 1f 3d ff ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c87:	83 c4 20             	add    esp,0x20
c0018c8a:	89 c2                	mov    edx,eax
c0018c8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c90:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c96:	fa                   	cli    
c0018c97:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c9c:	83 c0 01             	add    eax,0x1
c0018c9f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018ca4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ca9:	83 ec 08             	sub    esp,0x8
c0018cac:	6a 0b                	push   0xb
c0018cae:	50                   	push   eax
c0018caf:	e8 c4 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cbb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018cc0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cc4:	83 ca 10             	or     edx,0x10
c0018cc7:	0f b6 d2             	movzx  edx,dl
c0018cca:	83 ec 04             	sub    esp,0x4
c0018ccd:	52                   	push   edx
c0018cce:	6a 0b                	push   0xb
c0018cd0:	50                   	push   eax
c0018cd1:	e8 bc e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cd6:	83 c4 10             	add    esp,0x10
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ce0:	e8 91 fa ff ff       	call   c0018776 <RTC::completeRTCRefresh()>
c0018ce5:	83 c4 10             	add    esp,0x10
c0018ce8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ced:	83 e8 01             	sub    eax,0x1
c0018cf0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cf5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cfa:	85 c0                	test   eax,eax
c0018cfc:	75 01                	jne    c0018cff <RTC::RTC()+0xb5>
c0018cfe:	fb                   	sti    
c0018cff:	90                   	nop
c0018d00:	83 c4 1c             	add    esp,0x1c
c0018d03:	c3                   	ret    

c0018d04 <HalConsoleScroll(int, int)>:
c0018d04:	83 ec 10             	sub    esp,0x10
c0018d07:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018d0f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018d17:	90                   	nop
c0018d18:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d1d:	0f 8f e1 00 00 00    	jg     c0018e04 <HalConsoleScroll(int, int)+0x100>
c0018d23:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d2b:	90                   	nop
c0018d2c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d34:	0f 8f be 00 00 00    	jg     c0018df8 <HalConsoleScroll(int, int)+0xf4>
c0018d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d3e:	89 d0                	mov    eax,edx
c0018d40:	c1 e0 02             	shl    eax,0x2
c0018d43:	01 d0                	add    eax,edx
c0018d45:	c1 e0 05             	shl    eax,0x5
c0018d48:	89 c2                	mov    edx,eax
c0018d4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d4e:	01 d0                	add    eax,edx
c0018d50:	89 c2                	mov    edx,eax
c0018d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d56:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d5d:	89 d0                	mov    eax,edx
c0018d5f:	c1 e0 02             	shl    eax,0x2
c0018d62:	01 d0                	add    eax,edx
c0018d64:	c1 e0 05             	shl    eax,0x5
c0018d67:	89 c2                	mov    edx,eax
c0018d69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d6d:	01 d0                	add    eax,edx
c0018d6f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d79:	01 c2                	add    edx,eax
c0018d7b:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d7d:	88 02                	mov    BYTE PTR [edx],al
c0018d7f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d84:	75 66                	jne    c0018dec <HalConsoleScroll(int, int)+0xe8>
c0018d86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8a:	83 e0 01             	and    eax,0x1
c0018d8d:	74 39                	je     c0018dc8 <HalConsoleScroll(int, int)+0xc4>
c0018d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d93:	83 e0 0f             	and    eax,0xf
c0018d96:	88 c2                	mov    dl,al
c0018d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d9c:	c1 e0 04             	shl    eax,0x4
c0018d9f:	09 d0                	or     eax,edx
c0018da1:	88 c1                	mov    cl,al
c0018da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018da7:	89 d0                	mov    eax,edx
c0018da9:	c1 e0 02             	shl    eax,0x2
c0018dac:	01 d0                	add    eax,edx
c0018dae:	c1 e0 05             	shl    eax,0x5
c0018db1:	89 c2                	mov    edx,eax
c0018db3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db7:	01 d0                	add    eax,edx
c0018db9:	89 c2                	mov    edx,eax
c0018dbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dbf:	01 d0                	add    eax,edx
c0018dc1:	88 ca                	mov    dl,cl
c0018dc3:	88 10                	mov    BYTE PTR [eax],dl
c0018dc5:	eb 25                	jmp    c0018dec <HalConsoleScroll(int, int)+0xe8>
c0018dc7:	90                   	nop
c0018dc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dcc:	89 d0                	mov    eax,edx
c0018dce:	c1 e0 02             	shl    eax,0x2
c0018dd1:	01 d0                	add    eax,edx
c0018dd3:	c1 e0 05             	shl    eax,0x5
c0018dd6:	89 c2                	mov    edx,eax
c0018dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ddc:	01 d0                	add    eax,edx
c0018dde:	89 c2                	mov    edx,eax
c0018de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018de4:	01 d0                	add    eax,edx
c0018de6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018de9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018df1:	e9 36 ff ff ff       	jmp    c0018d2c <HalConsoleScroll(int, int)+0x28>
c0018df6:	66 90                	xchg   ax,ax
c0018df8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018dfd:	e9 16 ff ff ff       	jmp    c0018d18 <HalConsoleScroll(int, int)+0x14>
c0018e02:	66 90                	xchg   ax,ax
c0018e04:	90                   	nop
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	c3                   	ret    
c0018e09:	8d 76 00             	lea    esi,[esi+0x0]

c0018e0c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018e0c:	83 ec 14             	sub    esp,0x14
c0018e0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e13:	88 04 24             	mov    BYTE PTR [esp],al
c0018e16:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018e19:	0f b6 c0             	movzx  eax,al
c0018e1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e20:	89 d1                	mov    ecx,edx
c0018e22:	83 e1 0f             	and    ecx,0xf
c0018e25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e29:	c1 e2 04             	shl    edx,0x4
c0018e2c:	0f b6 d2             	movzx  edx,dl
c0018e2f:	09 ca                	or     edx,ecx
c0018e31:	c1 e2 08             	shl    edx,0x8
c0018e34:	09 d0                	or     eax,edx
c0018e36:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e3b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e47:	89 d0                	mov    eax,edx
c0018e49:	c1 e0 02             	shl    eax,0x2
c0018e4c:	01 d0                	add    eax,edx
c0018e4e:	c1 e0 04             	shl    eax,0x4
c0018e51:	89 c2                	mov    edx,eax
c0018e53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e57:	01 d0                	add    eax,edx
c0018e59:	01 c0                	add    eax,eax
c0018e5b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e63:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018e68:	66 89 02             	mov    WORD PTR [edx],ax
c0018e6b:	90                   	nop
c0018e6c:	83 c4 14             	add    esp,0x14
c0018e6f:	c3                   	ret    

c0018e70 <HalConsoleCursorUpdate(int, int)>:
c0018e70:	83 ec 20             	sub    esp,0x20
c0018e73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e77:	89 c2                	mov    edx,eax
c0018e79:	c1 e2 02             	shl    edx,0x2
c0018e7c:	01 d0                	add    eax,edx
c0018e7e:	c1 e0 04             	shl    eax,0x4
c0018e81:	89 c2                	mov    edx,eax
c0018e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e87:	01 d0                	add    eax,edx
c0018e89:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e8e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e95:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ea2:	ee                   	out    dx,al
c0018ea3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018ea8:	0f b6 c0             	movzx  eax,al
c0018eab:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018eb2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018eb6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018eba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ebe:	ee                   	out    dx,al
c0018ebf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018ec6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018ecb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ecf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ed3:	ee                   	out    dx,al
c0018ed4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ed9:	c1 e8 08             	shr    eax,0x8
c0018edc:	0f b6 c0             	movzx  eax,al
c0018edf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018ee6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018eea:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018eee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ef2:	ee                   	out    dx,al
c0018ef3:	90                   	nop
c0018ef4:	83 c4 20             	add    esp,0x20
c0018ef7:	c3                   	ret    

c0018ef8 <FAT::getName()>:
c0018ef8:	b8 e0 2d 02 c0       	mov    eax,0xc0022de0
c0018efd:	c3                   	ret    
c0018efe:	66 90                	xchg   ax,ax

c0018f00 <FAT::tell(void*, unsigned long long*)>:
c0018f00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f05:	75 09                	jne    c0018f10 <FAT::tell(void*, unsigned long long*)+0x10>
c0018f07:	b8 04 00 00 00       	mov    eax,0x4
c0018f0c:	c3                   	ret    
c0018f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f15:	75 09                	jne    c0018f20 <FAT::tell(void*, unsigned long long*)+0x20>
c0018f17:	b8 04 00 00 00       	mov    eax,0x4
c0018f1c:	c3                   	ret    
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f27:	ba 00 00 00 00       	mov    edx,0x0
c0018f2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f30:	89 01                	mov    DWORD PTR [ecx],eax
c0018f32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f35:	b8 00 00 00 00       	mov    eax,0x0
c0018f3a:	c3                   	ret    
c0018f3b:	90                   	nop

c0018f3c <FAT::stat(void*, unsigned long long*)>:
c0018f3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f41:	75 09                	jne    c0018f4c <FAT::stat(void*, unsigned long long*)+0x10>
c0018f43:	b8 04 00 00 00       	mov    eax,0x4
c0018f48:	c3                   	ret    
c0018f49:	8d 76 00             	lea    esi,[esi+0x0]
c0018f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f51:	75 09                	jne    c0018f5c <FAT::stat(void*, unsigned long long*)+0x20>
c0018f53:	b8 04 00 00 00       	mov    eax,0x4
c0018f58:	c3                   	ret    
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f63:	ba 00 00 00 00       	mov    edx,0x0
c0018f68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f6c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f71:	b8 00 00 00 00       	mov    eax,0x0
c0018f76:	c3                   	ret    
c0018f77:	90                   	nop

c0018f78 <FAT::~FAT()>:
c0018f78:	83 ec 0c             	sub    esp,0xc
c0018f7b:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c0018f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f84:	89 10                	mov    DWORD PTR [eax],edx
c0018f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	50                   	push   eax
c0018f8e:	e8 81 28 ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	90                   	nop
c0018f97:	83 c4 0c             	add    esp,0xc
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <FAT::~FAT()>:
c0018f9c:	83 ec 0c             	sub    esp,0xc
c0018f9f:	83 ec 0c             	sub    esp,0xc
c0018fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fa6:	e8 cd ff ff ff       	call   c0018f78 <FAT::~FAT()>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	83 ec 08             	sub    esp,0x8
c0018fb1:	6a 08                	push   0x8
c0018fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fb7:	e8 5c 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018fbc:	83 c4 10             	add    esp,0x10
c0018fbf:	83 c4 0c             	add    esp,0xc
c0018fc2:	c3                   	ret    
c0018fc3:	90                   	nop

c0018fc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018fc4:	83 ec 1c             	sub    esp,0x1c
c0018fc7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018fce:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fde:	83 f8 ff             	cmp    eax,0xffffffff
c0018fe1:	75 35                	jne    c0019018 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fe3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fe7:	88 c2                	mov    dl,al
c0018fe9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fee:	01 d0                	add    eax,edx
c0018ff0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ff4:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018ffa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ffe:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019005:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001900a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001900e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019015:	eb 19                	jmp    c0019030 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019017:	90                   	nop
c0019018:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001901c:	88 c2                	mov    dl,al
c001901e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019022:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019029:	01 d0                	add    eax,edx
c001902b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001902f:	90                   	nop
c0019030:	83 ec 04             	sub    esp,0x4
c0019033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001903b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001903f:	50                   	push   eax
c0019040:	e8 8a bf fe ff       	call   c0004fcf <f_getlabel>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001904c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019051:	75 09                	jne    c001905c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019053:	b8 00 00 00 00       	mov    eax,0x0
c0019058:	eb 0a                	jmp    c0019064 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001905a:	66 90                	xchg   ax,ax
c001905c:	b8 01 00 00 00       	mov    eax,0x1
c0019061:	8d 76 00             	lea    esi,[esi+0x0]
c0019064:	83 c4 1c             	add    esp,0x1c
c0019067:	c3                   	ret    

c0019068 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019068:	57                   	push   edi
c0019069:	83 ec 58             	sub    esp,0x58
c001906c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019074:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019078:	b8 00 00 00 00       	mov    eax,0x0
c001907d:	b9 0f 00 00 00       	mov    ecx,0xf
c0019082:	fc                   	cld    
c0019083:	89 d7                	mov    edi,edx
c0019085:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019087:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001908b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019092:	83 f8 ff             	cmp    eax,0xffffffff
c0019095:	75 35                	jne    c00190cc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019097:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001909b:	88 c2                	mov    dl,al
c001909d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190a2:	01 d0                	add    eax,edx
c00190a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190a8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190ae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190b2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190b9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190be:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00190c2:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190c9:	eb 19                	jmp    c00190e4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00190cb:	90                   	nop
c00190cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190d0:	88 c2                	mov    dl,al
c00190d2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190d6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190dd:	01 d0                	add    eax,edx
c00190df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190e3:	90                   	nop
c00190e4:	83 ec 08             	sub    esp,0x8
c00190e7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190ef:	50                   	push   eax
c00190f0:	e8 4b 77 fe ff       	call   c0000840 <strcat>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	83 ec 0c             	sub    esp,0xc
c00190fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190ff:	50                   	push   eax
c0019100:	e8 1b c0 fe ff       	call   c0005120 <f_setlabel>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001910c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019111:	75 09                	jne    c001911c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019113:	b8 00 00 00 00       	mov    eax,0x0
c0019118:	eb 0a                	jmp    c0019124 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001911a:	66 90                	xchg   ax,ax
c001911c:	b8 01 00 00 00       	mov    eax,0x1
c0019121:	8d 76 00             	lea    esi,[esi+0x0]
c0019124:	83 c4 58             	add    esp,0x58
c0019127:	5f                   	pop    edi
c0019128:	c3                   	ret    
c0019129:	90                   	nop
c001912a:	66 90                	xchg   ax,ax

c001912c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001912c:	83 ec 2c             	sub    esp,0x2c
c001912f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019137:	83 ec 08             	sub    esp,0x8
c001913a:	68 04 2e 02 c0       	push   0xc0022e04
c001913f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019143:	e8 08 76 fe ff       	call   c0000750 <strcmp>
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	85 c0                	test   eax,eax
c001914d:	0f 94 c0             	sete   al
c0019150:	0f b6 c0             	movzx  eax,al
c0019153:	85 c0                	test   eax,eax
c0019155:	74 0d                	je     c0019164 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019157:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001915f:	e9 c0 00 00 00       	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019164:	83 ec 08             	sub    esp,0x8
c0019167:	68 f6 2d 02 c0       	push   0xc0022df6
c001916c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019170:	e8 db 75 fe ff       	call   c0000750 <strcmp>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	85 c0                	test   eax,eax
c001917a:	0f 94 c0             	sete   al
c001917d:	0f b6 c0             	movzx  eax,al
c0019180:	85 c0                	test   eax,eax
c0019182:	74 10                	je     c0019194 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019184:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001918c:	e9 93 00 00 00       	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019191:	8d 76 00             	lea    esi,[esi+0x0]
c0019194:	83 ec 08             	sub    esp,0x8
c0019197:	68 fc 2d 02 c0       	push   0xc0022dfc
c001919c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191a0:	e8 ab 75 fe ff       	call   c0000750 <strcmp>
c00191a5:	83 c4 10             	add    esp,0x10
c00191a8:	85 c0                	test   eax,eax
c00191aa:	0f 94 c0             	sete   al
c00191ad:	0f b6 c0             	movzx  eax,al
c00191b0:	85 c0                	test   eax,eax
c00191b2:	74 0c                	je     c00191c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00191b4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00191bc:	eb 66                	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191be:	66 90                	xchg   ax,ax
c00191c0:	83 ec 08             	sub    esp,0x8
c00191c3:	68 1c 05 02 c0       	push   0xc002051c
c00191c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191cc:	e8 7f 75 fe ff       	call   c0000750 <strcmp>
c00191d1:	83 c4 10             	add    esp,0x10
c00191d4:	85 c0                	test   eax,eax
c00191d6:	0f 94 c0             	sete   al
c00191d9:	0f b6 c0             	movzx  eax,al
c00191dc:	85 c0                	test   eax,eax
c00191de:	74 0c                	je     c00191ec <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191e0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191e8:	eb 3a                	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ea:	66 90                	xchg   ax,ax
c00191ec:	83 ec 08             	sub    esp,0x8
c00191ef:	68 02 2e 02 c0       	push   0xc0022e02
c00191f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191f8:	e8 53 75 fe ff       	call   c0000750 <strcmp>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	0f 94 c0             	sete   al
c0019205:	0f b6 c0             	movzx  eax,al
c0019208:	85 c0                	test   eax,eax
c001920a:	74 0c                	je     c0019218 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001920c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019214:	eb 0e                	jmp    c0019224 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019216:	66 90                	xchg   ax,ax
c0019218:	b8 08 00 00 00       	mov    eax,0x8
c001921d:	e9 ea 00 00 00       	jmp    c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019222:	66 90                	xchg   ax,ax
c0019224:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001922b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019230:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019234:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001923b:	83 f8 ff             	cmp    eax,0xffffffff
c001923e:	75 34                	jne    c0019274 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019240:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019244:	88 c2                	mov    dl,al
c0019246:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001924b:	01 d0                	add    eax,edx
c001924d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019251:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019257:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001925b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019262:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019267:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001926b:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019272:	eb 18                	jmp    c001928c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019274:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019278:	88 c2                	mov    dl,al
c001927a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001927e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019285:	01 d0                	add    eax,edx
c0019287:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001928b:	90                   	nop
c001928c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019290:	88 04 24             	mov    BYTE PTR [esp],al
c0019293:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001929b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00192a3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00192a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	68 00 20 00 00       	push   0x2000
c00192b8:	e8 f9 e7 fe ff       	call   c0007ab6 <malloc>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192c4:	68 00 20 00 00       	push   0x2000
c00192c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192d1:	50                   	push   eax
c00192d2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00192d6:	50                   	push   eax
c00192d7:	e8 41 c1 fe ff       	call   c000541d <f_mkfs>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192e8:	75 0a                	jne    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192ea:	b8 00 00 00 00       	mov    eax,0x0
c00192ef:	eb 1b                	jmp    c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192f1:	8d 76 00             	lea    esi,[esi+0x0]
c00192f4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192f9:	75 09                	jne    c0019304 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192fb:	b8 09 00 00 00       	mov    eax,0x9
c0019300:	eb 0a                	jmp    c001930c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019302:	66 90                	xchg   ax,ax
c0019304:	b8 01 00 00 00       	mov    eax,0x1
c0019309:	8d 76 00             	lea    esi,[esi+0x0]
c001930c:	83 c4 2c             	add    esp,0x2c
c001930f:	c3                   	ret    

c0019310 <FAT::tryMount(LogicalDisk*, int)>:
c0019310:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019316:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001931b:	83 f8 14             	cmp    eax,0x14
c001931e:	75 18                	jne    c0019338 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	68 08 2e 02 c0       	push   0xc0022e08
c0019328:	e8 26 83 ff ff       	call   c0011653 <KePanic(char const*)>
c001932d:	83 c4 10             	add    esp,0x10
c0019330:	b0 00                	mov    al,0x0
c0019332:	e9 ed 01 00 00       	jmp    c0019524 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019337:	90                   	nop
c0019338:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001933f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019345:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001934b:	3d 00 02 00 00       	cmp    eax,0x200
c0019350:	74 0a                	je     c001935c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019352:	b0 00                	mov    al,0x0
c0019354:	e9 cb 01 00 00       	jmp    c0019524 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019359:	8d 76 00             	lea    esi,[esi+0x0]
c001935c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019364:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001936b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019372:	83 f8 ff             	cmp    eax,0xffffffff
c0019375:	74 09                	je     c0019380 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019377:	b0 01                	mov    al,0x1
c0019379:	e9 a6 01 00 00       	jmp    c0019524 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001937e:	66 90                	xchg   ax,ax
c0019380:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001938a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019392:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019399:	88 c2                	mov    dl,al
c001939b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193a0:	01 d0                	add    eax,edx
c00193a2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00193a9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00193af:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00193b6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193bd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193c2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00193c9:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193d0:	83 ec 0c             	sub    esp,0xc
c00193d3:	68 34 02 00 00       	push   0x234
c00193d8:	e8 d9 e6 fe ff       	call   c0007ab6 <malloc>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193e7:	83 ec 04             	sub    esp,0x4
c00193ea:	6a 00                	push   0x0
c00193ec:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193f3:	50                   	push   eax
c00193f4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193fb:	e8 f8 a7 fe ff       	call   c0003bf8 <f_mount>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001940a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019412:	74 1c                	je     c0019430 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019414:	83 ec 0c             	sub    esp,0xc
c0019417:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001941e:	e8 b3 e6 fe ff       	call   c0007ad6 <rfree>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	b0 00                	mov    al,0x0
c0019428:	e9 f7 00 00 00       	jmp    c0019524 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	83 ec 04             	sub    esp,0x4
c0019433:	68 00 01 00 00       	push   0x100
c0019438:	6a 00                	push   0x0
c001943a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019441:	50                   	push   eax
c0019442:	e8 a9 70 fe ff       	call   c00004f0 <memset>
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	83 ec 08             	sub    esp,0x8
c001944d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019454:	50                   	push   eax
c0019455:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001945c:	50                   	push   eax
c001945d:	e8 de 73 fe ff       	call   c0000840 <strcat>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	83 ec 08             	sub    esp,0x8
c0019468:	68 16 2e 02 c0       	push   0xc0022e16
c001946d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019474:	50                   	push   eax
c0019475:	e8 c6 73 fe ff       	call   c0000840 <strcat>
c001947a:	83 c4 10             	add    esp,0x10
c001947d:	83 ec 04             	sub    esp,0x4
c0019480:	6a 01                	push   0x1
c0019482:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019489:	50                   	push   eax
c001948a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001948e:	50                   	push   eax
c001948f:	e8 c6 a7 fe ff       	call   c0003c5a <f_open>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001949e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 0b                	je     c00194b4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00194a9:	78 31                	js     c00194dc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194ab:	83 e8 04             	sub    eax,0x4
c00194ae:	83 f8 01             	cmp    eax,0x1
c00194b1:	77 29                	ja     c00194dc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00194b3:	90                   	nop
c00194b4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194c3:	50                   	push   eax
c00194c4:	e8 60 af fe ff       	call   c0004429 <f_close>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	90                   	nop
c00194cd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00194d5:	85 c0                	test   eax,eax
c00194d7:	74 43                	je     c001951c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194d9:	eb 31                	jmp    c001950c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194db:	90                   	nop
c00194dc:	83 ec 0c             	sub    esp,0xc
c00194df:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194e6:	e8 eb e5 fe ff       	call   c0007ad6 <rfree>
c00194eb:	83 c4 10             	add    esp,0x10
c00194ee:	83 ec 04             	sub    esp,0x4
c00194f1:	6a 00                	push   0x0
c00194f3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194fa:	50                   	push   eax
c00194fb:	6a 00                	push   0x0
c00194fd:	e8 f6 a6 fe ff       	call   c0003bf8 <f_mount>
c0019502:	83 c4 10             	add    esp,0x10
c0019505:	b0 00                	mov    al,0x0
c0019507:	eb 1b                	jmp    c0019524 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019511:	83 c0 01             	add    eax,0x1
c0019514:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019519:	8d 76 00             	lea    esi,[esi+0x0]
c001951c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019523:	90                   	nop
c0019524:	81 c4 4c 03 00 00    	add    esp,0x34c
c001952a:	c3                   	ret    
c001952b:	90                   	nop

c001952c <FAT::allocateSwapfile(char const*, int)>:
c001952c:	55                   	push   ebp
c001952d:	57                   	push   edi
c001952e:	56                   	push   esi
c001952f:	53                   	push   ebx
c0019530:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019536:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019541:	83 ec 0c             	sub    esp,0xc
c0019544:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001954b:	e8 66 e5 fe ff       	call   c0007ab6 <malloc>
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	89 c7                	mov    edi,eax
c0019555:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001955a:	83 ec 04             	sub    esp,0x4
c001955d:	50                   	push   eax
c001955e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019565:	57                   	push   edi
c0019566:	e8 17 26 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019575:	83 ec 04             	sub    esp,0x4
c0019578:	8d 44 24 13          	lea    eax,[esp+0x13]
c001957c:	50                   	push   eax
c001957d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019581:	50                   	push   eax
c0019582:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019589:	e8 14 29 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019598:	c1 e0 14             	shl    eax,0x14
c001959b:	89 c7                	mov    edi,eax
c001959d:	89 c5                	mov    ebp,eax
c001959f:	c1 fd 1f             	sar    ebp,0x1f
c00195a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195aa:	89 f9                	mov    ecx,edi
c00195ac:	31 c1                	xor    ecx,eax
c00195ae:	89 cb                	mov    ebx,ecx
c00195b0:	89 e9                	mov    ecx,ebp
c00195b2:	31 d1                	xor    ecx,edx
c00195b4:	89 ce                	mov    esi,ecx
c00195b6:	89 f0                	mov    eax,esi
c00195b8:	09 d8                	or     eax,ebx
c00195ba:	0f 84 9c 00 00 00    	je     c001965c <FAT::allocateSwapfile(char const*, int)+0x130>
c00195c0:	83 ec 0c             	sub    esp,0xc
c00195c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ca:	e8 9f 27 ff ff       	call   c000bd6e <File::unlink()>
c00195cf:	83 c4 10             	add    esp,0x10
c00195d2:	83 ec 08             	sub    esp,0x8
c00195d5:	6a 12                	push   0x12
c00195d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195de:	e8 bd 25 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c00195e3:	83 c4 10             	add    esp,0x10
c00195e6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195ed:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195f3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195fa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019601:	c1 e0 14             	shl    eax,0x14
c0019604:	83 ec 04             	sub    esp,0x4
c0019607:	6a 01                	push   0x1
c0019609:	50                   	push   eax
c001960a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019611:	e8 9a bc fe ff       	call   c00052b0 <f_expand>
c0019616:	83 c4 10             	add    esp,0x10
c0019619:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019620:	8b 00                	mov    eax,DWORD PTR [eax]
c0019622:	83 c0 10             	add    eax,0x10
c0019625:	8b 00                	mov    eax,DWORD PTR [eax]
c0019627:	83 ec 0c             	sub    esp,0xc
c001962a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001962e:	52                   	push   edx
c001962f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019633:	52                   	push   edx
c0019634:	6a 00                	push   0x0
c0019636:	68 00 04 00 00       	push   0x400
c001963b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019642:	ff d0                	call   eax
c0019644:	83 c4 20             	add    esp,0x20
c0019647:	83 ec 0c             	sub    esp,0xc
c001964a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019651:	e8 a8 25 ff ff       	call   c000bbfe <File::close()>
c0019656:	83 c4 10             	add    esp,0x10
c0019659:	8d 76 00             	lea    esi,[esi+0x0]
c001965c:	83 ec 08             	sub    esp,0x8
c001965f:	6a 01                	push   0x1
c0019661:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019668:	e8 33 25 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001966d:	83 c4 10             	add    esp,0x10
c0019670:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019677:	8b 00                	mov    eax,DWORD PTR [eax]
c0019679:	83 c0 0c             	add    eax,0xc
c001967c:	8b 00                	mov    eax,DWORD PTR [eax]
c001967e:	83 ec 0c             	sub    esp,0xc
c0019681:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019685:	52                   	push   edx
c0019686:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001968a:	52                   	push   edx
c001968b:	6a 00                	push   0x0
c001968d:	6a 04                	push   0x4
c001968f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019696:	ff d0                	call   eax
c0019698:	83 c4 20             	add    esp,0x20
c001969b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196a2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196a8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196af:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00196b6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00196b9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ca:	e8 2f 25 ff ff       	call   c000bbfe <File::close()>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196d9:	ba 00 00 00 00       	mov    edx,0x0
c00196de:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196e4:	5b                   	pop    ebx
c00196e5:	5e                   	pop    esi
c00196e6:	5f                   	pop    edi
c00196e7:	5d                   	pop    ebp
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop
c00196ea:	66 90                	xchg   ax,ax

c00196ec <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196ec:	57                   	push   edi
c00196ed:	56                   	push   esi
c00196ee:	53                   	push   ebx
c00196ef:	81 ec 50 02 00 00    	sub    esp,0x250
c00196f5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196fd:	74 0d                	je     c001970c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196ff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019707:	75 0f                	jne    c0019718 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019709:	8d 76 00             	lea    esi,[esi+0x0]
c001970c:	b8 04 00 00 00       	mov    eax,0x4
c0019711:	e9 3a 01 00 00       	jmp    c0019850 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019716:	66 90                	xchg   ax,ax
c0019718:	83 ec 08             	sub    esp,0x8
c001971b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019722:	50                   	push   eax
c0019723:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001972a:	e8 c7 af fe ff       	call   c00046f6 <f_readdir>
c001972f:	83 c4 10             	add    esp,0x10
c0019732:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019739:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019740:	83 ec 0c             	sub    esp,0xc
c0019743:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001974a:	83 c0 16             	add    eax,0x16
c001974d:	50                   	push   eax
c001974e:	e8 1d 6e fe ff       	call   c0000570 <strlen>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	ba 00 00 00 00       	mov    edx,0x0
c001975b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001975f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019763:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001976a:	0f b6 c0             	movzx  eax,al
c001976d:	83 e0 10             	and    eax,0x10
c0019770:	74 0a                	je     c001977c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019772:	b8 02 00 00 00       	mov    eax,0x2
c0019777:	eb 0b                	jmp    c0019784 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	b8 01 00 00 00       	mov    eax,0x1
c0019781:	8d 76 00             	lea    esi,[esi+0x0]
c0019784:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019788:	83 ec 08             	sub    esp,0x8
c001978b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019792:	83 c0 16             	add    eax,0x16
c0019795:	50                   	push   eax
c0019796:	8d 44 24 14          	lea    eax,[esp+0x14]
c001979a:	83 c0 10             	add    eax,0x10
c001979d:	50                   	push   eax
c001979e:	e8 9d 6e fe ff       	call   c0000640 <strcpy>
c00197a3:	83 c4 10             	add    esp,0x10
c00197a6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00197ad:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00197b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197b8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00197bf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00197c6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00197cd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00197d4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197db:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197e2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197e9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197f0:	89 c6                	mov    esi,eax
c00197f2:	89 d7                	mov    edi,edx
c00197f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197f6:	89 c8                	mov    eax,ecx
c00197f8:	89 fa                	mov    edx,edi
c00197fa:	89 f3                	mov    ebx,esi
c00197fc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019803:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001980a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019811:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019818:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001981e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019825:	0f be c0             	movsx  eax,al
c0019828:	85 c0                	test   eax,eax
c001982a:	75 08                	jne    c0019834 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001982c:	b8 07 00 00 00       	mov    eax,0x7
c0019831:	eb 1d                	jmp    c0019850 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019833:	90                   	nop
c0019834:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001983b:	85 c0                	test   eax,eax
c001983d:	75 09                	jne    c0019848 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001983f:	b8 00 00 00 00       	mov    eax,0x0
c0019844:	eb 0a                	jmp    c0019850 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019846:	66 90                	xchg   ax,ax
c0019848:	b8 01 00 00 00       	mov    eax,0x1
c001984d:	8d 76 00             	lea    esi,[esi+0x0]
c0019850:	81 c4 50 02 00 00    	add    esp,0x250
c0019856:	5b                   	pop    ebx
c0019857:	5e                   	pop    esi
c0019858:	5f                   	pop    edi
c0019859:	c3                   	ret    
c001985a:	66 90                	xchg   ax,ax

c001985c <FAT::read(void*, unsigned long, void*, int*)>:
c001985c:	83 ec 1c             	sub    esp,0x1c
c001985f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019864:	74 0a                	je     c0019870 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019866:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001986b:	75 0b                	jne    c0019878 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001986d:	8d 76 00             	lea    esi,[esi+0x0]
c0019870:	b8 04 00 00 00       	mov    eax,0x4
c0019875:	eb 41                	jmp    c00198b8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019877:	90                   	nop
c0019878:	8d 44 24 08          	lea    eax,[esp+0x8]
c001987c:	50                   	push   eax
c001987d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019881:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019889:	e8 8f a6 fe ff       	call   c0003f1d <f_read>
c001988e:	83 c4 10             	add    esp,0x10
c0019891:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019899:	89 c2                	mov    edx,eax
c001989b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001989f:	89 10                	mov    DWORD PTR [eax],edx
c00198a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198a5:	85 c0                	test   eax,eax
c00198a7:	75 07                	jne    c00198b0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00198a9:	b8 00 00 00 00       	mov    eax,0x0
c00198ae:	eb 08                	jmp    c00198b8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00198b0:	b8 01 00 00 00       	mov    eax,0x1
c00198b5:	8d 76 00             	lea    esi,[esi+0x0]
c00198b8:	83 c4 1c             	add    esp,0x1c
c00198bb:	c3                   	ret    

c00198bc <FAT::write(void*, unsigned long, void*, int*)>:
c00198bc:	83 ec 1c             	sub    esp,0x1c
c00198bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198c4:	74 0a                	je     c00198d0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00198c6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198cb:	75 0b                	jne    c00198d8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	b8 04 00 00 00       	mov    eax,0x4
c00198d5:	eb 41                	jmp    c0019918 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198d7:	90                   	nop
c00198d8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198dc:	50                   	push   eax
c00198dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198e9:	e8 2e a8 fe ff       	call   c000411c <f_write>
c00198ee:	83 c4 10             	add    esp,0x10
c00198f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198f9:	89 c2                	mov    edx,eax
c00198fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198ff:	89 10                	mov    DWORD PTR [eax],edx
c0019901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019905:	85 c0                	test   eax,eax
c0019907:	75 07                	jne    c0019910 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019909:	b8 00 00 00 00       	mov    eax,0x0
c001990e:	eb 08                	jmp    c0019918 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019910:	b8 01 00 00 00       	mov    eax,0x1
c0019915:	8d 76 00             	lea    esi,[esi+0x0]
c0019918:	83 c4 1c             	add    esp,0x1c
c001991b:	c3                   	ret    

c001991c <FAT::close(void*)>:
c001991c:	83 ec 1c             	sub    esp,0x1c
c001991f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019924:	75 0a                	jne    c0019930 <FAT::close(void*)+0x14>
c0019926:	b8 04 00 00 00       	mov    eax,0x4
c001992b:	eb 3f                	jmp    c001996c <FAT::close(void*)+0x50>
c001992d:	8d 76 00             	lea    esi,[esi+0x0]
c0019930:	83 ec 0c             	sub    esp,0xc
c0019933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019937:	e8 ed aa fe ff       	call   c0004429 <f_close>
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019943:	83 ec 0c             	sub    esp,0xc
c0019946:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001994a:	e8 77 e1 fe ff       	call   c0007ac6 <free>
c001994f:	83 c4 10             	add    esp,0x10
c0019952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019956:	85 c0                	test   eax,eax
c0019958:	75 0a                	jne    c0019964 <FAT::close(void*)+0x48>
c001995a:	b8 00 00 00 00       	mov    eax,0x0
c001995f:	eb 0b                	jmp    c001996c <FAT::close(void*)+0x50>
c0019961:	8d 76 00             	lea    esi,[esi+0x0]
c0019964:	b8 01 00 00 00       	mov    eax,0x1
c0019969:	8d 76 00             	lea    esi,[esi+0x0]
c001996c:	83 c4 1c             	add    esp,0x1c
c001996f:	c3                   	ret    

c0019970 <FAT::closeDir(void*)>:
c0019970:	83 ec 1c             	sub    esp,0x1c
c0019973:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019978:	75 0a                	jne    c0019984 <FAT::closeDir(void*)+0x14>
c001997a:	b8 04 00 00 00       	mov    eax,0x4
c001997f:	eb 3f                	jmp    c00199c0 <FAT::closeDir(void*)+0x50>
c0019981:	8d 76 00             	lea    esi,[esi+0x0]
c0019984:	83 ec 0c             	sub    esp,0xc
c0019987:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998b:	e8 44 ad fe ff       	call   c00046d4 <f_closedir>
c0019990:	83 c4 10             	add    esp,0x10
c0019993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019997:	83 ec 0c             	sub    esp,0xc
c001999a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001999e:	e8 23 e1 fe ff       	call   c0007ac6 <free>
c00199a3:	83 c4 10             	add    esp,0x10
c00199a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199aa:	85 c0                	test   eax,eax
c00199ac:	75 0a                	jne    c00199b8 <FAT::closeDir(void*)+0x48>
c00199ae:	b8 00 00 00 00       	mov    eax,0x0
c00199b3:	eb 0b                	jmp    c00199c0 <FAT::closeDir(void*)+0x50>
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	b8 01 00 00 00       	mov    eax,0x1
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	83 c4 1c             	add    esp,0x1c
c00199c3:	c3                   	ret    

c00199c4 <FAT::truncate(void*, unsigned long long)>:
c00199c4:	83 ec 2c             	sub    esp,0x2c
c00199c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199dc:	75 0a                	jne    c00199e8 <FAT::truncate(void*, unsigned long long)+0x24>
c00199de:	b8 04 00 00 00       	mov    eax,0x4
c00199e3:	eb 47                	jmp    c0019a2c <FAT::truncate(void*, unsigned long long)+0x68>
c00199e5:	8d 76 00             	lea    esi,[esi+0x0]
c00199e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199ff:	83 ec 08             	sub    esp,0x8
c0019a02:	50                   	push   eax
c0019a03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a07:	e8 4c aa fe ff       	call   c0004458 <f_lseek>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a17:	85 c0                	test   eax,eax
c0019a19:	75 09                	jne    c0019a24 <FAT::truncate(void*, unsigned long long)+0x60>
c0019a1b:	b8 00 00 00 00       	mov    eax,0x0
c0019a20:	eb 0a                	jmp    c0019a2c <FAT::truncate(void*, unsigned long long)+0x68>
c0019a22:	66 90                	xchg   ax,ax
c0019a24:	b8 01 00 00 00       	mov    eax,0x1
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	83 c4 2c             	add    esp,0x2c
c0019a2f:	c3                   	ret    

c0019a30 <FAT::seek(void*, unsigned long long)>:
c0019a30:	83 ec 2c             	sub    esp,0x2c
c0019a33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a43:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a48:	75 0a                	jne    c0019a54 <FAT::seek(void*, unsigned long long)+0x24>
c0019a4a:	b8 04 00 00 00       	mov    eax,0x4
c0019a4f:	eb 33                	jmp    c0019a84 <FAT::seek(void*, unsigned long long)+0x54>
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a58:	83 ec 08             	sub    esp,0x8
c0019a5b:	50                   	push   eax
c0019a5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a60:	e8 f3 a9 fe ff       	call   c0004458 <f_lseek>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a70:	85 c0                	test   eax,eax
c0019a72:	75 08                	jne    c0019a7c <FAT::seek(void*, unsigned long long)+0x4c>
c0019a74:	b8 00 00 00 00       	mov    eax,0x0
c0019a79:	eb 09                	jmp    c0019a84 <FAT::seek(void*, unsigned long long)+0x54>
c0019a7b:	90                   	nop
c0019a7c:	b8 01 00 00 00       	mov    eax,0x1
c0019a81:	8d 76 00             	lea    esi,[esi+0x0]
c0019a84:	83 c4 2c             	add    esp,0x2c
c0019a87:	c3                   	ret    

c0019a88 <fatWrapperReadDisk>:
c0019a88:	53                   	push   ebx
c0019a89:	83 ec 18             	sub    esp,0x18
c0019a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a99:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019aa0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019aa8:	ba 00 00 00 00       	mov    edx,0x0
c0019aad:	83 ec 0c             	sub    esp,0xc
c0019ab0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ab4:	53                   	push   ebx
c0019ab5:	52                   	push   edx
c0019ab6:	50                   	push   eax
c0019ab7:	51                   	push   ecx
c0019ab8:	e8 1f 43 ff ff       	call   c000dddc <LogicalDisk::read(unsigned long long, int, void*)>
c0019abd:	83 c4 20             	add    esp,0x20
c0019ac0:	83 c4 18             	add    esp,0x18
c0019ac3:	5b                   	pop    ebx
c0019ac4:	c3                   	ret    
c0019ac5:	8d 76 00             	lea    esi,[esi+0x0]

c0019ac8 <fatWrapperWriteDisk>:
c0019ac8:	53                   	push   ebx
c0019ac9:	83 ec 18             	sub    esp,0x18
c0019acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ad4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ad9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ae0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ae4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ae8:	ba 00 00 00 00       	mov    edx,0x0
c0019aed:	83 ec 0c             	sub    esp,0xc
c0019af0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019af4:	53                   	push   ebx
c0019af5:	52                   	push   edx
c0019af6:	50                   	push   eax
c0019af7:	51                   	push   ecx
c0019af8:	e8 4b 43 ff ff       	call   c000de48 <LogicalDisk::write(unsigned long long, int, void*)>
c0019afd:	83 c4 20             	add    esp,0x20
c0019b00:	83 c4 18             	add    esp,0x18
c0019b03:	5b                   	pop    ebx
c0019b04:	c3                   	ret    
c0019b05:	8d 76 00             	lea    esi,[esi+0x0]

c0019b08 <fatWrapperIoctl>:
c0019b08:	53                   	push   ebx
c0019b09:	83 ec 28             	sub    esp,0x28
c0019b0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b14:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b21:	83 f8 02             	cmp    eax,0x2
c0019b24:	75 32                	jne    c0019b58 <fatWrapperIoctl+0x50>
c0019b26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b2e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b33:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b40:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b4a:	66 89 02             	mov    WORD PTR [edx],ax
c0019b4d:	b8 00 00 00 00       	mov    eax,0x0
c0019b52:	e9 c5 00 00 00       	jmp    c0019c1c <fatWrapperIoctl+0x114>
c0019b57:	90                   	nop
c0019b58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b5d:	83 f8 01             	cmp    eax,0x1
c0019b60:	75 6a                	jne    c0019bcc <fatWrapperIoctl+0xc4>
c0019b62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b6a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b6f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b76:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b7c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b82:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b88:	89 c8                	mov    eax,ecx
c0019b8a:	89 da                	mov    edx,ebx
c0019b8c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b90:	c1 e0 0a             	shl    eax,0xa
c0019b93:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b98:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b9f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019ba5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019bab:	89 cb                	mov    ebx,ecx
c0019bad:	c1 fb 1f             	sar    ebx,0x1f
c0019bb0:	53                   	push   ebx
c0019bb1:	51                   	push   ecx
c0019bb2:	52                   	push   edx
c0019bb3:	50                   	push   eax
c0019bb4:	e8 77 5b 00 00       	call   c001f730 <__udivdi3>
c0019bb9:	83 c4 10             	add    esp,0x10
c0019bbc:	89 c2                	mov    edx,eax
c0019bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bc2:	89 10                	mov    DWORD PTR [eax],edx
c0019bc4:	b8 00 00 00 00       	mov    eax,0x0
c0019bc9:	eb 51                	jmp    c0019c1c <fatWrapperIoctl+0x114>
c0019bcb:	90                   	nop
c0019bcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd1:	85 c0                	test   eax,eax
c0019bd3:	75 07                	jne    c0019bdc <fatWrapperIoctl+0xd4>
c0019bd5:	b8 00 00 00 00       	mov    eax,0x0
c0019bda:	eb 40                	jmp    c0019c1c <fatWrapperIoctl+0x114>
c0019bdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be1:	83 f8 03             	cmp    eax,0x3
c0019be4:	75 1a                	jne    c0019c00 <fatWrapperIoctl+0xf8>
c0019be6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bf2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bf8:	b8 00 00 00 00       	mov    eax,0x0
c0019bfd:	eb 1d                	jmp    c0019c1c <fatWrapperIoctl+0x114>
c0019bff:	90                   	nop
c0019c00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c05:	83 f8 04             	cmp    eax,0x4
c0019c08:	75 0a                	jne    c0019c14 <fatWrapperIoctl+0x10c>
c0019c0a:	b8 00 00 00 00       	mov    eax,0x0
c0019c0f:	eb 0b                	jmp    c0019c1c <fatWrapperIoctl+0x114>
c0019c11:	8d 76 00             	lea    esi,[esi+0x0]
c0019c14:	b8 04 00 00 00       	mov    eax,0x4
c0019c19:	8d 76 00             	lea    esi,[esi+0x0]
c0019c1c:	83 c4 28             	add    esp,0x28
c0019c1f:	5b                   	pop    ebx
c0019c20:	c3                   	ret    
c0019c21:	90                   	nop
c0019c22:	66 90                	xchg   ax,ax

c0019c24 <FAT::FAT()>:
c0019c24:	83 ec 1c             	sub    esp,0x1c
c0019c27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c2b:	83 ec 0c             	sub    esp,0xc
c0019c2e:	50                   	push   eax
c0019c2f:	e8 bc 1b ff ff       	call   c000b7f0 <Filesystem::Filesystem()>
c0019c34:	83 c4 10             	add    esp,0x10
c0019c37:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c0019c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c40:	89 10                	mov    DWORD PTR [eax],edx
c0019c42:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c54:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c59:	7f 19                	jg     c0019c74 <FAT::FAT()+0x50>
c0019c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c5f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c6a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c6f:	eb e3                	jmp    c0019c54 <FAT::FAT()+0x30>
c0019c71:	8d 76 00             	lea    esi,[esi+0x0]
c0019c74:	90                   	nop
c0019c75:	83 c4 1c             	add    esp,0x1c
c0019c78:	c3                   	ret    
c0019c79:	90                   	nop
c0019c7a:	66 90                	xchg   ax,ax

c0019c7c <FAT::fixFilepath(char*)>:
c0019c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c80:	8a 00                	mov    al,BYTE PTR [eax]
c0019c82:	0f be c0             	movsx  eax,al
c0019c85:	83 f8 40             	cmp    eax,0x40
c0019c88:	7e 2e                	jle    c0019cb8 <FAT::fixFilepath(char*)+0x3c>
c0019c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8e:	8a 00                	mov    al,BYTE PTR [eax]
c0019c90:	83 e8 41             	sub    eax,0x41
c0019c93:	88 c2                	mov    dl,al
c0019c95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c99:	88 10                	mov    BYTE PTR [eax],dl
c0019c9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9f:	8a 00                	mov    al,BYTE PTR [eax]
c0019ca1:	0f be c0             	movsx  eax,al
c0019ca4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019cab:	83 c0 30             	add    eax,0x30
c0019cae:	88 c2                	mov    dl,al
c0019cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cb4:	88 10                	mov    BYTE PTR [eax],dl
c0019cb6:	66 90                	xchg   ax,ax
c0019cb8:	90                   	nop
c0019cb9:	c3                   	ret    
c0019cba:	66 90                	xchg   ax,ax

c0019cbc <FAT::open(char const*, void**, FileOpenMode)>:
c0019cbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cca:	74 0c                	je     c0019cd8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019ccc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cd4:	75 0e                	jne    c0019ce4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019cd6:	66 90                	xchg   ax,ax
c0019cd8:	b8 04 00 00 00       	mov    eax,0x4
c0019cdd:	e9 46 01 00 00       	jmp    c0019e28 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ce2:	66 90                	xchg   ax,ax
c0019ce4:	83 ec 08             	sub    esp,0x8
c0019ce7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cf2:	50                   	push   eax
c0019cf3:	e8 48 69 fe ff       	call   c0000640 <strcpy>
c0019cf8:	83 c4 10             	add    esp,0x10
c0019cfb:	83 ec 08             	sub    esp,0x8
c0019cfe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d02:	50                   	push   eax
c0019d03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d0a:	e8 6d ff ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d1a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d21:	83 e0 01             	and    eax,0x1
c0019d24:	74 12                	je     c0019d38 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019d26:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d2d:	83 c8 01             	or     eax,0x1
c0019d30:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d37:	90                   	nop
c0019d38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d3f:	83 e0 04             	and    eax,0x4
c0019d42:	74 24                	je     c0019d68 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d44:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d4b:	83 c8 30             	or     eax,0x30
c0019d4e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d55:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d5c:	83 c8 02             	or     eax,0x2
c0019d5f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d6f:	83 e0 02             	and    eax,0x2
c0019d72:	74 14                	je     c0019d88 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d74:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d7b:	83 c8 02             	or     eax,0x2
c0019d7e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d85:	8d 76 00             	lea    esi,[esi+0x0]
c0019d88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d8f:	83 e0 08             	and    eax,0x8
c0019d92:	74 14                	je     c0019da8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d9b:	83 c8 04             	or     eax,0x4
c0019d9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019da5:	8d 76 00             	lea    esi,[esi+0x0]
c0019da8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019daf:	83 e0 10             	and    eax,0x10
c0019db2:	74 14                	je     c0019dc8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019db4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dbb:	83 c8 08             	or     eax,0x8
c0019dbe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc8:	83 ec 0c             	sub    esp,0xc
c0019dcb:	68 28 02 00 00       	push   0x228
c0019dd0:	e8 e1 dc fe ff       	call   c0007ab6 <malloc>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	89 c2                	mov    edx,eax
c0019dda:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019de1:	89 10                	mov    DWORD PTR [eax],edx
c0019de3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019deb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df4:	83 ec 04             	sub    esp,0x4
c0019df7:	52                   	push   edx
c0019df8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019dfc:	52                   	push   edx
c0019dfd:	50                   	push   eax
c0019dfe:	e8 57 9e fe ff       	call   c0003c5a <f_open>
c0019e03:	83 c4 10             	add    esp,0x10
c0019e06:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e0d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e15:	74 09                	je     c0019e20 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019e17:	b8 01 00 00 00       	mov    eax,0x1
c0019e1c:	eb 0a                	jmp    c0019e28 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e1e:	66 90                	xchg   ax,ax
c0019e20:	b8 00 00 00 00       	mov    eax,0x0
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e2e:	c3                   	ret    
c0019e2f:	90                   	nop

c0019e30 <FAT::openDir(char const*, void**)>:
c0019e30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e3e:	74 0c                	je     c0019e4c <FAT::openDir(char const*, void**)+0x1c>
c0019e40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e48:	75 0e                	jne    c0019e58 <FAT::openDir(char const*, void**)+0x28>
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	b8 04 00 00 00       	mov    eax,0x4
c0019e51:	e9 82 00 00 00       	jmp    c0019ed8 <FAT::openDir(char const*, void**)+0xa8>
c0019e56:	66 90                	xchg   ax,ax
c0019e58:	83 ec 08             	sub    esp,0x8
c0019e5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e62:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e66:	50                   	push   eax
c0019e67:	e8 d4 67 fe ff       	call   c0000640 <strcpy>
c0019e6c:	83 c4 10             	add    esp,0x10
c0019e6f:	83 ec 08             	sub    esp,0x8
c0019e72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e76:	50                   	push   eax
c0019e77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e7e:	e8 f9 fd ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c0019e83:	83 c4 10             	add    esp,0x10
c0019e86:	83 ec 0c             	sub    esp,0xc
c0019e89:	6a 30                	push   0x30
c0019e8b:	e8 26 dc fe ff       	call   c0007ab6 <malloc>
c0019e90:	83 c4 10             	add    esp,0x10
c0019e93:	89 c2                	mov    edx,eax
c0019e95:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e9c:	89 10                	mov    DWORD PTR [eax],edx
c0019e9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ea5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ea7:	83 ec 08             	sub    esp,0x8
c0019eaa:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019eae:	52                   	push   edx
c0019eaf:	50                   	push   eax
c0019eb0:	e8 54 a7 fe ff       	call   c0004609 <f_opendir>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ebf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ec7:	74 07                	je     c0019ed0 <FAT::openDir(char const*, void**)+0xa0>
c0019ec9:	b8 01 00 00 00       	mov    eax,0x1
c0019ece:	eb 08                	jmp    c0019ed8 <FAT::openDir(char const*, void**)+0xa8>
c0019ed0:	b8 00 00 00 00       	mov    eax,0x0
c0019ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ede:	c3                   	ret    
c0019edf:	90                   	nop

c0019ee0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019ee0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019ee6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019eee:	75 0c                	jne    c0019efc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ef0:	b8 04 00 00 00       	mov    eax,0x4
c0019ef5:	e9 d6 00 00 00       	jmp    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019efa:	66 90                	xchg   ax,ax
c0019efc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f04:	75 0a                	jne    c0019f10 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019f06:	b8 04 00 00 00       	mov    eax,0x4
c0019f0b:	e9 c0 00 00 00       	jmp    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f10:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f18:	75 0a                	jne    c0019f24 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019f1a:	b8 04 00 00 00       	mov    eax,0x4
c0019f1f:	e9 ac 00 00 00       	jmp    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f24:	83 ec 08             	sub    esp,0x8
c0019f27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f2e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f35:	50                   	push   eax
c0019f36:	e8 05 67 fe ff       	call   c0000640 <strcpy>
c0019f3b:	83 c4 10             	add    esp,0x10
c0019f3e:	83 ec 08             	sub    esp,0x8
c0019f41:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f48:	50                   	push   eax
c0019f49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f50:	e8 27 fd ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c0019f55:	83 c4 10             	add    esp,0x10
c0019f58:	83 ec 08             	sub    esp,0x8
c0019f5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f5f:	50                   	push   eax
c0019f60:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f67:	50                   	push   eax
c0019f68:	e8 1b a8 fe ff       	call   c0004788 <f_stat>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f77:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f7e:	85 c0                	test   eax,eax
c0019f80:	74 0a                	je     c0019f8c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f82:	83 f8 04             	cmp    eax,0x4
c0019f85:	74 39                	je     c0019fc0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f87:	eb 3f                	jmp    c0019fc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f90:	0f b6 c0             	movzx  eax,al
c0019f93:	83 e0 10             	and    eax,0x10
c0019f96:	0f 95 c2             	setne  dl
c0019f99:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fa0:	88 10                	mov    BYTE PTR [eax],dl
c0019fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fa6:	ba 00 00 00 00       	mov    edx,0x0
c0019fab:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fb2:	89 01                	mov    DWORD PTR [ecx],eax
c0019fb4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fb7:	b8 00 00 00 00       	mov    eax,0x0
c0019fbc:	eb 12                	jmp    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fbe:	66 90                	xchg   ax,ax
c0019fc0:	b8 02 00 00 00       	mov    eax,0x2
c0019fc5:	eb 09                	jmp    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fc7:	90                   	nop
c0019fc8:	b8 01 00 00 00       	mov    eax,0x1
c0019fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fd6:	c3                   	ret    
c0019fd7:	90                   	nop

c0019fd8 <FAT::unlink(char const*)>:
c0019fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fe6:	75 08                	jne    c0019ff0 <FAT::unlink(char const*)+0x18>
c0019fe8:	b8 04 00 00 00       	mov    eax,0x4
c0019fed:	eb 61                	jmp    c001a050 <FAT::unlink(char const*)+0x78>
c0019fef:	90                   	nop
c0019ff0:	83 ec 08             	sub    esp,0x8
c0019ff3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ffa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ffe:	50                   	push   eax
c0019fff:	e8 3c 66 fe ff       	call   c0000640 <strcpy>
c001a004:	83 c4 10             	add    esp,0x10
c001a007:	83 ec 08             	sub    esp,0x8
c001a00a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a00e:	50                   	push   eax
c001a00f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a016:	e8 61 fc ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a01b:	83 c4 10             	add    esp,0x10
c001a01e:	83 ec 0c             	sub    esp,0xc
c001a021:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a025:	50                   	push   eax
c001a026:	e8 cf a9 fe ff       	call   c00049fa <f_unlink>
c001a02b:	83 c4 10             	add    esp,0x10
c001a02e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a035:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a03c:	85 c0                	test   eax,eax
c001a03e:	75 08                	jne    c001a048 <FAT::unlink(char const*)+0x70>
c001a040:	b8 00 00 00 00       	mov    eax,0x0
c001a045:	eb 09                	jmp    c001a050 <FAT::unlink(char const*)+0x78>
c001a047:	90                   	nop
c001a048:	b8 01 00 00 00       	mov    eax,0x1
c001a04d:	8d 76 00             	lea    esi,[esi+0x0]
c001a050:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a056:	c3                   	ret    
c001a057:	90                   	nop

c001a058 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a058:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a05e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a065:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a06c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a070:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a074:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a07c:	75 0a                	jne    c001a088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a07e:	b8 04 00 00 00       	mov    eax,0x4
c001a083:	e9 7c 01 00 00       	jmp    c001a204 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a088:	83 ec 08             	sub    esp,0x8
c001a08b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a092:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a096:	50                   	push   eax
c001a097:	e8 a4 65 fe ff       	call   c0000640 <strcpy>
c001a09c:	83 c4 10             	add    esp,0x10
c001a09f:	83 ec 08             	sub    esp,0x8
c001a0a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0a6:	50                   	push   eax
c001a0a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0ae:	e8 c9 fb ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0cb:	83 e0 01             	and    eax,0x1
c001a0ce:	74 14                	je     c001a0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a0d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0d7:	83 c8 01             	or     eax,0x1
c001a0da:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0e9:	83 e0 02             	and    eax,0x2
c001a0ec:	74 12                	je     c001a100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a0ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0f5:	83 c8 20             	or     eax,0x20
c001a0f8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0ff:	90                   	nop
c001a100:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a105:	83 e0 04             	and    eax,0x4
c001a108:	74 12                	je     c001a11c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a10a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a111:	83 c8 04             	or     eax,0x4
c001a114:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a11b:	90                   	nop
c001a11c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a121:	83 e0 08             	and    eax,0x8
c001a124:	74 12                	je     c001a138 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a126:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a12d:	83 c8 02             	or     eax,0x2
c001a130:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a137:	90                   	nop
c001a138:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a13d:	83 e0 01             	and    eax,0x1
c001a140:	74 12                	je     c001a154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a142:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a149:	83 c8 01             	or     eax,0x1
c001a14c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a153:	90                   	nop
c001a154:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a159:	83 e0 02             	and    eax,0x2
c001a15c:	74 12                	je     c001a170 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a15e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a165:	83 c8 20             	or     eax,0x20
c001a168:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a16f:	90                   	nop
c001a170:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a175:	83 e0 04             	and    eax,0x4
c001a178:	74 12                	je     c001a18c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a17a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a181:	83 c8 04             	or     eax,0x4
c001a184:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a18b:	90                   	nop
c001a18c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a191:	83 e0 08             	and    eax,0x8
c001a194:	74 12                	je     c001a1a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a196:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a19d:	83 c8 02             	or     eax,0x2
c001a1a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1a7:	90                   	nop
c001a1a8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a1af:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1b6:	09 d0                	or     eax,edx
c001a1b8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1bf:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a1c7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1cf:	83 ec 04             	sub    esp,0x4
c001a1d2:	52                   	push   edx
c001a1d3:	50                   	push   eax
c001a1d4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1d8:	50                   	push   eax
c001a1d9:	e8 91 ac fe ff       	call   c0004e6f <f_chmod>
c001a1de:	83 c4 10             	add    esp,0x10
c001a1e1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1e8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1ef:	85 c0                	test   eax,eax
c001a1f1:	75 09                	jne    c001a1fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a1f3:	b8 00 00 00 00       	mov    eax,0x0
c001a1f8:	eb 0a                	jmp    c001a204 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	b8 01 00 00 00       	mov    eax,0x1
c001a201:	8d 76 00             	lea    esi,[esi+0x0]
c001a204:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a20a:	c3                   	ret    
c001a20b:	90                   	nop

c001a20c <FAT::rename(char const*, char const*)>:
c001a20c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a212:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a21a:	74 0c                	je     c001a228 <FAT::rename(char const*, char const*)+0x1c>
c001a21c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a224:	75 0e                	jne    c001a234 <FAT::rename(char const*, char const*)+0x28>
c001a226:	66 90                	xchg   ax,ax
c001a228:	b8 04 00 00 00       	mov    eax,0x4
c001a22d:	e9 9e 00 00 00       	jmp    c001a2d0 <FAT::rename(char const*, char const*)+0xc4>
c001a232:	66 90                	xchg   ax,ax
c001a234:	83 ec 08             	sub    esp,0x8
c001a237:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a23e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a245:	50                   	push   eax
c001a246:	e8 f5 63 fe ff       	call   c0000640 <strcpy>
c001a24b:	83 c4 10             	add    esp,0x10
c001a24e:	83 ec 08             	sub    esp,0x8
c001a251:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a258:	50                   	push   eax
c001a259:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a260:	e8 17 fa ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	83 ec 08             	sub    esp,0x8
c001a26b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a272:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a276:	50                   	push   eax
c001a277:	e8 c4 63 fe ff       	call   c0000640 <strcpy>
c001a27c:	83 c4 10             	add    esp,0x10
c001a27f:	83 ec 08             	sub    esp,0x8
c001a282:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a286:	50                   	push   eax
c001a287:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a28e:	e8 e9 f9 ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	83 ec 08             	sub    esp,0x8
c001a299:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a29d:	50                   	push   eax
c001a29e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2a5:	50                   	push   eax
c001a2a6:	e8 0c aa fe ff       	call   c0004cb7 <f_rename>
c001a2ab:	83 c4 10             	add    esp,0x10
c001a2ae:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a2b5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a2bc:	85 c0                	test   eax,eax
c001a2be:	75 08                	jne    c001a2c8 <FAT::rename(char const*, char const*)+0xbc>
c001a2c0:	b8 00 00 00 00       	mov    eax,0x0
c001a2c5:	eb 09                	jmp    c001a2d0 <FAT::rename(char const*, char const*)+0xc4>
c001a2c7:	90                   	nop
c001a2c8:	b8 01 00 00 00       	mov    eax,0x1
c001a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2d6:	c3                   	ret    
c001a2d7:	90                   	nop

c001a2d8 <FAT::mkdir(char const*)>:
c001a2d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2e6:	75 08                	jne    c001a2f0 <FAT::mkdir(char const*)+0x18>
c001a2e8:	b8 04 00 00 00       	mov    eax,0x4
c001a2ed:	eb 61                	jmp    c001a350 <FAT::mkdir(char const*)+0x78>
c001a2ef:	90                   	nop
c001a2f0:	83 ec 08             	sub    esp,0x8
c001a2f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2fe:	50                   	push   eax
c001a2ff:	e8 3c 63 fe ff       	call   c0000640 <strcpy>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	83 ec 08             	sub    esp,0x8
c001a30a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a30e:	50                   	push   eax
c001a30f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a316:	e8 61 f9 ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a31b:	83 c4 10             	add    esp,0x10
c001a31e:	83 ec 0c             	sub    esp,0xc
c001a321:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a325:	50                   	push   eax
c001a326:	e8 f1 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a335:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a33c:	85 c0                	test   eax,eax
c001a33e:	75 08                	jne    c001a348 <FAT::mkdir(char const*)+0x70>
c001a340:	b8 00 00 00 00       	mov    eax,0x0
c001a345:	eb 09                	jmp    c001a350 <FAT::mkdir(char const*)+0x78>
c001a347:	90                   	nop
c001a348:	b8 01 00 00 00       	mov    eax,0x1
c001a34d:	8d 76 00             	lea    esi,[esi+0x0]
c001a350:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a356:	c3                   	ret    
c001a357:	90                   	nop

c001a358 <FAT::exists(char const*)>:
c001a358:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a35e:	83 ec 08             	sub    esp,0x8
c001a361:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a368:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a36c:	50                   	push   eax
c001a36d:	e8 ce 62 fe ff       	call   c0000640 <strcpy>
c001a372:	83 c4 10             	add    esp,0x10
c001a375:	83 ec 08             	sub    esp,0x8
c001a378:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a37c:	50                   	push   eax
c001a37d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a384:	e8 f3 f8 ff ff       	call   c0019c7c <FAT::fixFilepath(char*)>
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	83 ec 08             	sub    esp,0x8
c001a38f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a396:	50                   	push   eax
c001a397:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a39b:	50                   	push   eax
c001a39c:	e8 e7 a3 fe ff       	call   c0004788 <f_stat>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a3ab:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a3b2:	85 c0                	test   eax,eax
c001a3b4:	75 06                	jne    c001a3bc <FAT::exists(char const*)+0x64>
c001a3b6:	b0 01                	mov    al,0x1
c001a3b8:	eb 06                	jmp    c001a3c0 <FAT::exists(char const*)+0x68>
c001a3ba:	66 90                	xchg   ax,ax
c001a3bc:	b0 00                	mov    al,0x0
c001a3be:	66 90                	xchg   ax,ax
c001a3c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a3c6:	c3                   	ret    
c001a3c7:	90                   	nop

c001a3c8 <isoReadDiscSectorHelper>:
c001a3c8:	83 ec 2c             	sub    esp,0x2c
c001a3cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a3cf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a3d3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3d8:	83 e8 41             	sub    eax,0x41
c001a3db:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3e6:	ba 00 00 00 00       	mov    edx,0x0
c001a3eb:	83 ec 0c             	sub    esp,0xc
c001a3ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	51                   	push   ecx
c001a3f9:	e8 de 39 ff ff       	call   c000dddc <LogicalDisk::read(unsigned long long, int, void*)>
c001a3fe:	83 c4 20             	add    esp,0x20
c001a401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a405:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a40a:	74 0c                	je     c001a418 <isoReadDiscSectorHelper+0x50>
c001a40c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a410:	c1 e0 0b             	shl    eax,0xb
c001a413:	eb 0b                	jmp    c001a420 <isoReadDiscSectorHelper+0x58>
c001a415:	8d 76 00             	lea    esi,[esi+0x0]
c001a418:	b8 00 00 00 00       	mov    eax,0x0
c001a41d:	8d 76 00             	lea    esi,[esi+0x0]
c001a420:	83 c4 2c             	add    esp,0x2c
c001a423:	c3                   	ret    

c001a424 <iso_kprintf>:
c001a424:	83 ec 0c             	sub    esp,0xc
c001a427:	83 ec 08             	sub    esp,0x8
c001a42a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42e:	68 da 2b 02 c0       	push   0xc0022bda
c001a433:	e8 0d 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	90                   	nop
c001a43c:	83 c4 0c             	add    esp,0xc
c001a43f:	c3                   	ret    

c001a440 <iso_kprintfd>:
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	83 ec 08             	sub    esp,0x8
c001a446:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a44a:	68 fa 12 02 c0       	push   0xc00212fa
c001a44f:	e8 f1 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a454:	83 c4 10             	add    esp,0x10
c001a457:	90                   	nop
c001a458:	83 c4 0c             	add    esp,0xc
c001a45b:	c3                   	ret    

c001a45c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a45c:	b8 08 00 00 00       	mov    eax,0x8
c001a461:	c3                   	ret    

c001a462 <ISO9660::truncate(void*, unsigned long long)>:
c001a462:	b8 01 00 00 00       	mov    eax,0x1
c001a467:	c3                   	ret    

c001a468 <ISO9660::getName()>:
c001a468:	b8 90 2e 02 c0       	mov    eax,0xc0022e90
c001a46d:	c3                   	ret    

c001a46e <ISO9660::closeDir(void*)>:
c001a46e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a472:	8b 00                	mov    eax,DWORD PTR [eax]
c001a474:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a477:	90                   	nop

c001a478 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a478:	b8 01 00 00 00       	mov    eax,0x1
c001a47d:	c3                   	ret    

c001a47e <ISO9660::unlink(char const*)>:
c001a47e:	b8 01 00 00 00       	mov    eax,0x1
c001a483:	c3                   	ret    

c001a484 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a484:	b8 03 00 00 00       	mov    eax,0x3
c001a489:	c3                   	ret    

c001a48a <ISO9660::rename(char const*, char const*)>:
c001a48a:	b8 01 00 00 00       	mov    eax,0x1
c001a48f:	c3                   	ret    

c001a490 <ISO9660::mkdir(char const*)>:
c001a490:	b8 01 00 00 00       	mov    eax,0x1
c001a495:	c3                   	ret    

c001a496 <ISO9660::~ISO9660()>:
c001a496:	83 ec 0c             	sub    esp,0xc
c001a499:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001a49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a2:	89 10                	mov    DWORD PTR [eax],edx
c001a4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a8:	83 ec 0c             	sub    esp,0xc
c001a4ab:	50                   	push   eax
c001a4ac:	e8 63 13 ff ff       	call   c000b814 <Filesystem::~Filesystem()>
c001a4b1:	83 c4 10             	add    esp,0x10
c001a4b4:	90                   	nop
c001a4b5:	83 c4 0c             	add    esp,0xc
c001a4b8:	c3                   	ret    
c001a4b9:	90                   	nop

c001a4ba <ISO9660::~ISO9660()>:
c001a4ba:	83 ec 0c             	sub    esp,0xc
c001a4bd:	83 ec 0c             	sub    esp,0xc
c001a4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4c4:	e8 cd ff ff ff       	call   c001a496 <ISO9660::~ISO9660()>
c001a4c9:	83 c4 10             	add    esp,0x10
c001a4cc:	83 ec 08             	sub    esp,0x8
c001a4cf:	6a 08                	push   0x8
c001a4d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4d5:	e8 3e 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a4da:	83 c4 10             	add    esp,0x10
c001a4dd:	83 c4 0c             	add    esp,0xc
c001a4e0:	c3                   	ret    
c001a4e1:	90                   	nop

c001a4e2 <ISO9660::exists(char const*)>:
c001a4e2:	83 ec 18             	sub    esp,0x18
c001a4e5:	68 ab 2e 02 c0       	push   0xc0022eab
c001a4ea:	e8 64 71 ff ff       	call   c0011653 <KePanic(char const*)>
c001a4ef:	31 c0                	xor    eax,eax
c001a4f1:	83 c4 1c             	add    esp,0x1c
c001a4f4:	c3                   	ret    
c001a4f5:	90                   	nop

c001a4f6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4f6:	56                   	push   esi
c001a4f7:	53                   	push   ebx
c001a4f8:	53                   	push   ebx
c001a4f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a501:	85 db                	test   ebx,ebx
c001a503:	0f 84 ca 00 00 00    	je     c001a5d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a509:	85 f6                	test   esi,esi
c001a50b:	0f 84 c2 00 00 00    	je     c001a5d3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a511:	b8 03 00 00 00       	mov    eax,0x3
c001a516:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a51b:	0f 85 b7 00 00 00    	jne    c001a5d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a521:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a523:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a52a:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a530:	74 1b                	je     c001a54d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a532:	85 c0                	test   eax,eax
c001a534:	74 10                	je     c001a546 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a536:	83 ec 0c             	sub    esp,0xc
c001a539:	68 c9 2e 02 c0       	push   0xc0022ec9
c001a53e:	e8 10 71 ff ff       	call   c0011653 <KePanic(char const*)>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	8a 03                	mov    al,BYTE PTR [ebx]
c001a548:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a54d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a550:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a557:	85 c0                	test   eax,eax
c001a559:	74 09                	je     c001a564 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a55b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a562:	74 48                	je     c001a5ac <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	68 d9 2e 02 c0       	push   0xc0022ed9
c001a56c:	e8 d4 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a571:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a57e:	85 c0                	test   eax,eax
c001a580:	74 17                	je     c001a599 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a582:	83 ec 0c             	sub    esp,0xc
c001a585:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a58c:	68 f9 2e 02 c0       	push   0xc0022ef9
c001a591:	e8 af 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	83 ec 0c             	sub    esp,0xc
c001a59c:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5a3:	50                   	push   eax
c001a5a4:	e8 9d c4 fe ff       	call   c0006a46 <init_percd>
c001a5a9:	83 c4 10             	add    esp,0x10
c001a5ac:	83 c3 03             	add    ebx,0x3
c001a5af:	51                   	push   ecx
c001a5b0:	51                   	push   ecx
c001a5b1:	6a 00                	push   0x0
c001a5b3:	53                   	push   ebx
c001a5b4:	e8 54 bf fe ff       	call   c000650d <iso_open>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	89 c2                	mov    edx,eax
c001a5be:	b8 01 00 00 00       	mov    eax,0x1
c001a5c3:	83 fa ff             	cmp    edx,0xffffffff
c001a5c6:	74 10                	je     c001a5d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5c8:	83 c2 32             	add    edx,0x32
c001a5cb:	31 c0                	xor    eax,eax
c001a5cd:	01 d2                	add    edx,edx
c001a5cf:	89 16                	mov    DWORD PTR [esi],edx
c001a5d1:	eb 05                	jmp    c001a5d8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5d3:	b8 04 00 00 00       	mov    eax,0x4
c001a5d8:	5a                   	pop    edx
c001a5d9:	5b                   	pop    ebx
c001a5da:	5e                   	pop    esi
c001a5db:	c3                   	ret    

c001a5dc <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5dc:	53                   	push   ebx
c001a5dd:	83 ec 08             	sub    esp,0x8
c001a5e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5e8:	85 c0                	test   eax,eax
c001a5ea:	74 2d                	je     c001a619 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5ec:	85 db                	test   ebx,ebx
c001a5ee:	74 29                	je     c001a619 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5f0:	b9 02 00 00 00       	mov    ecx,0x2
c001a5f5:	52                   	push   edx
c001a5f6:	99                   	cdq    
c001a5f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5fb:	f7 f9                	idiv   ecx
c001a5fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a601:	83 e8 32             	sub    eax,0x32
c001a604:	50                   	push   eax
c001a605:	e8 ab bf fe ff       	call   c00065b5 <iso_read>
c001a60a:	83 c4 10             	add    esp,0x10
c001a60d:	89 03                	mov    DWORD PTR [ebx],eax
c001a60f:	09 d0                	or     eax,edx
c001a611:	0f 94 c0             	sete   al
c001a614:	0f b6 c0             	movzx  eax,al
c001a617:	eb 05                	jmp    c001a61e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a619:	b8 04 00 00 00       	mov    eax,0x4
c001a61e:	83 c4 08             	add    esp,0x8
c001a621:	5b                   	pop    ebx
c001a622:	c3                   	ret    
c001a623:	90                   	nop

c001a624 <ISO9660::seek(void*, unsigned long long)>:
c001a624:	57                   	push   edi
c001a625:	56                   	push   esi
c001a626:	b8 04 00 00 00       	mov    eax,0x4
c001a62b:	51                   	push   ecx
c001a62c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a630:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a634:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a638:	85 d2                	test   edx,edx
c001a63a:	74 26                	je     c001a662 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a63c:	6a 00                	push   0x0
c001a63e:	b9 02 00 00 00       	mov    ecx,0x2
c001a643:	57                   	push   edi
c001a644:	89 d0                	mov    eax,edx
c001a646:	56                   	push   esi
c001a647:	99                   	cdq    
c001a648:	f7 f9                	idiv   ecx
c001a64a:	83 e8 32             	sub    eax,0x32
c001a64d:	50                   	push   eax
c001a64e:	e8 78 c0 fe ff       	call   c00066cb <iso_seek>
c001a653:	83 c4 10             	add    esp,0x10
c001a656:	31 f0                	xor    eax,esi
c001a658:	31 fa                	xor    edx,edi
c001a65a:	09 d0                	or     eax,edx
c001a65c:	0f 95 c0             	setne  al
c001a65f:	0f b6 c0             	movzx  eax,al
c001a662:	5a                   	pop    edx
c001a663:	5e                   	pop    esi
c001a664:	5f                   	pop    edi
c001a665:	c3                   	ret    

c001a666 <ISO9660::tell(void*, unsigned long long*)>:
c001a666:	53                   	push   ebx
c001a667:	83 ec 08             	sub    esp,0x8
c001a66a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a66e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a672:	85 c0                	test   eax,eax
c001a674:	74 24                	je     c001a69a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a676:	85 db                	test   ebx,ebx
c001a678:	74 20                	je     c001a69a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a67a:	83 ec 0c             	sub    esp,0xc
c001a67d:	b9 02 00 00 00       	mov    ecx,0x2
c001a682:	99                   	cdq    
c001a683:	f7 f9                	idiv   ecx
c001a685:	83 e8 32             	sub    eax,0x32
c001a688:	50                   	push   eax
c001a689:	e8 c1 c0 fe ff       	call   c000674f <iso_tell>
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	89 03                	mov    DWORD PTR [ebx],eax
c001a693:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a696:	31 c0                	xor    eax,eax
c001a698:	eb 05                	jmp    c001a69f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a69a:	b8 04 00 00 00       	mov    eax,0x4
c001a69f:	83 c4 08             	add    esp,0x8
c001a6a2:	5b                   	pop    ebx
c001a6a3:	c3                   	ret    

c001a6a4 <ISO9660::stat(void*, unsigned long long*)>:
c001a6a4:	53                   	push   ebx
c001a6a5:	83 ec 14             	sub    esp,0x14
c001a6a8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a6ac:	68 1d 2f 02 c0       	push   0xc0022f1d
c001a6b1:	e8 8f 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6b6:	83 c4 10             	add    esp,0x10
c001a6b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6be:	74 2c                	je     c001a6ec <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6c0:	85 db                	test   ebx,ebx
c001a6c2:	74 28                	je     c001a6ec <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a6c4:	83 ec 0c             	sub    esp,0xc
c001a6c7:	b9 02 00 00 00       	mov    ecx,0x2
c001a6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d0:	99                   	cdq    
c001a6d1:	f7 f9                	idiv   ecx
c001a6d3:	83 e8 32             	sub    eax,0x32
c001a6d6:	50                   	push   eax
c001a6d7:	e8 a4 c0 fe ff       	call   c0006780 <iso_total>
c001a6dc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6e3:	89 03                	mov    DWORD PTR [ebx],eax
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	31 c0                	xor    eax,eax
c001a6ea:	eb 05                	jmp    c001a6f1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6ec:	b8 04 00 00 00       	mov    eax,0x4
c001a6f1:	83 c4 08             	add    esp,0x8
c001a6f4:	5b                   	pop    ebx
c001a6f5:	c3                   	ret    

c001a6f6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6f6:	55                   	push   ebp
c001a6f7:	57                   	push   edi
c001a6f8:	56                   	push   esi
c001a6f9:	53                   	push   ebx
c001a6fa:	83 ec 18             	sub    esp,0x18
c001a6fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a701:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a705:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a709:	68 25 2f 02 c0       	push   0xc0022f25
c001a70e:	e8 32 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a713:	83 c4 10             	add    esp,0x10
c001a716:	85 ff                	test   edi,edi
c001a718:	0f 94 c0             	sete   al
c001a71b:	85 f6                	test   esi,esi
c001a71d:	0f 94 c2             	sete   dl
c001a720:	09 d0                	or     eax,edx
c001a722:	a8 01                	test   al,0x1
c001a724:	0f 85 dd 00 00 00    	jne    c001a807 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a72a:	85 db                	test   ebx,ebx
c001a72c:	0f 84 d5 00 00 00    	je     c001a807 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a735:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a73b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a742:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a749:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a74b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a751:	74 1b                	je     c001a76e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a753:	85 c0                	test   eax,eax
c001a755:	74 10                	je     c001a767 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a757:	83 ec 0c             	sub    esp,0xc
c001a75a:	68 c9 2e 02 c0       	push   0xc0022ec9
c001a75f:	e8 ef 6e ff ff       	call   c0011653 <KePanic(char const*)>
c001a764:	83 c4 10             	add    esp,0x10
c001a767:	8a 03                	mov    al,BYTE PTR [ebx]
c001a769:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a76e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a771:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a778:	85 c0                	test   eax,eax
c001a77a:	74 09                	je     c001a785 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a77c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a783:	74 51                	je     c001a7d6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a785:	83 ec 0c             	sub    esp,0xc
c001a788:	68 2d 2f 02 c0       	push   0xc0022f2d
c001a78d:	e8 b3 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a792:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a7a0:	74 21                	je     c001a7c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a7a2:	83 ec 0c             	sub    esp,0xc
c001a7a5:	68 4d 2f 02 c0       	push   0xc0022f4d
c001a7aa:	e8 96 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a7c3:	83 ec 0c             	sub    esp,0xc
c001a7c6:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7cd:	50                   	push   eax
c001a7ce:	e8 73 c2 fe ff       	call   c0006a46 <init_percd>
c001a7d3:	83 c4 10             	add    esp,0x10
c001a7d6:	83 c3 03             	add    ebx,0x3
c001a7d9:	52                   	push   edx
c001a7da:	52                   	push   edx
c001a7db:	6a 00                	push   0x0
c001a7dd:	53                   	push   ebx
c001a7de:	e8 2a bd fe ff       	call   c000650d <iso_open>
c001a7e3:	83 c4 10             	add    esp,0x10
c001a7e6:	89 c5                	mov    ebp,eax
c001a7e8:	83 f8 ff             	cmp    eax,0xffffffff
c001a7eb:	75 21                	jne    c001a80e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7ed:	50                   	push   eax
c001a7ee:	50                   	push   eax
c001a7ef:	6a 01                	push   0x1
c001a7f1:	53                   	push   ebx
c001a7f2:	e8 16 bd fe ff       	call   c000650d <iso_open>
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	ba 02 00 00 00       	mov    edx,0x2
c001a7ff:	40                   	inc    eax
c001a800:	74 2b                	je     c001a82d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a802:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a805:	eb 24                	jmp    c001a82b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a807:	ba 04 00 00 00       	mov    edx,0x4
c001a80c:	eb 1f                	jmp    c001a82d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a80e:	83 ec 0c             	sub    esp,0xc
c001a811:	50                   	push   eax
c001a812:	e8 69 bf fe ff       	call   c0006780 <iso_total>
c001a817:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a81e:	89 07                	mov    DWORD PTR [edi],eax
c001a820:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a823:	e8 6f bd fe ff       	call   c0006597 <iso_close>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	31 d2                	xor    edx,edx
c001a82d:	83 c4 0c             	add    esp,0xc
c001a830:	89 d0                	mov    eax,edx
c001a832:	5b                   	pop    ebx
c001a833:	5e                   	pop    esi
c001a834:	5f                   	pop    edi
c001a835:	5d                   	pop    ebp
c001a836:	c3                   	ret    
c001a837:	90                   	nop

c001a838 <ISO9660::close(void*)>:
c001a838:	83 ec 0c             	sub    esp,0xc
c001a83b:	b8 04 00 00 00       	mov    eax,0x4
c001a840:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a844:	85 d2                	test   edx,edx
c001a846:	74 1b                	je     c001a863 <ISO9660::close(void*)+0x2b>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	b9 02 00 00 00       	mov    ecx,0x2
c001a850:	89 d0                	mov    eax,edx
c001a852:	99                   	cdq    
c001a853:	f7 f9                	idiv   ecx
c001a855:	83 e8 32             	sub    eax,0x32
c001a858:	50                   	push   eax
c001a859:	e8 39 bd fe ff       	call   c0006597 <iso_close>
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	31 c0                	xor    eax,eax
c001a863:	83 c4 0c             	add    esp,0xc
c001a866:	c3                   	ret    
c001a867:	90                   	nop

c001a868 <ISO9660::openDir(char const*, void**)>:
c001a868:	56                   	push   esi
c001a869:	53                   	push   ebx
c001a86a:	50                   	push   eax
c001a86b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a86f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a873:	85 db                	test   ebx,ebx
c001a875:	0f 84 bd 00 00 00    	je     c001a938 <ISO9660::openDir(char const*, void**)+0xd0>
c001a87b:	85 f6                	test   esi,esi
c001a87d:	0f 84 b5 00 00 00    	je     c001a938 <ISO9660::openDir(char const*, void**)+0xd0>
c001a883:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a885:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a88c:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a892:	74 1b                	je     c001a8af <ISO9660::openDir(char const*, void**)+0x47>
c001a894:	85 c0                	test   eax,eax
c001a896:	74 10                	je     c001a8a8 <ISO9660::openDir(char const*, void**)+0x40>
c001a898:	83 ec 0c             	sub    esp,0xc
c001a89b:	68 c9 2e 02 c0       	push   0xc0022ec9
c001a8a0:	e8 ae 6d ff ff       	call   c0011653 <KePanic(char const*)>
c001a8a5:	83 c4 10             	add    esp,0x10
c001a8a8:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8aa:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8b2:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8b9:	85 c0                	test   eax,eax
c001a8bb:	74 10                	je     c001a8cd <ISO9660::openDir(char const*, void**)+0x65>
c001a8bd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8c4:	74 1a                	je     c001a8e0 <ISO9660::openDir(char const*, void**)+0x78>
c001a8c6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8cd:	83 ec 0c             	sub    esp,0xc
c001a8d0:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8d7:	50                   	push   eax
c001a8d8:	e8 69 c1 fe ff       	call   c0006a46 <init_percd>
c001a8dd:	83 c4 10             	add    esp,0x10
c001a8e0:	83 c3 03             	add    ebx,0x3
c001a8e3:	50                   	push   eax
c001a8e4:	50                   	push   eax
c001a8e5:	6a 01                	push   0x1
c001a8e7:	53                   	push   ebx
c001a8e8:	e8 20 bc fe ff       	call   c000650d <iso_open>
c001a8ed:	83 c4 10             	add    esp,0x10
c001a8f0:	89 c3                	mov    ebx,eax
c001a8f2:	83 f8 ff             	cmp    eax,0xffffffff
c001a8f5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8fa:	75 1c                	jne    c001a918 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8fc:	53                   	push   ebx
c001a8fd:	53                   	push   ebx
c001a8fe:	68 71 2f 02 c0       	push   0xc0022f71
c001a903:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a909:	e8 98 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	b8 01 00 00 00       	mov    eax,0x1
c001a916:	eb 25                	jmp    c001a93d <ISO9660::openDir(char const*, void**)+0xd5>
c001a918:	01 db                	add    ebx,ebx
c001a91a:	51                   	push   ecx
c001a91b:	83 c3 65             	add    ebx,0x65
c001a91e:	51                   	push   ecx
c001a91f:	68 84 2f 02 c0       	push   0xc0022f84
c001a924:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a92a:	e8 77 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a92f:	89 1e                	mov    DWORD PTR [esi],ebx
c001a931:	83 c4 10             	add    esp,0x10
c001a934:	31 c0                	xor    eax,eax
c001a936:	eb 05                	jmp    c001a93d <ISO9660::openDir(char const*, void**)+0xd5>
c001a938:	b8 04 00 00 00       	mov    eax,0x4
c001a93d:	5a                   	pop    edx
c001a93e:	5b                   	pop    ebx
c001a93f:	5e                   	pop    esi
c001a940:	c3                   	ret    
c001a941:	90                   	nop

c001a942 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a942:	55                   	push   ebp
c001a943:	57                   	push   edi
c001a944:	56                   	push   esi
c001a945:	53                   	push   ebx
c001a946:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a94c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a953:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a95a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a962:	0f 84 e7 00 00 00    	je     c001aa4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a968:	85 db                	test   ebx,ebx
c001a96a:	0f 84 df 00 00 00    	je     c001aa4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	68 97 2f 02 c0       	push   0xc0022f97
c001a978:	e8 c8 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a97d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a984:	b9 02 00 00 00       	mov    ecx,0x2
c001a989:	99                   	cdq    
c001a98a:	f7 f9                	idiv   ecx
c001a98c:	83 e8 32             	sub    eax,0x32
c001a98f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a992:	e8 3b be fe ff       	call   c00067d2 <iso_readdir>
c001a997:	83 c4 10             	add    esp,0x10
c001a99a:	89 c6                	mov    esi,eax
c001a99c:	85 c0                	test   eax,eax
c001a99e:	75 37                	jne    c001a9d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a9a0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9a5:	56                   	push   esi
c001a9a6:	56                   	push   esi
c001a9a7:	68 a2 2f 02 c0       	push   0xc0022fa2
c001a9ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9b2:	e8 ef e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9b7:	83 c4 0c             	add    esp,0xc
c001a9ba:	68 10 01 00 00       	push   0x110
c001a9bf:	6a 00                	push   0x0
c001a9c1:	57                   	push   edi
c001a9c2:	e8 29 5b fe ff       	call   c00004f0 <memset>
c001a9c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	eb 7d                	jmp    c001aa54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a9d7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9dd:	8d 68 08             	lea    ebp,[eax+0x8]
c001a9e0:	83 ec 0c             	sub    esp,0xc
c001a9e3:	55                   	push   ebp
c001a9e4:	e8 87 5b fe ff       	call   c0000570 <strlen>
c001a9e9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a9fc:	75 0a                	jne    c001aa08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a9fe:	b8 02 00 00 00       	mov    eax,0x2
c001aa03:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aa06:	74 05                	je     c001aa0d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aa08:	b8 01 00 00 00       	mov    eax,0x1
c001aa0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aa11:	50                   	push   eax
c001aa12:	50                   	push   eax
c001aa13:	55                   	push   ebp
c001aa14:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa18:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aa1c:	50                   	push   eax
c001aa1d:	e8 1e 5c fe ff       	call   c0000640 <strcpy>
c001aa22:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa2b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa31:	5a                   	pop    edx
c001aa32:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa37:	59                   	pop    ecx
c001aa38:	68 b5 2f 02 c0       	push   0xc0022fb5
c001aa3d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa43:	e8 5e e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa48:	83 c4 10             	add    esp,0x10
c001aa4b:	31 c0                	xor    eax,eax
c001aa4d:	eb 05                	jmp    c001aa54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa4f:	b8 04 00 00 00       	mov    eax,0x4
c001aa54:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa5a:	5b                   	pop    ebx
c001aa5b:	5e                   	pop    esi
c001aa5c:	5f                   	pop    edi
c001aa5d:	5d                   	pop    ebp
c001aa5e:	c3                   	ret    

c001aa5f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa5f:	57                   	push   edi
c001aa60:	56                   	push   esi
c001aa61:	53                   	push   ebx
c001aa62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa6a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa6e:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa74:	0f be cb             	movsx  ecx,bl
c001aa77:	75 0b                	jne    c001aa84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa79:	0f be 05 e0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241e0
c001aa80:	39 c8                	cmp    eax,ecx
c001aa82:	74 47                	je     c001aacb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa84:	83 ec 0c             	sub    esp,0xc
c001aa87:	31 d2                	xor    edx,edx
c001aa89:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa8e:	6a 01                	push   0x1
c001aa90:	52                   	push   edx
c001aa91:	56                   	push   esi
c001aa92:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa99:	e8 3e 33 ff ff       	call   c000dddc <LogicalDisk::read(unsigned long long, int, void*)>
c001aa9e:	83 c4 20             	add    esp,0x20
c001aaa1:	85 c0                	test   eax,eax
c001aaa3:	75 0e                	jne    c001aab3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aaa5:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aaab:	88 1d e0 41 02 c0    	mov    BYTE PTR ds:0xc00241e0,bl
c001aab1:	eb 18                	jmp    c001aacb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aab3:	50                   	push   eax
c001aab4:	68 00 08 00 00       	push   0x800
c001aab9:	6a 00                	push   0x0
c001aabb:	57                   	push   edi
c001aabc:	e8 2f 5a fe ff       	call   c00004f0 <memset>
c001aac1:	83 c4 10             	add    esp,0x10
c001aac4:	b8 01 00 00 00       	mov    eax,0x1
c001aac9:	eb 0e                	jmp    c001aad9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aacb:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aad0:	b9 00 08 00 00       	mov    ecx,0x800
c001aad5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aad7:	31 c0                	xor    eax,eax
c001aad9:	5b                   	pop    ebx
c001aada:	5e                   	pop    esi
c001aadb:	5f                   	pop    edi
c001aadc:	c3                   	ret    
c001aadd:	90                   	nop

c001aade <ISO9660::tryMount(LogicalDisk*, int)>:
c001aade:	53                   	push   ebx
c001aadf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aae5:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aaef:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aaf6:	8d 58 41             	lea    ebx,[eax+0x41]
c001aaf9:	0f be db             	movsx  ebx,bl
c001aafc:	53                   	push   ebx
c001aafd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab01:	50                   	push   eax
c001ab02:	6a 10                	push   0x10
c001ab04:	e8 56 ff ff ff       	call   c001aa5f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	31 d2                	xor    edx,edx
c001ab0e:	85 c0                	test   eax,eax
c001ab10:	75 33                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab12:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ab17:	75 2c                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab19:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ab1e:	75 25                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab20:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ab25:	75 1e                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab27:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab2c:	75 17                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab2e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab33:	75 10                	jne    c001ab45 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab35:	83 ec 0c             	sub    esp,0xc
c001ab38:	53                   	push   ebx
c001ab39:	e8 08 bf fe ff       	call   c0006a46 <init_percd>
c001ab3e:	83 c4 10             	add    esp,0x10
c001ab41:	40                   	inc    eax
c001ab42:	0f 95 c2             	setne  dl
c001ab45:	88 d0                	mov    al,dl
c001ab47:	81 c4 08 08 00 00    	add    esp,0x808
c001ab4d:	5b                   	pop    ebx
c001ab4e:	c3                   	ret    
c001ab4f:	90                   	nop

c001ab50 <ISO9660::ISO9660()>:
c001ab50:	83 ec 0c             	sub    esp,0xc
c001ab53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab57:	83 ec 0c             	sub    esp,0xc
c001ab5a:	50                   	push   eax
c001ab5b:	e8 90 0c ff ff       	call   c000b7f0 <Filesystem::Filesystem()>
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	ba d0 2f 02 c0       	mov    edx,0xc0022fd0
c001ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6c:	89 10                	mov    DWORD PTR [eax],edx
c001ab6e:	e8 e5 bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001ab73:	90                   	nop
c001ab74:	83 c4 0c             	add    esp,0xc
c001ab77:	c3                   	ret    

c001ab78 <SoundCard::beginPlayback()>:
c001ab78:	c7 44 24 04 34 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023034
c001ab80:	e9 ce 6a ff ff       	jmp    c0011653 <KePanic(char const*)>
c001ab85:	90                   	nop

c001ab86 <SoundCard::stopPlayback()>:
c001ab86:	c7 44 24 04 34 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023034
c001ab8e:	e9 c0 6a ff ff       	jmp    c0011653 <KePanic(char const*)>
c001ab93:	90                   	nop

c001ab94 <SoundCard::SoundCard(char const*)>:
c001ab94:	83 ec 1c             	sub    esp,0x1c
c001ab97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9b:	83 ec 08             	sub    esp,0x8
c001ab9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aba2:	50                   	push   eax
c001aba3:	e8 ea 1f ff ff       	call   c000cb92 <Device::Device(char const*)>
c001aba8:	83 c4 10             	add    esp,0x10
c001abab:	ba 80 30 02 c0       	mov    edx,0xc0023080
c001abb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb4:	89 10                	mov    DWORD PTR [eax],edx
c001abb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abba:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001abcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001abdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abef:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abf9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac01:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac06:	7f 1a                	jg     c001ac22 <SoundCard::SoundCard(char const*)+0x8e>
c001ac08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac10:	83 c2 54             	add    edx,0x54
c001ac13:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ac1b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ac20:	eb df                	jmp    c001ac01 <SoundCard::SoundCard(char const*)+0x6d>
c001ac22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac26:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac2d:	90                   	nop
c001ac2e:	83 c4 1c             	add    esp,0x1c
c001ac31:	c3                   	ret    

c001ac32 <SoundCard::~SoundCard()>:
c001ac32:	83 ec 0c             	sub    esp,0xc
c001ac35:	ba 80 30 02 c0       	mov    edx,0xc0023080
c001ac3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3e:	89 10                	mov    DWORD PTR [eax],edx
c001ac40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac44:	83 ec 0c             	sub    esp,0xc
c001ac47:	50                   	push   eax
c001ac48:	e8 af 1c ff ff       	call   c000c8fc <Device::~Device()>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	90                   	nop
c001ac51:	83 c4 0c             	add    esp,0xc
c001ac54:	c3                   	ret    
c001ac55:	90                   	nop

c001ac56 <SoundCard::~SoundCard()>:
c001ac56:	83 ec 0c             	sub    esp,0xc
c001ac59:	83 ec 0c             	sub    esp,0xc
c001ac5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac60:	e8 cd ff ff ff       	call   c001ac32 <SoundCard::~SoundCard()>
c001ac65:	83 c4 10             	add    esp,0x10
c001ac68:	83 ec 08             	sub    esp,0x8
c001ac6b:	68 e8 01 00 00       	push   0x1e8
c001ac70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac74:	e8 9f fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac79:	83 c4 10             	add    esp,0x10
c001ac7c:	83 c4 0c             	add    esp,0xc
c001ac7f:	c3                   	ret    

c001ac80 <SoundCard::configureRates(int, int, int)>:
c001ac80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac84:	31 c0                	xor    eax,eax
c001ac86:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac8d:	75 20                	jne    c001acaf <SoundCard::configureRates(int, int, int)+0x2f>
c001ac8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac93:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001aca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001acad:	b0 01                	mov    al,0x1
c001acaf:	c3                   	ret    

c001acb0 <SoundCard::getSamples16(int, short*)>:
c001acb0:	55                   	push   ebp
c001acb1:	57                   	push   edi
c001acb2:	31 ff                	xor    edi,edi
c001acb4:	56                   	push   esi
c001acb5:	53                   	push   ebx
c001acb6:	31 db                	xor    ebx,ebx
c001acb8:	83 ec 10             	sub    esp,0x10
c001acbb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acbf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acc3:	8d 04 36             	lea    eax,[esi+esi*1]
c001acc6:	50                   	push   eax
c001acc7:	6a 00                	push   0x0
c001acc9:	55                   	push   ebp
c001acca:	e8 21 58 fe ff       	call   c00004f0 <memset>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001acdd:	85 c0                	test   eax,eax
c001acdf:	74 1b                	je     c001acfc <SoundCard::getSamples16(int, short*)+0x4c>
c001ace1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ace5:	75 15                	jne    c001acfc <SoundCard::getSamples16(int, short*)+0x4c>
c001ace7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aceb:	55                   	push   ebp
c001acec:	56                   	push   esi
c001aced:	50                   	push   eax
c001acee:	e8 f1 02 00 00       	call   c001afe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	39 c7                	cmp    edi,eax
c001acf8:	7d 02                	jge    c001acfc <SoundCard::getSamples16(int, short*)+0x4c>
c001acfa:	89 c7                	mov    edi,eax
c001acfc:	43                   	inc    ebx
c001acfd:	83 fb 20             	cmp    ebx,0x20
c001ad00:	75 d0                	jne    c001acd2 <SoundCard::getSamples16(int, short*)+0x22>
c001ad02:	83 c4 0c             	add    esp,0xc
c001ad05:	89 f8                	mov    eax,edi
c001ad07:	5b                   	pop    ebx
c001ad08:	5e                   	pop    esi
c001ad09:	5f                   	pop    edi
c001ad0a:	5d                   	pop    ebp
c001ad0b:	c3                   	ret    

c001ad0c <SoundCard::getSamples32(int, int*)>:
c001ad0c:	55                   	push   ebp
c001ad0d:	57                   	push   edi
c001ad0e:	31 ff                	xor    edi,edi
c001ad10:	56                   	push   esi
c001ad11:	31 f6                	xor    esi,esi
c001ad13:	53                   	push   ebx
c001ad14:	83 ec 10             	sub    esp,0x10
c001ad17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad1b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ad1f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad23:	c1 e0 02             	shl    eax,0x2
c001ad26:	50                   	push   eax
c001ad27:	6a 00                	push   0x0
c001ad29:	55                   	push   ebp
c001ad2a:	e8 c1 57 fe ff       	call   c00004f0 <memset>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad39:	85 c0                	test   eax,eax
c001ad3b:	74 1b                	je     c001ad58 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad3d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad41:	75 15                	jne    c001ad58 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad43:	53                   	push   ebx
c001ad44:	55                   	push   ebp
c001ad45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad49:	50                   	push   eax
c001ad4a:	e8 61 03 00 00       	call   c001b0b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	39 c6                	cmp    esi,eax
c001ad54:	7d 02                	jge    c001ad58 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad56:	89 c6                	mov    esi,eax
c001ad58:	47                   	inc    edi
c001ad59:	83 ff 20             	cmp    edi,0x20
c001ad5c:	75 d4                	jne    c001ad32 <SoundCard::getSamples32(int, int*)+0x26>
c001ad5e:	85 f6                	test   esi,esi
c001ad60:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad67:	75 0f                	jne    c001ad78 <SoundCard::getSamples32(int, int*)+0x6c>
c001ad69:	85 c0                	test   eax,eax
c001ad6b:	74 1b                	je     c001ad88 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad72:	53                   	push   ebx
c001ad73:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad76:	eb 0d                	jmp    c001ad85 <SoundCard::getSamples32(int, int*)+0x79>
c001ad78:	85 c0                	test   eax,eax
c001ad7a:	75 0c                	jne    c001ad88 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad81:	53                   	push   ebx
c001ad82:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad85:	83 c4 10             	add    esp,0x10
c001ad88:	83 c4 0c             	add    esp,0xc
c001ad8b:	89 f0                	mov    eax,esi
c001ad8d:	5b                   	pop    ebx
c001ad8e:	5e                   	pop    esi
c001ad8f:	5f                   	pop    edi
c001ad90:	5d                   	pop    ebp
c001ad91:	c3                   	ret    

c001ad92 <SoundCard::addChannel(SoundPort*)>:
c001ad92:	83 ec 0c             	sub    esp,0xc
c001ad95:	31 c0                	xor    eax,eax
c001ad97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad9b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ada3:	74 1b                	je     c001adc0 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ada5:	40                   	inc    eax
c001ada6:	83 f8 20             	cmp    eax,0x20
c001ada9:	75 f0                	jne    c001ad9b <SoundCard::addChannel(SoundPort*)+0x9>
c001adab:	83 ec 0c             	sub    esp,0xc
c001adae:	68 59 30 02 c0       	push   0xc0023059
c001adb3:	e8 9b 68 ff ff       	call   c0011653 <KePanic(char const*)>
c001adb8:	83 c4 10             	add    esp,0x10
c001adbb:	83 c8 ff             	or     eax,0xffffffff
c001adbe:	eb 0b                	jmp    c001adcb <SoundCard::addChannel(SoundPort*)+0x39>
c001adc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001adc4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001adcb:	83 c4 0c             	add    esp,0xc
c001adce:	c3                   	ret    
c001adcf:	90                   	nop

c001add0 <SoundCard::removeChannel(int)>:
c001add0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001add4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001add8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ade3:	c3                   	ret    

c001ade4 <SoundPort::SoundPort(int, int, int, int)>:
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adeb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae02:	89 10                	mov    DWORD PTR [eax],edx
c001ae04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ae0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae17:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ae1a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ae1f:	75 13                	jne    c001ae34 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ae21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae27:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae2c:	01 c0                	add    eax,eax
c001ae2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae32:	66 90                	xchg   ax,ax
c001ae34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae43:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae51:	c1 e0 02             	shl    eax,0x2
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	50                   	push   eax
c001ae58:	e8 59 cc fe ff       	call   c0007ab6 <malloc>
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	89 c2                	mov    edx,eax
c001ae62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae69:	90                   	nop
c001ae6a:	83 c4 0c             	add    esp,0xc
c001ae6d:	c3                   	ret    
c001ae6e:	66 90                	xchg   ax,ax

c001ae70 <SoundPort::~SoundPort()>:
c001ae70:	83 ec 0c             	sub    esp,0xc
c001ae73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae7a:	85 c0                	test   eax,eax
c001ae7c:	74 1e                	je     c001ae9c <SoundPort::~SoundPort()+0x2c>
c001ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae85:	83 ec 0c             	sub    esp,0xc
c001ae88:	50                   	push   eax
c001ae89:	e8 38 cc fe ff       	call   c0007ac6 <free>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae95:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae9c:	90                   	nop
c001ae9d:	83 c4 0c             	add    esp,0xc
c001aea0:	c3                   	ret    
c001aea1:	90                   	nop
c001aea2:	66 90                	xchg   ax,ax

c001aea4 <SoundPort::unpause()>:
c001aea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aea8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aeac:	c3                   	ret    
c001aead:	90                   	nop
c001aeae:	66 90                	xchg   ax,ax

c001aeb0 <SoundPort::pause()>:
c001aeb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeb4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aeb8:	c3                   	ret    
c001aeb9:	90                   	nop
c001aeba:	66 90                	xchg   ax,ax

c001aebc <SoundPort::getBufferUsed()>:
c001aebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aec3:	c3                   	ret    

c001aec4 <SoundPort::getBufferSize()>:
c001aec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aecb:	c3                   	ret    

c001aecc <SoundPort::buffer16(short*, int)>:
c001aecc:	55                   	push   ebp
c001aecd:	57                   	push   edi
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aed4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aed8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aedb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aede:	74 68                	je     c001af48 <SoundPort::buffer16(short*, int)+0x7c>
c001aee0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aee4:	85 c9                	test   ecx,ecx
c001aee6:	7e 60                	jle    c001af48 <SoundPort::buffer16(short*, int)+0x7c>
c001aee8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aeec:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aeef:	c1 e1 0f             	shl    ecx,0xf
c001aef2:	8d 70 01             	lea    esi,[eax+0x1]
c001aef5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aef8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aefb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aefe:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af01:	74 4d                	je     c001af50 <SoundPort::buffer16(short*, int)+0x84>
c001af03:	31 f6                	xor    esi,esi
c001af05:	eb 21                	jmp    c001af28 <SoundPort::buffer16(short*, int)+0x5c>
c001af07:	90                   	nop
c001af08:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001af0d:	8d 79 01             	lea    edi,[ecx+0x1]
c001af10:	c1 e3 0f             	shl    ebx,0xf
c001af13:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001af16:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001af19:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001af1c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af1f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af22:	74 1c                	je     c001af40 <SoundPort::buffer16(short*, int)+0x74>
c001af24:	89 c6                	mov    esi,eax
c001af26:	66 90                	xchg   ax,ax
c001af28:	8d 46 01             	lea    eax,[esi+0x1]
c001af2b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af2f:	75 d7                	jne    c001af08 <SoundPort::buffer16(short*, int)+0x3c>
c001af31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af35:	8d 76 00             	lea    esi,[esi+0x0]
c001af38:	5b                   	pop    ebx
c001af39:	5e                   	pop    esi
c001af3a:	5f                   	pop    edi
c001af3b:	5d                   	pop    ebp
c001af3c:	c3                   	ret    
c001af3d:	8d 76 00             	lea    esi,[esi+0x0]
c001af40:	5b                   	pop    ebx
c001af41:	8d 46 02             	lea    eax,[esi+0x2]
c001af44:	5e                   	pop    esi
c001af45:	5f                   	pop    edi
c001af46:	5d                   	pop    ebp
c001af47:	c3                   	ret    
c001af48:	5b                   	pop    ebx
c001af49:	31 c0                	xor    eax,eax
c001af4b:	5e                   	pop    esi
c001af4c:	5f                   	pop    edi
c001af4d:	5d                   	pop    ebp
c001af4e:	c3                   	ret    
c001af4f:	90                   	nop
c001af50:	b8 01 00 00 00       	mov    eax,0x1
c001af55:	eb e1                	jmp    c001af38 <SoundPort::buffer16(short*, int)+0x6c>
c001af57:	90                   	nop

c001af58 <SoundPort::buffer32(int*, int)>:
c001af58:	55                   	push   ebp
c001af59:	57                   	push   edi
c001af5a:	56                   	push   esi
c001af5b:	53                   	push   ebx
c001af5c:	83 ec 04             	sub    esp,0x4
c001af5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af67:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af6e:	89 04 24             	mov    DWORD PTR [esp],eax
c001af71:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af74:	74 5a                	je     c001afd0 <SoundPort::buffer32(int*, int)+0x78>
c001af76:	85 c0                	test   eax,eax
c001af78:	7e 56                	jle    c001afd0 <SoundPort::buffer32(int*, int)+0x78>
c001af7a:	8d 71 01             	lea    esi,[ecx+0x1]
c001af7d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af80:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af83:	8b 37                	mov    esi,DWORD PTR [edi]
c001af85:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af88:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af8b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af8e:	74 4c                	je     c001afdc <SoundPort::buffer32(int*, int)+0x84>
c001af90:	31 f6                	xor    esi,esi
c001af92:	eb 1c                	jmp    c001afb0 <SoundPort::buffer32(int*, int)+0x58>
c001af94:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af97:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af9a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af9d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001afa0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001afa4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afa7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afaa:	74 18                	je     c001afc4 <SoundPort::buffer32(int*, int)+0x6c>
c001afac:	89 de                	mov    esi,ebx
c001afae:	66 90                	xchg   ax,ax
c001afb0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001afb3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001afb6:	75 dc                	jne    c001af94 <SoundPort::buffer32(int*, int)+0x3c>
c001afb8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001afbb:	90                   	nop
c001afbc:	83 c4 04             	add    esp,0x4
c001afbf:	5b                   	pop    ebx
c001afc0:	5e                   	pop    esi
c001afc1:	5f                   	pop    edi
c001afc2:	5d                   	pop    ebp
c001afc3:	c3                   	ret    
c001afc4:	83 c4 04             	add    esp,0x4
c001afc7:	8d 46 02             	lea    eax,[esi+0x2]
c001afca:	5b                   	pop    ebx
c001afcb:	5e                   	pop    esi
c001afcc:	5f                   	pop    edi
c001afcd:	5d                   	pop    ebp
c001afce:	c3                   	ret    
c001afcf:	90                   	nop
c001afd0:	83 c4 04             	add    esp,0x4
c001afd3:	31 c0                	xor    eax,eax
c001afd5:	5b                   	pop    ebx
c001afd6:	5e                   	pop    esi
c001afd7:	5f                   	pop    edi
c001afd8:	5d                   	pop    ebp
c001afd9:	c3                   	ret    
c001afda:	66 90                	xchg   ax,ax
c001afdc:	b8 01 00 00 00       	mov    eax,0x1
c001afe1:	eb d9                	jmp    c001afbc <SoundPort::buffer32(int*, int)+0x64>
c001afe3:	90                   	nop

c001afe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afe4:	57                   	push   edi
c001afe5:	56                   	push   esi
c001afe6:	53                   	push   ebx
c001afe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afeb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001afef:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aff5:	39 03                	cmp    DWORD PTR [ebx],eax
c001aff7:	74 13                	je     c001b00c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	68 ac 30 02 c0       	push   0xc00230ac
c001b001:	e8 4d 66 ff ff       	call   c0011653 <KePanic(char const*)>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	8d 76 00             	lea    esi,[esi+0x0]
c001b00c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b012:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b015:	74 11                	je     c001b028 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b017:	83 ec 0c             	sub    esp,0xc
c001b01a:	68 eb 30 02 c0       	push   0xc00230eb
c001b01f:	e8 2f 66 ff ff       	call   c0011653 <KePanic(char const*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	90                   	nop
c001b028:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b02e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b031:	74 11                	je     c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b033:	83 ec 0c             	sub    esp,0xc
c001b036:	68 eb 30 02 c0       	push   0xc00230eb
c001b03b:	e8 13 66 ff ff       	call   c0011653 <KePanic(char const*)>
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	90                   	nop
c001b044:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b047:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b04b:	7e 07                	jle    c001b054 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b04d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b051:	8d 76 00             	lea    esi,[esi+0x0]
c001b054:	85 f6                	test   esi,esi
c001b056:	7e 2c                	jle    c001b084 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b058:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b05c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b05f:	31 c9                	xor    ecx,ecx
c001b061:	01 d7                	add    edi,edx
c001b063:	90                   	nop
c001b064:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b067:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b06a:	85 c0                	test   eax,eax
c001b06c:	79 06                	jns    c001b074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b06e:	05 ff 7f 00 00       	add    eax,0x7fff
c001b073:	90                   	nop
c001b074:	c1 f8 0f             	sar    eax,0xf
c001b077:	83 c1 04             	add    ecx,0x4
c001b07a:	66 01 02             	add    WORD PTR [edx],ax
c001b07d:	83 c2 02             	add    edx,0x2
c001b080:	39 d7                	cmp    edi,edx
c001b082:	75 e0                	jne    c001b064 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b084:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b087:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b08a:	83 ec 04             	sub    esp,0x4
c001b08d:	29 f0                	sub    eax,esi
c001b08f:	c1 e0 02             	shl    eax,0x2
c001b092:	50                   	push   eax
c001b093:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b096:	50                   	push   eax
c001b097:	52                   	push   edx
c001b098:	e8 33 53 fe ff       	call   c00003d0 <memmove>
c001b09d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b0a0:	83 c4 10             	add    esp,0x10
c001b0a3:	29 f0                	sub    eax,esi
c001b0a5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b0a8:	89 f0                	mov    eax,esi
c001b0aa:	5b                   	pop    ebx
c001b0ab:	5e                   	pop    esi
c001b0ac:	5f                   	pop    edi
c001b0ad:	c3                   	ret    
c001b0ae:	66 90                	xchg   ax,ax

c001b0b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	53                   	push   ebx
c001b0b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b0bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b0bf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b0c5:	39 06                	cmp    DWORD PTR [esi],eax
c001b0c7:	74 13                	je     c001b0dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b0c9:	83 ec 0c             	sub    esp,0xc
c001b0cc:	68 cc 30 02 c0       	push   0xc00230cc
c001b0d1:	e8 7d 65 ff ff       	call   c0011653 <KePanic(char const*)>
c001b0d6:	83 c4 10             	add    esp,0x10
c001b0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0dc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b0e2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b0e5:	74 11                	je     c001b0f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b0e7:	83 ec 0c             	sub    esp,0xc
c001b0ea:	68 07 31 02 c0       	push   0xc0023107
c001b0ef:	e8 5f 65 ff ff       	call   c0011653 <KePanic(char const*)>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	90                   	nop
c001b0f8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b0fe:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b101:	74 11                	je     c001b114 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b103:	83 ec 0c             	sub    esp,0xc
c001b106:	68 07 31 02 c0       	push   0xc0023107
c001b10b:	e8 43 65 ff ff       	call   c0011653 <KePanic(char const*)>
c001b110:	83 c4 10             	add    esp,0x10
c001b113:	90                   	nop
c001b114:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b117:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b11b:	7e 07                	jle    c001b124 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b11d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b121:	8d 76 00             	lea    esi,[esi+0x0]
c001b124:	85 ff                	test   edi,edi
c001b126:	7e 1c                	jle    c001b144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b128:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b12f:	31 c0                	xor    eax,eax
c001b131:	8d 76 00             	lea    esi,[esi+0x0]
c001b134:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b137:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b13a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b13d:	83 c0 04             	add    eax,0x4
c001b140:	39 c1                	cmp    ecx,eax
c001b142:	75 f0                	jne    c001b134 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b144:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b147:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b14a:	83 ec 04             	sub    esp,0x4
c001b14d:	29 f8                	sub    eax,edi
c001b14f:	c1 e0 02             	shl    eax,0x2
c001b152:	50                   	push   eax
c001b153:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b156:	50                   	push   eax
c001b157:	52                   	push   edx
c001b158:	e8 73 52 fe ff       	call   c00003d0 <memmove>
c001b15d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b160:	83 c4 10             	add    esp,0x10
c001b163:	29 f8                	sub    eax,edi
c001b165:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b168:	89 f8                	mov    eax,edi
c001b16a:	5b                   	pop    ebx
c001b16b:	5e                   	pop    esi
c001b16c:	5f                   	pop    edi
c001b16d:	c3                   	ret    

c001b16e <PCI::open(int, int, void*)>:
c001b16e:	83 ec 18             	sub    esp,0x18
c001b171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b175:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b179:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b17f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b181:	50                   	push   eax
c001b182:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b185:	31 c0                	xor    eax,eax
c001b187:	83 c4 1c             	add    esp,0x1c
c001b18a:	c3                   	ret    
c001b18b:	90                   	nop

c001b18c <PCI::close(int, int, void*)>:
c001b18c:	31 c0                	xor    eax,eax
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <PCI::PCI()>:
c001b190:	83 ec 0c             	sub    esp,0xc
c001b193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b197:	83 ec 08             	sub    esp,0x8
c001b19a:	68 23 31 02 c0       	push   0xc0023123
c001b19f:	50                   	push   eax
c001b1a0:	e8 b7 11 ff ff       	call   c000c35c <Bus::Bus(char const*)>
c001b1a5:	83 c4 10             	add    esp,0x10
c001b1a8:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c001b1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b1:	89 10                	mov    DWORD PTR [eax],edx
c001b1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c5:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1d4:	0f b6 d0             	movzx  edx,al
c001b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1db:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1ec:	0f b6 d0             	movzx  edx,al
c001b1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b202:	8d 50 01             	lea    edx,[eax+0x1]
c001b205:	88 d1                	mov    cl,dl
c001b207:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b20b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b211:	0f b6 d0             	movzx  edx,al
c001b214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b218:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b21c:	83 c9 c0             	or     ecx,0xffffffc0
c001b21f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b223:	90                   	nop
c001b224:	83 c4 0c             	add    esp,0xc
c001b227:	c3                   	ret    

c001b228 <PCI::readBAR8(unsigned int, int)>:
c001b228:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b22c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b230:	f6 c2 01             	test   dl,0x1
c001b233:	74 07                	je     c001b23c <PCI::readBAR8(unsigned int, int)+0x14>
c001b235:	83 e2 fc             	and    edx,0xfffffffc
c001b238:	01 c2                	add    edx,eax
c001b23a:	ec                   	in     al,dx
c001b23b:	c3                   	ret    
c001b23c:	83 e2 f0             	and    edx,0xfffffff0
c001b23f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b242:	c3                   	ret    
c001b243:	90                   	nop

c001b244 <PCI::readBAR16(unsigned int, int)>:
c001b244:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b24c:	f6 c2 01             	test   dl,0x1
c001b24f:	74 08                	je     c001b259 <PCI::readBAR16(unsigned int, int)+0x15>
c001b251:	83 e2 fc             	and    edx,0xfffffffc
c001b254:	01 c2                	add    edx,eax
c001b256:	66 ed                	in     ax,dx
c001b258:	c3                   	ret    
c001b259:	83 e2 f0             	and    edx,0xfffffff0
c001b25c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b260:	c3                   	ret    
c001b261:	90                   	nop

c001b262 <PCI::readBAR32(unsigned int, int)>:
c001b262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b266:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b26a:	f6 c2 01             	test   dl,0x1
c001b26d:	74 07                	je     c001b276 <PCI::readBAR32(unsigned int, int)+0x14>
c001b26f:	83 e2 fc             	and    edx,0xfffffffc
c001b272:	01 c2                	add    edx,eax
c001b274:	ed                   	in     eax,dx
c001b275:	c3                   	ret    
c001b276:	83 e2 f0             	and    edx,0xfffffff0
c001b279:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b27c:	c3                   	ret    
c001b27d:	90                   	nop

c001b27e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b27e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b286:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b28a:	f6 c2 01             	test   dl,0x1
c001b28d:	74 07                	je     c001b296 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b28f:	83 e2 fc             	and    edx,0xfffffffc
c001b292:	01 ca                	add    edx,ecx
c001b294:	ee                   	out    dx,al
c001b295:	c3                   	ret    
c001b296:	83 e2 f0             	and    edx,0xfffffff0
c001b299:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b29c:	c3                   	ret    
c001b29d:	90                   	nop

c001b29e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b29e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2aa:	f6 c2 01             	test   dl,0x1
c001b2ad:	74 08                	je     c001b2b7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b2af:	83 e2 fc             	and    edx,0xfffffffc
c001b2b2:	01 ca                	add    edx,ecx
c001b2b4:	66 ef                	out    dx,ax
c001b2b6:	c3                   	ret    
c001b2b7:	83 e2 f0             	and    edx,0xfffffff0
c001b2ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b2be:	c3                   	ret    
c001b2bf:	90                   	nop

c001b2c0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2cc:	f6 c2 01             	test   dl,0x1
c001b2cf:	74 07                	je     c001b2d8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2d1:	83 e2 fc             	and    edx,0xfffffffc
c001b2d4:	01 ca                	add    edx,ecx
c001b2d6:	ef                   	out    dx,eax
c001b2d7:	c3                   	ret    
c001b2d8:	83 e2 f0             	and    edx,0xfffffff0
c001b2db:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2de:	c3                   	ret    
c001b2df:	90                   	nop

c001b2e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2e0:	55                   	push   ebp
c001b2e1:	57                   	push   edi
c001b2e2:	56                   	push   esi
c001b2e3:	53                   	push   ebx
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2ec:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2f0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2f4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2f8:	83 fe 07             	cmp    esi,0x7
c001b2fb:	76 10                	jbe    c001b30d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2fd:	83 ec 0c             	sub    esp,0xc
c001b300:	68 2b 31 02 c0       	push   0xc002312b
c001b305:	e8 49 63 ff ff       	call   c0011653 <KePanic(char const*)>
c001b30a:	83 c4 10             	add    esp,0x10
c001b30d:	0f b6 db             	movzx  ebx,bl
c001b310:	83 fb 0f             	cmp    ebx,0xf
c001b313:	76 10                	jbe    c001b325 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b315:	83 ec 0c             	sub    esp,0xc
c001b318:	68 5b 31 02 c0       	push   0xc002315b
c001b31d:	e8 31 63 ff ff       	call   c0011653 <KePanic(char const*)>
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	8d 04 36             	lea    eax,[esi+esi*1]
c001b328:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b32d:	83 c8 f0             	or     eax,0xfffffff0
c001b330:	ee                   	out    dx,al
c001b331:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b336:	89 e8                	mov    eax,ebp
c001b338:	ee                   	out    dx,al
c001b339:	83 c4 0c             	add    esp,0xc
c001b33c:	89 d8                	mov    eax,ebx
c001b33e:	89 f9                	mov    ecx,edi
c001b340:	c1 e0 08             	shl    eax,0x8
c001b343:	0f b6 d9             	movzx  ebx,cl
c001b346:	83 e3 fc             	and    ebx,0xfffffffc
c001b349:	09 d8                	or     eax,ebx
c001b34b:	5b                   	pop    ebx
c001b34c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b351:	5e                   	pop    esi
c001b352:	5f                   	pop    edi
c001b353:	5d                   	pop    ebp
c001b354:	c3                   	ret    
c001b355:	90                   	nop

c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b356:	57                   	push   edi
c001b357:	56                   	push   esi
c001b358:	53                   	push   ebx
c001b359:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b35d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b361:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b367:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b36b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b36f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b373:	83 ff 01             	cmp    edi,0x1
c001b376:	75 3f                	jne    c001b3b7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b378:	89 de                	mov    esi,ebx
c001b37a:	0f b6 c0             	movzx  eax,al
c001b37d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b383:	c1 e0 10             	shl    eax,0x10
c001b386:	0f b6 c9             	movzx  ecx,cl
c001b389:	09 f0                	or     eax,esi
c001b38b:	c1 e1 08             	shl    ecx,0x8
c001b38e:	0f b6 d2             	movzx  edx,dl
c001b391:	09 c8                	or     eax,ecx
c001b393:	c1 e2 0b             	shl    edx,0xb
c001b396:	09 d0                	or     eax,edx
c001b398:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b39d:	0d 00 00 00 80       	or     eax,0x80000000
c001b3a2:	ef                   	out    dx,eax
c001b3a3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b3a8:	ed                   	in     eax,dx
c001b3a9:	83 e3 02             	and    ebx,0x2
c001b3ac:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3b3:	d3 e8                	shr    eax,cl
c001b3b5:	eb 44                	jmp    c001b3fb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3b7:	83 ff 02             	cmp    edi,0x2
c001b3ba:	75 2d                	jne    c001b3e9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b3bc:	83 ec 0c             	sub    esp,0xc
c001b3bf:	0f b6 c9             	movzx  ecx,cl
c001b3c2:	0f b6 d2             	movzx  edx,dl
c001b3c5:	0f b6 fb             	movzx  edi,bl
c001b3c8:	0f b6 c0             	movzx  eax,al
c001b3cb:	57                   	push   edi
c001b3cc:	51                   	push   ecx
c001b3cd:	52                   	push   edx
c001b3ce:	50                   	push   eax
c001b3cf:	56                   	push   esi
c001b3d0:	e8 0b ff ff ff       	call   c001b2e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3d5:	89 c2                	mov    edx,eax
c001b3d7:	ed                   	in     eax,dx
c001b3d8:	83 e3 02             	and    ebx,0x2
c001b3db:	83 c4 20             	add    esp,0x20
c001b3de:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3e5:	d3 e8                	shr    eax,cl
c001b3e7:	eb 12                	jmp    c001b3fb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3e9:	83 ec 0c             	sub    esp,0xc
c001b3ec:	68 8b 31 02 c0       	push   0xc002318b
c001b3f1:	e8 5d 62 ff ff       	call   c0011653 <KePanic(char const*)>
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	31 c0                	xor    eax,eax
c001b3fb:	5b                   	pop    ebx
c001b3fc:	5e                   	pop    esi
c001b3fd:	5f                   	pop    edi
c001b3fe:	c3                   	ret    
c001b3ff:	90                   	nop

c001b400 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b400:	83 ec 18             	sub    esp,0x18
c001b403:	6a 00                	push   0x0
c001b405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40a:	50                   	push   eax
c001b40b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b410:	50                   	push   eax
c001b411:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b416:	50                   	push   eax
c001b417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b41b:	e8 36 ff ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b420:	83 c4 2c             	add    esp,0x2c
c001b423:	c3                   	ret    

c001b424 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b424:	83 ec 18             	sub    esp,0x18
c001b427:	6a 0e                	push   0xe
c001b429:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b42e:	50                   	push   eax
c001b42f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b434:	50                   	push   eax
c001b435:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b43a:	50                   	push   eax
c001b43b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b43f:	e8 12 ff ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b444:	83 c4 2c             	add    esp,0x2c
c001b447:	0f b6 c0             	movzx  eax,al
c001b44a:	c3                   	ret    
c001b44b:	90                   	nop

c001b44c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b44c:	55                   	push   ebp
c001b44d:	57                   	push   edi
c001b44e:	56                   	push   esi
c001b44f:	53                   	push   ebx
c001b450:	83 ec 18             	sub    esp,0x18
c001b453:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b458:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b45d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b462:	6a 0a                	push   0xa
c001b464:	56                   	push   esi
c001b465:	55                   	push   ebp
c001b466:	57                   	push   edi
c001b467:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b46b:	e8 e6 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b470:	83 c4 14             	add    esp,0x14
c001b473:	89 c3                	mov    ebx,eax
c001b475:	6a 0a                	push   0xa
c001b477:	0f b6 db             	movzx  ebx,bl
c001b47a:	56                   	push   esi
c001b47b:	55                   	push   ebp
c001b47c:	57                   	push   edi
c001b47d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b481:	e8 d0 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b486:	83 c4 2c             	add    esp,0x2c
c001b489:	25 00 ff 00 00       	and    eax,0xff00
c001b48e:	09 d8                	or     eax,ebx
c001b490:	5b                   	pop    ebx
c001b491:	5e                   	pop    esi
c001b492:	5f                   	pop    edi
c001b493:	5d                   	pop    ebp
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b496:	83 ec 18             	sub    esp,0x18
c001b499:	6a 08                	push   0x8
c001b49b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a0:	50                   	push   eax
c001b4a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a6:	50                   	push   eax
c001b4a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ac:	50                   	push   eax
c001b4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b1:	e8 a0 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b6:	83 c4 2c             	add    esp,0x2c
c001b4b9:	0f b6 c4             	movzx  eax,ah
c001b4bc:	c3                   	ret    
c001b4bd:	90                   	nop

c001b4be <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b4be:	83 ec 18             	sub    esp,0x18
c001b4c1:	6a 08                	push   0x8
c001b4c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c8:	50                   	push   eax
c001b4c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ce:	50                   	push   eax
c001b4cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d4:	50                   	push   eax
c001b4d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d9:	e8 78 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4de:	83 c4 2c             	add    esp,0x2c
c001b4e1:	c3                   	ret    

c001b4e2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4e2:	83 ec 18             	sub    esp,0x18
c001b4e5:	6a 3c                	push   0x3c
c001b4e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ec:	50                   	push   eax
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4fd:	e8 54 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b502:	83 c4 2c             	add    esp,0x2c
c001b505:	c3                   	ret    

c001b506 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b506:	83 ec 18             	sub    esp,0x18
c001b509:	6a 18                	push   0x18
c001b50b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b510:	50                   	push   eax
c001b511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b516:	50                   	push   eax
c001b517:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51c:	50                   	push   eax
c001b51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b521:	e8 30 fe ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b526:	83 c4 2c             	add    esp,0x2c
c001b529:	0f b6 c4             	movzx  eax,ah
c001b52c:	c3                   	ret    
c001b52d:	90                   	nop

c001b52e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b52e:	55                   	push   ebp
c001b52f:	57                   	push   edi
c001b530:	56                   	push   esi
c001b531:	53                   	push   ebx
c001b532:	83 ec 28             	sub    esp,0x28
c001b535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b539:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b53e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b543:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b548:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b54f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b552:	83 c3 10             	add    ebx,0x10
c001b555:	0f b6 c0             	movzx  eax,al
c001b558:	0f b6 db             	movzx  ebx,bl
c001b55b:	50                   	push   eax
c001b55c:	51                   	push   ecx
c001b55d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b561:	57                   	push   edi
c001b562:	55                   	push   ebp
c001b563:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b567:	e8 ea fd ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b56c:	83 c4 14             	add    esp,0x14
c001b56f:	89 c6                	mov    esi,eax
c001b571:	53                   	push   ebx
c001b572:	c1 e6 10             	shl    esi,0x10
c001b575:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b579:	51                   	push   ecx
c001b57a:	57                   	push   edi
c001b57b:	55                   	push   ebp
c001b57c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b580:	e8 d1 fd ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b585:	83 c4 3c             	add    esp,0x3c
c001b588:	0f b7 c0             	movzx  eax,ax
c001b58b:	5b                   	pop    ebx
c001b58c:	09 f0                	or     eax,esi
c001b58e:	5e                   	pop    esi
c001b58f:	5f                   	pop    edi
c001b590:	5d                   	pop    ebp
c001b591:	c3                   	ret    

c001b592 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b592:	55                   	push   ebp
c001b593:	57                   	push   edi
c001b594:	56                   	push   esi
c001b595:	53                   	push   ebx
c001b596:	83 ec 0c             	sub    esp,0xc
c001b599:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b59d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b5a1:	89 f5                	mov    ebp,esi
c001b5a3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b5b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5b9:	83 f9 01             	cmp    ecx,0x1
c001b5bc:	75 5d                	jne    c001b61b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b5be:	0f b6 c8             	movzx  ecx,al
c001b5c1:	0f b6 d2             	movzx  edx,dl
c001b5c4:	c1 e1 10             	shl    ecx,0x10
c001b5c7:	c1 e2 0b             	shl    edx,0xb
c001b5ca:	89 f0                	mov    eax,esi
c001b5cc:	25 fc 00 00 00       	and    eax,0xfc
c001b5d1:	09 c1                	or     ecx,eax
c001b5d3:	89 e8                	mov    eax,ebp
c001b5d5:	0f b6 c0             	movzx  eax,al
c001b5d8:	c1 e0 08             	shl    eax,0x8
c001b5db:	09 c1                	or     ecx,eax
c001b5dd:	09 d1                	or     ecx,edx
c001b5df:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5e4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5ea:	89 c8                	mov    eax,ecx
c001b5ec:	ef                   	out    dx,eax
c001b5ed:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5f2:	ed                   	in     eax,dx
c001b5f3:	0f b7 db             	movzx  ebx,bx
c001b5f6:	83 e6 02             	and    esi,0x2
c001b5f9:	74 0a                	je     c001b605 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b5fb:	0f b7 d0             	movzx  edx,ax
c001b5fe:	c1 e3 10             	shl    ebx,0x10
c001b601:	09 d3                	or     ebx,edx
c001b603:	eb 05                	jmp    c001b60a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b605:	66 31 c0             	xor    ax,ax
c001b608:	09 c3                	or     ebx,eax
c001b60a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b60f:	89 c8                	mov    eax,ecx
c001b611:	ef                   	out    dx,eax
c001b612:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b617:	89 d8                	mov    eax,ebx
c001b619:	eb 41                	jmp    c001b65c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b61b:	83 f9 02             	cmp    ecx,0x2
c001b61e:	75 45                	jne    c001b665 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	0f b6 d2             	movzx  edx,dl
c001b626:	89 f1                	mov    ecx,esi
c001b628:	0f b6 c0             	movzx  eax,al
c001b62b:	0f b6 f1             	movzx  esi,cl
c001b62e:	89 e9                	mov    ecx,ebp
c001b630:	56                   	push   esi
c001b631:	0f b6 c9             	movzx  ecx,cl
c001b634:	51                   	push   ecx
c001b635:	52                   	push   edx
c001b636:	50                   	push   eax
c001b637:	57                   	push   edi
c001b638:	e8 a3 fc ff ff       	call   c001b2e0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b63d:	89 c2                	mov    edx,eax
c001b63f:	ed                   	in     eax,dx
c001b640:	83 c4 20             	add    esp,0x20
c001b643:	0f b7 db             	movzx  ebx,bx
c001b646:	f6 c2 02             	test   dl,0x2
c001b649:	74 0c                	je     c001b657 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b64b:	0f b7 c8             	movzx  ecx,ax
c001b64e:	89 d8                	mov    eax,ebx
c001b650:	c1 e0 10             	shl    eax,0x10
c001b653:	09 c8                	or     eax,ecx
c001b655:	eb 05                	jmp    c001b65c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b657:	66 31 c0             	xor    ax,ax
c001b65a:	09 d8                	or     eax,ebx
c001b65c:	ef                   	out    dx,eax
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	5b                   	pop    ebx
c001b661:	5e                   	pop    esi
c001b662:	5f                   	pop    edi
c001b663:	5d                   	pop    ebp
c001b664:	c3                   	ret    
c001b665:	c7 44 24 20 8b 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002318b
c001b66d:	83 c4 0c             	add    esp,0xc
c001b670:	5b                   	pop    ebx
c001b671:	5e                   	pop    esi
c001b672:	5f                   	pop    edi
c001b673:	5d                   	pop    ebp
c001b674:	e9 da 5f ff ff       	jmp    c0011653 <KePanic(char const*)>
c001b679:	90                   	nop

c001b67a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b67a:	55                   	push   ebp
c001b67b:	57                   	push   edi
c001b67c:	56                   	push   esi
c001b67d:	53                   	push   ebx
c001b67e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b684:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b68b:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b692:	0f 85 bd 00 00 00    	jne    c001b755 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b698:	83 ec 0c             	sub    esp,0xc
c001b69b:	68 14 01 00 00       	push   0x114
c001b6a0:	e8 11 c4 fe ff       	call   c0007ab6 <malloc>
c001b6a5:	83 c4 0c             	add    esp,0xc
c001b6a8:	89 c3                	mov    ebx,eax
c001b6aa:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b6b0:	68 91 31 02 c0       	push   0xc0023191
c001b6b5:	50                   	push   eax
c001b6b6:	e8 c7 04 ff ff       	call   c000bb82 <File::File(char const*, Process*)>
c001b6bb:	83 c4 10             	add    esp,0x10
c001b6be:	85 db                	test   ebx,ebx
c001b6c0:	0f 84 67 02 00 00    	je     c001b92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6c6:	56                   	push   esi
c001b6c7:	56                   	push   esi
c001b6c8:	6a 01                	push   0x1
c001b6ca:	53                   	push   ebx
c001b6cb:	e8 d0 04 ff ff       	call   c000bba0 <File::open(FileOpenMode)>
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	85 c0                	test   eax,eax
c001b6d5:	0f 85 52 02 00 00    	jne    c001b92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6db:	52                   	push   edx
c001b6dc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6e0:	50                   	push   eax
c001b6e1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6e5:	50                   	push   eax
c001b6e6:	53                   	push   ebx
c001b6e7:	e8 b6 07 ff ff       	call   c000bea2 <File::stat(unsigned long long*, bool*)>
c001b6ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6f0:	40                   	inc    eax
c001b6f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6f4:	e8 bd c3 fe ff       	call   c0007ab6 <malloc>
c001b6f9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6fd:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b702:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b706:	59                   	pop    ecx
c001b707:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b709:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b70d:	51                   	push   ecx
c001b70e:	50                   	push   eax
c001b70f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b713:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b717:	53                   	push   ebx
c001b718:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b71b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b71f:	83 c4 20             	add    esp,0x20
c001b722:	89 c8                	mov    eax,ecx
c001b724:	99                   	cdq    
c001b725:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b729:	0f 85 fe 01 00 00    	jne    c001b92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b72f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b733:	0f 85 f4 01 00 00    	jne    c001b92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	53                   	push   ebx
c001b73d:	e8 bc 04 ff ff       	call   c000bbfe <File::close()>
c001b742:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b746:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b74d:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b752:	83 c4 10             	add    esp,0x10
c001b755:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b75a:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b760:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b764:	31 f6                	xor    esi,esi
c001b766:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b76e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b775:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b77a:	31 c9                	xor    ecx,ecx
c001b77c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b784:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b789:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b791:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b795:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b79d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b7a1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b7a5:	0f 8e 82 01 00 00    	jle    c001b92d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7ab:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b7ae:	d4 40                	aam    0x40
c001b7b0:	d5 39                	aad    0x39
c001b7b2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b7b6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b7ba:	d4 40                	aam    0x40
c001b7bc:	d5 39                	aad    0x39
c001b7be:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7c2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b7c6:	d4 40                	aam    0x40
c001b7c8:	d5 39                	aad    0x39
c001b7ca:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7ce:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b7d2:	d4 40                	aam    0x40
c001b7d4:	d5 39                	aad    0x39
c001b7d6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7da:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b7de:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7e2:	3c 56                	cmp    al,0x56
c001b7e4:	74 43                	je     c001b829 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b7e6:	d4 40                	aam    0x40
c001b7e8:	d5 39                	aad    0x39
c001b7ea:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b7ed:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b7f1:	0f b6 c9             	movzx  ecx,cl
c001b7f4:	c1 e1 04             	shl    ecx,0x4
c001b7f7:	d4 40                	aam    0x40
c001b7f9:	d5 39                	aad    0x39
c001b7fb:	83 e8 30             	sub    eax,0x30
c001b7fe:	0f b6 c0             	movzx  eax,al
c001b801:	09 c1                	or     ecx,eax
c001b803:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b807:	c1 e1 04             	shl    ecx,0x4
c001b80a:	d4 40                	aam    0x40
c001b80c:	d5 39                	aad    0x39
c001b80e:	83 e8 30             	sub    eax,0x30
c001b811:	0f b6 c0             	movzx  eax,al
c001b814:	09 c1                	or     ecx,eax
c001b816:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b81a:	c1 e1 04             	shl    ecx,0x4
c001b81d:	d4 40                	aam    0x40
c001b81f:	d5 39                	aad    0x39
c001b821:	83 e8 30             	sub    eax,0x30
c001b824:	0f b6 c0             	movzx  eax,al
c001b827:	09 c1                	or     ecx,eax
c001b829:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b82d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b831:	3c 58                	cmp    al,0x58
c001b833:	74 47                	je     c001b87c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b835:	d4 40                	aam    0x40
c001b837:	d5 39                	aad    0x39
c001b839:	8d 50 d0             	lea    edx,[eax-0x30]
c001b83c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b840:	0f b6 d2             	movzx  edx,dl
c001b843:	c1 e2 04             	shl    edx,0x4
c001b846:	d4 40                	aam    0x40
c001b848:	d5 39                	aad    0x39
c001b84a:	83 e8 30             	sub    eax,0x30
c001b84d:	0f b6 c0             	movzx  eax,al
c001b850:	09 c2                	or     edx,eax
c001b852:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b856:	c1 e2 04             	shl    edx,0x4
c001b859:	d4 40                	aam    0x40
c001b85b:	d5 39                	aad    0x39
c001b85d:	83 e8 30             	sub    eax,0x30
c001b860:	0f b6 c0             	movzx  eax,al
c001b863:	09 c2                	or     edx,eax
c001b865:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b869:	c1 e2 04             	shl    edx,0x4
c001b86c:	d4 40                	aam    0x40
c001b86e:	d5 39                	aad    0x39
c001b870:	83 e8 30             	sub    eax,0x30
c001b873:	0f b6 c0             	movzx  eax,al
c001b876:	09 c2                	or     edx,eax
c001b878:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b87c:	83 c6 10             	add    esi,0x10
c001b87f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b883:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b887:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b88b:	83 fa 0a             	cmp    edx,0xa
c001b88e:	74 0b                	je     c001b89b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b890:	47                   	inc    edi
c001b891:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b895:	75 19                	jne    c001b8b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b897:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b89b:	31 c0                	xor    eax,eax
c001b89d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b8a2:	0f 94 c0             	sete   al
c001b8a5:	01 c6                	add    esi,eax
c001b8a7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b8ac:	75 0b                	jne    c001b8b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b8ae:	eb 14                	jmp    c001b8c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b8b0:	46                   	inc    esi
c001b8b1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b8b4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b8b7:	eb ca                	jmp    c001b883 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b8b9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b8be:	0f 85 dd fe ff ff    	jne    c001b7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8c4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b8c9:	74 10                	je     c001b8db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b8cb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8d0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b8d5:	0f 85 c6 fe ff ff    	jne    c001b7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8e3:	83 e8 30             	sub    eax,0x30
c001b8e6:	83 ef 30             	sub    edi,0x30
c001b8e9:	c1 e0 04             	shl    eax,0x4
c001b8ec:	09 f8                	or     eax,edi
c001b8ee:	0f b6 c0             	movzx  eax,al
c001b8f1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8f5:	0f 85 a6 fe ff ff    	jne    c001b7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b903:	83 e8 30             	sub    eax,0x30
c001b906:	83 ef 30             	sub    edi,0x30
c001b909:	c1 e0 04             	shl    eax,0x4
c001b90c:	09 f8                	or     eax,edi
c001b90e:	0f b6 c0             	movzx  eax,al
c001b911:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b915:	0f 85 86 fe ff ff    	jne    c001b7a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b91b:	50                   	push   eax
c001b91c:	50                   	push   eax
c001b91d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b921:	50                   	push   eax
c001b922:	55                   	push   ebp
c001b923:	e8 18 4d fe ff       	call   c0000640 <strcpy>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	eb 06                	jmp    c001b933 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b92d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b931:	31 ed                	xor    ebp,ebp
c001b933:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b939:	89 e8                	mov    eax,ebp
c001b93b:	5b                   	pop    ebx
c001b93c:	5e                   	pop    esi
c001b93d:	5f                   	pop    edi
c001b93e:	5d                   	pop    ebp
c001b93f:	c3                   	ret    

c001b940 <PCI::checkBus(unsigned char)>:
c001b940:	56                   	push   esi
c001b941:	53                   	push   ebx
c001b942:	31 db                	xor    ebx,ebx
c001b944:	51                   	push   ecx
c001b945:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b94a:	52                   	push   edx
c001b94b:	53                   	push   ebx
c001b94c:	43                   	inc    ebx
c001b94d:	56                   	push   esi
c001b94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b952:	e8 03 03 00 00       	call   c001bc5a <PCI::checkDevice(unsigned char, unsigned char)>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	83 fb 20             	cmp    ebx,0x20
c001b95d:	75 eb                	jne    c001b94a <PCI::checkBus(unsigned char)+0xa>
c001b95f:	58                   	pop    eax
c001b960:	5b                   	pop    ebx
c001b961:	5e                   	pop    esi
c001b962:	c3                   	ret    
c001b963:	90                   	nop

c001b964 <PCI::foundDevice(PCIDeviceInfo)>:
c001b964:	55                   	push   ebp
c001b965:	57                   	push   edi
c001b966:	56                   	push   esi
c001b967:	53                   	push   ebx
c001b968:	83 ec 1c             	sub    esp,0x1c
c001b96b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b970:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b974:	3d ff ff 00 00       	cmp    eax,0xffff
c001b979:	0f 84 57 01 00 00    	je     c001bad6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b97f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b984:	66 3d 06 04          	cmp    ax,0x406
c001b988:	75 2c                	jne    c001b9b6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b98a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b98f:	50                   	push   eax
c001b990:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b995:	50                   	push   eax
c001b996:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b99b:	50                   	push   eax
c001b99c:	53                   	push   ebx
c001b99d:	e8 64 fb ff ff       	call   c001b506 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b9a2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b9a6:	0f b6 c0             	movzx  eax,al
c001b9a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b9ad:	83 c4 2c             	add    esp,0x2c
c001b9b0:	5b                   	pop    ebx
c001b9b1:	5e                   	pop    esi
c001b9b2:	5f                   	pop    edi
c001b9b3:	5d                   	pop    ebp
c001b9b4:	eb 8a                	jmp    c001b940 <PCI::checkBus(unsigned char)>
c001b9b6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b9ba:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b9c0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b9c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b9c8:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b9cd:	85 d2                	test   edx,edx
c001b9cf:	74 36                	je     c001ba07 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b9d1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9d4:	85 c9                	test   ecx,ecx
c001b9d6:	74 2b                	je     c001ba03 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9d8:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b9de:	31 ee                	xor    esi,ebp
c001b9e0:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b9e6:	75 1b                	jne    c001ba03 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9e8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b9ec:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b9f2:	75 0f                	jne    c001ba03 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9f4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9fb:	39 f9                	cmp    ecx,edi
c001b9fd:	0f 84 d3 00 00 00    	je     c001bad6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba03:	8b 12                	mov    edx,DWORD PTR [edx]
c001ba05:	eb c6                	jmp    c001b9cd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001ba07:	3d 01 06 00 00       	cmp    eax,0x601
c001ba0c:	75 19                	jne    c001ba27 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	68 64 01 00 00       	push   0x164
c001ba16:	e8 9b c0 fe ff       	call   c0007ab6 <malloc>
c001ba1b:	89 c5                	mov    ebp,eax
c001ba1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba20:	e8 a1 0e 00 00       	call   c001c8c6 <SATABus::SATABus()>
c001ba25:	eb 1e                	jmp    c001ba45 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001ba27:	3d 01 01 00 00       	cmp    eax,0x101
c001ba2c:	75 62                	jne    c001ba90 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	68 70 02 00 00       	push   0x270
c001ba36:	e8 7b c0 fe ff       	call   c0007ab6 <malloc>
c001ba3b:	89 c5                	mov    ebp,eax
c001ba3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba40:	e8 e5 02 00 00       	call   c001bd2a <IDE::IDE()>
c001ba45:	5f                   	pop    edi
c001ba46:	58                   	pop    eax
c001ba47:	55                   	push   ebp
c001ba48:	53                   	push   ebx
c001ba49:	e8 ac 0f ff ff       	call   c000c9fa <Device::addChild(Device*)>
c001ba4e:	83 ec 1c             	sub    esp,0x1c
c001ba51:	b9 09 00 00 00       	mov    ecx,0x9
c001ba56:	fc                   	cld    
c001ba57:	89 e7                	mov    edi,esp
c001ba59:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba5f:	55                   	push   ebp
c001ba60:	e8 db 0e ff ff       	call   c000c940 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba65:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba68:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba6c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba74:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba7c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba84:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba87:	83 c4 4c             	add    esp,0x4c
c001ba8a:	5b                   	pop    ebx
c001ba8b:	5e                   	pop    esi
c001ba8c:	5f                   	pop    edi
c001ba8d:	5d                   	pop    ebp
c001ba8e:	ff e0                	jmp    eax
c001ba90:	83 ec 0c             	sub    esp,0xc
c001ba93:	68 58 01 00 00       	push   0x158
c001ba98:	e8 19 c0 fe ff       	call   c0007ab6 <malloc>
c001ba9d:	89 c5                	mov    ebp,eax
c001ba9f:	58                   	pop    eax
c001baa0:	5a                   	pop    edx
c001baa1:	68 aa 31 02 c0       	push   0xc00231aa
c001baa6:	55                   	push   ebp
c001baa7:	e8 ec 11 ff ff       	call   c000cc98 <DriverlessDevice::DriverlessDevice(char const*)>
c001baac:	59                   	pop    ecx
c001baad:	5e                   	pop    esi
c001baae:	55                   	push   ebp
c001baaf:	53                   	push   ebx
c001bab0:	e8 45 0f ff ff       	call   c000c9fa <Device::addChild(Device*)>
c001bab5:	83 c4 10             	add    esp,0x10
c001bab8:	b9 09 00 00 00       	mov    ecx,0x9
c001babd:	fc                   	cld    
c001babe:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bac2:	89 fe                	mov    esi,edi
c001bac4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bac6:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001baca:	83 c4 1c             	add    esp,0x1c
c001bacd:	5b                   	pop    ebx
c001bace:	5e                   	pop    esi
c001bacf:	5f                   	pop    edi
c001bad0:	5d                   	pop    ebp
c001bad1:	e9 6a 0e ff ff       	jmp    c000c940 <Device::preOpenPCI(PCIDeviceInfo)>
c001bad6:	83 c4 1c             	add    esp,0x1c
c001bad9:	5b                   	pop    ebx
c001bada:	5e                   	pop    esi
c001badb:	5f                   	pop    edi
c001badc:	5d                   	pop    ebp
c001badd:	c3                   	ret    

c001bade <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bade:	55                   	push   ebp
c001badf:	57                   	push   edi
c001bae0:	56                   	push   esi
c001bae1:	53                   	push   ebx
c001bae2:	83 ec 68             	sub    esp,0x68
c001bae5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bae9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001baf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001baf4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bafb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bb00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb04:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bb0b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bb10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bb14:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bb19:	6a 0c                	push   0xc
c001bb1b:	57                   	push   edi
c001bb1c:	53                   	push   ebx
c001bb1d:	56                   	push   esi
c001bb1e:	55                   	push   ebp
c001bb1f:	e8 32 f8 ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb24:	83 c4 20             	add    esp,0x20
c001bb27:	57                   	push   edi
c001bb28:	53                   	push   ebx
c001bb29:	56                   	push   esi
c001bb2a:	55                   	push   ebp
c001bb2b:	e8 1c f9 ff ff       	call   c001b44c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb30:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb35:	57                   	push   edi
c001bb36:	53                   	push   ebx
c001bb37:	56                   	push   esi
c001bb38:	55                   	push   ebp
c001bb39:	e8 a4 f9 ff ff       	call   c001b4e2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb3e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb42:	83 c4 14             	add    esp,0x14
c001bb45:	6a 3c                	push   0x3c
c001bb47:	57                   	push   edi
c001bb48:	53                   	push   ebx
c001bb49:	56                   	push   esi
c001bb4a:	55                   	push   ebp
c001bb4b:	e8 06 f8 ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb50:	0f b6 c4             	movzx  eax,ah
c001bb53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb57:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb5b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb64:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb6a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb74:	83 c4 20             	add    esp,0x20
c001bb77:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb7c:	74 30                	je     c001bbae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb7e:	31 c0                	xor    eax,eax
c001bb80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb84:	7e 28                	jle    c001bbae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb86:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb8e:	39 cb                	cmp    ebx,ecx
c001bb90:	75 19                	jne    c001bbab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb92:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb9a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb9e:	75 0b                	jne    c001bbab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bba0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bba7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bbab:	40                   	inc    eax
c001bbac:	eb d2                	jmp    c001bb80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bbae:	31 d2                	xor    edx,edx
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	57                   	push   edi
c001bbb4:	53                   	push   ebx
c001bbb5:	56                   	push   esi
c001bbb6:	52                   	push   edx
c001bbb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bbbb:	55                   	push   ebp
c001bbbc:	e8 6d f9 ff ff       	call   c001b52e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbc5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bbc9:	42                   	inc    edx
c001bbca:	83 c4 20             	add    esp,0x20
c001bbcd:	83 fa 06             	cmp    edx,0x6
c001bbd0:	75 de                	jne    c001bbb0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bbd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbda:	c1 e2 08             	shl    edx,0x8
c001bbdd:	83 ec 0c             	sub    esp,0xc
c001bbe0:	0f b6 c4             	movzx  eax,ah
c001bbe3:	09 d0                	or     eax,edx
c001bbe5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbea:	6a 02                	push   0x2
c001bbec:	57                   	push   edi
c001bbed:	53                   	push   ebx
c001bbee:	56                   	push   esi
c001bbef:	55                   	push   ebp
c001bbf0:	e8 61 f7 ff ff       	call   c001b356 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbfa:	83 c4 20             	add    esp,0x20
c001bbfd:	57                   	push   edi
c001bbfe:	53                   	push   ebx
c001bbff:	56                   	push   esi
c001bc00:	55                   	push   ebp
c001bc01:	e8 90 f8 ff ff       	call   c001b496 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bc06:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bc0a:	57                   	push   edi
c001bc0b:	53                   	push   ebx
c001bc0c:	56                   	push   esi
c001bc0d:	55                   	push   ebp
c001bc0e:	e8 ed f7 ff ff       	call   c001b400 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc13:	b9 09 00 00 00       	mov    ecx,0x9
c001bc18:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bc1d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bc21:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bc25:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc29:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc2d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc31:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc35:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc39:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	fc                   	cld    
c001bc41:	89 e7                	mov    edi,esp
c001bc43:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc49:	55                   	push   ebp
c001bc4a:	e8 15 fd ff ff       	call   c001b964 <PCI::foundDevice(PCIDeviceInfo)>
c001bc4f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc55:	5b                   	pop    ebx
c001bc56:	5e                   	pop    esi
c001bc57:	5f                   	pop    edi
c001bc58:	5d                   	pop    ebp
c001bc59:	c3                   	ret    

c001bc5a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc5a:	55                   	push   ebp
c001bc5b:	57                   	push   edi
c001bc5c:	56                   	push   esi
c001bc5d:	53                   	push   ebx
c001bc5e:	83 ec 0c             	sub    esp,0xc
c001bc61:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc65:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc6a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc6f:	6a 00                	push   0x0
c001bc71:	56                   	push   esi
c001bc72:	57                   	push   edi
c001bc73:	55                   	push   ebp
c001bc74:	e8 87 f7 ff ff       	call   c001b400 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc79:	6a 00                	push   0x0
c001bc7b:	56                   	push   esi
c001bc7c:	57                   	push   edi
c001bc7d:	55                   	push   ebp
c001bc7e:	e8 5b fe ff ff       	call   c001bade <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc83:	83 c4 20             	add    esp,0x20
c001bc86:	6a 00                	push   0x0
c001bc88:	56                   	push   esi
c001bc89:	57                   	push   edi
c001bc8a:	55                   	push   ebp
c001bc8b:	e8 94 f7 ff ff       	call   c001b424 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	a8 80                	test   al,0x80
c001bc95:	74 2d                	je     c001bcc4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc97:	bb 01 00 00 00       	mov    ebx,0x1
c001bc9c:	53                   	push   ebx
c001bc9d:	56                   	push   esi
c001bc9e:	57                   	push   edi
c001bc9f:	55                   	push   ebp
c001bca0:	e8 5b f7 ff ff       	call   c001b400 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	0f b7 c0             	movzx  eax,ax
c001bcab:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcb0:	74 0c                	je     c001bcbe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bcb2:	53                   	push   ebx
c001bcb3:	56                   	push   esi
c001bcb4:	57                   	push   edi
c001bcb5:	55                   	push   ebp
c001bcb6:	e8 23 fe ff ff       	call   c001bade <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bcbb:	83 c4 10             	add    esp,0x10
c001bcbe:	43                   	inc    ebx
c001bcbf:	83 fb 08             	cmp    ebx,0x8
c001bcc2:	75 d8                	jne    c001bc9c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bcc4:	83 c4 0c             	add    esp,0xc
c001bcc7:	5b                   	pop    ebx
c001bcc8:	5e                   	pop    esi
c001bcc9:	5f                   	pop    edi
c001bcca:	5d                   	pop    ebp
c001bccb:	c3                   	ret    

c001bccc <PCI::detect()>:
c001bccc:	56                   	push   esi
c001bccd:	53                   	push   ebx
c001bcce:	53                   	push   ebx
c001bccf:	31 db                	xor    ebx,ebx
c001bcd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcd5:	6a 00                	push   0x0
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 00                	push   0x0
c001bcdb:	56                   	push   esi
c001bcdc:	e8 43 f7 ff ff       	call   c001b424 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	a8 80                	test   al,0x80
c001bce6:	75 21                	jne    c001bd09 <PCI::detect()+0x3d>
c001bce8:	51                   	push   ecx
c001bce9:	51                   	push   ecx
c001bcea:	6a 00                	push   0x0
c001bcec:	56                   	push   esi
c001bced:	e8 4e fc ff ff       	call   c001b940 <PCI::checkBus(unsigned char)>
c001bcf2:	83 c4 10             	add    esp,0x10
c001bcf5:	eb 2a                	jmp    c001bd21 <PCI::detect()+0x55>
c001bcf7:	52                   	push   edx
c001bcf8:	52                   	push   edx
c001bcf9:	53                   	push   ebx
c001bcfa:	43                   	inc    ebx
c001bcfb:	56                   	push   esi
c001bcfc:	e8 3f fc ff ff       	call   c001b940 <PCI::checkBus(unsigned char)>
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	83 fb 08             	cmp    ebx,0x8
c001bd07:	74 18                	je     c001bd21 <PCI::detect()+0x55>
c001bd09:	53                   	push   ebx
c001bd0a:	6a 00                	push   0x0
c001bd0c:	6a 00                	push   0x0
c001bd0e:	56                   	push   esi
c001bd0f:	e8 ec f6 ff ff       	call   c001b400 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd14:	83 c4 10             	add    esp,0x10
c001bd17:	0f b7 c0             	movzx  eax,ax
c001bd1a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd1f:	74 d6                	je     c001bcf7 <PCI::detect()+0x2b>
c001bd21:	58                   	pop    eax
c001bd22:	5b                   	pop    ebx
c001bd23:	5e                   	pop    esi
c001bd24:	c3                   	ret    
c001bd25:	90                   	nop

c001bd26 <IDE::close(int, int, void*)>:
c001bd26:	83 c8 ff             	or     eax,0xffffffff
c001bd29:	c3                   	ret    

c001bd2a <IDE::IDE()>:
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd31:	83 ec 08             	sub    esp,0x8
c001bd34:	68 f0 31 02 c0       	push   0xc00231f0
c001bd39:	50                   	push   eax
c001bd3a:	e8 fd 0f ff ff       	call   c000cd3c <HardDiskController::HardDiskController(char const*)>
c001bd3f:	83 c4 10             	add    esp,0x10
c001bd42:	ba 80 32 02 c0       	mov    edx,0xc0023280
c001bd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4b:	89 10                	mov    DWORD PTR [eax],edx
c001bd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd51:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd58:	90                   	nop
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	c3                   	ret    
c001bd5d:	90                   	nop

c001bd5e <IDE::prepareInterrupt(unsigned char)>:
c001bd5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd67:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd6f:	c3                   	ret    

c001bd70 <selectDrive(unsigned char, unsigned char)>:
c001bd70:	c3                   	ret    
c001bd71:	90                   	nop

c001bd72 <IDE::getBase(unsigned char)>:
c001bd72:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd7b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd83:	c3                   	ret    

c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd84:	55                   	push   ebp
c001bd85:	57                   	push   edi
c001bd86:	56                   	push   esi
c001bd87:	53                   	push   ebx
c001bd88:	83 ec 1c             	sub    esp,0x1c
c001bd8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd93:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd96:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd9e:	80 f9 03             	cmp    cl,0x3
c001bda1:	77 4f                	ja     c001bdf2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bda3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bda7:	0f b6 fa             	movzx  edi,dl
c001bdaa:	0f b6 db             	movzx  ebx,bl
c001bdad:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bdb0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bdb5:	80 ca 80             	or     dl,0x80
c001bdb8:	52                   	push   edx
c001bdb9:	6a 0c                	push   0xc
c001bdbb:	57                   	push   edi
c001bdbc:	56                   	push   esi
c001bdbd:	e8 c2 ff ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bdc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdcb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bdcf:	ee                   	out    dx,al
c001bdd0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bdd5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bdd9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bddd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bde1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bde9:	83 c4 2c             	add    esp,0x2c
c001bdec:	5b                   	pop    ebx
c001bded:	5e                   	pop    esi
c001bdee:	5f                   	pop    edi
c001bdef:	5d                   	pop    ebp
c001bdf0:	eb 92                	jmp    c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf2:	0f b6 cb             	movzx  ecx,bl
c001bdf5:	83 f9 07             	cmp    ecx,0x7
c001bdf8:	77 12                	ja     c001be0c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdfa:	0f b6 d2             	movzx  edx,dl
c001bdfd:	0f b6 db             	movzx  ebx,bl
c001be00:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001be08:	01 da                	add    edx,ebx
c001be0a:	eb 2f                	jmp    c001be3b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be0c:	83 f9 0d             	cmp    ecx,0xd
c001be0f:	77 13                	ja     c001be24 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001be11:	0f b6 d2             	movzx  edx,dl
c001be14:	0f b6 db             	movzx  ebx,bl
c001be17:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001be1e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001be22:	eb 17                	jmp    c001be3b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001be24:	83 f9 15             	cmp    ecx,0x15
c001be27:	77 13                	ja     c001be3c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be29:	0f b6 d2             	movzx  edx,dl
c001be2c:	0f b6 db             	movzx  ebx,bl
c001be2f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be37:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be3b:	ee                   	out    dx,al
c001be3c:	83 c4 1c             	add    esp,0x1c
c001be3f:	5b                   	pop    ebx
c001be40:	5e                   	pop    esi
c001be41:	5f                   	pop    edi
c001be42:	5d                   	pop    ebp
c001be43:	c3                   	ret    

c001be44 <IDE::read(unsigned char, unsigned char)>:
c001be44:	55                   	push   ebp
c001be45:	57                   	push   edi
c001be46:	56                   	push   esi
c001be47:	53                   	push   ebx
c001be48:	83 ec 1c             	sub    esp,0x1c
c001be4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be53:	8d 43 f8             	lea    eax,[ebx-0x8]
c001be56:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be5a:	3c 03                	cmp    al,0x3
c001be5c:	77 40                	ja     c001be9e <IDE::read(unsigned char, unsigned char)+0x5a>
c001be5e:	0f b6 f9             	movzx  edi,cl
c001be61:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be64:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be69:	0c 80                	or     al,0x80
c001be6b:	50                   	push   eax
c001be6c:	6a 0c                	push   0xc
c001be6e:	57                   	push   edi
c001be6f:	56                   	push   esi
c001be70:	e8 0f ff ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be75:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be7a:	0f b6 d3             	movzx  edx,bl
c001be7d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be81:	ec                   	in     al,dx
c001be82:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be86:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be8b:	52                   	push   edx
c001be8c:	6a 0c                	push   0xc
c001be8e:	57                   	push   edi
c001be8f:	56                   	push   esi
c001be90:	e8 ef fe ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be95:	83 c4 20             	add    esp,0x20
c001be98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be9c:	eb 4c                	jmp    c001beea <IDE::read(unsigned char, unsigned char)+0xa6>
c001be9e:	0f b6 d3             	movzx  edx,bl
c001bea1:	83 fa 07             	cmp    edx,0x7
c001bea4:	77 12                	ja     c001beb8 <IDE::read(unsigned char, unsigned char)+0x74>
c001bea6:	0f b6 c9             	movzx  ecx,cl
c001bea9:	0f b6 d3             	movzx  edx,bl
c001beac:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001beb4:	01 c2                	add    edx,eax
c001beb6:	eb 31                	jmp    c001bee9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001beb8:	83 fa 0d             	cmp    edx,0xd
c001bebb:	77 13                	ja     c001bed0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bebd:	0f b6 c9             	movzx  ecx,cl
c001bec0:	0f b6 d3             	movzx  edx,bl
c001bec3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001beca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bece:	eb 19                	jmp    c001bee9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bed0:	31 c0                	xor    eax,eax
c001bed2:	83 fa 15             	cmp    edx,0x15
c001bed5:	77 13                	ja     c001beea <IDE::read(unsigned char, unsigned char)+0xa6>
c001bed7:	0f b6 c9             	movzx  ecx,cl
c001beda:	0f b6 d3             	movzx  edx,bl
c001bedd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bee5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bee9:	ec                   	in     al,dx
c001beea:	83 c4 1c             	add    esp,0x1c
c001beed:	5b                   	pop    ebx
c001beee:	5e                   	pop    esi
c001beef:	5f                   	pop    edi
c001bef0:	5d                   	pop    ebp
c001bef1:	c3                   	ret    

c001bef2 <IDE::waitInterrupt(unsigned char)>:
c001bef2:	55                   	push   ebp
c001bef3:	57                   	push   edi
c001bef4:	56                   	push   esi
c001bef5:	53                   	push   ebx
c001bef6:	31 db                	xor    ebx,ebx
c001bef8:	83 ec 0c             	sub    esp,0xc
c001befb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001beff:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bf04:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bf0c:	89 e8                	mov    eax,ebp
c001bf0e:	84 c0                	test   al,al
c001bf10:	75 30                	jne    c001bf42 <IDE::waitInterrupt(unsigned char)+0x50>
c001bf12:	50                   	push   eax
c001bf13:	6a 0c                	push   0xc
c001bf15:	56                   	push   esi
c001bf16:	57                   	push   edi
c001bf17:	e8 28 ff ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001bf1c:	83 c4 10             	add    esp,0x10
c001bf1f:	a8 01                	test   al,0x1
c001bf21:	75 27                	jne    c001bf4a <IDE::waitInterrupt(unsigned char)+0x58>
c001bf23:	f6 c3 04             	test   bl,0x4
c001bf26:	75 12                	jne    c001bf3a <IDE::waitInterrupt(unsigned char)+0x48>
c001bf28:	83 fb 32             	cmp    ebx,0x32
c001bf2b:	7e 0d                	jle    c001bf3a <IDE::waitInterrupt(unsigned char)+0x48>
c001bf2d:	83 ec 0c             	sub    esp,0xc
c001bf30:	6a 64                	push   0x64
c001bf32:	e8 b1 a4 ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	83 fb 3c             	cmp    ebx,0x3c
c001bf3d:	74 0b                	je     c001bf4a <IDE::waitInterrupt(unsigned char)+0x58>
c001bf3f:	43                   	inc    ebx
c001bf40:	eb c2                	jmp    c001bf04 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf42:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf4a:	83 c4 0c             	add    esp,0xc
c001bf4d:	89 e8                	mov    eax,ebp
c001bf4f:	5b                   	pop    ebx
c001bf50:	5e                   	pop    esi
c001bf51:	5f                   	pop    edi
c001bf52:	5d                   	pop    ebp
c001bf53:	c3                   	ret    

c001bf54 <ideChannel0IRQHandler(regs*, void*)>:
c001bf54:	83 ec 10             	sub    esp,0x10
c001bf57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf5b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf62:	6a 07                	push   0x7
c001bf64:	6a 00                	push   0x0
c001bf66:	50                   	push   eax
c001bf67:	e8 d8 fe ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001bf6c:	83 c4 1c             	add    esp,0x1c
c001bf6f:	c3                   	ret    

c001bf70 <ideChannel1IRQHandler(regs*, void*)>:
c001bf70:	83 ec 10             	sub    esp,0x10
c001bf73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf77:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf7e:	6a 07                	push   0x7
c001bf80:	6a 01                	push   0x1
c001bf82:	50                   	push   eax
c001bf83:	e8 bc fe ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001bf88:	83 c4 1c             	add    esp,0x1c
c001bf8b:	c3                   	ret    

c001bf8c <IDE::enableIRQs(unsigned char, bool)>:
c001bf8c:	57                   	push   edi
c001bf8d:	b8 02 00 00 00       	mov    eax,0x2
c001bf92:	56                   	push   esi
c001bf93:	53                   	push   ebx
c001bf94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf98:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf9c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bfa1:	74 02                	je     c001bfa5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bfa3:	31 c0                	xor    eax,eax
c001bfa5:	0f b6 db             	movzx  ebx,bl
c001bfa8:	bf 04 00 00 00       	mov    edi,0x4
c001bfad:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bfb4:	50                   	push   eax
c001bfb5:	6a 0c                	push   0xc
c001bfb7:	53                   	push   ebx
c001bfb8:	56                   	push   esi
c001bfb9:	e8 c6 fd ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	50                   	push   eax
c001bfc2:	6a 0c                	push   0xc
c001bfc4:	53                   	push   ebx
c001bfc5:	56                   	push   esi
c001bfc6:	e8 79 fe ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	4f                   	dec    edi
c001bfcf:	75 f0                	jne    c001bfc1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfd1:	5b                   	pop    ebx
c001bfd2:	5e                   	pop    esi
c001bfd3:	5f                   	pop    edi
c001bfd4:	c3                   	ret    
c001bfd5:	90                   	nop

c001bfd6 <IDE::open(int, int, void*)>:
c001bfd6:	55                   	push   ebp
c001bfd7:	57                   	push   edi
c001bfd8:	56                   	push   esi
c001bfd9:	53                   	push   ebx
c001bfda:	83 ec 1c             	sub    esp,0x1c
c001bfdd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfe1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfea:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bff3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bffa:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c001:	0f 85 de 02 00 00    	jne    c001c2e5 <IDE::open(int, int, void*)+0x30f>
c001c007:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c00d:	88 04 24             	mov    BYTE PTR [esp],al
c001c010:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c013:	83 e0 7f             	and    eax,0x7f
c001c016:	83 f8 05             	cmp    eax,0x5
c001c019:	74 05                	je     c001c020 <IDE::open(int, int, void*)+0x4a>
c001c01b:	83 f8 0f             	cmp    eax,0xf
c001c01e:	75 32                	jne    c001c052 <IDE::open(int, int, void*)+0x7c>
c001c020:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c026:	83 e0 fc             	and    eax,0xfffffffc
c001c029:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c030:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c036:	83 e0 fc             	and    eax,0xfffffffc
c001c039:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c040:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c046:	83 e0 fc             	and    eax,0xfffffffc
c001c049:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c050:	eb 14                	jmp    c001c066 <IDE::open(int, int, void*)+0x90>
c001c052:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c05c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c066:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c06d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c074:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c078:	89 c6                	mov    esi,eax
c001c07a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c07f:	c1 e6 10             	shl    esi,0x10
c001c082:	89 e8                	mov    eax,ebp
c001c084:	89 fa                	mov    edx,edi
c001c086:	c1 e0 0b             	shl    eax,0xb
c001c089:	09 f0                	or     eax,esi
c001c08b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c092:	c1 e6 08             	shl    esi,0x8
c001c095:	09 c6                	or     esi,eax
c001c097:	89 f0                	mov    eax,esi
c001c099:	0d 08 00 00 80       	or     eax,0x80000008
c001c09e:	ef                   	out    dx,eax
c001c09f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c0a4:	89 ca                	mov    edx,ecx
c001c0a6:	ed                   	in     eax,dx
c001c0a7:	c1 e8 10             	shr    eax,0x10
c001c0aa:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0af:	0f 84 f9 00 00 00    	je     c001c1ae <IDE::open(int, int, void*)+0x1d8>
c001c0b5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c0bb:	89 fa                	mov    edx,edi
c001c0bd:	89 f0                	mov    eax,esi
c001c0bf:	ef                   	out    dx,eax
c001c0c0:	b0 fe                	mov    al,0xfe
c001c0c2:	89 ca                	mov    edx,ecx
c001c0c4:	ee                   	out    dx,al
c001c0c5:	89 f0                	mov    eax,esi
c001c0c7:	89 fa                	mov    edx,edi
c001c0c9:	ef                   	out    dx,eax
c001c0ca:	89 ca                	mov    edx,ecx
c001c0cc:	ed                   	in     eax,dx
c001c0cd:	3c fe                	cmp    al,0xfe
c001c0cf:	0f 85 a9 00 00 00    	jne    c001c17e <IDE::open(int, int, void*)+0x1a8>
c001c0d5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0db:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0e2:	74 33                	je     c001c117 <IDE::open(int, int, void*)+0x141>
c001c0e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0ee:	40                   	inc    eax
c001c0ef:	83 ec 0c             	sub    esp,0xc
c001c0f2:	0f b6 c0             	movzx  eax,al
c001c0f5:	50                   	push   eax
c001c0f6:	55                   	push   ebp
c001c0f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0fb:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c101:	51                   	push   ecx
c001c102:	e8 65 38 ff ff       	call   c000f96c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c107:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c10c:	83 c4 1c             	add    esp,0x1c
c001c10f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c115:	eb 0a                	jmp    c001c121 <IDE::open(int, int, void*)+0x14b>
c001c117:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c121:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c128:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c12f:	c1 e1 10             	shl    ecx,0x10
c001c132:	c1 e0 08             	shl    eax,0x8
c001c135:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c13a:	09 c1                	or     ecx,eax
c001c13c:	89 fa                	mov    edx,edi
c001c13e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c145:	c1 e0 0b             	shl    eax,0xb
c001c148:	09 c1                	or     ecx,eax
c001c14a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c150:	89 c8                	mov    eax,ecx
c001c152:	ef                   	out    dx,eax
c001c153:	be fc 0c 00 00       	mov    esi,0xcfc
c001c158:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c15e:	89 f2                	mov    edx,esi
c001c160:	ee                   	out    dx,al
c001c161:	89 c8                	mov    eax,ecx
c001c163:	89 fa                	mov    edx,edi
c001c165:	ef                   	out    dx,eax
c001c166:	89 f2                	mov    edx,esi
c001c168:	ed                   	in     eax,dx
c001c169:	0f b6 c0             	movzx  eax,al
c001c16c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c172:	74 4a                	je     c001c1be <IDE::open(int, int, void*)+0x1e8>
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	68 08 32 02 c0       	push   0xc0023208
c001c17c:	eb 38                	jmp    c001c1b6 <IDE::open(int, int, void*)+0x1e0>
c001c17e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c187:	75 1b                	jne    c001c1a4 <IDE::open(int, int, void*)+0x1ce>
c001c189:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c18d:	3d 80 00 00 00       	cmp    eax,0x80
c001c192:	74 07                	je     c001c19b <IDE::open(int, int, void*)+0x1c5>
c001c194:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c199:	75 09                	jne    c001c1a4 <IDE::open(int, int, void*)+0x1ce>
c001c19b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c1a2:	eb 1a                	jmp    c001c1be <IDE::open(int, int, void*)+0x1e8>
c001c1a4:	83 ec 0c             	sub    esp,0xc
c001c1a7:	68 10 32 02 c0       	push   0xc0023210
c001c1ac:	eb 08                	jmp    c001c1b6 <IDE::open(int, int, void*)+0x1e0>
c001c1ae:	83 ec 0c             	sub    esp,0xc
c001c1b1:	68 41 32 02 c0       	push   0xc0023241
c001c1b6:	e8 98 54 ff ff       	call   c0011653 <KePanic(char const*)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c1c5:	74 1a                	je     c001c1e1 <IDE::open(int, int, void*)+0x20b>
c001c1c7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c1cd:	83 e0 fc             	and    eax,0xfffffffc
c001c1d0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1d7:	83 c0 08             	add    eax,0x8
c001c1da:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1e7:	89 c2                	mov    edx,eax
c001c1e9:	83 e2 0f             	and    edx,0xf
c001c1ec:	83 fa 08             	cmp    edx,0x8
c001c1ef:	75 0a                	jne    c001c1fb <IDE::open(int, int, void*)+0x225>
c001c1f1:	83 e8 02             	sub    eax,0x2
c001c1f4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1fb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c201:	89 c2                	mov    edx,eax
c001c203:	83 e2 0f             	and    edx,0xf
c001c206:	83 fa 08             	cmp    edx,0x8
c001c209:	75 0a                	jne    c001c215 <IDE::open(int, int, void*)+0x23f>
c001c20b:	83 e8 02             	sub    eax,0x2
c001c20e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c215:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c21c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c223:	89 d0                	mov    eax,edx
c001c225:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c228:	8d 7a 01             	lea    edi,[edx+0x1]
c001c22b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c22f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c233:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c237:	83 e1 3f             	and    ecx,0x3f
c001c23a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c23e:	89 f9                	mov    ecx,edi
c001c240:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c247:	0f b6 c9             	movzx  ecx,cl
c001c24a:	8d 78 02             	lea    edi,[eax+0x2]
c001c24d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c250:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c254:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c258:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c25c:	83 e2 3f             	and    edx,0x3f
c001c25f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c263:	89 f9                	mov    ecx,edi
c001c265:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c26b:	0f b6 d1             	movzx  edx,cl
c001c26e:	8d 78 03             	lea    edi,[eax+0x3]
c001c271:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c274:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c278:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c27c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c280:	83 e1 3f             	and    ecx,0x3f
c001c283:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c287:	89 f9                	mov    ecx,edi
c001c289:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c28f:	0f b6 c9             	movzx  ecx,cl
c001c292:	8d 78 04             	lea    edi,[eax+0x4]
c001c295:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c298:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c29c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c2a0:	89 fa                	mov    edx,edi
c001c2a2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c2a8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c2ac:	83 e2 3f             	and    edx,0x3f
c001c2af:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c2b3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c2ba:	66 85 f6             	test   si,si
c001c2bd:	74 65                	je     c001c324 <IDE::open(int, int, void*)+0x34e>
c001c2bf:	89 f9                	mov    ecx,edi
c001c2c1:	83 c0 05             	add    eax,0x5
c001c2c4:	0f b6 d1             	movzx  edx,cl
c001c2c7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2ce:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2d2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2d8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2dc:	83 e0 3f             	and    eax,0x3f
c001c2df:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2e3:	eb 3f                	jmp    c001c324 <IDE::open(int, int, void*)+0x34e>
c001c2e5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2f2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2f9:	05 06 02 00 00       	add    eax,0x206
c001c2fe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c305:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c30c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c313:	05 06 02 00 00       	add    eax,0x206
c001c318:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c31f:	e9 bd fe ff ff       	jmp    c001c1e1 <IDE::open(int, int, void*)+0x20b>
c001c324:	50                   	push   eax
c001c325:	50                   	push   eax
c001c326:	6a 00                	push   0x0
c001c328:	53                   	push   ebx
c001c329:	e8 30 fa ff ff       	call   c001bd5e <IDE::prepareInterrupt(unsigned char)>
c001c32e:	5a                   	pop    edx
c001c32f:	59                   	pop    ecx
c001c330:	6a 01                	push   0x1
c001c332:	53                   	push   ebx
c001c333:	e8 26 fa ff ff       	call   c001bd5e <IDE::prepareInterrupt(unsigned char)>
c001c338:	83 c4 0c             	add    esp,0xc
c001c33b:	6a 00                	push   0x0
c001c33d:	6a 00                	push   0x0
c001c33f:	53                   	push   ebx
c001c340:	e8 47 fc ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001c345:	83 c4 0c             	add    esp,0xc
c001c348:	6a 00                	push   0x0
c001c34a:	6a 01                	push   0x1
c001c34c:	53                   	push   ebx
c001c34d:	e8 3a fc ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001c352:	83 c4 10             	add    esp,0x10
c001c355:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c35c:	74 34                	je     c001c392 <IDE::open(int, int, void*)+0x3bc>
c001c35e:	83 ec 0c             	sub    esp,0xc
c001c361:	53                   	push   ebx
c001c362:	6a 01                	push   0x1
c001c364:	68 54 bf 01 c0       	push   0xc001bf54
c001c369:	6a 0e                	push   0xe
c001c36b:	53                   	push   ebx
c001c36c:	e8 35 06 ff ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c371:	83 c4 14             	add    esp,0x14
c001c374:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c37a:	53                   	push   ebx
c001c37b:	6a 01                	push   0x1
c001c37d:	68 70 bf 01 c0       	push   0xc001bf70
c001c382:	6a 0f                	push   0xf
c001c384:	53                   	push   ebx
c001c385:	e8 1c 06 ff ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c38a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c390:	eb 38                	jmp    c001c3ca <IDE::open(int, int, void*)+0x3f4>
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c39f:	53                   	push   ebx
c001c3a0:	6a 00                	push   0x0
c001c3a2:	68 54 bf 01 c0       	push   0xc001bf54
c001c3a7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 f3 05 ff ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3b3:	83 c4 14             	add    esp,0x14
c001c3b6:	53                   	push   ebx
c001c3b7:	6a 00                	push   0x0
c001c3b9:	68 70 bf 01 c0       	push   0xc001bf70
c001c3be:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c3c4:	53                   	push   ebx
c001c3c5:	e8 dc 05 ff ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3cc:	83 c4 20             	add    esp,0x20
c001c3cf:	83 ec 0c             	sub    esp,0xc
c001c3d2:	53                   	push   ebx
c001c3d3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3d6:	83 c4 0c             	add    esp,0xc
c001c3d9:	6a 07                	push   0x7
c001c3db:	6a 00                	push   0x0
c001c3dd:	53                   	push   ebx
c001c3de:	e8 61 fa ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c3e3:	83 c4 0c             	add    esp,0xc
c001c3e6:	6a 07                	push   0x7
c001c3e8:	6a 01                	push   0x1
c001c3ea:	53                   	push   ebx
c001c3eb:	e8 54 fa ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c3f0:	83 c4 0c             	add    esp,0xc
c001c3f3:	6a 01                	push   0x1
c001c3f5:	6a 00                	push   0x0
c001c3f7:	53                   	push   ebx
c001c3f8:	e8 8f fb ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001c3fd:	83 c4 0c             	add    esp,0xc
c001c400:	6a 01                	push   0x1
c001c402:	6a 01                	push   0x1
c001c404:	53                   	push   ebx
c001c405:	e8 82 fb ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001c40a:	83 c4 2c             	add    esp,0x2c
c001c40d:	31 c0                	xor    eax,eax
c001c40f:	5b                   	pop    ebx
c001c410:	5e                   	pop    esi
c001c411:	5f                   	pop    edi
c001c412:	5d                   	pop    ebp
c001c413:	c3                   	ret    

c001c414 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c414:	55                   	push   ebp
c001c415:	57                   	push   edi
c001c416:	56                   	push   esi
c001c417:	53                   	push   ebx
c001c418:	83 ec 1c             	sub    esp,0x1c
c001c41b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c41f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c423:	8d 42 f8             	lea    eax,[edx-0x8]
c001c426:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c42a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c42e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c432:	3c 03                	cmp    al,0x3
c001c434:	77 5a                	ja     c001c490 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c436:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c43a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c43e:	0f b6 db             	movzx  ebx,bl
c001c441:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c444:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c449:	0c 80                	or     al,0x80
c001c44b:	50                   	push   eax
c001c44c:	6a 0c                	push   0xc
c001c44e:	53                   	push   ebx
c001c44f:	56                   	push   esi
c001c450:	e8 2f f9 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c455:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c45a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c45e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c462:	0f b6 d2             	movzx  edx,dl
c001c465:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c469:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c46b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c470:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c474:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c478:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c47c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c484:	83 c4 2c             	add    esp,0x2c
c001c487:	5b                   	pop    ebx
c001c488:	5e                   	pop    esi
c001c489:	5f                   	pop    edi
c001c48a:	5d                   	pop    ebp
c001c48b:	e9 f4 f8 ff ff       	jmp    c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c490:	0f b6 c2             	movzx  eax,dl
c001c493:	83 f8 07             	cmp    eax,0x7
c001c496:	77 12                	ja     c001c4aa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c498:	0f b6 c2             	movzx  eax,dl
c001c49b:	0f b6 db             	movzx  ebx,bl
c001c49e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c4a6:	01 c2                	add    edx,eax
c001c4a8:	eb 2f                	jmp    c001c4d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4aa:	83 f8 0d             	cmp    eax,0xd
c001c4ad:	77 13                	ja     c001c4c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c4af:	0f b6 db             	movzx  ebx,bl
c001c4b2:	0f b6 d2             	movzx  edx,dl
c001c4b5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c4bc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c4c0:	eb 17                	jmp    c001c4d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c4c2:	83 f8 15             	cmp    eax,0x15
c001c4c5:	77 14                	ja     c001c4db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c4c7:	0f b6 db             	movzx  ebx,bl
c001c4ca:	0f b6 d2             	movzx  edx,dl
c001c4cd:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4d5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4db:	83 c4 1c             	add    esp,0x1c
c001c4de:	5b                   	pop    ebx
c001c4df:	5e                   	pop    esi
c001c4e0:	5f                   	pop    edi
c001c4e1:	5d                   	pop    ebp
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <IDE::detect()>:
c001c4e4:	55                   	push   ebp
c001c4e5:	57                   	push   edi
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4ee:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4f5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4fc:	0f 85 a4 02 00 00    	jne    c001c7a6 <IDE::detect()+0x2c2>
c001c502:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c509:	31 f6                	xor    esi,esi
c001c50b:	31 ed                	xor    ebp,ebp
c001c50d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c515:	89 e8                	mov    eax,ebp
c001c517:	c1 e0 06             	shl    eax,0x6
c001c51a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c522:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c526:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c52e:	c1 e0 04             	shl    eax,0x4
c001c531:	83 c8 a0             	or     eax,0xffffffa0
c001c534:	0f b6 c0             	movzx  eax,al
c001c537:	50                   	push   eax
c001c538:	6a 06                	push   0x6
c001c53a:	56                   	push   esi
c001c53b:	53                   	push   ebx
c001c53c:	e8 43 f8 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c541:	83 c4 0c             	add    esp,0xc
c001c544:	6a 0c                	push   0xc
c001c546:	56                   	push   esi
c001c547:	53                   	push   ebx
c001c548:	e8 f7 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c54d:	83 c4 0c             	add    esp,0xc
c001c550:	6a 0c                	push   0xc
c001c552:	56                   	push   esi
c001c553:	53                   	push   ebx
c001c554:	e8 eb f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c559:	83 c4 0c             	add    esp,0xc
c001c55c:	6a 0c                	push   0xc
c001c55e:	56                   	push   esi
c001c55f:	53                   	push   ebx
c001c560:	e8 df f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c565:	83 c4 0c             	add    esp,0xc
c001c568:	6a 0c                	push   0xc
c001c56a:	56                   	push   esi
c001c56b:	53                   	push   ebx
c001c56c:	e8 d3 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c571:	68 ec 00 00 00       	push   0xec
c001c576:	6a 07                	push   0x7
c001c578:	56                   	push   esi
c001c579:	53                   	push   ebx
c001c57a:	e8 05 f8 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c57f:	83 c4 1c             	add    esp,0x1c
c001c582:	6a 0c                	push   0xc
c001c584:	56                   	push   esi
c001c585:	53                   	push   ebx
c001c586:	e8 b9 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c58b:	83 c4 0c             	add    esp,0xc
c001c58e:	6a 0c                	push   0xc
c001c590:	56                   	push   esi
c001c591:	53                   	push   ebx
c001c592:	e8 ad f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c597:	83 c4 0c             	add    esp,0xc
c001c59a:	6a 0c                	push   0xc
c001c59c:	56                   	push   esi
c001c59d:	53                   	push   ebx
c001c59e:	e8 a1 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c5a3:	83 c4 0c             	add    esp,0xc
c001c5a6:	6a 0c                	push   0xc
c001c5a8:	56                   	push   esi
c001c5a9:	53                   	push   ebx
c001c5aa:	e8 95 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c5af:	83 c4 0c             	add    esp,0xc
c001c5b2:	6a 0c                	push   0xc
c001c5b4:	56                   	push   esi
c001c5b5:	53                   	push   ebx
c001c5b6:	e8 89 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	84 c0                	test   al,al
c001c5c0:	0f 84 60 01 00 00    	je     c001c726 <IDE::detect()+0x242>
c001c5c6:	31 ff                	xor    edi,edi
c001c5c8:	50                   	push   eax
c001c5c9:	6a 0c                	push   0xc
c001c5cb:	56                   	push   esi
c001c5cc:	53                   	push   ebx
c001c5cd:	e8 72 f8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c5d2:	83 c4 10             	add    esp,0x10
c001c5d5:	a8 01                	test   al,0x1
c001c5d7:	0f 85 6a 01 00 00    	jne    c001c747 <IDE::detect()+0x263>
c001c5dd:	a8 80                	test   al,0x80
c001c5df:	75 04                	jne    c001c5e5 <IDE::detect()+0x101>
c001c5e1:	a8 08                	test   al,0x8
c001c5e3:	75 23                	jne    c001c608 <IDE::detect()+0x124>
c001c5e5:	47                   	inc    edi
c001c5e6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c5ec:	7e da                	jle    c001c5c8 <IDE::detect()+0xe4>
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	6a 32                	push   0x32
c001c5f3:	e8 f0 9d ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c601:	75 c5                	jne    c001c5c8 <IDE::detect()+0xe4>
c001c603:	e9 3f 01 00 00       	jmp    c001c747 <IDE::detect()+0x263>
c001c608:	31 c9                	xor    ecx,ecx
c001c60a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c60e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	68 80 00 00 00       	push   0x80
c001c61a:	57                   	push   edi
c001c61b:	6a 00                	push   0x0
c001c61d:	56                   	push   esi
c001c61e:	53                   	push   ebx
c001c61f:	e8 f0 fd ff ff       	call   c001c414 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c624:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c629:	89 e8                	mov    eax,ebp
c001c62b:	89 d1                	mov    ecx,edx
c001c62d:	c1 e0 06             	shl    eax,0x6
c001c630:	01 d8                	add    eax,ebx
c001c632:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c639:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c640:	89 f2                	mov    edx,esi
c001c642:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c648:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c64c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c652:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c656:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c65d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c665:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c66c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c674:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c67a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c681:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c687:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c68b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c68f:	83 c4 20             	add    esp,0x20
c001c692:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c695:	83 c0 02             	add    eax,0x2
c001c698:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c69e:	83 c7 02             	add    edi,0x2
c001c6a1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c6a4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c6aa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c6ae:	75 e2                	jne    c001c692 <IDE::detect()+0x1ae>
c001c6b0:	89 e8                	mov    eax,ebp
c001c6b2:	c1 e0 06             	shl    eax,0x6
c001c6b5:	01 d8                	add    eax,ebx
c001c6b7:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c6be:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c6c5:	c1 ea 09             	shr    edx,0x9
c001c6c8:	83 e2 01             	and    edx,0x1
c001c6cb:	80 e1 01             	and    cl,0x1
c001c6ce:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6d4:	75 22                	jne    c001c6f8 <IDE::detect()+0x214>
c001c6d6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6dd:	74 46                	je     c001c725 <IDE::detect()+0x241>
c001c6df:	83 ec 0c             	sub    esp,0xc
c001c6e2:	68 7c 01 00 00       	push   0x17c
c001c6e7:	e8 ca b3 fe ff       	call   c0007ab6 <malloc>
c001c6ec:	89 c7                	mov    edi,eax
c001c6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6f1:	e8 1a 05 00 00       	call   c001cc10 <ATA::ATA()>
c001c6f6:	eb 17                	jmp    c001c70f <IDE::detect()+0x22b>
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	68 84 01 00 00       	push   0x184
c001c700:	e8 b1 b3 fe ff       	call   c0007ab6 <malloc>
c001c705:	89 c7                	mov    edi,eax
c001c707:	89 04 24             	mov    DWORD PTR [esp],eax
c001c70a:	e8 45 0e 00 00       	call   c001d554 <ATAPI::ATAPI()>
c001c70f:	5a                   	pop    edx
c001c710:	59                   	pop    ecx
c001c711:	57                   	push   edi
c001c712:	53                   	push   ebx
c001c713:	e8 e2 02 ff ff       	call   c000c9fa <Device::addChild(Device*)>
c001c718:	8b 07                	mov    eax,DWORD PTR [edi]
c001c71a:	53                   	push   ebx
c001c71b:	55                   	push   ebp
c001c71c:	6a 00                	push   0x0
c001c71e:	57                   	push   edi
c001c71f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c722:	83 c4 20             	add    esp,0x20
c001c725:	45                   	inc    ebp
c001c726:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c72b:	74 0d                	je     c001c73a <IDE::detect()+0x256>
c001c72d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c735:	e9 db fd ff ff       	jmp    c001c515 <IDE::detect()+0x31>
c001c73a:	4e                   	dec    esi
c001c73b:	74 69                	je     c001c7a6 <IDE::detect()+0x2c2>
c001c73d:	be 01 00 00 00       	mov    esi,0x1
c001c742:	e9 c6 fd ff ff       	jmp    c001c50d <IDE::detect()+0x29>
c001c747:	50                   	push   eax
c001c748:	6a 04                	push   0x4
c001c74a:	56                   	push   esi
c001c74b:	53                   	push   ebx
c001c74c:	e8 f3 f6 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c751:	83 c4 0c             	add    esp,0xc
c001c754:	89 c7                	mov    edi,eax
c001c756:	6a 05                	push   0x5
c001c758:	56                   	push   esi
c001c759:	53                   	push   ebx
c001c75a:	e8 e5 f6 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	89 f9                	mov    ecx,edi
c001c764:	0f b6 c0             	movzx  eax,al
c001c767:	0f b6 f9             	movzx  edi,cl
c001c76a:	83 ff 14             	cmp    edi,0x14
c001c76d:	75 07                	jne    c001c776 <IDE::detect()+0x292>
c001c76f:	3d eb 00 00 00       	cmp    eax,0xeb
c001c774:	eb 0a                	jmp    c001c780 <IDE::detect()+0x29c>
c001c776:	3d 96 00 00 00       	cmp    eax,0x96
c001c77b:	75 a9                	jne    c001c726 <IDE::detect()+0x242>
c001c77d:	83 ff 69             	cmp    edi,0x69
c001c780:	75 a4                	jne    c001c726 <IDE::detect()+0x242>
c001c782:	68 a1 00 00 00       	push   0xa1
c001c787:	6a 07                	push   0x7
c001c789:	56                   	push   esi
c001c78a:	53                   	push   ebx
c001c78b:	e8 f4 f5 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c790:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c797:	e8 4c 9c ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	b1 01                	mov    cl,0x1
c001c7a1:	e9 64 fe ff ff       	jmp    c001c60a <IDE::detect()+0x126>
c001c7a6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c7ac:	5b                   	pop    ebx
c001c7ad:	5e                   	pop    esi
c001c7ae:	5f                   	pop    edi
c001c7af:	5d                   	pop    ebp
c001c7b0:	c3                   	ret    
c001c7b1:	90                   	nop

c001c7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c7b2:	55                   	push   ebp
c001c7b3:	57                   	push   edi
c001c7b4:	56                   	push   esi
c001c7b5:	53                   	push   ebx
c001c7b6:	83 ec 1c             	sub    esp,0x1c
c001c7b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7cd:	88 c3                	mov    bl,al
c001c7cf:	25 ff 00 00 00       	and    eax,0xff
c001c7d4:	0f 84 88 00 00 00    	je     c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	89 c7                	mov    edi,eax
c001c7df:	68 6b 32 02 c0       	push   0xc002326b
c001c7e4:	e8 5c e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	83 ff 01             	cmp    edi,0x1
c001c7ef:	74 6b                	je     c001c85c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7f1:	83 ff 02             	cmp    edi,0x2
c001c7f4:	75 58                	jne    c001c84e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7f6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7fb:	01 ff                	add    edi,edi
c001c7fd:	50                   	push   eax
c001c7fe:	09 fe                	or     esi,edi
c001c800:	6a 01                	push   0x1
c001c802:	89 f0                	mov    eax,esi
c001c804:	0f b6 f0             	movzx  esi,al
c001c807:	c1 e6 06             	shl    esi,0x6
c001c80a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c812:	50                   	push   eax
c001c813:	55                   	push   ebp
c001c814:	e8 2b f6 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c819:	83 c4 10             	add    esp,0x10
c001c81c:	a8 01                	test   al,0x1
c001c81e:	74 02                	je     c001c822 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c820:	b3 07                	mov    bl,0x7
c001c822:	a8 02                	test   al,0x2
c001c824:	74 02                	je     c001c828 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c826:	b3 03                	mov    bl,0x3
c001c828:	a8 04                	test   al,0x4
c001c82a:	74 02                	je     c001c82e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c82c:	b3 14                	mov    bl,0x14
c001c82e:	a8 08                	test   al,0x8
c001c830:	74 02                	je     c001c834 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c832:	b3 03                	mov    bl,0x3
c001c834:	a8 10                	test   al,0x10
c001c836:	74 02                	je     c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c838:	b3 15                	mov    bl,0x15
c001c83a:	a8 20                	test   al,0x20
c001c83c:	74 02                	je     c001c840 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c83e:	b3 03                	mov    bl,0x3
c001c840:	a8 40                	test   al,0x40
c001c842:	74 02                	je     c001c846 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c844:	b3 16                	mov    bl,0x16
c001c846:	a8 80                	test   al,0x80
c001c848:	74 18                	je     c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c84a:	b3 0d                	mov    bl,0xd
c001c84c:	eb 14                	jmp    c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c84e:	83 ff 03             	cmp    edi,0x3
c001c851:	74 0d                	je     c001c860 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c853:	83 ff 04             	cmp    edi,0x4
c001c856:	75 0a                	jne    c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c858:	b3 08                	mov    bl,0x8
c001c85a:	eb 06                	jmp    c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c85c:	b3 13                	mov    bl,0x13
c001c85e:	eb 02                	jmp    c001c862 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c860:	b3 17                	mov    bl,0x17
c001c862:	83 c4 1c             	add    esp,0x1c
c001c865:	88 d8                	mov    al,bl
c001c867:	5b                   	pop    ebx
c001c868:	5e                   	pop    esi
c001c869:	5f                   	pop    edi
c001c86a:	5d                   	pop    ebp
c001c86b:	c3                   	ret    

c001c86c <IDE::polling(unsigned char, unsigned int)>:
c001c86c:	57                   	push   edi
c001c86d:	56                   	push   esi
c001c86e:	53                   	push   ebx
c001c86f:	bb 04 00 00 00       	mov    ebx,0x4
c001c874:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c878:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c87d:	52                   	push   edx
c001c87e:	6a 0c                	push   0xc
c001c880:	56                   	push   esi
c001c881:	57                   	push   edi
c001c882:	e8 bd f5 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	4b                   	dec    ebx
c001c88b:	75 f0                	jne    c001c87d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c88d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c892:	50                   	push   eax
c001c893:	6a 0c                	push   0xc
c001c895:	56                   	push   esi
c001c896:	57                   	push   edi
c001c897:	e8 a8 f5 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	a8 01                	test   al,0x1
c001c8a1:	75 17                	jne    c001c8ba <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8a3:	a8 20                	test   al,0x20
c001c8a5:	75 0f                	jne    c001c8b6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c8a7:	4b                   	dec    ebx
c001c8a8:	74 10                	je     c001c8ba <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c8aa:	a8 80                	test   al,0x80
c001c8ac:	75 e4                	jne    c001c892 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8ae:	a8 08                	test   al,0x8
c001c8b0:	74 e0                	je     c001c892 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c8b2:	31 c0                	xor    eax,eax
c001c8b4:	eb 06                	jmp    c001c8bc <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8b6:	b0 01                	mov    al,0x1
c001c8b8:	eb 02                	jmp    c001c8bc <IDE::polling(unsigned char, unsigned int)+0x50>
c001c8ba:	b0 02                	mov    al,0x2
c001c8bc:	5b                   	pop    ebx
c001c8bd:	5e                   	pop    esi
c001c8be:	5f                   	pop    edi
c001c8bf:	c3                   	ret    

c001c8c0 <SATABus::close(int, int, void*)>:
c001c8c0:	31 c0                	xor    eax,eax
c001c8c2:	c3                   	ret    
c001c8c3:	90                   	nop

c001c8c4 <SATABus::detect()>:
c001c8c4:	c3                   	ret    
c001c8c5:	90                   	nop

c001c8c6 <SATABus::SATABus()>:
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cd:	83 ec 08             	sub    esp,0x8
c001c8d0:	68 a4 32 02 c0       	push   0xc00232a4
c001c8d5:	50                   	push   eax
c001c8d6:	e8 61 04 ff ff       	call   c000cd3c <HardDiskController::HardDiskController(char const*)>
c001c8db:	83 c4 10             	add    esp,0x10
c001c8de:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c001c8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e7:	89 10                	mov    DWORD PTR [eax],edx
c001c8e9:	83 ec 0c             	sub    esp,0xc
c001c8ec:	6a 50                	push   0x50
c001c8ee:	e8 9b b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c8f3:	83 c4 10             	add    esp,0x10
c001c8f6:	89 c2                	mov    edx,eax
c001c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c902:	83 ec 0c             	sub    esp,0xc
c001c905:	6a 50                	push   0x50
c001c907:	e8 01 cd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c90c:	83 c4 10             	add    esp,0x10
c001c90f:	89 c2                	mov    edx,eax
c001c911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c915:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c91b:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c920:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c924:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c92a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c92e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c934:	83 ec 0c             	sub    esp,0xc
c001c937:	6a 03                	push   0x3
c001c939:	6a 50                	push   0x50
c001c93b:	51                   	push   ecx
c001c93c:	52                   	push   edx
c001c93d:	50                   	push   eax
c001c93e:	e8 d7 d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c943:	83 c4 20             	add    esp,0x20
c001c946:	90                   	nop
c001c947:	83 c4 0c             	add    esp,0xc
c001c94a:	c3                   	ret    
c001c94b:	90                   	nop

c001c94c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c94c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c950:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c953:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c956:	09 c2                	or     edx,eax
c001c958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c962:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c964:	31 c0                	xor    eax,eax
c001c966:	c1 e9 08             	shr    ecx,0x8
c001c969:	83 e1 0f             	and    ecx,0xf
c001c96c:	39 c8                	cmp    eax,ecx
c001c96e:	74 0a                	je     c001c97a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c970:	f6 c2 01             	test   dl,0x1
c001c973:	74 08                	je     c001c97d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c975:	d1 ea                	shr    edx,1
c001c977:	40                   	inc    eax
c001c978:	eb f2                	jmp    c001c96c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c97a:	83 c8 ff             	or     eax,0xffffffff
c001c97d:	c3                   	ret    

c001c97e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c97e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c982:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c985:	89 c2                	mov    edx,eax
c001c987:	c1 ea 08             	shr    edx,0x8
c001c98a:	83 e2 0f             	and    edx,0xf
c001c98d:	4a                   	dec    edx
c001c98e:	75 32                	jne    c001c9c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c990:	83 e0 0f             	and    eax,0xf
c001c993:	83 f8 03             	cmp    eax,0x3
c001c996:	75 2a                	jne    c001c9c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c998:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c99b:	b8 02 00 00 00       	mov    eax,0x2
c001c9a0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c9a6:	74 1c                	je     c001c9c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9a8:	b8 04 00 00 00       	mov    eax,0x4
c001c9ad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c9b3:	74 0f                	je     c001c9c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c9b5:	31 c0                	xor    eax,eax
c001c9b7:	83 fa 03             	cmp    edx,0x3
c001c9ba:	0f 94 c0             	sete   al
c001c9bd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c9c1:	c3                   	ret    
c001c9c2:	31 c0                	xor    eax,eax
c001c9c4:	c3                   	ret    
c001c9c5:	90                   	nop

c001c9c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9cd:	0f ba e2 0f          	bt     edx,0xf
c001c9d1:	72 f7                	jb     c001c9ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d6:	83 ca 10             	or     edx,0x10
c001c9d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9df:	83 ca 01             	or     edx,0x1
c001c9e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9e5:	c3                   	ret    

c001c9e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9ed:	83 e2 fe             	and    edx,0xfffffffe
c001c9f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9f6:	83 e2 ef             	and    edx,0xffffffef
c001c9f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9ff:	0f ba e2 0e          	bt     edx,0xe
c001ca03:	72 f7                	jb     c001c9fc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca08:	0f ba e2 0f          	bt     edx,0xf
c001ca0c:	72 ee                	jb     c001c9fc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ca0e:	c3                   	ret    
c001ca0f:	90                   	nop

c001ca10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ca10:	55                   	push   ebp
c001ca11:	57                   	push   edi
c001ca12:	56                   	push   esi
c001ca13:	53                   	push   ebx
c001ca14:	83 ec 1c             	sub    esp,0x1c
c001ca17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ca1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca1f:	53                   	push   ebx
c001ca20:	56                   	push   esi
c001ca21:	e8 c0 ff ff ff       	call   c001c9e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ca26:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca2a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca30:	83 ec 0c             	sub    esp,0xc
c001ca33:	c1 e5 0a             	shl    ebp,0xa
c001ca36:	01 e8                	add    eax,ebp
c001ca38:	89 03                	mov    DWORD PTR [ebx],eax
c001ca3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca3c:	68 00 04 00 00       	push   0x400
c001ca41:	6a 00                	push   0x0
c001ca43:	50                   	push   eax
c001ca44:	e8 a7 3a fe ff       	call   c00004f0 <memset>
c001ca49:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca4f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca53:	01 e8                	add    eax,ebp
c001ca55:	83 c4 1c             	add    esp,0x1c
c001ca58:	89 03                	mov    DWORD PTR [ebx],eax
c001ca5a:	c1 e2 08             	shl    edx,0x8
c001ca5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca64:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ca6a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca70:	01 f8                	add    eax,edi
c001ca72:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca75:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca78:	68 00 01 00 00       	push   0x100
c001ca7d:	6a 00                	push   0x0
c001ca7f:	50                   	push   eax
c001ca80:	e8 6b 3a fe ff       	call   c00004f0 <memset>
c001ca85:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca8b:	01 fa                	add    edx,edi
c001ca8d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca91:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca94:	c1 e7 0d             	shl    edi,0xd
c001ca97:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca9e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001caa4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001caaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caae:	31 ff                	xor    edi,edi
c001cab0:	83 c4 10             	add    esp,0x10
c001cab3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cabd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cac3:	83 c5 20             	add    ebp,0x20
c001cac6:	01 f8                	add    eax,edi
c001cac8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cacb:	52                   	push   edx
c001cacc:	68 00 01 00 00       	push   0x100
c001cad1:	6a 00                	push   0x0
c001cad3:	50                   	push   eax
c001cad4:	e8 17 3a fe ff       	call   c00004f0 <memset>
c001cad9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cae6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001caed:	01 f8                	add    eax,edi
c001caef:	81 c7 00 01 00 00    	add    edi,0x100
c001caf5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001caf8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cafe:	75 b3                	jne    c001cab3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cb00:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb07:	50                   	push   eax
c001cb08:	50                   	push   eax
c001cb09:	53                   	push   ebx
c001cb0a:	56                   	push   esi
c001cb0b:	e8 b6 fe ff ff       	call   c001c9c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cb10:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cb17:	83 c4 2c             	add    esp,0x2c
c001cb1a:	5b                   	pop    ebx
c001cb1b:	5e                   	pop    esi
c001cb1c:	5f                   	pop    edi
c001cb1d:	5d                   	pop    ebp
c001cb1e:	c3                   	ret    
c001cb1f:	90                   	nop

c001cb20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cb20:	55                   	push   ebp
c001cb21:	57                   	push   edi
c001cb22:	56                   	push   esi
c001cb23:	53                   	push   ebx
c001cb24:	31 db                	xor    ebx,ebx
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb2d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb31:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb34:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb3a:	74 7a                	je     c001cbb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb40:	89 d8                	mov    eax,ebx
c001cb42:	c1 e0 07             	shl    eax,0x7
c001cb45:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb4c:	55                   	push   ebp
c001cb4d:	56                   	push   esi
c001cb4e:	e8 2b fe ff ff       	call   c001c97e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb53:	5a                   	pop    edx
c001cb54:	83 f8 01             	cmp    eax,0x1
c001cb57:	59                   	pop    ecx
c001cb58:	75 21                	jne    c001cb7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb5a:	50                   	push   eax
c001cb5b:	53                   	push   ebx
c001cb5c:	55                   	push   ebp
c001cb5d:	56                   	push   esi
c001cb5e:	e8 ad fe ff ff       	call   c001ca10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb63:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb6a:	e8 47 af fe ff       	call   c0007ab6 <malloc>
c001cb6f:	89 c5                	mov    ebp,eax
c001cb71:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb74:	e8 99 10 00 00       	call   c001dc12 <SATA::SATA()>
c001cb79:	eb 24                	jmp    c001cb9f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb7b:	83 f8 04             	cmp    eax,0x4
c001cb7e:	75 36                	jne    c001cbb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb80:	51                   	push   ecx
c001cb81:	53                   	push   ebx
c001cb82:	55                   	push   ebp
c001cb83:	56                   	push   esi
c001cb84:	e8 87 fe ff ff       	call   c001ca10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb89:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb90:	e8 21 af fe ff       	call   c0007ab6 <malloc>
c001cb95:	89 c5                	mov    ebp,eax
c001cb97:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb9a:	e8 d5 17 00 00       	call   c001e374 <SATAPI::SATAPI()>
c001cb9f:	58                   	pop    eax
c001cba0:	5a                   	pop    edx
c001cba1:	55                   	push   ebp
c001cba2:	56                   	push   esi
c001cba3:	e8 52 fe fe ff       	call   c000c9fa <Device::addChild(Device*)>
c001cba8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cbab:	56                   	push   esi
c001cbac:	6a 00                	push   0x0
c001cbae:	53                   	push   ebx
c001cbaf:	55                   	push   ebp
c001cbb0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cbb3:	83 c4 20             	add    esp,0x20
c001cbb6:	d1 ef                	shr    edi,1
c001cbb8:	43                   	inc    ebx
c001cbb9:	83 fb 20             	cmp    ebx,0x20
c001cbbc:	0f 85 72 ff ff ff    	jne    c001cb34 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cbc2:	83 c4 0c             	add    esp,0xc
c001cbc5:	5b                   	pop    ebx
c001cbc6:	5e                   	pop    esi
c001cbc7:	5f                   	pop    edi
c001cbc8:	5d                   	pop    ebp
c001cbc9:	c3                   	ret    

c001cbca <SATABus::open(int, int, void*)>:
c001cbca:	83 ec 14             	sub    esp,0x14
c001cbcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cbd1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cbd7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbdd:	52                   	push   edx
c001cbde:	50                   	push   eax
c001cbdf:	e8 3c ff ff ff       	call   c001cb20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbe4:	31 c0                	xor    eax,eax
c001cbe6:	83 c4 1c             	add    esp,0x1c
c001cbe9:	c3                   	ret    

c001cbea <ATA::close(int, int, void*)>:
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbf7:	85 c0                	test   eax,eax
c001cbf9:	74 0c                	je     c001cc07 <ATA::close(int, int, void*)+0x1d>
c001cbfb:	83 ec 0c             	sub    esp,0xc
c001cbfe:	8b 10                	mov    edx,DWORD PTR [eax]
c001cc00:	50                   	push   eax
c001cc01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cc04:	83 c4 10             	add    esp,0x10
c001cc07:	31 c0                	xor    eax,eax
c001cc09:	83 c4 0c             	add    esp,0xc
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <ATA::powerSaving(PowerSavingLevel)>:
c001cc0e:	c3                   	ret    
c001cc0f:	90                   	nop

c001cc10 <ATA::ATA()>:
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc17:	83 ec 04             	sub    esp,0x4
c001cc1a:	68 00 02 00 00       	push   0x200
c001cc1f:	68 9d 33 02 c0       	push   0xc002339d
c001cc24:	50                   	push   eax
c001cc25:	e8 9c 01 ff ff       	call   c000cdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc2a:	83 c4 10             	add    esp,0x10
c001cc2d:	ba 10 33 02 c0       	mov    edx,0xc0023310
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	89 10                	mov    DWORD PTR [eax],edx
c001cc38:	90                   	nop
c001cc39:	83 c4 0c             	add    esp,0xc
c001cc3c:	c3                   	ret    
c001cc3d:	90                   	nop

c001cc3e <ATA::flush(bool)>:
c001cc3e:	53                   	push   ebx
c001cc3f:	83 ec 08             	sub    esp,0x8
c001cc42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc4b:	83 f8 01             	cmp    eax,0x1
c001cc4e:	19 c0                	sbb    eax,eax
c001cc50:	83 e0 fd             	and    eax,0xfffffffd
c001cc53:	05 ea 00 00 00       	add    eax,0xea
c001cc58:	50                   	push   eax
c001cc59:	6a 07                	push   0x7
c001cc5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc62:	50                   	push   eax
c001cc63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc69:	e8 16 f1 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc6e:	83 c4 0c             	add    esp,0xc
c001cc71:	6a 00                	push   0x0
c001cc73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc7a:	50                   	push   eax
c001cc7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc81:	e8 e6 fb ff ff       	call   c001c86c <IDE::polling(unsigned char, unsigned int)>
c001cc86:	83 c4 18             	add    esp,0x18
c001cc89:	5b                   	pop    ebx
c001cc8a:	c3                   	ret    
c001cc8b:	90                   	nop

c001cc8c <ATA::readyForCommand()>:
c001cc8c:	56                   	push   esi
c001cc8d:	53                   	push   ebx
c001cc8e:	53                   	push   ebx
c001cc8f:	31 db                	xor    ebx,ebx
c001cc91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc95:	51                   	push   ecx
c001cc96:	6a 0c                	push   0xc
c001cc98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc9f:	50                   	push   eax
c001cca0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cca6:	e8 99 f1 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	a8 88                	test   al,0x88
c001ccb0:	74 1f                	je     c001ccd1 <ATA::readyForCommand()+0x45>
c001ccb2:	43                   	inc    ebx
c001ccb3:	83 fb 63             	cmp    ebx,0x63
c001ccb6:	7e dd                	jle    c001cc95 <ATA::readyForCommand()+0x9>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	6a 0a                	push   0xa
c001ccbd:	e8 26 97 ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cccb:	75 c8                	jne    c001cc95 <ATA::readyForCommand()+0x9>
c001cccd:	31 c0                	xor    eax,eax
c001cccf:	eb 02                	jmp    c001ccd3 <ATA::readyForCommand()+0x47>
c001ccd1:	b0 01                	mov    al,0x1
c001ccd3:	5a                   	pop    edx
c001ccd4:	5b                   	pop    ebx
c001ccd5:	5e                   	pop    esi
c001ccd6:	c3                   	ret    
c001ccd7:	90                   	nop

c001ccd8 <ATA::access(unsigned long long, int, void*, bool)>:
c001ccd8:	55                   	push   ebp
c001ccd9:	57                   	push   edi
c001ccda:	56                   	push   esi
c001ccdb:	53                   	push   ebx
c001ccdc:	83 ec 2c             	sub    esp,0x2c
c001ccdf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cce3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cce7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cceb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccef:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccf3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccf7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ccfb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cd01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd05:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd0b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cd0f:	c1 e0 06             	shl    eax,0x6
c001cd12:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cd1a:	74 5d                	je     c001cd79 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cd1c:	89 fa                	mov    edx,edi
c001cd1e:	89 f0                	mov    eax,esi
c001cd20:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cd24:	c1 ea 1c             	shr    edx,0x1c
c001cd27:	89 d1                	mov    ecx,edx
c001cd29:	09 c1                	or     ecx,eax
c001cd2b:	74 25                	je     c001cd52 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd2d:	31 ed                	xor    ebp,ebp
c001cd2f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd36:	89 fa                	mov    edx,edi
c001cd38:	89 f0                	mov    eax,esi
c001cd3a:	0f ad d0             	shrd   eax,edx,cl
c001cd3d:	d3 ea                	shr    edx,cl
c001cd3f:	f6 c1 20             	test   cl,0x20
c001cd42:	74 02                	je     c001cd46 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd44:	89 d0                	mov    eax,edx
c001cd46:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd4a:	45                   	inc    ebp
c001cd4b:	83 fd 06             	cmp    ebp,0x6
c001cd4e:	75 df                	jne    c001cd2f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd50:	eb 76                	jmp    c001cdc8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd52:	89 f0                	mov    eax,esi
c001cd54:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd59:	89 fa                	mov    edx,edi
c001cd5b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd62:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd6b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd6f:	c1 ee 18             	shr    esi,0x18
c001cd72:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd77:	eb 56                	jmp    c001cdcf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd79:	6a 00                	push   0x0
c001cd7b:	6a 3f                	push   0x3f
c001cd7d:	57                   	push   edi
c001cd7e:	56                   	push   esi
c001cd7f:	e8 ac 2a 00 00       	call   c001f830 <__umoddi3>
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	40                   	inc    eax
c001cd88:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd8c:	6a 00                	push   0x0
c001cd8e:	68 f0 03 00 00       	push   0x3f0
c001cd93:	57                   	push   edi
c001cd94:	56                   	push   esi
c001cd95:	e8 96 29 00 00       	call   c001f730 <__udivdi3>
c001cd9a:	83 c4 10             	add    esp,0x10
c001cd9d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cda2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cda9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cdae:	6a 00                	push   0x0
c001cdb0:	6a 3f                	push   0x3f
c001cdb2:	57                   	push   edi
c001cdb3:	56                   	push   esi
c001cdb4:	e8 77 29 00 00       	call   c001f730 <__udivdi3>
c001cdb9:	83 c4 10             	add    esp,0x10
c001cdbc:	83 e0 0f             	and    eax,0xf
c001cdbf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cdc4:	89 c6                	mov    esi,eax
c001cdc6:	eb 07                	jmp    c001cdcf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cdc8:	31 f6                	xor    esi,esi
c001cdca:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cdcf:	bf 01 00 00 00       	mov    edi,0x1
c001cdd4:	50                   	push   eax
c001cdd5:	6a 00                	push   0x0
c001cdd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdde:	50                   	push   eax
c001cddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cde3:	e8 a4 f1 ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001cde8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdeb:	e8 9c fe ff ff       	call   c001cc8c <ATA::readyForCommand()>
c001cdf0:	83 c4 10             	add    esp,0x10
c001cdf3:	84 c0                	test   al,al
c001cdf5:	0f 84 69 02 00 00    	je     c001d064 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cdfb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ce01:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce07:	c1 e0 04             	shl    eax,0x4
c001ce0a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ce11:	09 c6                	or     esi,eax
c001ce13:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001ce18:	75 05                	jne    c001ce1f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ce1a:	83 ce a0             	or     esi,0xffffffa0
c001ce1d:	eb 03                	jmp    c001ce22 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ce1f:	83 ce e0             	or     esi,0xffffffe0
c001ce22:	89 f0                	mov    eax,esi
c001ce24:	0f b6 f0             	movzx  esi,al
c001ce27:	56                   	push   esi
c001ce28:	6a 06                	push   0x6
c001ce2a:	51                   	push   ecx
c001ce2b:	52                   	push   edx
c001ce2c:	e8 53 ef ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce31:	83 c4 10             	add    esp,0x10
c001ce34:	6a 00                	push   0x0
c001ce36:	6a 01                	push   0x1
c001ce38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3f:	50                   	push   eax
c001ce40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce46:	e8 39 ef ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce53:	83 f8 02             	cmp    eax,0x2
c001ce56:	75 6e                	jne    c001cec6 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ce58:	6a 00                	push   0x0
c001ce5a:	6a 08                	push   0x8
c001ce5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce63:	50                   	push   eax
c001ce64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6a:	e8 15 ef ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce6f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce74:	50                   	push   eax
c001ce75:	6a 09                	push   0x9
c001ce77:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce7e:	50                   	push   eax
c001ce7f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce85:	e8 fa ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce8a:	83 c4 20             	add    esp,0x20
c001ce8d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce92:	50                   	push   eax
c001ce93:	6a 0a                	push   0xa
c001ce95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce9c:	50                   	push   eax
c001ce9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea3:	e8 dc ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cead:	50                   	push   eax
c001ceae:	6a 0b                	push   0xb
c001ceb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ceb7:	50                   	push   eax
c001ceb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cebe:	e8 c1 ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec3:	83 c4 20             	add    esp,0x20
c001cec6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cecb:	50                   	push   eax
c001cecc:	6a 02                	push   0x2
c001cece:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ced5:	50                   	push   eax
c001ced6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cedc:	e8 a3 ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cee6:	50                   	push   eax
c001cee7:	6a 03                	push   0x3
c001cee9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef0:	50                   	push   eax
c001cef1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cef7:	e8 88 ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cefc:	83 c4 20             	add    esp,0x20
c001ceff:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cf04:	50                   	push   eax
c001cf05:	6a 04                	push   0x4
c001cf07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf0e:	50                   	push   eax
c001cf0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf15:	e8 6a ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cf1f:	50                   	push   eax
c001cf20:	6a 05                	push   0x5
c001cf22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf29:	50                   	push   eax
c001cf2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf30:	e8 4f ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf35:	83 c4 20             	add    esp,0x20
c001cf38:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf3d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf42:	74 11                	je     c001cf55 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf44:	b8 30 00 00 00       	mov    eax,0x30
c001cf49:	83 fa 02             	cmp    edx,0x2
c001cf4c:	75 16                	jne    c001cf64 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf4e:	b8 34 00 00 00       	mov    eax,0x34
c001cf53:	eb 0f                	jmp    c001cf64 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf55:	b8 20 00 00 00       	mov    eax,0x20
c001cf5a:	83 fa 02             	cmp    edx,0x2
c001cf5d:	75 05                	jne    c001cf64 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf5f:	b8 24 00 00 00       	mov    eax,0x24
c001cf64:	50                   	push   eax
c001cf65:	6a 07                	push   0x7
c001cf67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf6e:	50                   	push   eax
c001cf6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf75:	e8 0a ee ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf7a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf7e:	83 c4 10             	add    esp,0x10
c001cf81:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf86:	85 f6                	test   esi,esi
c001cf88:	0f 84 b3 00 00 00    	je     c001d041 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf8e:	50                   	push   eax
c001cf8f:	6a 01                	push   0x1
c001cf91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf98:	50                   	push   eax
c001cf99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf9f:	e8 c8 f8 ff ff       	call   c001c86c <IDE::polling(unsigned char, unsigned int)>
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	0f b6 f8             	movzx  edi,al
c001cfaa:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cfb0:	85 ff                	test   edi,edi
c001cfb2:	74 1d                	je     c001cfd1 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cfb4:	57                   	push   edi
c001cfb5:	0f b6 d2             	movzx  edx,dl
c001cfb8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cfbf:	50                   	push   eax
c001cfc0:	52                   	push   edx
c001cfc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc7:	e8 e6 f7 ff ff       	call   c001c7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfcc:	e9 90 00 00 00       	jmp    c001d061 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cfd1:	85 ed                	test   ebp,ebp
c001cfd3:	74 3b                	je     c001d010 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cfd5:	31 c9                	xor    ecx,ecx
c001cfd7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfdf:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cfe3:	50                   	push   eax
c001cfe4:	50                   	push   eax
c001cfe5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfec:	50                   	push   eax
c001cfed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff3:	e8 7a ed ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001cff8:	89 c2                	mov    edx,eax
c001cffa:	89 f8                	mov    eax,edi
c001cffc:	66 ef                	out    dx,ax
c001cffe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d002:	83 c4 10             	add    esp,0x10
c001d005:	41                   	inc    ecx
c001d006:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d00c:	75 c9                	jne    c001cfd7 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d00e:	eb 23                	jmp    c001d033 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d010:	0f b6 d2             	movzx  edx,dl
c001d013:	51                   	push   ecx
c001d014:	51                   	push   ecx
c001d015:	52                   	push   edx
c001d016:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01c:	e8 51 ed ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001d021:	b9 00 01 00 00       	mov    ecx,0x100
c001d026:	89 c2                	mov    edx,eax
c001d028:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d02c:	fc                   	cld    
c001d02d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d03b:	4e                   	dec    esi
c001d03c:	e9 45 ff ff ff       	jmp    c001cf86 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d041:	31 ff                	xor    edi,edi
c001d043:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d048:	74 1a                	je     c001d064 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d04a:	50                   	push   eax
c001d04b:	50                   	push   eax
c001d04c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d051:	83 f8 02             	cmp    eax,0x2
c001d054:	0f 94 c0             	sete   al
c001d057:	0f b6 c0             	movzx  eax,al
c001d05a:	50                   	push   eax
c001d05b:	53                   	push   ebx
c001d05c:	e8 dd fb ff ff       	call   c001cc3e <ATA::flush(bool)>
c001d061:	83 c4 10             	add    esp,0x10
c001d064:	83 c4 2c             	add    esp,0x2c
c001d067:	89 f8                	mov    eax,edi
c001d069:	5b                   	pop    ebx
c001d06a:	5e                   	pop    esi
c001d06b:	5f                   	pop    edi
c001d06c:	5d                   	pop    ebp
c001d06d:	c3                   	ret    

c001d06e <ATA::detectCHS()>:
c001d06e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d072:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d078:	c1 e0 06             	shl    eax,0x6
c001d07b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d081:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d08b:	c7 44 24 04 f4 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232f4
c001d093:	e9 bb 45 ff ff       	jmp    c0011653 <KePanic(char const*)>

c001d098 <ATA::open(int, int, void*)>:
c001d098:	53                   	push   ebx
c001d099:	83 ec 08             	sub    esp,0x8
c001d09c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d0ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d0b4:	c1 e0 06             	shl    eax,0x6
c001d0b7:	01 d0                	add    eax,edx
c001d0b9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d0c0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d0c6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d0cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0d7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0dd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0e4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0eb:	75 0c                	jne    c001d0f9 <ATA::open(int, int, void*)+0x61>
c001d0ed:	83 ec 0c             	sub    esp,0xc
c001d0f0:	53                   	push   ebx
c001d0f1:	e8 78 ff ff ff       	call   c001d06e <ATA::detectCHS()>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d105:	c1 e0 06             	shl    eax,0x6
c001d108:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d10f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d119:	d1 e8                	shr    eax,1
c001d11b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d121:	6a 04                	push   0x4
c001d123:	6a 0c                	push   0xc
c001d125:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d12c:	50                   	push   eax
c001d12d:	52                   	push   edx
c001d12e:	e8 51 ec ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d133:	90                   	nop
c001d134:	90                   	nop
c001d135:	6a 00                	push   0x0
c001d137:	6a 0c                	push   0xc
c001d139:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d140:	50                   	push   eax
c001d141:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d147:	e8 38 ec ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d14c:	83 c4 14             	add    esp,0x14
c001d14f:	53                   	push   ebx
c001d150:	e8 d9 fc fe ff       	call   c000ce2e <PhysicalDisk::startCache()>
c001d155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d158:	e8 15 0f ff ff       	call   c000e072 <createPartitionsForDisk(PhysicalDisk*)>
c001d15d:	31 c0                	xor    eax,eax
c001d15f:	83 c4 18             	add    esp,0x18
c001d162:	5b                   	pop    ebx
c001d163:	c3                   	ret    

c001d164 <combineCharAndColour(char, unsigned char)>:
c001d164:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d169:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d16f:	c1 e0 08             	shl    eax,0x8
c001d172:	09 d0                	or     eax,edx
c001d174:	c3                   	ret    

c001d175 <combineColours(unsigned char, unsigned char)>:
c001d175:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d17a:	c1 e0 04             	shl    eax,0x4
c001d17d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d181:	c3                   	ret    

c001d182 <ATA::read(unsigned long long, int, void*)>:
c001d182:	55                   	push   ebp
c001d183:	57                   	push   edi
c001d184:	56                   	push   esi
c001d185:	be 04 00 00 00       	mov    esi,0x4
c001d18a:	53                   	push   ebx
c001d18b:	83 ec 0c             	sub    esp,0xc
c001d18e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d192:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d196:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d199:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d19d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1a1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d1a7:	0f 87 a1 01 00 00    	ja     c001d34e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1ad:	be 06 00 00 00       	mov    esi,0x6
c001d1b2:	85 c9                	test   ecx,ecx
c001d1b4:	0f 84 94 01 00 00    	je     c001d34e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d1ba:	55                   	push   ebp
c001d1bb:	55                   	push   ebp
c001d1bc:	6a 00                	push   0x0
c001d1be:	51                   	push   ecx
c001d1bf:	53                   	push   ebx
c001d1c0:	52                   	push   edx
c001d1c1:	50                   	push   eax
c001d1c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d1c6:	e8 0d fb ff ff       	call   c001ccd8 <ATA::access(unsigned long long, int, void*, bool)>
c001d1cb:	83 c4 20             	add    esp,0x20
c001d1ce:	89 c6                	mov    esi,eax
c001d1d0:	85 c0                	test   eax,eax
c001d1d2:	0f 85 71 01 00 00    	jne    c001d349 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1d8:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1de:	89 da                	mov    edx,ebx
c001d1e0:	50                   	push   eax
c001d1e1:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1e6:	50                   	push   eax
c001d1e7:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1ed:	6a 0f                	push   0xf
c001d1ef:	6a 00                	push   0x0
c001d1f1:	e8 7f ff ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001d1f6:	59                   	pop    ecx
c001d1f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1fc:	5b                   	pop    ebx
c001d1fd:	0f b6 d8             	movzx  ebx,al
c001d200:	89 d0                	mov    eax,edx
c001d202:	53                   	push   ebx
c001d203:	99                   	cdq    
c001d204:	f7 fd                	idiv   ebp
c001d206:	99                   	cdq    
c001d207:	f7 f9                	idiv   ecx
c001d209:	83 c2 30             	add    edx,0x30
c001d20c:	0f b6 d2             	movzx  edx,dl
c001d20f:	52                   	push   edx
c001d210:	e8 4f ff ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d215:	5f                   	pop    edi
c001d216:	bf e8 03 00 00       	mov    edi,0x3e8
c001d21b:	5a                   	pop    edx
c001d21c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d222:	53                   	push   ebx
c001d223:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d228:	99                   	cdq    
c001d229:	f7 ff                	idiv   edi
c001d22b:	99                   	cdq    
c001d22c:	f7 f9                	idiv   ecx
c001d22e:	8d 42 30             	lea    eax,[edx+0x30]
c001d231:	0f b6 c0             	movzx  eax,al
c001d234:	50                   	push   eax
c001d235:	e8 2a ff ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d23a:	5f                   	pop    edi
c001d23b:	bf 64 00 00 00       	mov    edi,0x64
c001d240:	5a                   	pop    edx
c001d241:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d247:	53                   	push   ebx
c001d248:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d24d:	99                   	cdq    
c001d24e:	f7 ff                	idiv   edi
c001d250:	99                   	cdq    
c001d251:	f7 f9                	idiv   ecx
c001d253:	8d 42 30             	lea    eax,[edx+0x30]
c001d256:	0f b6 c0             	movzx  eax,al
c001d259:	50                   	push   eax
c001d25a:	e8 05 ff ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d25f:	5a                   	pop    edx
c001d260:	5a                   	pop    edx
c001d261:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d267:	53                   	push   ebx
c001d268:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d26d:	99                   	cdq    
c001d26e:	f7 f9                	idiv   ecx
c001d270:	99                   	cdq    
c001d271:	f7 f9                	idiv   ecx
c001d273:	8d 42 30             	lea    eax,[edx+0x30]
c001d276:	0f b6 c0             	movzx  eax,al
c001d279:	50                   	push   eax
c001d27a:	e8 e5 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d27f:	5a                   	pop    edx
c001d280:	5a                   	pop    edx
c001d281:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d287:	53                   	push   ebx
c001d288:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d28d:	99                   	cdq    
c001d28e:	f7 f9                	idiv   ecx
c001d290:	83 c2 30             	add    edx,0x30
c001d293:	0f b6 d2             	movzx  edx,dl
c001d296:	52                   	push   edx
c001d297:	e8 c8 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d29c:	5a                   	pop    edx
c001d29d:	5a                   	pop    edx
c001d29e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d2a4:	53                   	push   ebx
c001d2a5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2aa:	99                   	cdq    
c001d2ab:	f7 fd                	idiv   ebp
c001d2ad:	99                   	cdq    
c001d2ae:	f7 f9                	idiv   ecx
c001d2b0:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b3:	0f b6 c0             	movzx  eax,al
c001d2b6:	50                   	push   eax
c001d2b7:	e8 a8 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d2bc:	5d                   	pop    ebp
c001d2bd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d2c2:	5a                   	pop    edx
c001d2c3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2c9:	53                   	push   ebx
c001d2ca:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2cf:	99                   	cdq    
c001d2d0:	f7 fd                	idiv   ebp
c001d2d2:	99                   	cdq    
c001d2d3:	f7 f9                	idiv   ecx
c001d2d5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d8:	0f b6 c0             	movzx  eax,al
c001d2db:	50                   	push   eax
c001d2dc:	e8 83 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d2e1:	5d                   	pop    ebp
c001d2e2:	5a                   	pop    edx
c001d2e3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2e9:	53                   	push   ebx
c001d2ea:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2ef:	99                   	cdq    
c001d2f0:	f7 ff                	idiv   edi
c001d2f2:	99                   	cdq    
c001d2f3:	f7 f9                	idiv   ecx
c001d2f5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2f8:	0f b6 c0             	movzx  eax,al
c001d2fb:	50                   	push   eax
c001d2fc:	e8 63 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d301:	5f                   	pop    edi
c001d302:	5d                   	pop    ebp
c001d303:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d309:	53                   	push   ebx
c001d30a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d30f:	99                   	cdq    
c001d310:	f7 f9                	idiv   ecx
c001d312:	99                   	cdq    
c001d313:	f7 f9                	idiv   ecx
c001d315:	8d 42 30             	lea    eax,[edx+0x30]
c001d318:	0f b6 c0             	movzx  eax,al
c001d31b:	50                   	push   eax
c001d31c:	e8 43 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d321:	5a                   	pop    edx
c001d322:	5f                   	pop    edi
c001d323:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d329:	53                   	push   ebx
c001d32a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d32f:	99                   	cdq    
c001d330:	f7 f9                	idiv   ecx
c001d332:	83 c2 30             	add    edx,0x30
c001d335:	0f b6 d2             	movzx  edx,dl
c001d338:	52                   	push   edx
c001d339:	e8 26 fe ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d347:	eb 05                	jmp    c001d34e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d349:	be 01 00 00 00       	mov    esi,0x1
c001d34e:	83 c4 0c             	add    esp,0xc
c001d351:	89 f0                	mov    eax,esi
c001d353:	5b                   	pop    ebx
c001d354:	5e                   	pop    esi
c001d355:	5f                   	pop    edi
c001d356:	5d                   	pop    ebp
c001d357:	c3                   	ret    

c001d358 <ATA::write(unsigned long long, int, void*)>:
c001d358:	55                   	push   ebp
c001d359:	57                   	push   edi
c001d35a:	56                   	push   esi
c001d35b:	be 04 00 00 00       	mov    esi,0x4
c001d360:	53                   	push   ebx
c001d361:	83 ec 0c             	sub    esp,0xc
c001d364:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d36c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d36f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d373:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d377:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d37d:	0f 87 9c 01 00 00    	ja     c001d51f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d383:	be 06 00 00 00       	mov    esi,0x6
c001d388:	85 c9                	test   ecx,ecx
c001d38a:	0f 84 8f 01 00 00    	je     c001d51f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d390:	55                   	push   ebp
c001d391:	55                   	push   ebp
c001d392:	6a 01                	push   0x1
c001d394:	51                   	push   ecx
c001d395:	53                   	push   ebx
c001d396:	52                   	push   edx
c001d397:	50                   	push   eax
c001d398:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d39c:	e8 37 f9 ff ff       	call   c001ccd8 <ATA::access(unsigned long long, int, void*, bool)>
c001d3a1:	83 c4 20             	add    esp,0x20
c001d3a4:	89 c6                	mov    esi,eax
c001d3a6:	85 c0                	test   eax,eax
c001d3a8:	0f 85 6c 01 00 00    	jne    c001d51a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d3ae:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d3b4:	bd 10 27 00 00       	mov    ebp,0x2710
c001d3b9:	50                   	push   eax
c001d3ba:	50                   	push   eax
c001d3bb:	6a 0f                	push   0xf
c001d3bd:	6a 00                	push   0x0
c001d3bf:	e8 b1 fd ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001d3c4:	5a                   	pop    edx
c001d3c5:	0f b6 d8             	movzx  ebx,al
c001d3c8:	59                   	pop    ecx
c001d3c9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3ce:	53                   	push   ebx
c001d3cf:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3d4:	99                   	cdq    
c001d3d5:	f7 fd                	idiv   ebp
c001d3d7:	99                   	cdq    
c001d3d8:	f7 f9                	idiv   ecx
c001d3da:	8d 42 30             	lea    eax,[edx+0x30]
c001d3dd:	0f b6 c0             	movzx  eax,al
c001d3e0:	50                   	push   eax
c001d3e1:	e8 7e fd ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d3e6:	5f                   	pop    edi
c001d3e7:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3ec:	5a                   	pop    edx
c001d3ed:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3f3:	53                   	push   ebx
c001d3f4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3f9:	99                   	cdq    
c001d3fa:	f7 ff                	idiv   edi
c001d3fc:	99                   	cdq    
c001d3fd:	f7 f9                	idiv   ecx
c001d3ff:	8d 42 30             	lea    eax,[edx+0x30]
c001d402:	0f b6 c0             	movzx  eax,al
c001d405:	50                   	push   eax
c001d406:	e8 59 fd ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d40b:	5f                   	pop    edi
c001d40c:	bf 64 00 00 00       	mov    edi,0x64
c001d411:	5a                   	pop    edx
c001d412:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d418:	53                   	push   ebx
c001d419:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d41e:	99                   	cdq    
c001d41f:	f7 ff                	idiv   edi
c001d421:	99                   	cdq    
c001d422:	f7 f9                	idiv   ecx
c001d424:	8d 42 30             	lea    eax,[edx+0x30]
c001d427:	0f b6 c0             	movzx  eax,al
c001d42a:	50                   	push   eax
c001d42b:	e8 34 fd ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d430:	5a                   	pop    edx
c001d431:	5a                   	pop    edx
c001d432:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d438:	53                   	push   ebx
c001d439:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d43e:	99                   	cdq    
c001d43f:	f7 f9                	idiv   ecx
c001d441:	99                   	cdq    
c001d442:	f7 f9                	idiv   ecx
c001d444:	8d 42 30             	lea    eax,[edx+0x30]
c001d447:	0f b6 c0             	movzx  eax,al
c001d44a:	50                   	push   eax
c001d44b:	e8 14 fd ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d450:	5a                   	pop    edx
c001d451:	5a                   	pop    edx
c001d452:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d458:	53                   	push   ebx
c001d459:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d45e:	99                   	cdq    
c001d45f:	f7 f9                	idiv   ecx
c001d461:	8d 42 30             	lea    eax,[edx+0x30]
c001d464:	0f b6 c0             	movzx  eax,al
c001d467:	50                   	push   eax
c001d468:	e8 f7 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d46d:	5a                   	pop    edx
c001d46e:	5a                   	pop    edx
c001d46f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d475:	53                   	push   ebx
c001d476:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d47b:	99                   	cdq    
c001d47c:	f7 fd                	idiv   ebp
c001d47e:	99                   	cdq    
c001d47f:	f7 f9                	idiv   ecx
c001d481:	8d 42 30             	lea    eax,[edx+0x30]
c001d484:	0f b6 c0             	movzx  eax,al
c001d487:	50                   	push   eax
c001d488:	e8 d7 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d48d:	5d                   	pop    ebp
c001d48e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d493:	5a                   	pop    edx
c001d494:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d49a:	53                   	push   ebx
c001d49b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4a0:	99                   	cdq    
c001d4a1:	f7 fd                	idiv   ebp
c001d4a3:	99                   	cdq    
c001d4a4:	f7 f9                	idiv   ecx
c001d4a6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a9:	0f b6 c0             	movzx  eax,al
c001d4ac:	50                   	push   eax
c001d4ad:	e8 b2 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d4b2:	5d                   	pop    ebp
c001d4b3:	5a                   	pop    edx
c001d4b4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d4ba:	53                   	push   ebx
c001d4bb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4c0:	99                   	cdq    
c001d4c1:	f7 ff                	idiv   edi
c001d4c3:	99                   	cdq    
c001d4c4:	f7 f9                	idiv   ecx
c001d4c6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c9:	0f b6 c0             	movzx  eax,al
c001d4cc:	50                   	push   eax
c001d4cd:	e8 92 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d4d2:	5f                   	pop    edi
c001d4d3:	5d                   	pop    ebp
c001d4d4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4da:	53                   	push   ebx
c001d4db:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4e0:	99                   	cdq    
c001d4e1:	f7 f9                	idiv   ecx
c001d4e3:	99                   	cdq    
c001d4e4:	f7 f9                	idiv   ecx
c001d4e6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4e9:	0f b6 c0             	movzx  eax,al
c001d4ec:	50                   	push   eax
c001d4ed:	e8 72 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d4f2:	5a                   	pop    edx
c001d4f3:	5f                   	pop    edi
c001d4f4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4fa:	53                   	push   ebx
c001d4fb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d500:	99                   	cdq    
c001d501:	f7 f9                	idiv   ecx
c001d503:	83 c2 30             	add    edx,0x30
c001d506:	0f b6 d2             	movzx  edx,dl
c001d509:	52                   	push   edx
c001d50a:	e8 55 fc ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d518:	eb 05                	jmp    c001d51f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d51a:	be 01 00 00 00       	mov    esi,0x1
c001d51f:	83 c4 0c             	add    esp,0xc
c001d522:	89 f0                	mov    eax,esi
c001d524:	5b                   	pop    ebx
c001d525:	5e                   	pop    esi
c001d526:	5f                   	pop    edi
c001d527:	5d                   	pop    ebp
c001d528:	c3                   	ret    
c001d529:	90                   	nop

c001d52a <ATAPI::write(unsigned long long, int, void*)>:
c001d52a:	b8 03 00 00 00       	mov    eax,0x3
c001d52f:	c3                   	ret    

c001d530 <ATAPI::close(int, int, void*)>:
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d537:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d53d:	85 c0                	test   eax,eax
c001d53f:	74 0c                	je     c001d54d <ATAPI::close(int, int, void*)+0x1d>
c001d541:	83 ec 0c             	sub    esp,0xc
c001d544:	8b 10                	mov    edx,DWORD PTR [eax]
c001d546:	50                   	push   eax
c001d547:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	31 c0                	xor    eax,eax
c001d54f:	83 c4 0c             	add    esp,0xc
c001d552:	c3                   	ret    
c001d553:	90                   	nop

c001d554 <ATAPI::ATAPI()>:
c001d554:	83 ec 0c             	sub    esp,0xc
c001d557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55b:	83 ec 04             	sub    esp,0x4
c001d55e:	68 00 08 00 00       	push   0x800
c001d563:	68 3d 34 02 c0       	push   0xc002343d
c001d568:	50                   	push   eax
c001d569:	e8 58 f8 fe ff       	call   c000cdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d56e:	83 c4 10             	add    esp,0x10
c001d571:	ba 58 33 02 c0       	mov    edx,0xc0023358
c001d576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57a:	89 10                	mov    DWORD PTR [eax],edx
c001d57c:	90                   	nop
c001d57d:	83 c4 0c             	add    esp,0xc
c001d580:	c3                   	ret    
c001d581:	90                   	nop

c001d582 <ATAPI::readyForCommand()>:
c001d582:	56                   	push   esi
c001d583:	53                   	push   ebx
c001d584:	53                   	push   ebx
c001d585:	31 db                	xor    ebx,ebx
c001d587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d58b:	51                   	push   ecx
c001d58c:	6a 0c                	push   0xc
c001d58e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d595:	50                   	push   eax
c001d596:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d59c:	e8 a3 e8 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	a8 88                	test   al,0x88
c001d5a6:	74 25                	je     c001d5cd <ATAPI::readyForCommand()+0x4b>
c001d5a8:	43                   	inc    ebx
c001d5a9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d5af:	7e da                	jle    c001d58b <ATAPI::readyForCommand()+0x9>
c001d5b1:	83 ec 0c             	sub    esp,0xc
c001d5b4:	68 5e 01 00 00       	push   0x15e
c001d5b9:	e8 2a 8e ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d5c7:	75 c2                	jne    c001d58b <ATAPI::readyForCommand()+0x9>
c001d5c9:	31 c0                	xor    eax,eax
c001d5cb:	eb 02                	jmp    c001d5cf <ATAPI::readyForCommand()+0x4d>
c001d5cd:	b0 01                	mov    al,0x1
c001d5cf:	5a                   	pop    edx
c001d5d0:	5b                   	pop    ebx
c001d5d1:	5e                   	pop    esi
c001d5d2:	c3                   	ret    
c001d5d3:	90                   	nop

c001d5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5d4:	55                   	push   ebp
c001d5d5:	57                   	push   edi
c001d5d6:	56                   	push   esi
c001d5d7:	53                   	push   ebx
c001d5d8:	83 ec 20             	sub    esp,0x20
c001d5db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5df:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5e7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d5eb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5ef:	6a 01                	push   0x1
c001d5f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5f8:	50                   	push   eax
c001d5f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ff:	e8 88 e9 ff ff       	call   c001bf8c <IDE::enableIRQs(unsigned char, bool)>
c001d604:	5e                   	pop    esi
c001d605:	58                   	pop    eax
c001d606:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d60d:	50                   	push   eax
c001d60e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d614:	e8 45 e7 ff ff       	call   c001bd5e <IDE::prepareInterrupt(unsigned char)>
c001d619:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d61c:	e8 61 ff ff ff       	call   c001d582 <ATAPI::readyForCommand()>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	84 c0                	test   al,al
c001d626:	75 0a                	jne    c001d632 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d628:	bb 01 00 00 00       	mov    ebx,0x1
c001d62d:	e9 60 02 00 00       	jmp    c001d892 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d632:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d638:	c1 e0 04             	shl    eax,0x4
c001d63b:	0f b6 c0             	movzx  eax,al
c001d63e:	50                   	push   eax
c001d63f:	6a 06                	push   0x6
c001d641:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d648:	50                   	push   eax
c001d649:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d64f:	e8 30 e7 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d654:	6a 00                	push   0x0
c001d656:	6a 01                	push   0x1
c001d658:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d65f:	50                   	push   eax
c001d660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d666:	e8 19 e7 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d66b:	83 c4 20             	add    esp,0x20
c001d66e:	0f b6 c3             	movzx  eax,bl
c001d671:	0f b6 df             	movzx  ebx,bh
c001d674:	50                   	push   eax
c001d675:	6a 04                	push   0x4
c001d677:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d67e:	50                   	push   eax
c001d67f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d685:	e8 fa e6 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68a:	53                   	push   ebx
c001d68b:	6a 05                	push   0x5
c001d68d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d694:	50                   	push   eax
c001d695:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d69b:	e8 e4 e6 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a0:	83 c4 20             	add    esp,0x20
c001d6a3:	68 a0 00 00 00       	push   0xa0
c001d6a8:	6a 07                	push   0x7
c001d6aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b1:	50                   	push   eax
c001d6b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b8:	e8 c7 e6 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6bd:	83 c4 0c             	add    esp,0xc
c001d6c0:	6a 01                	push   0x1
c001d6c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6c9:	50                   	push   eax
c001d6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d0:	e8 97 f1 ff ff       	call   c001c86c <IDE::polling(unsigned char, unsigned int)>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	0f b6 d8             	movzx  ebx,al
c001d6db:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6e1:	85 db                	test   ebx,ebx
c001d6e3:	74 20                	je     c001d705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d6e5:	53                   	push   ebx
c001d6e6:	0f b6 c0             	movzx  eax,al
c001d6e9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6f0:	52                   	push   edx
c001d6f1:	50                   	push   eax
c001d6f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f8:	e8 b5 f0 ff ff       	call   c001c7b2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6fd:	83 c4 10             	add    esp,0x10
c001d700:	e9 8d 01 00 00       	jmp    c001d892 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d705:	0f b6 c0             	movzx  eax,al
c001d708:	53                   	push   ebx
c001d709:	53                   	push   ebx
c001d70a:	50                   	push   eax
c001d70b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d711:	e8 5c e6 ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001d716:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d71a:	b9 06 00 00 00       	mov    ecx,0x6
c001d71f:	89 c2                	mov    edx,eax
c001d721:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d724:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d728:	83 c4 10             	add    esp,0x10
c001d72b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d734:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d73a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d741:	85 db                	test   ebx,ebx
c001d743:	0f 84 ec 00 00 00    	je     c001d835 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d749:	51                   	push   ecx
c001d74a:	51                   	push   ecx
c001d74b:	52                   	push   edx
c001d74c:	50                   	push   eax
c001d74d:	e8 a0 e7 ff ff       	call   c001bef2 <IDE::waitInterrupt(unsigned char)>
c001d752:	83 c4 10             	add    esp,0x10
c001d755:	84 c0                	test   al,al
c001d757:	0f 84 cb fe ff ff    	je     c001d628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d75d:	56                   	push   esi
c001d75e:	56                   	push   esi
c001d75f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d766:	50                   	push   eax
c001d767:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d76d:	e8 ec e5 ff ff       	call   c001bd5e <IDE::prepareInterrupt(unsigned char)>
c001d772:	83 c4 0c             	add    esp,0xc
c001d775:	6a 04                	push   0x4
c001d777:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d77e:	50                   	push   eax
c001d77f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d785:	e8 ba e6 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001d78a:	83 c4 0c             	add    esp,0xc
c001d78d:	89 c6                	mov    esi,eax
c001d78f:	6a 05                	push   0x5
c001d791:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d798:	50                   	push   eax
c001d799:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d79f:	e8 a0 e6 ff ff       	call   c001be44 <IDE::read(unsigned char, unsigned char)>
c001d7a4:	89 f1                	mov    ecx,esi
c001d7a6:	0f b6 c0             	movzx  eax,al
c001d7a9:	0f b6 f1             	movzx  esi,cl
c001d7ac:	c1 e0 08             	shl    eax,0x8
c001d7af:	09 c6                	or     esi,eax
c001d7b1:	d1 fe                	sar    esi,1
c001d7b3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d7bf:	74 41                	je     c001d802 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d7c1:	31 c9                	xor    ecx,ecx
c001d7c3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7c9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7d0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d7d4:	75 0a                	jne    c001d7e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d7d6:	01 c9                	add    ecx,ecx
c001d7d8:	01 cd                	add    ebp,ecx
c001d7da:	4b                   	dec    ebx
c001d7db:	e9 54 ff ff ff       	jmp    c001d734 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d7e0:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d7e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7e9:	51                   	push   ecx
c001d7ea:	51                   	push   ecx
c001d7eb:	52                   	push   edx
c001d7ec:	50                   	push   eax
c001d7ed:	e8 80 e5 ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001d7f2:	89 c2                	mov    edx,eax
c001d7f4:	89 f0                	mov    eax,esi
c001d7f6:	66 ef                	out    dx,ax
c001d7f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7fc:	83 c4 10             	add    esp,0x10
c001d7ff:	41                   	inc    ecx
c001d800:	eb c1                	jmp    c001d7c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d802:	31 f6                	xor    esi,esi
c001d804:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d80a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d811:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d815:	75 06                	jne    c001d81d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d817:	01 f6                	add    esi,esi
c001d819:	01 f5                	add    ebp,esi
c001d81b:	eb bd                	jmp    c001d7da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d81d:	51                   	push   ecx
c001d81e:	51                   	push   ecx
c001d81f:	52                   	push   edx
c001d820:	50                   	push   eax
c001d821:	e8 4c e5 ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001d826:	89 c2                	mov    edx,eax
c001d828:	66 ed                	in     ax,dx
c001d82a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	46                   	inc    esi
c001d833:	eb cf                	jmp    c001d804 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d835:	51                   	push   ecx
c001d836:	51                   	push   ecx
c001d837:	52                   	push   edx
c001d838:	50                   	push   eax
c001d839:	e8 b4 e6 ff ff       	call   c001bef2 <IDE::waitInterrupt(unsigned char)>
c001d83e:	83 c4 10             	add    esp,0x10
c001d841:	84 c0                	test   al,al
c001d843:	0f 84 df fd ff ff    	je     c001d628 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d849:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d84e:	52                   	push   edx
c001d84f:	52                   	push   edx
c001d850:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d857:	50                   	push   eax
c001d858:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d85e:	e8 fb e4 ff ff       	call   c001bd5e <IDE::prepareInterrupt(unsigned char)>
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	50                   	push   eax
c001d867:	50                   	push   eax
c001d868:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d86f:	50                   	push   eax
c001d870:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d876:	e8 f7 e4 ff ff       	call   c001bd72 <IDE::getBase(unsigned char)>
c001d87b:	8d 50 07             	lea    edx,[eax+0x7]
c001d87e:	ec                   	in     al,dx
c001d87f:	83 c4 10             	add    esp,0x10
c001d882:	a8 88                	test   al,0x88
c001d884:	74 0a                	je     c001d890 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d886:	4b                   	dec    ebx
c001d887:	75 dd                	jne    c001d866 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d889:	bb 02 00 00 00       	mov    ebx,0x2
c001d88e:	eb 02                	jmp    c001d892 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d890:	31 db                	xor    ebx,ebx
c001d892:	83 c4 1c             	add    esp,0x1c
c001d895:	89 d8                	mov    eax,ebx
c001d897:	5b                   	pop    ebx
c001d898:	5e                   	pop    esi
c001d899:	5f                   	pop    edi
c001d89a:	5d                   	pop    ebp
c001d89b:	c3                   	ret    

c001d89c <ATAPI::diskRemoved()>:
c001d89c:	53                   	push   ebx
c001d89d:	83 ec 14             	sub    esp,0x14
c001d8a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d8ab:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d8b1:	e8 ac 04 ff ff       	call   c000dd62 <LogicalDisk::unmount()>
c001d8b6:	58                   	pop    eax
c001d8b7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d8bd:	e8 82 0e ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c001d8c2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8cc:	83 c4 18             	add    esp,0x18
c001d8cf:	5b                   	pop    ebx
c001d8d0:	e9 5f 0e ff ff       	jmp    c000e734 <VCache::invalidateReadBuffer()>
c001d8d5:	90                   	nop

c001d8d6 <ATAPI::eject()>:
c001d8d6:	57                   	push   edi
c001d8d7:	b9 03 00 00 00       	mov    ecx,0x3
c001d8dc:	53                   	push   ebx
c001d8dd:	83 ec 14             	sub    esp,0x14
c001d8e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8e8:	fc                   	cld    
c001d8e9:	31 c0                	xor    eax,eax
c001d8eb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8ed:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8f2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8f7:	50                   	push   eax
c001d8f8:	50                   	push   eax
c001d8f9:	6a 00                	push   0x0
c001d8fb:	6a 00                	push   0x0
c001d8fd:	6a 00                	push   0x0
c001d8ff:	6a 02                	push   0x2
c001d901:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d905:	50                   	push   eax
c001d906:	53                   	push   ebx
c001d907:	e8 c8 fc ff ff       	call   c001d5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d90c:	83 c4 14             	add    esp,0x14
c001d90f:	53                   	push   ebx
c001d910:	e8 87 ff ff ff       	call   c001d89c <ATAPI::diskRemoved()>
c001d915:	83 c4 24             	add    esp,0x24
c001d918:	31 c0                	xor    eax,eax
c001d91a:	5b                   	pop    ebx
c001d91b:	5f                   	pop    edi
c001d91c:	c3                   	ret    
c001d91d:	90                   	nop

c001d91e <ATAPI::diskInserted()>:
c001d91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d922:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d929:	c3                   	ret    

c001d92a <ATAPI::detectMedia()>:
c001d92a:	56                   	push   esi
c001d92b:	53                   	push   ebx
c001d92c:	83 ec 28             	sub    esp,0x28
c001d92f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d933:	6a 0c                	push   0xc
c001d935:	6a 00                	push   0x0
c001d937:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d93b:	56                   	push   esi
c001d93c:	e8 af 2b fe ff       	call   c00004f0 <memset>
c001d941:	58                   	pop    eax
c001d942:	5a                   	pop    edx
c001d943:	6a 00                	push   0x0
c001d945:	6a 00                	push   0x0
c001d947:	6a 00                	push   0x0
c001d949:	6a 00                	push   0x0
c001d94b:	56                   	push   esi
c001d94c:	53                   	push   ebx
c001d94d:	e8 82 fc ff ff       	call   c001d5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	6a 0c                	push   0xc
c001d957:	6a 00                	push   0x0
c001d959:	56                   	push   esi
c001d95a:	e8 91 2b fe ff       	call   c00004f0 <memset>
c001d95f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d964:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d969:	59                   	pop    ecx
c001d96a:	58                   	pop    eax
c001d96b:	6a 01                	push   0x1
c001d96d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d971:	50                   	push   eax
c001d972:	6a 00                	push   0x0
c001d974:	6a 12                	push   0x12
c001d976:	56                   	push   esi
c001d977:	53                   	push   ebx
c001d978:	e8 57 fc ff ff       	call   c001d5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d97d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d981:	83 c4 20             	add    esp,0x20
c001d984:	83 e0 7f             	and    eax,0x7f
c001d987:	83 f8 70             	cmp    eax,0x70
c001d98a:	74 15                	je     c001d9a1 <ATAPI::detectMedia()+0x77>
c001d98c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d993:	75 0c                	jne    c001d9a1 <ATAPI::detectMedia()+0x77>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	53                   	push   ebx
c001d999:	e8 80 ff ff ff       	call   c001d91e <ATAPI::diskInserted()>
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d9a5:	83 e0 0f             	and    eax,0xf
c001d9a8:	83 f8 02             	cmp    eax,0x2
c001d9ab:	75 1b                	jne    c001d9c8 <ATAPI::detectMedia()+0x9e>
c001d9ad:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d9b2:	75 2d                	jne    c001d9e1 <ATAPI::detectMedia()+0xb7>
c001d9b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9bb:	74 24                	je     c001d9e1 <ATAPI::detectMedia()+0xb7>
c001d9bd:	83 ec 0c             	sub    esp,0xc
c001d9c0:	53                   	push   ebx
c001d9c1:	e8 d6 fe ff ff       	call   c001d89c <ATAPI::diskRemoved()>
c001d9c6:	eb 16                	jmp    c001d9de <ATAPI::detectMedia()+0xb4>
c001d9c8:	85 c0                	test   eax,eax
c001d9ca:	75 15                	jne    c001d9e1 <ATAPI::detectMedia()+0xb7>
c001d9cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9d3:	75 0c                	jne    c001d9e1 <ATAPI::detectMedia()+0xb7>
c001d9d5:	83 ec 0c             	sub    esp,0xc
c001d9d8:	53                   	push   ebx
c001d9d9:	e8 40 ff ff ff       	call   c001d91e <ATAPI::diskInserted()>
c001d9de:	83 c4 10             	add    esp,0x10
c001d9e1:	83 c4 24             	add    esp,0x24
c001d9e4:	5b                   	pop    ebx
c001d9e5:	5e                   	pop    esi
c001d9e6:	c3                   	ret    
c001d9e7:	90                   	nop

c001d9e8 <ATAPI::open(int, int, void*)>:
c001d9e8:	56                   	push   esi
c001d9e9:	53                   	push   ebx
c001d9ea:	50                   	push   eax
c001d9eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9fd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da03:	c1 e0 06             	shl    eax,0x6
c001da06:	01 d0                	add    eax,edx
c001da08:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001da0f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001da15:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001da1c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da26:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da2c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da33:	6a 04                	push   0x4
c001da35:	6a 0c                	push   0xc
c001da37:	51                   	push   ecx
c001da38:	52                   	push   edx
c001da39:	e8 46 e3 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da3e:	90                   	nop
c001da3f:	90                   	nop
c001da40:	6a 00                	push   0x0
c001da42:	6a 0c                	push   0xc
c001da44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da4b:	50                   	push   eax
c001da4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da52:	e8 2d e3 ff ff       	call   c001bd84 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da57:	83 c4 14             	add    esp,0x14
c001da5a:	68 78 01 00 00       	push   0x178
c001da5f:	e8 52 a0 fe ff       	call   c0007ab6 <malloc>
c001da64:	83 c4 0c             	add    esp,0xc
c001da67:	89 c6                	mov    esi,eax
c001da69:	6a 00                	push   0x0
c001da6b:	68 ff ff ff 7f       	push   0x7fffffff
c001da70:	6a 00                	push   0x0
c001da72:	6a 00                	push   0x0
c001da74:	53                   	push   ebx
c001da75:	68 ef 34 02 c0       	push   0xc00234ef
c001da7a:	50                   	push   eax
c001da7b:	e8 20 01 ff ff       	call   c000dba0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da80:	83 c4 14             	add    esp,0x14
c001da83:	56                   	push   esi
c001da84:	e8 d7 01 ff ff       	call   c000dc60 <LogicalDisk::assignDriveLetter()>
c001da89:	5a                   	pop    edx
c001da8a:	0f be c0             	movsx  eax,al
c001da8d:	59                   	pop    ecx
c001da8e:	50                   	push   eax
c001da8f:	68 40 33 02 c0       	push   0xc0023340
c001da94:	e8 ac ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da99:	58                   	pop    eax
c001da9a:	5a                   	pop    edx
c001da9b:	56                   	push   esi
c001da9c:	53                   	push   ebx
c001da9d:	e8 58 ef fe ff       	call   c000c9fa <Device::addChild(Device*)>
c001daa2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001daa8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daab:	e8 7e f3 fe ff       	call   c000ce2e <PhysicalDisk::startCache()>
c001dab0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daba:	e8 6b fe ff ff       	call   c001d92a <ATAPI::detectMedia()>
c001dabf:	83 c4 14             	add    esp,0x14
c001dac2:	31 c0                	xor    eax,eax
c001dac4:	5b                   	pop    ebx
c001dac5:	5e                   	pop    esi
c001dac6:	c3                   	ret    
c001dac7:	90                   	nop

c001dac8 <ATAPI::read(unsigned long long, int, void*)>:
c001dac8:	55                   	push   ebp
c001dac9:	57                   	push   edi
c001daca:	56                   	push   esi
c001dacb:	53                   	push   ebx
c001dacc:	83 ec 1c             	sub    esp,0x1c
c001dacf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dad3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dad7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dadb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dae2:	74 3c                	je     c001db20 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dae4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dae8:	b9 03 00 00 00       	mov    ecx,0x3
c001daed:	fc                   	cld    
c001daee:	31 c0                	xor    eax,eax
c001daf0:	0f ce                	bswap  esi
c001daf2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001daf4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001daf9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dafd:	89 e8                	mov    eax,ebp
c001daff:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001db03:	50                   	push   eax
c001db04:	50                   	push   eax
c001db05:	55                   	push   ebp
c001db06:	c1 e5 0b             	shl    ebp,0xb
c001db09:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db0d:	6a 00                	push   0x0
c001db0f:	55                   	push   ebp
c001db10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001db14:	50                   	push   eax
c001db15:	53                   	push   ebx
c001db16:	e8 b9 fa ff ff       	call   c001d5d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001db1b:	83 c4 20             	add    esp,0x20
c001db1e:	eb 1a                	jmp    c001db3a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001db20:	83 ec 0c             	sub    esp,0xc
c001db23:	53                   	push   ebx
c001db24:	e8 01 fe ff ff       	call   c001d92a <ATAPI::detectMedia()>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db33:	75 af                	jne    c001dae4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db35:	b8 02 00 00 00       	mov    eax,0x2
c001db3a:	83 c4 1c             	add    esp,0x1c
c001db3d:	5b                   	pop    ebx
c001db3e:	5e                   	pop    esi
c001db3f:	5f                   	pop    edi
c001db40:	5d                   	pop    ebp
c001db41:	c3                   	ret    

c001db42 <SATA::close(int, int, void*)>:
c001db42:	83 ec 0c             	sub    esp,0xc
c001db45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db4f:	85 c0                	test   eax,eax
c001db51:	74 0c                	je     c001db5f <SATA::close(int, int, void*)+0x1d>
c001db53:	83 ec 0c             	sub    esp,0xc
c001db56:	8b 10                	mov    edx,DWORD PTR [eax]
c001db58:	50                   	push   eax
c001db59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db5c:	83 c4 10             	add    esp,0x10
c001db5f:	31 c0                	xor    eax,eax
c001db61:	83 c4 0c             	add    esp,0xc
c001db64:	c3                   	ret    
c001db65:	90                   	nop

c001db66 <SATA::powerSaving(PowerSavingLevel)>:
c001db66:	c3                   	ret    
c001db67:	90                   	nop

c001db68 <SATA::open(int, int, void*)>:
c001db68:	56                   	push   esi
c001db69:	53                   	push   ebx
c001db6a:	50                   	push   eax
c001db6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db73:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db7d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db83:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db91:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dba1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dba8:	e8 12 a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dbad:	89 c6                	mov    esi,eax
c001dbaf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dbb5:	81 c6 00 10 00 00    	add    esi,0x1000
c001dbbb:	e8 ff a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dbc0:	39 c6                	cmp    esi,eax
c001dbc2:	74 10                	je     c001dbd4 <SATA::open(int, int, void*)+0x6c>
c001dbc4:	83 ec 0c             	sub    esp,0xc
c001dbc7:	68 88 33 02 c0       	push   0xc0023388
c001dbcc:	e8 82 3a ff ff       	call   c0011653 <KePanic(char const*)>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	83 ec 0c             	sub    esp,0xc
c001dbd7:	6a 02                	push   0x2
c001dbd9:	e8 2f ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dbde:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbe4:	6a 03                	push   0x3
c001dbe6:	50                   	push   eax
c001dbe7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbed:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbf3:	e8 28 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbf8:	83 c4 14             	add    esp,0x14
c001dbfb:	53                   	push   ebx
c001dbfc:	e8 2d f2 fe ff       	call   c000ce2e <PhysicalDisk::startCache()>
c001dc01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc04:	e8 69 04 ff ff       	call   c000e072 <createPartitionsForDisk(PhysicalDisk*)>
c001dc09:	83 c4 14             	add    esp,0x14
c001dc0c:	31 c0                	xor    eax,eax
c001dc0e:	5b                   	pop    ebx
c001dc0f:	5e                   	pop    esi
c001dc10:	c3                   	ret    
c001dc11:	90                   	nop

c001dc12 <SATA::SATA()>:
c001dc12:	83 ec 0c             	sub    esp,0xc
c001dc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc19:	83 ec 04             	sub    esp,0x4
c001dc1c:	68 00 02 00 00       	push   0x200
c001dc21:	68 9c 33 02 c0       	push   0xc002339c
c001dc26:	50                   	push   eax
c001dc27:	e8 9a f1 fe ff       	call   c000cdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc2c:	83 c4 10             	add    esp,0x10
c001dc2f:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c001dc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc38:	89 10                	mov    DWORD PTR [eax],edx
c001dc3a:	90                   	nop
c001dc3b:	83 c4 0c             	add    esp,0xc
c001dc3e:	c3                   	ret    
c001dc3f:	90                   	nop

c001dc40 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc40:	55                   	push   ebp
c001dc41:	57                   	push   edi
c001dc42:	56                   	push   esi
c001dc43:	53                   	push   ebx
c001dc44:	83 ec 2c             	sub    esp,0x2c
c001dc47:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc4b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc53:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc57:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc5b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc64:	7e 10                	jle    c001dc76 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dc66:	83 ec 0c             	sub    esp,0xc
c001dc69:	68 ac 33 02 c0       	push   0xc00233ac
c001dc6e:	e8 e0 39 ff ff       	call   c0011653 <KePanic(char const*)>
c001dc73:	83 c4 10             	add    esp,0x10
c001dc76:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc7c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc8c:	89 d0                	mov    eax,edx
c001dc8e:	c1 e0 07             	shl    eax,0x7
c001dc91:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc95:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc9f:	51                   	push   ecx
c001dca0:	8d 42 02             	lea    eax,[edx+0x2]
c001dca3:	51                   	push   ecx
c001dca4:	c1 e0 07             	shl    eax,0x7
c001dca7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dcaf:	50                   	push   eax
c001dcb0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dcb6:	e8 91 ec ff ff       	call   c001c94c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dcbf:	83 c4 10             	add    esp,0x10
c001dcc2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dcc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dccb:	0f 84 57 01 00 00    	je     c001de28 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dcd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dcd5:	c1 e0 09             	shl    eax,0x9
c001dcd8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dcdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dce1:	74 0e                	je     c001dcf1 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dce3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dce9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dced:	89 c1                	mov    ecx,eax
c001dcef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcf1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcf7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcfb:	8d 42 02             	lea    eax,[edx+0x2]
c001dcfe:	c1 e0 07             	shl    eax,0x7
c001dd01:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd05:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd07:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dd0d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dd13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd17:	c1 e1 05             	shl    ecx,0x5
c001dd1a:	01 c8                	add    eax,ecx
c001dd1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd20:	83 e1 01             	and    ecx,0x1
c001dd23:	89 ce                	mov    esi,ecx
c001dd25:	8a 08                	mov    cl,BYTE PTR [eax]
c001dd27:	c1 e6 06             	shl    esi,0x6
c001dd2a:	83 e1 bf             	and    ecx,0xffffffbf
c001dd2d:	09 f1                	or     ecx,esi
c001dd2f:	88 08                	mov    BYTE PTR [eax],cl
c001dd31:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd33:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd39:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd3f:	89 08                	mov    DWORD PTR [eax],ecx
c001dd41:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd47:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd4d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd53:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd56:	50                   	push   eax
c001dd57:	68 90 00 00 00       	push   0x90
c001dd5c:	6a 00                	push   0x0
c001dd5e:	56                   	push   esi
c001dd5f:	e8 8c 27 fe ff       	call   c00004f0 <memset>
c001dd64:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd6a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd74:	83 c4 10             	add    esp,0x10
c001dd77:	48                   	dec    eax
c001dd78:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd7d:	89 c1                	mov    ecx,eax
c001dd7f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd85:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd8a:	09 c8                	or     eax,ecx
c001dd8c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd92:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd98:	83 c8 80             	or     eax,0xffffff80
c001dd9b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dda1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dda4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dda8:	25 00 7f 00 00       	and    eax,0x7f00
c001ddad:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ddb2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ddb7:	66 89 06             	mov    WORD PTR [esi],ax
c001ddba:	b0 35                	mov    al,0x35
c001ddbc:	75 02                	jne    c001ddc0 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001ddbe:	b0 25                	mov    al,0x25
c001ddc0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ddc3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ddc7:	89 e8                	mov    eax,ebp
c001ddc9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ddcd:	c1 e8 10             	shr    eax,0x10
c001ddd0:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ddd3:	89 e8                	mov    eax,ebp
c001ddd5:	c1 e8 18             	shr    eax,0x18
c001ddd8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dddb:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dddf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dde2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dde6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dde9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dded:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddf1:	89 d6                	mov    esi,edx
c001ddf3:	31 c0                	xor    eax,eax
c001ddf5:	c1 e6 07             	shl    esi,0x7
c001ddf8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ddfc:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001de02:	80 e1 88             	and    cl,0x88
c001de05:	74 0a                	je     c001de11 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001de07:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de0c:	74 0a                	je     c001de18 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001de0e:	40                   	inc    eax
c001de0f:	eb eb                	jmp    c001ddfc <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001de11:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001de16:	75 17                	jne    c001de2f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001de18:	83 ec 0c             	sub    esp,0xc
c001de1b:	68 e5 33 02 c0       	push   0xc00233e5
c001de20:	e8 20 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	b8 01 00 00 00       	mov    eax,0x1
c001de2d:	eb 5d                	jmp    c001de8c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de2f:	b8 01 00 00 00       	mov    eax,0x1
c001de34:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de38:	c1 e2 07             	shl    edx,0x7
c001de3b:	d3 e0                	shl    eax,cl
c001de3d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de41:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de47:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de4d:	85 c8                	test   eax,ecx
c001de4f:	74 16                	je     c001de67 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de51:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de57:	0f ba e1 1e          	bt     ecx,0x1e
c001de5b:	73 ea                	jae    c001de47 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001de5d:	83 ec 0c             	sub    esp,0xc
c001de60:	68 f3 33 02 c0       	push   0xc00233f3
c001de65:	eb b9                	jmp    c001de20 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de67:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de6d:	0f ba e0 1e          	bt     eax,0x1e
c001de71:	72 b5                	jb     c001de28 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de73:	31 c0                	xor    eax,eax
c001de75:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de7a:	75 10                	jne    c001de8c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de7c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de82:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de8c:	83 c4 2c             	add    esp,0x2c
c001de8f:	5b                   	pop    ebx
c001de90:	5e                   	pop    esi
c001de91:	5f                   	pop    edi
c001de92:	5d                   	pop    ebp
c001de93:	c3                   	ret    

c001de94 <SATA::read(unsigned long long, int, void*)>:
c001de94:	55                   	push   ebp
c001de95:	57                   	push   edi
c001de96:	56                   	push   esi
c001de97:	be 04 00 00 00       	mov    esi,0x4
c001de9c:	53                   	push   ebx
c001de9d:	83 ec 0c             	sub    esp,0xc
c001dea0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dea8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001deab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001deaf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001deb3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001deb9:	0f 87 1a 02 00 00    	ja     c001e0d9 <SATA::read(unsigned long long, int, void*)+0x245>
c001debf:	be 06 00 00 00       	mov    esi,0x6
c001dec4:	85 c9                	test   ecx,ecx
c001dec6:	0f 84 0d 02 00 00    	je     c001e0d9 <SATA::read(unsigned long long, int, void*)+0x245>
c001decc:	56                   	push   esi
c001decd:	56                   	push   esi
c001dece:	6a 00                	push   0x0
c001ded0:	51                   	push   ecx
c001ded1:	53                   	push   ebx
c001ded2:	52                   	push   edx
c001ded3:	50                   	push   eax
c001ded4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ded8:	e8 63 fd ff ff       	call   c001dc40 <SATA::access(unsigned long long, int, void*, bool)>
c001dedd:	83 c4 20             	add    esp,0x20
c001dee0:	89 c6                	mov    esi,eax
c001dee2:	85 c0                	test   eax,eax
c001dee4:	0f 85 ea 01 00 00    	jne    c001e0d4 <SATA::read(unsigned long long, int, void*)+0x240>
c001deea:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001def0:	bb 0a 00 00 00       	mov    ebx,0xa
c001def5:	50                   	push   eax
c001def6:	50                   	push   eax
c001def7:	6a 0f                	push   0xf
c001def9:	6a 00                	push   0x0
c001defb:	e8 75 f2 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001df00:	5a                   	pop    edx
c001df01:	0f b6 c0             	movzx  eax,al
c001df04:	59                   	pop    ecx
c001df05:	b9 10 27 00 00       	mov    ecx,0x2710
c001df0a:	50                   	push   eax
c001df0b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df10:	99                   	cdq    
c001df11:	f7 f9                	idiv   ecx
c001df13:	99                   	cdq    
c001df14:	f7 fb                	idiv   ebx
c001df16:	8d 42 30             	lea    eax,[edx+0x30]
c001df19:	0f b6 c0             	movzx  eax,al
c001df1c:	50                   	push   eax
c001df1d:	e8 42 f2 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001df22:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df28:	5f                   	pop    edi
c001df29:	5d                   	pop    ebp
c001df2a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df2f:	6a 0f                	push   0xf
c001df31:	6a 00                	push   0x0
c001df33:	e8 3d f2 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001df38:	5a                   	pop    edx
c001df39:	0f b6 c0             	movzx  eax,al
c001df3c:	59                   	pop    ecx
c001df3d:	50                   	push   eax
c001df3e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df43:	99                   	cdq    
c001df44:	f7 fd                	idiv   ebp
c001df46:	99                   	cdq    
c001df47:	f7 fb                	idiv   ebx
c001df49:	8d 42 30             	lea    eax,[edx+0x30]
c001df4c:	0f b6 c0             	movzx  eax,al
c001df4f:	50                   	push   eax
c001df50:	e8 0f f2 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001df55:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df5b:	5f                   	pop    edi
c001df5c:	bf 64 00 00 00       	mov    edi,0x64
c001df61:	58                   	pop    eax
c001df62:	6a 0f                	push   0xf
c001df64:	6a 00                	push   0x0
c001df66:	e8 0a f2 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001df6b:	5a                   	pop    edx
c001df6c:	0f b6 c0             	movzx  eax,al
c001df6f:	59                   	pop    ecx
c001df70:	50                   	push   eax
c001df71:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df76:	99                   	cdq    
c001df77:	f7 ff                	idiv   edi
c001df79:	99                   	cdq    
c001df7a:	f7 fb                	idiv   ebx
c001df7c:	8d 42 30             	lea    eax,[edx+0x30]
c001df7f:	0f b6 c0             	movzx  eax,al
c001df82:	50                   	push   eax
c001df83:	e8 dc f1 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001df88:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df8e:	58                   	pop    eax
c001df8f:	5a                   	pop    edx
c001df90:	6a 0f                	push   0xf
c001df92:	6a 00                	push   0x0
c001df94:	e8 dc f1 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001df99:	59                   	pop    ecx
c001df9a:	0f b6 c0             	movzx  eax,al
c001df9d:	5a                   	pop    edx
c001df9e:	50                   	push   eax
c001df9f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfa4:	99                   	cdq    
c001dfa5:	f7 fb                	idiv   ebx
c001dfa7:	99                   	cdq    
c001dfa8:	f7 fb                	idiv   ebx
c001dfaa:	8d 42 30             	lea    eax,[edx+0x30]
c001dfad:	0f b6 c0             	movzx  eax,al
c001dfb0:	50                   	push   eax
c001dfb1:	e8 ae f1 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001dfb6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dfbc:	59                   	pop    ecx
c001dfbd:	58                   	pop    eax
c001dfbe:	6a 0f                	push   0xf
c001dfc0:	6a 00                	push   0x0
c001dfc2:	e8 ae f1 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001dfc7:	5a                   	pop    edx
c001dfc8:	0f b6 c0             	movzx  eax,al
c001dfcb:	59                   	pop    ecx
c001dfcc:	50                   	push   eax
c001dfcd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfd2:	99                   	cdq    
c001dfd3:	f7 fb                	idiv   ebx
c001dfd5:	8d 42 30             	lea    eax,[edx+0x30]
c001dfd8:	0f b6 c0             	movzx  eax,al
c001dfdb:	50                   	push   eax
c001dfdc:	e8 83 f1 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001dfe1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfe7:	58                   	pop    eax
c001dfe8:	5a                   	pop    edx
c001dfe9:	6a 0f                	push   0xf
c001dfeb:	6a 00                	push   0x0
c001dfed:	e8 83 f1 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001dff2:	59                   	pop    ecx
c001dff3:	0f b6 c0             	movzx  eax,al
c001dff6:	5a                   	pop    edx
c001dff7:	b9 10 27 00 00       	mov    ecx,0x2710
c001dffc:	50                   	push   eax
c001dffd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e002:	99                   	cdq    
c001e003:	f7 f9                	idiv   ecx
c001e005:	99                   	cdq    
c001e006:	f7 fb                	idiv   ebx
c001e008:	8d 42 30             	lea    eax,[edx+0x30]
c001e00b:	0f b6 c0             	movzx  eax,al
c001e00e:	50                   	push   eax
c001e00f:	e8 50 f1 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e014:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e01a:	59                   	pop    ecx
c001e01b:	58                   	pop    eax
c001e01c:	6a 0f                	push   0xf
c001e01e:	6a 00                	push   0x0
c001e020:	e8 50 f1 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e025:	5a                   	pop    edx
c001e026:	0f b6 c0             	movzx  eax,al
c001e029:	59                   	pop    ecx
c001e02a:	50                   	push   eax
c001e02b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e030:	99                   	cdq    
c001e031:	f7 fd                	idiv   ebp
c001e033:	99                   	cdq    
c001e034:	f7 fb                	idiv   ebx
c001e036:	8d 42 30             	lea    eax,[edx+0x30]
c001e039:	0f b6 c0             	movzx  eax,al
c001e03c:	50                   	push   eax
c001e03d:	e8 22 f1 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e042:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e048:	5d                   	pop    ebp
c001e049:	58                   	pop    eax
c001e04a:	6a 0f                	push   0xf
c001e04c:	6a 00                	push   0x0
c001e04e:	e8 22 f1 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e053:	5a                   	pop    edx
c001e054:	0f b6 c0             	movzx  eax,al
c001e057:	59                   	pop    ecx
c001e058:	50                   	push   eax
c001e059:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e05e:	99                   	cdq    
c001e05f:	f7 ff                	idiv   edi
c001e061:	99                   	cdq    
c001e062:	f7 fb                	idiv   ebx
c001e064:	8d 42 30             	lea    eax,[edx+0x30]
c001e067:	0f b6 c0             	movzx  eax,al
c001e06a:	50                   	push   eax
c001e06b:	e8 f4 f0 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e070:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e076:	5f                   	pop    edi
c001e077:	5d                   	pop    ebp
c001e078:	6a 0f                	push   0xf
c001e07a:	6a 00                	push   0x0
c001e07c:	e8 f4 f0 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e081:	5a                   	pop    edx
c001e082:	0f b6 c0             	movzx  eax,al
c001e085:	59                   	pop    ecx
c001e086:	50                   	push   eax
c001e087:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e08c:	99                   	cdq    
c001e08d:	f7 fb                	idiv   ebx
c001e08f:	99                   	cdq    
c001e090:	f7 fb                	idiv   ebx
c001e092:	8d 42 30             	lea    eax,[edx+0x30]
c001e095:	0f b6 c0             	movzx  eax,al
c001e098:	50                   	push   eax
c001e099:	e8 c6 f0 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e09e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e0a4:	5f                   	pop    edi
c001e0a5:	5d                   	pop    ebp
c001e0a6:	6a 0f                	push   0xf
c001e0a8:	6a 00                	push   0x0
c001e0aa:	e8 c6 f0 ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e0af:	5a                   	pop    edx
c001e0b0:	0f b6 c0             	movzx  eax,al
c001e0b3:	59                   	pop    ecx
c001e0b4:	50                   	push   eax
c001e0b5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0ba:	99                   	cdq    
c001e0bb:	f7 fb                	idiv   ebx
c001e0bd:	83 c2 30             	add    edx,0x30
c001e0c0:	0f b6 d2             	movzx  edx,dl
c001e0c3:	52                   	push   edx
c001e0c4:	e8 9b f0 ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e0c9:	83 c4 10             	add    esp,0x10
c001e0cc:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0d2:	eb 05                	jmp    c001e0d9 <SATA::read(unsigned long long, int, void*)+0x245>
c001e0d4:	be 01 00 00 00       	mov    esi,0x1
c001e0d9:	83 c4 0c             	add    esp,0xc
c001e0dc:	89 f0                	mov    eax,esi
c001e0de:	5b                   	pop    ebx
c001e0df:	5e                   	pop    esi
c001e0e0:	5f                   	pop    edi
c001e0e1:	5d                   	pop    ebp
c001e0e2:	c3                   	ret    
c001e0e3:	90                   	nop

c001e0e4 <SATA::write(unsigned long long, int, void*)>:
c001e0e4:	55                   	push   ebp
c001e0e5:	b8 04 00 00 00       	mov    eax,0x4
c001e0ea:	57                   	push   edi
c001e0eb:	56                   	push   esi
c001e0ec:	53                   	push   ebx
c001e0ed:	83 ec 1c             	sub    esp,0x1c
c001e0f0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e0f4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0f8:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e0fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e0ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e103:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e109:	0f 87 32 02 00 00    	ja     c001e341 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e10f:	b8 06 00 00 00       	mov    eax,0x6
c001e114:	85 ff                	test   edi,edi
c001e116:	0f 84 25 02 00 00    	je     c001e341 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e11c:	89 ee                	mov    esi,ebp
c001e11e:	c1 e6 09             	shl    esi,0x9
c001e121:	01 fe                	add    esi,edi
c001e123:	89 c8                	mov    eax,ecx
c001e125:	89 da                	mov    edx,ebx
c001e127:	83 c0 01             	add    eax,0x1
c001e12a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e12e:	83 d2 00             	adc    edx,0x0
c001e131:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e135:	50                   	push   eax
c001e136:	50                   	push   eax
c001e137:	6a 01                	push   0x1
c001e139:	57                   	push   edi
c001e13a:	81 c7 00 02 00 00    	add    edi,0x200
c001e140:	6a 01                	push   0x1
c001e142:	53                   	push   ebx
c001e143:	51                   	push   ecx
c001e144:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e148:	e8 f3 fa ff ff       	call   c001dc40 <SATA::access(unsigned long long, int, void*, bool)>
c001e14d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e151:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e155:	83 c4 20             	add    esp,0x20
c001e158:	39 f7                	cmp    edi,esi
c001e15a:	75 c7                	jne    c001e123 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e15c:	bb 0a 00 00 00       	mov    ebx,0xa
c001e161:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e167:	bd 10 27 00 00       	mov    ebp,0x2710
c001e16c:	50                   	push   eax
c001e16d:	50                   	push   eax
c001e16e:	6a 0f                	push   0xf
c001e170:	6a 00                	push   0x0
c001e172:	e8 fe ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e177:	5a                   	pop    edx
c001e178:	0f b6 c0             	movzx  eax,al
c001e17b:	59                   	pop    ecx
c001e17c:	50                   	push   eax
c001e17d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e182:	99                   	cdq    
c001e183:	f7 fd                	idiv   ebp
c001e185:	99                   	cdq    
c001e186:	f7 fb                	idiv   ebx
c001e188:	8d 42 30             	lea    eax,[edx+0x30]
c001e18b:	0f b6 c0             	movzx  eax,al
c001e18e:	50                   	push   eax
c001e18f:	e8 d0 ef ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e194:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e19a:	5e                   	pop    esi
c001e19b:	5f                   	pop    edi
c001e19c:	bf e8 03 00 00       	mov    edi,0x3e8
c001e1a1:	6a 0f                	push   0xf
c001e1a3:	6a 00                	push   0x0
c001e1a5:	e8 cb ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e1aa:	5a                   	pop    edx
c001e1ab:	0f b6 c0             	movzx  eax,al
c001e1ae:	59                   	pop    ecx
c001e1af:	50                   	push   eax
c001e1b0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b5:	99                   	cdq    
c001e1b6:	f7 ff                	idiv   edi
c001e1b8:	99                   	cdq    
c001e1b9:	f7 fb                	idiv   ebx
c001e1bb:	8d 42 30             	lea    eax,[edx+0x30]
c001e1be:	0f b6 c0             	movzx  eax,al
c001e1c1:	50                   	push   eax
c001e1c2:	e8 9d ef ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e1c7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1cd:	5e                   	pop    esi
c001e1ce:	be 64 00 00 00       	mov    esi,0x64
c001e1d3:	58                   	pop    eax
c001e1d4:	6a 0f                	push   0xf
c001e1d6:	6a 00                	push   0x0
c001e1d8:	e8 98 ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e1dd:	5a                   	pop    edx
c001e1de:	0f b6 c0             	movzx  eax,al
c001e1e1:	59                   	pop    ecx
c001e1e2:	50                   	push   eax
c001e1e3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1e8:	99                   	cdq    
c001e1e9:	f7 fe                	idiv   esi
c001e1eb:	99                   	cdq    
c001e1ec:	f7 fb                	idiv   ebx
c001e1ee:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f1:	0f b6 c0             	movzx  eax,al
c001e1f4:	50                   	push   eax
c001e1f5:	e8 6a ef ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e1fa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e200:	58                   	pop    eax
c001e201:	5a                   	pop    edx
c001e202:	6a 0f                	push   0xf
c001e204:	6a 00                	push   0x0
c001e206:	e8 6a ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e20b:	59                   	pop    ecx
c001e20c:	0f b6 c0             	movzx  eax,al
c001e20f:	5a                   	pop    edx
c001e210:	50                   	push   eax
c001e211:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e216:	99                   	cdq    
c001e217:	f7 fb                	idiv   ebx
c001e219:	99                   	cdq    
c001e21a:	f7 fb                	idiv   ebx
c001e21c:	8d 42 30             	lea    eax,[edx+0x30]
c001e21f:	0f b6 c0             	movzx  eax,al
c001e222:	50                   	push   eax
c001e223:	e8 3c ef ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e228:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e22e:	59                   	pop    ecx
c001e22f:	58                   	pop    eax
c001e230:	6a 0f                	push   0xf
c001e232:	6a 00                	push   0x0
c001e234:	e8 3c ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e239:	5a                   	pop    edx
c001e23a:	0f b6 c0             	movzx  eax,al
c001e23d:	59                   	pop    ecx
c001e23e:	50                   	push   eax
c001e23f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e244:	99                   	cdq    
c001e245:	f7 fb                	idiv   ebx
c001e247:	83 c2 30             	add    edx,0x30
c001e24a:	0f b6 d2             	movzx  edx,dl
c001e24d:	52                   	push   edx
c001e24e:	e8 11 ef ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e253:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e259:	58                   	pop    eax
c001e25a:	5a                   	pop    edx
c001e25b:	6a 0f                	push   0xf
c001e25d:	6a 00                	push   0x0
c001e25f:	e8 11 ef ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e264:	59                   	pop    ecx
c001e265:	0f b6 c0             	movzx  eax,al
c001e268:	5a                   	pop    edx
c001e269:	50                   	push   eax
c001e26a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e26f:	99                   	cdq    
c001e270:	f7 fd                	idiv   ebp
c001e272:	99                   	cdq    
c001e273:	f7 fb                	idiv   ebx
c001e275:	8d 42 30             	lea    eax,[edx+0x30]
c001e278:	0f b6 c0             	movzx  eax,al
c001e27b:	50                   	push   eax
c001e27c:	e8 e3 ee ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e281:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e287:	59                   	pop    ecx
c001e288:	5d                   	pop    ebp
c001e289:	6a 0f                	push   0xf
c001e28b:	6a 00                	push   0x0
c001e28d:	e8 e3 ee ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e292:	5a                   	pop    edx
c001e293:	0f b6 c0             	movzx  eax,al
c001e296:	59                   	pop    ecx
c001e297:	50                   	push   eax
c001e298:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e29d:	99                   	cdq    
c001e29e:	f7 ff                	idiv   edi
c001e2a0:	99                   	cdq    
c001e2a1:	f7 fb                	idiv   ebx
c001e2a3:	8d 42 30             	lea    eax,[edx+0x30]
c001e2a6:	0f b6 c0             	movzx  eax,al
c001e2a9:	50                   	push   eax
c001e2aa:	e8 b5 ee ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e2af:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e2b5:	5f                   	pop    edi
c001e2b6:	5d                   	pop    ebp
c001e2b7:	6a 0f                	push   0xf
c001e2b9:	6a 00                	push   0x0
c001e2bb:	e8 b5 ee ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e2c0:	5a                   	pop    edx
c001e2c1:	0f b6 c0             	movzx  eax,al
c001e2c4:	59                   	pop    ecx
c001e2c5:	50                   	push   eax
c001e2c6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2cb:	99                   	cdq    
c001e2cc:	f7 fe                	idiv   esi
c001e2ce:	99                   	cdq    
c001e2cf:	f7 fb                	idiv   ebx
c001e2d1:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d4:	0f b6 c0             	movzx  eax,al
c001e2d7:	50                   	push   eax
c001e2d8:	e8 87 ee ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e2dd:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2e3:	5e                   	pop    esi
c001e2e4:	5f                   	pop    edi
c001e2e5:	6a 0f                	push   0xf
c001e2e7:	6a 00                	push   0x0
c001e2e9:	e8 87 ee ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e2ee:	5d                   	pop    ebp
c001e2ef:	0f b6 c0             	movzx  eax,al
c001e2f2:	5a                   	pop    edx
c001e2f3:	50                   	push   eax
c001e2f4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2f9:	99                   	cdq    
c001e2fa:	f7 fb                	idiv   ebx
c001e2fc:	99                   	cdq    
c001e2fd:	f7 fb                	idiv   ebx
c001e2ff:	8d 42 30             	lea    eax,[edx+0x30]
c001e302:	0f b6 c0             	movzx  eax,al
c001e305:	50                   	push   eax
c001e306:	e8 59 ee ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e30b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e311:	59                   	pop    ecx
c001e312:	5e                   	pop    esi
c001e313:	6a 0f                	push   0xf
c001e315:	6a 00                	push   0x0
c001e317:	e8 59 ee ff ff       	call   c001d175 <combineColours(unsigned char, unsigned char)>
c001e31c:	5f                   	pop    edi
c001e31d:	0f b6 c0             	movzx  eax,al
c001e320:	5d                   	pop    ebp
c001e321:	50                   	push   eax
c001e322:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e327:	99                   	cdq    
c001e328:	f7 fb                	idiv   ebx
c001e32a:	83 c2 30             	add    edx,0x30
c001e32d:	0f b6 d2             	movzx  edx,dl
c001e330:	52                   	push   edx
c001e331:	e8 2e ee ff ff       	call   c001d164 <combineCharAndColour(char, unsigned char)>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e33f:	31 c0                	xor    eax,eax
c001e341:	83 c4 1c             	add    esp,0x1c
c001e344:	5b                   	pop    ebx
c001e345:	5e                   	pop    esi
c001e346:	5f                   	pop    edi
c001e347:	5d                   	pop    ebp
c001e348:	c3                   	ret    
c001e349:	90                   	nop

c001e34a <SATAPI::write(unsigned long long, int, void*)>:
c001e34a:	b8 03 00 00 00       	mov    eax,0x3
c001e34f:	c3                   	ret    

c001e350 <SATAPI::close(int, int, void*)>:
c001e350:	83 ec 0c             	sub    esp,0xc
c001e353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e357:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e35d:	85 c0                	test   eax,eax
c001e35f:	74 0c                	je     c001e36d <SATAPI::close(int, int, void*)+0x1d>
c001e361:	83 ec 0c             	sub    esp,0xc
c001e364:	8b 10                	mov    edx,DWORD PTR [eax]
c001e366:	50                   	push   eax
c001e367:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e36a:	83 c4 10             	add    esp,0x10
c001e36d:	31 c0                	xor    eax,eax
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	c3                   	ret    
c001e373:	90                   	nop

c001e374 <SATAPI::SATAPI()>:
c001e374:	83 ec 0c             	sub    esp,0xc
c001e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37b:	83 ec 04             	sub    esp,0x4
c001e37e:	68 00 08 00 00       	push   0x800
c001e383:	68 3c 34 02 c0       	push   0xc002343c
c001e388:	50                   	push   eax
c001e389:	e8 38 ea fe ff       	call   c000cdc6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	ba 30 35 02 c0       	mov    edx,0xc0023530
c001e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39a:	89 10                	mov    DWORD PTR [eax],edx
c001e39c:	90                   	nop
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	c3                   	ret    
c001e3a1:	90                   	nop

c001e3a2 <SATAPI::diskRemoved()>:
c001e3a2:	c3                   	ret    
c001e3a3:	90                   	nop

c001e3a4 <SATAPI::diskInserted()>:
c001e3a4:	83 ec 18             	sub    esp,0x18
c001e3a7:	68 48 34 02 c0       	push   0xc0023448
c001e3ac:	e8 94 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3b5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e3bc:	83 c4 1c             	add    esp,0x1c
c001e3bf:	c3                   	ret    

c001e3c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e3c0:	55                   	push   ebp
c001e3c1:	57                   	push   edi
c001e3c2:	56                   	push   esi
c001e3c3:	53                   	push   ebx
c001e3c4:	83 ec 34             	sub    esp,0x34
c001e3c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3cb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e3cf:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e3d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3d7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e3db:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3eb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3f5:	83 c0 02             	add    eax,0x2
c001e3f8:	c1 e0 07             	shl    eax,0x7
c001e3fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e403:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e407:	c1 e0 07             	shl    eax,0x7
c001e40a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e40e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e412:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e41c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e420:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e426:	e8 21 e5 ff ff       	call   c001c94c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e42b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e42f:	83 c4 10             	add    esp,0x10
c001e432:	b8 01 00 00 00       	mov    eax,0x1
c001e437:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e43c:	0f 84 53 02 00 00    	je     c001e695 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e442:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e44c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e44e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e454:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e45a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e45e:	c1 e1 05             	shl    ecx,0x5
c001e461:	01 c8                	add    eax,ecx
c001e463:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e465:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e46b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e471:	89 08                	mov    DWORD PTR [eax],ecx
c001e473:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e479:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e47f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e485:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e488:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e48b:	50                   	push   eax
c001e48c:	68 90 00 00 00       	push   0x90
c001e491:	6a 00                	push   0x0
c001e493:	53                   	push   ebx
c001e494:	e8 57 20 fe ff       	call   c00004f0 <memset>
c001e499:	b9 0c 00 00 00       	mov    ecx,0xc
c001e49e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e4a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4a4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e4aa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e4ae:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e4b4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e4b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4bc:	48                   	dec    eax
c001e4bd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4c2:	89 c1                	mov    ecx,eax
c001e4c4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e4ca:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4cf:	09 c8                	or     eax,ecx
c001e4d1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4d7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4dd:	83 c8 80             	or     eax,0xffffff80
c001e4e0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4e6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e4ed:	25 00 7f 00 00       	and    eax,0x7f00
c001e4f2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e4f6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4fb:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4fe:	89 d0                	mov    eax,edx
c001e500:	c1 ea 18             	shr    edx,0x18
c001e503:	c1 e8 10             	shr    eax,0x10
c001e506:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e509:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e50c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e510:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e517:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e51a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e525:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e529:	31 c0                	xor    eax,eax
c001e52b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e531:	80 e1 88             	and    cl,0x88
c001e534:	74 0a                	je     c001e540 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e536:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e53b:	74 0a                	je     c001e547 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e53d:	40                   	inc    eax
c001e53e:	eb eb                	jmp    c001e52b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e540:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e545:	75 43                	jne    c001e58a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e547:	83 ec 0c             	sub    esp,0xc
c001e54a:	68 60 34 02 c0       	push   0xc0023460
c001e54f:	e8 f1 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e554:	58                   	pop    eax
c001e555:	5a                   	pop    edx
c001e556:	68 75 34 02 c0       	push   0xc0023475
c001e55b:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e561:	e8 40 a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e566:	59                   	pop    ecx
c001e567:	5b                   	pop    ebx
c001e568:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e56c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e572:	e8 6f e4 ff ff       	call   c001c9e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e577:	5e                   	pop    esi
c001e578:	5f                   	pop    edi
c001e579:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e57d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e583:	e8 3e e4 ff ff       	call   c001c9c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e588:	eb 48                	jmp    c001e5d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e58a:	be 01 00 00 00       	mov    esi,0x1
c001e58f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e593:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e597:	d3 e6                	shl    esi,cl
c001e599:	c1 e7 07             	shl    edi,0x7
c001e59c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e5a2:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e5a7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e5ab:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e5b1:	85 c6                	test   esi,eax
c001e5b3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e5b9:	0f 84 a3 00 00 00    	je     c001e662 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e5bf:	0f ba e0 1e          	bt     eax,0x1e
c001e5c3:	73 1a                	jae    c001e5df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e5c5:	83 ec 0c             	sub    esp,0xc
c001e5c8:	68 87 34 02 c0       	push   0xc0023487
c001e5cd:	e8 73 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5d2:	83 c4 10             	add    esp,0x10
c001e5d5:	b8 01 00 00 00       	mov    eax,0x1
c001e5da:	e9 b6 00 00 00       	jmp    c001e695 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e5df:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e5e5:	83 f8 0d             	cmp    eax,0xd
c001e5e8:	77 0a                	ja     c001e5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e5ea:	83 ec 0c             	sub    esp,0xc
c001e5ed:	68 c8 00 00 00       	push   0xc8
c001e5f2:	eb 28                	jmp    c001e61c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5f4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e5fa:	83 f8 0d             	cmp    eax,0xd
c001e5fd:	77 0a                	ja     c001e609 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e5ff:	83 ec 0c             	sub    esp,0xc
c001e602:	68 58 02 00 00       	push   0x258
c001e607:	eb 13                	jmp    c001e61c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e609:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e60f:	83 f8 06             	cmp    eax,0x6
c001e612:	77 10                	ja     c001e624 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	68 dc 05 00 00       	push   0x5dc
c001e61c:	e8 c7 7d ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001e621:	83 c4 10             	add    esp,0x10
c001e624:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e628:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e62b:	75 06                	jne    c001e633 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e62d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e631:	74 15                	je     c001e648 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e633:	83 fb 06             	cmp    ebx,0x6
c001e636:	77 10                	ja     c001e648 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e638:	83 ec 0c             	sub    esp,0xc
c001e63b:	68 c4 09 00 00       	push   0x9c4
c001e640:	e8 a3 7d ff ff       	call   c00163e8 <milliTenthSleep(unsigned int)>
c001e645:	83 c4 10             	add    esp,0x10
c001e648:	43                   	inc    ebx
c001e649:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e64f:	0f 85 56 ff ff ff    	jne    c001e5ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e655:	83 ec 0c             	sub    esp,0xc
c001e658:	68 9a 34 02 c0       	push   0xc002349a
c001e65d:	e9 6b ff ff ff       	jmp    c001e5cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e662:	0f ba e0 1e          	bt     eax,0x1e
c001e666:	73 0d                	jae    c001e675 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e668:	83 ec 0c             	sub    esp,0xc
c001e66b:	68 ae 34 02 c0       	push   0xc00234ae
c001e670:	e9 58 ff ff ff       	jmp    c001e5cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e675:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e67a:	74 17                	je     c001e693 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e67c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e681:	74 10                	je     c001e693 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e683:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e689:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e68d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e691:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e693:	31 c0                	xor    eax,eax
c001e695:	83 c4 2c             	add    esp,0x2c
c001e698:	5b                   	pop    ebx
c001e699:	5e                   	pop    esi
c001e69a:	5f                   	pop    edi
c001e69b:	5d                   	pop    ebp
c001e69c:	c3                   	ret    
c001e69d:	90                   	nop

c001e69e <SATAPI::eject()>:
c001e69e:	57                   	push   edi
c001e69f:	b9 03 00 00 00       	mov    ecx,0x3
c001e6a4:	83 ec 18             	sub    esp,0x18
c001e6a7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e6ab:	fc                   	cld    
c001e6ac:	31 c0                	xor    eax,eax
c001e6ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e6b0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e6b5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e6ba:	50                   	push   eax
c001e6bb:	6a 00                	push   0x0
c001e6bd:	6a 00                	push   0x0
c001e6bf:	6a 00                	push   0x0
c001e6c1:	6a 00                	push   0x0
c001e6c3:	6a 02                	push   0x2
c001e6c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6c9:	50                   	push   eax
c001e6ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6ce:	e8 ed fc ff ff       	call   c001e3c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6d3:	31 c0                	xor    eax,eax
c001e6d5:	83 c4 38             	add    esp,0x38
c001e6d8:	5f                   	pop    edi
c001e6d9:	c3                   	ret    

c001e6da <SATAPI::detectMedia()>:
c001e6da:	53                   	push   ebx
c001e6db:	83 ec 14             	sub    esp,0x14
c001e6de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6e8:	e8 57 00 ff ff       	call   c000e744 <VCache::writeWriteBuffer()>
c001e6ed:	59                   	pop    ecx
c001e6ee:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6f4:	e8 3b 00 ff ff       	call   c000e734 <VCache::invalidateReadBuffer()>
c001e6f9:	c7 04 24 c3 34 02 c0 	mov    DWORD PTR [esp],0xc00234c3
c001e700:	e8 40 c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e705:	83 c4 10             	add    esp,0x10
c001e708:	31 c0                	xor    eax,eax
c001e70a:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e711:	85 d2                	test   edx,edx
c001e713:	74 0f                	je     c001e724 <SATAPI::detectMedia()+0x4a>
c001e715:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e71b:	75 07                	jne    c001e724 <SATAPI::detectMedia()+0x4a>
c001e71d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e724:	40                   	inc    eax
c001e725:	83 f8 1a             	cmp    eax,0x1a
c001e728:	75 e0                	jne    c001e70a <SATAPI::detectMedia()+0x30>
c001e72a:	83 c4 08             	add    esp,0x8
c001e72d:	5b                   	pop    ebx
c001e72e:	c3                   	ret    
c001e72f:	90                   	nop

c001e730 <SATAPI::open(int, int, void*)>:
c001e730:	56                   	push   esi
c001e731:	53                   	push   ebx
c001e732:	51                   	push   ecx
c001e733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e73b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e745:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e74b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e755:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e759:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e763:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e769:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e770:	e8 4a 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e775:	89 c6                	mov    esi,eax
c001e777:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e77d:	81 c6 00 10 00 00    	add    esi,0x1000
c001e783:	e8 37 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e788:	39 c6                	cmp    esi,eax
c001e78a:	74 10                	je     c001e79c <SATAPI::open(int, int, void*)+0x6c>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	68 d8 34 02 c0       	push   0xc00234d8
c001e794:	e8 ba 2e ff ff       	call   c0011653 <KePanic(char const*)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	6a 02                	push   0x2
c001e7a1:	e8 67 ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e7a6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e7ac:	6a 03                	push   0x3
c001e7ae:	50                   	push   eax
c001e7af:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e7b5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e7bb:	e8 60 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e7c0:	83 c4 14             	add    esp,0x14
c001e7c3:	68 78 01 00 00       	push   0x178
c001e7c8:	e8 e9 92 fe ff       	call   c0007ab6 <malloc>
c001e7cd:	83 c4 0c             	add    esp,0xc
c001e7d0:	89 c6                	mov    esi,eax
c001e7d2:	6a 00                	push   0x0
c001e7d4:	68 ff ff ff 7f       	push   0x7fffffff
c001e7d9:	6a 00                	push   0x0
c001e7db:	6a 00                	push   0x0
c001e7dd:	53                   	push   ebx
c001e7de:	68 ee 34 02 c0       	push   0xc00234ee
c001e7e3:	50                   	push   eax
c001e7e4:	e8 b7 f3 fe ff       	call   c000dba0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7e9:	83 c4 14             	add    esp,0x14
c001e7ec:	56                   	push   esi
c001e7ed:	e8 6e f4 fe ff       	call   c000dc60 <LogicalDisk::assignDriveLetter()>
c001e7f2:	5a                   	pop    edx
c001e7f3:	0f be c0             	movsx  eax,al
c001e7f6:	59                   	pop    ecx
c001e7f7:	50                   	push   eax
c001e7f8:	68 40 33 02 c0       	push   0xc0023340
c001e7fd:	e8 43 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e802:	58                   	pop    eax
c001e803:	5a                   	pop    edx
c001e804:	56                   	push   esi
c001e805:	53                   	push   ebx
c001e806:	e8 ef e1 fe ff       	call   c000c9fa <Device::addChild(Device*)>
c001e80b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e814:	e8 15 e6 fe ff       	call   c000ce2e <PhysicalDisk::startCache()>
c001e819:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e820:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e823:	e8 b2 fe ff ff       	call   c001e6da <SATAPI::detectMedia()>
c001e828:	83 c4 14             	add    esp,0x14
c001e82b:	31 c0                	xor    eax,eax
c001e82d:	5b                   	pop    ebx
c001e82e:	5e                   	pop    esi
c001e82f:	c3                   	ret    

c001e830 <SATAPI::read(unsigned long long, int, void*)>:
c001e830:	57                   	push   edi
c001e831:	56                   	push   esi
c001e832:	53                   	push   ebx
c001e833:	83 ec 30             	sub    esp,0x30
c001e836:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e83a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e83e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e842:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e846:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e84a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e84e:	83 fe 04             	cmp    esi,0x4
c001e851:	7e 10                	jle    c001e863 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e853:	83 ec 0c             	sub    esp,0xc
c001e856:	68 fc 34 02 c0       	push   0xc00234fc
c001e85b:	e8 f3 2d ff ff       	call   c0011653 <KePanic(char const*)>
c001e860:	83 c4 10             	add    esp,0x10
c001e863:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e869:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e86f:	51                   	push   ecx
c001e870:	50                   	push   eax
c001e871:	83 c0 02             	add    eax,0x2
c001e874:	c1 e0 07             	shl    eax,0x7
c001e877:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e87d:	50                   	push   eax
c001e87e:	52                   	push   edx
c001e87f:	e8 8c e1 ff ff       	call   c001ca10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e884:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e888:	b9 03 00 00 00       	mov    ecx,0x3
c001e88d:	fc                   	cld    
c001e88e:	31 c0                	xor    eax,eax
c001e890:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e892:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e897:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e89c:	83 c4 0c             	add    esp,0xc
c001e89f:	6a 00                	push   0x0
c001e8a1:	6a 00                	push   0x0
c001e8a3:	6a 00                	push   0x0
c001e8a5:	6a 00                	push   0x0
c001e8a7:	6a 02                	push   0x2
c001e8a9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e8ad:	50                   	push   eax
c001e8ae:	53                   	push   ebx
c001e8af:	e8 0c fb ff ff       	call   c001e3c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8b4:	83 c4 20             	add    esp,0x20
c001e8b7:	85 c0                	test   eax,eax
c001e8b9:	75 44                	jne    c001e8ff <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e8bb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e8bf:	b9 03 00 00 00       	mov    ecx,0x3
c001e8c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e8c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ca:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e8cf:	0f c8                	bswap  eax
c001e8d1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8d5:	89 f0                	mov    eax,esi
c001e8d7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8db:	50                   	push   eax
c001e8dc:	56                   	push   esi
c001e8dd:	c1 e6 0b             	shl    esi,0xb
c001e8e0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e8e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8ec:	56                   	push   esi
c001e8ed:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8f1:	50                   	push   eax
c001e8f2:	53                   	push   ebx
c001e8f3:	e8 c8 fa ff ff       	call   c001e3c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8f8:	83 c4 20             	add    esp,0x20
c001e8fb:	85 c0                	test   eax,eax
c001e8fd:	74 14                	je     c001e913 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e903:	83 ec 0c             	sub    esp,0xc
c001e906:	53                   	push   ebx
c001e907:	e8 ce fd ff ff       	call   c001e6da <SATAPI::detectMedia()>
c001e90c:	83 c4 10             	add    esp,0x10
c001e90f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e913:	83 c4 30             	add    esp,0x30
c001e916:	5b                   	pop    ebx
c001e917:	5e                   	pop    esi
c001e918:	5f                   	pop    edi
c001e919:	c3                   	ret    

c001e91a <IOAPIC::close(int, int, void*)>:
c001e91a:	b8 00 00 00 00       	mov    eax,0x0
c001e91f:	c3                   	ret    

c001e920 <apicGetBase()>:
c001e920:	55                   	push   ebp
c001e921:	89 e5                	mov    ebp,esp
c001e923:	83 ec 18             	sub    esp,0x18
c001e926:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e92b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e931:	83 e0 08             	and    eax,0x8
c001e934:	0f b6 c0             	movzx  eax,al
c001e937:	85 c0                	test   eax,eax
c001e939:	75 07                	jne    c001e942 <apicGetBase()+0x22>
c001e93b:	b8 00 00 00 00       	mov    eax,0x0
c001e940:	eb 21                	jmp    c001e963 <apicGetBase()+0x43>
c001e942:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e947:	83 ec 08             	sub    esp,0x8
c001e94a:	6a 1b                	push   0x1b
c001e94c:	50                   	push   eax
c001e94d:	e8 6e 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e952:	83 c4 10             	add    esp,0x10
c001e955:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e958:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e95b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e95e:	25 00 00 ff ff       	and    eax,0xffff0000
c001e963:	c9                   	leave  
c001e964:	c3                   	ret    
c001e965:	90                   	nop

c001e966 <IOAPIC::IOAPIC()>:
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96d:	83 ec 08             	sub    esp,0x8
c001e970:	68 60 35 02 c0       	push   0xc0023560
c001e975:	50                   	push   eax
c001e976:	e8 17 e2 fe ff       	call   c000cb92 <Device::Device(char const*)>
c001e97b:	83 c4 10             	add    esp,0x10
c001e97e:	ba 70 35 02 c0       	mov    edx,0xc0023570
c001e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e987:	89 10                	mov    DWORD PTR [eax],edx
c001e989:	90                   	nop
c001e98a:	83 c4 0c             	add    esp,0xc
c001e98d:	c3                   	ret    

c001e98e <apicOpen()>:
c001e98e:	55                   	push   ebp
c001e98f:	89 e5                	mov    ebp,esp
c001e991:	53                   	push   ebx
c001e992:	83 ec 34             	sub    esp,0x34
c001e995:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e99a:	83 f0 01             	xor    eax,0x1
c001e99d:	0f b6 c0             	movzx  eax,al
c001e9a0:	85 c0                	test   eax,eax
c001e9a2:	0f 84 a3 00 00 00    	je     c001ea4b <apicOpen()+0xbd>
c001e9a8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9ac:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e9b1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9b5:	0f b6 c0             	movzx  eax,al
c001e9b8:	39 c2                	cmp    edx,eax
c001e9ba:	0f 83 84 00 00 00    	jae    c001ea44 <apicOpen()+0xb6>
c001e9c0:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e9c7:	83 ec 0c             	sub    esp,0xc
c001e9ca:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e9cd:	e8 e4 90 fe ff       	call   c0007ab6 <malloc>
c001e9d2:	83 c4 10             	add    esp,0x10
c001e9d5:	89 c3                	mov    ebx,eax
c001e9d7:	83 ec 0c             	sub    esp,0xc
c001e9da:	53                   	push   ebx
c001e9db:	e8 86 ff ff ff       	call   c001e966 <IOAPIC::IOAPIC()>
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9e6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9ed:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9f4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9f9:	83 c0 01             	add    eax,0x1
c001e9fc:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ea01:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea06:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ea0c:	83 ec 08             	sub    esp,0x8
c001ea0f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea12:	50                   	push   eax
c001ea13:	e8 e2 df fe ff       	call   c000c9fa <Device::addChild(Device*)>
c001ea18:	83 c4 10             	add    esp,0x10
c001ea1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea20:	83 c0 08             	add    eax,0x8
c001ea23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea25:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea29:	6a 00                	push   0x0
c001ea2b:	6a 00                	push   0x0
c001ea2d:	52                   	push   edx
c001ea2e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea31:	ff d0                	call   eax
c001ea33:	83 c4 10             	add    esp,0x10
c001ea36:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea39:	83 c0 01             	add    eax,0x1
c001ea3c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea3f:	e9 68 ff ff ff       	jmp    c001e9ac <apicOpen()+0x1e>
c001ea44:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea4b:	e8 d0 fe ff ff       	call   c001e920 <apicGetBase()>
c001ea50:	05 f0 00 00 00       	add    eax,0xf0
c001ea55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea60:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea67:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea71:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea74:	89 10                	mov    DWORD PTR [eax],edx
c001ea76:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea7d:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea82:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea85:	7d 7c                	jge    c001eb03 <apicOpen()+0x175>
c001ea87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea8a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea91:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea94:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea97:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea9e:	c1 e8 08             	shr    eax,0x8
c001eaa1:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eaa5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eaa8:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eaaf:	c1 e8 18             	shr    eax,0x18
c001eab2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eab5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eab9:	3d ff 00 00 00       	cmp    eax,0xff
c001eabe:	75 3a                	jne    c001eafa <apicOpen()+0x16c>
c001eac0:	e8 5b fe ff ff       	call   c001e920 <apicGetBase()>
c001eac5:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eac9:	83 fa 01             	cmp    edx,0x1
c001eacc:	75 07                	jne    c001ead5 <apicOpen()+0x147>
c001eace:	ba 60 03 00 00       	mov    edx,0x360
c001ead3:	eb 05                	jmp    c001eada <apicOpen()+0x14c>
c001ead5:	ba 50 03 00 00       	mov    edx,0x350
c001eada:	01 d0                	add    eax,edx
c001eadc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eadf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eae2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eae7:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eaee:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eaf2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaf5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eaf8:	89 10                	mov    DWORD PTR [eax],edx
c001eafa:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eafe:	e9 7a ff ff ff       	jmp    c001ea7d <apicOpen()+0xef>
c001eb03:	90                   	nop
c001eb04:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eb07:	c9                   	leave  
c001eb08:	c3                   	ret    
c001eb09:	90                   	nop

c001eb0a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eb0a:	55                   	push   ebp
c001eb0b:	89 e5                	mov    ebp,esp
c001eb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb10:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eb16:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb19:	72 1d                	jb     c001eb38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eb24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb27:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb2d:	01 d0                	add    eax,edx
c001eb2f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb32:	73 04                	jae    c001eb38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb34:	b0 01                	mov    al,0x1
c001eb36:	eb 02                	jmp    c001eb3a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb38:	b0 00                	mov    al,0x0
c001eb3a:	5d                   	pop    ebp
c001eb3b:	c3                   	ret    

c001eb3c <IOAPIC::read(int)>:
c001eb3c:	55                   	push   ebp
c001eb3d:	89 e5                	mov    ebp,esp
c001eb3f:	83 ec 10             	sub    esp,0x10
c001eb42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb45:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb4b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb51:	0f b6 d0             	movzx  edx,al
c001eb54:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb57:	89 10                	mov    DWORD PTR [eax],edx
c001eb59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb5c:	83 c0 10             	add    eax,0x10
c001eb5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb61:	c9                   	leave  
c001eb62:	c3                   	ret    
c001eb63:	90                   	nop

c001eb64 <IOAPIC::open(int, int, void*)>:
c001eb64:	55                   	push   ebp
c001eb65:	89 e5                	mov    ebp,esp
c001eb67:	57                   	push   edi
c001eb68:	56                   	push   esi
c001eb69:	53                   	push   ebx
c001eb6a:	83 ec 04             	sub    esp,0x4
c001eb6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb82:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb9b:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eba5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ebab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebae:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ebb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebbd:	0f b6 f0             	movzx  esi,al
c001ebc0:	89 d0                	mov    eax,edx
c001ebc2:	ba 00 00 00 00       	mov    edx,0x0
c001ebc7:	89 c7                	mov    edi,eax
c001ebc9:	83 e7 ff             	and    edi,0xffffffff
c001ebcc:	89 f9                	mov    ecx,edi
c001ebce:	0f b6 da             	movzx  ebx,dl
c001ebd1:	89 c8                	mov    eax,ecx
c001ebd3:	89 da                	mov    edx,ebx
c001ebd5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ebd8:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebdb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebdf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebe3:	83 e0 00             	and    eax,0x0
c001ebe6:	09 d0                	or     eax,edx
c001ebe8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebf5:	8d 50 01             	lea    edx,[eax+0x1]
c001ebf8:	88 d1                	mov    cl,dl
c001ebfa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebfd:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ec03:	0f b6 d0             	movzx  edx,al
c001ec06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec09:	83 c2 08             	add    edx,0x8
c001ec0c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec10:	0f b6 c9             	movzx  ecx,cl
c001ec13:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ec19:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec1d:	6a 01                	push   0x1
c001ec1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec22:	e8 15 ff ff ff       	call   c001eb3c <IOAPIC::read(int)>
c001ec27:	83 c4 08             	add    esp,0x8
c001ec2a:	c1 f8 10             	sar    eax,0x10
c001ec2d:	0f b6 c0             	movzx  eax,al
c001ec30:	8d 50 01             	lea    edx,[eax+0x1]
c001ec33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec36:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec3c:	b8 00 00 00 00       	mov    eax,0x0
c001ec41:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec44:	5b                   	pop    ebx
c001ec45:	5e                   	pop    esi
c001ec46:	5f                   	pop    edi
c001ec47:	5d                   	pop    ebp
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <IOAPIC::write(int, int)>:
c001ec4a:	55                   	push   ebp
c001ec4b:	89 e5                	mov    ebp,esp
c001ec4d:	83 ec 10             	sub    esp,0x10
c001ec50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec53:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec59:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec5f:	0f b6 d0             	movzx  edx,al
c001ec62:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec65:	89 10                	mov    DWORD PTR [eax],edx
c001ec67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec6a:	8d 50 10             	lea    edx,[eax+0x10]
c001ec6d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec70:	89 02                	mov    DWORD PTR [edx],eax
c001ec72:	90                   	nop
c001ec73:	c9                   	leave  
c001ec74:	c3                   	ret    
c001ec75:	90                   	nop

c001ec76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec76:	55                   	push   ebp
c001ec77:	89 e5                	mov    ebp,esp
c001ec79:	53                   	push   ebx
c001ec7a:	83 ec 2c             	sub    esp,0x2c
c001ec7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec80:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec83:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec86:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec89:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec8f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec92:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec95:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec98:	88 d8                	mov    al,bl
c001ec9a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec9d:	88 c8                	mov    al,cl
c001ec9f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001eca2:	88 d0                	mov    al,dl
c001eca4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001eca7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecab:	83 c0 08             	add    eax,0x8
c001ecae:	01 c0                	add    eax,eax
c001ecb0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ecb3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ecb7:	83 c0 08             	add    eax,0x8
c001ecba:	01 c0                	add    eax,eax
c001ecbc:	83 c0 01             	add    eax,0x1
c001ecbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ecc2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecc5:	50                   	push   eax
c001ecc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc9:	e8 6e fe ff ff       	call   c001eb3c <IOAPIC::read(int)>
c001ecce:	83 c4 08             	add    esp,0x8
c001ecd1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecd4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ecdb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecde:	c1 e0 18             	shl    eax,0x18
c001ece1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ece4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ece7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecea:	52                   	push   edx
c001eceb:	50                   	push   eax
c001ecec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecef:	e8 56 ff ff ff       	call   c001ec4a <IOAPIC::write(int, int)>
c001ecf4:	83 c4 0c             	add    esp,0xc
c001ecf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecfa:	50                   	push   eax
c001ecfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecfe:	e8 39 fe ff ff       	call   c001eb3c <IOAPIC::read(int)>
c001ed03:	83 c4 08             	add    esp,0x8
c001ed06:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ed09:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ed10:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ed17:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ed1e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ed22:	85 c0                	test   eax,eax
c001ed24:	74 09                	je     c001ed2f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ed26:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed2d:	eb 07                	jmp    c001ed36 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed2f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed36:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed3a:	85 c0                	test   eax,eax
c001ed3c:	74 09                	je     c001ed47 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed3e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed45:	eb 07                	jmp    c001ed4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed47:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed4e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed55:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed59:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed5c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed62:	52                   	push   edx
c001ed63:	50                   	push   eax
c001ed64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed67:	e8 de fe ff ff       	call   c001ec4a <IOAPIC::write(int, int)>
c001ed6c:	83 c4 0c             	add    esp,0xc
c001ed6f:	90                   	nop
c001ed70:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed73:	c9                   	leave  
c001ed74:	c3                   	ret    
c001ed75:	66 90                	xchg   ax,ax
c001ed77:	90                   	nop

c001ed78 <APICTimer::close(int, int, void*)>:
c001ed78:	b8 00 00 00 00       	mov    eax,0x0
c001ed7d:	c3                   	ret    
c001ed7e:	66 90                	xchg   ax,ax

c001ed80 <apicTimerHandler(regs*, void*)>:
c001ed80:	83 ec 0c             	sub    esp,0xc
c001ed83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed87:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed89:	b8 10 27 00 00       	mov    eax,0x2710
c001ed8e:	ba 00 00 00 00       	mov    edx,0x0
c001ed93:	f7 f1                	div    ecx
c001ed95:	83 ec 0c             	sub    esp,0xc
c001ed98:	50                   	push   eax
c001ed99:	e8 be f6 fe ff       	call   c000e45c <timerHandler(unsigned int)>
c001ed9e:	83 c4 10             	add    esp,0x10
c001eda1:	90                   	nop
c001eda2:	83 c4 0c             	add    esp,0xc
c001eda5:	c3                   	ret    
c001eda6:	66 90                	xchg   ax,ax

c001eda8 <APICTimer::open(int, int, void*)>:
c001eda8:	83 ec 0c             	sub    esp,0xc
c001edab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb1:	83 c0 24             	add    eax,0x24
c001edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb6:	83 ec 08             	sub    esp,0x8
c001edb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edc1:	ff d0                	call   eax
c001edc3:	83 c4 10             	add    esp,0x10
c001edc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001edd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eddc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ede2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ede6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edec:	83 ec 0c             	sub    esp,0xc
c001edef:	51                   	push   ecx
c001edf0:	6a 01                	push   0x1
c001edf2:	68 80 ed 01 c0       	push   0xc001ed80
c001edf7:	52                   	push   edx
c001edf8:	50                   	push   eax
c001edf9:	e8 a8 db fe ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edfe:	83 c4 20             	add    esp,0x20
c001ee01:	89 c2                	mov    edx,eax
c001ee03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee07:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee0d:	b8 00 00 00 00       	mov    eax,0x0
c001ee12:	83 c4 0c             	add    esp,0xc
c001ee15:	c3                   	ret    
c001ee16:	66 90                	xchg   ax,ax

c001ee18 <APICTimer::write(int)>:
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	83 ec 0c             	sub    esp,0xc
c001ee1e:	68 94 35 02 c0       	push   0xc0023594
c001ee23:	e8 2b 28 ff ff       	call   c0011653 <KePanic(char const*)>
c001ee28:	83 c4 10             	add    esp,0x10
c001ee2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee39:	90                   	nop
c001ee3a:	83 c4 0c             	add    esp,0xc
c001ee3d:	c3                   	ret    
c001ee3e:	66 90                	xchg   ax,ax

c001ee40 <APICTimer::APICTimer()>:
c001ee40:	83 ec 0c             	sub    esp,0xc
c001ee43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee47:	83 ec 08             	sub    esp,0x8
c001ee4a:	68 a4 35 02 c0       	push   0xc00235a4
c001ee4f:	50                   	push   eax
c001ee50:	e8 3b f5 fe ff       	call   c000e390 <Timer::Timer(char const*)>
c001ee55:	83 c4 10             	add    esp,0x10
c001ee58:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c001ee5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee61:	89 10                	mov    DWORD PTR [eax],edx
c001ee63:	90                   	nop
c001ee64:	83 c4 0c             	add    esp,0xc
c001ee67:	c3                   	ret    

c001ee68 <PIT::write(int)>:
c001ee68:	83 ec 10             	sub    esp,0x10
c001ee6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee7d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee82:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee87:	89 c2                	mov    edx,eax
c001ee89:	c1 fa 1f             	sar    edx,0x1f
c001ee8c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee94:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee9b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eea0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eea4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001eea9:	ee                   	out    dx,al
c001eeaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eeae:	0f b6 c0             	movzx  eax,al
c001eeb1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eeb8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001eebc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001eec0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001eec5:	ee                   	out    dx,al
c001eec6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eeca:	c1 f8 08             	sar    eax,0x8
c001eecd:	0f b6 c0             	movzx  eax,al
c001eed0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eed7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eedb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eedf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eee4:	ee                   	out    dx,al
c001eee5:	90                   	nop
c001eee6:	83 c4 10             	add    esp,0x10
c001eee9:	c3                   	ret    
c001eeea:	66 90                	xchg   ax,ax

c001eeec <pitHandler(regs*, void*)>:
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eef5:	b8 10 27 00 00       	mov    eax,0x2710
c001eefa:	89 c2                	mov    edx,eax
c001eefc:	c1 fa 1f             	sar    edx,0x1f
c001eeff:	f7 f9                	idiv   ecx
c001ef01:	83 ec 0c             	sub    esp,0xc
c001ef04:	50                   	push   eax
c001ef05:	e8 52 f5 fe ff       	call   c000e45c <timerHandler(unsigned int)>
c001ef0a:	83 c4 10             	add    esp,0x10
c001ef0d:	90                   	nop
c001ef0e:	83 c4 0c             	add    esp,0xc
c001ef11:	c3                   	ret    
c001ef12:	66 90                	xchg   ax,ax

c001ef14 <PIT::open(int, int, void*)>:
c001ef14:	83 ec 0c             	sub    esp,0xc
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef1d:	83 c0 24             	add    eax,0x24
c001ef20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef22:	83 ec 08             	sub    esp,0x8
c001ef25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2d:	ff d0                	call   eax
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	6a 00                	push   0x0
c001ef3b:	6a 01                	push   0x1
c001ef3d:	68 ec ee 01 c0       	push   0xc001eeec
c001ef42:	6a 00                	push   0x0
c001ef44:	50                   	push   eax
c001ef45:	e8 5c da fe ff       	call   c000c9a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef4a:	83 c4 20             	add    esp,0x20
c001ef4d:	89 c2                	mov    edx,eax
c001ef4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef59:	b8 00 00 00 00       	mov    eax,0x0
c001ef5e:	83 c4 0c             	add    esp,0xc
c001ef61:	c3                   	ret    
c001ef62:	66 90                	xchg   ax,ax

c001ef64 <PIT::close(int, int, void*)>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef79:	6a 01                	push   0x1
c001ef7b:	68 ec ee 01 c0       	push   0xc001eeec
c001ef80:	6a 00                	push   0x0
c001ef82:	50                   	push   eax
c001ef83:	e8 54 da fe ff       	call   c000c9dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef88:	83 c4 10             	add    esp,0x10
c001ef8b:	b8 00 00 00 00       	mov    eax,0x0
c001ef90:	83 c4 0c             	add    esp,0xc
c001ef93:	c3                   	ret    

c001ef94 <PIT::PIT()>:
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9b:	83 ec 08             	sub    esp,0x8
c001ef9e:	68 e0 35 02 c0       	push   0xc00235e0
c001efa3:	50                   	push   eax
c001efa4:	e8 e7 f3 fe ff       	call   c000e390 <Timer::Timer(char const*)>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	ba 08 36 02 c0       	mov    edx,0xc0023608
c001efb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb5:	89 10                	mov    DWORD PTR [eax],edx
c001efb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc1:	0f b6 d0             	movzx  edx,al
c001efc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efd9:	0f b6 d0             	movzx  edx,al
c001efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efef:	8d 50 01             	lea    edx,[eax+0x1]
c001eff2:	88 d1                	mov    cl,dl
c001eff4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eff8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001effe:	0f b6 d0             	movzx  edx,al
c001f001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f005:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f009:	83 e1 3f             	and    ecx,0x3f
c001f00c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f010:	90                   	nop
c001f011:	83 c4 0c             	add    esp,0xc
c001f014:	c3                   	ret    
c001f015:	66 90                	xchg   ax,ax
c001f017:	66 90                	xchg   ax,ax
c001f019:	66 90                	xchg   ax,ax
c001f01b:	66 90                	xchg   ax,ax
c001f01d:	66 90                	xchg   ax,ax
c001f01f:	90                   	nop

c001f020 <avxDetect>:
c001f020:	b8 01 00 00 00       	mov    eax,0x1
c001f025:	0f a2                	cpuid  
c001f027:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f02d:	74 15                	je     c001f044 <avxDetect.noAVX>
c001f02f:	b8 01 00 00 00       	mov    eax,0x1
c001f034:	0f a2                	cpuid  
c001f036:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f03c:	74 06                	je     c001f044 <avxDetect.noAVX>
c001f03e:	b8 01 00 00 00       	mov    eax,0x1
c001f043:	c3                   	ret    

c001f044 <avxDetect.noAVX>:
c001f044:	b8 00 00 00 00       	mov    eax,0x0
c001f049:	c3                   	ret    

c001f04a <avxSave>:
c001f04a:	53                   	push   ebx
c001f04b:	52                   	push   edx
c001f04c:	31 c0                	xor    eax,eax
c001f04e:	48                   	dec    eax
c001f04f:	89 c2                	mov    edx,eax
c001f051:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f055:	0f ae 23             	xsave  [ebx]
c001f058:	5a                   	pop    edx
c001f059:	5b                   	pop    ebx
c001f05a:	c3                   	ret    

c001f05b <avxLoad>:
c001f05b:	53                   	push   ebx
c001f05c:	52                   	push   edx
c001f05d:	31 c0                	xor    eax,eax
c001f05f:	48                   	dec    eax
c001f060:	89 c2                	mov    edx,eax
c001f062:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f066:	0f ae 2b             	xrstor [ebx]
c001f069:	5a                   	pop    edx
c001f06a:	5b                   	pop    ebx
c001f06b:	c3                   	ret    

c001f06c <avxInit>:
c001f06c:	e8 67 03 00 00       	call   c001f3d8 <sseInit>
c001f071:	50                   	push   eax
c001f072:	51                   	push   ecx
c001f073:	0f 20 e0             	mov    eax,cr4
c001f076:	0d 00 00 04 00       	or     eax,0x40000
c001f07b:	0f 22 e0             	mov    cr4,eax
c001f07e:	31 c9                	xor    ecx,ecx
c001f080:	0f 01 d0             	xgetbv 
c001f083:	0d 07 00 00 00       	or     eax,0x7
c001f088:	0f 01 d1             	xsetbv 
c001f08b:	59                   	pop    ecx
c001f08c:	58                   	pop    eax
c001f08d:	c3                   	ret    

c001f08e <avxClose>:
c001f08e:	c3                   	ret    

c001f08f <wouldSheSayYes>:
c001f08f:	c3                   	ret    
c001f090:	49                   	dec    ecx
c001f091:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f095:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f099:	75 20                	jne    c001f0bb <isr0+0xb>
c001f09b:	4e                   	dec    esi
c001f09c:	79 61                	jns    c001f0ff <isr7+0x3>
c001f09e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f0a3:	66 90                	xchg   ax,ax
c001f0a5:	66 90                	xchg   ax,ax
c001f0a7:	66 90                	xchg   ax,ax
c001f0a9:	66 90                	xchg   ax,ax
c001f0ab:	66 90                	xchg   ax,ax
c001f0ad:	66 90                	xchg   ax,ax
c001f0af:	90                   	nop

c001f0b0 <isr0>:
c001f0b0:	fa                   	cli    
c001f0b1:	68 00 00 00 00       	push   0x0
c001f0b6:	68 00 00 00 00       	push   0x0
c001f0bb:	e9 56 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0c0 <isr1>:
c001f0c0:	fa                   	cli    
c001f0c1:	6a 00                	push   0x0
c001f0c3:	6a 01                	push   0x1
c001f0c5:	e9 4c 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0ca <isr2>:
c001f0ca:	fa                   	cli    
c001f0cb:	6a 00                	push   0x0
c001f0cd:	6a 02                	push   0x2
c001f0cf:	e9 42 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0d4 <isr3>:
c001f0d4:	fa                   	cli    
c001f0d5:	6a 00                	push   0x0
c001f0d7:	6a 03                	push   0x3
c001f0d9:	e9 38 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0de <isr4>:
c001f0de:	fa                   	cli    
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 04                	push   0x4
c001f0e3:	e9 2e 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0e8 <isr5>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 00                	push   0x0
c001f0eb:	6a 05                	push   0x5
c001f0ed:	e9 24 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0f2 <isr6>:
c001f0f2:	fa                   	cli    
c001f0f3:	6a 00                	push   0x0
c001f0f5:	6a 06                	push   0x6
c001f0f7:	e9 1a 01 00 00       	jmp    c001f216 <int_common_stub>

c001f0fc <isr7>:
c001f0fc:	fa                   	cli    
c001f0fd:	6a 00                	push   0x0
c001f0ff:	6a 07                	push   0x7
c001f101:	e9 10 01 00 00       	jmp    c001f216 <int_common_stub>

c001f106 <isr8>:
c001f106:	fa                   	cli    
c001f107:	6a 08                	push   0x8
c001f109:	e9 08 01 00 00       	jmp    c001f216 <int_common_stub>

c001f10e <isr9>:
c001f10e:	fa                   	cli    
c001f10f:	6a 00                	push   0x0
c001f111:	6a 09                	push   0x9
c001f113:	e9 fe 00 00 00       	jmp    c001f216 <int_common_stub>

c001f118 <isr10>:
c001f118:	fa                   	cli    
c001f119:	6a 0a                	push   0xa
c001f11b:	e9 f6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f120 <isr11>:
c001f120:	fa                   	cli    
c001f121:	6a 0b                	push   0xb
c001f123:	e9 ee 00 00 00       	jmp    c001f216 <int_common_stub>

c001f128 <isr12>:
c001f128:	fa                   	cli    
c001f129:	6a 0c                	push   0xc
c001f12b:	e9 e6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f130 <isr13>:
c001f130:	fa                   	cli    
c001f131:	6a 0d                	push   0xd
c001f133:	53                   	push   ebx
c001f134:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f138:	81 fb 06 f3 01 c0    	cmp    ebx,0xc001f306
c001f13e:	5b                   	pop    ebx
c001f13f:	0f 84 c3 01 00 00    	je     c001f308 <finishSignal2>
c001f145:	e9 cc 00 00 00       	jmp    c001f216 <int_common_stub>

c001f14a <isr14>:
c001f14a:	fa                   	cli    
c001f14b:	6a 0e                	push   0xe
c001f14d:	e9 c4 00 00 00       	jmp    c001f216 <int_common_stub>

c001f152 <isr15>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 0f                	push   0xf
c001f157:	e9 ba 00 00 00       	jmp    c001f216 <int_common_stub>

c001f15c <isr16>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 10                	push   0x10
c001f161:	e9 b0 00 00 00       	jmp    c001f216 <int_common_stub>

c001f166 <isr17>:
c001f166:	fa                   	cli    
c001f167:	6a 00                	push   0x0
c001f169:	6a 11                	push   0x11
c001f16b:	e9 a6 00 00 00       	jmp    c001f216 <int_common_stub>

c001f170 <isr18>:
c001f170:	fa                   	cli    
c001f171:	6a 00                	push   0x0
c001f173:	6a 12                	push   0x12
c001f175:	e9 9c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f17a <irq3>:
c001f17a:	fa                   	cli    
c001f17b:	6a 00                	push   0x0
c001f17d:	6a 23                	push   0x23
c001f17f:	e9 92 00 00 00       	jmp    c001f216 <int_common_stub>

c001f184 <irq4>:
c001f184:	fa                   	cli    
c001f185:	6a 00                	push   0x0
c001f187:	6a 24                	push   0x24
c001f189:	e9 88 00 00 00       	jmp    c001f216 <int_common_stub>

c001f18e <irq5>:
c001f18e:	fa                   	cli    
c001f18f:	6a 00                	push   0x0
c001f191:	6a 25                	push   0x25
c001f193:	e9 7e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f198 <irq6>:
c001f198:	fa                   	cli    
c001f199:	6a 00                	push   0x0
c001f19b:	6a 26                	push   0x26
c001f19d:	e9 74 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1a2 <irq7>:
c001f1a2:	fa                   	cli    
c001f1a3:	6a 00                	push   0x0
c001f1a5:	6a 27                	push   0x27
c001f1a7:	e9 6a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ac <irq8>:
c001f1ac:	fa                   	cli    
c001f1ad:	6a 00                	push   0x0
c001f1af:	6a 28                	push   0x28
c001f1b1:	e9 60 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1b6 <irq9>:
c001f1b6:	fa                   	cli    
c001f1b7:	6a 00                	push   0x0
c001f1b9:	6a 29                	push   0x29
c001f1bb:	e9 56 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1c0 <irq10>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 2a                	push   0x2a
c001f1c5:	e9 4c 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1ca <irq11>:
c001f1ca:	fa                   	cli    
c001f1cb:	6a 00                	push   0x0
c001f1cd:	6a 2b                	push   0x2b
c001f1cf:	e9 42 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1d4 <irq12>:
c001f1d4:	fa                   	cli    
c001f1d5:	6a 00                	push   0x0
c001f1d7:	6a 2c                	push   0x2c
c001f1d9:	e9 38 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1de <irq13>:
c001f1de:	fa                   	cli    
c001f1df:	6a 00                	push   0x0
c001f1e1:	6a 2d                	push   0x2d
c001f1e3:	e9 2e 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1e8 <irq14>:
c001f1e8:	fa                   	cli    
c001f1e9:	6a 00                	push   0x0
c001f1eb:	6a 2e                	push   0x2e
c001f1ed:	e9 24 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1f2 <irq15>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 2f                	push   0x2f
c001f1f7:	e9 1a 00 00 00       	jmp    c001f216 <int_common_stub>

c001f1fc <irq1>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 21                	push   0x21
c001f201:	eb 13                	jmp    c001f216 <int_common_stub>

c001f203 <irq2>:
c001f203:	fa                   	cli    
c001f204:	6a 00                	push   0x0
c001f206:	6a 22                	push   0x22
c001f208:	eb 0c                	jmp    c001f216 <int_common_stub>

c001f20a <isr96>:
c001f20a:	6a 00                	push   0x0
c001f20c:	6a 60                	push   0x60
c001f20e:	fb                   	sti    
c001f20f:	eb 37                	jmp    c001f248 <syscall_common_stub>

c001f211 <irq0>:
c001f211:	fa                   	cli    
c001f212:	6a 00                	push   0x0
c001f214:	6a 20                	push   0x20

c001f216 <int_common_stub>:
c001f216:	60                   	pusha  
c001f217:	1e                   	push   ds
c001f218:	06                   	push   es
c001f219:	0f a0                	push   fs
c001f21b:	0f a8                	push   gs
c001f21d:	66 b8 10 00          	mov    ax,0x10
c001f221:	66 8e d8             	mov    ds,ax
c001f224:	66 8e c0             	mov    es,ax
c001f227:	66 8e e0             	mov    fs,ax
c001f22a:	66 8e e8             	mov    gs,ax
c001f22d:	54                   	push   esp
c001f22e:	fc                   	cld    
c001f22f:	e8 70 dc fe ff       	call   c000cea4 <int_handler>
c001f234:	81 c4 04 00 00 00    	add    esp,0x4
c001f23a:	0f a9                	pop    gs
c001f23c:	0f a1                	pop    fs
c001f23e:	07                   	pop    es
c001f23f:	1f                   	pop    ds
c001f240:	61                   	popa   
c001f241:	81 c4 08 00 00 00    	add    esp,0x8
c001f247:	cf                   	iret   

c001f248 <syscall_common_stub>:
c001f248:	60                   	pusha  
c001f249:	1e                   	push   ds
c001f24a:	06                   	push   es
c001f24b:	0f a0                	push   fs
c001f24d:	0f a8                	push   gs
c001f24f:	66 b8 10 00          	mov    ax,0x10
c001f253:	66 8e d8             	mov    ds,ax
c001f256:	66 8e c0             	mov    es,ax
c001f259:	66 8e e0             	mov    fs,ax
c001f25c:	66 8e e8             	mov    gs,ax
c001f25f:	54                   	push   esp
c001f260:	fc                   	cld    
c001f261:	e8 3e dc fe ff       	call   c000cea4 <int_handler>
c001f266:	81 c4 04 00 00 00    	add    esp,0x4
c001f26c:	0f a9                	pop    gs
c001f26e:	0f a1                	pop    fs
c001f270:	07                   	pop    es
c001f271:	1f                   	pop    ds
c001f272:	e8 f3 29 ff ff       	call   c0011c6a <KiCheckSignalZ>
c001f277:	3d 00 00 00 00       	cmp    eax,0x0
c001f27c:	0f 84 c0 00 00 00    	je     c001f342 <skipSignals>
c001f282:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f287:	61                   	popa   
c001f288:	53                   	push   ebx
c001f289:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f28f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f292:	5b                   	pop    ebx
c001f293:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f298:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f29b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f29e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f2a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f2a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f2a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f2aa:	81 c4 08 00 00 00    	add    esp,0x8
c001f2b0:	5e                   	pop    esi
c001f2b1:	5b                   	pop    ebx
c001f2b2:	59                   	pop    ecx
c001f2b3:	5a                   	pop    edx
c001f2b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f2b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f2ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f2bd:	52                   	push   edx
c001f2be:	51                   	push   ecx
c001f2bf:	53                   	push   ebx
c001f2c0:	56                   	push   esi
c001f2c1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f2c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f2ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f2cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2d6:	60                   	pusha  
c001f2d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2e0:	89 e3                	mov    ebx,esp
c001f2e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2e5:	52                   	push   edx
c001f2e6:	68 06 f3 01 c0       	push   0xc001f306
c001f2eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2ee:	89 dc                	mov    esp,ebx
c001f2f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2f3:	68 23 00 00 00       	push   0x23
c001f2f8:	51                   	push   ecx
c001f2f9:	68 02 02 00 00       	push   0x202
c001f2fe:	68 1b 00 00 00       	push   0x1b
c001f303:	ff 36                	push   DWORD PTR [esi]
c001f305:	cf                   	iret   

c001f306 <finishSignal>:
c001f306:	cd 0f                	int    0xf

c001f308 <finishSignal2>:
c001f308:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f30e:	e8 d4 29 ff ff       	call   c0011ce7 <KiFinishSignalZ>
c001f313:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f319:	68 23 00 00 00       	push   0x23
c001f31e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f321:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f324:	68 1b 00 00 00       	push   0x1b
c001f329:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f32c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f32f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f332:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f335:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f338:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f33b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f33e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f341:	cf                   	iret   

c001f342 <skipSignals>:
c001f342:	61                   	popa   
c001f343:	81 c4 08 00 00 00    	add    esp,0x8
c001f349:	cf                   	iret   
c001f34a:	90                   	nop
c001f34b:	90                   	nop

c001f34c <irq16>:
c001f34c:	fa                   	cli    
c001f34d:	6a 00                	push   0x0
c001f34f:	6a 30                	push   0x30
c001f351:	e9 c0 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f356 <irq17>:
c001f356:	fa                   	cli    
c001f357:	6a 00                	push   0x0
c001f359:	6a 31                	push   0x31
c001f35b:	e9 b6 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f360 <irq18>:
c001f360:	fa                   	cli    
c001f361:	6a 00                	push   0x0
c001f363:	6a 32                	push   0x32
c001f365:	e9 ac fe ff ff       	jmp    c001f216 <int_common_stub>

c001f36a <irq19>:
c001f36a:	fa                   	cli    
c001f36b:	6a 00                	push   0x0
c001f36d:	6a 33                	push   0x33
c001f36f:	e9 a2 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f374 <irq20>:
c001f374:	fa                   	cli    
c001f375:	6a 00                	push   0x0
c001f377:	6a 34                	push   0x34
c001f379:	e9 98 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f37e <irq21>:
c001f37e:	fa                   	cli    
c001f37f:	6a 00                	push   0x0
c001f381:	6a 35                	push   0x35
c001f383:	e9 8e fe ff ff       	jmp    c001f216 <int_common_stub>

c001f388 <irq22>:
c001f388:	fa                   	cli    
c001f389:	6a 00                	push   0x0
c001f38b:	6a 36                	push   0x36
c001f38d:	e9 84 fe ff ff       	jmp    c001f216 <int_common_stub>

c001f392 <irq23>:
c001f392:	fa                   	cli    
c001f393:	6a 00                	push   0x0
c001f395:	6a 37                	push   0x37
c001f397:	e9 7a fe ff ff       	jmp    c001f216 <int_common_stub>
c001f39c:	66 90                	xchg   ax,ax
c001f39e:	66 90                	xchg   ax,ax

c001f3a0 <i386GetRDRAND>:
c001f3a0:	b9 64 00 00 00       	mov    ecx,0x64

c001f3a5 <retry>:
c001f3a5:	0f c7 f0             	rdrand eax
c001f3a8:	72 05                	jb     c001f3af <retry.done>
c001f3aa:	e2 f9                	loop   c001f3a5 <retry>

c001f3ac <retry.fail>:
c001f3ac:	31 c0                	xor    eax,eax
c001f3ae:	c3                   	ret    

c001f3af <retry.done>:
c001f3af:	c3                   	ret    

c001f3b0 <absolutelyNoChanceInHell>:
c001f3b0:	b8 01 00 00 00       	mov    eax,0x1
c001f3b5:	0f a2                	cpuid  
c001f3b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f3bd:	74 06                	je     c001f3c5 <sseDetect.noSSE>
c001f3bf:	b8 01 00 00 00       	mov    eax,0x1
c001f3c4:	c3                   	ret    

c001f3c5 <sseDetect.noSSE>:
c001f3c5:	31 c0                	xor    eax,eax
c001f3c7:	c3                   	ret    

c001f3c8 <sseSave>:
c001f3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3cc:	0f ae 00             	fxsave [eax]
c001f3cf:	c3                   	ret    

c001f3d0 <sseLoad>:
c001f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d4:	0f ae 08             	fxrstor [eax]
c001f3d7:	c3                   	ret    

c001f3d8 <sseInit>:
c001f3d8:	e8 42 00 00 00       	call   c001f41f <x87Init>
c001f3dd:	0f 20 e0             	mov    eax,cr4
c001f3e0:	66 0d 00 06          	or     ax,0x600
c001f3e4:	0f 22 e0             	mov    cr4,eax
c001f3e7:	c3                   	ret    

c001f3e8 <sseClose>:
c001f3e8:	c3                   	ret    
c001f3e9:	66 90                	xchg   ax,ax
c001f3eb:	66 90                	xchg   ax,ax
c001f3ed:	66 90                	xchg   ax,ax
c001f3ef:	90                   	nop

c001f3f0 <value_37F>:
c001f3f0:	7f 03                	jg     c001f3f5 <value_37A+0x1>

c001f3f2 <value_37E>:
c001f3f2:	7e 03                	jle    c001f3f7 <x87Detect+0x1>

c001f3f4 <value_37A>:
c001f3f4:	7a 03                	jp     c001f3f9 <x87Detect+0x3>

c001f3f6 <x87Detect>:
c001f3f6:	b8 01 00 00 00       	mov    eax,0x1
c001f3fb:	0f a2                	cpuid  
c001f3fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f403:	74 06                	je     c001f40b <x87Detect.nox87>
c001f405:	b8 01 00 00 00       	mov    eax,0x1
c001f40a:	c3                   	ret    

c001f40b <x87Detect.nox87>:
c001f40b:	b8 00 00 00 00       	mov    eax,0x0
c001f410:	c3                   	ret    

c001f411 <x87Save>:
c001f411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f415:	dd 30                	fnsave [eax]
c001f417:	c3                   	ret    

c001f418 <x87Load>:
c001f418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f41c:	dd 20                	frstor [eax]
c001f41e:	c3                   	ret    

c001f41f <x87Init>:
c001f41f:	0f 20 c0             	mov    eax,cr0
c001f422:	66 25 fb ff          	and    ax,0xfffb
c001f426:	66 0d 22 00          	or     ax,0x22
c001f42a:	0f 22 c0             	mov    cr0,eax
c001f42d:	db e3                	fninit 
c001f42f:	0f 06                	clts   
c001f431:	d9 2d f4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3f4
c001f437:	c3                   	ret    

c001f438 <x87Close>:
c001f438:	c3                   	ret    
c001f439:	66 90                	xchg   ax,ax
c001f43b:	90                   	nop

c001f43c <__do_global_ctors_aux>:
c001f43c:	a1 f0 03 02 c0       	mov    eax,ds:0xc00203f0
c001f441:	83 f8 ff             	cmp    eax,0xffffffff
c001f444:	74 1a                	je     c001f460 <__do_global_ctors_aux+0x24>
c001f446:	55                   	push   ebp
c001f447:	89 e5                	mov    ebp,esp
c001f449:	53                   	push   ebx
c001f44a:	52                   	push   edx
c001f44b:	bb f0 03 02 c0       	mov    ebx,0xc00203f0
c001f450:	ff d0                	call   eax
c001f452:	83 eb 04             	sub    ebx,0x4
c001f455:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f457:	83 f8 ff             	cmp    eax,0xffffffff
c001f45a:	75 f4                	jne    c001f450 <__do_global_ctors_aux+0x14>
c001f45c:	58                   	pop    eax
c001f45d:	5b                   	pop    ebx
c001f45e:	5d                   	pop    ebp
c001f45f:	c3                   	ret    
c001f460:	c3                   	ret    
c001f461:	66 90                	xchg   ax,ax
c001f463:	90                   	nop

c001f464 <__divdi3>:
c001f464:	55                   	push   ebp
c001f465:	57                   	push   edi
c001f466:	56                   	push   esi
c001f467:	53                   	push   ebx
c001f468:	83 ec 1c             	sub    esp,0x1c
c001f46b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f46f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f473:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f476:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f47a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f47e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f482:	85 db                	test   ebx,ebx
c001f484:	0f 88 8e 00 00 00    	js     c001f518 <__divdi3+0xb4>
c001f48a:	89 dd                	mov    ebp,ebx
c001f48c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f494:	89 d3                	mov    ebx,edx
c001f496:	85 d2                	test   edx,edx
c001f498:	79 0d                	jns    c001f4a7 <__divdi3+0x43>
c001f49a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f49e:	f7 d8                	neg    eax
c001f4a0:	83 d2 00             	adc    edx,0x0
c001f4a3:	f7 da                	neg    edx
c001f4a5:	89 d3                	mov    ebx,edx
c001f4a7:	89 c7                	mov    edi,eax
c001f4a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4ac:	85 db                	test   ebx,ebx
c001f4ae:	75 48                	jne    c001f4f8 <__divdi3+0x94>
c001f4b0:	39 ef                	cmp    edi,ebp
c001f4b2:	76 24                	jbe    c001f4d8 <__divdi3+0x74>
c001f4b4:	89 ea                	mov    edx,ebp
c001f4b6:	f7 f7                	div    edi
c001f4b8:	89 c1                	mov    ecx,eax
c001f4ba:	31 f6                	xor    esi,esi
c001f4bc:	89 c8                	mov    eax,ecx
c001f4be:	89 f2                	mov    edx,esi
c001f4c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4c4:	85 c9                	test   ecx,ecx
c001f4c6:	74 07                	je     c001f4cf <__divdi3+0x6b>
c001f4c8:	f7 d8                	neg    eax
c001f4ca:	83 d2 00             	adc    edx,0x0
c001f4cd:	f7 da                	neg    edx
c001f4cf:	83 c4 1c             	add    esp,0x1c
c001f4d2:	5b                   	pop    ebx
c001f4d3:	5e                   	pop    esi
c001f4d4:	5f                   	pop    edi
c001f4d5:	5d                   	pop    ebp
c001f4d6:	c3                   	ret    
c001f4d7:	90                   	nop
c001f4d8:	85 ff                	test   edi,edi
c001f4da:	75 0b                	jne    c001f4e7 <__divdi3+0x83>
c001f4dc:	b8 01 00 00 00       	mov    eax,0x1
c001f4e1:	31 d2                	xor    edx,edx
c001f4e3:	f7 f3                	div    ebx
c001f4e5:	89 c7                	mov    edi,eax
c001f4e7:	31 d2                	xor    edx,edx
c001f4e9:	89 e8                	mov    eax,ebp
c001f4eb:	f7 f7                	div    edi
c001f4ed:	89 c6                	mov    esi,eax
c001f4ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4f2:	f7 f7                	div    edi
c001f4f4:	89 c1                	mov    ecx,eax
c001f4f6:	eb c4                	jmp    c001f4bc <__divdi3+0x58>
c001f4f8:	39 eb                	cmp    ebx,ebp
c001f4fa:	77 3c                	ja     c001f538 <__divdi3+0xd4>
c001f4fc:	0f bd f3             	bsr    esi,ebx
c001f4ff:	83 f6 1f             	xor    esi,0x1f
c001f502:	75 40                	jne    c001f544 <__divdi3+0xe0>
c001f504:	39 eb                	cmp    ebx,ebp
c001f506:	72 09                	jb     c001f511 <__divdi3+0xad>
c001f508:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f50b:	0f 87 97 00 00 00    	ja     c001f5a8 <__divdi3+0x144>
c001f511:	b9 01 00 00 00       	mov    ecx,0x1
c001f516:	eb a4                	jmp    c001f4bc <__divdi3+0x58>
c001f518:	f7 d9                	neg    ecx
c001f51a:	83 d3 00             	adc    ebx,0x0
c001f51d:	f7 db                	neg    ebx
c001f51f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f522:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f526:	89 dd                	mov    ebp,ebx
c001f528:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f530:	e9 5f ff ff ff       	jmp    c001f494 <__divdi3+0x30>
c001f535:	8d 76 00             	lea    esi,[esi+0x0]
c001f538:	31 f6                	xor    esi,esi
c001f53a:	31 c9                	xor    ecx,ecx
c001f53c:	e9 7b ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f541:	8d 76 00             	lea    esi,[esi+0x0]
c001f544:	b8 20 00 00 00       	mov    eax,0x20
c001f549:	29 f0                	sub    eax,esi
c001f54b:	89 f1                	mov    ecx,esi
c001f54d:	d3 e3                	shl    ebx,cl
c001f54f:	89 fa                	mov    edx,edi
c001f551:	88 c1                	mov    cl,al
c001f553:	d3 ea                	shr    edx,cl
c001f555:	09 da                	or     edx,ebx
c001f557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f55b:	89 f1                	mov    ecx,esi
c001f55d:	d3 e7                	shl    edi,cl
c001f55f:	89 eb                	mov    ebx,ebp
c001f561:	88 c1                	mov    cl,al
c001f563:	d3 eb                	shr    ebx,cl
c001f565:	89 f1                	mov    ecx,esi
c001f567:	d3 e5                	shl    ebp,cl
c001f569:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f56c:	88 c1                	mov    cl,al
c001f56e:	d3 ea                	shr    edx,cl
c001f570:	09 d5                	or     ebp,edx
c001f572:	89 e8                	mov    eax,ebp
c001f574:	89 da                	mov    edx,ebx
c001f576:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f57a:	89 d3                	mov    ebx,edx
c001f57c:	89 c5                	mov    ebp,eax
c001f57e:	f7 e7                	mul    edi
c001f580:	39 d3                	cmp    ebx,edx
c001f582:	72 18                	jb     c001f59c <__divdi3+0x138>
c001f584:	74 0a                	je     c001f590 <__divdi3+0x12c>
c001f586:	89 e9                	mov    ecx,ebp
c001f588:	31 f6                	xor    esi,esi
c001f58a:	e9 2d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f58f:	90                   	nop
c001f590:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f593:	89 f1                	mov    ecx,esi
c001f595:	d3 e7                	shl    edi,cl
c001f597:	39 c7                	cmp    edi,eax
c001f599:	73 eb                	jae    c001f586 <__divdi3+0x122>
c001f59b:	90                   	nop
c001f59c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f59f:	31 f6                	xor    esi,esi
c001f5a1:	e9 16 ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	31 c9                	xor    ecx,ecx
c001f5aa:	e9 0d ff ff ff       	jmp    c001f4bc <__divdi3+0x58>
c001f5af:	90                   	nop

c001f5b0 <__moddi3>:
c001f5b0:	55                   	push   ebp
c001f5b1:	57                   	push   edi
c001f5b2:	56                   	push   esi
c001f5b3:	53                   	push   ebx
c001f5b4:	83 ec 2c             	sub    esp,0x2c
c001f5b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f5bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f5bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f5c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f5c7:	85 db                	test   ebx,ebx
c001f5c9:	0f 88 85 00 00 00    	js     c001f654 <__moddi3+0xa4>
c001f5cf:	89 de                	mov    esi,ebx
c001f5d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	85 d2                	test   edx,edx
c001f5dd:	79 09                	jns    c001f5e8 <__moddi3+0x38>
c001f5df:	f7 d8                	neg    eax
c001f5e1:	83 d2 00             	adc    edx,0x0
c001f5e4:	f7 da                	neg    edx
c001f5e6:	89 d7                	mov    edi,edx
c001f5e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5ec:	89 cd                	mov    ebp,ecx
c001f5ee:	85 ff                	test   edi,edi
c001f5f0:	75 52                	jne    c001f644 <__moddi3+0x94>
c001f5f2:	89 c3                	mov    ebx,eax
c001f5f4:	39 f0                	cmp    eax,esi
c001f5f6:	76 24                	jbe    c001f61c <__moddi3+0x6c>
c001f5f8:	89 c8                	mov    eax,ecx
c001f5fa:	89 f2                	mov    edx,esi
c001f5fc:	f7 f3                	div    ebx
c001f5fe:	89 d6                	mov    esi,edx
c001f600:	89 f0                	mov    eax,esi
c001f602:	31 d2                	xor    edx,edx
c001f604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f608:	85 c9                	test   ecx,ecx
c001f60a:	74 07                	je     c001f613 <__moddi3+0x63>
c001f60c:	f7 d8                	neg    eax
c001f60e:	83 d2 00             	adc    edx,0x0
c001f611:	f7 da                	neg    edx
c001f613:	83 c4 2c             	add    esp,0x2c
c001f616:	5b                   	pop    ebx
c001f617:	5e                   	pop    esi
c001f618:	5f                   	pop    edi
c001f619:	5d                   	pop    ebp
c001f61a:	c3                   	ret    
c001f61b:	90                   	nop
c001f61c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f620:	85 db                	test   ebx,ebx
c001f622:	75 0d                	jne    c001f631 <__moddi3+0x81>
c001f624:	b8 01 00 00 00       	mov    eax,0x1
c001f629:	31 d2                	xor    edx,edx
c001f62b:	f7 f7                	div    edi
c001f62d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f631:	89 f0                	mov    eax,esi
c001f633:	31 d2                	xor    edx,edx
c001f635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f639:	f7 f7                	div    edi
c001f63b:	89 e8                	mov    eax,ebp
c001f63d:	f7 f7                	div    edi
c001f63f:	89 d6                	mov    esi,edx
c001f641:	eb bd                	jmp    c001f600 <__moddi3+0x50>
c001f643:	90                   	nop
c001f644:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f648:	39 f7                	cmp    edi,esi
c001f64a:	76 20                	jbe    c001f66c <__moddi3+0xbc>
c001f64c:	89 c8                	mov    eax,ecx
c001f64e:	89 f2                	mov    edx,esi
c001f650:	eb b2                	jmp    c001f604 <__moddi3+0x54>
c001f652:	66 90                	xchg   ax,ax
c001f654:	f7 d9                	neg    ecx
c001f656:	83 d3 00             	adc    ebx,0x0
c001f659:	f7 db                	neg    ebx
c001f65b:	89 de                	mov    esi,ebx
c001f65d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f665:	e9 6f ff ff ff       	jmp    c001f5d9 <__moddi3+0x29>
c001f66a:	66 90                	xchg   ax,ax
c001f66c:	0f bd c7             	bsr    eax,edi
c001f66f:	83 f0 1f             	xor    eax,0x1f
c001f672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f676:	75 24                	jne    c001f69c <__moddi3+0xec>
c001f678:	39 f7                	cmp    edi,esi
c001f67a:	72 06                	jb     c001f682 <__moddi3+0xd2>
c001f67c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f680:	77 0c                	ja     c001f68e <__moddi3+0xde>
c001f682:	89 e9                	mov    ecx,ebp
c001f684:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f688:	19 fe                	sbb    esi,edi
c001f68a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f692:	89 f2                	mov    edx,esi
c001f694:	e9 6b ff ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f699:	8d 76 00             	lea    esi,[esi+0x0]
c001f69c:	b8 20 00 00 00       	mov    eax,0x20
c001f6a1:	89 c2                	mov    edx,eax
c001f6a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f6a7:	29 da                	sub    edx,ebx
c001f6a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f6ad:	88 d9                	mov    cl,bl
c001f6af:	d3 e7                	shl    edi,cl
c001f6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6b5:	88 d1                	mov    cl,dl
c001f6b7:	d3 e8                	shr    eax,cl
c001f6b9:	09 c7                	or     edi,eax
c001f6bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f6bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6c3:	89 d8                	mov    eax,ebx
c001f6c5:	88 d9                	mov    cl,bl
c001f6c7:	d3 e7                	shl    edi,cl
c001f6c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6cd:	89 f3                	mov    ebx,esi
c001f6cf:	88 d1                	mov    cl,dl
c001f6d1:	d3 eb                	shr    ebx,cl
c001f6d3:	89 c7                	mov    edi,eax
c001f6d5:	88 c1                	mov    cl,al
c001f6d7:	d3 e6                	shl    esi,cl
c001f6d9:	89 e8                	mov    eax,ebp
c001f6db:	88 d1                	mov    cl,dl
c001f6dd:	d3 e8                	shr    eax,cl
c001f6df:	09 f0                	or     eax,esi
c001f6e1:	89 f9                	mov    ecx,edi
c001f6e3:	d3 e5                	shl    ebp,cl
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6eb:	89 d3                	mov    ebx,edx
c001f6ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6f1:	89 c6                	mov    esi,eax
c001f6f3:	89 d1                	mov    ecx,edx
c001f6f5:	39 d3                	cmp    ebx,edx
c001f6f7:	72 27                	jb     c001f720 <__moddi3+0x170>
c001f6f9:	74 21                	je     c001f71c <__moddi3+0x16c>
c001f6fb:	29 f5                	sub    ebp,esi
c001f6fd:	19 cb                	sbb    ebx,ecx
c001f6ff:	89 de                	mov    esi,ebx
c001f701:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f705:	d3 e6                	shl    esi,cl
c001f707:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f70b:	89 f9                	mov    ecx,edi
c001f70d:	d3 ed                	shr    ebp,cl
c001f70f:	09 ee                	or     esi,ebp
c001f711:	89 f0                	mov    eax,esi
c001f713:	d3 eb                	shr    ebx,cl
c001f715:	89 da                	mov    edx,ebx
c001f717:	e9 e8 fe ff ff       	jmp    c001f604 <__moddi3+0x54>
c001f71c:	39 c5                	cmp    ebp,eax
c001f71e:	73 db                	jae    c001f6fb <__moddi3+0x14b>
c001f720:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f724:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f728:	89 d1                	mov    ecx,edx
c001f72a:	89 c6                	mov    esi,eax
c001f72c:	eb cd                	jmp    c001f6fb <__moddi3+0x14b>
c001f72e:	66 90                	xchg   ax,ax

c001f730 <__udivdi3>:
c001f730:	55                   	push   ebp
c001f731:	57                   	push   edi
c001f732:	56                   	push   esi
c001f733:	53                   	push   ebx
c001f734:	83 ec 1c             	sub    esp,0x1c
c001f737:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f73b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f73f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f743:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f747:	85 d2                	test   edx,edx
c001f749:	75 41                	jne    c001f78c <__udivdi3+0x5c>
c001f74b:	39 f7                	cmp    edi,esi
c001f74d:	76 15                	jbe    c001f764 <__udivdi3+0x34>
c001f74f:	89 e8                	mov    eax,ebp
c001f751:	89 f2                	mov    edx,esi
c001f753:	f7 f7                	div    edi
c001f755:	31 db                	xor    ebx,ebx
c001f757:	89 da                	mov    edx,ebx
c001f759:	83 c4 1c             	add    esp,0x1c
c001f75c:	5b                   	pop    ebx
c001f75d:	5e                   	pop    esi
c001f75e:	5f                   	pop    edi
c001f75f:	5d                   	pop    ebp
c001f760:	c3                   	ret    
c001f761:	8d 76 00             	lea    esi,[esi+0x0]
c001f764:	89 f9                	mov    ecx,edi
c001f766:	85 ff                	test   edi,edi
c001f768:	75 0b                	jne    c001f775 <__udivdi3+0x45>
c001f76a:	b8 01 00 00 00       	mov    eax,0x1
c001f76f:	31 d2                	xor    edx,edx
c001f771:	f7 f7                	div    edi
c001f773:	89 c1                	mov    ecx,eax
c001f775:	31 d2                	xor    edx,edx
c001f777:	89 f0                	mov    eax,esi
c001f779:	f7 f1                	div    ecx
c001f77b:	89 c3                	mov    ebx,eax
c001f77d:	89 e8                	mov    eax,ebp
c001f77f:	f7 f1                	div    ecx
c001f781:	89 da                	mov    edx,ebx
c001f783:	83 c4 1c             	add    esp,0x1c
c001f786:	5b                   	pop    ebx
c001f787:	5e                   	pop    esi
c001f788:	5f                   	pop    edi
c001f789:	5d                   	pop    ebp
c001f78a:	c3                   	ret    
c001f78b:	90                   	nop
c001f78c:	39 f2                	cmp    edx,esi
c001f78e:	77 1c                	ja     c001f7ac <__udivdi3+0x7c>
c001f790:	0f bd da             	bsr    ebx,edx
c001f793:	83 f3 1f             	xor    ebx,0x1f
c001f796:	75 24                	jne    c001f7bc <__udivdi3+0x8c>
c001f798:	39 f2                	cmp    edx,esi
c001f79a:	72 08                	jb     c001f7a4 <__udivdi3+0x74>
c001f79c:	39 ef                	cmp    edi,ebp
c001f79e:	0f 87 84 00 00 00    	ja     c001f828 <__udivdi3+0xf8>
c001f7a4:	b8 01 00 00 00       	mov    eax,0x1
c001f7a9:	eb ac                	jmp    c001f757 <__udivdi3+0x27>
c001f7ab:	90                   	nop
c001f7ac:	31 db                	xor    ebx,ebx
c001f7ae:	31 c0                	xor    eax,eax
c001f7b0:	89 da                	mov    edx,ebx
c001f7b2:	83 c4 1c             	add    esp,0x1c
c001f7b5:	5b                   	pop    ebx
c001f7b6:	5e                   	pop    esi
c001f7b7:	5f                   	pop    edi
c001f7b8:	5d                   	pop    ebp
c001f7b9:	c3                   	ret    
c001f7ba:	66 90                	xchg   ax,ax
c001f7bc:	b8 20 00 00 00       	mov    eax,0x20
c001f7c1:	29 d8                	sub    eax,ebx
c001f7c3:	88 d9                	mov    cl,bl
c001f7c5:	d3 e2                	shl    edx,cl
c001f7c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f7cb:	89 fa                	mov    edx,edi
c001f7cd:	88 c1                	mov    cl,al
c001f7cf:	d3 ea                	shr    edx,cl
c001f7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7d5:	09 d1                	or     ecx,edx
c001f7d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7db:	88 d9                	mov    cl,bl
c001f7dd:	d3 e7                	shl    edi,cl
c001f7df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7e3:	89 f7                	mov    edi,esi
c001f7e5:	88 c1                	mov    cl,al
c001f7e7:	d3 ef                	shr    edi,cl
c001f7e9:	88 d9                	mov    cl,bl
c001f7eb:	d3 e6                	shl    esi,cl
c001f7ed:	89 ea                	mov    edx,ebp
c001f7ef:	88 c1                	mov    cl,al
c001f7f1:	d3 ea                	shr    edx,cl
c001f7f3:	09 d6                	or     esi,edx
c001f7f5:	89 f0                	mov    eax,esi
c001f7f7:	89 fa                	mov    edx,edi
c001f7f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7fd:	89 d7                	mov    edi,edx
c001f7ff:	89 c6                	mov    esi,eax
c001f801:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f805:	39 d7                	cmp    edi,edx
c001f807:	72 13                	jb     c001f81c <__udivdi3+0xec>
c001f809:	74 09                	je     c001f814 <__udivdi3+0xe4>
c001f80b:	89 f0                	mov    eax,esi
c001f80d:	31 db                	xor    ebx,ebx
c001f80f:	e9 43 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f814:	88 d9                	mov    cl,bl
c001f816:	d3 e5                	shl    ebp,cl
c001f818:	39 c5                	cmp    ebp,eax
c001f81a:	73 ef                	jae    c001f80b <__udivdi3+0xdb>
c001f81c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f81f:	31 db                	xor    ebx,ebx
c001f821:	e9 31 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f826:	66 90                	xchg   ax,ax
c001f828:	31 c0                	xor    eax,eax
c001f82a:	e9 28 ff ff ff       	jmp    c001f757 <__udivdi3+0x27>
c001f82f:	90                   	nop

c001f830 <__umoddi3>:
c001f830:	55                   	push   ebp
c001f831:	57                   	push   edi
c001f832:	56                   	push   esi
c001f833:	53                   	push   ebx
c001f834:	83 ec 1c             	sub    esp,0x1c
c001f837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f847:	89 da                	mov    edx,ebx
c001f849:	85 c0                	test   eax,eax
c001f84b:	75 37                	jne    c001f884 <__umoddi3+0x54>
c001f84d:	39 df                	cmp    edi,ebx
c001f84f:	76 13                	jbe    c001f864 <__umoddi3+0x34>
c001f851:	89 f0                	mov    eax,esi
c001f853:	f7 f7                	div    edi
c001f855:	89 d0                	mov    eax,edx
c001f857:	31 d2                	xor    edx,edx
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	5f                   	pop    edi
c001f85f:	5d                   	pop    ebp
c001f860:	c3                   	ret    
c001f861:	8d 76 00             	lea    esi,[esi+0x0]
c001f864:	89 fd                	mov    ebp,edi
c001f866:	85 ff                	test   edi,edi
c001f868:	75 0b                	jne    c001f875 <__umoddi3+0x45>
c001f86a:	b8 01 00 00 00       	mov    eax,0x1
c001f86f:	31 d2                	xor    edx,edx
c001f871:	f7 f7                	div    edi
c001f873:	89 c5                	mov    ebp,eax
c001f875:	89 d8                	mov    eax,ebx
c001f877:	31 d2                	xor    edx,edx
c001f879:	f7 f5                	div    ebp
c001f87b:	89 f0                	mov    eax,esi
c001f87d:	f7 f5                	div    ebp
c001f87f:	89 d0                	mov    eax,edx
c001f881:	eb d4                	jmp    c001f857 <__umoddi3+0x27>
c001f883:	90                   	nop
c001f884:	89 f1                	mov    ecx,esi
c001f886:	39 d8                	cmp    eax,ebx
c001f888:	76 0a                	jbe    c001f894 <__umoddi3+0x64>
c001f88a:	89 f0                	mov    eax,esi
c001f88c:	83 c4 1c             	add    esp,0x1c
c001f88f:	5b                   	pop    ebx
c001f890:	5e                   	pop    esi
c001f891:	5f                   	pop    edi
c001f892:	5d                   	pop    ebp
c001f893:	c3                   	ret    
c001f894:	0f bd e8             	bsr    ebp,eax
c001f897:	83 f5 1f             	xor    ebp,0x1f
c001f89a:	75 1c                	jne    c001f8b8 <__umoddi3+0x88>
c001f89c:	39 d8                	cmp    eax,ebx
c001f89e:	72 04                	jb     c001f8a4 <__umoddi3+0x74>
c001f8a0:	39 f7                	cmp    edi,esi
c001f8a2:	77 08                	ja     c001f8ac <__umoddi3+0x7c>
c001f8a4:	89 da                	mov    edx,ebx
c001f8a6:	29 fe                	sub    esi,edi
c001f8a8:	19 c2                	sbb    edx,eax
c001f8aa:	89 f1                	mov    ecx,esi
c001f8ac:	89 c8                	mov    eax,ecx
c001f8ae:	83 c4 1c             	add    esp,0x1c
c001f8b1:	5b                   	pop    ebx
c001f8b2:	5e                   	pop    esi
c001f8b3:	5f                   	pop    edi
c001f8b4:	5d                   	pop    ebp
c001f8b5:	c3                   	ret    
c001f8b6:	66 90                	xchg   ax,ax
c001f8b8:	ba 20 00 00 00       	mov    edx,0x20
c001f8bd:	29 ea                	sub    edx,ebp
c001f8bf:	89 e9                	mov    ecx,ebp
c001f8c1:	d3 e0                	shl    eax,cl
c001f8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8c7:	89 f8                	mov    eax,edi
c001f8c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f8cd:	88 d1                	mov    cl,dl
c001f8cf:	d3 e8                	shr    eax,cl
c001f8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8d5:	09 c1                	or     ecx,eax
c001f8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8db:	89 e9                	mov    ecx,ebp
c001f8dd:	d3 e7                	shl    edi,cl
c001f8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8e3:	89 d8                	mov    eax,ebx
c001f8e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8e9:	88 d1                	mov    cl,dl
c001f8eb:	d3 e8                	shr    eax,cl
c001f8ed:	89 c7                	mov    edi,eax
c001f8ef:	89 e9                	mov    ecx,ebp
c001f8f1:	d3 e3                	shl    ebx,cl
c001f8f3:	89 f0                	mov    eax,esi
c001f8f5:	88 d1                	mov    cl,dl
c001f8f7:	d3 e8                	shr    eax,cl
c001f8f9:	09 d8                	or     eax,ebx
c001f8fb:	89 e9                	mov    ecx,ebp
c001f8fd:	d3 e6                	shl    esi,cl
c001f8ff:	89 f3                	mov    ebx,esi
c001f901:	89 fa                	mov    edx,edi
c001f903:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f907:	89 d1                	mov    ecx,edx
c001f909:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f90d:	89 c6                	mov    esi,eax
c001f90f:	89 d7                	mov    edi,edx
c001f911:	39 d1                	cmp    ecx,edx
c001f913:	72 27                	jb     c001f93c <__umoddi3+0x10c>
c001f915:	74 21                	je     c001f938 <__umoddi3+0x108>
c001f917:	89 ca                	mov    edx,ecx
c001f919:	29 f3                	sub    ebx,esi
c001f91b:	19 fa                	sbb    edx,edi
c001f91d:	89 d0                	mov    eax,edx
c001f91f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f923:	d3 e0                	shl    eax,cl
c001f925:	89 e9                	mov    ecx,ebp
c001f927:	d3 eb                	shr    ebx,cl
c001f929:	09 d8                	or     eax,ebx
c001f92b:	d3 ea                	shr    edx,cl
c001f92d:	83 c4 1c             	add    esp,0x1c
c001f930:	5b                   	pop    ebx
c001f931:	5e                   	pop    esi
c001f932:	5f                   	pop    edi
c001f933:	5d                   	pop    ebp
c001f934:	c3                   	ret    
c001f935:	8d 76 00             	lea    esi,[esi+0x0]
c001f938:	39 c3                	cmp    ebx,eax
c001f93a:	73 db                	jae    c001f917 <__umoddi3+0xe7>
c001f93c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f940:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f944:	89 d7                	mov    edi,edx
c001f946:	89 c6                	mov    esi,eax
c001f948:	eb cd                	jmp    c001f917 <__umoddi3+0xe7>

Disassembly of section .init:

c001f94a <_init>:
c001f94a:	55                   	push   ebp
c001f94b:	89 e5                	mov    ebp,esp
c001f94d:	e8 a2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f952:	e8 e5 fa ff ff       	call   c001f43c <__do_global_ctors_aux>
c001f957:	5d                   	pop    ebp
c001f958:	c3                   	ret    

Disassembly of section .fini:

c001f959 <_fini>:
c001f959:	55                   	push   ebp
c001f95a:	89 e5                	mov    ebp,esp
c001f95c:	e8 23 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f961:	5d                   	pop    ebp
c001f962:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f964 <Computer::~Computer()>:
c001f964:	83 ec 0c             	sub    esp,0xc
c001f967:	ba 74 0c 02 c0       	mov    edx,0xc0020c74
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	89 10                	mov    DWORD PTR [eax],edx
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	83 ec 0c             	sub    esp,0xc
c001f979:	50                   	push   eax
c001f97a:	e8 7d cf fe ff       	call   c000c8fc <Device::~Device()>
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	90                   	nop
c001f983:	83 c4 0c             	add    esp,0xc
c001f986:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f988 <Computer::~Computer()>:
c001f988:	83 ec 0c             	sub    esp,0xc
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f992:	e8 cd ff ff ff       	call   c001f964 <Computer::~Computer()>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	83 ec 08             	sub    esp,0x8
c001f99d:	68 70 01 00 00       	push   0x170
c001f9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9a6:	e8 6d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f9ab:	83 c4 10             	add    esp,0x10
c001f9ae:	83 c4 0c             	add    esp,0xc
c001f9b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f9b2 <idleCommon()>:
c001f9b2:	83 ec 0c             	sub    esp,0xc
c001f9b5:	fa                   	cli    
c001f9b6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f9bc:	e8 f7 66 ff ff       	call   c00160b8 <schedule()>
c001f9c1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f9c6:	48                   	dec    eax
c001f9c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f9cc:	75 01                	jne    c001f9cf <idleCommon()+0x1d>
c001f9ce:	fb                   	sti    
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9d4:	90                   	nop
c001f9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9d6 <LinkedList<UnixFile>::LinkedList()>:
c001f9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa16:	90                   	nop
c001fa17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fa18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa20:	75 10                	jne    c001fa32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	68 88 0e 02 c0       	push   0xc0020e88
c001fa2a:	e8 24 1c ff ff       	call   c0011653 <KePanic(char const*)>
c001fa2f:	83 c4 10             	add    esp,0x10
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa38:	85 c0                	test   eax,eax
c001fa3a:	74 34                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa43:	85 c0                	test   eax,eax
c001fa45:	74 29                	je     c001fa70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa6e:	eb 65                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa76:	85 c0                	test   eax,eax
c001fa78:	75 4b                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa81:	85 c0                	test   eax,eax
c001fa83:	75 40                	jne    c001fac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa8d:	89 10                	mov    DWORD PTR [eax],edx
c001fa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faaf:	85 c0                	test   eax,eax
c001fab1:	74 22                	je     c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fabb:	e8 93 1b ff ff       	call   c0011653 <KePanic(char const*)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	eb 10                	jmp    c001fad5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fac5:	83 ec 0c             	sub    esp,0xc
c001fac8:	68 b4 0e 02 c0       	push   0xc0020eb4
c001facd:	e8 81 1b ff ff       	call   c0011653 <KePanic(char const*)>
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fadc:	8d 50 01             	lea    edx,[eax+0x1]
c001fadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fae6:	90                   	nop
c001fae7:	83 c4 0c             	add    esp,0xc
c001faea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001faec <LinkedList<UnixFile>::getFirstElement()>:
c001faec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001faf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001faf4 <LinkedList<UnixFile>::removeFirst()>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fafd:	85 c0                	test   eax,eax
c001faff:	75 12                	jne    c001fb13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fb01:	83 ec 0c             	sub    esp,0xc
c001fb04:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fb09:	e8 45 1b ff ff       	call   c0011653 <KePanic(char const*)>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	eb 7e                	jmp    c001fb91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb1d:	85 c0                	test   eax,eax
c001fb1f:	74 10                	je     c001fb31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fb21:	83 ec 0c             	sub    esp,0xc
c001fb24:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fb29:	e8 25 1b ff ff       	call   c0011653 <KePanic(char const*)>
c001fb2e:	83 c4 10             	add    esp,0x10
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb3a:	85 c0                	test   eax,eax
c001fb3c:	75 33                	jne    c001fb71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb5a:	83 f8 01             	cmp    eax,0x1
c001fb5d:	74 21                	je     c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb5f:	83 ec 0c             	sub    esp,0xc
c001fb62:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fb67:	e8 e7 1a ff ff       	call   c0011653 <KePanic(char const*)>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	eb 0f                	jmp    c001fb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	89 10                	mov    DWORD PTR [eax],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb87:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb9e <DriverlessDevice::~DriverlessDevice()>:
c001fb9e:	ba 5c 1b 02 c0       	mov    edx,0xc0021b5c
c001fba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba7:	89 10                	mov    DWORD PTR [eax],edx
c001fba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbad:	50                   	push   eax
c001fbae:	e8 49 cd fe ff       	call   c000c8fc <Device::~Device()>
c001fbb3:	83 c4 04             	add    esp,0x4
c001fbb6:	90                   	nop
c001fbb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fbb8 <DriverlessDevice::~DriverlessDevice()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbc2:	e8 d7 ff ff ff       	call   c001fb9e <DriverlessDevice::~DriverlessDevice()>
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	83 ec 08             	sub    esp,0x8
c001fbcd:	68 58 01 00 00       	push   0x158
c001fbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd6:	e8 3d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	83 c4 0c             	add    esp,0xc
c001fbe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbe2 <LinkedList<Device>::addElement(Device*)>:
c001fbe2:	83 ec 0c             	sub    esp,0xc
c001fbe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbea:	75 10                	jne    c001fbfc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	68 88 0e 02 c0       	push   0xc0020e88
c001fbf4:	e8 5a 1a ff ff       	call   c0011653 <KePanic(char const*)>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc02:	85 c0                	test   eax,eax
c001fc04:	74 3a                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	74 2f                	je     c001fc40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc3e:	eb 68                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc46:	85 c0                	test   eax,eax
c001fc48:	75 4e                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc51:	85 c0                	test   eax,eax
c001fc53:	75 43                	jne    c001fc98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc5d:	89 10                	mov    DWORD PTR [eax],edx
c001fc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc82:	85 c0                	test   eax,eax
c001fc84:	74 22                	je     c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fc8e:	e8 c0 19 ff ff       	call   c0011653 <KePanic(char const*)>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	eb 10                	jmp    c001fca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fca0:	e8 ae 19 ff ff       	call   c0011653 <KePanic(char const*)>
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcaf:	8d 50 01             	lea    edx,[eax+0x1]
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcb9:	90                   	nop
c001fcba:	83 c4 0c             	add    esp,0xc
c001fcbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fcbe <LinkedList<Device>::LinkedList()>:
c001fcbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcfe:	90                   	nop
c001fcff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fd00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd06:	85 c0                	test   eax,eax
c001fd08:	75 0e                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	85 c0                	test   eax,eax
c001fd13:	75 03                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fd15:	b0 01                	mov    al,0x1
c001fd17:	c3                   	ret    
c001fd18:	b0 00                	mov    al,0x0
c001fd1a:	90                   	nop
c001fd1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fd1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fd24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd2d:	85 c0                	test   eax,eax
c001fd2f:	75 17                	jne    c001fd48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd31:	83 ec 0c             	sub    esp,0xc
c001fd34:	68 c0 0e 02 c0       	push   0xc0020ec0
c001fd39:	e8 15 19 ff ff       	call   c0011653 <KePanic(char const*)>
c001fd3e:	83 c4 10             	add    esp,0x10
c001fd41:	e9 96 00 00 00       	jmp    c001fddc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd46:	66 90                	xchg   ax,ax
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd52:	85 c0                	test   eax,eax
c001fd54:	0f 95 c0             	setne  al
c001fd57:	0f b6 c0             	movzx  eax,al
c001fd5a:	85 c0                	test   eax,eax
c001fd5c:	74 12                	je     c001fd70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	68 0b 0f 02 c0       	push   0xc0020f0b
c001fd66:	e8 e8 18 ff ff       	call   c0011653 <KePanic(char const*)>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	66 90                	xchg   ax,ax
c001fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd79:	85 c0                	test   eax,eax
c001fd7b:	0f 94 c0             	sete   al
c001fd7e:	0f b6 c0             	movzx  eax,al
c001fd81:	85 c0                	test   eax,eax
c001fd83:	74 33                	je     c001fdb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fda1:	83 f8 01             	cmp    eax,0x1
c001fda4:	74 22                	je     c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	68 e4 0e 02 c0       	push   0xc0020ee4
c001fdae:	e8 a0 18 ff ff       	call   c0011653 <KePanic(char const*)>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	eb 10                	jmp    c001fdc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fdc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc5:	89 10                	mov    DWORD PTR [eax],edx
c001fdc7:	90                   	nop
c001fdc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdcf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdd9:	8d 76 00             	lea    esi,[esi+0x0]
c001fddc:	83 c4 0c             	add    esp,0xc
c001fddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fde0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fde8:	75 12                	jne    c001fdfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	68 88 0e 02 c0       	push   0xc0020e88
c001fdf2:	e8 5c 18 ff ff       	call   c0011653 <KePanic(char const*)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	66 90                	xchg   ax,ax
c001fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe02:	85 c0                	test   eax,eax
c001fe04:	74 36                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0d:	85 c0                	test   eax,eax
c001fe0f:	74 2b                	je     c001fe3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fe11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fe1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe38:	eb 6a                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe3a:	66 90                	xchg   ax,ax
c001fe3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe42:	85 c0                	test   eax,eax
c001fe44:	75 4e                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4d:	85 c0                	test   eax,eax
c001fe4f:	75 43                	jne    c001fe94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe59:	89 10                	mov    DWORD PTR [eax],edx
c001fe5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe7b:	85 c0                	test   eax,eax
c001fe7d:	74 25                	je     c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	68 aa 0e 02 c0       	push   0xc0020eaa
c001fe87:	e8 c7 17 ff ff       	call   c0011653 <KePanic(char const*)>
c001fe8c:	83 c4 10             	add    esp,0x10
c001fe8f:	eb 13                	jmp    c001fea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe91:	8d 76 00             	lea    esi,[esi+0x0]
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	68 b4 0e 02 c0       	push   0xc0020eb4
c001fe9c:	e8 b2 17 ff ff       	call   c0011653 <KePanic(char const*)>
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feab:	8d 50 01             	lea    edx,[eax+0x1]
c001feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001feb5:	90                   	nop
c001feb6:	83 c4 0c             	add    esp,0xc
c001feb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001febc <ACPI::~ACPI()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	ba 44 21 02 c0       	mov    edx,0xc0022144
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	89 10                	mov    DWORD PTR [eax],edx
c001feca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	50                   	push   eax
c001fed2:	e8 25 ca fe ff       	call   c000c8fc <Device::~Device()>
c001fed7:	83 c4 10             	add    esp,0x10
c001feda:	90                   	nop
c001fedb:	83 c4 0c             	add    esp,0xc
c001fede:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fee0 <ACPI::~ACPI()>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feea:	e8 cd ff ff ff       	call   c001febc <ACPI::~ACPI()>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	83 ec 08             	sub    esp,0x8
c001fef5:	68 64 12 00 00       	push   0x1264
c001fefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fefe:	e8 15 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	83 c4 0c             	add    esp,0xc
c001ff09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ff0c <LinkedList<Device>::~LinkedList()>:
c001ff0c:	90                   	nop
c001ff0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ff10 <LinkedList<Device>::isEmpty()>:
c001ff10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff16:	85 c0                	test   eax,eax
c001ff18:	75 0e                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff21:	85 c0                	test   eax,eax
c001ff23:	75 03                	jne    c001ff28 <LinkedList<Device>::isEmpty()+0x18>
c001ff25:	b0 01                	mov    al,0x1
c001ff27:	c3                   	ret    
c001ff28:	b0 00                	mov    al,0x0
c001ff2a:	90                   	nop
c001ff2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ff2c <LinkedList<Device>::getFirstElement()>:
c001ff2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff30:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff34 <LinkedList<Device>::removeFirst()>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff3d:	85 c0                	test   eax,eax
c001ff3f:	75 17                	jne    c001ff58 <LinkedList<Device>::removeFirst()+0x24>
c001ff41:	83 ec 0c             	sub    esp,0xc
c001ff44:	68 c0 0e 02 c0       	push   0xc0020ec0
c001ff49:	e8 05 17 ff ff       	call   c0011653 <KePanic(char const*)>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	e9 92 00 00 00       	jmp    c001ffe8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff56:	66 90                	xchg   ax,ax
c001ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff65:	85 c0                	test   eax,eax
c001ff67:	74 13                	je     c001ff7c <LinkedList<Device>::removeFirst()+0x48>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	68 0b 0f 02 c0       	push   0xc0020f0b
c001ff71:	e8 dd 16 ff ff       	call   c0011653 <KePanic(char const*)>
c001ff76:	83 c4 10             	add    esp,0x10
c001ff79:	8d 76 00             	lea    esi,[esi+0x0]
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff88:	85 c0                	test   eax,eax
c001ff8a:	75 34                	jne    c001ffc0 <LinkedList<Device>::removeFirst()+0x8c>
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ffa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffa8:	83 f8 01             	cmp    eax,0x1
c001ffab:	74 27                	je     c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	68 e4 0e 02 c0       	push   0xc0020ee4
c001ffb5:	e8 99 16 ff ff       	call   c0011653 <KePanic(char const*)>
c001ffba:	83 c4 10             	add    esp,0x10
c001ffbd:	eb 15                	jmp    c001ffd4 <LinkedList<Device>::removeFirst()+0xa0>
c001ffbf:	90                   	nop
c001ffc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ffcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd0:	89 10                	mov    DWORD PTR [eax],edx
c001ffd2:	66 90                	xchg   ax,ax
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffdb:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffe5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffe8:	83 c4 0c             	add    esp,0xc
c001ffeb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffec <CPU::~CPU()>:
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	ba ec 22 02 c0       	mov    edx,0xc00222ec
c001fff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff8:	89 10                	mov    DWORD PTR [eax],edx
c001fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffe:	83 ec 0c             	sub    esp,0xc
c0020001:	50                   	push   eax
c0020002:	e8 f5 c8 fe ff       	call   c000c8fc <Device::~Device()>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	90                   	nop
c002000b:	83 c4 0c             	add    esp,0xc
c002000e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020010 <CPU::~CPU()>:
c0020010:	83 ec 0c             	sub    esp,0xc
c0020013:	83 ec 0c             	sub    esp,0xc
c0020016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001a:	e8 cd ff ff ff       	call   c001ffec <CPU::~CPU()>
c002001f:	83 c4 10             	add    esp,0x10
c0020022:	83 ec 08             	sub    esp,0x8
c0020025:	68 94 11 00 00       	push   0x1194
c002002a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002e:	e8 e5 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	83 c4 0c             	add    esp,0xc
c0020039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002003c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002003c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020040:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020043:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020044 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020044:	90                   	nop
c0020045:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020048 <ThreadControlBlock::ThreadControlBlock()>:
c0020048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020057:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002005e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020062:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002006d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020078:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002007f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020083:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002008b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002008f:	90                   	nop
c0020090:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002009e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200d4:	90                   	nop
c00200d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200d6 <PCI::~PCI()>:
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c00200de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e2:	89 10                	mov    DWORD PTR [eax],edx
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	50                   	push   eax
c00200ec:	e8 a3 c2 fe ff       	call   c000c394 <Bus::~Bus()>
c00200f1:	83 c4 10             	add    esp,0x10
c00200f4:	90                   	nop
c00200f5:	83 c4 0c             	add    esp,0xc
c00200f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200fa <PCI::~PCI()>:
c00200fa:	83 ec 0c             	sub    esp,0xc
c00200fd:	83 ec 0c             	sub    esp,0xc
c0020100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020104:	e8 cd ff ff ff       	call   c00200d6 <PCI::~PCI()>
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	83 ec 08             	sub    esp,0x8
c002010f:	68 5c 01 00 00       	push   0x15c
c0020114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020118:	e8 fb a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002011d:	83 c4 10             	add    esp,0x10
c0020120:	83 c4 0c             	add    esp,0xc
c0020123:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020124 <IDE::~IDE()>:
c0020124:	83 ec 0c             	sub    esp,0xc
c0020127:	ba 80 32 02 c0       	mov    edx,0xc0023280
c002012c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020130:	89 10                	mov    DWORD PTR [eax],edx
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	50                   	push   eax
c002013a:	e8 35 cc fe ff       	call   c000cd74 <HardDiskController::~HardDiskController()>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	90                   	nop
c0020143:	83 c4 0c             	add    esp,0xc
c0020146:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020148 <IDE::~IDE()>:
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	83 ec 0c             	sub    esp,0xc
c002014e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020152:	e8 cd ff ff ff       	call   c0020124 <IDE::~IDE()>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 08             	sub    esp,0x8
c002015d:	68 70 02 00 00       	push   0x270
c0020162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020166:	e8 ad a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002016b:	83 c4 10             	add    esp,0x10
c002016e:	83 c4 0c             	add    esp,0xc
c0020171:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020172 <SATABus::~SATABus()>:
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	ba d0 32 02 c0       	mov    edx,0xc00232d0
c002017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017e:	89 10                	mov    DWORD PTR [eax],edx
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	50                   	push   eax
c0020188:	e8 e7 cb fe ff       	call   c000cd74 <HardDiskController::~HardDiskController()>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	90                   	nop
c0020191:	83 c4 0c             	add    esp,0xc
c0020194:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020196 <SATABus::~SATABus()>:
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	83 ec 0c             	sub    esp,0xc
c002019c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a0:	e8 cd ff ff ff       	call   c0020172 <SATABus::~SATABus()>
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	83 ec 08             	sub    esp,0x8
c00201ab:	68 64 01 00 00       	push   0x164
c00201b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b4:	e8 5f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201b9:	83 c4 10             	add    esp,0x10
c00201bc:	83 c4 0c             	add    esp,0xc
c00201bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00201c0 <ATA::~ATA()>:
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	ba 10 33 02 c0       	mov    edx,0xc0023310
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	89 10                	mov    DWORD PTR [eax],edx
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	50                   	push   eax
c00201d6:	e8 7b cc fe ff       	call   c000ce56 <PhysicalDisk::~PhysicalDisk()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	90                   	nop
c00201df:	83 c4 0c             	add    esp,0xc
c00201e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201e4 <ATA::~ATA()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ee:	e8 cd ff ff ff       	call   c00201c0 <ATA::~ATA()>
c00201f3:	83 c4 10             	add    esp,0x10
c00201f6:	83 ec 08             	sub    esp,0x8
c00201f9:	68 7c 01 00 00       	push   0x17c
c00201fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020202:	e8 11 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	83 c4 0c             	add    esp,0xc
c002020d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002020e <ATAPI::~ATAPI()>:
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	ba 58 33 02 c0       	mov    edx,0xc0023358
c0020216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021a:	89 10                	mov    DWORD PTR [eax],edx
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	50                   	push   eax
c0020224:	e8 2d cc fe ff       	call   c000ce56 <PhysicalDisk::~PhysicalDisk()>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	90                   	nop
c002022d:	83 c4 0c             	add    esp,0xc
c0020230:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020232 <ATAPI::~ATAPI()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	83 ec 0c             	sub    esp,0xc
c0020238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002023c:	e8 cd ff ff ff       	call   c002020e <ATAPI::~ATAPI()>
c0020241:	83 c4 10             	add    esp,0x10
c0020244:	83 ec 08             	sub    esp,0x8
c0020247:	68 84 01 00 00       	push   0x184
c002024c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020250:	e8 c3 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	83 c4 0c             	add    esp,0xc
c002025b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002025c <SATA::~SATA()>:
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c0020264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020268:	89 10                	mov    DWORD PTR [eax],edx
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	50                   	push   eax
c0020272:	e8 df cb fe ff       	call   c000ce56 <PhysicalDisk::~PhysicalDisk()>
c0020277:	83 c4 10             	add    esp,0x10
c002027a:	90                   	nop
c002027b:	83 c4 0c             	add    esp,0xc
c002027e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020280 <SATA::~SATA()>:
c0020280:	83 ec 0c             	sub    esp,0xc
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028a:	e8 cd ff ff ff       	call   c002025c <SATA::~SATA()>
c002028f:	83 c4 10             	add    esp,0x10
c0020292:	83 ec 08             	sub    esp,0x8
c0020295:	68 7c 01 00 00       	push   0x17c
c002029a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029e:	e8 75 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	83 c4 0c             	add    esp,0xc
c00202a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00202aa <SATAPI::~SATAPI()>:
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	ba 30 35 02 c0       	mov    edx,0xc0023530
c00202b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b6:	89 10                	mov    DWORD PTR [eax],edx
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	50                   	push   eax
c00202c0:	e8 91 cb fe ff       	call   c000ce56 <PhysicalDisk::~PhysicalDisk()>
c00202c5:	83 c4 10             	add    esp,0x10
c00202c8:	90                   	nop
c00202c9:	83 c4 0c             	add    esp,0xc
c00202cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00202ce <SATAPI::~SATAPI()>:
c00202ce:	83 ec 0c             	sub    esp,0xc
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d8:	e8 cd ff ff ff       	call   c00202aa <SATAPI::~SATAPI()>
c00202dd:	83 c4 10             	add    esp,0x10
c00202e0:	83 ec 08             	sub    esp,0x8
c00202e3:	68 84 01 00 00       	push   0x184
c00202e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ec:	e8 27 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	83 c4 0c             	add    esp,0xc
c00202f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202f8 <IOAPIC::~IOAPIC()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ba 70 35 02 c0       	mov    edx,0xc0023570
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	89 10                	mov    DWORD PTR [eax],edx
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	50                   	push   eax
c002030e:	e8 e9 c5 fe ff       	call   c000c8fc <Device::~Device()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	90                   	nop
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002031c <IOAPIC::~IOAPIC()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020326:	e8 cd ff ff ff       	call   c00202f8 <IOAPIC::~IOAPIC()>
c002032b:	83 c4 10             	add    esp,0x10
c002032e:	83 ec 08             	sub    esp,0x8
c0020331:	68 68 01 00 00       	push   0x168
c0020336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033a:	e8 d9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	83 c4 0c             	add    esp,0xc
c0020345:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020348 <APICTimer::~APICTimer()>:
c0020348:	83 ec 0c             	sub    esp,0xc
c002034b:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c0020350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020354:	89 10                	mov    DWORD PTR [eax],edx
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	50                   	push   eax
c002035e:	e8 65 e0 fe ff       	call   c000e3c8 <Timer::~Timer()>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	90                   	nop
c0020367:	83 c4 0c             	add    esp,0xc
c002036a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002036c <APICTimer::~APICTimer()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	83 ec 0c             	sub    esp,0xc
c0020372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020376:	e8 cd ff ff ff       	call   c0020348 <APICTimer::~APICTimer()>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	83 ec 08             	sub    esp,0x8
c0020381:	68 60 01 00 00       	push   0x160
c0020386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038a:	e8 89 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020398 <PIT::~PIT()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba 08 36 02 c0       	mov    edx,0xc0023608
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 15 e0 fe ff       	call   c000e3c8 <Timer::~Timer()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00203bc <PIT::~PIT()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <PIT::~PIT()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 5c 01 00 00       	push   0x15c
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 39 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 1d 24 02 c0       	mov    esi,0xc002241d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 39 24 02 c0       	mov    esi,0xc0022439
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
